/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientManagement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientManagement::OAIPatientManagement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientManagement::OAIPatientManagement() {
    this->initializeModel();
}

OAIPatientManagement::~OAIPatientManagement() {}

void OAIPatientManagement::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_encounters_isSet = false;
    m_encounters_isValid = false;

    m_group_code_isSet = false;
    m_group_code_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_observations_isSet = false;
    m_observations_isValid = false;

    m_patient_isSet = false;
    m_patient_isValid = false;

    m_practitioners_isSet = false;
    m_practitioners_isValid = false;
}

void OAIPatientManagement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatientManagement::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_encounters_isValid = ::OpenAPI::fromJsonValue(m_encounters, json[QString("encounters")]);
    m_encounters_isSet = !json[QString("encounters")].isNull() && m_encounters_isValid;

    m_group_code_isValid = ::OpenAPI::fromJsonValue(m_group_code, json[QString("groupCode")]);
    m_group_code_isSet = !json[QString("groupCode")].isNull() && m_group_code_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_observations_isValid = ::OpenAPI::fromJsonValue(m_observations, json[QString("observations")]);
    m_observations_isSet = !json[QString("observations")].isNull() && m_observations_isValid;

    m_patient_isValid = ::OpenAPI::fromJsonValue(m_patient, json[QString("patient")]);
    m_patient_isSet = !json[QString("patient")].isNull() && m_patient_isValid;

    m_practitioners_isValid = ::OpenAPI::fromJsonValue(m_practitioners, json[QString("practitioners")]);
    m_practitioners_isSet = !json[QString("practitioners")].isNull() && m_practitioners_isValid;
}

QString OAIPatientManagement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatientManagement::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_encounters.size() > 0) {
        obj.insert(QString("encounters"), ::OpenAPI::toJsonValue(m_encounters));
    }
    if (m_group_code_isSet) {
        obj.insert(QString("groupCode"), ::OpenAPI::toJsonValue(m_group_code));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_observations.size() > 0) {
        obj.insert(QString("observations"), ::OpenAPI::toJsonValue(m_observations));
    }
    if (m_patient.isSet()) {
        obj.insert(QString("patient"), ::OpenAPI::toJsonValue(m_patient));
    }
    if (m_practitioners.size() > 0) {
        obj.insert(QString("practitioners"), ::OpenAPI::toJsonValue(m_practitioners));
    }
    return obj;
}

OAIFhirCondition OAIPatientManagement::getCondition() const {
    return m_condition;
}
void OAIPatientManagement::setCondition(const OAIFhirCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIPatientManagement::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIPatientManagement::is_condition_Valid() const{
    return m_condition_isValid;
}

QList<OAIFhirEncounter> OAIPatientManagement::getEncounters() const {
    return m_encounters;
}
void OAIPatientManagement::setEncounters(const QList<OAIFhirEncounter> &encounters) {
    m_encounters = encounters;
    m_encounters_isSet = true;
}

bool OAIPatientManagement::is_encounters_Set() const{
    return m_encounters_isSet;
}

bool OAIPatientManagement::is_encounters_Valid() const{
    return m_encounters_isValid;
}

QString OAIPatientManagement::getGroupCode() const {
    return m_group_code;
}
void OAIPatientManagement::setGroupCode(const QString &group_code) {
    m_group_code = group_code;
    m_group_code_isSet = true;
}

bool OAIPatientManagement::is_group_code_Set() const{
    return m_group_code_isSet;
}

bool OAIPatientManagement::is_group_code_Valid() const{
    return m_group_code_isValid;
}

QString OAIPatientManagement::getIdentifier() const {
    return m_identifier;
}
void OAIPatientManagement::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIPatientManagement::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIPatientManagement::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QList<OAIFhirObservation> OAIPatientManagement::getObservations() const {
    return m_observations;
}
void OAIPatientManagement::setObservations(const QList<OAIFhirObservation> &observations) {
    m_observations = observations;
    m_observations_isSet = true;
}

bool OAIPatientManagement::is_observations_Set() const{
    return m_observations_isSet;
}

bool OAIPatientManagement::is_observations_Valid() const{
    return m_observations_isValid;
}

OAIFhirPatient OAIPatientManagement::getPatient() const {
    return m_patient;
}
void OAIPatientManagement::setPatient(const OAIFhirPatient &patient) {
    m_patient = patient;
    m_patient_isSet = true;
}

bool OAIPatientManagement::is_patient_Set() const{
    return m_patient_isSet;
}

bool OAIPatientManagement::is_patient_Valid() const{
    return m_patient_isValid;
}

QList<OAIFhirPractitioner> OAIPatientManagement::getPractitioners() const {
    return m_practitioners;
}
void OAIPatientManagement::setPractitioners(const QList<OAIFhirPractitioner> &practitioners) {
    m_practitioners = practitioners;
    m_practitioners_isSet = true;
}

bool OAIPatientManagement::is_practitioners_Set() const{
    return m_practitioners_isSet;
}

bool OAIPatientManagement::is_practitioners_Valid() const{
    return m_practitioners_isValid;
}

bool OAIPatientManagement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encounters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_practitioners.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatientManagement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
