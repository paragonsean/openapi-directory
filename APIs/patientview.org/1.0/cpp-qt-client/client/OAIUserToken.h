/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserToken.h
 *
 * 
 */

#ifndef OAIUserToken_H
#define OAIUserToken_H

#include <QJsonObject>

#include "OAIBaseGroup.h"
#include "OAIExternalStandard.h"
#include "OAIFeature.h"
#include "OAIObject.h"
#include "OAIRole.h"
#include "OAIRoute.h"
#include "OAIUser.h"
#include <QDateTime>
#include <QList>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExternalStandard;
class OAIFeature;
class OAIRole;
class OAIRoute;
class OAIUser;
class OAIBaseGroup;

class OAIUserToken : public OAIObject {
public:
    OAIUserToken();
    OAIUserToken(QString json);
    ~OAIUserToken() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAuditActions() const;
    void setAuditActions(const QList<QString> &audit_actions);
    bool is_audit_actions_Set() const;
    bool is_audit_actions_Valid() const;

    bool isCheckSecretWord() const;
    void setCheckSecretWord(const bool &check_secret_word);
    bool is_check_secret_word_Set() const;
    bool is_check_secret_word_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QDateTime getExpiration() const;
    void setExpiration(const QDateTime &expiration);
    bool is_expiration_Set() const;
    bool is_expiration_Valid() const;

    QList<OAIExternalStandard> getExternalStandards() const;
    void setExternalStandards(const QList<OAIExternalStandard> &external_standards);
    bool is_external_standards_Set() const;
    bool is_external_standards_Valid() const;

    QList<OAIFeature> getGroupFeatures() const;
    void setGroupFeatures(const QList<OAIFeature> &group_features);
    bool is_group_features_Set() const;
    bool is_group_features_Valid() const;

    bool isGroupMessagingEnabled() const;
    void setGroupMessagingEnabled(const bool &group_messaging_enabled);
    bool is_group_messaging_enabled_Set() const;
    bool is_group_messaging_enabled_Valid() const;

    bool isMustSetSecretWord() const;
    void setMustSetSecretWord(const bool &must_set_secret_word);
    bool is_must_set_secret_word_Set() const;
    bool is_must_set_secret_word_Valid() const;

    QList<OAIFeature> getPatientFeatures() const;
    void setPatientFeatures(const QList<OAIFeature> &patient_features);
    bool is_patient_features_Set() const;
    bool is_patient_features_Valid() const;

    QList<QString> getPatientMessagingFeatureTypes() const;
    void setPatientMessagingFeatureTypes(const QList<QString> &patient_messaging_feature_types);
    bool is_patient_messaging_feature_types_Set() const;
    bool is_patient_messaging_feature_types_Valid() const;

    QList<OAIRole> getPatientRoles() const;
    void setPatientRoles(const QList<OAIRole> &patient_roles);
    bool is_patient_roles_Set() const;
    bool is_patient_roles_Valid() const;

    QSet<OAIRoute> getRoutes() const;
    void setRoutes(const QSet<OAIRoute> &routes);
    bool is_routes_Set() const;
    bool is_routes_Valid() const;

    QString getSecretWord() const;
    void setSecretWord(const QString &secret_word);
    bool is_secret_word_Set() const;
    bool is_secret_word_Valid() const;

    OAIObject getSecretWordChoices() const;
    void setSecretWordChoices(const OAIObject &secret_word_choices);
    bool is_secret_word_choices_Set() const;
    bool is_secret_word_choices_Valid() const;

    QList<QString> getSecretWordIndexes() const;
    void setSecretWordIndexes(const QList<QString> &secret_word_indexes);
    bool is_secret_word_indexes_Set() const;
    bool is_secret_word_indexes_Valid() const;

    QString getSecretWordSalt() const;
    void setSecretWordSalt(const QString &secret_word_salt);
    bool is_secret_word_salt_Set() const;
    bool is_secret_word_salt_Valid() const;

    QString getSecretWordToken() const;
    void setSecretWordToken(const QString &secret_word_token);
    bool is_secret_word_token_Set() const;
    bool is_secret_word_token_Valid() const;

    QList<OAIRole> getSecurityRoles() const;
    void setSecurityRoles(const QList<OAIRole> &security_roles);
    bool is_security_roles_Set() const;
    bool is_security_roles_Valid() const;

    bool isShouldEnterCondition() const;
    void setShouldEnterCondition(const bool &should_enter_condition);
    bool is_should_enter_condition_Set() const;
    bool is_should_enter_condition_Valid() const;

    QList<OAIFeature> getStaffFeatures() const;
    void setStaffFeatures(const QList<OAIFeature> &staff_features);
    bool is_staff_features_Set() const;
    bool is_staff_features_Valid() const;

    QList<OAIRole> getStaffRoles() const;
    void setStaffRoles(const QList<OAIRole> &staff_roles);
    bool is_staff_roles_Set() const;
    bool is_staff_roles_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    OAIUser getUser() const;
    void setUser(const OAIUser &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QList<OAIFeature> getUserFeatures() const;
    void setUserFeatures(const QList<OAIFeature> &user_features);
    bool is_user_features_Set() const;
    bool is_user_features_Valid() const;

    QList<OAIBaseGroup> getUserGroups() const;
    void setUserGroups(const QList<OAIBaseGroup> &user_groups);
    bool is_user_groups_Set() const;
    bool is_user_groups_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_audit_actions;
    bool m_audit_actions_isSet;
    bool m_audit_actions_isValid;

    bool m_check_secret_word;
    bool m_check_secret_word_isSet;
    bool m_check_secret_word_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QDateTime m_expiration;
    bool m_expiration_isSet;
    bool m_expiration_isValid;

    QList<OAIExternalStandard> m_external_standards;
    bool m_external_standards_isSet;
    bool m_external_standards_isValid;

    QList<OAIFeature> m_group_features;
    bool m_group_features_isSet;
    bool m_group_features_isValid;

    bool m_group_messaging_enabled;
    bool m_group_messaging_enabled_isSet;
    bool m_group_messaging_enabled_isValid;

    bool m_must_set_secret_word;
    bool m_must_set_secret_word_isSet;
    bool m_must_set_secret_word_isValid;

    QList<OAIFeature> m_patient_features;
    bool m_patient_features_isSet;
    bool m_patient_features_isValid;

    QList<QString> m_patient_messaging_feature_types;
    bool m_patient_messaging_feature_types_isSet;
    bool m_patient_messaging_feature_types_isValid;

    QList<OAIRole> m_patient_roles;
    bool m_patient_roles_isSet;
    bool m_patient_roles_isValid;

    QSet<OAIRoute> m_routes;
    bool m_routes_isSet;
    bool m_routes_isValid;

    QString m_secret_word;
    bool m_secret_word_isSet;
    bool m_secret_word_isValid;

    OAIObject m_secret_word_choices;
    bool m_secret_word_choices_isSet;
    bool m_secret_word_choices_isValid;

    QList<QString> m_secret_word_indexes;
    bool m_secret_word_indexes_isSet;
    bool m_secret_word_indexes_isValid;

    QString m_secret_word_salt;
    bool m_secret_word_salt_isSet;
    bool m_secret_word_salt_isValid;

    QString m_secret_word_token;
    bool m_secret_word_token_isSet;
    bool m_secret_word_token_isValid;

    QList<OAIRole> m_security_roles;
    bool m_security_roles_isSet;
    bool m_security_roles_isValid;

    bool m_should_enter_condition;
    bool m_should_enter_condition_isSet;
    bool m_should_enter_condition_isValid;

    QList<OAIFeature> m_staff_features;
    bool m_staff_features_isSet;
    bool m_staff_features_isValid;

    QList<OAIRole> m_staff_roles;
    bool m_staff_roles_isSet;
    bool m_staff_roles_isValid;

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;

    OAIUser m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QList<OAIFeature> m_user_features;
    bool m_user_features_isSet;
    bool m_user_features_isValid;

    QList<OAIBaseGroup> m_user_groups;
    bool m_user_groups_isSet;
    bool m_user_groups_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserToken)

#endif // OAIUserToken_H
