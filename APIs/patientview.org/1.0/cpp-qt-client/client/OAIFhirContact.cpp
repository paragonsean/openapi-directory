/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirContact::OAIFhirContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirContact::OAIFhirContact() {
    this->initializeModel();
}

OAIFhirContact::~OAIFhirContact() {}

void OAIFhirContact::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_use_isSet = false;
    m_use_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFhirContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirContact::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_use_isValid = ::OpenAPI::fromJsonValue(m_use, json[QString("use")]);
    m_use_isSet = !json[QString("use")].isNull() && m_use_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFhirContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirContact::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_use_isSet) {
        obj.insert(QString("use"), ::OpenAPI::toJsonValue(m_use));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint64 OAIFhirContact::getId() const {
    return m_id;
}
void OAIFhirContact::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFhirContact::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFhirContact::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFhirContact::getSystem() const {
    return m_system;
}
void OAIFhirContact::setSystem(const QString &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIFhirContact::is_system_Set() const{
    return m_system_isSet;
}

bool OAIFhirContact::is_system_Valid() const{
    return m_system_isValid;
}

QString OAIFhirContact::getUse() const {
    return m_use;
}
void OAIFhirContact::setUse(const QString &use) {
    m_use = use;
    m_use_isSet = true;
}

bool OAIFhirContact::is_use_Set() const{
    return m_use_isSet;
}

bool OAIFhirContact::is_use_Valid() const{
    return m_use_isValid;
}

QString OAIFhirContact::getValue() const {
    return m_value;
}
void OAIFhirContact::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFhirContact::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFhirContact::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFhirContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
