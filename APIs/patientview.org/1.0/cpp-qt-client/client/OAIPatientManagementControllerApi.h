/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPatientManagementControllerApi_H
#define OAI_OAIPatientManagementControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICode.h"
#include "OAILookupType.h"
#include "OAIPatientManagement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPatientManagementControllerApi : public QObject {
    Q_OBJECT

public:
    OAIPatientManagementControllerApi(const int timeOut = 0);
    ~OAIPatientManagementControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  group_id qint64 [required]
    * @param[in]  identifier_id qint64 [required]
    */
    virtual void getPatientManagement(const qint64 &user_id, const qint64 &group_id, const qint64 &identifier_id);


    virtual void getPatientManagementDiagnoses();


    virtual void getPatientManagementLookupTypes();

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  group_id qint64 [required]
    * @param[in]  identifier_id qint64 [required]
    * @param[in]  oai_patient_management OAIPatientManagement [optional]
    */
    virtual void savePatientManagement(const qint64 &user_id, const qint64 &group_id, const qint64 &identifier_id, const ::OpenAPI::OptionalParam<OAIPatientManagement> &oai_patient_management = ::OpenAPI::OptionalParam<OAIPatientManagement>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  group_id qint64 [required]
    * @param[in]  identifier_id qint64 [required]
    * @param[in]  oai_patient_management OAIPatientManagement [optional]
    */
    virtual void savePatientManagementSurgeries(const qint64 &user_id, const qint64 &group_id, const qint64 &identifier_id, const ::OpenAPI::OptionalParam<OAIPatientManagement> &oai_patient_management = ::OpenAPI::OptionalParam<OAIPatientManagement>());

    /**
    * @param[in]  oai_patient_management OAIPatientManagement [optional]
    */
    virtual void validatePatientManagement(const ::OpenAPI::OptionalParam<OAIPatientManagement> &oai_patient_management = ::OpenAPI::OptionalParam<OAIPatientManagement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPatientManagementCallback(OAIHttpRequestWorker *worker);
    void getPatientManagementDiagnosesCallback(OAIHttpRequestWorker *worker);
    void getPatientManagementLookupTypesCallback(OAIHttpRequestWorker *worker);
    void savePatientManagementCallback(OAIHttpRequestWorker *worker);
    void savePatientManagementSurgeriesCallback(OAIHttpRequestWorker *worker);
    void validatePatientManagementCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPatientManagementSignal(OAIPatientManagement summary);
    void getPatientManagementDiagnosesSignal(QList<OAICode> summary);
    void getPatientManagementLookupTypesSignal(QList<OAILookupType> summary);
    void savePatientManagementSignal();
    void savePatientManagementSurgeriesSignal();
    void validatePatientManagementSignal();


    void getPatientManagementSignalFull(OAIHttpRequestWorker *worker, OAIPatientManagement summary);
    void getPatientManagementDiagnosesSignalFull(OAIHttpRequestWorker *worker, QList<OAICode> summary);
    void getPatientManagementLookupTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAILookupType> summary);
    void savePatientManagementSignalFull(OAIHttpRequestWorker *worker);
    void savePatientManagementSurgeriesSignalFull(OAIHttpRequestWorker *worker);
    void validatePatientManagementSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getPatientManagementSignalError() instead")
    void getPatientManagementSignalE(OAIPatientManagement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPatientManagementSignalError(OAIPatientManagement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPatientManagementDiagnosesSignalError() instead")
    void getPatientManagementDiagnosesSignalE(QList<OAICode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPatientManagementDiagnosesSignalError(QList<OAICode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPatientManagementLookupTypesSignalError() instead")
    void getPatientManagementLookupTypesSignalE(QList<OAILookupType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPatientManagementLookupTypesSignalError(QList<OAILookupType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savePatientManagementSignalError() instead")
    void savePatientManagementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void savePatientManagementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savePatientManagementSurgeriesSignalError() instead")
    void savePatientManagementSurgeriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void savePatientManagementSurgeriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePatientManagementSignalError() instead")
    void validatePatientManagementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void validatePatientManagementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPatientManagementSignalErrorFull() instead")
    void getPatientManagementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPatientManagementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPatientManagementDiagnosesSignalErrorFull() instead")
    void getPatientManagementDiagnosesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPatientManagementDiagnosesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPatientManagementLookupTypesSignalErrorFull() instead")
    void getPatientManagementLookupTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPatientManagementLookupTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savePatientManagementSignalErrorFull() instead")
    void savePatientManagementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savePatientManagementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savePatientManagementSurgeriesSignalErrorFull() instead")
    void savePatientManagementSurgeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savePatientManagementSurgeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePatientManagementSignalErrorFull() instead")
    void validatePatientManagementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validatePatientManagementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
