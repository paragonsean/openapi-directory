/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoute::OAIRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoute::OAIRoute() {
    this->initializeModel();
}

OAIRoute::~OAIRoute() {}

void OAIRoute::initializeModel() {

    m_controller_isSet = false;
    m_controller_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lookup_isSet = false;
    m_lookup_isValid = false;

    m_template_url_isSet = false;
    m_template_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoute::fromJsonObject(QJsonObject json) {

    m_controller_isValid = ::OpenAPI::fromJsonValue(m_controller, json[QString("controller")]);
    m_controller_isSet = !json[QString("controller")].isNull() && m_controller_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("displayOrder")]);
    m_display_order_isSet = !json[QString("displayOrder")].isNull() && m_display_order_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lookup_isValid = ::OpenAPI::fromJsonValue(m_lookup, json[QString("lookup")]);
    m_lookup_isSet = !json[QString("lookup")].isNull() && m_lookup_isValid;

    m_template_url_isValid = ::OpenAPI::fromJsonValue(m_template_url, json[QString("templateUrl")]);
    m_template_url_isSet = !json[QString("templateUrl")].isNull() && m_template_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_controller_isSet) {
        obj.insert(QString("controller"), ::OpenAPI::toJsonValue(m_controller));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("displayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lookup.isSet()) {
        obj.insert(QString("lookup"), ::OpenAPI::toJsonValue(m_lookup));
    }
    if (m_template_url_isSet) {
        obj.insert(QString("templateUrl"), ::OpenAPI::toJsonValue(m_template_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIRoute::getController() const {
    return m_controller;
}
void OAIRoute::setController(const QString &controller) {
    m_controller = controller;
    m_controller_isSet = true;
}

bool OAIRoute::is_controller_Set() const{
    return m_controller_isSet;
}

bool OAIRoute::is_controller_Valid() const{
    return m_controller_isValid;
}

QDateTime OAIRoute::getCreated() const {
    return m_created;
}
void OAIRoute::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRoute::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRoute::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIRoute::getDisplayOrder() const {
    return m_display_order;
}
void OAIRoute::setDisplayOrder(const qint32 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAIRoute::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAIRoute::is_display_order_Valid() const{
    return m_display_order_isValid;
}

qint64 OAIRoute::getId() const {
    return m_id;
}
void OAIRoute::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRoute::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRoute::is_id_Valid() const{
    return m_id_isValid;
}

OAILookup OAIRoute::getLookup() const {
    return m_lookup;
}
void OAIRoute::setLookup(const OAILookup &lookup) {
    m_lookup = lookup;
    m_lookup_isSet = true;
}

bool OAIRoute::is_lookup_Set() const{
    return m_lookup_isSet;
}

bool OAIRoute::is_lookup_Valid() const{
    return m_lookup_isValid;
}

QString OAIRoute::getTemplateUrl() const {
    return m_template_url;
}
void OAIRoute::setTemplateUrl(const QString &template_url) {
    m_template_url = template_url;
    m_template_url_isSet = true;
}

bool OAIRoute::is_template_url_Set() const{
    return m_template_url_isSet;
}

bool OAIRoute::is_template_url_Valid() const{
    return m_template_url_isValid;
}

QString OAIRoute::getTitle() const {
    return m_title;
}
void OAIRoute::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRoute::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRoute::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIRoute::getUrl() const {
    return m_url;
}
void OAIRoute::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRoute::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRoute::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_controller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
