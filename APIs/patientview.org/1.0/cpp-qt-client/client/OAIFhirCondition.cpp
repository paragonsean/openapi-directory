/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirCondition::OAIFhirCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirCondition::OAIFhirCondition() {
    this->initializeModel();
}

OAIFhirCondition::~OAIFhirCondition() {}

void OAIFhirCondition::initializeModel() {

    m_asserter_isSet = false;
    m_asserter_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_full_description_isSet = false;
    m_full_description_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIFhirCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirCondition::fromJsonObject(QJsonObject json) {

    m_asserter_isValid = ::OpenAPI::fromJsonValue(m_asserter, json[QString("asserter")]);
    m_asserter_isSet = !json[QString("asserter")].isNull() && m_asserter_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_full_description_isValid = ::OpenAPI::fromJsonValue(m_full_description, json[QString("fullDescription")]);
    m_full_description_isSet = !json[QString("fullDescription")].isNull() && m_full_description_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIFhirCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_asserter_isSet) {
        obj.insert(QString("asserter"), ::OpenAPI::toJsonValue(m_asserter));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_full_description_isSet) {
        obj.insert(QString("fullDescription"), ::OpenAPI::toJsonValue(m_full_description));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIFhirCondition::getAsserter() const {
    return m_asserter;
}
void OAIFhirCondition::setAsserter(const QString &asserter) {
    m_asserter = asserter;
    m_asserter_isSet = true;
}

bool OAIFhirCondition::is_asserter_Set() const{
    return m_asserter_isSet;
}

bool OAIFhirCondition::is_asserter_Valid() const{
    return m_asserter_isValid;
}

QString OAIFhirCondition::getCategory() const {
    return m_category;
}
void OAIFhirCondition::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIFhirCondition::is_category_Set() const{
    return m_category_isSet;
}

bool OAIFhirCondition::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIFhirCondition::getCode() const {
    return m_code;
}
void OAIFhirCondition::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIFhirCondition::is_code_Set() const{
    return m_code_isSet;
}

bool OAIFhirCondition::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIFhirCondition::getDate() const {
    return m_date;
}
void OAIFhirCondition::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIFhirCondition::is_date_Set() const{
    return m_date_isSet;
}

bool OAIFhirCondition::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIFhirCondition::getDescription() const {
    return m_description;
}
void OAIFhirCondition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFhirCondition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFhirCondition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFhirCondition::getFullDescription() const {
    return m_full_description;
}
void OAIFhirCondition::setFullDescription(const QString &full_description) {
    m_full_description = full_description;
    m_full_description_isSet = true;
}

bool OAIFhirCondition::is_full_description_Set() const{
    return m_full_description_isSet;
}

bool OAIFhirCondition::is_full_description_Valid() const{
    return m_full_description_isValid;
}

OAIGroup OAIFhirCondition::getGroup() const {
    return m_group;
}
void OAIFhirCondition::setGroup(const OAIGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIFhirCondition::is_group_Set() const{
    return m_group_isSet;
}

bool OAIFhirCondition::is_group_Valid() const{
    return m_group_isValid;
}

qint64 OAIFhirCondition::getId() const {
    return m_id;
}
void OAIFhirCondition::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFhirCondition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFhirCondition::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFhirCondition::getIdentifier() const {
    return m_identifier;
}
void OAIFhirCondition::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIFhirCondition::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIFhirCondition::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QSet<OAILink> OAIFhirCondition::getLinks() const {
    return m_links;
}
void OAIFhirCondition::setLinks(const QSet<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIFhirCondition::is_links_Set() const{
    return m_links_isSet;
}

bool OAIFhirCondition::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIFhirCondition::getNotes() const {
    return m_notes;
}
void OAIFhirCondition::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIFhirCondition::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIFhirCondition::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIFhirCondition::getSeverity() const {
    return m_severity;
}
void OAIFhirCondition::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIFhirCondition::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIFhirCondition::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIFhirCondition::getStatus() const {
    return m_status;
}
void OAIFhirCondition::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFhirCondition::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFhirCondition::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIFhirCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asserter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
