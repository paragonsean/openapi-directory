/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirObservationPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirObservationPage::OAIFhirObservationPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirObservationPage::OAIFhirObservationPage() {
    this->initializeModel();
}

OAIFhirObservationPage::~OAIFhirObservationPage() {}

void OAIFhirObservationPage::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_total_elements_isSet = false;
    m_total_elements_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;
}

void OAIFhirObservationPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirObservationPage::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_total_elements_isValid = ::OpenAPI::fromJsonValue(m_total_elements, json[QString("totalElements")]);
    m_total_elements_isSet = !json[QString("totalElements")].isNull() && m_total_elements_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("totalPages")]);
    m_total_pages_isSet = !json[QString("totalPages")].isNull() && m_total_pages_isValid;
}

QString OAIFhirObservationPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirObservationPage::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_total_elements_isSet) {
        obj.insert(QString("totalElements"), ::OpenAPI::toJsonValue(m_total_elements));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("totalPages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    return obj;
}

QList<OAIEntry_long_Map_string_List_FhirObservation_> OAIFhirObservationPage::getData() const {
    return m_data;
}
void OAIFhirObservationPage::setData(const QList<OAIEntry_long_Map_string_List_FhirObservation_> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIFhirObservationPage::is_data_Set() const{
    return m_data_isSet;
}

bool OAIFhirObservationPage::is_data_Valid() const{
    return m_data_isValid;
}

qint64 OAIFhirObservationPage::getTotalElements() const {
    return m_total_elements;
}
void OAIFhirObservationPage::setTotalElements(const qint64 &total_elements) {
    m_total_elements = total_elements;
    m_total_elements_isSet = true;
}

bool OAIFhirObservationPage::is_total_elements_Set() const{
    return m_total_elements_isSet;
}

bool OAIFhirObservationPage::is_total_elements_Valid() const{
    return m_total_elements_isValid;
}

qint64 OAIFhirObservationPage::getTotalPages() const {
    return m_total_pages;
}
void OAIFhirObservationPage::setTotalPages(const qint64 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIFhirObservationPage::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIFhirObservationPage::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

bool OAIFhirObservationPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirObservationPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
