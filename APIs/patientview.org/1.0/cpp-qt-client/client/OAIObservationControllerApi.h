/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIObservationControllerApi_H
#define OAI_OAIObservationControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFhirObservation.h"
#include "OAIFhirObservationPage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIObservationControllerApi : public QObject {
    Q_OBJECT

public:
    OAIObservationControllerApi(const int timeOut = 0);
    ~OAIObservationControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  code QString [required]
    */
    virtual void getObservationsByCode(const qint64 &user_id, const QString &code);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  code QList<QString> [required]
    * @param[in]  limit qint64 [required]
    * @param[in]  offset qint64 [required]
    * @param[in]  order_direction QString [required]
    */
    virtual void getObservationsByCodes(const qint64 &user_id, const QList<QString> &code, const qint64 &limit, const qint64 &offset, const QString &order_direction);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  code QString [required]
    */
    virtual void getPatientEnteredObservationsByCode(const qint64 &user_id, const QString &code);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getObservationsByCodeCallback(OAIHttpRequestWorker *worker);
    void getObservationsByCodesCallback(OAIHttpRequestWorker *worker);
    void getPatientEnteredObservationsByCodeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getObservationsByCodeSignal(QList<OAIFhirObservation> summary);
    void getObservationsByCodesSignal(OAIFhirObservationPage summary);
    void getPatientEnteredObservationsByCodeSignal(QList<OAIFhirObservation> summary);


    void getObservationsByCodeSignalFull(OAIHttpRequestWorker *worker, QList<OAIFhirObservation> summary);
    void getObservationsByCodesSignalFull(OAIHttpRequestWorker *worker, OAIFhirObservationPage summary);
    void getPatientEnteredObservationsByCodeSignalFull(OAIHttpRequestWorker *worker, QList<OAIFhirObservation> summary);

    Q_DECL_DEPRECATED_X("Use getObservationsByCodeSignalError() instead")
    void getObservationsByCodeSignalE(QList<OAIFhirObservation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getObservationsByCodeSignalError(QList<OAIFhirObservation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObservationsByCodesSignalError() instead")
    void getObservationsByCodesSignalE(OAIFhirObservationPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getObservationsByCodesSignalError(OAIFhirObservationPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPatientEnteredObservationsByCodeSignalError() instead")
    void getPatientEnteredObservationsByCodeSignalE(QList<OAIFhirObservation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPatientEnteredObservationsByCodeSignalError(QList<OAIFhirObservation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getObservationsByCodeSignalErrorFull() instead")
    void getObservationsByCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getObservationsByCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObservationsByCodesSignalErrorFull() instead")
    void getObservationsByCodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getObservationsByCodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPatientEnteredObservationsByCodeSignalErrorFull() instead")
    void getPatientEnteredObservationsByCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPatientEnteredObservationsByCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
