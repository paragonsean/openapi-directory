/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode::OAICode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode::OAICode() {
    this->initializeModel();
}

OAICode::~OAICode() {}

void OAICode::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_code_categories_isSet = false;
    m_code_categories_isValid = false;

    m_code_type_isSet = false;
    m_code_type_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_external_standards_isSet = false;
    m_external_standards_isValid = false;

    m_full_description_isSet = false;
    m_full_description_isValid = false;

    m_hide_from_patients_isSet = false;
    m_hide_from_patients_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_patient_friendly_name_isSet = false;
    m_patient_friendly_name_isValid = false;

    m_removed_externally_isSet = false;
    m_removed_externally_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_standard_type_isSet = false;
    m_standard_type_isValid = false;
}

void OAICode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_code_categories_isValid = ::OpenAPI::fromJsonValue(m_code_categories, json[QString("codeCategories")]);
    m_code_categories_isSet = !json[QString("codeCategories")].isNull() && m_code_categories_isValid;

    m_code_type_isValid = ::OpenAPI::fromJsonValue(m_code_type, json[QString("codeType")]);
    m_code_type_isSet = !json[QString("codeType")].isNull() && m_code_type_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("displayOrder")]);
    m_display_order_isSet = !json[QString("displayOrder")].isNull() && m_display_order_isValid;

    m_external_standards_isValid = ::OpenAPI::fromJsonValue(m_external_standards, json[QString("externalStandards")]);
    m_external_standards_isSet = !json[QString("externalStandards")].isNull() && m_external_standards_isValid;

    m_full_description_isValid = ::OpenAPI::fromJsonValue(m_full_description, json[QString("fullDescription")]);
    m_full_description_isSet = !json[QString("fullDescription")].isNull() && m_full_description_isValid;

    m_hide_from_patients_isValid = ::OpenAPI::fromJsonValue(m_hide_from_patients, json[QString("hideFromPatients")]);
    m_hide_from_patients_isSet = !json[QString("hideFromPatients")].isNull() && m_hide_from_patients_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_patient_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_patient_friendly_name, json[QString("patientFriendlyName")]);
    m_patient_friendly_name_isSet = !json[QString("patientFriendlyName")].isNull() && m_patient_friendly_name_isValid;

    m_removed_externally_isValid = ::OpenAPI::fromJsonValue(m_removed_externally, json[QString("removedExternally")]);
    m_removed_externally_isSet = !json[QString("removedExternally")].isNull() && m_removed_externally_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;

    m_standard_type_isValid = ::OpenAPI::fromJsonValue(m_standard_type, json[QString("standardType")]);
    m_standard_type_isSet = !json[QString("standardType")].isNull() && m_standard_type_isValid;
}

QString OAICode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_code_categories.size() > 0) {
        obj.insert(QString("codeCategories"), ::OpenAPI::toJsonValue(m_code_categories));
    }
    if (m_code_type.isSet()) {
        obj.insert(QString("codeType"), ::OpenAPI::toJsonValue(m_code_type));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("displayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_external_standards.size() > 0) {
        obj.insert(QString("externalStandards"), ::OpenAPI::toJsonValue(m_external_standards));
    }
    if (m_full_description_isSet) {
        obj.insert(QString("fullDescription"), ::OpenAPI::toJsonValue(m_full_description));
    }
    if (m_hide_from_patients_isSet) {
        obj.insert(QString("hideFromPatients"), ::OpenAPI::toJsonValue(m_hide_from_patients));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_patient_friendly_name_isSet) {
        obj.insert(QString("patientFriendlyName"), ::OpenAPI::toJsonValue(m_patient_friendly_name));
    }
    if (m_removed_externally_isSet) {
        obj.insert(QString("removedExternally"), ::OpenAPI::toJsonValue(m_removed_externally));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_standard_type.isSet()) {
        obj.insert(QString("standardType"), ::OpenAPI::toJsonValue(m_standard_type));
    }
    return obj;
}

QString OAICode::getCode() const {
    return m_code;
}
void OAICode::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICode::is_code_Set() const{
    return m_code_isSet;
}

bool OAICode::is_code_Valid() const{
    return m_code_isValid;
}

QSet<OAICodeCategory> OAICode::getCodeCategories() const {
    return m_code_categories;
}
void OAICode::setCodeCategories(const QSet<OAICodeCategory> &code_categories) {
    m_code_categories = code_categories;
    m_code_categories_isSet = true;
}

bool OAICode::is_code_categories_Set() const{
    return m_code_categories_isSet;
}

bool OAICode::is_code_categories_Valid() const{
    return m_code_categories_isValid;
}

OAILookup OAICode::getCodeType() const {
    return m_code_type;
}
void OAICode::setCodeType(const OAILookup &code_type) {
    m_code_type = code_type;
    m_code_type_isSet = true;
}

bool OAICode::is_code_type_Set() const{
    return m_code_type_isSet;
}

bool OAICode::is_code_type_Valid() const{
    return m_code_type_isValid;
}

QDateTime OAICode::getCreated() const {
    return m_created;
}
void OAICode::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICode::is_created_Set() const{
    return m_created_isSet;
}

bool OAICode::is_created_Valid() const{
    return m_created_isValid;
}

QString OAICode::getDescription() const {
    return m_description;
}
void OAICode::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICode::is_description_Set() const{
    return m_description_isSet;
}

bool OAICode::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICode::getDisplayOrder() const {
    return m_display_order;
}
void OAICode::setDisplayOrder(const qint32 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAICode::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAICode::is_display_order_Valid() const{
    return m_display_order_isValid;
}

QSet<OAICodeExternalStandard> OAICode::getExternalStandards() const {
    return m_external_standards;
}
void OAICode::setExternalStandards(const QSet<OAICodeExternalStandard> &external_standards) {
    m_external_standards = external_standards;
    m_external_standards_isSet = true;
}

bool OAICode::is_external_standards_Set() const{
    return m_external_standards_isSet;
}

bool OAICode::is_external_standards_Valid() const{
    return m_external_standards_isValid;
}

QString OAICode::getFullDescription() const {
    return m_full_description;
}
void OAICode::setFullDescription(const QString &full_description) {
    m_full_description = full_description;
    m_full_description_isSet = true;
}

bool OAICode::is_full_description_Set() const{
    return m_full_description_isSet;
}

bool OAICode::is_full_description_Valid() const{
    return m_full_description_isValid;
}

bool OAICode::isHideFromPatients() const {
    return m_hide_from_patients;
}
void OAICode::setHideFromPatients(const bool &hide_from_patients) {
    m_hide_from_patients = hide_from_patients;
    m_hide_from_patients_isSet = true;
}

bool OAICode::is_hide_from_patients_Set() const{
    return m_hide_from_patients_isSet;
}

bool OAICode::is_hide_from_patients_Valid() const{
    return m_hide_from_patients_isValid;
}

qint64 OAICode::getId() const {
    return m_id;
}
void OAICode::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICode::is_id_Set() const{
    return m_id_isSet;
}

bool OAICode::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAICode::getLastUpdate() const {
    return m_last_update;
}
void OAICode::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAICode::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAICode::is_last_update_Valid() const{
    return m_last_update_isValid;
}

QSet<OAILink> OAICode::getLinks() const {
    return m_links;
}
void OAICode::setLinks(const QSet<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAICode::is_links_Set() const{
    return m_links_isSet;
}

bool OAICode::is_links_Valid() const{
    return m_links_isValid;
}

QString OAICode::getPatientFriendlyName() const {
    return m_patient_friendly_name;
}
void OAICode::setPatientFriendlyName(const QString &patient_friendly_name) {
    m_patient_friendly_name = patient_friendly_name;
    m_patient_friendly_name_isSet = true;
}

bool OAICode::is_patient_friendly_name_Set() const{
    return m_patient_friendly_name_isSet;
}

bool OAICode::is_patient_friendly_name_Valid() const{
    return m_patient_friendly_name_isValid;
}

bool OAICode::isRemovedExternally() const {
    return m_removed_externally;
}
void OAICode::setRemovedExternally(const bool &removed_externally) {
    m_removed_externally = removed_externally;
    m_removed_externally_isSet = true;
}

bool OAICode::is_removed_externally_Set() const{
    return m_removed_externally_isSet;
}

bool OAICode::is_removed_externally_Valid() const{
    return m_removed_externally_isValid;
}

QString OAICode::getSourceType() const {
    return m_source_type;
}
void OAICode::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAICode::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAICode::is_source_type_Valid() const{
    return m_source_type_isValid;
}

OAILookup OAICode::getStandardType() const {
    return m_standard_type;
}
void OAICode::setStandardType(const OAILookup &standard_type) {
    m_standard_type = standard_type;
    m_standard_type_isSet = true;
}

bool OAICode::is_standard_type_Set() const{
    return m_standard_type_isSet;
}

bool OAICode::is_standard_type_Valid() const{
    return m_standard_type_isValid;
}

bool OAICode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_standards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_from_patients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_externally_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
