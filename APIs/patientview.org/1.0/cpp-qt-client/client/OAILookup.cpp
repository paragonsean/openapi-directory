/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILookup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILookup::OAILookup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILookup::OAILookup() {
    this->initializeModel();
}

OAILookup::~OAILookup() {}

void OAILookup::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_friendly_isSet = false;
    m_description_friendly_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_lookup_type_isSet = false;
    m_lookup_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAILookup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILookup::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_description_friendly_isValid = ::OpenAPI::fromJsonValue(m_description_friendly, json[QString("descriptionFriendly")]);
    m_description_friendly_isSet = !json[QString("descriptionFriendly")].isNull() && m_description_friendly_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("displayOrder")]);
    m_display_order_isSet = !json[QString("displayOrder")].isNull() && m_display_order_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_lookup_type_isValid = ::OpenAPI::fromJsonValue(m_lookup_type, json[QString("lookupType")]);
    m_lookup_type_isSet = !json[QString("lookupType")].isNull() && m_lookup_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAILookup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILookup::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_friendly_isSet) {
        obj.insert(QString("descriptionFriendly"), ::OpenAPI::toJsonValue(m_description_friendly));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("displayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_lookup_type.isSet()) {
        obj.insert(QString("lookupType"), ::OpenAPI::toJsonValue(m_lookup_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QDateTime OAILookup::getCreated() const {
    return m_created;
}
void OAILookup::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAILookup::is_created_Set() const{
    return m_created_isSet;
}

bool OAILookup::is_created_Valid() const{
    return m_created_isValid;
}

QString OAILookup::getDescription() const {
    return m_description;
}
void OAILookup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILookup::is_description_Set() const{
    return m_description_isSet;
}

bool OAILookup::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILookup::getDescriptionFriendly() const {
    return m_description_friendly;
}
void OAILookup::setDescriptionFriendly(const QString &description_friendly) {
    m_description_friendly = description_friendly;
    m_description_friendly_isSet = true;
}

bool OAILookup::is_description_friendly_Set() const{
    return m_description_friendly_isSet;
}

bool OAILookup::is_description_friendly_Valid() const{
    return m_description_friendly_isValid;
}

qint64 OAILookup::getDisplayOrder() const {
    return m_display_order;
}
void OAILookup::setDisplayOrder(const qint64 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAILookup::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAILookup::is_display_order_Valid() const{
    return m_display_order_isValid;
}

qint64 OAILookup::getId() const {
    return m_id;
}
void OAILookup::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILookup::is_id_Set() const{
    return m_id_isSet;
}

bool OAILookup::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAILookup::getLastUpdate() const {
    return m_last_update;
}
void OAILookup::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAILookup::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAILookup::is_last_update_Valid() const{
    return m_last_update_isValid;
}

OAILookupType OAILookup::getLookupType() const {
    return m_lookup_type;
}
void OAILookup::setLookupType(const OAILookupType &lookup_type) {
    m_lookup_type = lookup_type;
    m_lookup_type_isSet = true;
}

bool OAILookup::is_lookup_type_Set() const{
    return m_lookup_type_isSet;
}

bool OAILookup::is_lookup_type_Valid() const{
    return m_lookup_type_isValid;
}

QString OAILookup::getValue() const {
    return m_value;
}
void OAILookup::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAILookup::is_value_Set() const{
    return m_value_isSet;
}

bool OAILookup::is_value_Valid() const{
    return m_value_isValid;
}

bool OAILookup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_friendly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookup_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILookup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
