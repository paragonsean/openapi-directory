/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKey::OAIApiKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKey::OAIApiKey() {
    this->initializeModel();
}

OAIApiKey::~OAIApiKey() {}

void OAIApiKey::initializeModel() {

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIApiKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKey::fromJsonObject(QJsonObject json) {

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAIApiKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKey::asJsonObject() const {
    QJsonObject obj;
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

bool OAIApiKey::isExpired() const {
    return m_expired;
}
void OAIApiKey::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIApiKey::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIApiKey::is_expired_Valid() const{
    return m_expired_isValid;
}

QDateTime OAIApiKey::getExpiryDate() const {
    return m_expiry_date;
}
void OAIApiKey::setExpiryDate(const QDateTime &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIApiKey::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIApiKey::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIApiKey::getKey() const {
    return m_key;
}
void OAIApiKey::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIApiKey::is_key_Set() const{
    return m_key_isSet;
}

bool OAIApiKey::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIApiKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
