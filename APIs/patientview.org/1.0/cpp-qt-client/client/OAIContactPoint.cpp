/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactPoint::OAIContactPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactPoint::OAIContactPoint() {
    this->initializeModel();
}

OAIContactPoint::~OAIContactPoint() {}

void OAIContactPoint::initializeModel() {

    m_contact_point_type_isSet = false;
    m_contact_point_type_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;
}

void OAIContactPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactPoint::fromJsonObject(QJsonObject json) {

    m_contact_point_type_isValid = ::OpenAPI::fromJsonValue(m_contact_point_type, json[QString("contactPointType")]);
    m_contact_point_type_isSet = !json[QString("contactPointType")].isNull() && m_contact_point_type_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;
}

QString OAIContactPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_point_type.isSet()) {
        obj.insert(QString("contactPointType"), ::OpenAPI::toJsonValue(m_contact_point_type));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    return obj;
}

OAIContactPointType OAIContactPoint::getContactPointType() const {
    return m_contact_point_type;
}
void OAIContactPoint::setContactPointType(const OAIContactPointType &contact_point_type) {
    m_contact_point_type = contact_point_type;
    m_contact_point_type_isSet = true;
}

bool OAIContactPoint::is_contact_point_type_Set() const{
    return m_contact_point_type_isSet;
}

bool OAIContactPoint::is_contact_point_type_Valid() const{
    return m_contact_point_type_isValid;
}

QString OAIContactPoint::getContent() const {
    return m_content;
}
void OAIContactPoint::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIContactPoint::is_content_Set() const{
    return m_content_isSet;
}

bool OAIContactPoint::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIContactPoint::getCreated() const {
    return m_created;
}
void OAIContactPoint::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIContactPoint::is_created_Set() const{
    return m_created_isSet;
}

bool OAIContactPoint::is_created_Valid() const{
    return m_created_isValid;
}

qint64 OAIContactPoint::getId() const {
    return m_id;
}
void OAIContactPoint::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContactPoint::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContactPoint::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIContactPoint::getLastUpdate() const {
    return m_last_update;
}
void OAIContactPoint::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIContactPoint::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIContactPoint::is_last_update_Valid() const{
    return m_last_update_isValid;
}

bool OAIContactPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_point_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
