/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserFeature::OAIUserFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserFeature::OAIUserFeature() {
    this->initializeModel();
}

OAIUserFeature::~OAIUserFeature() {}

void OAIUserFeature::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_feature_isSet = false;
    m_feature_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_opt_in_date_isSet = false;
    m_opt_in_date_isValid = false;

    m_opt_in_hidden_isSet = false;
    m_opt_in_hidden_isValid = false;

    m_opt_in_status_isSet = false;
    m_opt_in_status_isValid = false;

    m_opt_out_hidden_isSet = false;
    m_opt_out_hidden_isValid = false;
}

void OAIUserFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserFeature::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_feature_isValid = ::OpenAPI::fromJsonValue(m_feature, json[QString("feature")]);
    m_feature_isSet = !json[QString("feature")].isNull() && m_feature_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_opt_in_date_isValid = ::OpenAPI::fromJsonValue(m_opt_in_date, json[QString("optInDate")]);
    m_opt_in_date_isSet = !json[QString("optInDate")].isNull() && m_opt_in_date_isValid;

    m_opt_in_hidden_isValid = ::OpenAPI::fromJsonValue(m_opt_in_hidden, json[QString("optInHidden")]);
    m_opt_in_hidden_isSet = !json[QString("optInHidden")].isNull() && m_opt_in_hidden_isValid;

    m_opt_in_status_isValid = ::OpenAPI::fromJsonValue(m_opt_in_status, json[QString("optInStatus")]);
    m_opt_in_status_isSet = !json[QString("optInStatus")].isNull() && m_opt_in_status_isValid;

    m_opt_out_hidden_isValid = ::OpenAPI::fromJsonValue(m_opt_out_hidden, json[QString("optOutHidden")]);
    m_opt_out_hidden_isSet = !json[QString("optOutHidden")].isNull() && m_opt_out_hidden_isValid;
}

QString OAIUserFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_feature.isSet()) {
        obj.insert(QString("feature"), ::OpenAPI::toJsonValue(m_feature));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_opt_in_date_isSet) {
        obj.insert(QString("optInDate"), ::OpenAPI::toJsonValue(m_opt_in_date));
    }
    if (m_opt_in_hidden_isSet) {
        obj.insert(QString("optInHidden"), ::OpenAPI::toJsonValue(m_opt_in_hidden));
    }
    if (m_opt_in_status_isSet) {
        obj.insert(QString("optInStatus"), ::OpenAPI::toJsonValue(m_opt_in_status));
    }
    if (m_opt_out_hidden_isSet) {
        obj.insert(QString("optOutHidden"), ::OpenAPI::toJsonValue(m_opt_out_hidden));
    }
    return obj;
}

QDateTime OAIUserFeature::getCreated() const {
    return m_created;
}
void OAIUserFeature::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIUserFeature::is_created_Set() const{
    return m_created_isSet;
}

bool OAIUserFeature::is_created_Valid() const{
    return m_created_isValid;
}

OAIFeature OAIUserFeature::getFeature() const {
    return m_feature;
}
void OAIUserFeature::setFeature(const OAIFeature &feature) {
    m_feature = feature;
    m_feature_isSet = true;
}

bool OAIUserFeature::is_feature_Set() const{
    return m_feature_isSet;
}

bool OAIUserFeature::is_feature_Valid() const{
    return m_feature_isValid;
}

qint64 OAIUserFeature::getId() const {
    return m_id;
}
void OAIUserFeature::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserFeature::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserFeature::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIUserFeature::getLastUpdate() const {
    return m_last_update;
}
void OAIUserFeature::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIUserFeature::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIUserFeature::is_last_update_Valid() const{
    return m_last_update_isValid;
}

QDateTime OAIUserFeature::getOptInDate() const {
    return m_opt_in_date;
}
void OAIUserFeature::setOptInDate(const QDateTime &opt_in_date) {
    m_opt_in_date = opt_in_date;
    m_opt_in_date_isSet = true;
}

bool OAIUserFeature::is_opt_in_date_Set() const{
    return m_opt_in_date_isSet;
}

bool OAIUserFeature::is_opt_in_date_Valid() const{
    return m_opt_in_date_isValid;
}

bool OAIUserFeature::isOptInHidden() const {
    return m_opt_in_hidden;
}
void OAIUserFeature::setOptInHidden(const bool &opt_in_hidden) {
    m_opt_in_hidden = opt_in_hidden;
    m_opt_in_hidden_isSet = true;
}

bool OAIUserFeature::is_opt_in_hidden_Set() const{
    return m_opt_in_hidden_isSet;
}

bool OAIUserFeature::is_opt_in_hidden_Valid() const{
    return m_opt_in_hidden_isValid;
}

bool OAIUserFeature::isOptInStatus() const {
    return m_opt_in_status;
}
void OAIUserFeature::setOptInStatus(const bool &opt_in_status) {
    m_opt_in_status = opt_in_status;
    m_opt_in_status_isSet = true;
}

bool OAIUserFeature::is_opt_in_status_Set() const{
    return m_opt_in_status_isSet;
}

bool OAIUserFeature::is_opt_in_status_Valid() const{
    return m_opt_in_status_isValid;
}

bool OAIUserFeature::isOptOutHidden() const {
    return m_opt_out_hidden;
}
void OAIUserFeature::setOptOutHidden(const bool &opt_out_hidden) {
    m_opt_out_hidden = opt_out_hidden;
    m_opt_out_hidden_isSet = true;
}

bool OAIUserFeature::is_opt_out_hidden_Set() const{
    return m_opt_out_hidden_isSet;
}

bool OAIUserFeature::is_opt_out_hidden_Valid() const{
    return m_opt_out_hidden_isValid;
}

bool OAIUserFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
