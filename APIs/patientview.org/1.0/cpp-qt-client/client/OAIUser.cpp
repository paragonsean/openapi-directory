/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_can_switch_user_isSet = false;
    m_can_switch_user_isValid = false;

    m_change_password_isSet = false;
    m_change_password_isValid = false;

    m_contact_number_isSet = false;
    m_contact_number_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_current_login_isSet = false;
    m_current_login_isValid = false;

    m_current_login_ip_address_isSet = false;
    m_current_login_ip_address_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_dummy_isSet = false;
    m_dummy_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_forename_isSet = false;
    m_forename_isValid = false;

    m_group_roles_isSet = false;
    m_group_roles_isValid = false;

    m_hide_secret_word_notification_isSet = false;
    m_hide_secret_word_notification_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_last_login_isSet = false;
    m_last_login_isValid = false;

    m_last_login_ip_address_isSet = false;
    m_last_login_ip_address_isValid = false;

    m_latest_data_received_by_isSet = false;
    m_latest_data_received_by_isValid = false;

    m_latest_data_received_date_isSet = false;
    m_latest_data_received_date_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_picture_isSet = false;
    m_picture_isValid = false;

    m_role_description_isSet = false;
    m_role_description_isValid = false;

    m_secret_word_is_set_isSet = false;
    m_secret_word_is_set_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;

    m_user_features_isSet = false;
    m_user_features_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_can_switch_user_isValid = ::OpenAPI::fromJsonValue(m_can_switch_user, json[QString("canSwitchUser")]);
    m_can_switch_user_isSet = !json[QString("canSwitchUser")].isNull() && m_can_switch_user_isValid;

    m_change_password_isValid = ::OpenAPI::fromJsonValue(m_change_password, json[QString("changePassword")]);
    m_change_password_isSet = !json[QString("changePassword")].isNull() && m_change_password_isValid;

    m_contact_number_isValid = ::OpenAPI::fromJsonValue(m_contact_number, json[QString("contactNumber")]);
    m_contact_number_isSet = !json[QString("contactNumber")].isNull() && m_contact_number_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_current_login_isValid = ::OpenAPI::fromJsonValue(m_current_login, json[QString("currentLogin")]);
    m_current_login_isSet = !json[QString("currentLogin")].isNull() && m_current_login_isValid;

    m_current_login_ip_address_isValid = ::OpenAPI::fromJsonValue(m_current_login_ip_address, json[QString("currentLoginIpAddress")]);
    m_current_login_ip_address_isSet = !json[QString("currentLoginIpAddress")].isNull() && m_current_login_ip_address_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_dummy_isValid = ::OpenAPI::fromJsonValue(m_dummy, json[QString("dummy")]);
    m_dummy_isSet = !json[QString("dummy")].isNull() && m_dummy_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(m_email_verified, json[QString("emailVerified")]);
    m_email_verified_isSet = !json[QString("emailVerified")].isNull() && m_email_verified_isValid;

    m_forename_isValid = ::OpenAPI::fromJsonValue(m_forename, json[QString("forename")]);
    m_forename_isSet = !json[QString("forename")].isNull() && m_forename_isValid;

    m_group_roles_isValid = ::OpenAPI::fromJsonValue(m_group_roles, json[QString("groupRoles")]);
    m_group_roles_isSet = !json[QString("groupRoles")].isNull() && m_group_roles_isValid;

    m_hide_secret_word_notification_isValid = ::OpenAPI::fromJsonValue(m_hide_secret_word_notification, json[QString("hideSecretWordNotification")]);
    m_hide_secret_word_notification_isSet = !json[QString("hideSecretWordNotification")].isNull() && m_hide_secret_word_notification_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_last_login_isValid = ::OpenAPI::fromJsonValue(m_last_login, json[QString("lastLogin")]);
    m_last_login_isSet = !json[QString("lastLogin")].isNull() && m_last_login_isValid;

    m_last_login_ip_address_isValid = ::OpenAPI::fromJsonValue(m_last_login_ip_address, json[QString("lastLoginIpAddress")]);
    m_last_login_ip_address_isSet = !json[QString("lastLoginIpAddress")].isNull() && m_last_login_ip_address_isValid;

    m_latest_data_received_by_isValid = ::OpenAPI::fromJsonValue(m_latest_data_received_by, json[QString("latestDataReceivedBy")]);
    m_latest_data_received_by_isSet = !json[QString("latestDataReceivedBy")].isNull() && m_latest_data_received_by_isValid;

    m_latest_data_received_date_isValid = ::OpenAPI::fromJsonValue(m_latest_data_received_date, json[QString("latestDataReceivedDate")]);
    m_latest_data_received_date_isSet = !json[QString("latestDataReceivedDate")].isNull() && m_latest_data_received_date_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_picture_isValid = ::OpenAPI::fromJsonValue(m_picture, json[QString("picture")]);
    m_picture_isSet = !json[QString("picture")].isNull() && m_picture_isValid;

    m_role_description_isValid = ::OpenAPI::fromJsonValue(m_role_description, json[QString("roleDescription")]);
    m_role_description_isSet = !json[QString("roleDescription")].isNull() && m_role_description_isValid;

    m_secret_word_is_set_isValid = ::OpenAPI::fromJsonValue(m_secret_word_is_set, json[QString("secretWordIsSet")]);
    m_secret_word_is_set_isSet = !json[QString("secretWordIsSet")].isNull() && m_secret_word_is_set_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;

    m_user_features_isValid = ::OpenAPI::fromJsonValue(m_user_features, json[QString("userFeatures")]);
    m_user_features_isSet = !json[QString("userFeatures")].isNull() && m_user_features_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key.isSet()) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_can_switch_user_isSet) {
        obj.insert(QString("canSwitchUser"), ::OpenAPI::toJsonValue(m_can_switch_user));
    }
    if (m_change_password_isSet) {
        obj.insert(QString("changePassword"), ::OpenAPI::toJsonValue(m_change_password));
    }
    if (m_contact_number_isSet) {
        obj.insert(QString("contactNumber"), ::OpenAPI::toJsonValue(m_contact_number));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_current_login_isSet) {
        obj.insert(QString("currentLogin"), ::OpenAPI::toJsonValue(m_current_login));
    }
    if (m_current_login_ip_address_isSet) {
        obj.insert(QString("currentLoginIpAddress"), ::OpenAPI::toJsonValue(m_current_login_ip_address));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_dummy_isSet) {
        obj.insert(QString("dummy"), ::OpenAPI::toJsonValue(m_dummy));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("emailVerified"), ::OpenAPI::toJsonValue(m_email_verified));
    }
    if (m_forename_isSet) {
        obj.insert(QString("forename"), ::OpenAPI::toJsonValue(m_forename));
    }
    if (m_group_roles.size() > 0) {
        obj.insert(QString("groupRoles"), ::OpenAPI::toJsonValue(m_group_roles));
    }
    if (m_hide_secret_word_notification_isSet) {
        obj.insert(QString("hideSecretWordNotification"), ::OpenAPI::toJsonValue(m_hide_secret_word_notification));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifiers.size() > 0) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_last_login_isSet) {
        obj.insert(QString("lastLogin"), ::OpenAPI::toJsonValue(m_last_login));
    }
    if (m_last_login_ip_address_isSet) {
        obj.insert(QString("lastLoginIpAddress"), ::OpenAPI::toJsonValue(m_last_login_ip_address));
    }
    if (m_latest_data_received_by.isSet()) {
        obj.insert(QString("latestDataReceivedBy"), ::OpenAPI::toJsonValue(m_latest_data_received_by));
    }
    if (m_latest_data_received_date_isSet) {
        obj.insert(QString("latestDataReceivedDate"), ::OpenAPI::toJsonValue(m_latest_data_received_date));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_picture_isSet) {
        obj.insert(QString("picture"), ::OpenAPI::toJsonValue(m_picture));
    }
    if (m_role_description_isSet) {
        obj.insert(QString("roleDescription"), ::OpenAPI::toJsonValue(m_role_description));
    }
    if (m_secret_word_is_set_isSet) {
        obj.insert(QString("secretWordIsSet"), ::OpenAPI::toJsonValue(m_secret_word_is_set));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    if (m_user_features.size() > 0) {
        obj.insert(QString("userFeatures"), ::OpenAPI::toJsonValue(m_user_features));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

OAIApiKey OAIUser::getApiKey() const {
    return m_api_key;
}
void OAIUser::setApiKey(const OAIApiKey &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIUser::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIUser::is_api_key_Valid() const{
    return m_api_key_isValid;
}

bool OAIUser::isCanSwitchUser() const {
    return m_can_switch_user;
}
void OAIUser::setCanSwitchUser(const bool &can_switch_user) {
    m_can_switch_user = can_switch_user;
    m_can_switch_user_isSet = true;
}

bool OAIUser::is_can_switch_user_Set() const{
    return m_can_switch_user_isSet;
}

bool OAIUser::is_can_switch_user_Valid() const{
    return m_can_switch_user_isValid;
}

bool OAIUser::isChangePassword() const {
    return m_change_password;
}
void OAIUser::setChangePassword(const bool &change_password) {
    m_change_password = change_password;
    m_change_password_isSet = true;
}

bool OAIUser::is_change_password_Set() const{
    return m_change_password_isSet;
}

bool OAIUser::is_change_password_Valid() const{
    return m_change_password_isValid;
}

QString OAIUser::getContactNumber() const {
    return m_contact_number;
}
void OAIUser::setContactNumber(const QString &contact_number) {
    m_contact_number = contact_number;
    m_contact_number_isSet = true;
}

bool OAIUser::is_contact_number_Set() const{
    return m_contact_number_isSet;
}

bool OAIUser::is_contact_number_Valid() const{
    return m_contact_number_isValid;
}

QDateTime OAIUser::getCreated() const {
    return m_created;
}
void OAIUser::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIUser::is_created_Set() const{
    return m_created_isSet;
}

bool OAIUser::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIUser::getCurrentLogin() const {
    return m_current_login;
}
void OAIUser::setCurrentLogin(const QDateTime &current_login) {
    m_current_login = current_login;
    m_current_login_isSet = true;
}

bool OAIUser::is_current_login_Set() const{
    return m_current_login_isSet;
}

bool OAIUser::is_current_login_Valid() const{
    return m_current_login_isValid;
}

QString OAIUser::getCurrentLoginIpAddress() const {
    return m_current_login_ip_address;
}
void OAIUser::setCurrentLoginIpAddress(const QString &current_login_ip_address) {
    m_current_login_ip_address = current_login_ip_address;
    m_current_login_ip_address_isSet = true;
}

bool OAIUser::is_current_login_ip_address_Set() const{
    return m_current_login_ip_address_isSet;
}

bool OAIUser::is_current_login_ip_address_Valid() const{
    return m_current_login_ip_address_isValid;
}

QDateTime OAIUser::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIUser::setDateOfBirth(const QDateTime &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIUser::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIUser::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

bool OAIUser::isDeleted() const {
    return m_deleted;
}
void OAIUser::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIUser::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIUser::is_deleted_Valid() const{
    return m_deleted_isValid;
}

bool OAIUser::isDummy() const {
    return m_dummy;
}
void OAIUser::setDummy(const bool &dummy) {
    m_dummy = dummy;
    m_dummy_isSet = true;
}

bool OAIUser::is_dummy_Set() const{
    return m_dummy_isSet;
}

bool OAIUser::is_dummy_Valid() const{
    return m_dummy_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUser::isEmailVerified() const {
    return m_email_verified;
}
void OAIUser::setEmailVerified(const bool &email_verified) {
    m_email_verified = email_verified;
    m_email_verified_isSet = true;
}

bool OAIUser::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAIUser::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

QString OAIUser::getForename() const {
    return m_forename;
}
void OAIUser::setForename(const QString &forename) {
    m_forename = forename;
    m_forename_isSet = true;
}

bool OAIUser::is_forename_Set() const{
    return m_forename_isSet;
}

bool OAIUser::is_forename_Valid() const{
    return m_forename_isValid;
}

QSet<OAIGroupRole> OAIUser::getGroupRoles() const {
    return m_group_roles;
}
void OAIUser::setGroupRoles(const QSet<OAIGroupRole> &group_roles) {
    m_group_roles = group_roles;
    m_group_roles_isSet = true;
}

bool OAIUser::is_group_roles_Set() const{
    return m_group_roles_isSet;
}

bool OAIUser::is_group_roles_Valid() const{
    return m_group_roles_isValid;
}

bool OAIUser::isHideSecretWordNotification() const {
    return m_hide_secret_word_notification;
}
void OAIUser::setHideSecretWordNotification(const bool &hide_secret_word_notification) {
    m_hide_secret_word_notification = hide_secret_word_notification;
    m_hide_secret_word_notification_isSet = true;
}

bool OAIUser::is_hide_secret_word_notification_Set() const{
    return m_hide_secret_word_notification_isSet;
}

bool OAIUser::is_hide_secret_word_notification_Valid() const{
    return m_hide_secret_word_notification_isValid;
}

qint64 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QSet<OAIObject> OAIUser::getIdentifiers() const {
    return m_identifiers;
}
void OAIUser::setIdentifiers(const QSet<OAIObject> &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIUser::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIUser::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QDateTime OAIUser::getLastLogin() const {
    return m_last_login;
}
void OAIUser::setLastLogin(const QDateTime &last_login) {
    m_last_login = last_login;
    m_last_login_isSet = true;
}

bool OAIUser::is_last_login_Set() const{
    return m_last_login_isSet;
}

bool OAIUser::is_last_login_Valid() const{
    return m_last_login_isValid;
}

QString OAIUser::getLastLoginIpAddress() const {
    return m_last_login_ip_address;
}
void OAIUser::setLastLoginIpAddress(const QString &last_login_ip_address) {
    m_last_login_ip_address = last_login_ip_address;
    m_last_login_ip_address_isSet = true;
}

bool OAIUser::is_last_login_ip_address_Set() const{
    return m_last_login_ip_address_isSet;
}

bool OAIUser::is_last_login_ip_address_Valid() const{
    return m_last_login_ip_address_isValid;
}

OAIBaseGroup OAIUser::getLatestDataReceivedBy() const {
    return m_latest_data_received_by;
}
void OAIUser::setLatestDataReceivedBy(const OAIBaseGroup &latest_data_received_by) {
    m_latest_data_received_by = latest_data_received_by;
    m_latest_data_received_by_isSet = true;
}

bool OAIUser::is_latest_data_received_by_Set() const{
    return m_latest_data_received_by_isSet;
}

bool OAIUser::is_latest_data_received_by_Valid() const{
    return m_latest_data_received_by_isValid;
}

QDateTime OAIUser::getLatestDataReceivedDate() const {
    return m_latest_data_received_date;
}
void OAIUser::setLatestDataReceivedDate(const QDateTime &latest_data_received_date) {
    m_latest_data_received_date = latest_data_received_date;
    m_latest_data_received_date_isSet = true;
}

bool OAIUser::is_latest_data_received_date_Set() const{
    return m_latest_data_received_date_isSet;
}

bool OAIUser::is_latest_data_received_date_Valid() const{
    return m_latest_data_received_date_isValid;
}

bool OAIUser::isLocked() const {
    return m_locked;
}
void OAIUser::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIUser::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIUser::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAIUser::getPicture() const {
    return m_picture;
}
void OAIUser::setPicture(const QString &picture) {
    m_picture = picture;
    m_picture_isSet = true;
}

bool OAIUser::is_picture_Set() const{
    return m_picture_isSet;
}

bool OAIUser::is_picture_Valid() const{
    return m_picture_isValid;
}

QString OAIUser::getRoleDescription() const {
    return m_role_description;
}
void OAIUser::setRoleDescription(const QString &role_description) {
    m_role_description = role_description;
    m_role_description_isSet = true;
}

bool OAIUser::is_role_description_Set() const{
    return m_role_description_isSet;
}

bool OAIUser::is_role_description_Valid() const{
    return m_role_description_isValid;
}

bool OAIUser::isSecretWordIsSet() const {
    return m_secret_word_is_set;
}
void OAIUser::setSecretWordIsSet(const bool &secret_word_is_set) {
    m_secret_word_is_set = secret_word_is_set;
    m_secret_word_is_set_isSet = true;
}

bool OAIUser::is_secret_word_is_set_Set() const{
    return m_secret_word_is_set_isSet;
}

bool OAIUser::is_secret_word_is_set_Valid() const{
    return m_secret_word_is_set_isValid;
}

QString OAIUser::getSurname() const {
    return m_surname;
}
void OAIUser::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAIUser::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAIUser::is_surname_Valid() const{
    return m_surname_isValid;
}

QSet<OAIUserFeature> OAIUser::getUserFeatures() const {
    return m_user_features;
}
void OAIUser::setUserFeatures(const QSet<OAIUserFeature> &user_features) {
    m_user_features = user_features;
    m_user_features_isSet = true;
}

bool OAIUser::is_user_features_Set() const{
    return m_user_features_isSet;
}

bool OAIUser::is_user_features_Valid() const{
    return m_user_features_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_switch_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_login_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dummy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_secret_word_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_data_received_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_data_received_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_word_is_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
