/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatient::OAIPatient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatient::OAIPatient() {
    this->initializeModel();
}

OAIPatient::~OAIPatient() {}

void OAIPatient::initializeModel() {

    m_diagnosis_codes_isSet = false;
    m_diagnosis_codes_isValid = false;

    m_fhir_allergies_isSet = false;
    m_fhir_allergies_isValid = false;

    m_fhir_conditions_isSet = false;
    m_fhir_conditions_isValid = false;

    m_fhir_encounters_isSet = false;
    m_fhir_encounters_isValid = false;

    m_fhir_observations_isSet = false;
    m_fhir_observations_isValid = false;

    m_fhir_patient_isSet = false;
    m_fhir_patient_isValid = false;

    m_fhir_practitioners_isSet = false;
    m_fhir_practitioners_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIPatient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatient::fromJsonObject(QJsonObject json) {

    m_diagnosis_codes_isValid = ::OpenAPI::fromJsonValue(m_diagnosis_codes, json[QString("diagnosisCodes")]);
    m_diagnosis_codes_isSet = !json[QString("diagnosisCodes")].isNull() && m_diagnosis_codes_isValid;

    m_fhir_allergies_isValid = ::OpenAPI::fromJsonValue(m_fhir_allergies, json[QString("fhirAllergies")]);
    m_fhir_allergies_isSet = !json[QString("fhirAllergies")].isNull() && m_fhir_allergies_isValid;

    m_fhir_conditions_isValid = ::OpenAPI::fromJsonValue(m_fhir_conditions, json[QString("fhirConditions")]);
    m_fhir_conditions_isSet = !json[QString("fhirConditions")].isNull() && m_fhir_conditions_isValid;

    m_fhir_encounters_isValid = ::OpenAPI::fromJsonValue(m_fhir_encounters, json[QString("fhirEncounters")]);
    m_fhir_encounters_isSet = !json[QString("fhirEncounters")].isNull() && m_fhir_encounters_isValid;

    m_fhir_observations_isValid = ::OpenAPI::fromJsonValue(m_fhir_observations, json[QString("fhirObservations")]);
    m_fhir_observations_isSet = !json[QString("fhirObservations")].isNull() && m_fhir_observations_isValid;

    m_fhir_patient_isValid = ::OpenAPI::fromJsonValue(m_fhir_patient, json[QString("fhirPatient")]);
    m_fhir_patient_isSet = !json[QString("fhirPatient")].isNull() && m_fhir_patient_isValid;

    m_fhir_practitioners_isValid = ::OpenAPI::fromJsonValue(m_fhir_practitioners, json[QString("fhirPractitioners")]);
    m_fhir_practitioners_isSet = !json[QString("fhirPractitioners")].isNull() && m_fhir_practitioners_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIPatient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatient::asJsonObject() const {
    QJsonObject obj;
    if (m_diagnosis_codes.size() > 0) {
        obj.insert(QString("diagnosisCodes"), ::OpenAPI::toJsonValue(m_diagnosis_codes));
    }
    if (m_fhir_allergies.size() > 0) {
        obj.insert(QString("fhirAllergies"), ::OpenAPI::toJsonValue(m_fhir_allergies));
    }
    if (m_fhir_conditions.size() > 0) {
        obj.insert(QString("fhirConditions"), ::OpenAPI::toJsonValue(m_fhir_conditions));
    }
    if (m_fhir_encounters.size() > 0) {
        obj.insert(QString("fhirEncounters"), ::OpenAPI::toJsonValue(m_fhir_encounters));
    }
    if (m_fhir_observations.size() > 0) {
        obj.insert(QString("fhirObservations"), ::OpenAPI::toJsonValue(m_fhir_observations));
    }
    if (m_fhir_patient.isSet()) {
        obj.insert(QString("fhirPatient"), ::OpenAPI::toJsonValue(m_fhir_patient));
    }
    if (m_fhir_practitioners.size() > 0) {
        obj.insert(QString("fhirPractitioners"), ::OpenAPI::toJsonValue(m_fhir_practitioners));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QList<OAICode> OAIPatient::getDiagnosisCodes() const {
    return m_diagnosis_codes;
}
void OAIPatient::setDiagnosisCodes(const QList<OAICode> &diagnosis_codes) {
    m_diagnosis_codes = diagnosis_codes;
    m_diagnosis_codes_isSet = true;
}

bool OAIPatient::is_diagnosis_codes_Set() const{
    return m_diagnosis_codes_isSet;
}

bool OAIPatient::is_diagnosis_codes_Valid() const{
    return m_diagnosis_codes_isValid;
}

QList<OAIFhirAllergy> OAIPatient::getFhirAllergies() const {
    return m_fhir_allergies;
}
void OAIPatient::setFhirAllergies(const QList<OAIFhirAllergy> &fhir_allergies) {
    m_fhir_allergies = fhir_allergies;
    m_fhir_allergies_isSet = true;
}

bool OAIPatient::is_fhir_allergies_Set() const{
    return m_fhir_allergies_isSet;
}

bool OAIPatient::is_fhir_allergies_Valid() const{
    return m_fhir_allergies_isValid;
}

QList<OAIFhirCondition> OAIPatient::getFhirConditions() const {
    return m_fhir_conditions;
}
void OAIPatient::setFhirConditions(const QList<OAIFhirCondition> &fhir_conditions) {
    m_fhir_conditions = fhir_conditions;
    m_fhir_conditions_isSet = true;
}

bool OAIPatient::is_fhir_conditions_Set() const{
    return m_fhir_conditions_isSet;
}

bool OAIPatient::is_fhir_conditions_Valid() const{
    return m_fhir_conditions_isValid;
}

QList<OAIFhirEncounter> OAIPatient::getFhirEncounters() const {
    return m_fhir_encounters;
}
void OAIPatient::setFhirEncounters(const QList<OAIFhirEncounter> &fhir_encounters) {
    m_fhir_encounters = fhir_encounters;
    m_fhir_encounters_isSet = true;
}

bool OAIPatient::is_fhir_encounters_Set() const{
    return m_fhir_encounters_isSet;
}

bool OAIPatient::is_fhir_encounters_Valid() const{
    return m_fhir_encounters_isValid;
}

QList<OAIFhirObservation> OAIPatient::getFhirObservations() const {
    return m_fhir_observations;
}
void OAIPatient::setFhirObservations(const QList<OAIFhirObservation> &fhir_observations) {
    m_fhir_observations = fhir_observations;
    m_fhir_observations_isSet = true;
}

bool OAIPatient::is_fhir_observations_Set() const{
    return m_fhir_observations_isSet;
}

bool OAIPatient::is_fhir_observations_Valid() const{
    return m_fhir_observations_isValid;
}

OAIFhirPatient OAIPatient::getFhirPatient() const {
    return m_fhir_patient;
}
void OAIPatient::setFhirPatient(const OAIFhirPatient &fhir_patient) {
    m_fhir_patient = fhir_patient;
    m_fhir_patient_isSet = true;
}

bool OAIPatient::is_fhir_patient_Set() const{
    return m_fhir_patient_isSet;
}

bool OAIPatient::is_fhir_patient_Valid() const{
    return m_fhir_patient_isValid;
}

QList<OAIFhirPractitioner> OAIPatient::getFhirPractitioners() const {
    return m_fhir_practitioners;
}
void OAIPatient::setFhirPractitioners(const QList<OAIFhirPractitioner> &fhir_practitioners) {
    m_fhir_practitioners = fhir_practitioners;
    m_fhir_practitioners_isSet = true;
}

bool OAIPatient::is_fhir_practitioners_Set() const{
    return m_fhir_practitioners_isSet;
}

bool OAIPatient::is_fhir_practitioners_Valid() const{
    return m_fhir_practitioners_isValid;
}

OAIGroup OAIPatient::getGroup() const {
    return m_group;
}
void OAIPatient::setGroup(const OAIGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIPatient::is_group_Set() const{
    return m_group_isSet;
}

bool OAIPatient::is_group_Valid() const{
    return m_group_isValid;
}

qint64 OAIPatient::getId() const {
    return m_id;
}
void OAIPatient::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPatient::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPatient::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPatient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diagnosis_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir_allergies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir_encounters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir_observations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir_patient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir_practitioners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
