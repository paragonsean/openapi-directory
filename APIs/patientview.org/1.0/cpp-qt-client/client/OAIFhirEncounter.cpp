/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirEncounter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirEncounter::OAIFhirEncounter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirEncounter::OAIFhirEncounter() {
    this->initializeModel();
}

OAIFhirEncounter::~OAIFhirEncounter() {}

void OAIFhirEncounter::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_encounter_type_isSet = false;
    m_encounter_type_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_observations_isSet = false;
    m_observations_isValid = false;

    m_procedures_isSet = false;
    m_procedures_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIFhirEncounter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirEncounter::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_encounter_type_isValid = ::OpenAPI::fromJsonValue(m_encounter_type, json[QString("encounterType")]);
    m_encounter_type_isSet = !json[QString("encounterType")].isNull() && m_encounter_type_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_observations_isValid = ::OpenAPI::fromJsonValue(m_observations, json[QString("observations")]);
    m_observations_isSet = !json[QString("observations")].isNull() && m_observations_isValid;

    m_procedures_isValid = ::OpenAPI::fromJsonValue(m_procedures, json[QString("procedures")]);
    m_procedures_isSet = !json[QString("procedures")].isNull() && m_procedures_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIFhirEncounter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirEncounter::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_encounter_type_isSet) {
        obj.insert(QString("encounterType"), ::OpenAPI::toJsonValue(m_encounter_type));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_observations.size() > 0) {
        obj.insert(QString("observations"), ::OpenAPI::toJsonValue(m_observations));
    }
    if (m_procedures.size() > 0) {
        obj.insert(QString("procedures"), ::OpenAPI::toJsonValue(m_procedures));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIFhirEncounter::getDate() const {
    return m_date;
}
void OAIFhirEncounter::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIFhirEncounter::is_date_Set() const{
    return m_date_isSet;
}

bool OAIFhirEncounter::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIFhirEncounter::getEncounterType() const {
    return m_encounter_type;
}
void OAIFhirEncounter::setEncounterType(const QString &encounter_type) {
    m_encounter_type = encounter_type;
    m_encounter_type_isSet = true;
}

bool OAIFhirEncounter::is_encounter_type_Set() const{
    return m_encounter_type_isSet;
}

bool OAIFhirEncounter::is_encounter_type_Valid() const{
    return m_encounter_type_isValid;
}

OAIGroup OAIFhirEncounter::getGroup() const {
    return m_group;
}
void OAIFhirEncounter::setGroup(const OAIGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIFhirEncounter::is_group_Set() const{
    return m_group_isSet;
}

bool OAIFhirEncounter::is_group_Valid() const{
    return m_group_isValid;
}

qint64 OAIFhirEncounter::getId() const {
    return m_id;
}
void OAIFhirEncounter::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFhirEncounter::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFhirEncounter::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFhirEncounter::getIdentifier() const {
    return m_identifier;
}
void OAIFhirEncounter::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIFhirEncounter::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIFhirEncounter::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QSet<OAILink> OAIFhirEncounter::getLinks() const {
    return m_links;
}
void OAIFhirEncounter::setLinks(const QSet<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIFhirEncounter::is_links_Set() const{
    return m_links_isSet;
}

bool OAIFhirEncounter::is_links_Valid() const{
    return m_links_isValid;
}

QSet<OAIFhirObservation> OAIFhirEncounter::getObservations() const {
    return m_observations;
}
void OAIFhirEncounter::setObservations(const QSet<OAIFhirObservation> &observations) {
    m_observations = observations;
    m_observations_isSet = true;
}

bool OAIFhirEncounter::is_observations_Set() const{
    return m_observations_isSet;
}

bool OAIFhirEncounter::is_observations_Valid() const{
    return m_observations_isValid;
}

QSet<OAIFhirProcedure> OAIFhirEncounter::getProcedures() const {
    return m_procedures;
}
void OAIFhirEncounter::setProcedures(const QSet<OAIFhirProcedure> &procedures) {
    m_procedures = procedures;
    m_procedures_isSet = true;
}

bool OAIFhirEncounter::is_procedures_Set() const{
    return m_procedures_isSet;
}

bool OAIFhirEncounter::is_procedures_Valid() const{
    return m_procedures_isValid;
}

QString OAIFhirEncounter::getStatus() const {
    return m_status;
}
void OAIFhirEncounter::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFhirEncounter::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFhirEncounter::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIFhirEncounter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encounter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_observations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_procedures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirEncounter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
