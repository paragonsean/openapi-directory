/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObservationHeading.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObservationHeading::OAIObservationHeading(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObservationHeading::OAIObservationHeading() {
    this->initializeModel();
}

OAIObservationHeading::~OAIObservationHeading() {}

void OAIObservationHeading::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_decimal_places_isSet = false;
    m_decimal_places_isValid = false;

    m_default_panel_isSet = false;
    m_default_panel_isValid = false;

    m_default_panel_order_isSet = false;
    m_default_panel_order_isValid = false;

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_info_link_isSet = false;
    m_info_link_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_max_graph_isSet = false;
    m_max_graph_isValid = false;

    m_min_graph_isSet = false;
    m_min_graph_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_normal_range_isSet = false;
    m_normal_range_isValid = false;

    m_observation_heading_groups_isSet = false;
    m_observation_heading_groups_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIObservationHeading::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObservationHeading::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_decimal_places_isValid = ::OpenAPI::fromJsonValue(m_decimal_places, json[QString("decimalPlaces")]);
    m_decimal_places_isSet = !json[QString("decimalPlaces")].isNull() && m_decimal_places_isValid;

    m_default_panel_isValid = ::OpenAPI::fromJsonValue(m_default_panel, json[QString("defaultPanel")]);
    m_default_panel_isSet = !json[QString("defaultPanel")].isNull() && m_default_panel_isValid;

    m_default_panel_order_isValid = ::OpenAPI::fromJsonValue(m_default_panel_order, json[QString("defaultPanelOrder")]);
    m_default_panel_order_isSet = !json[QString("defaultPanelOrder")].isNull() && m_default_panel_order_isValid;

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_info_link_isValid = ::OpenAPI::fromJsonValue(m_info_link, json[QString("infoLink")]);
    m_info_link_isSet = !json[QString("infoLink")].isNull() && m_info_link_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_max_graph_isValid = ::OpenAPI::fromJsonValue(m_max_graph, json[QString("maxGraph")]);
    m_max_graph_isSet = !json[QString("maxGraph")].isNull() && m_max_graph_isValid;

    m_min_graph_isValid = ::OpenAPI::fromJsonValue(m_min_graph, json[QString("minGraph")]);
    m_min_graph_isSet = !json[QString("minGraph")].isNull() && m_min_graph_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_normal_range_isValid = ::OpenAPI::fromJsonValue(m_normal_range, json[QString("normalRange")]);
    m_normal_range_isSet = !json[QString("normalRange")].isNull() && m_normal_range_isValid;

    m_observation_heading_groups_isValid = ::OpenAPI::fromJsonValue(m_observation_heading_groups, json[QString("observationHeadingGroups")]);
    m_observation_heading_groups_isSet = !json[QString("observationHeadingGroups")].isNull() && m_observation_heading_groups_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIObservationHeading::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObservationHeading::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_decimal_places_isSet) {
        obj.insert(QString("decimalPlaces"), ::OpenAPI::toJsonValue(m_decimal_places));
    }
    if (m_default_panel_isSet) {
        obj.insert(QString("defaultPanel"), ::OpenAPI::toJsonValue(m_default_panel));
    }
    if (m_default_panel_order_isSet) {
        obj.insert(QString("defaultPanelOrder"), ::OpenAPI::toJsonValue(m_default_panel_order));
    }
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_info_link_isSet) {
        obj.insert(QString("infoLink"), ::OpenAPI::toJsonValue(m_info_link));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_max_graph_isSet) {
        obj.insert(QString("maxGraph"), ::OpenAPI::toJsonValue(m_max_graph));
    }
    if (m_min_graph_isSet) {
        obj.insert(QString("minGraph"), ::OpenAPI::toJsonValue(m_min_graph));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_normal_range_isSet) {
        obj.insert(QString("normalRange"), ::OpenAPI::toJsonValue(m_normal_range));
    }
    if (m_observation_heading_groups.size() > 0) {
        obj.insert(QString("observationHeadingGroups"), ::OpenAPI::toJsonValue(m_observation_heading_groups));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

QString OAIObservationHeading::getCode() const {
    return m_code;
}
void OAIObservationHeading::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIObservationHeading::is_code_Set() const{
    return m_code_isSet;
}

bool OAIObservationHeading::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIObservationHeading::getCreated() const {
    return m_created;
}
void OAIObservationHeading::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIObservationHeading::is_created_Set() const{
    return m_created_isSet;
}

bool OAIObservationHeading::is_created_Valid() const{
    return m_created_isValid;
}

qint64 OAIObservationHeading::getDecimalPlaces() const {
    return m_decimal_places;
}
void OAIObservationHeading::setDecimalPlaces(const qint64 &decimal_places) {
    m_decimal_places = decimal_places;
    m_decimal_places_isSet = true;
}

bool OAIObservationHeading::is_decimal_places_Set() const{
    return m_decimal_places_isSet;
}

bool OAIObservationHeading::is_decimal_places_Valid() const{
    return m_decimal_places_isValid;
}

qint64 OAIObservationHeading::getDefaultPanel() const {
    return m_default_panel;
}
void OAIObservationHeading::setDefaultPanel(const qint64 &default_panel) {
    m_default_panel = default_panel;
    m_default_panel_isSet = true;
}

bool OAIObservationHeading::is_default_panel_Set() const{
    return m_default_panel_isSet;
}

bool OAIObservationHeading::is_default_panel_Valid() const{
    return m_default_panel_isValid;
}

qint64 OAIObservationHeading::getDefaultPanelOrder() const {
    return m_default_panel_order;
}
void OAIObservationHeading::setDefaultPanelOrder(const qint64 &default_panel_order) {
    m_default_panel_order = default_panel_order;
    m_default_panel_order_isSet = true;
}

bool OAIObservationHeading::is_default_panel_order_Set() const{
    return m_default_panel_order_isSet;
}

bool OAIObservationHeading::is_default_panel_order_Valid() const{
    return m_default_panel_order_isValid;
}

QString OAIObservationHeading::getHeading() const {
    return m_heading;
}
void OAIObservationHeading::setHeading(const QString &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAIObservationHeading::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAIObservationHeading::is_heading_Valid() const{
    return m_heading_isValid;
}

qint64 OAIObservationHeading::getId() const {
    return m_id;
}
void OAIObservationHeading::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObservationHeading::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObservationHeading::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIObservationHeading::getInfoLink() const {
    return m_info_link;
}
void OAIObservationHeading::setInfoLink(const QString &info_link) {
    m_info_link = info_link;
    m_info_link_isSet = true;
}

bool OAIObservationHeading::is_info_link_Set() const{
    return m_info_link_isSet;
}

bool OAIObservationHeading::is_info_link_Valid() const{
    return m_info_link_isValid;
}

QDateTime OAIObservationHeading::getLastUpdate() const {
    return m_last_update;
}
void OAIObservationHeading::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIObservationHeading::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIObservationHeading::is_last_update_Valid() const{
    return m_last_update_isValid;
}

double OAIObservationHeading::getMaxGraph() const {
    return m_max_graph;
}
void OAIObservationHeading::setMaxGraph(const double &max_graph) {
    m_max_graph = max_graph;
    m_max_graph_isSet = true;
}

bool OAIObservationHeading::is_max_graph_Set() const{
    return m_max_graph_isSet;
}

bool OAIObservationHeading::is_max_graph_Valid() const{
    return m_max_graph_isValid;
}

double OAIObservationHeading::getMinGraph() const {
    return m_min_graph;
}
void OAIObservationHeading::setMinGraph(const double &min_graph) {
    m_min_graph = min_graph;
    m_min_graph_isSet = true;
}

bool OAIObservationHeading::is_min_graph_Set() const{
    return m_min_graph_isSet;
}

bool OAIObservationHeading::is_min_graph_Valid() const{
    return m_min_graph_isValid;
}

QString OAIObservationHeading::getName() const {
    return m_name;
}
void OAIObservationHeading::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObservationHeading::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObservationHeading::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIObservationHeading::getNormalRange() const {
    return m_normal_range;
}
void OAIObservationHeading::setNormalRange(const QString &normal_range) {
    m_normal_range = normal_range;
    m_normal_range_isSet = true;
}

bool OAIObservationHeading::is_normal_range_Set() const{
    return m_normal_range_isSet;
}

bool OAIObservationHeading::is_normal_range_Valid() const{
    return m_normal_range_isValid;
}

QSet<OAIObservationHeadingGroup> OAIObservationHeading::getObservationHeadingGroups() const {
    return m_observation_heading_groups;
}
void OAIObservationHeading::setObservationHeadingGroups(const QSet<OAIObservationHeadingGroup> &observation_heading_groups) {
    m_observation_heading_groups = observation_heading_groups;
    m_observation_heading_groups_isSet = true;
}

bool OAIObservationHeading::is_observation_heading_groups_Set() const{
    return m_observation_heading_groups_isSet;
}

bool OAIObservationHeading::is_observation_heading_groups_Valid() const{
    return m_observation_heading_groups_isValid;
}

QString OAIObservationHeading::getUnits() const {
    return m_units;
}
void OAIObservationHeading::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIObservationHeading::is_units_Set() const{
    return m_units_isSet;
}

bool OAIObservationHeading::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIObservationHeading::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_places_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_panel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_panel_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_graph_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_graph_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normal_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_heading_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObservationHeading::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
