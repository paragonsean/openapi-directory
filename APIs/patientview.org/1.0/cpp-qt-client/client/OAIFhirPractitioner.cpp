/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirPractitioner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirPractitioner::OAIFhirPractitioner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirPractitioner::OAIFhirPractitioner() {
    this->initializeModel();
}

OAIFhirPractitioner::~OAIFhirPractitioner() {}

void OAIFhirPractitioner::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_address3_isSet = false;
    m_address3_isValid = false;

    m_address4_isSet = false;
    m_address4_isValid = false;

    m_allow_invite_gp_isSet = false;
    m_allow_invite_gp_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_group_code_isSet = false;
    m_group_code_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_invite_date_isSet = false;
    m_invite_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIFhirPractitioner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirPractitioner::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("address1")]);
    m_address1_isSet = !json[QString("address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("address2")]);
    m_address2_isSet = !json[QString("address2")].isNull() && m_address2_isValid;

    m_address3_isValid = ::OpenAPI::fromJsonValue(m_address3, json[QString("address3")]);
    m_address3_isSet = !json[QString("address3")].isNull() && m_address3_isValid;

    m_address4_isValid = ::OpenAPI::fromJsonValue(m_address4, json[QString("address4")]);
    m_address4_isSet = !json[QString("address4")].isNull() && m_address4_isValid;

    m_allow_invite_gp_isValid = ::OpenAPI::fromJsonValue(m_allow_invite_gp, json[QString("allowInviteGp")]);
    m_allow_invite_gp_isSet = !json[QString("allowInviteGp")].isNull() && m_allow_invite_gp_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_group_code_isValid = ::OpenAPI::fromJsonValue(m_group_code, json[QString("groupCode")]);
    m_group_code_isSet = !json[QString("groupCode")].isNull() && m_group_code_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_invite_date_isValid = ::OpenAPI::fromJsonValue(m_invite_date, json[QString("inviteDate")]);
    m_invite_date_isSet = !json[QString("inviteDate")].isNull() && m_invite_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIFhirPractitioner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirPractitioner::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_address3_isSet) {
        obj.insert(QString("address3"), ::OpenAPI::toJsonValue(m_address3));
    }
    if (m_address4_isSet) {
        obj.insert(QString("address4"), ::OpenAPI::toJsonValue(m_address4));
    }
    if (m_allow_invite_gp_isSet) {
        obj.insert(QString("allowInviteGp"), ::OpenAPI::toJsonValue(m_allow_invite_gp));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_group_code_isSet) {
        obj.insert(QString("groupCode"), ::OpenAPI::toJsonValue(m_group_code));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_invite_date_isSet) {
        obj.insert(QString("inviteDate"), ::OpenAPI::toJsonValue(m_invite_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIFhirPractitioner::getAddress1() const {
    return m_address1;
}
void OAIFhirPractitioner::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAIFhirPractitioner::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAIFhirPractitioner::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAIFhirPractitioner::getAddress2() const {
    return m_address2;
}
void OAIFhirPractitioner::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAIFhirPractitioner::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAIFhirPractitioner::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAIFhirPractitioner::getAddress3() const {
    return m_address3;
}
void OAIFhirPractitioner::setAddress3(const QString &address3) {
    m_address3 = address3;
    m_address3_isSet = true;
}

bool OAIFhirPractitioner::is_address3_Set() const{
    return m_address3_isSet;
}

bool OAIFhirPractitioner::is_address3_Valid() const{
    return m_address3_isValid;
}

QString OAIFhirPractitioner::getAddress4() const {
    return m_address4;
}
void OAIFhirPractitioner::setAddress4(const QString &address4) {
    m_address4 = address4;
    m_address4_isSet = true;
}

bool OAIFhirPractitioner::is_address4_Set() const{
    return m_address4_isSet;
}

bool OAIFhirPractitioner::is_address4_Valid() const{
    return m_address4_isValid;
}

bool OAIFhirPractitioner::isAllowInviteGp() const {
    return m_allow_invite_gp;
}
void OAIFhirPractitioner::setAllowInviteGp(const bool &allow_invite_gp) {
    m_allow_invite_gp = allow_invite_gp;
    m_allow_invite_gp_isSet = true;
}

bool OAIFhirPractitioner::is_allow_invite_gp_Set() const{
    return m_allow_invite_gp_isSet;
}

bool OAIFhirPractitioner::is_allow_invite_gp_Valid() const{
    return m_allow_invite_gp_isValid;
}

QList<OAIFhirContact> OAIFhirPractitioner::getContacts() const {
    return m_contacts;
}
void OAIFhirPractitioner::setContacts(const QList<OAIFhirContact> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIFhirPractitioner::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIFhirPractitioner::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QString OAIFhirPractitioner::getGender() const {
    return m_gender;
}
void OAIFhirPractitioner::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIFhirPractitioner::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIFhirPractitioner::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIFhirPractitioner::getGroupCode() const {
    return m_group_code;
}
void OAIFhirPractitioner::setGroupCode(const QString &group_code) {
    m_group_code = group_code;
    m_group_code_isSet = true;
}

bool OAIFhirPractitioner::is_group_code_Set() const{
    return m_group_code_isSet;
}

bool OAIFhirPractitioner::is_group_code_Valid() const{
    return m_group_code_isValid;
}

QString OAIFhirPractitioner::getIdentifier() const {
    return m_identifier;
}
void OAIFhirPractitioner::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIFhirPractitioner::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIFhirPractitioner::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QDateTime OAIFhirPractitioner::getInviteDate() const {
    return m_invite_date;
}
void OAIFhirPractitioner::setInviteDate(const QDateTime &invite_date) {
    m_invite_date = invite_date;
    m_invite_date_isSet = true;
}

bool OAIFhirPractitioner::is_invite_date_Set() const{
    return m_invite_date_isSet;
}

bool OAIFhirPractitioner::is_invite_date_Valid() const{
    return m_invite_date_isValid;
}

QString OAIFhirPractitioner::getName() const {
    return m_name;
}
void OAIFhirPractitioner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFhirPractitioner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFhirPractitioner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFhirPractitioner::getPostcode() const {
    return m_postcode;
}
void OAIFhirPractitioner::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIFhirPractitioner::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIFhirPractitioner::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QString OAIFhirPractitioner::getRole() const {
    return m_role;
}
void OAIFhirPractitioner::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIFhirPractitioner::is_role_Set() const{
    return m_role_isSet;
}

bool OAIFhirPractitioner::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIFhirPractitioner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_invite_gp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirPractitioner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
