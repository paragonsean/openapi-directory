/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_address3_isSet = false;
    m_address3_isValid = false;

    m_child_groups_isSet = false;
    m_child_groups_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_contact_points_isSet = false;
    m_contact_points_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_fhir_resource_id_isSet = false;
    m_fhir_resource_id_isValid = false;

    m_group_features_isSet = false;
    m_group_features_isValid = false;

    m_group_type_isSet = false;
    m_group_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_import_date_isSet = false;
    m_last_import_date_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_groups_isSet = false;
    m_parent_groups_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_sftp_user_isSet = false;
    m_sftp_user_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;

    m_visible_to_join_isSet = false;
    m_visible_to_join_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("address1")]);
    m_address1_isSet = !json[QString("address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("address2")]);
    m_address2_isSet = !json[QString("address2")].isNull() && m_address2_isValid;

    m_address3_isValid = ::OpenAPI::fromJsonValue(m_address3, json[QString("address3")]);
    m_address3_isSet = !json[QString("address3")].isNull() && m_address3_isValid;

    m_child_groups_isValid = ::OpenAPI::fromJsonValue(m_child_groups, json[QString("childGroups")]);
    m_child_groups_isSet = !json[QString("childGroups")].isNull() && m_child_groups_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_contact_points_isValid = ::OpenAPI::fromJsonValue(m_contact_points, json[QString("contactPoints")]);
    m_contact_points_isSet = !json[QString("contactPoints")].isNull() && m_contact_points_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_fhir_resource_id_isValid = ::OpenAPI::fromJsonValue(m_fhir_resource_id, json[QString("fhirResourceId")]);
    m_fhir_resource_id_isSet = !json[QString("fhirResourceId")].isNull() && m_fhir_resource_id_isValid;

    m_group_features_isValid = ::OpenAPI::fromJsonValue(m_group_features, json[QString("groupFeatures")]);
    m_group_features_isSet = !json[QString("groupFeatures")].isNull() && m_group_features_isValid;

    m_group_type_isValid = ::OpenAPI::fromJsonValue(m_group_type, json[QString("groupType")]);
    m_group_type_isSet = !json[QString("groupType")].isNull() && m_group_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_import_date_isValid = ::OpenAPI::fromJsonValue(m_last_import_date, json[QString("lastImportDate")]);
    m_last_import_date_isSet = !json[QString("lastImportDate")].isNull() && m_last_import_date_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_groups_isValid = ::OpenAPI::fromJsonValue(m_parent_groups, json[QString("parentGroups")]);
    m_parent_groups_isSet = !json[QString("parentGroups")].isNull() && m_parent_groups_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_sftp_user_isValid = ::OpenAPI::fromJsonValue(m_sftp_user, json[QString("sftpUser")]);
    m_sftp_user_isSet = !json[QString("sftpUser")].isNull() && m_sftp_user_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("shortName")]);
    m_short_name_isSet = !json[QString("shortName")].isNull() && m_short_name_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;

    m_visible_to_join_isValid = ::OpenAPI::fromJsonValue(m_visible_to_join, json[QString("visibleToJoin")]);
    m_visible_to_join_isSet = !json[QString("visibleToJoin")].isNull() && m_visible_to_join_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_address3_isSet) {
        obj.insert(QString("address3"), ::OpenAPI::toJsonValue(m_address3));
    }
    if (m_child_groups.size() > 0) {
        obj.insert(QString("childGroups"), ::OpenAPI::toJsonValue(m_child_groups));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_contact_points.size() > 0) {
        obj.insert(QString("contactPoints"), ::OpenAPI::toJsonValue(m_contact_points));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_fhir_resource_id.isSet()) {
        obj.insert(QString("fhirResourceId"), ::OpenAPI::toJsonValue(m_fhir_resource_id));
    }
    if (m_group_features.size() > 0) {
        obj.insert(QString("groupFeatures"), ::OpenAPI::toJsonValue(m_group_features));
    }
    if (m_group_type.isSet()) {
        obj.insert(QString("groupType"), ::OpenAPI::toJsonValue(m_group_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_import_date_isSet) {
        obj.insert(QString("lastImportDate"), ::OpenAPI::toJsonValue(m_last_import_date));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_groups.size() > 0) {
        obj.insert(QString("parentGroups"), ::OpenAPI::toJsonValue(m_parent_groups));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_sftp_user_isSet) {
        obj.insert(QString("sftpUser"), ::OpenAPI::toJsonValue(m_sftp_user));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("shortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    if (m_visible_to_join_isSet) {
        obj.insert(QString("visibleToJoin"), ::OpenAPI::toJsonValue(m_visible_to_join));
    }
    return obj;
}

QString OAIGroup::getAddress1() const {
    return m_address1;
}
void OAIGroup::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAIGroup::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAIGroup::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAIGroup::getAddress2() const {
    return m_address2;
}
void OAIGroup::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAIGroup::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAIGroup::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAIGroup::getAddress3() const {
    return m_address3;
}
void OAIGroup::setAddress3(const QString &address3) {
    m_address3 = address3;
    m_address3_isSet = true;
}

bool OAIGroup::is_address3_Set() const{
    return m_address3_isSet;
}

bool OAIGroup::is_address3_Valid() const{
    return m_address3_isValid;
}

QList<OAIGroup> OAIGroup::getChildGroups() const {
    return m_child_groups;
}
void OAIGroup::setChildGroups(const QList<OAIGroup> &child_groups) {
    m_child_groups = child_groups;
    m_child_groups_isSet = true;
}

bool OAIGroup::is_child_groups_Set() const{
    return m_child_groups_isSet;
}

bool OAIGroup::is_child_groups_Valid() const{
    return m_child_groups_isValid;
}

QString OAIGroup::getCode() const {
    return m_code;
}
void OAIGroup::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGroup::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGroup::is_code_Valid() const{
    return m_code_isValid;
}

QSet<OAIContactPoint> OAIGroup::getContactPoints() const {
    return m_contact_points;
}
void OAIGroup::setContactPoints(const QSet<OAIContactPoint> &contact_points) {
    m_contact_points = contact_points;
    m_contact_points_isSet = true;
}

bool OAIGroup::is_contact_points_Set() const{
    return m_contact_points_isSet;
}

bool OAIGroup::is_contact_points_Valid() const{
    return m_contact_points_isValid;
}

QDateTime OAIGroup::getCreated() const {
    return m_created;
}
void OAIGroup::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIGroup::is_created_Set() const{
    return m_created_isSet;
}

bool OAIGroup::is_created_Valid() const{
    return m_created_isValid;
}

QJsonValue OAIGroup::getFhirResourceId() const {
    return m_fhir_resource_id;
}
void OAIGroup::setFhirResourceId(const QJsonValue &fhir_resource_id) {
    m_fhir_resource_id = fhir_resource_id;
    m_fhir_resource_id_isSet = true;
}

bool OAIGroup::is_fhir_resource_id_Set() const{
    return m_fhir_resource_id_isSet;
}

bool OAIGroup::is_fhir_resource_id_Valid() const{
    return m_fhir_resource_id_isValid;
}

QSet<OAIGroupFeature> OAIGroup::getGroupFeatures() const {
    return m_group_features;
}
void OAIGroup::setGroupFeatures(const QSet<OAIGroupFeature> &group_features) {
    m_group_features = group_features;
    m_group_features_isSet = true;
}

bool OAIGroup::is_group_features_Set() const{
    return m_group_features_isSet;
}

bool OAIGroup::is_group_features_Valid() const{
    return m_group_features_isValid;
}

OAILookup OAIGroup::getGroupType() const {
    return m_group_type;
}
void OAIGroup::setGroupType(const OAILookup &group_type) {
    m_group_type = group_type;
    m_group_type_isSet = true;
}

bool OAIGroup::is_group_type_Set() const{
    return m_group_type_isSet;
}

bool OAIGroup::is_group_type_Valid() const{
    return m_group_type_isValid;
}

qint64 OAIGroup::getId() const {
    return m_id;
}
void OAIGroup::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroup::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIGroup::getLastImportDate() const {
    return m_last_import_date;
}
void OAIGroup::setLastImportDate(const QDateTime &last_import_date) {
    m_last_import_date = last_import_date;
    m_last_import_date_isSet = true;
}

bool OAIGroup::is_last_import_date_Set() const{
    return m_last_import_date_isSet;
}

bool OAIGroup::is_last_import_date_Valid() const{
    return m_last_import_date_isValid;
}

QDateTime OAIGroup::getLastUpdate() const {
    return m_last_update;
}
void OAIGroup::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIGroup::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIGroup::is_last_update_Valid() const{
    return m_last_update_isValid;
}

QSet<OAILink> OAIGroup::getLinks() const {
    return m_links;
}
void OAIGroup::setLinks(const QSet<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIGroup::is_links_Set() const{
    return m_links_isSet;
}

bool OAIGroup::is_links_Valid() const{
    return m_links_isValid;
}

QSet<OAILocation> OAIGroup::getLocations() const {
    return m_locations;
}
void OAIGroup::setLocations(const QSet<OAILocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIGroup::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIGroup::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIGroup::getName() const {
    return m_name;
}
void OAIGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGroup::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGroup> OAIGroup::getParentGroups() const {
    return m_parent_groups;
}
void OAIGroup::setParentGroups(const QList<OAIGroup> &parent_groups) {
    m_parent_groups = parent_groups;
    m_parent_groups_isSet = true;
}

bool OAIGroup::is_parent_groups_Set() const{
    return m_parent_groups_isSet;
}

bool OAIGroup::is_parent_groups_Valid() const{
    return m_parent_groups_isValid;
}

QString OAIGroup::getPostcode() const {
    return m_postcode;
}
void OAIGroup::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIGroup::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIGroup::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QString OAIGroup::getSftpUser() const {
    return m_sftp_user;
}
void OAIGroup::setSftpUser(const QString &sftp_user) {
    m_sftp_user = sftp_user;
    m_sftp_user_isSet = true;
}

bool OAIGroup::is_sftp_user_Set() const{
    return m_sftp_user_isSet;
}

bool OAIGroup::is_sftp_user_Valid() const{
    return m_sftp_user_isValid;
}

QString OAIGroup::getShortName() const {
    return m_short_name;
}
void OAIGroup::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIGroup::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIGroup::is_short_name_Valid() const{
    return m_short_name_isValid;
}

bool OAIGroup::isVisible() const {
    return m_visible;
}
void OAIGroup::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIGroup::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIGroup::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIGroup::isVisibleToJoin() const {
    return m_visible_to_join;
}
void OAIGroup::setVisibleToJoin(const bool &visible_to_join) {
    m_visible_to_join = visible_to_join;
    m_visible_to_join_isSet = true;
}

bool OAIGroup::is_visible_to_join_Set() const{
    return m_visible_to_join_isSet;
}

bool OAIGroup::is_visible_to_join_Valid() const{
    return m_visible_to_join_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_import_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sftp_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_to_join_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
