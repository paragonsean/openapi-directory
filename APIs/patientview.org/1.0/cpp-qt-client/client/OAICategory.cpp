/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_friendly_description_isSet = false;
    m_friendly_description_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_icd10_description_isSet = false;
    m_icd10_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_friendly_description_isValid = ::OpenAPI::fromJsonValue(m_friendly_description, json[QString("friendlyDescription")]);
    m_friendly_description_isSet = !json[QString("friendlyDescription")].isNull() && m_friendly_description_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_icd10_description_isValid = ::OpenAPI::fromJsonValue(m_icd10_description, json[QString("icd10Description")]);
    m_icd10_description_isSet = !json[QString("icd10Description")].isNull() && m_icd10_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_friendly_description_isSet) {
        obj.insert(QString("friendlyDescription"), ::OpenAPI::toJsonValue(m_friendly_description));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_icd10_description_isSet) {
        obj.insert(QString("icd10Description"), ::OpenAPI::toJsonValue(m_icd10_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    return obj;
}

QString OAICategory::getFriendlyDescription() const {
    return m_friendly_description;
}
void OAICategory::setFriendlyDescription(const QString &friendly_description) {
    m_friendly_description = friendly_description;
    m_friendly_description_isSet = true;
}

bool OAICategory::is_friendly_description_Set() const{
    return m_friendly_description_isSet;
}

bool OAICategory::is_friendly_description_Valid() const{
    return m_friendly_description_isValid;
}

bool OAICategory::isHidden() const {
    return m_hidden;
}
void OAICategory::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAICategory::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAICategory::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAICategory::getIcd10Description() const {
    return m_icd10_description;
}
void OAICategory::setIcd10Description(const QString &icd10_description) {
    m_icd10_description = icd10_description;
    m_icd10_description_isSet = true;
}

bool OAICategory::is_icd10_description_Set() const{
    return m_icd10_description_isSet;
}

bool OAICategory::is_icd10_description_Valid() const{
    return m_icd10_description_isValid;
}

qint64 OAICategory::getId() const {
    return m_id;
}
void OAICategory::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategory::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICategory::getNumber() const {
    return m_number;
}
void OAICategory::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICategory::is_number_Set() const{
    return m_number_isSet;
}

bool OAICategory::is_number_Valid() const{
    return m_number_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_friendly_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icd10_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
