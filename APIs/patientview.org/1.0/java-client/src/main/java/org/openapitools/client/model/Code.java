/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.CodeCategory;
import org.openapitools.client.model.CodeExternalStandard;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.Lookup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Code
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Code {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CODE_CATEGORIES = "codeCategories";
  @SerializedName(SERIALIZED_NAME_CODE_CATEGORIES)
  private Set<CodeCategory> codeCategories = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CODE_TYPE = "codeType";
  @SerializedName(SERIALIZED_NAME_CODE_TYPE)
  private Lookup codeType;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_ORDER = "displayOrder";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ORDER)
  private Integer displayOrder;

  public static final String SERIALIZED_NAME_EXTERNAL_STANDARDS = "externalStandards";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_STANDARDS)
  private Set<CodeExternalStandard> externalStandards = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_FULL_DESCRIPTION = "fullDescription";
  @SerializedName(SERIALIZED_NAME_FULL_DESCRIPTION)
  private String fullDescription;

  public static final String SERIALIZED_NAME_HIDE_FROM_PATIENTS = "hideFromPatients";
  @SerializedName(SERIALIZED_NAME_HIDE_FROM_PATIENTS)
  private Boolean hideFromPatients;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Set<Link> links = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_PATIENT_FRIENDLY_NAME = "patientFriendlyName";
  @SerializedName(SERIALIZED_NAME_PATIENT_FRIENDLY_NAME)
  private String patientFriendlyName;

  public static final String SERIALIZED_NAME_REMOVED_EXTERNALLY = "removedExternally";
  @SerializedName(SERIALIZED_NAME_REMOVED_EXTERNALLY)
  private Boolean removedExternally;

  /**
   * Gets or Sets sourceType
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    PATIENTVIEW("PATIENTVIEW"),
    
    NHS_CHOICES("NHS_CHOICES");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  public static final String SERIALIZED_NAME_STANDARD_TYPE = "standardType";
  @SerializedName(SERIALIZED_NAME_STANDARD_TYPE)
  private Lookup standardType;

  public Code() {
  }

  public Code code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Code codeCategories(Set<CodeCategory> codeCategories) {
    this.codeCategories = codeCategories;
    return this;
  }

  public Code addCodeCategoriesItem(CodeCategory codeCategoriesItem) {
    if (this.codeCategories == null) {
      this.codeCategories = new LinkedHashSet<>();
    }
    this.codeCategories.add(codeCategoriesItem);
    return this;
  }

  /**
   * Get codeCategories
   * @return codeCategories
   */
  @javax.annotation.Nullable
  public Set<CodeCategory> getCodeCategories() {
    return codeCategories;
  }

  public void setCodeCategories(Set<CodeCategory> codeCategories) {
    this.codeCategories = codeCategories;
  }


  public Code codeType(Lookup codeType) {
    this.codeType = codeType;
    return this;
  }

  /**
   * Get codeType
   * @return codeType
   */
  @javax.annotation.Nullable
  public Lookup getCodeType() {
    return codeType;
  }

  public void setCodeType(Lookup codeType) {
    this.codeType = codeType;
  }


  public Code created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Code description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Code displayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
    return this;
  }

  /**
   * Get displayOrder
   * @return displayOrder
   */
  @javax.annotation.Nullable
  public Integer getDisplayOrder() {
    return displayOrder;
  }

  public void setDisplayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
  }


  public Code externalStandards(Set<CodeExternalStandard> externalStandards) {
    this.externalStandards = externalStandards;
    return this;
  }

  public Code addExternalStandardsItem(CodeExternalStandard externalStandardsItem) {
    if (this.externalStandards == null) {
      this.externalStandards = new LinkedHashSet<>();
    }
    this.externalStandards.add(externalStandardsItem);
    return this;
  }

  /**
   * Get externalStandards
   * @return externalStandards
   */
  @javax.annotation.Nullable
  public Set<CodeExternalStandard> getExternalStandards() {
    return externalStandards;
  }

  public void setExternalStandards(Set<CodeExternalStandard> externalStandards) {
    this.externalStandards = externalStandards;
  }


  public Code fullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
    return this;
  }

  /**
   * Get fullDescription
   * @return fullDescription
   */
  @javax.annotation.Nullable
  public String getFullDescription() {
    return fullDescription;
  }

  public void setFullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
  }


  public Code hideFromPatients(Boolean hideFromPatients) {
    this.hideFromPatients = hideFromPatients;
    return this;
  }

  /**
   * Get hideFromPatients
   * @return hideFromPatients
   */
  @javax.annotation.Nullable
  public Boolean getHideFromPatients() {
    return hideFromPatients;
  }

  public void setHideFromPatients(Boolean hideFromPatients) {
    this.hideFromPatients = hideFromPatients;
  }


  public Code id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Code lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public Code links(Set<Link> links) {
    this.links = links;
    return this;
  }

  public Code addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new LinkedHashSet<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public Set<Link> getLinks() {
    return links;
  }

  public void setLinks(Set<Link> links) {
    this.links = links;
  }


  public Code patientFriendlyName(String patientFriendlyName) {
    this.patientFriendlyName = patientFriendlyName;
    return this;
  }

  /**
   * Get patientFriendlyName
   * @return patientFriendlyName
   */
  @javax.annotation.Nullable
  public String getPatientFriendlyName() {
    return patientFriendlyName;
  }

  public void setPatientFriendlyName(String patientFriendlyName) {
    this.patientFriendlyName = patientFriendlyName;
  }


  public Code removedExternally(Boolean removedExternally) {
    this.removedExternally = removedExternally;
    return this;
  }

  /**
   * Get removedExternally
   * @return removedExternally
   */
  @javax.annotation.Nullable
  public Boolean getRemovedExternally() {
    return removedExternally;
  }

  public void setRemovedExternally(Boolean removedExternally) {
    this.removedExternally = removedExternally;
  }


  public Code sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public Code standardType(Lookup standardType) {
    this.standardType = standardType;
    return this;
  }

  /**
   * Get standardType
   * @return standardType
   */
  @javax.annotation.Nullable
  public Lookup getStandardType() {
    return standardType;
  }

  public void setStandardType(Lookup standardType) {
    this.standardType = standardType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Code code = (Code) o;
    return Objects.equals(this.code, code.code) &&
        Objects.equals(this.codeCategories, code.codeCategories) &&
        Objects.equals(this.codeType, code.codeType) &&
        Objects.equals(this.created, code.created) &&
        Objects.equals(this.description, code.description) &&
        Objects.equals(this.displayOrder, code.displayOrder) &&
        Objects.equals(this.externalStandards, code.externalStandards) &&
        Objects.equals(this.fullDescription, code.fullDescription) &&
        Objects.equals(this.hideFromPatients, code.hideFromPatients) &&
        Objects.equals(this.id, code.id) &&
        Objects.equals(this.lastUpdate, code.lastUpdate) &&
        Objects.equals(this.links, code.links) &&
        Objects.equals(this.patientFriendlyName, code.patientFriendlyName) &&
        Objects.equals(this.removedExternally, code.removedExternally) &&
        Objects.equals(this.sourceType, code.sourceType) &&
        Objects.equals(this.standardType, code.standardType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, codeCategories, codeType, created, description, displayOrder, externalStandards, fullDescription, hideFromPatients, id, lastUpdate, links, patientFriendlyName, removedExternally, sourceType, standardType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Code {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codeCategories: ").append(toIndentedString(codeCategories)).append("\n");
    sb.append("    codeType: ").append(toIndentedString(codeType)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    externalStandards: ").append(toIndentedString(externalStandards)).append("\n");
    sb.append("    fullDescription: ").append(toIndentedString(fullDescription)).append("\n");
    sb.append("    hideFromPatients: ").append(toIndentedString(hideFromPatients)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    patientFriendlyName: ").append(toIndentedString(patientFriendlyName)).append("\n");
    sb.append("    removedExternally: ").append(toIndentedString(removedExternally)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    standardType: ").append(toIndentedString(standardType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("codeCategories");
    openapiFields.add("codeType");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("displayOrder");
    openapiFields.add("externalStandards");
    openapiFields.add("fullDescription");
    openapiFields.add("hideFromPatients");
    openapiFields.add("id");
    openapiFields.add("lastUpdate");
    openapiFields.add("links");
    openapiFields.add("patientFriendlyName");
    openapiFields.add("removedExternally");
    openapiFields.add("sourceType");
    openapiFields.add("standardType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Code
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Code.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Code is not found in the empty JSON string", Code.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Code.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Code` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("codeCategories") != null && !jsonObj.get("codeCategories").isJsonNull()) {
        JsonArray jsonArraycodeCategories = jsonObj.getAsJsonArray("codeCategories");
        if (jsonArraycodeCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("codeCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `codeCategories` to be an array in the JSON string but got `%s`", jsonObj.get("codeCategories").toString()));
          }

          // validate the optional field `codeCategories` (array)
          for (int i = 0; i < jsonArraycodeCategories.size(); i++) {
            CodeCategory.validateJsonElement(jsonArraycodeCategories.get(i));
          };
        }
      }
      // validate the optional field `codeType`
      if (jsonObj.get("codeType") != null && !jsonObj.get("codeType").isJsonNull()) {
        Lookup.validateJsonElement(jsonObj.get("codeType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("externalStandards") != null && !jsonObj.get("externalStandards").isJsonNull()) {
        JsonArray jsonArrayexternalStandards = jsonObj.getAsJsonArray("externalStandards");
        if (jsonArrayexternalStandards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalStandards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalStandards` to be an array in the JSON string but got `%s`", jsonObj.get("externalStandards").toString()));
          }

          // validate the optional field `externalStandards` (array)
          for (int i = 0; i < jsonArrayexternalStandards.size(); i++) {
            CodeExternalStandard.validateJsonElement(jsonArrayexternalStandards.get(i));
          };
        }
      }
      if ((jsonObj.get("fullDescription") != null && !jsonObj.get("fullDescription").isJsonNull()) && !jsonObj.get("fullDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullDescription").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("patientFriendlyName") != null && !jsonObj.get("patientFriendlyName").isJsonNull()) && !jsonObj.get("patientFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patientFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patientFriendlyName").toString()));
      }
      if ((jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) && !jsonObj.get("sourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceType").toString()));
      }
      // validate the optional field `sourceType`
      if (jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) {
        SourceTypeEnum.validateJsonElement(jsonObj.get("sourceType"));
      }
      // validate the optional field `standardType`
      if (jsonObj.get("standardType") != null && !jsonObj.get("standardType").isJsonNull()) {
        Lookup.validateJsonElement(jsonObj.get("standardType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Code.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Code' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Code> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Code.class));

       return (TypeAdapter<T>) new TypeAdapter<Code>() {
           @Override
           public void write(JsonWriter out, Code value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Code read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Code given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Code
   * @throws IOException if the JSON string is invalid with respect to Code
   */
  public static Code fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Code.class);
  }

  /**
   * Convert an instance of Code to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

