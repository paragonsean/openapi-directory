/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.ContactPoint;
import org.openapitools.client.model.GroupFeature;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Lookup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Group
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Group {
  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ADDRESS3 = "address3";
  @SerializedName(SERIALIZED_NAME_ADDRESS3)
  private String address3;

  public static final String SERIALIZED_NAME_CHILD_GROUPS = "childGroups";
  @SerializedName(SERIALIZED_NAME_CHILD_GROUPS)
  private List<Group> childGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CONTACT_POINTS = "contactPoints";
  @SerializedName(SERIALIZED_NAME_CONTACT_POINTS)
  private Set<ContactPoint> contactPoints = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_FHIR_RESOURCE_ID = "fhirResourceId";
  @SerializedName(SERIALIZED_NAME_FHIR_RESOURCE_ID)
  private Object fhirResourceId;

  public static final String SERIALIZED_NAME_GROUP_FEATURES = "groupFeatures";
  @SerializedName(SERIALIZED_NAME_GROUP_FEATURES)
  private Set<GroupFeature> groupFeatures = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private Lookup groupType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LAST_IMPORT_DATE = "lastImportDate";
  @SerializedName(SERIALIZED_NAME_LAST_IMPORT_DATE)
  private OffsetDateTime lastImportDate;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Set<Link> links = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private Set<Location> locations = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_GROUPS = "parentGroups";
  @SerializedName(SERIALIZED_NAME_PARENT_GROUPS)
  private List<Group> parentGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_SFTP_USER = "sftpUser";
  @SerializedName(SERIALIZED_NAME_SFTP_USER)
  private String sftpUser;

  public static final String SERIALIZED_NAME_SHORT_NAME = "shortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public static final String SERIALIZED_NAME_VISIBLE_TO_JOIN = "visibleToJoin";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO_JOIN)
  private Boolean visibleToJoin;

  public Group() {
  }

  public Group address1(String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Get address1
   * @return address1
   */
  @javax.annotation.Nullable
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public Group address2(String address2) {
    this.address2 = address2;
    return this;
  }

  /**
   * Get address2
   * @return address2
   */
  @javax.annotation.Nullable
  public String getAddress2() {
    return address2;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }


  public Group address3(String address3) {
    this.address3 = address3;
    return this;
  }

  /**
   * Get address3
   * @return address3
   */
  @javax.annotation.Nullable
  public String getAddress3() {
    return address3;
  }

  public void setAddress3(String address3) {
    this.address3 = address3;
  }


  public Group childGroups(List<Group> childGroups) {
    this.childGroups = childGroups;
    return this;
  }

  public Group addChildGroupsItem(Group childGroupsItem) {
    if (this.childGroups == null) {
      this.childGroups = new ArrayList<>();
    }
    this.childGroups.add(childGroupsItem);
    return this;
  }

  /**
   * Get childGroups
   * @return childGroups
   */
  @javax.annotation.Nullable
  public List<Group> getChildGroups() {
    return childGroups;
  }

  public void setChildGroups(List<Group> childGroups) {
    this.childGroups = childGroups;
  }


  public Group code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Group contactPoints(Set<ContactPoint> contactPoints) {
    this.contactPoints = contactPoints;
    return this;
  }

  public Group addContactPointsItem(ContactPoint contactPointsItem) {
    if (this.contactPoints == null) {
      this.contactPoints = new LinkedHashSet<>();
    }
    this.contactPoints.add(contactPointsItem);
    return this;
  }

  /**
   * Get contactPoints
   * @return contactPoints
   */
  @javax.annotation.Nullable
  public Set<ContactPoint> getContactPoints() {
    return contactPoints;
  }

  public void setContactPoints(Set<ContactPoint> contactPoints) {
    this.contactPoints = contactPoints;
  }


  public Group created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Group fhirResourceId(Object fhirResourceId) {
    this.fhirResourceId = fhirResourceId;
    return this;
  }

  /**
   * Get fhirResourceId
   * @return fhirResourceId
   */
  @javax.annotation.Nullable
  public Object getFhirResourceId() {
    return fhirResourceId;
  }

  public void setFhirResourceId(Object fhirResourceId) {
    this.fhirResourceId = fhirResourceId;
  }


  public Group groupFeatures(Set<GroupFeature> groupFeatures) {
    this.groupFeatures = groupFeatures;
    return this;
  }

  public Group addGroupFeaturesItem(GroupFeature groupFeaturesItem) {
    if (this.groupFeatures == null) {
      this.groupFeatures = new LinkedHashSet<>();
    }
    this.groupFeatures.add(groupFeaturesItem);
    return this;
  }

  /**
   * Get groupFeatures
   * @return groupFeatures
   */
  @javax.annotation.Nullable
  public Set<GroupFeature> getGroupFeatures() {
    return groupFeatures;
  }

  public void setGroupFeatures(Set<GroupFeature> groupFeatures) {
    this.groupFeatures = groupFeatures;
  }


  public Group groupType(Lookup groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Get groupType
   * @return groupType
   */
  @javax.annotation.Nullable
  public Lookup getGroupType() {
    return groupType;
  }

  public void setGroupType(Lookup groupType) {
    this.groupType = groupType;
  }


  public Group id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Group lastImportDate(OffsetDateTime lastImportDate) {
    this.lastImportDate = lastImportDate;
    return this;
  }

  /**
   * Get lastImportDate
   * @return lastImportDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastImportDate() {
    return lastImportDate;
  }

  public void setLastImportDate(OffsetDateTime lastImportDate) {
    this.lastImportDate = lastImportDate;
  }


  public Group lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public Group links(Set<Link> links) {
    this.links = links;
    return this;
  }

  public Group addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new LinkedHashSet<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public Set<Link> getLinks() {
    return links;
  }

  public void setLinks(Set<Link> links) {
    this.links = links;
  }


  public Group locations(Set<Location> locations) {
    this.locations = locations;
    return this;
  }

  public Group addLocationsItem(Location locationsItem) {
    if (this.locations == null) {
      this.locations = new LinkedHashSet<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Get locations
   * @return locations
   */
  @javax.annotation.Nullable
  public Set<Location> getLocations() {
    return locations;
  }

  public void setLocations(Set<Location> locations) {
    this.locations = locations;
  }


  public Group name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Group parentGroups(List<Group> parentGroups) {
    this.parentGroups = parentGroups;
    return this;
  }

  public Group addParentGroupsItem(Group parentGroupsItem) {
    if (this.parentGroups == null) {
      this.parentGroups = new ArrayList<>();
    }
    this.parentGroups.add(parentGroupsItem);
    return this;
  }

  /**
   * Get parentGroups
   * @return parentGroups
   */
  @javax.annotation.Nullable
  public List<Group> getParentGroups() {
    return parentGroups;
  }

  public void setParentGroups(List<Group> parentGroups) {
    this.parentGroups = parentGroups;
  }


  public Group postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Get postcode
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public Group sftpUser(String sftpUser) {
    this.sftpUser = sftpUser;
    return this;
  }

  /**
   * Get sftpUser
   * @return sftpUser
   */
  @javax.annotation.Nullable
  public String getSftpUser() {
    return sftpUser;
  }

  public void setSftpUser(String sftpUser) {
    this.sftpUser = sftpUser;
  }


  public Group shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public Group visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Get visible
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public Group visibleToJoin(Boolean visibleToJoin) {
    this.visibleToJoin = visibleToJoin;
    return this;
  }

  /**
   * Get visibleToJoin
   * @return visibleToJoin
   */
  @javax.annotation.Nullable
  public Boolean getVisibleToJoin() {
    return visibleToJoin;
  }

  public void setVisibleToJoin(Boolean visibleToJoin) {
    this.visibleToJoin = visibleToJoin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Group group = (Group) o;
    return Objects.equals(this.address1, group.address1) &&
        Objects.equals(this.address2, group.address2) &&
        Objects.equals(this.address3, group.address3) &&
        Objects.equals(this.childGroups, group.childGroups) &&
        Objects.equals(this.code, group.code) &&
        Objects.equals(this.contactPoints, group.contactPoints) &&
        Objects.equals(this.created, group.created) &&
        Objects.equals(this.fhirResourceId, group.fhirResourceId) &&
        Objects.equals(this.groupFeatures, group.groupFeatures) &&
        Objects.equals(this.groupType, group.groupType) &&
        Objects.equals(this.id, group.id) &&
        Objects.equals(this.lastImportDate, group.lastImportDate) &&
        Objects.equals(this.lastUpdate, group.lastUpdate) &&
        Objects.equals(this.links, group.links) &&
        Objects.equals(this.locations, group.locations) &&
        Objects.equals(this.name, group.name) &&
        Objects.equals(this.parentGroups, group.parentGroups) &&
        Objects.equals(this.postcode, group.postcode) &&
        Objects.equals(this.sftpUser, group.sftpUser) &&
        Objects.equals(this.shortName, group.shortName) &&
        Objects.equals(this.visible, group.visible) &&
        Objects.equals(this.visibleToJoin, group.visibleToJoin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, address3, childGroups, code, contactPoints, created, fhirResourceId, groupFeatures, groupType, id, lastImportDate, lastUpdate, links, locations, name, parentGroups, postcode, sftpUser, shortName, visible, visibleToJoin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Group {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    address3: ").append(toIndentedString(address3)).append("\n");
    sb.append("    childGroups: ").append(toIndentedString(childGroups)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    contactPoints: ").append(toIndentedString(contactPoints)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    fhirResourceId: ").append(toIndentedString(fhirResourceId)).append("\n");
    sb.append("    groupFeatures: ").append(toIndentedString(groupFeatures)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastImportDate: ").append(toIndentedString(lastImportDate)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentGroups: ").append(toIndentedString(parentGroups)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    sftpUser: ").append(toIndentedString(sftpUser)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    visibleToJoin: ").append(toIndentedString(visibleToJoin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("address3");
    openapiFields.add("childGroups");
    openapiFields.add("code");
    openapiFields.add("contactPoints");
    openapiFields.add("created");
    openapiFields.add("fhirResourceId");
    openapiFields.add("groupFeatures");
    openapiFields.add("groupType");
    openapiFields.add("id");
    openapiFields.add("lastImportDate");
    openapiFields.add("lastUpdate");
    openapiFields.add("links");
    openapiFields.add("locations");
    openapiFields.add("name");
    openapiFields.add("parentGroups");
    openapiFields.add("postcode");
    openapiFields.add("sftpUser");
    openapiFields.add("shortName");
    openapiFields.add("visible");
    openapiFields.add("visibleToJoin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Group
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Group.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Group is not found in the empty JSON string", Group.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Group.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Group` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address1") != null && !jsonObj.get("address1").isJsonNull()) && !jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonNull()) && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if ((jsonObj.get("address3") != null && !jsonObj.get("address3").isJsonNull()) && !jsonObj.get("address3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address3").toString()));
      }
      if (jsonObj.get("childGroups") != null && !jsonObj.get("childGroups").isJsonNull()) {
        JsonArray jsonArraychildGroups = jsonObj.getAsJsonArray("childGroups");
        if (jsonArraychildGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childGroups` to be an array in the JSON string but got `%s`", jsonObj.get("childGroups").toString()));
          }

          // validate the optional field `childGroups` (array)
          for (int i = 0; i < jsonArraychildGroups.size(); i++) {
            Group.validateJsonElement(jsonArraychildGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("contactPoints") != null && !jsonObj.get("contactPoints").isJsonNull()) {
        JsonArray jsonArraycontactPoints = jsonObj.getAsJsonArray("contactPoints");
        if (jsonArraycontactPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contactPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contactPoints` to be an array in the JSON string but got `%s`", jsonObj.get("contactPoints").toString()));
          }

          // validate the optional field `contactPoints` (array)
          for (int i = 0; i < jsonArraycontactPoints.size(); i++) {
            ContactPoint.validateJsonElement(jsonArraycontactPoints.get(i));
          };
        }
      }
      if ((jsonObj.get("fhirResourceId") != null && !jsonObj.get("fhirResourceId").isJsonNull()) && !jsonObj.get("fhirResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fhirResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fhirResourceId").toString()));
      }
      if (jsonObj.get("groupFeatures") != null && !jsonObj.get("groupFeatures").isJsonNull()) {
        JsonArray jsonArraygroupFeatures = jsonObj.getAsJsonArray("groupFeatures");
        if (jsonArraygroupFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("groupFeatures").toString()));
          }

          // validate the optional field `groupFeatures` (array)
          for (int i = 0; i < jsonArraygroupFeatures.size(); i++) {
            GroupFeature.validateJsonElement(jsonArraygroupFeatures.get(i));
          };
        }
      }
      // validate the optional field `groupType`
      if (jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) {
        Lookup.validateJsonElement(jsonObj.get("groupType"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            Location.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("parentGroups") != null && !jsonObj.get("parentGroups").isJsonNull()) {
        JsonArray jsonArrayparentGroups = jsonObj.getAsJsonArray("parentGroups");
        if (jsonArrayparentGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parentGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parentGroups` to be an array in the JSON string but got `%s`", jsonObj.get("parentGroups").toString()));
          }

          // validate the optional field `parentGroups` (array)
          for (int i = 0; i < jsonArrayparentGroups.size(); i++) {
            Group.validateJsonElement(jsonArrayparentGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("sftpUser") != null && !jsonObj.get("sftpUser").isJsonNull()) && !jsonObj.get("sftpUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sftpUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sftpUser").toString()));
      }
      if ((jsonObj.get("shortName") != null && !jsonObj.get("shortName").isJsonNull()) && !jsonObj.get("shortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Group.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Group' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Group> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Group.class));

       return (TypeAdapter<T>) new TypeAdapter<Group>() {
           @Override
           public void write(JsonWriter out, Group value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Group read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Group given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Group
   * @throws IOException if the JSON string is invalid with respect to Group
   */
  public static Group fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Group.class);
  }

  /**
   * Convert an instance of Group to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

