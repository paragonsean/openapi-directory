/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Group;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FhirAllergy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FhirAllergy {
  public static final String SERIALIZED_NAME_CONFIDENCE_LEVEL = "confidenceLevel";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_LEVEL)
  private String confidenceLevel;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Group group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_INFO_SOURCE = "infoSource";
  @SerializedName(SERIALIZED_NAME_INFO_SOURCE)
  private String infoSource;

  public static final String SERIALIZED_NAME_REACTION = "reaction";
  @SerializedName(SERIALIZED_NAME_REACTION)
  private String reaction;

  public static final String SERIALIZED_NAME_RECORDED_DATE = "recordedDate";
  @SerializedName(SERIALIZED_NAME_RECORDED_DATE)
  private OffsetDateTime recordedDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBSTANCE = "substance";
  @SerializedName(SERIALIZED_NAME_SUBSTANCE)
  private String substance;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public FhirAllergy() {
  }

  public FhirAllergy confidenceLevel(String confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
    return this;
  }

  /**
   * Get confidenceLevel
   * @return confidenceLevel
   */
  @javax.annotation.Nullable
  public String getConfidenceLevel() {
    return confidenceLevel;
  }

  public void setConfidenceLevel(String confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
  }


  public FhirAllergy group(Group group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public Group getGroup() {
    return group;
  }

  public void setGroup(Group group) {
    this.group = group;
  }


  public FhirAllergy id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public FhirAllergy identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public FhirAllergy infoSource(String infoSource) {
    this.infoSource = infoSource;
    return this;
  }

  /**
   * Get infoSource
   * @return infoSource
   */
  @javax.annotation.Nullable
  public String getInfoSource() {
    return infoSource;
  }

  public void setInfoSource(String infoSource) {
    this.infoSource = infoSource;
  }


  public FhirAllergy reaction(String reaction) {
    this.reaction = reaction;
    return this;
  }

  /**
   * Get reaction
   * @return reaction
   */
  @javax.annotation.Nullable
  public String getReaction() {
    return reaction;
  }

  public void setReaction(String reaction) {
    this.reaction = reaction;
  }


  public FhirAllergy recordedDate(OffsetDateTime recordedDate) {
    this.recordedDate = recordedDate;
    return this;
  }

  /**
   * Get recordedDate
   * @return recordedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRecordedDate() {
    return recordedDate;
  }

  public void setRecordedDate(OffsetDateTime recordedDate) {
    this.recordedDate = recordedDate;
  }


  public FhirAllergy status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public FhirAllergy substance(String substance) {
    this.substance = substance;
    return this;
  }

  /**
   * Get substance
   * @return substance
   */
  @javax.annotation.Nullable
  public String getSubstance() {
    return substance;
  }

  public void setSubstance(String substance) {
    this.substance = substance;
  }


  public FhirAllergy type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FhirAllergy fhirAllergy = (FhirAllergy) o;
    return Objects.equals(this.confidenceLevel, fhirAllergy.confidenceLevel) &&
        Objects.equals(this.group, fhirAllergy.group) &&
        Objects.equals(this.id, fhirAllergy.id) &&
        Objects.equals(this.identifier, fhirAllergy.identifier) &&
        Objects.equals(this.infoSource, fhirAllergy.infoSource) &&
        Objects.equals(this.reaction, fhirAllergy.reaction) &&
        Objects.equals(this.recordedDate, fhirAllergy.recordedDate) &&
        Objects.equals(this.status, fhirAllergy.status) &&
        Objects.equals(this.substance, fhirAllergy.substance) &&
        Objects.equals(this.type, fhirAllergy.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidenceLevel, group, id, identifier, infoSource, reaction, recordedDate, status, substance, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FhirAllergy {\n");
    sb.append("    confidenceLevel: ").append(toIndentedString(confidenceLevel)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    infoSource: ").append(toIndentedString(infoSource)).append("\n");
    sb.append("    reaction: ").append(toIndentedString(reaction)).append("\n");
    sb.append("    recordedDate: ").append(toIndentedString(recordedDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    substance: ").append(toIndentedString(substance)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidenceLevel");
    openapiFields.add("group");
    openapiFields.add("id");
    openapiFields.add("identifier");
    openapiFields.add("infoSource");
    openapiFields.add("reaction");
    openapiFields.add("recordedDate");
    openapiFields.add("status");
    openapiFields.add("substance");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FhirAllergy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FhirAllergy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FhirAllergy is not found in the empty JSON string", FhirAllergy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FhirAllergy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FhirAllergy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("confidenceLevel") != null && !jsonObj.get("confidenceLevel").isJsonNull()) && !jsonObj.get("confidenceLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confidenceLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confidenceLevel").toString()));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("group"));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("infoSource") != null && !jsonObj.get("infoSource").isJsonNull()) && !jsonObj.get("infoSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infoSource").toString()));
      }
      if ((jsonObj.get("reaction") != null && !jsonObj.get("reaction").isJsonNull()) && !jsonObj.get("reaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reaction").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("substance") != null && !jsonObj.get("substance").isJsonNull()) && !jsonObj.get("substance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `substance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("substance").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FhirAllergy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FhirAllergy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FhirAllergy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FhirAllergy.class));

       return (TypeAdapter<T>) new TypeAdapter<FhirAllergy>() {
           @Override
           public void write(JsonWriter out, FhirAllergy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FhirAllergy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FhirAllergy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FhirAllergy
   * @throws IOException if the JSON string is invalid with respect to FhirAllergy
   */
  public static FhirAllergy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FhirAllergy.class);
  }

  /**
   * Convert an instance of FhirAllergy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

