/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FhirCondition;
import org.openapitools.client.model.FhirEncounter;
import org.openapitools.client.model.FhirObservation;
import org.openapitools.client.model.FhirPatient;
import org.openapitools.client.model.FhirPractitioner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatientManagement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatientManagement {
  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private FhirCondition condition;

  public static final String SERIALIZED_NAME_ENCOUNTERS = "encounters";
  @SerializedName(SERIALIZED_NAME_ENCOUNTERS)
  private List<FhirEncounter> encounters = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_CODE = "groupCode";
  @SerializedName(SERIALIZED_NAME_GROUP_CODE)
  private String groupCode;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_OBSERVATIONS = "observations";
  @SerializedName(SERIALIZED_NAME_OBSERVATIONS)
  private List<FhirObservation> observations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATIENT = "patient";
  @SerializedName(SERIALIZED_NAME_PATIENT)
  private FhirPatient patient;

  public static final String SERIALIZED_NAME_PRACTITIONERS = "practitioners";
  @SerializedName(SERIALIZED_NAME_PRACTITIONERS)
  private List<FhirPractitioner> practitioners = new ArrayList<>();

  public PatientManagement() {
  }

  public PatientManagement condition(FhirCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public FhirCondition getCondition() {
    return condition;
  }

  public void setCondition(FhirCondition condition) {
    this.condition = condition;
  }


  public PatientManagement encounters(List<FhirEncounter> encounters) {
    this.encounters = encounters;
    return this;
  }

  public PatientManagement addEncountersItem(FhirEncounter encountersItem) {
    if (this.encounters == null) {
      this.encounters = new ArrayList<>();
    }
    this.encounters.add(encountersItem);
    return this;
  }

  /**
   * Get encounters
   * @return encounters
   */
  @javax.annotation.Nullable
  public List<FhirEncounter> getEncounters() {
    return encounters;
  }

  public void setEncounters(List<FhirEncounter> encounters) {
    this.encounters = encounters;
  }


  public PatientManagement groupCode(String groupCode) {
    this.groupCode = groupCode;
    return this;
  }

  /**
   * Get groupCode
   * @return groupCode
   */
  @javax.annotation.Nullable
  public String getGroupCode() {
    return groupCode;
  }

  public void setGroupCode(String groupCode) {
    this.groupCode = groupCode;
  }


  public PatientManagement identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public PatientManagement observations(List<FhirObservation> observations) {
    this.observations = observations;
    return this;
  }

  public PatientManagement addObservationsItem(FhirObservation observationsItem) {
    if (this.observations == null) {
      this.observations = new ArrayList<>();
    }
    this.observations.add(observationsItem);
    return this;
  }

  /**
   * Get observations
   * @return observations
   */
  @javax.annotation.Nullable
  public List<FhirObservation> getObservations() {
    return observations;
  }

  public void setObservations(List<FhirObservation> observations) {
    this.observations = observations;
  }


  public PatientManagement patient(FhirPatient patient) {
    this.patient = patient;
    return this;
  }

  /**
   * Get patient
   * @return patient
   */
  @javax.annotation.Nullable
  public FhirPatient getPatient() {
    return patient;
  }

  public void setPatient(FhirPatient patient) {
    this.patient = patient;
  }


  public PatientManagement practitioners(List<FhirPractitioner> practitioners) {
    this.practitioners = practitioners;
    return this;
  }

  public PatientManagement addPractitionersItem(FhirPractitioner practitionersItem) {
    if (this.practitioners == null) {
      this.practitioners = new ArrayList<>();
    }
    this.practitioners.add(practitionersItem);
    return this;
  }

  /**
   * Get practitioners
   * @return practitioners
   */
  @javax.annotation.Nullable
  public List<FhirPractitioner> getPractitioners() {
    return practitioners;
  }

  public void setPractitioners(List<FhirPractitioner> practitioners) {
    this.practitioners = practitioners;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientManagement patientManagement = (PatientManagement) o;
    return Objects.equals(this.condition, patientManagement.condition) &&
        Objects.equals(this.encounters, patientManagement.encounters) &&
        Objects.equals(this.groupCode, patientManagement.groupCode) &&
        Objects.equals(this.identifier, patientManagement.identifier) &&
        Objects.equals(this.observations, patientManagement.observations) &&
        Objects.equals(this.patient, patientManagement.patient) &&
        Objects.equals(this.practitioners, patientManagement.practitioners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, encounters, groupCode, identifier, observations, patient, practitioners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientManagement {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    encounters: ").append(toIndentedString(encounters)).append("\n");
    sb.append("    groupCode: ").append(toIndentedString(groupCode)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    observations: ").append(toIndentedString(observations)).append("\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    practitioners: ").append(toIndentedString(practitioners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition");
    openapiFields.add("encounters");
    openapiFields.add("groupCode");
    openapiFields.add("identifier");
    openapiFields.add("observations");
    openapiFields.add("patient");
    openapiFields.add("practitioners");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientManagement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientManagement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientManagement is not found in the empty JSON string", PatientManagement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientManagement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientManagement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        FhirCondition.validateJsonElement(jsonObj.get("condition"));
      }
      if (jsonObj.get("encounters") != null && !jsonObj.get("encounters").isJsonNull()) {
        JsonArray jsonArrayencounters = jsonObj.getAsJsonArray("encounters");
        if (jsonArrayencounters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("encounters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `encounters` to be an array in the JSON string but got `%s`", jsonObj.get("encounters").toString()));
          }

          // validate the optional field `encounters` (array)
          for (int i = 0; i < jsonArrayencounters.size(); i++) {
            FhirEncounter.validateJsonElement(jsonArrayencounters.get(i));
          };
        }
      }
      if ((jsonObj.get("groupCode") != null && !jsonObj.get("groupCode").isJsonNull()) && !jsonObj.get("groupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupCode").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if (jsonObj.get("observations") != null && !jsonObj.get("observations").isJsonNull()) {
        JsonArray jsonArrayobservations = jsonObj.getAsJsonArray("observations");
        if (jsonArrayobservations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("observations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `observations` to be an array in the JSON string but got `%s`", jsonObj.get("observations").toString()));
          }

          // validate the optional field `observations` (array)
          for (int i = 0; i < jsonArrayobservations.size(); i++) {
            FhirObservation.validateJsonElement(jsonArrayobservations.get(i));
          };
        }
      }
      // validate the optional field `patient`
      if (jsonObj.get("patient") != null && !jsonObj.get("patient").isJsonNull()) {
        FhirPatient.validateJsonElement(jsonObj.get("patient"));
      }
      if (jsonObj.get("practitioners") != null && !jsonObj.get("practitioners").isJsonNull()) {
        JsonArray jsonArraypractitioners = jsonObj.getAsJsonArray("practitioners");
        if (jsonArraypractitioners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("practitioners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `practitioners` to be an array in the JSON string but got `%s`", jsonObj.get("practitioners").toString()));
          }

          // validate the optional field `practitioners` (array)
          for (int i = 0; i < jsonArraypractitioners.size(); i++) {
            FhirPractitioner.validateJsonElement(jsonArraypractitioners.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientManagement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientManagement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientManagement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientManagement.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientManagement>() {
           @Override
           public void write(JsonWriter out, PatientManagement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientManagement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientManagement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientManagement
   * @throws IOException if the JSON string is invalid with respect to PatientManagement
   */
  public static PatientManagement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientManagement.class);
  }

  /**
   * Convert an instance of PatientManagement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

