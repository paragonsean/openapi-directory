/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExternalStandard;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodeExternalStandard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeExternalStandard {
  public static final String SERIALIZED_NAME_CODE_STRING = "codeString";
  @SerializedName(SERIALIZED_NAME_CODE_STRING)
  private String codeString;

  public static final String SERIALIZED_NAME_EXTERNAL_STANDARD = "externalStandard";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_STANDARD)
  private ExternalStandard externalStandard;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public CodeExternalStandard() {
  }

  public CodeExternalStandard codeString(String codeString) {
    this.codeString = codeString;
    return this;
  }

  /**
   * Get codeString
   * @return codeString
   */
  @javax.annotation.Nullable
  public String getCodeString() {
    return codeString;
  }

  public void setCodeString(String codeString) {
    this.codeString = codeString;
  }


  public CodeExternalStandard externalStandard(ExternalStandard externalStandard) {
    this.externalStandard = externalStandard;
    return this;
  }

  /**
   * Get externalStandard
   * @return externalStandard
   */
  @javax.annotation.Nullable
  public ExternalStandard getExternalStandard() {
    return externalStandard;
  }

  public void setExternalStandard(ExternalStandard externalStandard) {
    this.externalStandard = externalStandard;
  }


  public CodeExternalStandard id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeExternalStandard codeExternalStandard = (CodeExternalStandard) o;
    return Objects.equals(this.codeString, codeExternalStandard.codeString) &&
        Objects.equals(this.externalStandard, codeExternalStandard.externalStandard) &&
        Objects.equals(this.id, codeExternalStandard.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeString, externalStandard, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeExternalStandard {\n");
    sb.append("    codeString: ").append(toIndentedString(codeString)).append("\n");
    sb.append("    externalStandard: ").append(toIndentedString(externalStandard)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codeString");
    openapiFields.add("externalStandard");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeExternalStandard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeExternalStandard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeExternalStandard is not found in the empty JSON string", CodeExternalStandard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeExternalStandard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeExternalStandard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("codeString") != null && !jsonObj.get("codeString").isJsonNull()) && !jsonObj.get("codeString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeString").toString()));
      }
      // validate the optional field `externalStandard`
      if (jsonObj.get("externalStandard") != null && !jsonObj.get("externalStandard").isJsonNull()) {
        ExternalStandard.validateJsonElement(jsonObj.get("externalStandard"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeExternalStandard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeExternalStandard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeExternalStandard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeExternalStandard.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeExternalStandard>() {
           @Override
           public void write(JsonWriter out, CodeExternalStandard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeExternalStandard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeExternalStandard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeExternalStandard
   * @throws IOException if the JSON string is invalid with respect to CodeExternalStandard
   */
  public static CodeExternalStandard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeExternalStandard.class);
  }

  /**
   * Convert an instance of CodeExternalStandard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

