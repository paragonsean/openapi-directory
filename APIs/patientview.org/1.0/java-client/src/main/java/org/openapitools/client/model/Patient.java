/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Code;
import org.openapitools.client.model.FhirAllergy;
import org.openapitools.client.model.FhirCondition;
import org.openapitools.client.model.FhirEncounter;
import org.openapitools.client.model.FhirObservation;
import org.openapitools.client.model.FhirPatient;
import org.openapitools.client.model.FhirPractitioner;
import org.openapitools.client.model.Group;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Patient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Patient {
  public static final String SERIALIZED_NAME_DIAGNOSIS_CODES = "diagnosisCodes";
  @SerializedName(SERIALIZED_NAME_DIAGNOSIS_CODES)
  private List<Code> diagnosisCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FHIR_ALLERGIES = "fhirAllergies";
  @SerializedName(SERIALIZED_NAME_FHIR_ALLERGIES)
  private List<FhirAllergy> fhirAllergies = new ArrayList<>();

  public static final String SERIALIZED_NAME_FHIR_CONDITIONS = "fhirConditions";
  @SerializedName(SERIALIZED_NAME_FHIR_CONDITIONS)
  private List<FhirCondition> fhirConditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FHIR_ENCOUNTERS = "fhirEncounters";
  @SerializedName(SERIALIZED_NAME_FHIR_ENCOUNTERS)
  private List<FhirEncounter> fhirEncounters = new ArrayList<>();

  public static final String SERIALIZED_NAME_FHIR_OBSERVATIONS = "fhirObservations";
  @SerializedName(SERIALIZED_NAME_FHIR_OBSERVATIONS)
  private List<FhirObservation> fhirObservations = new ArrayList<>();

  public static final String SERIALIZED_NAME_FHIR_PATIENT = "fhirPatient";
  @SerializedName(SERIALIZED_NAME_FHIR_PATIENT)
  private FhirPatient fhirPatient;

  public static final String SERIALIZED_NAME_FHIR_PRACTITIONERS = "fhirPractitioners";
  @SerializedName(SERIALIZED_NAME_FHIR_PRACTITIONERS)
  private List<FhirPractitioner> fhirPractitioners = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Group group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public Patient() {
  }

  public Patient diagnosisCodes(List<Code> diagnosisCodes) {
    this.diagnosisCodes = diagnosisCodes;
    return this;
  }

  public Patient addDiagnosisCodesItem(Code diagnosisCodesItem) {
    if (this.diagnosisCodes == null) {
      this.diagnosisCodes = new ArrayList<>();
    }
    this.diagnosisCodes.add(diagnosisCodesItem);
    return this;
  }

  /**
   * Get diagnosisCodes
   * @return diagnosisCodes
   */
  @javax.annotation.Nullable
  public List<Code> getDiagnosisCodes() {
    return diagnosisCodes;
  }

  public void setDiagnosisCodes(List<Code> diagnosisCodes) {
    this.diagnosisCodes = diagnosisCodes;
  }


  public Patient fhirAllergies(List<FhirAllergy> fhirAllergies) {
    this.fhirAllergies = fhirAllergies;
    return this;
  }

  public Patient addFhirAllergiesItem(FhirAllergy fhirAllergiesItem) {
    if (this.fhirAllergies == null) {
      this.fhirAllergies = new ArrayList<>();
    }
    this.fhirAllergies.add(fhirAllergiesItem);
    return this;
  }

  /**
   * Get fhirAllergies
   * @return fhirAllergies
   */
  @javax.annotation.Nullable
  public List<FhirAllergy> getFhirAllergies() {
    return fhirAllergies;
  }

  public void setFhirAllergies(List<FhirAllergy> fhirAllergies) {
    this.fhirAllergies = fhirAllergies;
  }


  public Patient fhirConditions(List<FhirCondition> fhirConditions) {
    this.fhirConditions = fhirConditions;
    return this;
  }

  public Patient addFhirConditionsItem(FhirCondition fhirConditionsItem) {
    if (this.fhirConditions == null) {
      this.fhirConditions = new ArrayList<>();
    }
    this.fhirConditions.add(fhirConditionsItem);
    return this;
  }

  /**
   * Get fhirConditions
   * @return fhirConditions
   */
  @javax.annotation.Nullable
  public List<FhirCondition> getFhirConditions() {
    return fhirConditions;
  }

  public void setFhirConditions(List<FhirCondition> fhirConditions) {
    this.fhirConditions = fhirConditions;
  }


  public Patient fhirEncounters(List<FhirEncounter> fhirEncounters) {
    this.fhirEncounters = fhirEncounters;
    return this;
  }

  public Patient addFhirEncountersItem(FhirEncounter fhirEncountersItem) {
    if (this.fhirEncounters == null) {
      this.fhirEncounters = new ArrayList<>();
    }
    this.fhirEncounters.add(fhirEncountersItem);
    return this;
  }

  /**
   * Get fhirEncounters
   * @return fhirEncounters
   */
  @javax.annotation.Nullable
  public List<FhirEncounter> getFhirEncounters() {
    return fhirEncounters;
  }

  public void setFhirEncounters(List<FhirEncounter> fhirEncounters) {
    this.fhirEncounters = fhirEncounters;
  }


  public Patient fhirObservations(List<FhirObservation> fhirObservations) {
    this.fhirObservations = fhirObservations;
    return this;
  }

  public Patient addFhirObservationsItem(FhirObservation fhirObservationsItem) {
    if (this.fhirObservations == null) {
      this.fhirObservations = new ArrayList<>();
    }
    this.fhirObservations.add(fhirObservationsItem);
    return this;
  }

  /**
   * Get fhirObservations
   * @return fhirObservations
   */
  @javax.annotation.Nullable
  public List<FhirObservation> getFhirObservations() {
    return fhirObservations;
  }

  public void setFhirObservations(List<FhirObservation> fhirObservations) {
    this.fhirObservations = fhirObservations;
  }


  public Patient fhirPatient(FhirPatient fhirPatient) {
    this.fhirPatient = fhirPatient;
    return this;
  }

  /**
   * Get fhirPatient
   * @return fhirPatient
   */
  @javax.annotation.Nullable
  public FhirPatient getFhirPatient() {
    return fhirPatient;
  }

  public void setFhirPatient(FhirPatient fhirPatient) {
    this.fhirPatient = fhirPatient;
  }


  public Patient fhirPractitioners(List<FhirPractitioner> fhirPractitioners) {
    this.fhirPractitioners = fhirPractitioners;
    return this;
  }

  public Patient addFhirPractitionersItem(FhirPractitioner fhirPractitionersItem) {
    if (this.fhirPractitioners == null) {
      this.fhirPractitioners = new ArrayList<>();
    }
    this.fhirPractitioners.add(fhirPractitionersItem);
    return this;
  }

  /**
   * Get fhirPractitioners
   * @return fhirPractitioners
   */
  @javax.annotation.Nullable
  public List<FhirPractitioner> getFhirPractitioners() {
    return fhirPractitioners;
  }

  public void setFhirPractitioners(List<FhirPractitioner> fhirPractitioners) {
    this.fhirPractitioners = fhirPractitioners;
  }


  public Patient group(Group group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public Group getGroup() {
    return group;
  }

  public void setGroup(Group group) {
    this.group = group;
  }


  public Patient id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Patient patient = (Patient) o;
    return Objects.equals(this.diagnosisCodes, patient.diagnosisCodes) &&
        Objects.equals(this.fhirAllergies, patient.fhirAllergies) &&
        Objects.equals(this.fhirConditions, patient.fhirConditions) &&
        Objects.equals(this.fhirEncounters, patient.fhirEncounters) &&
        Objects.equals(this.fhirObservations, patient.fhirObservations) &&
        Objects.equals(this.fhirPatient, patient.fhirPatient) &&
        Objects.equals(this.fhirPractitioners, patient.fhirPractitioners) &&
        Objects.equals(this.group, patient.group) &&
        Objects.equals(this.id, patient.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diagnosisCodes, fhirAllergies, fhirConditions, fhirEncounters, fhirObservations, fhirPatient, fhirPractitioners, group, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Patient {\n");
    sb.append("    diagnosisCodes: ").append(toIndentedString(diagnosisCodes)).append("\n");
    sb.append("    fhirAllergies: ").append(toIndentedString(fhirAllergies)).append("\n");
    sb.append("    fhirConditions: ").append(toIndentedString(fhirConditions)).append("\n");
    sb.append("    fhirEncounters: ").append(toIndentedString(fhirEncounters)).append("\n");
    sb.append("    fhirObservations: ").append(toIndentedString(fhirObservations)).append("\n");
    sb.append("    fhirPatient: ").append(toIndentedString(fhirPatient)).append("\n");
    sb.append("    fhirPractitioners: ").append(toIndentedString(fhirPractitioners)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diagnosisCodes");
    openapiFields.add("fhirAllergies");
    openapiFields.add("fhirConditions");
    openapiFields.add("fhirEncounters");
    openapiFields.add("fhirObservations");
    openapiFields.add("fhirPatient");
    openapiFields.add("fhirPractitioners");
    openapiFields.add("group");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Patient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Patient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Patient is not found in the empty JSON string", Patient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Patient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Patient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("diagnosisCodes") != null && !jsonObj.get("diagnosisCodes").isJsonNull()) {
        JsonArray jsonArraydiagnosisCodes = jsonObj.getAsJsonArray("diagnosisCodes");
        if (jsonArraydiagnosisCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("diagnosisCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `diagnosisCodes` to be an array in the JSON string but got `%s`", jsonObj.get("diagnosisCodes").toString()));
          }

          // validate the optional field `diagnosisCodes` (array)
          for (int i = 0; i < jsonArraydiagnosisCodes.size(); i++) {
            Code.validateJsonElement(jsonArraydiagnosisCodes.get(i));
          };
        }
      }
      if (jsonObj.get("fhirAllergies") != null && !jsonObj.get("fhirAllergies").isJsonNull()) {
        JsonArray jsonArrayfhirAllergies = jsonObj.getAsJsonArray("fhirAllergies");
        if (jsonArrayfhirAllergies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fhirAllergies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fhirAllergies` to be an array in the JSON string but got `%s`", jsonObj.get("fhirAllergies").toString()));
          }

          // validate the optional field `fhirAllergies` (array)
          for (int i = 0; i < jsonArrayfhirAllergies.size(); i++) {
            FhirAllergy.validateJsonElement(jsonArrayfhirAllergies.get(i));
          };
        }
      }
      if (jsonObj.get("fhirConditions") != null && !jsonObj.get("fhirConditions").isJsonNull()) {
        JsonArray jsonArrayfhirConditions = jsonObj.getAsJsonArray("fhirConditions");
        if (jsonArrayfhirConditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fhirConditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fhirConditions` to be an array in the JSON string but got `%s`", jsonObj.get("fhirConditions").toString()));
          }

          // validate the optional field `fhirConditions` (array)
          for (int i = 0; i < jsonArrayfhirConditions.size(); i++) {
            FhirCondition.validateJsonElement(jsonArrayfhirConditions.get(i));
          };
        }
      }
      if (jsonObj.get("fhirEncounters") != null && !jsonObj.get("fhirEncounters").isJsonNull()) {
        JsonArray jsonArrayfhirEncounters = jsonObj.getAsJsonArray("fhirEncounters");
        if (jsonArrayfhirEncounters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fhirEncounters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fhirEncounters` to be an array in the JSON string but got `%s`", jsonObj.get("fhirEncounters").toString()));
          }

          // validate the optional field `fhirEncounters` (array)
          for (int i = 0; i < jsonArrayfhirEncounters.size(); i++) {
            FhirEncounter.validateJsonElement(jsonArrayfhirEncounters.get(i));
          };
        }
      }
      if (jsonObj.get("fhirObservations") != null && !jsonObj.get("fhirObservations").isJsonNull()) {
        JsonArray jsonArrayfhirObservations = jsonObj.getAsJsonArray("fhirObservations");
        if (jsonArrayfhirObservations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fhirObservations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fhirObservations` to be an array in the JSON string but got `%s`", jsonObj.get("fhirObservations").toString()));
          }

          // validate the optional field `fhirObservations` (array)
          for (int i = 0; i < jsonArrayfhirObservations.size(); i++) {
            FhirObservation.validateJsonElement(jsonArrayfhirObservations.get(i));
          };
        }
      }
      // validate the optional field `fhirPatient`
      if (jsonObj.get("fhirPatient") != null && !jsonObj.get("fhirPatient").isJsonNull()) {
        FhirPatient.validateJsonElement(jsonObj.get("fhirPatient"));
      }
      if (jsonObj.get("fhirPractitioners") != null && !jsonObj.get("fhirPractitioners").isJsonNull()) {
        JsonArray jsonArrayfhirPractitioners = jsonObj.getAsJsonArray("fhirPractitioners");
        if (jsonArrayfhirPractitioners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fhirPractitioners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fhirPractitioners` to be an array in the JSON string but got `%s`", jsonObj.get("fhirPractitioners").toString()));
          }

          // validate the optional field `fhirPractitioners` (array)
          for (int i = 0; i < jsonArrayfhirPractitioners.size(); i++) {
            FhirPractitioner.validateJsonElement(jsonArrayfhirPractitioners.get(i));
          };
        }
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("group"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Patient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Patient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Patient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Patient.class));

       return (TypeAdapter<T>) new TypeAdapter<Patient>() {
           @Override
           public void write(JsonWriter out, Patient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Patient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Patient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Patient
   * @throws IOException if the JSON string is invalid with respect to Patient
   */
  public static Patient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Patient.class);
  }

  /**
   * Convert an instance of Patient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

