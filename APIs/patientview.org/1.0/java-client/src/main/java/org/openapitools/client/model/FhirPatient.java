/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FhirContact;
import org.openapitools.client.model.FhirIdentifier;
import org.openapitools.client.model.FhirPractitioner;
import org.openapitools.client.model.Group;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FhirPatient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FhirPatient {
  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ADDRESS3 = "address3";
  @SerializedName(SERIALIZED_NAME_ADDRESS3)
  private String address3;

  public static final String SERIALIZED_NAME_ADDRESS4 = "address4";
  @SerializedName(SERIALIZED_NAME_ADDRESS4)
  private String address4;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<FhirContact> contacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH_NO_TIME = "dateOfBirthNoTime";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH_NO_TIME)
  private String dateOfBirthNoTime;

  public static final String SERIALIZED_NAME_FORENAME = "forename";
  @SerializedName(SERIALIZED_NAME_FORENAME)
  private String forename;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Group group;

  public static final String SERIALIZED_NAME_GROUP_CODE = "groupCode";
  @SerializedName(SERIALIZED_NAME_GROUP_CODE)
  private String groupCode;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<FhirIdentifier> identifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_PRACTITIONERS = "practitioners";
  @SerializedName(SERIALIZED_NAME_PRACTITIONERS)
  private List<FhirPractitioner> practitioners = new ArrayList<>();

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public FhirPatient() {
  }

  public FhirPatient address1(String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Get address1
   * @return address1
   */
  @javax.annotation.Nullable
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public FhirPatient address2(String address2) {
    this.address2 = address2;
    return this;
  }

  /**
   * Get address2
   * @return address2
   */
  @javax.annotation.Nullable
  public String getAddress2() {
    return address2;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }


  public FhirPatient address3(String address3) {
    this.address3 = address3;
    return this;
  }

  /**
   * Get address3
   * @return address3
   */
  @javax.annotation.Nullable
  public String getAddress3() {
    return address3;
  }

  public void setAddress3(String address3) {
    this.address3 = address3;
  }


  public FhirPatient address4(String address4) {
    this.address4 = address4;
    return this;
  }

  /**
   * Get address4
   * @return address4
   */
  @javax.annotation.Nullable
  public String getAddress4() {
    return address4;
  }

  public void setAddress4(String address4) {
    this.address4 = address4;
  }


  public FhirPatient contacts(List<FhirContact> contacts) {
    this.contacts = contacts;
    return this;
  }

  public FhirPatient addContactsItem(FhirContact contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * Get contacts
   * @return contacts
   */
  @javax.annotation.Nullable
  public List<FhirContact> getContacts() {
    return contacts;
  }

  public void setContacts(List<FhirContact> contacts) {
    this.contacts = contacts;
  }


  public FhirPatient dateOfBirth(OffsetDateTime dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Get dateOfBirth
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public FhirPatient dateOfBirthNoTime(String dateOfBirthNoTime) {
    this.dateOfBirthNoTime = dateOfBirthNoTime;
    return this;
  }

  /**
   * Get dateOfBirthNoTime
   * @return dateOfBirthNoTime
   */
  @javax.annotation.Nullable
  public String getDateOfBirthNoTime() {
    return dateOfBirthNoTime;
  }

  public void setDateOfBirthNoTime(String dateOfBirthNoTime) {
    this.dateOfBirthNoTime = dateOfBirthNoTime;
  }


  public FhirPatient forename(String forename) {
    this.forename = forename;
    return this;
  }

  /**
   * Get forename
   * @return forename
   */
  @javax.annotation.Nullable
  public String getForename() {
    return forename;
  }

  public void setForename(String forename) {
    this.forename = forename;
  }


  public FhirPatient gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public FhirPatient group(Group group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public Group getGroup() {
    return group;
  }

  public void setGroup(Group group) {
    this.group = group;
  }


  public FhirPatient groupCode(String groupCode) {
    this.groupCode = groupCode;
    return this;
  }

  /**
   * Get groupCode
   * @return groupCode
   */
  @javax.annotation.Nullable
  public String getGroupCode() {
    return groupCode;
  }

  public void setGroupCode(String groupCode) {
    this.groupCode = groupCode;
  }


  public FhirPatient identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public FhirPatient identifiers(List<FhirIdentifier> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public FhirPatient addIdentifiersItem(FhirIdentifier identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @javax.annotation.Nullable
  public List<FhirIdentifier> getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(List<FhirIdentifier> identifiers) {
    this.identifiers = identifiers;
  }


  public FhirPatient postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Get postcode
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public FhirPatient practitioners(List<FhirPractitioner> practitioners) {
    this.practitioners = practitioners;
    return this;
  }

  public FhirPatient addPractitionersItem(FhirPractitioner practitionersItem) {
    if (this.practitioners == null) {
      this.practitioners = new ArrayList<>();
    }
    this.practitioners.add(practitionersItem);
    return this;
  }

  /**
   * Get practitioners
   * @return practitioners
   */
  @javax.annotation.Nullable
  public List<FhirPractitioner> getPractitioners() {
    return practitioners;
  }

  public void setPractitioners(List<FhirPractitioner> practitioners) {
    this.practitioners = practitioners;
  }


  public FhirPatient surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * Get surname
   * @return surname
   */
  @javax.annotation.Nullable
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FhirPatient fhirPatient = (FhirPatient) o;
    return Objects.equals(this.address1, fhirPatient.address1) &&
        Objects.equals(this.address2, fhirPatient.address2) &&
        Objects.equals(this.address3, fhirPatient.address3) &&
        Objects.equals(this.address4, fhirPatient.address4) &&
        Objects.equals(this.contacts, fhirPatient.contacts) &&
        Objects.equals(this.dateOfBirth, fhirPatient.dateOfBirth) &&
        Objects.equals(this.dateOfBirthNoTime, fhirPatient.dateOfBirthNoTime) &&
        Objects.equals(this.forename, fhirPatient.forename) &&
        Objects.equals(this.gender, fhirPatient.gender) &&
        Objects.equals(this.group, fhirPatient.group) &&
        Objects.equals(this.groupCode, fhirPatient.groupCode) &&
        Objects.equals(this.identifier, fhirPatient.identifier) &&
        Objects.equals(this.identifiers, fhirPatient.identifiers) &&
        Objects.equals(this.postcode, fhirPatient.postcode) &&
        Objects.equals(this.practitioners, fhirPatient.practitioners) &&
        Objects.equals(this.surname, fhirPatient.surname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, address3, address4, contacts, dateOfBirth, dateOfBirthNoTime, forename, gender, group, groupCode, identifier, identifiers, postcode, practitioners, surname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FhirPatient {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    address3: ").append(toIndentedString(address3)).append("\n");
    sb.append("    address4: ").append(toIndentedString(address4)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    dateOfBirthNoTime: ").append(toIndentedString(dateOfBirthNoTime)).append("\n");
    sb.append("    forename: ").append(toIndentedString(forename)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    groupCode: ").append(toIndentedString(groupCode)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    practitioners: ").append(toIndentedString(practitioners)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("address3");
    openapiFields.add("address4");
    openapiFields.add("contacts");
    openapiFields.add("dateOfBirth");
    openapiFields.add("dateOfBirthNoTime");
    openapiFields.add("forename");
    openapiFields.add("gender");
    openapiFields.add("group");
    openapiFields.add("groupCode");
    openapiFields.add("identifier");
    openapiFields.add("identifiers");
    openapiFields.add("postcode");
    openapiFields.add("practitioners");
    openapiFields.add("surname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FhirPatient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FhirPatient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FhirPatient is not found in the empty JSON string", FhirPatient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FhirPatient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FhirPatient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address1") != null && !jsonObj.get("address1").isJsonNull()) && !jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonNull()) && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if ((jsonObj.get("address3") != null && !jsonObj.get("address3").isJsonNull()) && !jsonObj.get("address3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address3").toString()));
      }
      if ((jsonObj.get("address4") != null && !jsonObj.get("address4").isJsonNull()) && !jsonObj.get("address4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address4").toString()));
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            FhirContact.validateJsonElement(jsonArraycontacts.get(i));
          };
        }
      }
      if ((jsonObj.get("dateOfBirthNoTime") != null && !jsonObj.get("dateOfBirthNoTime").isJsonNull()) && !jsonObj.get("dateOfBirthNoTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfBirthNoTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfBirthNoTime").toString()));
      }
      if ((jsonObj.get("forename") != null && !jsonObj.get("forename").isJsonNull()) && !jsonObj.get("forename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forename").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("group"));
      }
      if ((jsonObj.get("groupCode") != null && !jsonObj.get("groupCode").isJsonNull()) && !jsonObj.get("groupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupCode").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
        if (jsonArrayidentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
          }

          // validate the optional field `identifiers` (array)
          for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
            FhirIdentifier.validateJsonElement(jsonArrayidentifiers.get(i));
          };
        }
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if (jsonObj.get("practitioners") != null && !jsonObj.get("practitioners").isJsonNull()) {
        JsonArray jsonArraypractitioners = jsonObj.getAsJsonArray("practitioners");
        if (jsonArraypractitioners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("practitioners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `practitioners` to be an array in the JSON string but got `%s`", jsonObj.get("practitioners").toString()));
          }

          // validate the optional field `practitioners` (array)
          for (int i = 0; i < jsonArraypractitioners.size(); i++) {
            FhirPractitioner.validateJsonElement(jsonArraypractitioners.get(i));
          };
        }
      }
      if ((jsonObj.get("surname") != null && !jsonObj.get("surname").isJsonNull()) && !jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FhirPatient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FhirPatient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FhirPatient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FhirPatient.class));

       return (TypeAdapter<T>) new TypeAdapter<FhirPatient>() {
           @Override
           public void write(JsonWriter out, FhirPatient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FhirPatient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FhirPatient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FhirPatient
   * @throws IOException if the JSON string is invalid with respect to FhirPatient
   */
  public static FhirPatient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FhirPatient.class);
  }

  /**
   * Convert an instance of FhirPatient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

