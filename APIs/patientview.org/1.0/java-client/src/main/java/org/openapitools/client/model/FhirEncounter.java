/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.FhirObservation;
import org.openapitools.client.model.FhirProcedure;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FhirEncounter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FhirEncounter {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_ENCOUNTER_TYPE = "encounterType";
  @SerializedName(SERIALIZED_NAME_ENCOUNTER_TYPE)
  private String encounterType;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Group group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Set<Link> links = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_OBSERVATIONS = "observations";
  @SerializedName(SERIALIZED_NAME_OBSERVATIONS)
  private Set<FhirObservation> observations = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_PROCEDURES = "procedures";
  @SerializedName(SERIALIZED_NAME_PROCEDURES)
  private Set<FhirProcedure> procedures = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public FhirEncounter() {
  }

  public FhirEncounter date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public FhirEncounter encounterType(String encounterType) {
    this.encounterType = encounterType;
    return this;
  }

  /**
   * Get encounterType
   * @return encounterType
   */
  @javax.annotation.Nullable
  public String getEncounterType() {
    return encounterType;
  }

  public void setEncounterType(String encounterType) {
    this.encounterType = encounterType;
  }


  public FhirEncounter group(Group group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public Group getGroup() {
    return group;
  }

  public void setGroup(Group group) {
    this.group = group;
  }


  public FhirEncounter id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public FhirEncounter identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public FhirEncounter links(Set<Link> links) {
    this.links = links;
    return this;
  }

  public FhirEncounter addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new LinkedHashSet<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public Set<Link> getLinks() {
    return links;
  }

  public void setLinks(Set<Link> links) {
    this.links = links;
  }


  public FhirEncounter observations(Set<FhirObservation> observations) {
    this.observations = observations;
    return this;
  }

  public FhirEncounter addObservationsItem(FhirObservation observationsItem) {
    if (this.observations == null) {
      this.observations = new LinkedHashSet<>();
    }
    this.observations.add(observationsItem);
    return this;
  }

  /**
   * Get observations
   * @return observations
   */
  @javax.annotation.Nullable
  public Set<FhirObservation> getObservations() {
    return observations;
  }

  public void setObservations(Set<FhirObservation> observations) {
    this.observations = observations;
  }


  public FhirEncounter procedures(Set<FhirProcedure> procedures) {
    this.procedures = procedures;
    return this;
  }

  public FhirEncounter addProceduresItem(FhirProcedure proceduresItem) {
    if (this.procedures == null) {
      this.procedures = new LinkedHashSet<>();
    }
    this.procedures.add(proceduresItem);
    return this;
  }

  /**
   * Get procedures
   * @return procedures
   */
  @javax.annotation.Nullable
  public Set<FhirProcedure> getProcedures() {
    return procedures;
  }

  public void setProcedures(Set<FhirProcedure> procedures) {
    this.procedures = procedures;
  }


  public FhirEncounter status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FhirEncounter fhirEncounter = (FhirEncounter) o;
    return Objects.equals(this.date, fhirEncounter.date) &&
        Objects.equals(this.encounterType, fhirEncounter.encounterType) &&
        Objects.equals(this.group, fhirEncounter.group) &&
        Objects.equals(this.id, fhirEncounter.id) &&
        Objects.equals(this.identifier, fhirEncounter.identifier) &&
        Objects.equals(this.links, fhirEncounter.links) &&
        Objects.equals(this.observations, fhirEncounter.observations) &&
        Objects.equals(this.procedures, fhirEncounter.procedures) &&
        Objects.equals(this.status, fhirEncounter.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, encounterType, group, id, identifier, links, observations, procedures, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FhirEncounter {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    encounterType: ").append(toIndentedString(encounterType)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    observations: ").append(toIndentedString(observations)).append("\n");
    sb.append("    procedures: ").append(toIndentedString(procedures)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("encounterType");
    openapiFields.add("group");
    openapiFields.add("id");
    openapiFields.add("identifier");
    openapiFields.add("links");
    openapiFields.add("observations");
    openapiFields.add("procedures");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FhirEncounter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FhirEncounter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FhirEncounter is not found in the empty JSON string", FhirEncounter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FhirEncounter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FhirEncounter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encounterType") != null && !jsonObj.get("encounterType").isJsonNull()) && !jsonObj.get("encounterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encounterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encounterType").toString()));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("group"));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if (jsonObj.get("observations") != null && !jsonObj.get("observations").isJsonNull()) {
        JsonArray jsonArrayobservations = jsonObj.getAsJsonArray("observations");
        if (jsonArrayobservations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("observations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `observations` to be an array in the JSON string but got `%s`", jsonObj.get("observations").toString()));
          }

          // validate the optional field `observations` (array)
          for (int i = 0; i < jsonArrayobservations.size(); i++) {
            FhirObservation.validateJsonElement(jsonArrayobservations.get(i));
          };
        }
      }
      if (jsonObj.get("procedures") != null && !jsonObj.get("procedures").isJsonNull()) {
        JsonArray jsonArrayprocedures = jsonObj.getAsJsonArray("procedures");
        if (jsonArrayprocedures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("procedures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `procedures` to be an array in the JSON string but got `%s`", jsonObj.get("procedures").toString()));
          }

          // validate the optional field `procedures` (array)
          for (int i = 0; i < jsonArrayprocedures.size(); i++) {
            FhirProcedure.validateJsonElement(jsonArrayprocedures.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FhirEncounter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FhirEncounter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FhirEncounter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FhirEncounter.class));

       return (TypeAdapter<T>) new TypeAdapter<FhirEncounter>() {
           @Override
           public void write(JsonWriter out, FhirEncounter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FhirEncounter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FhirEncounter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FhirEncounter
   * @throws IOException if the JSON string is invalid with respect to FhirEncounter
   */
  public static FhirEncounter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FhirEncounter.class);
  }

  /**
   * Convert an instance of FhirEncounter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

