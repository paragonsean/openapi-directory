/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Group;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FhirObservation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FhirObservation {
  public static final String SERIALIZED_NAME_APPLIES = "applies";
  @SerializedName(SERIALIZED_NAME_APPLIES)
  private OffsetDateTime applies;

  public static final String SERIALIZED_NAME_BODY_SITE = "bodySite";
  @SerializedName(SERIALIZED_NAME_BODY_SITE)
  private String bodySite;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_COMPARATOR = "comparator";
  @SerializedName(SERIALIZED_NAME_COMPARATOR)
  private String comparator;

  public static final String SERIALIZED_NAME_DIAGRAM = "diagram";
  @SerializedName(SERIALIZED_NAME_DIAGRAM)
  private String diagram;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Group group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEMPORARY_UUID = "temporaryUuid";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_UUID)
  private String temporaryUuid;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public FhirObservation() {
  }

  public FhirObservation applies(OffsetDateTime applies) {
    this.applies = applies;
    return this;
  }

  /**
   * Get applies
   * @return applies
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApplies() {
    return applies;
  }

  public void setApplies(OffsetDateTime applies) {
    this.applies = applies;
  }


  public FhirObservation bodySite(String bodySite) {
    this.bodySite = bodySite;
    return this;
  }

  /**
   * Get bodySite
   * @return bodySite
   */
  @javax.annotation.Nullable
  public String getBodySite() {
    return bodySite;
  }

  public void setBodySite(String bodySite) {
    this.bodySite = bodySite;
  }


  public FhirObservation comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public FhirObservation comparator(String comparator) {
    this.comparator = comparator;
    return this;
  }

  /**
   * Get comparator
   * @return comparator
   */
  @javax.annotation.Nullable
  public String getComparator() {
    return comparator;
  }

  public void setComparator(String comparator) {
    this.comparator = comparator;
  }


  public FhirObservation diagram(String diagram) {
    this.diagram = diagram;
    return this;
  }

  /**
   * Get diagram
   * @return diagram
   */
  @javax.annotation.Nullable
  public String getDiagram() {
    return diagram;
  }

  public void setDiagram(String diagram) {
    this.diagram = diagram;
  }


  public FhirObservation group(Group group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public Group getGroup() {
    return group;
  }

  public void setGroup(Group group) {
    this.group = group;
  }


  public FhirObservation id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public FhirObservation identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public FhirObservation location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public FhirObservation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FhirObservation temporaryUuid(String temporaryUuid) {
    this.temporaryUuid = temporaryUuid;
    return this;
  }

  /**
   * Get temporaryUuid
   * @return temporaryUuid
   */
  @javax.annotation.Nullable
  public String getTemporaryUuid() {
    return temporaryUuid;
  }

  public void setTemporaryUuid(String temporaryUuid) {
    this.temporaryUuid = temporaryUuid;
  }


  public FhirObservation units(String units) {
    this.units = units;
    return this;
  }

  /**
   * Get units
   * @return units
   */
  @javax.annotation.Nullable
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }


  public FhirObservation value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FhirObservation fhirObservation = (FhirObservation) o;
    return Objects.equals(this.applies, fhirObservation.applies) &&
        Objects.equals(this.bodySite, fhirObservation.bodySite) &&
        Objects.equals(this.comments, fhirObservation.comments) &&
        Objects.equals(this.comparator, fhirObservation.comparator) &&
        Objects.equals(this.diagram, fhirObservation.diagram) &&
        Objects.equals(this.group, fhirObservation.group) &&
        Objects.equals(this.id, fhirObservation.id) &&
        Objects.equals(this.identifier, fhirObservation.identifier) &&
        Objects.equals(this.location, fhirObservation.location) &&
        Objects.equals(this.name, fhirObservation.name) &&
        Objects.equals(this.temporaryUuid, fhirObservation.temporaryUuid) &&
        Objects.equals(this.units, fhirObservation.units) &&
        Objects.equals(this.value, fhirObservation.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applies, bodySite, comments, comparator, diagram, group, id, identifier, location, name, temporaryUuid, units, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FhirObservation {\n");
    sb.append("    applies: ").append(toIndentedString(applies)).append("\n");
    sb.append("    bodySite: ").append(toIndentedString(bodySite)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    comparator: ").append(toIndentedString(comparator)).append("\n");
    sb.append("    diagram: ").append(toIndentedString(diagram)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    temporaryUuid: ").append(toIndentedString(temporaryUuid)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applies");
    openapiFields.add("bodySite");
    openapiFields.add("comments");
    openapiFields.add("comparator");
    openapiFields.add("diagram");
    openapiFields.add("group");
    openapiFields.add("id");
    openapiFields.add("identifier");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("temporaryUuid");
    openapiFields.add("units");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FhirObservation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FhirObservation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FhirObservation is not found in the empty JSON string", FhirObservation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FhirObservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FhirObservation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bodySite") != null && !jsonObj.get("bodySite").isJsonNull()) && !jsonObj.get("bodySite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodySite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodySite").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("comparator") != null && !jsonObj.get("comparator").isJsonNull()) && !jsonObj.get("comparator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparator").toString()));
      }
      if ((jsonObj.get("diagram") != null && !jsonObj.get("diagram").isJsonNull()) && !jsonObj.get("diagram").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diagram` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diagram").toString()));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("group"));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("temporaryUuid") != null && !jsonObj.get("temporaryUuid").isJsonNull()) && !jsonObj.get("temporaryUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporaryUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporaryUuid").toString()));
      }
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FhirObservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FhirObservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FhirObservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FhirObservation.class));

       return (TypeAdapter<T>) new TypeAdapter<FhirObservation>() {
           @Override
           public void write(JsonWriter out, FhirObservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FhirObservation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FhirObservation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FhirObservation
   * @throws IOException if the JSON string is invalid with respect to FhirObservation
   */
  public static FhirObservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FhirObservation.class);
  }

  /**
   * Convert an instance of FhirObservation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

