/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.BaseGroup;
import org.openapitools.client.model.ExternalStandard;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.Route;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserToken {
  public static final String SERIALIZED_NAME_AUDIT_ACTIONS = "auditActions";
  @SerializedName(SERIALIZED_NAME_AUDIT_ACTIONS)
  private List<String> auditActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_SECRET_WORD = "checkSecretWord";
  @SerializedName(SERIALIZED_NAME_CHECK_SECRET_WORD)
  private Boolean checkSecretWord;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private OffsetDateTime expiration;

  public static final String SERIALIZED_NAME_EXTERNAL_STANDARDS = "externalStandards";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_STANDARDS)
  private List<ExternalStandard> externalStandards = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_FEATURES = "groupFeatures";
  @SerializedName(SERIALIZED_NAME_GROUP_FEATURES)
  private List<Feature> groupFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_MESSAGING_ENABLED = "groupMessagingEnabled";
  @SerializedName(SERIALIZED_NAME_GROUP_MESSAGING_ENABLED)
  private Boolean groupMessagingEnabled;

  public static final String SERIALIZED_NAME_MUST_SET_SECRET_WORD = "mustSetSecretWord";
  @SerializedName(SERIALIZED_NAME_MUST_SET_SECRET_WORD)
  private Boolean mustSetSecretWord;

  public static final String SERIALIZED_NAME_PATIENT_FEATURES = "patientFeatures";
  @SerializedName(SERIALIZED_NAME_PATIENT_FEATURES)
  private List<Feature> patientFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATIENT_MESSAGING_FEATURE_TYPES = "patientMessagingFeatureTypes";
  @SerializedName(SERIALIZED_NAME_PATIENT_MESSAGING_FEATURE_TYPES)
  private List<String> patientMessagingFeatureTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATIENT_ROLES = "patientRoles";
  @SerializedName(SERIALIZED_NAME_PATIENT_ROLES)
  private List<Role> patientRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUTES = "routes";
  @SerializedName(SERIALIZED_NAME_ROUTES)
  private Set<Route> routes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SECRET_WORD = "secretWord";
  @SerializedName(SERIALIZED_NAME_SECRET_WORD)
  private String secretWord;

  public static final String SERIALIZED_NAME_SECRET_WORD_CHOICES = "secretWordChoices";
  @SerializedName(SERIALIZED_NAME_SECRET_WORD_CHOICES)
  private Object secretWordChoices;

  public static final String SERIALIZED_NAME_SECRET_WORD_INDEXES = "secretWordIndexes";
  @SerializedName(SERIALIZED_NAME_SECRET_WORD_INDEXES)
  private List<String> secretWordIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECRET_WORD_SALT = "secretWordSalt";
  @SerializedName(SERIALIZED_NAME_SECRET_WORD_SALT)
  private String secretWordSalt;

  public static final String SERIALIZED_NAME_SECRET_WORD_TOKEN = "secretWordToken";
  @SerializedName(SERIALIZED_NAME_SECRET_WORD_TOKEN)
  private String secretWordToken;

  public static final String SERIALIZED_NAME_SECURITY_ROLES = "securityRoles";
  @SerializedName(SERIALIZED_NAME_SECURITY_ROLES)
  private List<Role> securityRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOULD_ENTER_CONDITION = "shouldEnterCondition";
  @SerializedName(SERIALIZED_NAME_SHOULD_ENTER_CONDITION)
  private Boolean shouldEnterCondition;

  public static final String SERIALIZED_NAME_STAFF_FEATURES = "staffFeatures";
  @SerializedName(SERIALIZED_NAME_STAFF_FEATURES)
  private List<Feature> staffFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAFF_ROLES = "staffRoles";
  @SerializedName(SERIALIZED_NAME_STAFF_ROLES)
  private List<Role> staffRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_USER_FEATURES = "userFeatures";
  @SerializedName(SERIALIZED_NAME_USER_FEATURES)
  private List<Feature> userFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_GROUPS = "userGroups";
  @SerializedName(SERIALIZED_NAME_USER_GROUPS)
  private List<BaseGroup> userGroups = new ArrayList<>();

  public UserToken() {
  }

  public UserToken auditActions(List<String> auditActions) {
    this.auditActions = auditActions;
    return this;
  }

  public UserToken addAuditActionsItem(String auditActionsItem) {
    if (this.auditActions == null) {
      this.auditActions = new ArrayList<>();
    }
    this.auditActions.add(auditActionsItem);
    return this;
  }

  /**
   * Get auditActions
   * @return auditActions
   */
  @javax.annotation.Nullable
  public List<String> getAuditActions() {
    return auditActions;
  }

  public void setAuditActions(List<String> auditActions) {
    this.auditActions = auditActions;
  }


  public UserToken checkSecretWord(Boolean checkSecretWord) {
    this.checkSecretWord = checkSecretWord;
    return this;
  }

  /**
   * Get checkSecretWord
   * @return checkSecretWord
   */
  @javax.annotation.Nullable
  public Boolean getCheckSecretWord() {
    return checkSecretWord;
  }

  public void setCheckSecretWord(Boolean checkSecretWord) {
    this.checkSecretWord = checkSecretWord;
  }


  public UserToken created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public UserToken expiration(OffsetDateTime expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Get expiration
   * @return expiration
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiration() {
    return expiration;
  }

  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }


  public UserToken externalStandards(List<ExternalStandard> externalStandards) {
    this.externalStandards = externalStandards;
    return this;
  }

  public UserToken addExternalStandardsItem(ExternalStandard externalStandardsItem) {
    if (this.externalStandards == null) {
      this.externalStandards = new ArrayList<>();
    }
    this.externalStandards.add(externalStandardsItem);
    return this;
  }

  /**
   * Get externalStandards
   * @return externalStandards
   */
  @javax.annotation.Nullable
  public List<ExternalStandard> getExternalStandards() {
    return externalStandards;
  }

  public void setExternalStandards(List<ExternalStandard> externalStandards) {
    this.externalStandards = externalStandards;
  }


  public UserToken groupFeatures(List<Feature> groupFeatures) {
    this.groupFeatures = groupFeatures;
    return this;
  }

  public UserToken addGroupFeaturesItem(Feature groupFeaturesItem) {
    if (this.groupFeatures == null) {
      this.groupFeatures = new ArrayList<>();
    }
    this.groupFeatures.add(groupFeaturesItem);
    return this;
  }

  /**
   * Get groupFeatures
   * @return groupFeatures
   */
  @javax.annotation.Nullable
  public List<Feature> getGroupFeatures() {
    return groupFeatures;
  }

  public void setGroupFeatures(List<Feature> groupFeatures) {
    this.groupFeatures = groupFeatures;
  }


  public UserToken groupMessagingEnabled(Boolean groupMessagingEnabled) {
    this.groupMessagingEnabled = groupMessagingEnabled;
    return this;
  }

  /**
   * Get groupMessagingEnabled
   * @return groupMessagingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGroupMessagingEnabled() {
    return groupMessagingEnabled;
  }

  public void setGroupMessagingEnabled(Boolean groupMessagingEnabled) {
    this.groupMessagingEnabled = groupMessagingEnabled;
  }


  public UserToken mustSetSecretWord(Boolean mustSetSecretWord) {
    this.mustSetSecretWord = mustSetSecretWord;
    return this;
  }

  /**
   * Get mustSetSecretWord
   * @return mustSetSecretWord
   */
  @javax.annotation.Nullable
  public Boolean getMustSetSecretWord() {
    return mustSetSecretWord;
  }

  public void setMustSetSecretWord(Boolean mustSetSecretWord) {
    this.mustSetSecretWord = mustSetSecretWord;
  }


  public UserToken patientFeatures(List<Feature> patientFeatures) {
    this.patientFeatures = patientFeatures;
    return this;
  }

  public UserToken addPatientFeaturesItem(Feature patientFeaturesItem) {
    if (this.patientFeatures == null) {
      this.patientFeatures = new ArrayList<>();
    }
    this.patientFeatures.add(patientFeaturesItem);
    return this;
  }

  /**
   * Get patientFeatures
   * @return patientFeatures
   */
  @javax.annotation.Nullable
  public List<Feature> getPatientFeatures() {
    return patientFeatures;
  }

  public void setPatientFeatures(List<Feature> patientFeatures) {
    this.patientFeatures = patientFeatures;
  }


  public UserToken patientMessagingFeatureTypes(List<String> patientMessagingFeatureTypes) {
    this.patientMessagingFeatureTypes = patientMessagingFeatureTypes;
    return this;
  }

  public UserToken addPatientMessagingFeatureTypesItem(String patientMessagingFeatureTypesItem) {
    if (this.patientMessagingFeatureTypes == null) {
      this.patientMessagingFeatureTypes = new ArrayList<>();
    }
    this.patientMessagingFeatureTypes.add(patientMessagingFeatureTypesItem);
    return this;
  }

  /**
   * Get patientMessagingFeatureTypes
   * @return patientMessagingFeatureTypes
   */
  @javax.annotation.Nullable
  public List<String> getPatientMessagingFeatureTypes() {
    return patientMessagingFeatureTypes;
  }

  public void setPatientMessagingFeatureTypes(List<String> patientMessagingFeatureTypes) {
    this.patientMessagingFeatureTypes = patientMessagingFeatureTypes;
  }


  public UserToken patientRoles(List<Role> patientRoles) {
    this.patientRoles = patientRoles;
    return this;
  }

  public UserToken addPatientRolesItem(Role patientRolesItem) {
    if (this.patientRoles == null) {
      this.patientRoles = new ArrayList<>();
    }
    this.patientRoles.add(patientRolesItem);
    return this;
  }

  /**
   * Get patientRoles
   * @return patientRoles
   */
  @javax.annotation.Nullable
  public List<Role> getPatientRoles() {
    return patientRoles;
  }

  public void setPatientRoles(List<Role> patientRoles) {
    this.patientRoles = patientRoles;
  }


  public UserToken routes(Set<Route> routes) {
    this.routes = routes;
    return this;
  }

  public UserToken addRoutesItem(Route routesItem) {
    if (this.routes == null) {
      this.routes = new LinkedHashSet<>();
    }
    this.routes.add(routesItem);
    return this;
  }

  /**
   * Get routes
   * @return routes
   */
  @javax.annotation.Nullable
  public Set<Route> getRoutes() {
    return routes;
  }

  public void setRoutes(Set<Route> routes) {
    this.routes = routes;
  }


  public UserToken secretWord(String secretWord) {
    this.secretWord = secretWord;
    return this;
  }

  /**
   * Get secretWord
   * @return secretWord
   */
  @javax.annotation.Nullable
  public String getSecretWord() {
    return secretWord;
  }

  public void setSecretWord(String secretWord) {
    this.secretWord = secretWord;
  }


  public UserToken secretWordChoices(Object secretWordChoices) {
    this.secretWordChoices = secretWordChoices;
    return this;
  }

  /**
   * Get secretWordChoices
   * @return secretWordChoices
   */
  @javax.annotation.Nullable
  public Object getSecretWordChoices() {
    return secretWordChoices;
  }

  public void setSecretWordChoices(Object secretWordChoices) {
    this.secretWordChoices = secretWordChoices;
  }


  public UserToken secretWordIndexes(List<String> secretWordIndexes) {
    this.secretWordIndexes = secretWordIndexes;
    return this;
  }

  public UserToken addSecretWordIndexesItem(String secretWordIndexesItem) {
    if (this.secretWordIndexes == null) {
      this.secretWordIndexes = new ArrayList<>();
    }
    this.secretWordIndexes.add(secretWordIndexesItem);
    return this;
  }

  /**
   * Get secretWordIndexes
   * @return secretWordIndexes
   */
  @javax.annotation.Nullable
  public List<String> getSecretWordIndexes() {
    return secretWordIndexes;
  }

  public void setSecretWordIndexes(List<String> secretWordIndexes) {
    this.secretWordIndexes = secretWordIndexes;
  }


  public UserToken secretWordSalt(String secretWordSalt) {
    this.secretWordSalt = secretWordSalt;
    return this;
  }

  /**
   * Get secretWordSalt
   * @return secretWordSalt
   */
  @javax.annotation.Nullable
  public String getSecretWordSalt() {
    return secretWordSalt;
  }

  public void setSecretWordSalt(String secretWordSalt) {
    this.secretWordSalt = secretWordSalt;
  }


  public UserToken secretWordToken(String secretWordToken) {
    this.secretWordToken = secretWordToken;
    return this;
  }

  /**
   * Get secretWordToken
   * @return secretWordToken
   */
  @javax.annotation.Nullable
  public String getSecretWordToken() {
    return secretWordToken;
  }

  public void setSecretWordToken(String secretWordToken) {
    this.secretWordToken = secretWordToken;
  }


  public UserToken securityRoles(List<Role> securityRoles) {
    this.securityRoles = securityRoles;
    return this;
  }

  public UserToken addSecurityRolesItem(Role securityRolesItem) {
    if (this.securityRoles == null) {
      this.securityRoles = new ArrayList<>();
    }
    this.securityRoles.add(securityRolesItem);
    return this;
  }

  /**
   * Get securityRoles
   * @return securityRoles
   */
  @javax.annotation.Nullable
  public List<Role> getSecurityRoles() {
    return securityRoles;
  }

  public void setSecurityRoles(List<Role> securityRoles) {
    this.securityRoles = securityRoles;
  }


  public UserToken shouldEnterCondition(Boolean shouldEnterCondition) {
    this.shouldEnterCondition = shouldEnterCondition;
    return this;
  }

  /**
   * Get shouldEnterCondition
   * @return shouldEnterCondition
   */
  @javax.annotation.Nullable
  public Boolean getShouldEnterCondition() {
    return shouldEnterCondition;
  }

  public void setShouldEnterCondition(Boolean shouldEnterCondition) {
    this.shouldEnterCondition = shouldEnterCondition;
  }


  public UserToken staffFeatures(List<Feature> staffFeatures) {
    this.staffFeatures = staffFeatures;
    return this;
  }

  public UserToken addStaffFeaturesItem(Feature staffFeaturesItem) {
    if (this.staffFeatures == null) {
      this.staffFeatures = new ArrayList<>();
    }
    this.staffFeatures.add(staffFeaturesItem);
    return this;
  }

  /**
   * Get staffFeatures
   * @return staffFeatures
   */
  @javax.annotation.Nullable
  public List<Feature> getStaffFeatures() {
    return staffFeatures;
  }

  public void setStaffFeatures(List<Feature> staffFeatures) {
    this.staffFeatures = staffFeatures;
  }


  public UserToken staffRoles(List<Role> staffRoles) {
    this.staffRoles = staffRoles;
    return this;
  }

  public UserToken addStaffRolesItem(Role staffRolesItem) {
    if (this.staffRoles == null) {
      this.staffRoles = new ArrayList<>();
    }
    this.staffRoles.add(staffRolesItem);
    return this;
  }

  /**
   * Get staffRoles
   * @return staffRoles
   */
  @javax.annotation.Nullable
  public List<Role> getStaffRoles() {
    return staffRoles;
  }

  public void setStaffRoles(List<Role> staffRoles) {
    this.staffRoles = staffRoles;
  }


  public UserToken token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public UserToken user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }


  public UserToken userFeatures(List<Feature> userFeatures) {
    this.userFeatures = userFeatures;
    return this;
  }

  public UserToken addUserFeaturesItem(Feature userFeaturesItem) {
    if (this.userFeatures == null) {
      this.userFeatures = new ArrayList<>();
    }
    this.userFeatures.add(userFeaturesItem);
    return this;
  }

  /**
   * Get userFeatures
   * @return userFeatures
   */
  @javax.annotation.Nullable
  public List<Feature> getUserFeatures() {
    return userFeatures;
  }

  public void setUserFeatures(List<Feature> userFeatures) {
    this.userFeatures = userFeatures;
  }


  public UserToken userGroups(List<BaseGroup> userGroups) {
    this.userGroups = userGroups;
    return this;
  }

  public UserToken addUserGroupsItem(BaseGroup userGroupsItem) {
    if (this.userGroups == null) {
      this.userGroups = new ArrayList<>();
    }
    this.userGroups.add(userGroupsItem);
    return this;
  }

  /**
   * Get userGroups
   * @return userGroups
   */
  @javax.annotation.Nullable
  public List<BaseGroup> getUserGroups() {
    return userGroups;
  }

  public void setUserGroups(List<BaseGroup> userGroups) {
    this.userGroups = userGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserToken userToken = (UserToken) o;
    return Objects.equals(this.auditActions, userToken.auditActions) &&
        Objects.equals(this.checkSecretWord, userToken.checkSecretWord) &&
        Objects.equals(this.created, userToken.created) &&
        Objects.equals(this.expiration, userToken.expiration) &&
        Objects.equals(this.externalStandards, userToken.externalStandards) &&
        Objects.equals(this.groupFeatures, userToken.groupFeatures) &&
        Objects.equals(this.groupMessagingEnabled, userToken.groupMessagingEnabled) &&
        Objects.equals(this.mustSetSecretWord, userToken.mustSetSecretWord) &&
        Objects.equals(this.patientFeatures, userToken.patientFeatures) &&
        Objects.equals(this.patientMessagingFeatureTypes, userToken.patientMessagingFeatureTypes) &&
        Objects.equals(this.patientRoles, userToken.patientRoles) &&
        Objects.equals(this.routes, userToken.routes) &&
        Objects.equals(this.secretWord, userToken.secretWord) &&
        Objects.equals(this.secretWordChoices, userToken.secretWordChoices) &&
        Objects.equals(this.secretWordIndexes, userToken.secretWordIndexes) &&
        Objects.equals(this.secretWordSalt, userToken.secretWordSalt) &&
        Objects.equals(this.secretWordToken, userToken.secretWordToken) &&
        Objects.equals(this.securityRoles, userToken.securityRoles) &&
        Objects.equals(this.shouldEnterCondition, userToken.shouldEnterCondition) &&
        Objects.equals(this.staffFeatures, userToken.staffFeatures) &&
        Objects.equals(this.staffRoles, userToken.staffRoles) &&
        Objects.equals(this.token, userToken.token) &&
        Objects.equals(this.user, userToken.user) &&
        Objects.equals(this.userFeatures, userToken.userFeatures) &&
        Objects.equals(this.userGroups, userToken.userGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditActions, checkSecretWord, created, expiration, externalStandards, groupFeatures, groupMessagingEnabled, mustSetSecretWord, patientFeatures, patientMessagingFeatureTypes, patientRoles, routes, secretWord, secretWordChoices, secretWordIndexes, secretWordSalt, secretWordToken, securityRoles, shouldEnterCondition, staffFeatures, staffRoles, token, user, userFeatures, userGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserToken {\n");
    sb.append("    auditActions: ").append(toIndentedString(auditActions)).append("\n");
    sb.append("    checkSecretWord: ").append(toIndentedString(checkSecretWord)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    externalStandards: ").append(toIndentedString(externalStandards)).append("\n");
    sb.append("    groupFeatures: ").append(toIndentedString(groupFeatures)).append("\n");
    sb.append("    groupMessagingEnabled: ").append(toIndentedString(groupMessagingEnabled)).append("\n");
    sb.append("    mustSetSecretWord: ").append(toIndentedString(mustSetSecretWord)).append("\n");
    sb.append("    patientFeatures: ").append(toIndentedString(patientFeatures)).append("\n");
    sb.append("    patientMessagingFeatureTypes: ").append(toIndentedString(patientMessagingFeatureTypes)).append("\n");
    sb.append("    patientRoles: ").append(toIndentedString(patientRoles)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    secretWord: ").append(toIndentedString(secretWord)).append("\n");
    sb.append("    secretWordChoices: ").append(toIndentedString(secretWordChoices)).append("\n");
    sb.append("    secretWordIndexes: ").append(toIndentedString(secretWordIndexes)).append("\n");
    sb.append("    secretWordSalt: ").append(toIndentedString(secretWordSalt)).append("\n");
    sb.append("    secretWordToken: ").append(toIndentedString(secretWordToken)).append("\n");
    sb.append("    securityRoles: ").append(toIndentedString(securityRoles)).append("\n");
    sb.append("    shouldEnterCondition: ").append(toIndentedString(shouldEnterCondition)).append("\n");
    sb.append("    staffFeatures: ").append(toIndentedString(staffFeatures)).append("\n");
    sb.append("    staffRoles: ").append(toIndentedString(staffRoles)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userFeatures: ").append(toIndentedString(userFeatures)).append("\n");
    sb.append("    userGroups: ").append(toIndentedString(userGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auditActions");
    openapiFields.add("checkSecretWord");
    openapiFields.add("created");
    openapiFields.add("expiration");
    openapiFields.add("externalStandards");
    openapiFields.add("groupFeatures");
    openapiFields.add("groupMessagingEnabled");
    openapiFields.add("mustSetSecretWord");
    openapiFields.add("patientFeatures");
    openapiFields.add("patientMessagingFeatureTypes");
    openapiFields.add("patientRoles");
    openapiFields.add("routes");
    openapiFields.add("secretWord");
    openapiFields.add("secretWordChoices");
    openapiFields.add("secretWordIndexes");
    openapiFields.add("secretWordSalt");
    openapiFields.add("secretWordToken");
    openapiFields.add("securityRoles");
    openapiFields.add("shouldEnterCondition");
    openapiFields.add("staffFeatures");
    openapiFields.add("staffRoles");
    openapiFields.add("token");
    openapiFields.add("user");
    openapiFields.add("userFeatures");
    openapiFields.add("userGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserToken is not found in the empty JSON string", UserToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("auditActions") != null && !jsonObj.get("auditActions").isJsonNull() && !jsonObj.get("auditActions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auditActions` to be an array in the JSON string but got `%s`", jsonObj.get("auditActions").toString()));
      }
      if (jsonObj.get("externalStandards") != null && !jsonObj.get("externalStandards").isJsonNull()) {
        JsonArray jsonArrayexternalStandards = jsonObj.getAsJsonArray("externalStandards");
        if (jsonArrayexternalStandards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalStandards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalStandards` to be an array in the JSON string but got `%s`", jsonObj.get("externalStandards").toString()));
          }

          // validate the optional field `externalStandards` (array)
          for (int i = 0; i < jsonArrayexternalStandards.size(); i++) {
            ExternalStandard.validateJsonElement(jsonArrayexternalStandards.get(i));
          };
        }
      }
      if (jsonObj.get("groupFeatures") != null && !jsonObj.get("groupFeatures").isJsonNull()) {
        JsonArray jsonArraygroupFeatures = jsonObj.getAsJsonArray("groupFeatures");
        if (jsonArraygroupFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("groupFeatures").toString()));
          }

          // validate the optional field `groupFeatures` (array)
          for (int i = 0; i < jsonArraygroupFeatures.size(); i++) {
            Feature.validateJsonElement(jsonArraygroupFeatures.get(i));
          };
        }
      }
      if (jsonObj.get("patientFeatures") != null && !jsonObj.get("patientFeatures").isJsonNull()) {
        JsonArray jsonArraypatientFeatures = jsonObj.getAsJsonArray("patientFeatures");
        if (jsonArraypatientFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("patientFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `patientFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("patientFeatures").toString()));
          }

          // validate the optional field `patientFeatures` (array)
          for (int i = 0; i < jsonArraypatientFeatures.size(); i++) {
            Feature.validateJsonElement(jsonArraypatientFeatures.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("patientMessagingFeatureTypes") != null && !jsonObj.get("patientMessagingFeatureTypes").isJsonNull() && !jsonObj.get("patientMessagingFeatureTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `patientMessagingFeatureTypes` to be an array in the JSON string but got `%s`", jsonObj.get("patientMessagingFeatureTypes").toString()));
      }
      if (jsonObj.get("patientRoles") != null && !jsonObj.get("patientRoles").isJsonNull()) {
        JsonArray jsonArraypatientRoles = jsonObj.getAsJsonArray("patientRoles");
        if (jsonArraypatientRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("patientRoles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `patientRoles` to be an array in the JSON string but got `%s`", jsonObj.get("patientRoles").toString()));
          }

          // validate the optional field `patientRoles` (array)
          for (int i = 0; i < jsonArraypatientRoles.size(); i++) {
            Role.validateJsonElement(jsonArraypatientRoles.get(i));
          };
        }
      }
      if (jsonObj.get("routes") != null && !jsonObj.get("routes").isJsonNull()) {
        JsonArray jsonArrayroutes = jsonObj.getAsJsonArray("routes");
        if (jsonArrayroutes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("routes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `routes` to be an array in the JSON string but got `%s`", jsonObj.get("routes").toString()));
          }

          // validate the optional field `routes` (array)
          for (int i = 0; i < jsonArrayroutes.size(); i++) {
            Route.validateJsonElement(jsonArrayroutes.get(i));
          };
        }
      }
      if ((jsonObj.get("secretWord") != null && !jsonObj.get("secretWord").isJsonNull()) && !jsonObj.get("secretWord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretWord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretWord").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secretWordIndexes") != null && !jsonObj.get("secretWordIndexes").isJsonNull() && !jsonObj.get("secretWordIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretWordIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("secretWordIndexes").toString()));
      }
      if ((jsonObj.get("secretWordSalt") != null && !jsonObj.get("secretWordSalt").isJsonNull()) && !jsonObj.get("secretWordSalt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretWordSalt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretWordSalt").toString()));
      }
      if ((jsonObj.get("secretWordToken") != null && !jsonObj.get("secretWordToken").isJsonNull()) && !jsonObj.get("secretWordToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretWordToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretWordToken").toString()));
      }
      if (jsonObj.get("securityRoles") != null && !jsonObj.get("securityRoles").isJsonNull()) {
        JsonArray jsonArraysecurityRoles = jsonObj.getAsJsonArray("securityRoles");
        if (jsonArraysecurityRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("securityRoles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `securityRoles` to be an array in the JSON string but got `%s`", jsonObj.get("securityRoles").toString()));
          }

          // validate the optional field `securityRoles` (array)
          for (int i = 0; i < jsonArraysecurityRoles.size(); i++) {
            Role.validateJsonElement(jsonArraysecurityRoles.get(i));
          };
        }
      }
      if (jsonObj.get("staffFeatures") != null && !jsonObj.get("staffFeatures").isJsonNull()) {
        JsonArray jsonArraystaffFeatures = jsonObj.getAsJsonArray("staffFeatures");
        if (jsonArraystaffFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("staffFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `staffFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("staffFeatures").toString()));
          }

          // validate the optional field `staffFeatures` (array)
          for (int i = 0; i < jsonArraystaffFeatures.size(); i++) {
            Feature.validateJsonElement(jsonArraystaffFeatures.get(i));
          };
        }
      }
      if (jsonObj.get("staffRoles") != null && !jsonObj.get("staffRoles").isJsonNull()) {
        JsonArray jsonArraystaffRoles = jsonObj.getAsJsonArray("staffRoles");
        if (jsonArraystaffRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("staffRoles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `staffRoles` to be an array in the JSON string but got `%s`", jsonObj.get("staffRoles").toString()));
          }

          // validate the optional field `staffRoles` (array)
          for (int i = 0; i < jsonArraystaffRoles.size(); i++) {
            Role.validateJsonElement(jsonArraystaffRoles.get(i));
          };
        }
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
      if (jsonObj.get("userFeatures") != null && !jsonObj.get("userFeatures").isJsonNull()) {
        JsonArray jsonArrayuserFeatures = jsonObj.getAsJsonArray("userFeatures");
        if (jsonArrayuserFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("userFeatures").toString()));
          }

          // validate the optional field `userFeatures` (array)
          for (int i = 0; i < jsonArrayuserFeatures.size(); i++) {
            Feature.validateJsonElement(jsonArrayuserFeatures.get(i));
          };
        }
      }
      if (jsonObj.get("userGroups") != null && !jsonObj.get("userGroups").isJsonNull()) {
        JsonArray jsonArrayuserGroups = jsonObj.getAsJsonArray("userGroups");
        if (jsonArrayuserGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userGroups` to be an array in the JSON string but got `%s`", jsonObj.get("userGroups").toString()));
          }

          // validate the optional field `userGroups` (array)
          for (int i = 0; i < jsonArrayuserGroups.size(); i++) {
            BaseGroup.validateJsonElement(jsonArrayuserGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserToken.class));

       return (TypeAdapter<T>) new TypeAdapter<UserToken>() {
           @Override
           public void write(JsonWriter out, UserToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserToken
   * @throws IOException if the JSON string is invalid with respect to UserToken
   */
  public static UserToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserToken.class);
  }

  /**
   * Convert an instance of UserToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

