/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Lookup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BaseGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseGroup {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private Lookup groupType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LAST_IMPORT_DATE = "lastImportDate";
  @SerializedName(SERIALIZED_NAME_LAST_IMPORT_DATE)
  private OffsetDateTime lastImportDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_CODES = "parentCodes";
  @SerializedName(SERIALIZED_NAME_PARENT_CODES)
  private List<String> parentCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHORT_NAME = "shortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public static final String SERIALIZED_NAME_VISIBLE_TO_JOIN = "visibleToJoin";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO_JOIN)
  private Boolean visibleToJoin;

  public BaseGroup() {
  }

  public BaseGroup code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public BaseGroup groupType(Lookup groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Get groupType
   * @return groupType
   */
  @javax.annotation.Nullable
  public Lookup getGroupType() {
    return groupType;
  }

  public void setGroupType(Lookup groupType) {
    this.groupType = groupType;
  }


  public BaseGroup id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public BaseGroup lastImportDate(OffsetDateTime lastImportDate) {
    this.lastImportDate = lastImportDate;
    return this;
  }

  /**
   * Get lastImportDate
   * @return lastImportDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastImportDate() {
    return lastImportDate;
  }

  public void setLastImportDate(OffsetDateTime lastImportDate) {
    this.lastImportDate = lastImportDate;
  }


  public BaseGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BaseGroup parentCodes(List<String> parentCodes) {
    this.parentCodes = parentCodes;
    return this;
  }

  public BaseGroup addParentCodesItem(String parentCodesItem) {
    if (this.parentCodes == null) {
      this.parentCodes = new ArrayList<>();
    }
    this.parentCodes.add(parentCodesItem);
    return this;
  }

  /**
   * Get parentCodes
   * @return parentCodes
   */
  @javax.annotation.Nullable
  public List<String> getParentCodes() {
    return parentCodes;
  }

  public void setParentCodes(List<String> parentCodes) {
    this.parentCodes = parentCodes;
  }


  public BaseGroup shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public BaseGroup visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Get visible
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public BaseGroup visibleToJoin(Boolean visibleToJoin) {
    this.visibleToJoin = visibleToJoin;
    return this;
  }

  /**
   * Get visibleToJoin
   * @return visibleToJoin
   */
  @javax.annotation.Nullable
  public Boolean getVisibleToJoin() {
    return visibleToJoin;
  }

  public void setVisibleToJoin(Boolean visibleToJoin) {
    this.visibleToJoin = visibleToJoin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseGroup baseGroup = (BaseGroup) o;
    return Objects.equals(this.code, baseGroup.code) &&
        Objects.equals(this.groupType, baseGroup.groupType) &&
        Objects.equals(this.id, baseGroup.id) &&
        Objects.equals(this.lastImportDate, baseGroup.lastImportDate) &&
        Objects.equals(this.name, baseGroup.name) &&
        Objects.equals(this.parentCodes, baseGroup.parentCodes) &&
        Objects.equals(this.shortName, baseGroup.shortName) &&
        Objects.equals(this.visible, baseGroup.visible) &&
        Objects.equals(this.visibleToJoin, baseGroup.visibleToJoin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, groupType, id, lastImportDate, name, parentCodes, shortName, visible, visibleToJoin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseGroup {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastImportDate: ").append(toIndentedString(lastImportDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentCodes: ").append(toIndentedString(parentCodes)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    visibleToJoin: ").append(toIndentedString(visibleToJoin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("groupType");
    openapiFields.add("id");
    openapiFields.add("lastImportDate");
    openapiFields.add("name");
    openapiFields.add("parentCodes");
    openapiFields.add("shortName");
    openapiFields.add("visible");
    openapiFields.add("visibleToJoin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseGroup is not found in the empty JSON string", BaseGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BaseGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaseGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `groupType`
      if (jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) {
        Lookup.validateJsonElement(jsonObj.get("groupType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentCodes") != null && !jsonObj.get("parentCodes").isJsonNull() && !jsonObj.get("parentCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentCodes` to be an array in the JSON string but got `%s`", jsonObj.get("parentCodes").toString()));
      }
      if ((jsonObj.get("shortName") != null && !jsonObj.get("shortName").isJsonNull()) && !jsonObj.get("shortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseGroup>() {
           @Override
           public void write(JsonWriter out, BaseGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BaseGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseGroup
   * @throws IOException if the JSON string is invalid with respect to BaseGroup
   */
  public static BaseGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseGroup.class);
  }

  /**
   * Convert an instance of BaseGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

