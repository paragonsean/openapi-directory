/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.ApiKey;
import org.openapitools.client.model.BaseGroup;
import org.openapitools.client.model.GroupRole;
import org.openapitools.client.model.UserFeature;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_API_KEY = "apiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private ApiKey apiKey;

  public static final String SERIALIZED_NAME_CAN_SWITCH_USER = "canSwitchUser";
  @SerializedName(SERIALIZED_NAME_CAN_SWITCH_USER)
  private Boolean canSwitchUser;

  public static final String SERIALIZED_NAME_CHANGE_PASSWORD = "changePassword";
  @SerializedName(SERIALIZED_NAME_CHANGE_PASSWORD)
  private Boolean changePassword;

  public static final String SERIALIZED_NAME_CONTACT_NUMBER = "contactNumber";
  @SerializedName(SERIALIZED_NAME_CONTACT_NUMBER)
  private String contactNumber;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CURRENT_LOGIN = "currentLogin";
  @SerializedName(SERIALIZED_NAME_CURRENT_LOGIN)
  private OffsetDateTime currentLogin;

  public static final String SERIALIZED_NAME_CURRENT_LOGIN_IP_ADDRESS = "currentLoginIpAddress";
  @SerializedName(SERIALIZED_NAME_CURRENT_LOGIN_IP_ADDRESS)
  private String currentLoginIpAddress;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DUMMY = "dummy";
  @SerializedName(SERIALIZED_NAME_DUMMY)
  private Boolean dummy;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "emailVerified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_FORENAME = "forename";
  @SerializedName(SERIALIZED_NAME_FORENAME)
  private String forename;

  public static final String SERIALIZED_NAME_GROUP_ROLES = "groupRoles";
  @SerializedName(SERIALIZED_NAME_GROUP_ROLES)
  private Set<GroupRole> groupRoles = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_HIDE_SECRET_WORD_NOTIFICATION = "hideSecretWordNotification";
  @SerializedName(SERIALIZED_NAME_HIDE_SECRET_WORD_NOTIFICATION)
  private Boolean hideSecretWordNotification;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Set<Object> identifiers = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LAST_LOGIN = "lastLogin";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private OffsetDateTime lastLogin;

  public static final String SERIALIZED_NAME_LAST_LOGIN_IP_ADDRESS = "lastLoginIpAddress";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_IP_ADDRESS)
  private String lastLoginIpAddress;

  public static final String SERIALIZED_NAME_LATEST_DATA_RECEIVED_BY = "latestDataReceivedBy";
  @SerializedName(SERIALIZED_NAME_LATEST_DATA_RECEIVED_BY)
  private BaseGroup latestDataReceivedBy;

  public static final String SERIALIZED_NAME_LATEST_DATA_RECEIVED_DATE = "latestDataReceivedDate";
  @SerializedName(SERIALIZED_NAME_LATEST_DATA_RECEIVED_DATE)
  private OffsetDateTime latestDataReceivedDate;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private String picture;

  public static final String SERIALIZED_NAME_ROLE_DESCRIPTION = "roleDescription";
  @SerializedName(SERIALIZED_NAME_ROLE_DESCRIPTION)
  private String roleDescription;

  public static final String SERIALIZED_NAME_SECRET_WORD_IS_SET = "secretWordIsSet";
  @SerializedName(SERIALIZED_NAME_SECRET_WORD_IS_SET)
  private Boolean secretWordIsSet;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public static final String SERIALIZED_NAME_USER_FEATURES = "userFeatures";
  @SerializedName(SERIALIZED_NAME_USER_FEATURES)
  private Set<UserFeature> userFeatures = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public User() {
  }

  public User apiKey(ApiKey apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Get apiKey
   * @return apiKey
   */
  @javax.annotation.Nullable
  public ApiKey getApiKey() {
    return apiKey;
  }

  public void setApiKey(ApiKey apiKey) {
    this.apiKey = apiKey;
  }


  public User canSwitchUser(Boolean canSwitchUser) {
    this.canSwitchUser = canSwitchUser;
    return this;
  }

  /**
   * Get canSwitchUser
   * @return canSwitchUser
   */
  @javax.annotation.Nullable
  public Boolean getCanSwitchUser() {
    return canSwitchUser;
  }

  public void setCanSwitchUser(Boolean canSwitchUser) {
    this.canSwitchUser = canSwitchUser;
  }


  public User changePassword(Boolean changePassword) {
    this.changePassword = changePassword;
    return this;
  }

  /**
   * Get changePassword
   * @return changePassword
   */
  @javax.annotation.Nullable
  public Boolean getChangePassword() {
    return changePassword;
  }

  public void setChangePassword(Boolean changePassword) {
    this.changePassword = changePassword;
  }


  public User contactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
    return this;
  }

  /**
   * Get contactNumber
   * @return contactNumber
   */
  @javax.annotation.Nullable
  public String getContactNumber() {
    return contactNumber;
  }

  public void setContactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
  }


  public User created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public User currentLogin(OffsetDateTime currentLogin) {
    this.currentLogin = currentLogin;
    return this;
  }

  /**
   * Get currentLogin
   * @return currentLogin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCurrentLogin() {
    return currentLogin;
  }

  public void setCurrentLogin(OffsetDateTime currentLogin) {
    this.currentLogin = currentLogin;
  }


  public User currentLoginIpAddress(String currentLoginIpAddress) {
    this.currentLoginIpAddress = currentLoginIpAddress;
    return this;
  }

  /**
   * Get currentLoginIpAddress
   * @return currentLoginIpAddress
   */
  @javax.annotation.Nullable
  public String getCurrentLoginIpAddress() {
    return currentLoginIpAddress;
  }

  public void setCurrentLoginIpAddress(String currentLoginIpAddress) {
    this.currentLoginIpAddress = currentLoginIpAddress;
  }


  public User dateOfBirth(OffsetDateTime dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Get dateOfBirth
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public User deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public User dummy(Boolean dummy) {
    this.dummy = dummy;
    return this;
  }

  /**
   * Get dummy
   * @return dummy
   */
  @javax.annotation.Nullable
  public Boolean getDummy() {
    return dummy;
  }

  public void setDummy(Boolean dummy) {
    this.dummy = dummy;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public User emailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

  /**
   * Get emailVerified
   * @return emailVerified
   */
  @javax.annotation.Nullable
  public Boolean getEmailVerified() {
    return emailVerified;
  }

  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }


  public User forename(String forename) {
    this.forename = forename;
    return this;
  }

  /**
   * Get forename
   * @return forename
   */
  @javax.annotation.Nullable
  public String getForename() {
    return forename;
  }

  public void setForename(String forename) {
    this.forename = forename;
  }


  public User groupRoles(Set<GroupRole> groupRoles) {
    this.groupRoles = groupRoles;
    return this;
  }

  public User addGroupRolesItem(GroupRole groupRolesItem) {
    if (this.groupRoles == null) {
      this.groupRoles = new LinkedHashSet<>();
    }
    this.groupRoles.add(groupRolesItem);
    return this;
  }

  /**
   * Get groupRoles
   * @return groupRoles
   */
  @javax.annotation.Nullable
  public Set<GroupRole> getGroupRoles() {
    return groupRoles;
  }

  public void setGroupRoles(Set<GroupRole> groupRoles) {
    this.groupRoles = groupRoles;
  }


  public User hideSecretWordNotification(Boolean hideSecretWordNotification) {
    this.hideSecretWordNotification = hideSecretWordNotification;
    return this;
  }

  /**
   * Get hideSecretWordNotification
   * @return hideSecretWordNotification
   */
  @javax.annotation.Nullable
  public Boolean getHideSecretWordNotification() {
    return hideSecretWordNotification;
  }

  public void setHideSecretWordNotification(Boolean hideSecretWordNotification) {
    this.hideSecretWordNotification = hideSecretWordNotification;
  }


  public User id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public User identifiers(Set<Object> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public User addIdentifiersItem(Object identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new LinkedHashSet<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @javax.annotation.Nullable
  public Set<Object> getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Set<Object> identifiers) {
    this.identifiers = identifiers;
  }


  public User lastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

  /**
   * Get lastLogin
   * @return lastLogin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }

  public void setLastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
  }


  public User lastLoginIpAddress(String lastLoginIpAddress) {
    this.lastLoginIpAddress = lastLoginIpAddress;
    return this;
  }

  /**
   * Get lastLoginIpAddress
   * @return lastLoginIpAddress
   */
  @javax.annotation.Nullable
  public String getLastLoginIpAddress() {
    return lastLoginIpAddress;
  }

  public void setLastLoginIpAddress(String lastLoginIpAddress) {
    this.lastLoginIpAddress = lastLoginIpAddress;
  }


  public User latestDataReceivedBy(BaseGroup latestDataReceivedBy) {
    this.latestDataReceivedBy = latestDataReceivedBy;
    return this;
  }

  /**
   * Get latestDataReceivedBy
   * @return latestDataReceivedBy
   */
  @javax.annotation.Nullable
  public BaseGroup getLatestDataReceivedBy() {
    return latestDataReceivedBy;
  }

  public void setLatestDataReceivedBy(BaseGroup latestDataReceivedBy) {
    this.latestDataReceivedBy = latestDataReceivedBy;
  }


  public User latestDataReceivedDate(OffsetDateTime latestDataReceivedDate) {
    this.latestDataReceivedDate = latestDataReceivedDate;
    return this;
  }

  /**
   * Get latestDataReceivedDate
   * @return latestDataReceivedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestDataReceivedDate() {
    return latestDataReceivedDate;
  }

  public void setLatestDataReceivedDate(OffsetDateTime latestDataReceivedDate) {
    this.latestDataReceivedDate = latestDataReceivedDate;
  }


  public User locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public User picture(String picture) {
    this.picture = picture;
    return this;
  }

  /**
   * Get picture
   * @return picture
   */
  @javax.annotation.Nullable
  public String getPicture() {
    return picture;
  }

  public void setPicture(String picture) {
    this.picture = picture;
  }


  public User roleDescription(String roleDescription) {
    this.roleDescription = roleDescription;
    return this;
  }

  /**
   * Get roleDescription
   * @return roleDescription
   */
  @javax.annotation.Nullable
  public String getRoleDescription() {
    return roleDescription;
  }

  public void setRoleDescription(String roleDescription) {
    this.roleDescription = roleDescription;
  }


  public User secretWordIsSet(Boolean secretWordIsSet) {
    this.secretWordIsSet = secretWordIsSet;
    return this;
  }

  /**
   * Get secretWordIsSet
   * @return secretWordIsSet
   */
  @javax.annotation.Nullable
  public Boolean getSecretWordIsSet() {
    return secretWordIsSet;
  }

  public void setSecretWordIsSet(Boolean secretWordIsSet) {
    this.secretWordIsSet = secretWordIsSet;
  }


  public User surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * Get surname
   * @return surname
   */
  @javax.annotation.Nullable
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }


  public User userFeatures(Set<UserFeature> userFeatures) {
    this.userFeatures = userFeatures;
    return this;
  }

  public User addUserFeaturesItem(UserFeature userFeaturesItem) {
    if (this.userFeatures == null) {
      this.userFeatures = new LinkedHashSet<>();
    }
    this.userFeatures.add(userFeaturesItem);
    return this;
  }

  /**
   * Get userFeatures
   * @return userFeatures
   */
  @javax.annotation.Nullable
  public Set<UserFeature> getUserFeatures() {
    return userFeatures;
  }

  public void setUserFeatures(Set<UserFeature> userFeatures) {
    this.userFeatures = userFeatures;
  }


  public User username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.apiKey, user.apiKey) &&
        Objects.equals(this.canSwitchUser, user.canSwitchUser) &&
        Objects.equals(this.changePassword, user.changePassword) &&
        Objects.equals(this.contactNumber, user.contactNumber) &&
        Objects.equals(this.created, user.created) &&
        Objects.equals(this.currentLogin, user.currentLogin) &&
        Objects.equals(this.currentLoginIpAddress, user.currentLoginIpAddress) &&
        Objects.equals(this.dateOfBirth, user.dateOfBirth) &&
        Objects.equals(this.deleted, user.deleted) &&
        Objects.equals(this.dummy, user.dummy) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.emailVerified, user.emailVerified) &&
        Objects.equals(this.forename, user.forename) &&
        Objects.equals(this.groupRoles, user.groupRoles) &&
        Objects.equals(this.hideSecretWordNotification, user.hideSecretWordNotification) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.identifiers, user.identifiers) &&
        Objects.equals(this.lastLogin, user.lastLogin) &&
        Objects.equals(this.lastLoginIpAddress, user.lastLoginIpAddress) &&
        Objects.equals(this.latestDataReceivedBy, user.latestDataReceivedBy) &&
        Objects.equals(this.latestDataReceivedDate, user.latestDataReceivedDate) &&
        Objects.equals(this.locked, user.locked) &&
        Objects.equals(this.picture, user.picture) &&
        Objects.equals(this.roleDescription, user.roleDescription) &&
        Objects.equals(this.secretWordIsSet, user.secretWordIsSet) &&
        Objects.equals(this.surname, user.surname) &&
        Objects.equals(this.userFeatures, user.userFeatures) &&
        Objects.equals(this.username, user.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, canSwitchUser, changePassword, contactNumber, created, currentLogin, currentLoginIpAddress, dateOfBirth, deleted, dummy, email, emailVerified, forename, groupRoles, hideSecretWordNotification, id, identifiers, lastLogin, lastLoginIpAddress, latestDataReceivedBy, latestDataReceivedDate, locked, picture, roleDescription, secretWordIsSet, surname, userFeatures, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    canSwitchUser: ").append(toIndentedString(canSwitchUser)).append("\n");
    sb.append("    changePassword: ").append(toIndentedString(changePassword)).append("\n");
    sb.append("    contactNumber: ").append(toIndentedString(contactNumber)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currentLogin: ").append(toIndentedString(currentLogin)).append("\n");
    sb.append("    currentLoginIpAddress: ").append(toIndentedString(currentLoginIpAddress)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    dummy: ").append(toIndentedString(dummy)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    forename: ").append(toIndentedString(forename)).append("\n");
    sb.append("    groupRoles: ").append(toIndentedString(groupRoles)).append("\n");
    sb.append("    hideSecretWordNotification: ").append(toIndentedString(hideSecretWordNotification)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    lastLoginIpAddress: ").append(toIndentedString(lastLoginIpAddress)).append("\n");
    sb.append("    latestDataReceivedBy: ").append(toIndentedString(latestDataReceivedBy)).append("\n");
    sb.append("    latestDataReceivedDate: ").append(toIndentedString(latestDataReceivedDate)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    roleDescription: ").append(toIndentedString(roleDescription)).append("\n");
    sb.append("    secretWordIsSet: ").append(toIndentedString(secretWordIsSet)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    userFeatures: ").append(toIndentedString(userFeatures)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKey");
    openapiFields.add("canSwitchUser");
    openapiFields.add("changePassword");
    openapiFields.add("contactNumber");
    openapiFields.add("created");
    openapiFields.add("currentLogin");
    openapiFields.add("currentLoginIpAddress");
    openapiFields.add("dateOfBirth");
    openapiFields.add("deleted");
    openapiFields.add("dummy");
    openapiFields.add("email");
    openapiFields.add("emailVerified");
    openapiFields.add("forename");
    openapiFields.add("groupRoles");
    openapiFields.add("hideSecretWordNotification");
    openapiFields.add("id");
    openapiFields.add("identifiers");
    openapiFields.add("lastLogin");
    openapiFields.add("lastLoginIpAddress");
    openapiFields.add("latestDataReceivedBy");
    openapiFields.add("latestDataReceivedDate");
    openapiFields.add("locked");
    openapiFields.add("picture");
    openapiFields.add("roleDescription");
    openapiFields.add("secretWordIsSet");
    openapiFields.add("surname");
    openapiFields.add("userFeatures");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apiKey`
      if (jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull()) {
        ApiKey.validateJsonElement(jsonObj.get("apiKey"));
      }
      if ((jsonObj.get("contactNumber") != null && !jsonObj.get("contactNumber").isJsonNull()) && !jsonObj.get("contactNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactNumber").toString()));
      }
      if ((jsonObj.get("currentLoginIpAddress") != null && !jsonObj.get("currentLoginIpAddress").isJsonNull()) && !jsonObj.get("currentLoginIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentLoginIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentLoginIpAddress").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("forename") != null && !jsonObj.get("forename").isJsonNull()) && !jsonObj.get("forename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forename").toString()));
      }
      if (jsonObj.get("groupRoles") != null && !jsonObj.get("groupRoles").isJsonNull()) {
        JsonArray jsonArraygroupRoles = jsonObj.getAsJsonArray("groupRoles");
        if (jsonArraygroupRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupRoles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupRoles` to be an array in the JSON string but got `%s`", jsonObj.get("groupRoles").toString()));
          }

          // validate the optional field `groupRoles` (array)
          for (int i = 0; i < jsonArraygroupRoles.size(); i++) {
            GroupRole.validateJsonElement(jsonArraygroupRoles.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull() && !jsonObj.get("identifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
      }
      if ((jsonObj.get("lastLoginIpAddress") != null && !jsonObj.get("lastLoginIpAddress").isJsonNull()) && !jsonObj.get("lastLoginIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLoginIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLoginIpAddress").toString()));
      }
      // validate the optional field `latestDataReceivedBy`
      if (jsonObj.get("latestDataReceivedBy") != null && !jsonObj.get("latestDataReceivedBy").isJsonNull()) {
        BaseGroup.validateJsonElement(jsonObj.get("latestDataReceivedBy"));
      }
      if ((jsonObj.get("picture") != null && !jsonObj.get("picture").isJsonNull()) && !jsonObj.get("picture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture").toString()));
      }
      if ((jsonObj.get("roleDescription") != null && !jsonObj.get("roleDescription").isJsonNull()) && !jsonObj.get("roleDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleDescription").toString()));
      }
      if ((jsonObj.get("surname") != null && !jsonObj.get("surname").isJsonNull()) && !jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
      if (jsonObj.get("userFeatures") != null && !jsonObj.get("userFeatures").isJsonNull()) {
        JsonArray jsonArrayuserFeatures = jsonObj.getAsJsonArray("userFeatures");
        if (jsonArrayuserFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("userFeatures").toString()));
          }

          // validate the optional field `userFeatures` (array)
          for (int i = 0; i < jsonArrayuserFeatures.size(); i++) {
            UserFeature.validateJsonElement(jsonArrayuserFeatures.get(i));
          };
        }
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

