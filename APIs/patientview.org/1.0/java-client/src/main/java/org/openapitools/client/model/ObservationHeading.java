/*
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.ObservationHeadingGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ObservationHeading
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:14.724842-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObservationHeading {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DECIMAL_PLACES = "decimalPlaces";
  @SerializedName(SERIALIZED_NAME_DECIMAL_PLACES)
  private Long decimalPlaces;

  public static final String SERIALIZED_NAME_DEFAULT_PANEL = "defaultPanel";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PANEL)
  private Long defaultPanel;

  public static final String SERIALIZED_NAME_DEFAULT_PANEL_ORDER = "defaultPanelOrder";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PANEL_ORDER)
  private Long defaultPanelOrder;

  public static final String SERIALIZED_NAME_HEADING = "heading";
  @SerializedName(SERIALIZED_NAME_HEADING)
  private String heading;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INFO_LINK = "infoLink";
  @SerializedName(SERIALIZED_NAME_INFO_LINK)
  private String infoLink;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_MAX_GRAPH = "maxGraph";
  @SerializedName(SERIALIZED_NAME_MAX_GRAPH)
  private Double maxGraph;

  public static final String SERIALIZED_NAME_MIN_GRAPH = "minGraph";
  @SerializedName(SERIALIZED_NAME_MIN_GRAPH)
  private Double minGraph;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORMAL_RANGE = "normalRange";
  @SerializedName(SERIALIZED_NAME_NORMAL_RANGE)
  private String normalRange;

  public static final String SERIALIZED_NAME_OBSERVATION_HEADING_GROUPS = "observationHeadingGroups";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_HEADING_GROUPS)
  private Set<ObservationHeadingGroup> observationHeadingGroups = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public ObservationHeading() {
  }

  public ObservationHeading code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ObservationHeading created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ObservationHeading decimalPlaces(Long decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
    return this;
  }

  /**
   * Get decimalPlaces
   * @return decimalPlaces
   */
  @javax.annotation.Nullable
  public Long getDecimalPlaces() {
    return decimalPlaces;
  }

  public void setDecimalPlaces(Long decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }


  public ObservationHeading defaultPanel(Long defaultPanel) {
    this.defaultPanel = defaultPanel;
    return this;
  }

  /**
   * Get defaultPanel
   * @return defaultPanel
   */
  @javax.annotation.Nullable
  public Long getDefaultPanel() {
    return defaultPanel;
  }

  public void setDefaultPanel(Long defaultPanel) {
    this.defaultPanel = defaultPanel;
  }


  public ObservationHeading defaultPanelOrder(Long defaultPanelOrder) {
    this.defaultPanelOrder = defaultPanelOrder;
    return this;
  }

  /**
   * Get defaultPanelOrder
   * @return defaultPanelOrder
   */
  @javax.annotation.Nullable
  public Long getDefaultPanelOrder() {
    return defaultPanelOrder;
  }

  public void setDefaultPanelOrder(Long defaultPanelOrder) {
    this.defaultPanelOrder = defaultPanelOrder;
  }


  public ObservationHeading heading(String heading) {
    this.heading = heading;
    return this;
  }

  /**
   * Get heading
   * @return heading
   */
  @javax.annotation.Nullable
  public String getHeading() {
    return heading;
  }

  public void setHeading(String heading) {
    this.heading = heading;
  }


  public ObservationHeading id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ObservationHeading infoLink(String infoLink) {
    this.infoLink = infoLink;
    return this;
  }

  /**
   * Get infoLink
   * @return infoLink
   */
  @javax.annotation.Nullable
  public String getInfoLink() {
    return infoLink;
  }

  public void setInfoLink(String infoLink) {
    this.infoLink = infoLink;
  }


  public ObservationHeading lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public ObservationHeading maxGraph(Double maxGraph) {
    this.maxGraph = maxGraph;
    return this;
  }

  /**
   * Get maxGraph
   * @return maxGraph
   */
  @javax.annotation.Nullable
  public Double getMaxGraph() {
    return maxGraph;
  }

  public void setMaxGraph(Double maxGraph) {
    this.maxGraph = maxGraph;
  }


  public ObservationHeading minGraph(Double minGraph) {
    this.minGraph = minGraph;
    return this;
  }

  /**
   * Get minGraph
   * @return minGraph
   */
  @javax.annotation.Nullable
  public Double getMinGraph() {
    return minGraph;
  }

  public void setMinGraph(Double minGraph) {
    this.minGraph = minGraph;
  }


  public ObservationHeading name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ObservationHeading normalRange(String normalRange) {
    this.normalRange = normalRange;
    return this;
  }

  /**
   * Get normalRange
   * @return normalRange
   */
  @javax.annotation.Nullable
  public String getNormalRange() {
    return normalRange;
  }

  public void setNormalRange(String normalRange) {
    this.normalRange = normalRange;
  }


  public ObservationHeading observationHeadingGroups(Set<ObservationHeadingGroup> observationHeadingGroups) {
    this.observationHeadingGroups = observationHeadingGroups;
    return this;
  }

  public ObservationHeading addObservationHeadingGroupsItem(ObservationHeadingGroup observationHeadingGroupsItem) {
    if (this.observationHeadingGroups == null) {
      this.observationHeadingGroups = new LinkedHashSet<>();
    }
    this.observationHeadingGroups.add(observationHeadingGroupsItem);
    return this;
  }

  /**
   * Get observationHeadingGroups
   * @return observationHeadingGroups
   */
  @javax.annotation.Nullable
  public Set<ObservationHeadingGroup> getObservationHeadingGroups() {
    return observationHeadingGroups;
  }

  public void setObservationHeadingGroups(Set<ObservationHeadingGroup> observationHeadingGroups) {
    this.observationHeadingGroups = observationHeadingGroups;
  }


  public ObservationHeading units(String units) {
    this.units = units;
    return this;
  }

  /**
   * Get units
   * @return units
   */
  @javax.annotation.Nullable
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObservationHeading observationHeading = (ObservationHeading) o;
    return Objects.equals(this.code, observationHeading.code) &&
        Objects.equals(this.created, observationHeading.created) &&
        Objects.equals(this.decimalPlaces, observationHeading.decimalPlaces) &&
        Objects.equals(this.defaultPanel, observationHeading.defaultPanel) &&
        Objects.equals(this.defaultPanelOrder, observationHeading.defaultPanelOrder) &&
        Objects.equals(this.heading, observationHeading.heading) &&
        Objects.equals(this.id, observationHeading.id) &&
        Objects.equals(this.infoLink, observationHeading.infoLink) &&
        Objects.equals(this.lastUpdate, observationHeading.lastUpdate) &&
        Objects.equals(this.maxGraph, observationHeading.maxGraph) &&
        Objects.equals(this.minGraph, observationHeading.minGraph) &&
        Objects.equals(this.name, observationHeading.name) &&
        Objects.equals(this.normalRange, observationHeading.normalRange) &&
        Objects.equals(this.observationHeadingGroups, observationHeading.observationHeadingGroups) &&
        Objects.equals(this.units, observationHeading.units);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, created, decimalPlaces, defaultPanel, defaultPanelOrder, heading, id, infoLink, lastUpdate, maxGraph, minGraph, name, normalRange, observationHeadingGroups, units);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObservationHeading {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("    defaultPanel: ").append(toIndentedString(defaultPanel)).append("\n");
    sb.append("    defaultPanelOrder: ").append(toIndentedString(defaultPanelOrder)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    infoLink: ").append(toIndentedString(infoLink)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    maxGraph: ").append(toIndentedString(maxGraph)).append("\n");
    sb.append("    minGraph: ").append(toIndentedString(minGraph)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    normalRange: ").append(toIndentedString(normalRange)).append("\n");
    sb.append("    observationHeadingGroups: ").append(toIndentedString(observationHeadingGroups)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("created");
    openapiFields.add("decimalPlaces");
    openapiFields.add("defaultPanel");
    openapiFields.add("defaultPanelOrder");
    openapiFields.add("heading");
    openapiFields.add("id");
    openapiFields.add("infoLink");
    openapiFields.add("lastUpdate");
    openapiFields.add("maxGraph");
    openapiFields.add("minGraph");
    openapiFields.add("name");
    openapiFields.add("normalRange");
    openapiFields.add("observationHeadingGroups");
    openapiFields.add("units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObservationHeading
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObservationHeading.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObservationHeading is not found in the empty JSON string", ObservationHeading.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObservationHeading.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObservationHeading` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("heading") != null && !jsonObj.get("heading").isJsonNull()) && !jsonObj.get("heading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heading").toString()));
      }
      if ((jsonObj.get("infoLink") != null && !jsonObj.get("infoLink").isJsonNull()) && !jsonObj.get("infoLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infoLink").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("normalRange") != null && !jsonObj.get("normalRange").isJsonNull()) && !jsonObj.get("normalRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalRange").toString()));
      }
      if (jsonObj.get("observationHeadingGroups") != null && !jsonObj.get("observationHeadingGroups").isJsonNull()) {
        JsonArray jsonArrayobservationHeadingGroups = jsonObj.getAsJsonArray("observationHeadingGroups");
        if (jsonArrayobservationHeadingGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("observationHeadingGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `observationHeadingGroups` to be an array in the JSON string but got `%s`", jsonObj.get("observationHeadingGroups").toString()));
          }

          // validate the optional field `observationHeadingGroups` (array)
          for (int i = 0; i < jsonArrayobservationHeadingGroups.size(); i++) {
            ObservationHeadingGroup.validateJsonElement(jsonArrayobservationHeadingGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObservationHeading.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObservationHeading' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObservationHeading> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObservationHeading.class));

       return (TypeAdapter<T>) new TypeAdapter<ObservationHeading>() {
           @Override
           public void write(JsonWriter out, ObservationHeading value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObservationHeading read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObservationHeading given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObservationHeading
   * @throws IOException if the JSON string is invalid with respect to ObservationHeading
   */
  public static ObservationHeading fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObservationHeading.class);
  }

  /**
   * Convert an instance of ObservationHeading to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

