/*
 * ODWeather
 * This is the api to access the ODWeather API information
 *
 * The version of the OpenAPI document: 1.0
 * Contact: matiasbonet@oceandrivers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OdWeatherApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OdWeatherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OdWeatherApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for compareStation
     * @param stationName Weather station to compare, values: cnareanl|rcnp | cmsap|boyaenderrocat|areopuertopalma | EWXXX (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareStationCall(String stationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/compareStation/{stationName}/"
            .replace("{" + "stationName" + "}", localVarApiClient.escapeString(stationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compareStationValidateBeforeCall(String stationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stationName' is set
        if (stationName == null) {
            throw new ApiException("Missing the required parameter 'stationName' when calling compareStation(Async)");
        }

        return compareStationCall(stationName, _callback);

    }

    /**
     * 
     * Get forecast and realtime information for known points&lt;br/&gt;None
     * @param stationName Weather station to compare, values: cnareanl|rcnp | cmsap|boyaenderrocat|areopuertopalma | EWXXX (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void compareStation(String stationName) throws ApiException {
        compareStationWithHttpInfo(stationName);
    }

    /**
     * 
     * Get forecast and realtime information for known points&lt;br/&gt;None
     * @param stationName Weather station to compare, values: cnareanl|rcnp | cmsap|boyaenderrocat|areopuertopalma | EWXXX (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compareStationWithHttpInfo(String stationName) throws ApiException {
        okhttp3.Call localVarCall = compareStationValidateBeforeCall(stationName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get forecast and realtime information for known points&lt;br/&gt;None
     * @param stationName Weather station to compare, values: cnareanl|rcnp | cmsap|boyaenderrocat|areopuertopalma | EWXXX (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareStationAsync(String stationName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compareStationValidateBeforeCall(stationName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAemetStation
     * @param stationName station name currently: aeropuertopalma | caboblanco  (required)
     * @param period Period of time to get the data. Options: lastdata lastday (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAemetStationCall(String stationName, String period, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/getAemetStation/{stationName}/{period}/"
            .replace("{" + "stationName" + "}", localVarApiClient.escapeString(stationName.toString()))
            .replace("{" + "period" + "}", localVarApiClient.escapeString(period.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAemetStationValidateBeforeCall(String stationName, String period, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stationName' is set
        if (stationName == null) {
            throw new ApiException("Missing the required parameter 'stationName' when calling getAemetStation(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling getAemetStation(Async)");
        }

        return getAemetStationCall(stationName, period, _callback);

    }

    /**
     * 
     * Get data from the aemet stations&lt;br/&gt;None
     * @param stationName station name currently: aeropuertopalma | caboblanco  (required)
     * @param period Period of time to get the data. Options: lastdata lastday (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getAemetStation(String stationName, String period) throws ApiException {
        getAemetStationWithHttpInfo(stationName, period);
    }

    /**
     * 
     * Get data from the aemet stations&lt;br/&gt;None
     * @param stationName station name currently: aeropuertopalma | caboblanco  (required)
     * @param period Period of time to get the data. Options: lastdata lastday (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAemetStationWithHttpInfo(String stationName, String period) throws ApiException {
        okhttp3.Call localVarCall = getAemetStationValidateBeforeCall(stationName, period, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get data from the aemet stations&lt;br/&gt;None
     * @param stationName station name currently: aeropuertopalma | caboblanco  (required)
     * @param period Period of time to get the data. Options: lastdata lastday (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAemetStationAsync(String stationName, String period, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAemetStationValidateBeforeCall(stationName, period, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEasywind
     * @param easywindId currently: &#39;EW013&#39;|&#39;EW008&#39; (required)
     * @param period Period of time to get the data latestdata|latesthour|latestday (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEasywindCall(String easywindId, String period, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/getEasyWind/{easywindId}/"
            .replace("{" + "easywindId" + "}", localVarApiClient.escapeString(easywindId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEasywindValidateBeforeCall(String easywindId, String period, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'easywindId' is set
        if (easywindId == null) {
            throw new ApiException("Missing the required parameter 'easywindId' when calling getEasywind(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling getEasywind(Async)");
        }

        return getEasywindCall(easywindId, period, _callback);

    }

    /**
     * 
     * Get data from the easywind weather stations&lt;br/&gt;None
     * @param easywindId currently: &#39;EW013&#39;|&#39;EW008&#39; (required)
     * @param period Period of time to get the data latestdata|latesthour|latestday (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getEasywind(String easywindId, String period) throws ApiException {
        getEasywindWithHttpInfo(easywindId, period);
    }

    /**
     * 
     * Get data from the easywind weather stations&lt;br/&gt;None
     * @param easywindId currently: &#39;EW013&#39;|&#39;EW008&#39; (required)
     * @param period Period of time to get the data latestdata|latesthour|latestday (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEasywindWithHttpInfo(String easywindId, String period) throws ApiException {
        okhttp3.Call localVarCall = getEasywindValidateBeforeCall(easywindId, period, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get data from the easywind weather stations&lt;br/&gt;None
     * @param easywindId currently: &#39;EW013&#39;|&#39;EW008&#39; (required)
     * @param period Period of time to get the data latestdata|latesthour|latestday (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEasywindAsync(String easywindId, String period, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEasywindValidateBeforeCall(easywindId, period, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventStations
     * @param eventId currently: &#39;trofeoprincesasofia|palmavela&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventStationsCall(String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/getEventStations/{eventId}/"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventStationsValidateBeforeCall(String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventStations(Async)");
        }

        return getEventStationsCall(eventId, _callback);

    }

    /**
     * 
     * Get stations in an event&lt;br/&gt;None
     * @param eventId currently: &#39;trofeoprincesasofia|palmavela&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getEventStations(String eventId) throws ApiException {
        getEventStationsWithHttpInfo(eventId);
    }

    /**
     * 
     * Get stations in an event&lt;br/&gt;None
     * @param eventId currently: &#39;trofeoprincesasofia|palmavela&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEventStationsWithHttpInfo(String eventId) throws ApiException {
        okhttp3.Call localVarCall = getEventStationsValidateBeforeCall(eventId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get stations in an event&lt;br/&gt;None
     * @param eventId currently: &#39;trofeoprincesasofia|palmavela&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventStationsAsync(String eventId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventStationsValidateBeforeCall(eventId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getForecastPoints
     * @param yatchclubid base URL for the the (required)
     * @param language  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getForecastPointsCall(String yatchclubid, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/getForecastPoints/{yatchclubid}/language/{language}"
            .replace("{" + "yatchclubid" + "}", localVarApiClient.escapeString(yatchclubid.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForecastPointsValidateBeforeCall(String yatchclubid, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'yatchclubid' is set
        if (yatchclubid == null) {
            throw new ApiException("Missing the required parameter 'yatchclubid' when calling getForecastPoints(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getForecastPoints(Async)");
        }

        return getForecastPointsCall(yatchclubid, language, _callback);

    }

    /**
     * 
     * Get forecast points of a yatchclub&lt;br/&gt;None
     * @param yatchclubid base URL for the the (required)
     * @param language  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getForecastPoints(String yatchclubid, String language) throws ApiException {
        getForecastPointsWithHttpInfo(yatchclubid, language);
    }

    /**
     * 
     * Get forecast points of a yatchclub&lt;br/&gt;None
     * @param yatchclubid base URL for the the (required)
     * @param language  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getForecastPointsWithHttpInfo(String yatchclubid, String language) throws ApiException {
        okhttp3.Call localVarCall = getForecastPointsValidateBeforeCall(yatchclubid, language, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get forecast points of a yatchclub&lt;br/&gt;None
     * @param yatchclubid base URL for the the (required)
     * @param language  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getForecastPointsAsync(String yatchclubid, String language, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForecastPointsValidateBeforeCall(yatchclubid, language, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getForecastTimeSeries
     * @param latitude latitude for the forecast (required)
     * @param longitude longitude for the forecast (required)
     * @param weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&amp;wave&#x3D;height,direction,period (required)
     * @param inittime initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param endtime end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param days optional number of days in string. Will be added to init forecast date (optional)
     * @param hours optional number of hours in string. Will be added to init forecast date (optional)
     * @param wave  Comma separated values for the wave parameteres height,direction,period (optional)
     * @param entryid Direct file I want to extract (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getForecastTimeSeriesCall(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/getForecastTimeSeries/{latitude}/{longitude}/"
            .replace("{" + "latitude" + "}", localVarApiClient.escapeString(latitude.toString()))
            .replace("{" + "longitude" + "}", localVarApiClient.escapeString(longitude.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inittime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inittime", inittime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (days != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("days", days));
        }

        if (hours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hours", hours));
        }

        if (weather != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weather", weather));
        }

        if (wave != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wave", wave));
        }

        if (entryid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entryid", entryid));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForecastTimeSeriesValidateBeforeCall(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getForecastTimeSeries(Async)");
        }

        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getForecastTimeSeries(Async)");
        }

        // verify the required parameter 'weather' is set
        if (weather == null) {
            throw new ApiException("Missing the required parameter 'weather' when calling getForecastTimeSeries(Async)");
        }

        return getForecastTimeSeriesCall(latitude, longitude, weather, inittime, endtime, days, hours, wave, entryid, _callback);

    }

    /**
     * 
     * Get timeseries forecast information&lt;br/&gt;None
     * @param latitude latitude for the forecast (required)
     * @param longitude longitude for the forecast (required)
     * @param weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&amp;wave&#x3D;height,direction,period (required)
     * @param inittime initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param endtime end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param days optional number of days in string. Will be added to init forecast date (optional)
     * @param hours optional number of hours in string. Will be added to init forecast date (optional)
     * @param wave  Comma separated values for the wave parameteres height,direction,period (optional)
     * @param entryid Direct file I want to extract (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getForecastTimeSeries(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid) throws ApiException {
        getForecastTimeSeriesWithHttpInfo(latitude, longitude, weather, inittime, endtime, days, hours, wave, entryid);
    }

    /**
     * 
     * Get timeseries forecast information&lt;br/&gt;None
     * @param latitude latitude for the forecast (required)
     * @param longitude longitude for the forecast (required)
     * @param weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&amp;wave&#x3D;height,direction,period (required)
     * @param inittime initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param endtime end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param days optional number of days in string. Will be added to init forecast date (optional)
     * @param hours optional number of hours in string. Will be added to init forecast date (optional)
     * @param wave  Comma separated values for the wave parameteres height,direction,period (optional)
     * @param entryid Direct file I want to extract (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getForecastTimeSeriesWithHttpInfo(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid) throws ApiException {
        okhttp3.Call localVarCall = getForecastTimeSeriesValidateBeforeCall(latitude, longitude, weather, inittime, endtime, days, hours, wave, entryid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get timeseries forecast information&lt;br/&gt;None
     * @param latitude latitude for the forecast (required)
     * @param longitude longitude for the forecast (required)
     * @param weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&amp;wave&#x3D;height,direction,period (required)
     * @param inittime initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param endtime end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param days optional number of days in string. Will be added to init forecast date (optional)
     * @param hours optional number of hours in string. Will be added to init forecast date (optional)
     * @param wave  Comma separated values for the wave parameteres height,direction,period (optional)
     * @param entryid Direct file I want to extract (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getForecastTimeSeriesAsync(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForecastTimeSeriesValidateBeforeCall(latitude, longitude, weather, inittime, endtime, days, hours, wave, entryid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getForecastTimeSeriesWrf
     * @param latitude latitude for the forecast (required)
     * @param longitude longitude for the forecast (required)
     * @param weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&amp;wave&#x3D;height,direction,period (required)
     * @param inittime initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param endtime end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param days optional number of days in string. Will be added to init forecast date (optional)
     * @param hours optional number of hours in string. Will be added to init forecast date (optional)
     * @param wave  Comma separated values for the wave parameteres height,direction,period (optional)
     * @param entryid Direct file I want to extract (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getForecastTimeSeriesWrfCall(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/getForecastTimeSeriesWrf/{latitude}/{longitude}/"
            .replace("{" + "latitude" + "}", localVarApiClient.escapeString(latitude.toString()))
            .replace("{" + "longitude" + "}", localVarApiClient.escapeString(longitude.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inittime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inittime", inittime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (days != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("days", days));
        }

        if (hours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hours", hours));
        }

        if (weather != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weather", weather));
        }

        if (wave != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wave", wave));
        }

        if (entryid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entryid", entryid));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForecastTimeSeriesWrfValidateBeforeCall(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getForecastTimeSeriesWrf(Async)");
        }

        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getForecastTimeSeriesWrf(Async)");
        }

        // verify the required parameter 'weather' is set
        if (weather == null) {
            throw new ApiException("Missing the required parameter 'weather' when calling getForecastTimeSeriesWrf(Async)");
        }

        return getForecastTimeSeriesWrfCall(latitude, longitude, weather, inittime, endtime, days, hours, wave, entryid, _callback);

    }

    /**
     * 
     * Get timeseries forecast information&lt;br/&gt;None
     * @param latitude latitude for the forecast (required)
     * @param longitude longitude for the forecast (required)
     * @param weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&amp;wave&#x3D;height,direction,period (required)
     * @param inittime initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param endtime end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param days optional number of days in string. Will be added to init forecast date (optional)
     * @param hours optional number of hours in string. Will be added to init forecast date (optional)
     * @param wave  Comma separated values for the wave parameteres height,direction,period (optional)
     * @param entryid Direct file I want to extract (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getForecastTimeSeriesWrf(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid) throws ApiException {
        getForecastTimeSeriesWrfWithHttpInfo(latitude, longitude, weather, inittime, endtime, days, hours, wave, entryid);
    }

    /**
     * 
     * Get timeseries forecast information&lt;br/&gt;None
     * @param latitude latitude for the forecast (required)
     * @param longitude longitude for the forecast (required)
     * @param weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&amp;wave&#x3D;height,direction,period (required)
     * @param inittime initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param endtime end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param days optional number of days in string. Will be added to init forecast date (optional)
     * @param hours optional number of hours in string. Will be added to init forecast date (optional)
     * @param wave  Comma separated values for the wave parameteres height,direction,period (optional)
     * @param entryid Direct file I want to extract (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getForecastTimeSeriesWrfWithHttpInfo(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid) throws ApiException {
        okhttp3.Call localVarCall = getForecastTimeSeriesWrfValidateBeforeCall(latitude, longitude, weather, inittime, endtime, days, hours, wave, entryid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get timeseries forecast information&lt;br/&gt;None
     * @param latitude latitude for the forecast (required)
     * @param longitude longitude for the forecast (required)
     * @param weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&amp;wave&#x3D;height,direction,period (required)
     * @param inittime initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param endtime end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ (optional)
     * @param days optional number of days in string. Will be added to init forecast date (optional)
     * @param hours optional number of hours in string. Will be added to init forecast date (optional)
     * @param wave  Comma separated values for the wave parameteres height,direction,period (optional)
     * @param entryid Direct file I want to extract (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getForecastTimeSeriesWrfAsync(Float latitude, Float longitude, String weather, String inittime, String endtime, Integer days, Integer hours, String wave, String entryid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForecastTimeSeriesWrfValidateBeforeCall(latitude, longitude, weather, inittime, endtime, days, hours, wave, entryid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSocibWeatherStation
     * @param stationName station name currently: boyaenderrocat | playadepalma (required)
     * @param period Period of time to get the data. Options: lastdata lasthour lastday (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSocibWeatherStationCall(String stationName, String period, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/getSocibWeatherStation/{stationName}/{period}/"
            .replace("{" + "stationName" + "}", localVarApiClient.escapeString(stationName.toString()))
            .replace("{" + "period" + "}", localVarApiClient.escapeString(period.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSocibWeatherStationValidateBeforeCall(String stationName, String period, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stationName' is set
        if (stationName == null) {
            throw new ApiException("Missing the required parameter 'stationName' when calling getSocibWeatherStation(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling getSocibWeatherStation(Async)");
        }

        return getSocibWeatherStationCall(stationName, period, _callback);

    }

    /**
     * 
     * Get data from the socib bahia de palma buoy&lt;br/&gt;None
     * @param stationName station name currently: boyaenderrocat | playadepalma (required)
     * @param period Period of time to get the data. Options: lastdata lasthour lastday (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getSocibWeatherStation(String stationName, String period) throws ApiException {
        getSocibWeatherStationWithHttpInfo(stationName, period);
    }

    /**
     * 
     * Get data from the socib bahia de palma buoy&lt;br/&gt;None
     * @param stationName station name currently: boyaenderrocat | playadepalma (required)
     * @param period Period of time to get the data. Options: lastdata lasthour lastday (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSocibWeatherStationWithHttpInfo(String stationName, String period) throws ApiException {
        okhttp3.Call localVarCall = getSocibWeatherStationValidateBeforeCall(stationName, period, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get data from the socib bahia de palma buoy&lt;br/&gt;None
     * @param stationName station name currently: boyaenderrocat | playadepalma (required)
     * @param period Period of time to get the data. Options: lastdata lasthour lastday (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSocibWeatherStationAsync(String stationName, String period, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSocibWeatherStationValidateBeforeCall(stationName, period, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWeatherDisplay
     * @param stationName currently: &#39;cnarenal&#39;|&#39;campastilla&#39; | &#39;cncg&#39; (required)
     * @param period Period of time to get the data latestdata|latesthour|latestday|dailylog (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWeatherDisplayCall(String stationName, String period, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/getWeatherDisplay/{stationName}/"
            .replace("{" + "stationName" + "}", localVarApiClient.escapeString(stationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWeatherDisplayValidateBeforeCall(String stationName, String period, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stationName' is set
        if (stationName == null) {
            throw new ApiException("Missing the required parameter 'stationName' when calling getWeatherDisplay(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling getWeatherDisplay(Async)");
        }

        return getWeatherDisplayCall(stationName, period, _callback);

    }

    /**
     * 
     * Get data from the weather display software&lt;br/&gt;None
     * @param stationName currently: &#39;cnarenal&#39;|&#39;campastilla&#39; | &#39;cncg&#39; (required)
     * @param period Period of time to get the data latestdata|latesthour|latestday|dailylog (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getWeatherDisplay(String stationName, String period) throws ApiException {
        getWeatherDisplayWithHttpInfo(stationName, period);
    }

    /**
     * 
     * Get data from the weather display software&lt;br/&gt;None
     * @param stationName currently: &#39;cnarenal&#39;|&#39;campastilla&#39; | &#39;cncg&#39; (required)
     * @param period Period of time to get the data latestdata|latesthour|latestday|dailylog (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getWeatherDisplayWithHttpInfo(String stationName, String period) throws ApiException {
        okhttp3.Call localVarCall = getWeatherDisplayValidateBeforeCall(stationName, period, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get data from the weather display software&lt;br/&gt;None
     * @param stationName currently: &#39;cnarenal&#39;|&#39;campastilla&#39; | &#39;cncg&#39; (required)
     * @param period Period of time to get the data latestdata|latesthour|latestday|dailylog (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWeatherDisplayAsync(String stationName, String period, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWeatherDisplayValidateBeforeCall(stationName, period, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebCams
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebCamsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/getWebCams/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebCamsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getWebCamsCall(_callback);

    }

    /**
     * 
     * Get forecast and realtime information for known points&lt;br/&gt;None
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getWebCams() throws ApiException {
        getWebCamsWithHttpInfo();
    }

    /**
     * 
     * Get forecast and realtime information for known points&lt;br/&gt;None
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getWebCamsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWebCamsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get forecast and realtime information for known points&lt;br/&gt;None
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebCamsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebCamsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
