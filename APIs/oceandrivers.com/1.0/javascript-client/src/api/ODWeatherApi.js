/**
 * ODWeather
 * This is the api to access the ODWeather API information
 *
 * The version of the OpenAPI document: 1.0
 * Contact: matiasbonet@oceandrivers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ODWeather service.
* @module api/ODWeatherApi
* @version 1.0
*/
export default class ODWeatherApi {

    /**
    * Constructs a new ODWeatherApi. 
    * @alias module:api/ODWeatherApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the compareStation operation.
     * @callback module:api/ODWeatherApi~compareStationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get forecast and realtime information for known points<br/>None
     * @param {String} stationName Weather station to compare, values: cnareanl|rcnp | cmsap|boyaenderrocat|areopuertopalma | EWXXX
     * @param {module:api/ODWeatherApi~compareStationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compareStation(stationName, callback) {
      let postBody = null;
      // verify the required parameter 'stationName' is set
      if (stationName === undefined || stationName === null) {
        throw new Error("Missing the required parameter 'stationName' when calling compareStation");
      }

      let pathParams = {
        'stationName': stationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/compareStation/{stationName}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAemetStation operation.
     * @callback module:api/ODWeatherApi~getAemetStationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data from the aemet stations<br/>None
     * @param {String} stationName station name currently: aeropuertopalma | caboblanco 
     * @param {String} period Period of time to get the data. Options: lastdata lastday
     * @param {module:api/ODWeatherApi~getAemetStationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAemetStation(stationName, period, callback) {
      let postBody = null;
      // verify the required parameter 'stationName' is set
      if (stationName === undefined || stationName === null) {
        throw new Error("Missing the required parameter 'stationName' when calling getAemetStation");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getAemetStation");
      }

      let pathParams = {
        'stationName': stationName,
        'period': period
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/getAemetStation/{stationName}/{period}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEasywind operation.
     * @callback module:api/ODWeatherApi~getEasywindCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data from the easywind weather stations<br/>None
     * @param {String} easywindId currently: 'EW013'|'EW008'
     * @param {String} period Period of time to get the data latestdata|latesthour|latestday
     * @param {module:api/ODWeatherApi~getEasywindCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEasywind(easywindId, period, callback) {
      let postBody = null;
      // verify the required parameter 'easywindId' is set
      if (easywindId === undefined || easywindId === null) {
        throw new Error("Missing the required parameter 'easywindId' when calling getEasywind");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getEasywind");
      }

      let pathParams = {
        'easywindId': easywindId
      };
      let queryParams = {
        'period': period
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/getEasyWind/{easywindId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventStations operation.
     * @callback module:api/ODWeatherApi~getEventStationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stations in an event<br/>None
     * @param {String} eventId currently: 'trofeoprincesasofia|palmavela'
     * @param {module:api/ODWeatherApi~getEventStationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEventStations(eventId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getEventStations");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/getEventStations/{eventId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getForecastPoints operation.
     * @callback module:api/ODWeatherApi~getForecastPointsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get forecast points of a yatchclub<br/>None
     * @param {String} yatchclubid base URL for the the
     * @param {String} language 
     * @param {module:api/ODWeatherApi~getForecastPointsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getForecastPoints(yatchclubid, language, callback) {
      let postBody = null;
      // verify the required parameter 'yatchclubid' is set
      if (yatchclubid === undefined || yatchclubid === null) {
        throw new Error("Missing the required parameter 'yatchclubid' when calling getForecastPoints");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getForecastPoints");
      }

      let pathParams = {
        'yatchclubid': yatchclubid,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/getForecastPoints/{yatchclubid}/language/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getForecastTimeSeries operation.
     * @callback module:api/ODWeatherApi~getForecastTimeSeriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get timeseries forecast information<br/>None
     * @param {Number} latitude latitude for the forecast
     * @param {Number} longitude longitude for the forecast
     * @param {String} weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&wave=height,direction,period
     * @param {Object} opts Optional parameters
     * @param {String} [inittime] initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ
     * @param {String} [endtime] end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ
     * @param {Number} [days] optional number of days in string. Will be added to init forecast date
     * @param {Number} [hours] optional number of hours in string. Will be added to init forecast date
     * @param {String} [wave]  Comma separated values for the wave parameteres height,direction,period
     * @param {String} [entryid] Direct file I want to extract
     * @param {module:api/ODWeatherApi~getForecastTimeSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getForecastTimeSeries(latitude, longitude, weather, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling getForecastTimeSeries");
      }
      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling getForecastTimeSeries");
      }
      // verify the required parameter 'weather' is set
      if (weather === undefined || weather === null) {
        throw new Error("Missing the required parameter 'weather' when calling getForecastTimeSeries");
      }

      let pathParams = {
        'latitude': latitude,
        'longitude': longitude
      };
      let queryParams = {
        'inittime': opts['inittime'],
        'endtime': opts['endtime'],
        'days': opts['days'],
        'hours': opts['hours'],
        'weather': weather,
        'wave': opts['wave'],
        'entryid': opts['entryid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/getForecastTimeSeries/{latitude}/{longitude}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getForecastTimeSeriesWrf operation.
     * @callback module:api/ODWeatherApi~getForecastTimeSeriesWrfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get timeseries forecast information<br/>None
     * @param {Number} latitude latitude for the forecast
     * @param {Number} longitude longitude for the forecast
     * @param {String} weather  Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&wave=height,direction,period
     * @param {Object} opts Optional parameters
     * @param {String} [inittime] initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ
     * @param {String} [endtime] end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ
     * @param {Number} [days] optional number of days in string. Will be added to init forecast date
     * @param {Number} [hours] optional number of hours in string. Will be added to init forecast date
     * @param {String} [wave]  Comma separated values for the wave parameteres height,direction,period
     * @param {String} [entryid] Direct file I want to extract
     * @param {module:api/ODWeatherApi~getForecastTimeSeriesWrfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getForecastTimeSeriesWrf(latitude, longitude, weather, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling getForecastTimeSeriesWrf");
      }
      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling getForecastTimeSeriesWrf");
      }
      // verify the required parameter 'weather' is set
      if (weather === undefined || weather === null) {
        throw new Error("Missing the required parameter 'weather' when calling getForecastTimeSeriesWrf");
      }

      let pathParams = {
        'latitude': latitude,
        'longitude': longitude
      };
      let queryParams = {
        'inittime': opts['inittime'],
        'endtime': opts['endtime'],
        'days': opts['days'],
        'hours': opts['hours'],
        'weather': weather,
        'wave': opts['wave'],
        'entryid': opts['entryid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/getForecastTimeSeriesWrf/{latitude}/{longitude}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSocibWeatherStation operation.
     * @callback module:api/ODWeatherApi~getSocibWeatherStationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data from the socib bahia de palma buoy<br/>None
     * @param {String} stationName station name currently: boyaenderrocat | playadepalma
     * @param {String} period Period of time to get the data. Options: lastdata lasthour lastday
     * @param {module:api/ODWeatherApi~getSocibWeatherStationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSocibWeatherStation(stationName, period, callback) {
      let postBody = null;
      // verify the required parameter 'stationName' is set
      if (stationName === undefined || stationName === null) {
        throw new Error("Missing the required parameter 'stationName' when calling getSocibWeatherStation");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getSocibWeatherStation");
      }

      let pathParams = {
        'stationName': stationName,
        'period': period
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/getSocibWeatherStation/{stationName}/{period}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWeatherDisplay operation.
     * @callback module:api/ODWeatherApi~getWeatherDisplayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data from the weather display software<br/>None
     * @param {String} stationName currently: 'cnarenal'|'campastilla' | 'cncg'
     * @param {String} period Period of time to get the data latestdata|latesthour|latestday|dailylog
     * @param {module:api/ODWeatherApi~getWeatherDisplayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWeatherDisplay(stationName, period, callback) {
      let postBody = null;
      // verify the required parameter 'stationName' is set
      if (stationName === undefined || stationName === null) {
        throw new Error("Missing the required parameter 'stationName' when calling getWeatherDisplay");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getWeatherDisplay");
      }

      let pathParams = {
        'stationName': stationName
      };
      let queryParams = {
        'period': period
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/getWeatherDisplay/{stationName}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebCams operation.
     * @callback module:api/ODWeatherApi~getWebCamsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get forecast and realtime information for known points<br/>None
     * @param {module:api/ODWeatherApi~getWebCamsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWebCams(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1.0/getWebCams/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
