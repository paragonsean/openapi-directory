# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.form_field_option import FormFieldOption
from openapi_server import util


class FormField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_custom_values: bool=False, custom_field: bool=None, description: str=None, disabled: bool=None, hidden: bool=None, id: str=None, label: str=None, options: List[FormFieldOption]=None, placeholder: str=None, prefix: str=None, required: bool=None, sensitive: bool=None, suffix: str=None, type: str=None):
        """FormField - a model defined in OpenAPI

        :param allow_custom_values: The allow_custom_values of this FormField.
        :param custom_field: The custom_field of this FormField.
        :param description: The description of this FormField.
        :param disabled: The disabled of this FormField.
        :param hidden: The hidden of this FormField.
        :param id: The id of this FormField.
        :param label: The label of this FormField.
        :param options: The options of this FormField.
        :param placeholder: The placeholder of this FormField.
        :param prefix: The prefix of this FormField.
        :param required: The required of this FormField.
        :param sensitive: The sensitive of this FormField.
        :param suffix: The suffix of this FormField.
        :param type: The type of this FormField.
        """
        self.openapi_types = {
            'allow_custom_values': bool,
            'custom_field': bool,
            'description': str,
            'disabled': bool,
            'hidden': bool,
            'id': str,
            'label': str,
            'options': List[FormFieldOption],
            'placeholder': str,
            'prefix': str,
            'required': bool,
            'sensitive': bool,
            'suffix': str,
            'type': str
        }

        self.attribute_map = {
            'allow_custom_values': 'allow_custom_values',
            'custom_field': 'custom_field',
            'description': 'description',
            'disabled': 'disabled',
            'hidden': 'hidden',
            'id': 'id',
            'label': 'label',
            'options': 'options',
            'placeholder': 'placeholder',
            'prefix': 'prefix',
            'required': 'required',
            'sensitive': 'sensitive',
            'suffix': 'suffix',
            'type': 'type'
        }

        self._allow_custom_values = allow_custom_values
        self._custom_field = custom_field
        self._description = description
        self._disabled = disabled
        self._hidden = hidden
        self._id = id
        self._label = label
        self._options = options
        self._placeholder = placeholder
        self._prefix = prefix
        self._required = required
        self._sensitive = sensitive
        self._suffix = suffix
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FormField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FormField of this FormField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_custom_values(self):
        """Gets the allow_custom_values of this FormField.

        Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.

        :return: The allow_custom_values of this FormField.
        :rtype: bool
        """
        return self._allow_custom_values

    @allow_custom_values.setter
    def allow_custom_values(self, allow_custom_values):
        """Sets the allow_custom_values of this FormField.

        Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.

        :param allow_custom_values: The allow_custom_values of this FormField.
        :type allow_custom_values: bool
        """

        self._allow_custom_values = allow_custom_values

    @property
    def custom_field(self):
        """Gets the custom_field of this FormField.


        :return: The custom_field of this FormField.
        :rtype: bool
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """Sets the custom_field of this FormField.


        :param custom_field: The custom_field of this FormField.
        :type custom_field: bool
        """

        self._custom_field = custom_field

    @property
    def description(self):
        """Gets the description of this FormField.

        The description of the form field

        :return: The description of this FormField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FormField.

        The description of the form field

        :param description: The description of this FormField.
        :type description: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this FormField.

        Indicates if the form field is displayed in a “read-only” mode.

        :return: The disabled of this FormField.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this FormField.

        Indicates if the form field is displayed in a “read-only” mode.

        :param disabled: The disabled of this FormField.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def hidden(self):
        """Gets the hidden of this FormField.

        Indicates if the form field is not displayed but the value that is being stored on the connection.

        :return: The hidden of this FormField.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this FormField.

        Indicates if the form field is not displayed but the value that is being stored on the connection.

        :param hidden: The hidden of this FormField.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this FormField.

        The unique identifier of the form field.

        :return: The id of this FormField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormField.

        The unique identifier of the form field.

        :param id: The id of this FormField.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this FormField.

        The label of the field

        :return: The label of this FormField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FormField.

        The label of the field

        :param label: The label of this FormField.
        :type label: str
        """

        self._label = label

    @property
    def options(self):
        """Gets the options of this FormField.


        :return: The options of this FormField.
        :rtype: List[FormFieldOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FormField.


        :param options: The options of this FormField.
        :type options: List[FormFieldOption]
        """

        self._options = options

    @property
    def placeholder(self):
        """Gets the placeholder of this FormField.

        The placeholder for the form field

        :return: The placeholder of this FormField.
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this FormField.

        The placeholder for the form field

        :param placeholder: The placeholder of this FormField.
        :type placeholder: str
        """

        self._placeholder = placeholder

    @property
    def prefix(self):
        """Gets the prefix of this FormField.

        Prefix to display in front of the form field.

        :return: The prefix of this FormField.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this FormField.

        Prefix to display in front of the form field.

        :param prefix: The prefix of this FormField.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def required(self):
        """Gets the required of this FormField.

        Indicates if the form field is required, which means it must be filled in before the form can be submitted

        :return: The required of this FormField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this FormField.

        Indicates if the form field is required, which means it must be filled in before the form can be submitted

        :param required: The required of this FormField.
        :type required: bool
        """

        self._required = required

    @property
    def sensitive(self):
        """Gets the sensitive of this FormField.

        Indicates if the form field contains sensitive data, which will display the value as a masked input.

        :return: The sensitive of this FormField.
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this FormField.

        Indicates if the form field contains sensitive data, which will display the value as a masked input.

        :param sensitive: The sensitive of this FormField.
        :type sensitive: bool
        """

        self._sensitive = sensitive

    @property
    def suffix(self):
        """Gets the suffix of this FormField.

        Suffix to display next to the form field.

        :return: The suffix of this FormField.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this FormField.

        Suffix to display next to the form field.

        :param suffix: The suffix of this FormField.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def type(self):
        """Gets the type of this FormField.


        :return: The type of this FormField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FormField.


        :param type: The type of this FormField.
        :type type: str
        """
        allowed_values = ["text", "checkbox", "tel", "email", "url", "textarea", "select", "filtered-select", "multi-select", "datetime", "date", "time", "number"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
