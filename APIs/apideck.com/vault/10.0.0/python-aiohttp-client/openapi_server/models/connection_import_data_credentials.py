# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionImportDataCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, expires_in: int=None, issued_at: datetime=None, refresh_token: str=None):
        """ConnectionImportDataCredentials - a model defined in OpenAPI

        :param access_token: The access_token of this ConnectionImportDataCredentials.
        :param expires_in: The expires_in of this ConnectionImportDataCredentials.
        :param issued_at: The issued_at of this ConnectionImportDataCredentials.
        :param refresh_token: The refresh_token of this ConnectionImportDataCredentials.
        """
        self.openapi_types = {
            'access_token': str,
            'expires_in': int,
            'issued_at': datetime,
            'refresh_token': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'expires_in': 'expires_in',
            'issued_at': 'issued_at',
            'refresh_token': 'refresh_token'
        }

        self._access_token = access_token
        self._expires_in = expires_in
        self._issued_at = issued_at
        self._refresh_token = refresh_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionImportDataCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionImportData_credentials of this ConnectionImportDataCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this ConnectionImportDataCredentials.

        Access token

        :return: The access_token of this ConnectionImportDataCredentials.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ConnectionImportDataCredentials.

        Access token

        :param access_token: The access_token of this ConnectionImportDataCredentials.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def expires_in(self):
        """Gets the expires_in of this ConnectionImportDataCredentials.

        The number of seconds until the token expires. If omitted the token will be queued for refresh.

        :return: The expires_in of this ConnectionImportDataCredentials.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this ConnectionImportDataCredentials.

        The number of seconds until the token expires. If omitted the token will be queued for refresh.

        :param expires_in: The expires_in of this ConnectionImportDataCredentials.
        :type expires_in: int
        """

        self._expires_in = expires_in

    @property
    def issued_at(self):
        """Gets the issued_at of this ConnectionImportDataCredentials.

        The datetime at which the token was issued. If omitted the token will be queued for refresh.

        :return: The issued_at of this ConnectionImportDataCredentials.
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this ConnectionImportDataCredentials.

        The datetime at which the token was issued. If omitted the token will be queued for refresh.

        :param issued_at: The issued_at of this ConnectionImportDataCredentials.
        :type issued_at: datetime
        """

        self._issued_at = issued_at

    @property
    def refresh_token(self):
        """Gets the refresh_token of this ConnectionImportDataCredentials.

        The refresh token can be used to obtain a new access token.

        :return: The refresh_token of this ConnectionImportDataCredentials.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this ConnectionImportDataCredentials.

        The refresh token can be used to obtain a new access token.

        :param refresh_token: The refresh_token of this ConnectionImportDataCredentials.
        :type refresh_token: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")

        self._refresh_token = refresh_token
