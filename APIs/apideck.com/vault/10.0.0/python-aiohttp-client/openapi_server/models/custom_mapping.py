# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_id: str=None, custom_field: bool=None, description: str=None, id: str=None, key: str=None, label: str=None, required: bool=None, value: str=None):
        """CustomMapping - a model defined in OpenAPI

        :param consumer_id: The consumer_id of this CustomMapping.
        :param custom_field: The custom_field of this CustomMapping.
        :param description: The description of this CustomMapping.
        :param id: The id of this CustomMapping.
        :param key: The key of this CustomMapping.
        :param label: The label of this CustomMapping.
        :param required: The required of this CustomMapping.
        :param value: The value of this CustomMapping.
        """
        self.openapi_types = {
            'consumer_id': str,
            'custom_field': bool,
            'description': str,
            'id': str,
            'key': str,
            'label': str,
            'required': bool,
            'value': str
        }

        self.attribute_map = {
            'consumer_id': 'consumer_id',
            'custom_field': 'custom_field',
            'description': 'description',
            'id': 'id',
            'key': 'key',
            'label': 'label',
            'required': 'required',
            'value': 'value'
        }

        self._consumer_id = consumer_id
        self._custom_field = custom_field
        self._description = description
        self._id = id
        self._key = key
        self._label = label
        self._required = required
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomMapping of this CustomMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_id(self):
        """Gets the consumer_id of this CustomMapping.

        Consumer ID

        :return: The consumer_id of this CustomMapping.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this CustomMapping.

        Consumer ID

        :param consumer_id: The consumer_id of this CustomMapping.
        :type consumer_id: str
        """

        self._consumer_id = consumer_id

    @property
    def custom_field(self):
        """Gets the custom_field of this CustomMapping.

        This mapping represents a finder for a custom field

        :return: The custom_field of this CustomMapping.
        :rtype: bool
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """Sets the custom_field of this CustomMapping.

        This mapping represents a finder for a custom field

        :param custom_field: The custom_field of this CustomMapping.
        :type custom_field: bool
        """

        self._custom_field = custom_field

    @property
    def description(self):
        """Gets the description of this CustomMapping.

        Target Field description

        :return: The description of this CustomMapping.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomMapping.

        Target Field description

        :param description: The description of this CustomMapping.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this CustomMapping.

        Target Field ID

        :return: The id of this CustomMapping.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomMapping.

        Target Field ID

        :param id: The id of this CustomMapping.
        :type id: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this CustomMapping.

        Target Field Key

        :return: The key of this CustomMapping.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CustomMapping.

        Target Field Key

        :param key: The key of this CustomMapping.
        :type key: str
        """

        self._key = key

    @property
    def label(self):
        """Gets the label of this CustomMapping.

        Target Field name to use as a label

        :return: The label of this CustomMapping.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CustomMapping.

        Target Field name to use as a label

        :param label: The label of this CustomMapping.
        :type label: str
        """

        self._label = label

    @property
    def required(self):
        """Gets the required of this CustomMapping.

        Target Field Mapping is required

        :return: The required of this CustomMapping.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CustomMapping.

        Target Field Mapping is required

        :param required: The required of this CustomMapping.
        :type required: bool
        """

        self._required = required

    @property
    def value(self):
        """Gets the value of this CustomMapping.

        Target Field Mapping value

        :return: The value of this CustomMapping.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomMapping.

        Target Field Mapping value

        :param value: The value of this CustomMapping.
        :type value: str
        """

        self._value = value
