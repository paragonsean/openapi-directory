# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSessionResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_token: str=None, session_uri: str=None):
        """CreateSessionResponseData - a model defined in OpenAPI

        :param session_token: The session_token of this CreateSessionResponseData.
        :param session_uri: The session_uri of this CreateSessionResponseData.
        """
        self.openapi_types = {
            'session_token': str,
            'session_uri': str
        }

        self.attribute_map = {
            'session_token': 'session_token',
            'session_uri': 'session_uri'
        }

        self._session_token = session_token
        self._session_uri = session_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSessionResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSessionResponse_data of this CreateSessionResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_token(self):
        """Gets the session_token of this CreateSessionResponseData.


        :return: The session_token of this CreateSessionResponseData.
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this CreateSessionResponseData.


        :param session_token: The session_token of this CreateSessionResponseData.
        :type session_token: str
        """
        if session_token is None:
            raise ValueError("Invalid value for `session_token`, must not be `None`")

        self._session_token = session_token

    @property
    def session_uri(self):
        """Gets the session_uri of this CreateSessionResponseData.


        :return: The session_uri of this CreateSessionResponseData.
        :rtype: str
        """
        return self._session_uri

    @session_uri.setter
    def session_uri(self, session_uri):
        """Sets the session_uri of this CreateSessionResponseData.


        :param session_uri: The session_uri of this CreateSessionResponseData.
        :type session_uri: str
        """
        if session_uri is None:
            raise ValueError("Invalid value for `session_uri`, must not be `None`")

        self._session_uri = session_uri
