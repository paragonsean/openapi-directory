# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_type import AuthType
from openapi_server.models.connection_configuration_inner import ConnectionConfigurationInner
from openapi_server.models.connection_state import ConnectionState
from openapi_server.models.custom_mapping import CustomMapping
from openapi_server.models.form_field import FormField
from openapi_server.models.integration_state import IntegrationState
from openapi_server.models.o_auth_grant_type import OAuthGrantType
from openapi_server.models.webhook_subscription import WebhookSubscription
from openapi_server import util


class Connection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: AuthType=None, authorize_url: str=None, configurable_resources: List[str]=None, configuration: List[ConnectionConfigurationInner]=None, created_at: float=None, custom_mappings: List[CustomMapping]=None, enabled: bool=None, form_fields: List[FormField]=None, has_guide: bool=None, icon: str=None, id: str=None, integration_state: IntegrationState=None, logo: str=None, metadata: Dict[str, object]=None, name: str=None, oauth_grant_type: OAuthGrantType=None, resource_schema_support: List[str]=None, resource_settings_support: List[str]=None, revoke_url: str=None, schema_support: bool=None, service_id: str=None, settings: Dict[str, object]=None, settings_required_for_authorization: List[str]=None, state: ConnectionState=None, status: str=None, subscriptions: List[WebhookSubscription]=None, tag_line: str=None, unified_api: str=None, updated_at: float=None, validation_support: bool=None, website: str=None):
        """Connection - a model defined in OpenAPI

        :param auth_type: The auth_type of this Connection.
        :param authorize_url: The authorize_url of this Connection.
        :param configurable_resources: The configurable_resources of this Connection.
        :param configuration: The configuration of this Connection.
        :param created_at: The created_at of this Connection.
        :param custom_mappings: The custom_mappings of this Connection.
        :param enabled: The enabled of this Connection.
        :param form_fields: The form_fields of this Connection.
        :param has_guide: The has_guide of this Connection.
        :param icon: The icon of this Connection.
        :param id: The id of this Connection.
        :param integration_state: The integration_state of this Connection.
        :param logo: The logo of this Connection.
        :param metadata: The metadata of this Connection.
        :param name: The name of this Connection.
        :param oauth_grant_type: The oauth_grant_type of this Connection.
        :param resource_schema_support: The resource_schema_support of this Connection.
        :param resource_settings_support: The resource_settings_support of this Connection.
        :param revoke_url: The revoke_url of this Connection.
        :param schema_support: The schema_support of this Connection.
        :param service_id: The service_id of this Connection.
        :param settings: The settings of this Connection.
        :param settings_required_for_authorization: The settings_required_for_authorization of this Connection.
        :param state: The state of this Connection.
        :param status: The status of this Connection.
        :param subscriptions: The subscriptions of this Connection.
        :param tag_line: The tag_line of this Connection.
        :param unified_api: The unified_api of this Connection.
        :param updated_at: The updated_at of this Connection.
        :param validation_support: The validation_support of this Connection.
        :param website: The website of this Connection.
        """
        self.openapi_types = {
            'auth_type': AuthType,
            'authorize_url': str,
            'configurable_resources': List[str],
            'configuration': List[ConnectionConfigurationInner],
            'created_at': float,
            'custom_mappings': List[CustomMapping],
            'enabled': bool,
            'form_fields': List[FormField],
            'has_guide': bool,
            'icon': str,
            'id': str,
            'integration_state': IntegrationState,
            'logo': str,
            'metadata': Dict[str, object],
            'name': str,
            'oauth_grant_type': OAuthGrantType,
            'resource_schema_support': List[str],
            'resource_settings_support': List[str],
            'revoke_url': str,
            'schema_support': bool,
            'service_id': str,
            'settings': Dict[str, object],
            'settings_required_for_authorization': List[str],
            'state': ConnectionState,
            'status': str,
            'subscriptions': List[WebhookSubscription],
            'tag_line': str,
            'unified_api': str,
            'updated_at': float,
            'validation_support': bool,
            'website': str
        }

        self.attribute_map = {
            'auth_type': 'auth_type',
            'authorize_url': 'authorize_url',
            'configurable_resources': 'configurable_resources',
            'configuration': 'configuration',
            'created_at': 'created_at',
            'custom_mappings': 'custom_mappings',
            'enabled': 'enabled',
            'form_fields': 'form_fields',
            'has_guide': 'has_guide',
            'icon': 'icon',
            'id': 'id',
            'integration_state': 'integration_state',
            'logo': 'logo',
            'metadata': 'metadata',
            'name': 'name',
            'oauth_grant_type': 'oauth_grant_type',
            'resource_schema_support': 'resource_schema_support',
            'resource_settings_support': 'resource_settings_support',
            'revoke_url': 'revoke_url',
            'schema_support': 'schema_support',
            'service_id': 'service_id',
            'settings': 'settings',
            'settings_required_for_authorization': 'settings_required_for_authorization',
            'state': 'state',
            'status': 'status',
            'subscriptions': 'subscriptions',
            'tag_line': 'tag_line',
            'unified_api': 'unified_api',
            'updated_at': 'updated_at',
            'validation_support': 'validation_support',
            'website': 'website'
        }

        self._auth_type = auth_type
        self._authorize_url = authorize_url
        self._configurable_resources = configurable_resources
        self._configuration = configuration
        self._created_at = created_at
        self._custom_mappings = custom_mappings
        self._enabled = enabled
        self._form_fields = form_fields
        self._has_guide = has_guide
        self._icon = icon
        self._id = id
        self._integration_state = integration_state
        self._logo = logo
        self._metadata = metadata
        self._name = name
        self._oauth_grant_type = oauth_grant_type
        self._resource_schema_support = resource_schema_support
        self._resource_settings_support = resource_settings_support
        self._revoke_url = revoke_url
        self._schema_support = schema_support
        self._service_id = service_id
        self._settings = settings
        self._settings_required_for_authorization = settings_required_for_authorization
        self._state = state
        self._status = status
        self._subscriptions = subscriptions
        self._tag_line = tag_line
        self._unified_api = unified_api
        self._updated_at = updated_at
        self._validation_support = validation_support
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connection of this Connection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this Connection.


        :return: The auth_type of this Connection.
        :rtype: AuthType
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Connection.


        :param auth_type: The auth_type of this Connection.
        :type auth_type: AuthType
        """

        self._auth_type = auth_type

    @property
    def authorize_url(self):
        """Gets the authorize_url of this Connection.

        The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter to the `authorize_url`. Be sure to URL encode the `redirect_uri` part. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.

        :return: The authorize_url of this Connection.
        :rtype: str
        """
        return self._authorize_url

    @authorize_url.setter
    def authorize_url(self, authorize_url):
        """Sets the authorize_url of this Connection.

        The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter to the `authorize_url`. Be sure to URL encode the `redirect_uri` part. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.

        :param authorize_url: The authorize_url of this Connection.
        :type authorize_url: str
        """

        self._authorize_url = authorize_url

    @property
    def configurable_resources(self):
        """Gets the configurable_resources of this Connection.


        :return: The configurable_resources of this Connection.
        :rtype: List[str]
        """
        return self._configurable_resources

    @configurable_resources.setter
    def configurable_resources(self, configurable_resources):
        """Sets the configurable_resources of this Connection.


        :param configurable_resources: The configurable_resources of this Connection.
        :type configurable_resources: List[str]
        """

        self._configurable_resources = configurable_resources

    @property
    def configuration(self):
        """Gets the configuration of this Connection.


        :return: The configuration of this Connection.
        :rtype: List[ConnectionConfigurationInner]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Connection.


        :param configuration: The configuration of this Connection.
        :type configuration: List[ConnectionConfigurationInner]
        """

        self._configuration = configuration

    @property
    def created_at(self):
        """Gets the created_at of this Connection.


        :return: The created_at of this Connection.
        :rtype: float
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Connection.


        :param created_at: The created_at of this Connection.
        :type created_at: float
        """

        self._created_at = created_at

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Connection.

        List of custom mappings configured for this connection

        :return: The custom_mappings of this Connection.
        :rtype: List[CustomMapping]
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Connection.

        List of custom mappings configured for this connection

        :param custom_mappings: The custom_mappings of this Connection.
        :type custom_mappings: List[CustomMapping]
        """

        self._custom_mappings = custom_mappings

    @property
    def enabled(self):
        """Gets the enabled of this Connection.

        Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.

        :return: The enabled of this Connection.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Connection.

        Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.

        :param enabled: The enabled of this Connection.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def form_fields(self):
        """Gets the form_fields of this Connection.

        The settings that are wanted to create a connection.

        :return: The form_fields of this Connection.
        :rtype: List[FormField]
        """
        return self._form_fields

    @form_fields.setter
    def form_fields(self, form_fields):
        """Sets the form_fields of this Connection.

        The settings that are wanted to create a connection.

        :param form_fields: The form_fields of this Connection.
        :type form_fields: List[FormField]
        """

        self._form_fields = form_fields

    @property
    def has_guide(self):
        """Gets the has_guide of this Connection.

        Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).

        :return: The has_guide of this Connection.
        :rtype: bool
        """
        return self._has_guide

    @has_guide.setter
    def has_guide(self, has_guide):
        """Sets the has_guide of this Connection.

        Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).

        :param has_guide: The has_guide of this Connection.
        :type has_guide: bool
        """

        self._has_guide = has_guide

    @property
    def icon(self):
        """Gets the icon of this Connection.

        A visual icon of the connection, that will be shown in the Vault

        :return: The icon of this Connection.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Connection.

        A visual icon of the connection, that will be shown in the Vault

        :param icon: The icon of this Connection.
        :type icon: str
        """

        self._icon = icon

    @property
    def id(self):
        """Gets the id of this Connection.

        The unique identifier of the connection.

        :return: The id of this Connection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connection.

        The unique identifier of the connection.

        :param id: The id of this Connection.
        :type id: str
        """

        self._id = id

    @property
    def integration_state(self):
        """Gets the integration_state of this Connection.


        :return: The integration_state of this Connection.
        :rtype: IntegrationState
        """
        return self._integration_state

    @integration_state.setter
    def integration_state(self, integration_state):
        """Sets the integration_state of this Connection.


        :param integration_state: The integration_state of this Connection.
        :type integration_state: IntegrationState
        """

        self._integration_state = integration_state

    @property
    def logo(self):
        """Gets the logo of this Connection.

        The logo of the connection, that will be shown in the Vault

        :return: The logo of this Connection.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Connection.

        The logo of the connection, that will be shown in the Vault

        :param logo: The logo of this Connection.
        :type logo: str
        """

        self._logo = logo

    @property
    def metadata(self):
        """Gets the metadata of this Connection.

        Attach your own consumer specific metadata

        :return: The metadata of this Connection.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Connection.

        Attach your own consumer specific metadata

        :param metadata: The metadata of this Connection.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Connection.

        The name of the connection

        :return: The name of this Connection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connection.

        The name of the connection

        :param name: The name of this Connection.
        :type name: str
        """

        self._name = name

    @property
    def oauth_grant_type(self):
        """Gets the oauth_grant_type of this Connection.


        :return: The oauth_grant_type of this Connection.
        :rtype: OAuthGrantType
        """
        return self._oauth_grant_type

    @oauth_grant_type.setter
    def oauth_grant_type(self, oauth_grant_type):
        """Sets the oauth_grant_type of this Connection.


        :param oauth_grant_type: The oauth_grant_type of this Connection.
        :type oauth_grant_type: OAuthGrantType
        """

        self._oauth_grant_type = oauth_grant_type

    @property
    def resource_schema_support(self):
        """Gets the resource_schema_support of this Connection.


        :return: The resource_schema_support of this Connection.
        :rtype: List[str]
        """
        return self._resource_schema_support

    @resource_schema_support.setter
    def resource_schema_support(self, resource_schema_support):
        """Sets the resource_schema_support of this Connection.


        :param resource_schema_support: The resource_schema_support of this Connection.
        :type resource_schema_support: List[str]
        """

        self._resource_schema_support = resource_schema_support

    @property
    def resource_settings_support(self):
        """Gets the resource_settings_support of this Connection.


        :return: The resource_settings_support of this Connection.
        :rtype: List[str]
        """
        return self._resource_settings_support

    @resource_settings_support.setter
    def resource_settings_support(self, resource_settings_support):
        """Sets the resource_settings_support of this Connection.


        :param resource_settings_support: The resource_settings_support of this Connection.
        :type resource_settings_support: List[str]
        """

        self._resource_settings_support = resource_settings_support

    @property
    def revoke_url(self):
        """Gets the revoke_url of this Connection.

        The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.

        :return: The revoke_url of this Connection.
        :rtype: str
        """
        return self._revoke_url

    @revoke_url.setter
    def revoke_url(self, revoke_url):
        """Sets the revoke_url of this Connection.

        The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.

        :param revoke_url: The revoke_url of this Connection.
        :type revoke_url: str
        """

        self._revoke_url = revoke_url

    @property
    def schema_support(self):
        """Gets the schema_support of this Connection.


        :return: The schema_support of this Connection.
        :rtype: bool
        """
        return self._schema_support

    @schema_support.setter
    def schema_support(self, schema_support):
        """Sets the schema_support of this Connection.


        :param schema_support: The schema_support of this Connection.
        :type schema_support: bool
        """

        self._schema_support = schema_support

    @property
    def service_id(self):
        """Gets the service_id of this Connection.

        The ID of the service this connection belongs to.

        :return: The service_id of this Connection.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Connection.

        The ID of the service this connection belongs to.

        :param service_id: The service_id of this Connection.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def settings(self):
        """Gets the settings of this Connection.

        Connection settings. Values will persist to `form_fields` with corresponding id

        :return: The settings of this Connection.
        :rtype: Dict[str, object]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Connection.

        Connection settings. Values will persist to `form_fields` with corresponding id

        :param settings: The settings of this Connection.
        :type settings: Dict[str, object]
        """

        self._settings = settings

    @property
    def settings_required_for_authorization(self):
        """Gets the settings_required_for_authorization of this Connection.

        List of settings that are required to be configured on integration before authorization can occur

        :return: The settings_required_for_authorization of this Connection.
        :rtype: List[str]
        """
        return self._settings_required_for_authorization

    @settings_required_for_authorization.setter
    def settings_required_for_authorization(self, settings_required_for_authorization):
        """Sets the settings_required_for_authorization of this Connection.

        List of settings that are required to be configured on integration before authorization can occur

        :param settings_required_for_authorization: The settings_required_for_authorization of this Connection.
        :type settings_required_for_authorization: List[str]
        """

        self._settings_required_for_authorization = settings_required_for_authorization

    @property
    def state(self):
        """Gets the state of this Connection.


        :return: The state of this Connection.
        :rtype: ConnectionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Connection.


        :param state: The state of this Connection.
        :type state: ConnectionState
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this Connection.

        Status of the connection.

        :return: The status of this Connection.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Connection.

        Status of the connection.

        :param status: The status of this Connection.
        :type status: str
        """
        allowed_values = ["live", "upcoming", "requested"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Connection.


        :return: The subscriptions of this Connection.
        :rtype: List[WebhookSubscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Connection.


        :param subscriptions: The subscriptions of this Connection.
        :type subscriptions: List[WebhookSubscription]
        """

        self._subscriptions = subscriptions

    @property
    def tag_line(self):
        """Gets the tag_line of this Connection.


        :return: The tag_line of this Connection.
        :rtype: str
        """
        return self._tag_line

    @tag_line.setter
    def tag_line(self, tag_line):
        """Sets the tag_line of this Connection.


        :param tag_line: The tag_line of this Connection.
        :type tag_line: str
        """

        self._tag_line = tag_line

    @property
    def unified_api(self):
        """Gets the unified_api of this Connection.

        The unified API category where the connection belongs to.

        :return: The unified_api of this Connection.
        :rtype: str
        """
        return self._unified_api

    @unified_api.setter
    def unified_api(self, unified_api):
        """Sets the unified_api of this Connection.

        The unified API category where the connection belongs to.

        :param unified_api: The unified_api of this Connection.
        :type unified_api: str
        """

        self._unified_api = unified_api

    @property
    def updated_at(self):
        """Gets the updated_at of this Connection.


        :return: The updated_at of this Connection.
        :rtype: float
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Connection.


        :param updated_at: The updated_at of this Connection.
        :type updated_at: float
        """

        self._updated_at = updated_at

    @property
    def validation_support(self):
        """Gets the validation_support of this Connection.


        :return: The validation_support of this Connection.
        :rtype: bool
        """
        return self._validation_support

    @validation_support.setter
    def validation_support(self, validation_support):
        """Sets the validation_support of this Connection.


        :param validation_support: The validation_support of this Connection.
        :type validation_support: bool
        """

        self._validation_support = validation_support

    @property
    def website(self):
        """Gets the website of this Connection.

        The website URL of the connection

        :return: The website of this Connection.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Connection.

        The website URL of the connection

        :param website: The website of this Connection.
        :type website: str
        """

        self._website = website
