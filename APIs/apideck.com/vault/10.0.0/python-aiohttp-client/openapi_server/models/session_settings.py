# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unified_api_id import UnifiedApiId
from openapi_server import util


class SessionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_actions: List[str]=None, auto_redirect: bool=False, hide_guides: bool=False, hide_resource_settings: bool=False, isolation_mode: bool=False, sandbox_mode: bool=False, session_length: str='1h', show_logs: bool=True, show_sidebar: bool=True, show_suggestions: bool=False, unified_apis: List[UnifiedApiId]=None):
        """SessionSettings - a model defined in OpenAPI

        :param allow_actions: The allow_actions of this SessionSettings.
        :param auto_redirect: The auto_redirect of this SessionSettings.
        :param hide_guides: The hide_guides of this SessionSettings.
        :param hide_resource_settings: The hide_resource_settings of this SessionSettings.
        :param isolation_mode: The isolation_mode of this SessionSettings.
        :param sandbox_mode: The sandbox_mode of this SessionSettings.
        :param session_length: The session_length of this SessionSettings.
        :param show_logs: The show_logs of this SessionSettings.
        :param show_sidebar: The show_sidebar of this SessionSettings.
        :param show_suggestions: The show_suggestions of this SessionSettings.
        :param unified_apis: The unified_apis of this SessionSettings.
        """
        self.openapi_types = {
            'allow_actions': List[str],
            'auto_redirect': bool,
            'hide_guides': bool,
            'hide_resource_settings': bool,
            'isolation_mode': bool,
            'sandbox_mode': bool,
            'session_length': str,
            'show_logs': bool,
            'show_sidebar': bool,
            'show_suggestions': bool,
            'unified_apis': List[UnifiedApiId]
        }

        self.attribute_map = {
            'allow_actions': 'allow_actions',
            'auto_redirect': 'auto_redirect',
            'hide_guides': 'hide_guides',
            'hide_resource_settings': 'hide_resource_settings',
            'isolation_mode': 'isolation_mode',
            'sandbox_mode': 'sandbox_mode',
            'session_length': 'session_length',
            'show_logs': 'show_logs',
            'show_sidebar': 'show_sidebar',
            'show_suggestions': 'show_suggestions',
            'unified_apis': 'unified_apis'
        }

        self._allow_actions = allow_actions
        self._auto_redirect = auto_redirect
        self._hide_guides = hide_guides
        self._hide_resource_settings = hide_resource_settings
        self._isolation_mode = isolation_mode
        self._sandbox_mode = sandbox_mode
        self._session_length = session_length
        self._show_logs = show_logs
        self._show_sidebar = show_sidebar
        self._show_suggestions = show_suggestions
        self._unified_apis = unified_apis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session_settings of this SessionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_actions(self):
        """Gets the allow_actions of this SessionSettings.

        Hide actions from your users in [Vault](/apis/vault/reference#section/Get-Started). Actions in `allow_actions` will be shown on a connection in Vault. Available actions are: `delete`, `disconnect`, `reauthorize` and `disable`. Empty array will hide all actions. By default all actions are visible.

        :return: The allow_actions of this SessionSettings.
        :rtype: List[str]
        """
        return self._allow_actions

    @allow_actions.setter
    def allow_actions(self, allow_actions):
        """Sets the allow_actions of this SessionSettings.

        Hide actions from your users in [Vault](/apis/vault/reference#section/Get-Started). Actions in `allow_actions` will be shown on a connection in Vault. Available actions are: `delete`, `disconnect`, `reauthorize` and `disable`. Empty array will hide all actions. By default all actions are visible.

        :param allow_actions: The allow_actions of this SessionSettings.
        :type allow_actions: List[str]
        """
        allowed_values = ["delete", "disconnect", "reauthorize", "disable"]  # noqa: E501
        if not set(allow_actions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allow_actions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allow_actions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allow_actions = allow_actions

    @property
    def auto_redirect(self):
        """Gets the auto_redirect of this SessionSettings.

        Automatically redirect to redirect uri after the connection has been configured as callable. Defaults to `false`.

        :return: The auto_redirect of this SessionSettings.
        :rtype: bool
        """
        return self._auto_redirect

    @auto_redirect.setter
    def auto_redirect(self, auto_redirect):
        """Sets the auto_redirect of this SessionSettings.

        Automatically redirect to redirect uri after the connection has been configured as callable. Defaults to `false`.

        :param auto_redirect: The auto_redirect of this SessionSettings.
        :type auto_redirect: bool
        """

        self._auto_redirect = auto_redirect

    @property
    def hide_guides(self):
        """Gets the hide_guides of this SessionSettings.

        Hide Apideck connection guides in [Vault](/apis/vault/reference#section/Get-Started). Defaults to `false`.

        :return: The hide_guides of this SessionSettings.
        :rtype: bool
        """
        return self._hide_guides

    @hide_guides.setter
    def hide_guides(self, hide_guides):
        """Sets the hide_guides of this SessionSettings.

        Hide Apideck connection guides in [Vault](/apis/vault/reference#section/Get-Started). Defaults to `false`.

        :param hide_guides: The hide_guides of this SessionSettings.
        :type hide_guides: bool
        """

        self._hide_guides = hide_guides

    @property
    def hide_resource_settings(self):
        """Gets the hide_resource_settings of this SessionSettings.

        A boolean that controls the display of the configurable resources for an integration. When set to true, the resource configuration options will be hidden and not shown to the user. When set to false, the resource configuration options will be displayed to the user.

        :return: The hide_resource_settings of this SessionSettings.
        :rtype: bool
        """
        return self._hide_resource_settings

    @hide_resource_settings.setter
    def hide_resource_settings(self, hide_resource_settings):
        """Sets the hide_resource_settings of this SessionSettings.

        A boolean that controls the display of the configurable resources for an integration. When set to true, the resource configuration options will be hidden and not shown to the user. When set to false, the resource configuration options will be displayed to the user.

        :param hide_resource_settings: The hide_resource_settings of this SessionSettings.
        :type hide_resource_settings: bool
        """

        self._hide_resource_settings = hide_resource_settings

    @property
    def isolation_mode(self):
        """Gets the isolation_mode of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to run in isolation mode, meaning it only shows the connection settings and hides the navigation items.

        :return: The isolation_mode of this SessionSettings.
        :rtype: bool
        """
        return self._isolation_mode

    @isolation_mode.setter
    def isolation_mode(self, isolation_mode):
        """Sets the isolation_mode of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to run in isolation mode, meaning it only shows the connection settings and hides the navigation items.

        :param isolation_mode: The isolation_mode of this SessionSettings.
        :type isolation_mode: bool
        """

        self._isolation_mode = isolation_mode

    @property
    def sandbox_mode(self):
        """Gets the sandbox_mode of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to show a banner informing the logged in user is in a test environment.

        :return: The sandbox_mode of this SessionSettings.
        :rtype: bool
        """
        return self._sandbox_mode

    @sandbox_mode.setter
    def sandbox_mode(self, sandbox_mode):
        """Sets the sandbox_mode of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to show a banner informing the logged in user is in a test environment.

        :param sandbox_mode: The sandbox_mode of this SessionSettings.
        :type sandbox_mode: bool
        """

        self._sandbox_mode = sandbox_mode

    @property
    def session_length(self):
        """Gets the session_length of this SessionSettings.

        The duration of time the session is valid for (maximum 1 week).

        :return: The session_length of this SessionSettings.
        :rtype: str
        """
        return self._session_length

    @session_length.setter
    def session_length(self, session_length):
        """Sets the session_length of this SessionSettings.

        The duration of time the session is valid for (maximum 1 week).

        :param session_length: The session_length of this SessionSettings.
        :type session_length: str
        """

        self._session_length = session_length

    @property
    def show_logs(self):
        """Gets the show_logs of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to show the logs page. Defaults to `true`.

        :return: The show_logs of this SessionSettings.
        :rtype: bool
        """
        return self._show_logs

    @show_logs.setter
    def show_logs(self, show_logs):
        """Sets the show_logs of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to show the logs page. Defaults to `true`.

        :param show_logs: The show_logs of this SessionSettings.
        :type show_logs: bool
        """

        self._show_logs = show_logs

    @property
    def show_sidebar(self):
        """Gets the show_sidebar of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to show the sidebar. Defaults to `true`.

        :return: The show_sidebar of this SessionSettings.
        :rtype: bool
        """
        return self._show_sidebar

    @show_sidebar.setter
    def show_sidebar(self, show_sidebar):
        """Sets the show_sidebar of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to show the sidebar. Defaults to `true`.

        :param show_sidebar: The show_sidebar of this SessionSettings.
        :type show_sidebar: bool
        """

        self._show_sidebar = show_sidebar

    @property
    def show_suggestions(self):
        """Gets the show_suggestions of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to show the suggestions page. Defaults to `false`.

        :return: The show_suggestions of this SessionSettings.
        :rtype: bool
        """
        return self._show_suggestions

    @show_suggestions.setter
    def show_suggestions(self, show_suggestions):
        """Sets the show_suggestions of this SessionSettings.

        Configure [Vault](/apis/vault/reference#section/Get-Started) to show the suggestions page. Defaults to `false`.

        :param show_suggestions: The show_suggestions of this SessionSettings.
        :type show_suggestions: bool
        """

        self._show_suggestions = show_suggestions

    @property
    def unified_apis(self):
        """Gets the unified_apis of this SessionSettings.

        Provide the IDs of the Unified APIs you want to be visible. Leaving it empty or omitting this field will show all Unified APIs.

        :return: The unified_apis of this SessionSettings.
        :rtype: List[UnifiedApiId]
        """
        return self._unified_apis

    @unified_apis.setter
    def unified_apis(self, unified_apis):
        """Sets the unified_apis of this SessionSettings.

        Provide the IDs of the Unified APIs you want to be visible. Leaving it empty or omitting this field will show all Unified APIs.

        :param unified_apis: The unified_apis of this SessionSettings.
        :type unified_apis: List[UnifiedApiId]
        """

        self._unified_apis = unified_apis
