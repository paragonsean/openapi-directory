# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_type import AuthType
from openapi_server import util


class ConsumerConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: AuthType=None, consumer_id: str=None, created_at: str=None, enabled: bool=None, icon: str=None, id: str=None, logo: str=None, metadata: Dict[str, object]=None, name: str=None, service_id: str=None, settings: object=None, state: str=None, tag_line: str=None, unified_api: str=None, updated_at: str=None, website: str=None):
        """ConsumerConnection - a model defined in OpenAPI

        :param auth_type: The auth_type of this ConsumerConnection.
        :param consumer_id: The consumer_id of this ConsumerConnection.
        :param created_at: The created_at of this ConsumerConnection.
        :param enabled: The enabled of this ConsumerConnection.
        :param icon: The icon of this ConsumerConnection.
        :param id: The id of this ConsumerConnection.
        :param logo: The logo of this ConsumerConnection.
        :param metadata: The metadata of this ConsumerConnection.
        :param name: The name of this ConsumerConnection.
        :param service_id: The service_id of this ConsumerConnection.
        :param settings: The settings of this ConsumerConnection.
        :param state: The state of this ConsumerConnection.
        :param tag_line: The tag_line of this ConsumerConnection.
        :param unified_api: The unified_api of this ConsumerConnection.
        :param updated_at: The updated_at of this ConsumerConnection.
        :param website: The website of this ConsumerConnection.
        """
        self.openapi_types = {
            'auth_type': AuthType,
            'consumer_id': str,
            'created_at': str,
            'enabled': bool,
            'icon': str,
            'id': str,
            'logo': str,
            'metadata': Dict[str, object],
            'name': str,
            'service_id': str,
            'settings': object,
            'state': str,
            'tag_line': str,
            'unified_api': str,
            'updated_at': str,
            'website': str
        }

        self.attribute_map = {
            'auth_type': 'auth_type',
            'consumer_id': 'consumer_id',
            'created_at': 'created_at',
            'enabled': 'enabled',
            'icon': 'icon',
            'id': 'id',
            'logo': 'logo',
            'metadata': 'metadata',
            'name': 'name',
            'service_id': 'service_id',
            'settings': 'settings',
            'state': 'state',
            'tag_line': 'tag_line',
            'unified_api': 'unified_api',
            'updated_at': 'updated_at',
            'website': 'website'
        }

        self._auth_type = auth_type
        self._consumer_id = consumer_id
        self._created_at = created_at
        self._enabled = enabled
        self._icon = icon
        self._id = id
        self._logo = logo
        self._metadata = metadata
        self._name = name
        self._service_id = service_id
        self._settings = settings
        self._state = state
        self._tag_line = tag_line
        self._unified_api = unified_api
        self._updated_at = updated_at
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumerConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumerConnection of this ConsumerConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this ConsumerConnection.


        :return: The auth_type of this ConsumerConnection.
        :rtype: AuthType
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this ConsumerConnection.


        :param auth_type: The auth_type of this ConsumerConnection.
        :type auth_type: AuthType
        """

        self._auth_type = auth_type

    @property
    def consumer_id(self):
        """Gets the consumer_id of this ConsumerConnection.


        :return: The consumer_id of this ConsumerConnection.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this ConsumerConnection.


        :param consumer_id: The consumer_id of this ConsumerConnection.
        :type consumer_id: str
        """

        self._consumer_id = consumer_id

    @property
    def created_at(self):
        """Gets the created_at of this ConsumerConnection.


        :return: The created_at of this ConsumerConnection.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConsumerConnection.


        :param created_at: The created_at of this ConsumerConnection.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def enabled(self):
        """Gets the enabled of this ConsumerConnection.


        :return: The enabled of this ConsumerConnection.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConsumerConnection.


        :param enabled: The enabled of this ConsumerConnection.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def icon(self):
        """Gets the icon of this ConsumerConnection.


        :return: The icon of this ConsumerConnection.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ConsumerConnection.


        :param icon: The icon of this ConsumerConnection.
        :type icon: str
        """

        self._icon = icon

    @property
    def id(self):
        """Gets the id of this ConsumerConnection.


        :return: The id of this ConsumerConnection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConsumerConnection.


        :param id: The id of this ConsumerConnection.
        :type id: str
        """

        self._id = id

    @property
    def logo(self):
        """Gets the logo of this ConsumerConnection.


        :return: The logo of this ConsumerConnection.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this ConsumerConnection.


        :param logo: The logo of this ConsumerConnection.
        :type logo: str
        """

        self._logo = logo

    @property
    def metadata(self):
        """Gets the metadata of this ConsumerConnection.

        Attach your own consumer specific metadata

        :return: The metadata of this ConsumerConnection.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ConsumerConnection.

        Attach your own consumer specific metadata

        :param metadata: The metadata of this ConsumerConnection.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ConsumerConnection.


        :return: The name of this ConsumerConnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConsumerConnection.


        :param name: The name of this ConsumerConnection.
        :type name: str
        """

        self._name = name

    @property
    def service_id(self):
        """Gets the service_id of this ConsumerConnection.


        :return: The service_id of this ConsumerConnection.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ConsumerConnection.


        :param service_id: The service_id of this ConsumerConnection.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def settings(self):
        """Gets the settings of this ConsumerConnection.

        Connection settings. Values will persist to `form_fields` with corresponding id

        :return: The settings of this ConsumerConnection.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ConsumerConnection.

        Connection settings. Values will persist to `form_fields` with corresponding id

        :param settings: The settings of this ConsumerConnection.
        :type settings: object
        """

        self._settings = settings

    @property
    def state(self):
        """Gets the state of this ConsumerConnection.


        :return: The state of this ConsumerConnection.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConsumerConnection.


        :param state: The state of this ConsumerConnection.
        :type state: str
        """
        allowed_values = ["available", "callable", "added", "configured", "authorized"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tag_line(self):
        """Gets the tag_line of this ConsumerConnection.


        :return: The tag_line of this ConsumerConnection.
        :rtype: str
        """
        return self._tag_line

    @tag_line.setter
    def tag_line(self, tag_line):
        """Sets the tag_line of this ConsumerConnection.


        :param tag_line: The tag_line of this ConsumerConnection.
        :type tag_line: str
        """

        self._tag_line = tag_line

    @property
    def unified_api(self):
        """Gets the unified_api of this ConsumerConnection.


        :return: The unified_api of this ConsumerConnection.
        :rtype: str
        """
        return self._unified_api

    @unified_api.setter
    def unified_api(self, unified_api):
        """Sets the unified_api of this ConsumerConnection.


        :param unified_api: The unified_api of this ConsumerConnection.
        :type unified_api: str
        """

        self._unified_api = unified_api

    @property
    def updated_at(self):
        """Gets the updated_at of this ConsumerConnection.


        :return: The updated_at of this ConsumerConnection.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConsumerConnection.


        :param updated_at: The updated_at of this ConsumerConnection.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def website(self):
        """Gets the website of this ConsumerConnection.


        :return: The website of this ConsumerConnection.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ConsumerConnection.


        :param website: The website of this ConsumerConnection.
        :type website: str
        """

        self._website = website
