# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_operation import LogOperation
from openapi_server.models.log_service import LogService
from openapi_server import util


class Log(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_style: str=None, base_url: str=None, child_request: bool=None, consumer_id: str=None, duration: float=None, error_message: str=None, execution: int=None, has_children: bool=None, http_method: str=None, id: str=None, latency: float=None, operation: LogOperation=None, parent_id: str=None, path: str=None, sandbox: bool=None, service: LogService=None, source_ip: str=None, status_code: int=None, success: bool=None, timestamp: str=None, unified_api: str=None):
        """Log - a model defined in OpenAPI

        :param api_style: The api_style of this Log.
        :param base_url: The base_url of this Log.
        :param child_request: The child_request of this Log.
        :param consumer_id: The consumer_id of this Log.
        :param duration: The duration of this Log.
        :param error_message: The error_message of this Log.
        :param execution: The execution of this Log.
        :param has_children: The has_children of this Log.
        :param http_method: The http_method of this Log.
        :param id: The id of this Log.
        :param latency: The latency of this Log.
        :param operation: The operation of this Log.
        :param parent_id: The parent_id of this Log.
        :param path: The path of this Log.
        :param sandbox: The sandbox of this Log.
        :param service: The service of this Log.
        :param source_ip: The source_ip of this Log.
        :param status_code: The status_code of this Log.
        :param success: The success of this Log.
        :param timestamp: The timestamp of this Log.
        :param unified_api: The unified_api of this Log.
        """
        self.openapi_types = {
            'api_style': str,
            'base_url': str,
            'child_request': bool,
            'consumer_id': str,
            'duration': float,
            'error_message': str,
            'execution': int,
            'has_children': bool,
            'http_method': str,
            'id': str,
            'latency': float,
            'operation': LogOperation,
            'parent_id': str,
            'path': str,
            'sandbox': bool,
            'service': LogService,
            'source_ip': str,
            'status_code': int,
            'success': bool,
            'timestamp': str,
            'unified_api': str
        }

        self.attribute_map = {
            'api_style': 'api_style',
            'base_url': 'base_url',
            'child_request': 'child_request',
            'consumer_id': 'consumer_id',
            'duration': 'duration',
            'error_message': 'error_message',
            'execution': 'execution',
            'has_children': 'has_children',
            'http_method': 'http_method',
            'id': 'id',
            'latency': 'latency',
            'operation': 'operation',
            'parent_id': 'parent_id',
            'path': 'path',
            'sandbox': 'sandbox',
            'service': 'service',
            'source_ip': 'source_ip',
            'status_code': 'status_code',
            'success': 'success',
            'timestamp': 'timestamp',
            'unified_api': 'unified_api'
        }

        self._api_style = api_style
        self._base_url = base_url
        self._child_request = child_request
        self._consumer_id = consumer_id
        self._duration = duration
        self._error_message = error_message
        self._execution = execution
        self._has_children = has_children
        self._http_method = http_method
        self._id = id
        self._latency = latency
        self._operation = operation
        self._parent_id = parent_id
        self._path = path
        self._sandbox = sandbox
        self._service = service
        self._source_ip = source_ip
        self._status_code = status_code
        self._success = success
        self._timestamp = timestamp
        self._unified_api = unified_api

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Log':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Log of this Log.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_style(self):
        """Gets the api_style of this Log.

        Indicates if the request was made via REST or Graphql endpoint.

        :return: The api_style of this Log.
        :rtype: str
        """
        return self._api_style

    @api_style.setter
    def api_style(self, api_style):
        """Sets the api_style of this Log.

        Indicates if the request was made via REST or Graphql endpoint.

        :param api_style: The api_style of this Log.
        :type api_style: str
        """
        if api_style is None:
            raise ValueError("Invalid value for `api_style`, must not be `None`")

        self._api_style = api_style

    @property
    def base_url(self):
        """Gets the base_url of this Log.

        The Apideck base URL the request was made to.

        :return: The base_url of this Log.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Log.

        The Apideck base URL the request was made to.

        :param base_url: The base_url of this Log.
        :type base_url: str
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")

        self._base_url = base_url

    @property
    def child_request(self):
        """Gets the child_request of this Log.

        Indicates whether or not this is a child or parent request.

        :return: The child_request of this Log.
        :rtype: bool
        """
        return self._child_request

    @child_request.setter
    def child_request(self, child_request):
        """Sets the child_request of this Log.

        Indicates whether or not this is a child or parent request.

        :param child_request: The child_request of this Log.
        :type child_request: bool
        """
        if child_request is None:
            raise ValueError("Invalid value for `child_request`, must not be `None`")

        self._child_request = child_request

    @property
    def consumer_id(self):
        """Gets the consumer_id of this Log.

        The consumer Id associated with the request.

        :return: The consumer_id of this Log.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this Log.

        The consumer Id associated with the request.

        :param consumer_id: The consumer_id of this Log.
        :type consumer_id: str
        """
        if consumer_id is None:
            raise ValueError("Invalid value for `consumer_id`, must not be `None`")

        self._consumer_id = consumer_id

    @property
    def duration(self):
        """Gets the duration of this Log.

        The entire execution time in milliseconds it took to call the Apideck service provider.

        :return: The duration of this Log.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Log.

        The entire execution time in milliseconds it took to call the Apideck service provider.

        :param duration: The duration of this Log.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def error_message(self):
        """Gets the error_message of this Log.

        If error occurred, this is brief explanation

        :return: The error_message of this Log.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Log.

        If error occurred, this is brief explanation

        :param error_message: The error_message of this Log.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def execution(self):
        """Gets the execution of this Log.

        The entire execution time in milliseconds it took to make the request.

        :return: The execution of this Log.
        :rtype: int
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this Log.

        The entire execution time in milliseconds it took to make the request.

        :param execution: The execution of this Log.
        :type execution: int
        """
        if execution is None:
            raise ValueError("Invalid value for `execution`, must not be `None`")

        self._execution = execution

    @property
    def has_children(self):
        """Gets the has_children of this Log.

        When request is a parent request, this indicates if there are child requests associated.

        :return: The has_children of this Log.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this Log.

        When request is a parent request, this indicates if there are child requests associated.

        :param has_children: The has_children of this Log.
        :type has_children: bool
        """
        if has_children is None:
            raise ValueError("Invalid value for `has_children`, must not be `None`")

        self._has_children = has_children

    @property
    def http_method(self):
        """Gets the http_method of this Log.

        HTTP Method of request.

        :return: The http_method of this Log.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this Log.

        HTTP Method of request.

        :param http_method: The http_method of this Log.
        :type http_method: str
        """
        if http_method is None:
            raise ValueError("Invalid value for `http_method`, must not be `None`")

        self._http_method = http_method

    @property
    def id(self):
        """Gets the id of this Log.

        UUID acting as Request Identifier.

        :return: The id of this Log.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Log.

        UUID acting as Request Identifier.

        :param id: The id of this Log.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def latency(self):
        """Gets the latency of this Log.

        Latency added by making this request via Unified Api.

        :return: The latency of this Log.
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this Log.

        Latency added by making this request via Unified Api.

        :param latency: The latency of this Log.
        :type latency: float
        """
        if latency is None:
            raise ValueError("Invalid value for `latency`, must not be `None`")

        self._latency = latency

    @property
    def operation(self):
        """Gets the operation of this Log.


        :return: The operation of this Log.
        :rtype: LogOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Log.


        :param operation: The operation of this Log.
        :type operation: LogOperation
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def parent_id(self):
        """Gets the parent_id of this Log.

        When request is a child request, this UUID indicates it's parent request.

        :return: The parent_id of this Log.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Log.

        When request is a child request, this UUID indicates it's parent request.

        :param parent_id: The parent_id of this Log.
        :type parent_id: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def path(self):
        """Gets the path of this Log.

        The path component of the URI the request was made to.

        :return: The path of this Log.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Log.

        The path component of the URI the request was made to.

        :param path: The path of this Log.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def sandbox(self):
        """Gets the sandbox of this Log.

        Indicates whether the request was made using Apidecks sandbox credentials or not.

        :return: The sandbox of this Log.
        :rtype: bool
        """
        return self._sandbox

    @sandbox.setter
    def sandbox(self, sandbox):
        """Sets the sandbox of this Log.

        Indicates whether the request was made using Apidecks sandbox credentials or not.

        :param sandbox: The sandbox of this Log.
        :type sandbox: bool
        """
        if sandbox is None:
            raise ValueError("Invalid value for `sandbox`, must not be `None`")

        self._sandbox = sandbox

    @property
    def service(self):
        """Gets the service of this Log.


        :return: The service of this Log.
        :rtype: LogService
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Log.


        :param service: The service of this Log.
        :type service: LogService
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def source_ip(self):
        """Gets the source_ip of this Log.

        The IP address of the source of the request.

        :return: The source_ip of this Log.
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this Log.

        The IP address of the source of the request.

        :param source_ip: The source_ip of this Log.
        :type source_ip: str
        """

        self._source_ip = source_ip

    @property
    def status_code(self):
        """Gets the status_code of this Log.

        HTTP Status code that was returned.

        :return: The status_code of this Log.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Log.

        HTTP Status code that was returned.

        :param status_code: The status_code of this Log.
        :type status_code: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def success(self):
        """Gets the success of this Log.

        Whether or not the request was successful.

        :return: The success of this Log.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Log.

        Whether or not the request was successful.

        :param success: The success of this Log.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success

    @property
    def timestamp(self):
        """Gets the timestamp of this Log.

        ISO Date and time when the request was made.

        :return: The timestamp of this Log.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Log.

        ISO Date and time when the request was made.

        :param timestamp: The timestamp of this Log.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def unified_api(self):
        """Gets the unified_api of this Log.

        Which Unified Api request was made to.

        :return: The unified_api of this Log.
        :rtype: str
        """
        return self._unified_api

    @unified_api.setter
    def unified_api(self, unified_api):
        """Sets the unified_api of this Log.

        Which Unified Api request was made to.

        :param unified_api: The unified_api of this Log.
        :type unified_api: str
        """
        allowed_values = ["crm", "lead", "proxy", "vault", "accounting", "hris", "ats", "ecommerce", "issue-tracking", "pos", "file-storage", "sms"]  # noqa: E501
        if unified_api not in allowed_values:
            raise ValueError(
                "Invalid value for `unified_api` ({0}), must be one of {1}"
                .format(unified_api, allowed_values)
            )

        self._unified_api = unified_api
