# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumer_metadata import ConsumerMetadata
from openapi_server.models.session_settings import SessionSettings
from openapi_server.models.session_theme import SessionTheme
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_metadata: ConsumerMetadata=None, custom_consumer_settings: Dict[str, object]=None, redirect_uri: str=None, settings: SessionSettings=None, theme: SessionTheme=None):
        """Session - a model defined in OpenAPI

        :param consumer_metadata: The consumer_metadata of this Session.
        :param custom_consumer_settings: The custom_consumer_settings of this Session.
        :param redirect_uri: The redirect_uri of this Session.
        :param settings: The settings of this Session.
        :param theme: The theme of this Session.
        """
        self.openapi_types = {
            'consumer_metadata': ConsumerMetadata,
            'custom_consumer_settings': Dict[str, object],
            'redirect_uri': str,
            'settings': SessionSettings,
            'theme': SessionTheme
        }

        self.attribute_map = {
            'consumer_metadata': 'consumer_metadata',
            'custom_consumer_settings': 'custom_consumer_settings',
            'redirect_uri': 'redirect_uri',
            'settings': 'settings',
            'theme': 'theme'
        }

        self._consumer_metadata = consumer_metadata
        self._custom_consumer_settings = custom_consumer_settings
        self._redirect_uri = redirect_uri
        self._settings = settings
        self._theme = theme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_metadata(self):
        """Gets the consumer_metadata of this Session.


        :return: The consumer_metadata of this Session.
        :rtype: ConsumerMetadata
        """
        return self._consumer_metadata

    @consumer_metadata.setter
    def consumer_metadata(self, consumer_metadata):
        """Sets the consumer_metadata of this Session.


        :param consumer_metadata: The consumer_metadata of this Session.
        :type consumer_metadata: ConsumerMetadata
        """

        self._consumer_metadata = consumer_metadata

    @property
    def custom_consumer_settings(self):
        """Gets the custom_consumer_settings of this Session.

        Custom consumer settings that are passed as part of the session.

        :return: The custom_consumer_settings of this Session.
        :rtype: Dict[str, object]
        """
        return self._custom_consumer_settings

    @custom_consumer_settings.setter
    def custom_consumer_settings(self, custom_consumer_settings):
        """Sets the custom_consumer_settings of this Session.

        Custom consumer settings that are passed as part of the session.

        :param custom_consumer_settings: The custom_consumer_settings of this Session.
        :type custom_consumer_settings: Dict[str, object]
        """

        self._custom_consumer_settings = custom_consumer_settings

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this Session.

        The URL to redirect the user to after the session has been configured.

        :return: The redirect_uri of this Session.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this Session.

        The URL to redirect the user to after the session has been configured.

        :param redirect_uri: The redirect_uri of this Session.
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri

    @property
    def settings(self):
        """Gets the settings of this Session.


        :return: The settings of this Session.
        :rtype: SessionSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Session.


        :param settings: The settings of this Session.
        :type settings: SessionSettings
        """

        self._settings = settings

    @property
    def theme(self):
        """Gets the theme of this Session.


        :return: The theme of this Session.
        :rtype: SessionTheme
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this Session.


        :param theme: The theme of this Session.
        :type theme: SessionTheme
        """

        self._theme = theme
