# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumer_connection import ConsumerConnection
from openapi_server.models.vault_event_type import VaultEventType
from openapi_server import util


class ConnectionEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity: ConsumerConnection=None, entity_id: str=None, entity_type: str=None, event_id: str=None, event_type: VaultEventType=None, execution_attempt: float=None, occurred_at: str=None, service_id: str=None):
        """ConnectionEvent - a model defined in OpenAPI

        :param entity: The entity of this ConnectionEvent.
        :param entity_id: The entity_id of this ConnectionEvent.
        :param entity_type: The entity_type of this ConnectionEvent.
        :param event_id: The event_id of this ConnectionEvent.
        :param event_type: The event_type of this ConnectionEvent.
        :param execution_attempt: The execution_attempt of this ConnectionEvent.
        :param occurred_at: The occurred_at of this ConnectionEvent.
        :param service_id: The service_id of this ConnectionEvent.
        """
        self.openapi_types = {
            'entity': ConsumerConnection,
            'entity_id': str,
            'entity_type': str,
            'event_id': str,
            'event_type': VaultEventType,
            'execution_attempt': float,
            'occurred_at': str,
            'service_id': str
        }

        self.attribute_map = {
            'entity': 'entity',
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'event_id': 'event_id',
            'event_type': 'event_type',
            'execution_attempt': 'execution_attempt',
            'occurred_at': 'occurred_at',
            'service_id': 'service_id'
        }

        self._entity = entity
        self._entity_id = entity_id
        self._entity_type = entity_type
        self._event_id = event_id
        self._event_type = event_type
        self._execution_attempt = execution_attempt
        self._occurred_at = occurred_at
        self._service_id = service_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionEvent of this ConnectionEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity(self):
        """Gets the entity of this ConnectionEvent.


        :return: The entity of this ConnectionEvent.
        :rtype: ConsumerConnection
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this ConnectionEvent.


        :param entity: The entity of this ConnectionEvent.
        :type entity: ConsumerConnection
        """

        self._entity = entity

    @property
    def entity_id(self):
        """Gets the entity_id of this ConnectionEvent.

        The service provider's ID of the entity that triggered this event

        :return: The entity_id of this ConnectionEvent.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ConnectionEvent.

        The service provider's ID of the entity that triggered this event

        :param entity_id: The entity_id of this ConnectionEvent.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this ConnectionEvent.

        The type entity that triggered this event

        :return: The entity_type of this ConnectionEvent.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this ConnectionEvent.

        The type entity that triggered this event

        :param entity_type: The entity_type of this ConnectionEvent.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def event_id(self):
        """Gets the event_id of this ConnectionEvent.

        Unique reference to this request event

        :return: The event_id of this ConnectionEvent.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this ConnectionEvent.

        Unique reference to this request event

        :param event_id: The event_id of this ConnectionEvent.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def event_type(self):
        """Gets the event_type of this ConnectionEvent.


        :return: The event_type of this ConnectionEvent.
        :rtype: VaultEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ConnectionEvent.


        :param event_type: The event_type of this ConnectionEvent.
        :type event_type: VaultEventType
        """

        self._event_type = event_type

    @property
    def execution_attempt(self):
        """Gets the execution_attempt of this ConnectionEvent.

        The current count this request event has been attempted

        :return: The execution_attempt of this ConnectionEvent.
        :rtype: float
        """
        return self._execution_attempt

    @execution_attempt.setter
    def execution_attempt(self, execution_attempt):
        """Sets the execution_attempt of this ConnectionEvent.

        The current count this request event has been attempted

        :param execution_attempt: The execution_attempt of this ConnectionEvent.
        :type execution_attempt: float
        """

        self._execution_attempt = execution_attempt

    @property
    def occurred_at(self):
        """Gets the occurred_at of this ConnectionEvent.

        ISO Datetime for when the original event occurred

        :return: The occurred_at of this ConnectionEvent.
        :rtype: str
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this ConnectionEvent.

        ISO Datetime for when the original event occurred

        :param occurred_at: The occurred_at of this ConnectionEvent.
        :type occurred_at: str
        """

        self._occurred_at = occurred_at

    @property
    def service_id(self):
        """Gets the service_id of this ConnectionEvent.

        Service provider identifier

        :return: The service_id of this ConnectionEvent.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ConnectionEvent.

        Service provider identifier

        :param service_id: The service_id of this ConnectionEvent.
        :type service_id: str
        """

        self._service_id = service_id
