# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumer_connection import ConsumerConnection
from openapi_server.models.consumer_metadata import ConsumerMetadata
from openapi_server.models.request_count_allocation import RequestCountAllocation
from openapi_server import util


class Consumer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregated_request_count: float=None, application_id: str=None, connections: List[ConsumerConnection]=None, consumer_id: str=None, created: str=None, metadata: ConsumerMetadata=None, modified: str=None, request_count_updated: str=None, request_counts: RequestCountAllocation=None, services: List[str]=None):
        """Consumer - a model defined in OpenAPI

        :param aggregated_request_count: The aggregated_request_count of this Consumer.
        :param application_id: The application_id of this Consumer.
        :param connections: The connections of this Consumer.
        :param consumer_id: The consumer_id of this Consumer.
        :param created: The created of this Consumer.
        :param metadata: The metadata of this Consumer.
        :param modified: The modified of this Consumer.
        :param request_count_updated: The request_count_updated of this Consumer.
        :param request_counts: The request_counts of this Consumer.
        :param services: The services of this Consumer.
        """
        self.openapi_types = {
            'aggregated_request_count': float,
            'application_id': str,
            'connections': List[ConsumerConnection],
            'consumer_id': str,
            'created': str,
            'metadata': ConsumerMetadata,
            'modified': str,
            'request_count_updated': str,
            'request_counts': RequestCountAllocation,
            'services': List[str]
        }

        self.attribute_map = {
            'aggregated_request_count': 'aggregated_request_count',
            'application_id': 'application_id',
            'connections': 'connections',
            'consumer_id': 'consumer_id',
            'created': 'created',
            'metadata': 'metadata',
            'modified': 'modified',
            'request_count_updated': 'request_count_updated',
            'request_counts': 'request_counts',
            'services': 'services'
        }

        self._aggregated_request_count = aggregated_request_count
        self._application_id = application_id
        self._connections = connections
        self._consumer_id = consumer_id
        self._created = created
        self._metadata = metadata
        self._modified = modified
        self._request_count_updated = request_count_updated
        self._request_counts = request_counts
        self._services = services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Consumer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Consumer of this Consumer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregated_request_count(self):
        """Gets the aggregated_request_count of this Consumer.


        :return: The aggregated_request_count of this Consumer.
        :rtype: float
        """
        return self._aggregated_request_count

    @aggregated_request_count.setter
    def aggregated_request_count(self, aggregated_request_count):
        """Sets the aggregated_request_count of this Consumer.


        :param aggregated_request_count: The aggregated_request_count of this Consumer.
        :type aggregated_request_count: float
        """

        self._aggregated_request_count = aggregated_request_count

    @property
    def application_id(self):
        """Gets the application_id of this Consumer.

        ID of your Apideck Application

        :return: The application_id of this Consumer.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Consumer.

        ID of your Apideck Application

        :param application_id: The application_id of this Consumer.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def connections(self):
        """Gets the connections of this Consumer.


        :return: The connections of this Consumer.
        :rtype: List[ConsumerConnection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this Consumer.


        :param connections: The connections of this Consumer.
        :type connections: List[ConsumerConnection]
        """

        self._connections = connections

    @property
    def consumer_id(self):
        """Gets the consumer_id of this Consumer.

        Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.

        :return: The consumer_id of this Consumer.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this Consumer.

        Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.

        :param consumer_id: The consumer_id of this Consumer.
        :type consumer_id: str
        """
        if consumer_id is None:
            raise ValueError("Invalid value for `consumer_id`, must not be `None`")

        self._consumer_id = consumer_id

    @property
    def created(self):
        """Gets the created of this Consumer.


        :return: The created of this Consumer.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Consumer.


        :param created: The created of this Consumer.
        :type created: str
        """

        self._created = created

    @property
    def metadata(self):
        """Gets the metadata of this Consumer.


        :return: The metadata of this Consumer.
        :rtype: ConsumerMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Consumer.


        :param metadata: The metadata of this Consumer.
        :type metadata: ConsumerMetadata
        """

        self._metadata = metadata

    @property
    def modified(self):
        """Gets the modified of this Consumer.


        :return: The modified of this Consumer.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Consumer.


        :param modified: The modified of this Consumer.
        :type modified: str
        """

        self._modified = modified

    @property
    def request_count_updated(self):
        """Gets the request_count_updated of this Consumer.


        :return: The request_count_updated of this Consumer.
        :rtype: str
        """
        return self._request_count_updated

    @request_count_updated.setter
    def request_count_updated(self, request_count_updated):
        """Sets the request_count_updated of this Consumer.


        :param request_count_updated: The request_count_updated of this Consumer.
        :type request_count_updated: str
        """

        self._request_count_updated = request_count_updated

    @property
    def request_counts(self):
        """Gets the request_counts of this Consumer.


        :return: The request_counts of this Consumer.
        :rtype: RequestCountAllocation
        """
        return self._request_counts

    @request_counts.setter
    def request_counts(self, request_counts):
        """Sets the request_counts of this Consumer.


        :param request_counts: The request_counts of this Consumer.
        :type request_counts: RequestCountAllocation
        """

        self._request_counts = request_counts

    @property
    def services(self):
        """Gets the services of this Consumer.


        :return: The services of this Consumer.
        :rtype: List[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Consumer.


        :param services: The services of this Consumer.
        :type services: List[str]
        """

        self._services = services
