# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_import_data_credentials import ConnectionImportDataCredentials
from openapi_server import util


class ConnectionImportData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials: ConnectionImportDataCredentials=None, metadata: Dict[str, object]=None, settings: object=None):
        """ConnectionImportData - a model defined in OpenAPI

        :param credentials: The credentials of this ConnectionImportData.
        :param metadata: The metadata of this ConnectionImportData.
        :param settings: The settings of this ConnectionImportData.
        """
        self.openapi_types = {
            'credentials': ConnectionImportDataCredentials,
            'metadata': Dict[str, object],
            'settings': object
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'metadata': 'metadata',
            'settings': 'settings'
        }

        self._credentials = credentials
        self._metadata = metadata
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionImportData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionImportData of this ConnectionImportData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials(self):
        """Gets the credentials of this ConnectionImportData.


        :return: The credentials of this ConnectionImportData.
        :rtype: ConnectionImportDataCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this ConnectionImportData.


        :param credentials: The credentials of this ConnectionImportData.
        :type credentials: ConnectionImportDataCredentials
        """

        self._credentials = credentials

    @property
    def metadata(self):
        """Gets the metadata of this ConnectionImportData.

        Attach your own consumer specific metadata

        :return: The metadata of this ConnectionImportData.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ConnectionImportData.

        Attach your own consumer specific metadata

        :param metadata: The metadata of this ConnectionImportData.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def settings(self):
        """Gets the settings of this ConnectionImportData.

        Connection settings. Values will persist to `form_fields` with corresponding id

        :return: The settings of this ConnectionImportData.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ConnectionImportData.

        Connection settings. Values will persist to `form_fields` with corresponding id

        :param settings: The settings of this ConnectionImportData.
        :type settings: object
        """

        self._settings = settings
