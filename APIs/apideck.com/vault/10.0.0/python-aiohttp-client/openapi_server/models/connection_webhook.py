# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unified_api_id import UnifiedApiId
import re
from openapi_server import util


class ConnectionWebhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, delivery_url: str=None, description: str=None, disabled_reason: str=None, events: List[str]=None, execute_base_url: str=None, id: str=None, status: str=None, unified_api: UnifiedApiId=None, updated_at: datetime=None):
        """ConnectionWebhook - a model defined in OpenAPI

        :param created_at: The created_at of this ConnectionWebhook.
        :param delivery_url: The delivery_url of this ConnectionWebhook.
        :param description: The description of this ConnectionWebhook.
        :param disabled_reason: The disabled_reason of this ConnectionWebhook.
        :param events: The events of this ConnectionWebhook.
        :param execute_base_url: The execute_base_url of this ConnectionWebhook.
        :param id: The id of this ConnectionWebhook.
        :param status: The status of this ConnectionWebhook.
        :param unified_api: The unified_api of this ConnectionWebhook.
        :param updated_at: The updated_at of this ConnectionWebhook.
        """
        self.openapi_types = {
            'created_at': datetime,
            'delivery_url': str,
            'description': str,
            'disabled_reason': str,
            'events': List[str],
            'execute_base_url': str,
            'id': str,
            'status': str,
            'unified_api': UnifiedApiId,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'delivery_url': 'delivery_url',
            'description': 'description',
            'disabled_reason': 'disabled_reason',
            'events': 'events',
            'execute_base_url': 'execute_base_url',
            'id': 'id',
            'status': 'status',
            'unified_api': 'unified_api',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._delivery_url = delivery_url
        self._description = description
        self._disabled_reason = disabled_reason
        self._events = events
        self._execute_base_url = execute_base_url
        self._id = id
        self._status = status
        self._unified_api = unified_api
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionWebhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionWebhook of this ConnectionWebhook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ConnectionWebhook.

        The date and time when the object was created.

        :return: The created_at of this ConnectionWebhook.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnectionWebhook.

        The date and time when the object was created.

        :param created_at: The created_at of this ConnectionWebhook.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def delivery_url(self):
        """Gets the delivery_url of this ConnectionWebhook.

        The delivery url of the webhook endpoint.

        :return: The delivery_url of this ConnectionWebhook.
        :rtype: str
        """
        return self._delivery_url

    @delivery_url.setter
    def delivery_url(self, delivery_url):
        """Sets the delivery_url of this ConnectionWebhook.

        The delivery url of the webhook endpoint.

        :param delivery_url: The delivery_url of this ConnectionWebhook.
        :type delivery_url: str
        """
        if delivery_url is None:
            raise ValueError("Invalid value for `delivery_url`, must not be `None`")
        if delivery_url is not None and not re.search(r'^(https?):\/\/', delivery_url):
            raise ValueError("Invalid value for `delivery_url`, must be a follow pattern or equal to `/^(https?):\/\//`")

        self._delivery_url = delivery_url

    @property
    def description(self):
        """Gets the description of this ConnectionWebhook.

        A description of the object.

        :return: The description of this ConnectionWebhook.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectionWebhook.

        A description of the object.

        :param description: The description of this ConnectionWebhook.
        :type description: str
        """

        self._description = description

    @property
    def disabled_reason(self):
        """Gets the disabled_reason of this ConnectionWebhook.

        Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.

        :return: The disabled_reason of this ConnectionWebhook.
        :rtype: str
        """
        return self._disabled_reason

    @disabled_reason.setter
    def disabled_reason(self, disabled_reason):
        """Sets the disabled_reason of this ConnectionWebhook.

        Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.

        :param disabled_reason: The disabled_reason of this ConnectionWebhook.
        :type disabled_reason: str
        """
        allowed_values = ["none", "retry_limit", "usage_limit"]  # noqa: E501
        if disabled_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `disabled_reason` ({0}), must be one of {1}"
                .format(disabled_reason, allowed_values)
            )

        self._disabled_reason = disabled_reason

    @property
    def events(self):
        """Gets the events of this ConnectionWebhook.

        The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.

        :return: The events of this ConnectionWebhook.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this ConnectionWebhook.

        The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.

        :param events: The events of this ConnectionWebhook.
        :type events: List[str]
        """
        allowed_values = ["*", "crm.activity.created", "crm.activity.updated", "crm.activity.deleted", "crm.company.created", "crm.company.updated", "crm.company.deleted", "crm.contact.created", "crm.contact.updated", "crm.contact.deleted", "crm.lead.created", "crm.lead.updated", "crm.lead.deleted", "crm.note.created", "crm.notes.updated", "crm.notes.deleted", "crm.opportunity.created", "crm.opportunity.updated", "crm.opportunity.deleted", "lead.lead.created", "lead.lead.updated", "lead.lead.deleted", "vault.connection.created", "vault.connection.updated", "vault.connection.disabled", "vault.connection.deleted", "vault.connection.callable", "vault.connection.revoked", "vault.connection.token_refresh.failed", "ats.job.created", "ats.job.updated", "ats.job.deleted", "ats.applicant.created", "ats.applicant.updated", "ats.applicant.deleted", "accounting.customer.created", "accounting.customer.updated", "accounting.customer.deleted", "accounting.invoice.created", "accounting.invoice.updated", "accounting.invoice.deleted", "accounting.invoice_item.created", "accounting.invoice_item.updated", "accounting.invoice_item.deleted", "accounting.ledger_account.created", "accounting.ledger_account.updated", "accounting.ledger_account.deleted", "accounting.tax_rate.created", "accounting.tax_rate.updated", "accounting.tax_rate.deleted", "accounting.bill.created", "accounting.bill.updated", "accounting.bill.deleted", "accounting.payment.created", "accounting.payment.updated", "accounting.payment.deleted", "accounting.supplier.created", "accounting.supplier.updated", "accounting.supplier.deleted", "accounting.purchase-order.created", "accounting.purchase-order.updated", "accounting.purchase-order.deleted", "pos.order.created", "pos.order.updated", "pos.order.deleted", "pos.product.created", "pos.product.updated", "pos.product.deleted", "pos.payment.created", "pos.payment.updated", "pos.payment.deleted", "pos.merchant.created", "pos.merchant.updated", "pos.merchant.deleted", "pos.location.created", "pos.location.updated", "pos.location.deleted", "pos.item.created", "pos.item.updated", "pos.item.deleted", "pos.modifier.created", "pos.modifier.updated", "pos.modifier.deleted", "pos.modifier-group.created", "pos.modifier-group.updated", "pos.modifier-group.deleted", "hris.employee.created", "hris.employee.updated", "hris.employee.deleted", "hris.employee.terminated", "hris.company.created", "hris.company.updated", "hris.company.deleted", "file-storage.file.created", "file-storage.file.updated", "file-storage.file.deleted", "issue-tracking.ticket.created", "issue-tracking.ticket.updated", "issue-tracking.ticket.deleted", "ats.application.created", "ats.application.updated", "ats.application.deleted"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(events) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def execute_base_url(self):
        """Gets the execute_base_url of this ConnectionWebhook.

        The Unify Base URL events from connectors will be sent to after service id is appended.

        :return: The execute_base_url of this ConnectionWebhook.
        :rtype: str
        """
        return self._execute_base_url

    @execute_base_url.setter
    def execute_base_url(self, execute_base_url):
        """Sets the execute_base_url of this ConnectionWebhook.

        The Unify Base URL events from connectors will be sent to after service id is appended.

        :param execute_base_url: The execute_base_url of this ConnectionWebhook.
        :type execute_base_url: str
        """
        if execute_base_url is None:
            raise ValueError("Invalid value for `execute_base_url`, must not be `None`")
        if execute_base_url is not None and not re.search(r'^(https?):\/\/', execute_base_url):
            raise ValueError("Invalid value for `execute_base_url`, must be a follow pattern or equal to `/^(https?):\/\//`")

        self._execute_base_url = execute_base_url

    @property
    def id(self):
        """Gets the id of this ConnectionWebhook.


        :return: The id of this ConnectionWebhook.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectionWebhook.


        :param id: The id of this ConnectionWebhook.
        :type id: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this ConnectionWebhook.

        The status of the webhook.

        :return: The status of this ConnectionWebhook.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectionWebhook.

        The status of the webhook.

        :param status: The status of this ConnectionWebhook.
        :type status: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def unified_api(self):
        """Gets the unified_api of this ConnectionWebhook.


        :return: The unified_api of this ConnectionWebhook.
        :rtype: UnifiedApiId
        """
        return self._unified_api

    @unified_api.setter
    def unified_api(self, unified_api):
        """Sets the unified_api of this ConnectionWebhook.


        :param unified_api: The unified_api of this ConnectionWebhook.
        :type unified_api: UnifiedApiId
        """
        if unified_api is None:
            raise ValueError("Invalid value for `unified_api`, must not be `None`")

        self._unified_api = unified_api

    @property
    def updated_at(self):
        """Gets the updated_at of this ConnectionWebhook.

        The date and time when the object was last updated.

        :return: The updated_at of this ConnectionWebhook.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConnectionWebhook.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this ConnectionWebhook.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
