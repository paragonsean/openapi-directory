# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduleWorkPatternEvenWeeks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hours_friday: float=None, hours_monday: float=None, hours_saturday: float=None, hours_sunday: float=None, hours_thursday: float=None, hours_tuesday: float=None, hours_wednesday: float=None):
        """ScheduleWorkPatternEvenWeeks - a model defined in OpenAPI

        :param hours_friday: The hours_friday of this ScheduleWorkPatternEvenWeeks.
        :param hours_monday: The hours_monday of this ScheduleWorkPatternEvenWeeks.
        :param hours_saturday: The hours_saturday of this ScheduleWorkPatternEvenWeeks.
        :param hours_sunday: The hours_sunday of this ScheduleWorkPatternEvenWeeks.
        :param hours_thursday: The hours_thursday of this ScheduleWorkPatternEvenWeeks.
        :param hours_tuesday: The hours_tuesday of this ScheduleWorkPatternEvenWeeks.
        :param hours_wednesday: The hours_wednesday of this ScheduleWorkPatternEvenWeeks.
        """
        self.openapi_types = {
            'hours_friday': float,
            'hours_monday': float,
            'hours_saturday': float,
            'hours_sunday': float,
            'hours_thursday': float,
            'hours_tuesday': float,
            'hours_wednesday': float
        }

        self.attribute_map = {
            'hours_friday': 'hours_friday',
            'hours_monday': 'hours_monday',
            'hours_saturday': 'hours_saturday',
            'hours_sunday': 'hours_sunday',
            'hours_thursday': 'hours_thursday',
            'hours_tuesday': 'hours_tuesday',
            'hours_wednesday': 'hours_wednesday'
        }

        self._hours_friday = hours_friday
        self._hours_monday = hours_monday
        self._hours_saturday = hours_saturday
        self._hours_sunday = hours_sunday
        self._hours_thursday = hours_thursday
        self._hours_tuesday = hours_tuesday
        self._hours_wednesday = hours_wednesday

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleWorkPatternEvenWeeks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Schedule_work_pattern_even_weeks of this ScheduleWorkPatternEvenWeeks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hours_friday(self):
        """Gets the hours_friday of this ScheduleWorkPatternEvenWeeks.


        :return: The hours_friday of this ScheduleWorkPatternEvenWeeks.
        :rtype: float
        """
        return self._hours_friday

    @hours_friday.setter
    def hours_friday(self, hours_friday):
        """Sets the hours_friday of this ScheduleWorkPatternEvenWeeks.


        :param hours_friday: The hours_friday of this ScheduleWorkPatternEvenWeeks.
        :type hours_friday: float
        """
        if hours_friday is not None and hours_friday > 24:
            raise ValueError("Invalid value for `hours_friday`, must be a value less than or equal to `24`")
        if hours_friday is not None and hours_friday < 0:
            raise ValueError("Invalid value for `hours_friday`, must be a value greater than or equal to `0`")

        self._hours_friday = hours_friday

    @property
    def hours_monday(self):
        """Gets the hours_monday of this ScheduleWorkPatternEvenWeeks.


        :return: The hours_monday of this ScheduleWorkPatternEvenWeeks.
        :rtype: float
        """
        return self._hours_monday

    @hours_monday.setter
    def hours_monday(self, hours_monday):
        """Sets the hours_monday of this ScheduleWorkPatternEvenWeeks.


        :param hours_monday: The hours_monday of this ScheduleWorkPatternEvenWeeks.
        :type hours_monday: float
        """
        if hours_monday is not None and hours_monday > 24:
            raise ValueError("Invalid value for `hours_monday`, must be a value less than or equal to `24`")
        if hours_monday is not None and hours_monday < 0:
            raise ValueError("Invalid value for `hours_monday`, must be a value greater than or equal to `0`")

        self._hours_monday = hours_monday

    @property
    def hours_saturday(self):
        """Gets the hours_saturday of this ScheduleWorkPatternEvenWeeks.


        :return: The hours_saturday of this ScheduleWorkPatternEvenWeeks.
        :rtype: float
        """
        return self._hours_saturday

    @hours_saturday.setter
    def hours_saturday(self, hours_saturday):
        """Sets the hours_saturday of this ScheduleWorkPatternEvenWeeks.


        :param hours_saturday: The hours_saturday of this ScheduleWorkPatternEvenWeeks.
        :type hours_saturday: float
        """
        if hours_saturday is not None and hours_saturday > 24:
            raise ValueError("Invalid value for `hours_saturday`, must be a value less than or equal to `24`")
        if hours_saturday is not None and hours_saturday < 0:
            raise ValueError("Invalid value for `hours_saturday`, must be a value greater than or equal to `0`")

        self._hours_saturday = hours_saturday

    @property
    def hours_sunday(self):
        """Gets the hours_sunday of this ScheduleWorkPatternEvenWeeks.


        :return: The hours_sunday of this ScheduleWorkPatternEvenWeeks.
        :rtype: float
        """
        return self._hours_sunday

    @hours_sunday.setter
    def hours_sunday(self, hours_sunday):
        """Sets the hours_sunday of this ScheduleWorkPatternEvenWeeks.


        :param hours_sunday: The hours_sunday of this ScheduleWorkPatternEvenWeeks.
        :type hours_sunday: float
        """
        if hours_sunday is not None and hours_sunday > 24:
            raise ValueError("Invalid value for `hours_sunday`, must be a value less than or equal to `24`")
        if hours_sunday is not None and hours_sunday < 0:
            raise ValueError("Invalid value for `hours_sunday`, must be a value greater than or equal to `0`")

        self._hours_sunday = hours_sunday

    @property
    def hours_thursday(self):
        """Gets the hours_thursday of this ScheduleWorkPatternEvenWeeks.


        :return: The hours_thursday of this ScheduleWorkPatternEvenWeeks.
        :rtype: float
        """
        return self._hours_thursday

    @hours_thursday.setter
    def hours_thursday(self, hours_thursday):
        """Sets the hours_thursday of this ScheduleWorkPatternEvenWeeks.


        :param hours_thursday: The hours_thursday of this ScheduleWorkPatternEvenWeeks.
        :type hours_thursday: float
        """
        if hours_thursday is not None and hours_thursday > 24:
            raise ValueError("Invalid value for `hours_thursday`, must be a value less than or equal to `24`")
        if hours_thursday is not None and hours_thursday < 0:
            raise ValueError("Invalid value for `hours_thursday`, must be a value greater than or equal to `0`")

        self._hours_thursday = hours_thursday

    @property
    def hours_tuesday(self):
        """Gets the hours_tuesday of this ScheduleWorkPatternEvenWeeks.


        :return: The hours_tuesday of this ScheduleWorkPatternEvenWeeks.
        :rtype: float
        """
        return self._hours_tuesday

    @hours_tuesday.setter
    def hours_tuesday(self, hours_tuesday):
        """Sets the hours_tuesday of this ScheduleWorkPatternEvenWeeks.


        :param hours_tuesday: The hours_tuesday of this ScheduleWorkPatternEvenWeeks.
        :type hours_tuesday: float
        """
        if hours_tuesday is not None and hours_tuesday > 24:
            raise ValueError("Invalid value for `hours_tuesday`, must be a value less than or equal to `24`")
        if hours_tuesday is not None and hours_tuesday < 0:
            raise ValueError("Invalid value for `hours_tuesday`, must be a value greater than or equal to `0`")

        self._hours_tuesday = hours_tuesday

    @property
    def hours_wednesday(self):
        """Gets the hours_wednesday of this ScheduleWorkPatternEvenWeeks.


        :return: The hours_wednesday of this ScheduleWorkPatternEvenWeeks.
        :rtype: float
        """
        return self._hours_wednesday

    @hours_wednesday.setter
    def hours_wednesday(self, hours_wednesday):
        """Sets the hours_wednesday of this ScheduleWorkPatternEvenWeeks.


        :param hours_wednesday: The hours_wednesday of this ScheduleWorkPatternEvenWeeks.
        :type hours_wednesday: float
        """
        if hours_wednesday is not None and hours_wednesday > 24:
            raise ValueError("Invalid value for `hours_wednesday`, must be a value less than or equal to `24`")
        if hours_wednesday is not None and hours_wednesday < 0:
            raise ValueError("Invalid value for `hours_wednesday`, must be a value greater than or equal to `0`")

        self._hours_wednesday = hours_wednesday
