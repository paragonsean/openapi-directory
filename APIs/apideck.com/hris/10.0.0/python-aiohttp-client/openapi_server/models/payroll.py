# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compensation import Compensation
from openapi_server.models.payroll_totals import PayrollTotals
import re
from openapi_server import util


class Payroll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_date: str=None, company_id: str=None, compensations: List[Compensation]=None, custom_mappings: object=None, end_date: str=None, id: str=None, processed: bool=None, processed_date: str=None, start_date: str=None, totals: PayrollTotals=None):
        """Payroll - a model defined in OpenAPI

        :param check_date: The check_date of this Payroll.
        :param company_id: The company_id of this Payroll.
        :param compensations: The compensations of this Payroll.
        :param custom_mappings: The custom_mappings of this Payroll.
        :param end_date: The end_date of this Payroll.
        :param id: The id of this Payroll.
        :param processed: The processed of this Payroll.
        :param processed_date: The processed_date of this Payroll.
        :param start_date: The start_date of this Payroll.
        :param totals: The totals of this Payroll.
        """
        self.openapi_types = {
            'check_date': str,
            'company_id': str,
            'compensations': List[Compensation],
            'custom_mappings': object,
            'end_date': str,
            'id': str,
            'processed': bool,
            'processed_date': str,
            'start_date': str,
            'totals': PayrollTotals
        }

        self.attribute_map = {
            'check_date': 'check_date',
            'company_id': 'company_id',
            'compensations': 'compensations',
            'custom_mappings': 'custom_mappings',
            'end_date': 'end_date',
            'id': 'id',
            'processed': 'processed',
            'processed_date': 'processed_date',
            'start_date': 'start_date',
            'totals': 'totals'
        }

        self._check_date = check_date
        self._company_id = company_id
        self._compensations = compensations
        self._custom_mappings = custom_mappings
        self._end_date = end_date
        self._id = id
        self._processed = processed
        self._processed_date = processed_date
        self._start_date = start_date
        self._totals = totals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payroll':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payroll of this Payroll.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_date(self):
        """Gets the check_date of this Payroll.

        The date on which employees will be paid for the payroll.

        :return: The check_date of this Payroll.
        :rtype: str
        """
        return self._check_date

    @check_date.setter
    def check_date(self, check_date):
        """Sets the check_date of this Payroll.

        The date on which employees will be paid for the payroll.

        :param check_date: The check_date of this Payroll.
        :type check_date: str
        """
        if check_date is None:
            raise ValueError("Invalid value for `check_date`, must not be `None`")
        if check_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', check_date):
            raise ValueError("Invalid value for `check_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._check_date = check_date

    @property
    def company_id(self):
        """Gets the company_id of this Payroll.

        The unique identifier of the company.

        :return: The company_id of this Payroll.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Payroll.

        The unique identifier of the company.

        :param company_id: The company_id of this Payroll.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def compensations(self):
        """Gets the compensations of this Payroll.

        An array of compensations for the payroll.

        :return: The compensations of this Payroll.
        :rtype: List[Compensation]
        """
        return self._compensations

    @compensations.setter
    def compensations(self, compensations):
        """Sets the compensations of this Payroll.

        An array of compensations for the payroll.

        :param compensations: The compensations of this Payroll.
        :type compensations: List[Compensation]
        """

        self._compensations = compensations

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Payroll.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Payroll.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Payroll.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Payroll.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def end_date(self):
        """Gets the end_date of this Payroll.

        The end date, inclusive, of the pay period.

        :return: The end_date of this Payroll.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Payroll.

        The end date, inclusive, of the pay period.

        :param end_date: The end_date of this Payroll.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")
        if end_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', end_date):
            raise ValueError("Invalid value for `end_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this Payroll.

        A unique identifier for an object.

        :return: The id of this Payroll.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payroll.

        A unique identifier for an object.

        :param id: The id of this Payroll.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def processed(self):
        """Gets the processed of this Payroll.

        Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.

        :return: The processed of this Payroll.
        :rtype: bool
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this Payroll.

        Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.

        :param processed: The processed of this Payroll.
        :type processed: bool
        """
        if processed is None:
            raise ValueError("Invalid value for `processed`, must not be `None`")

        self._processed = processed

    @property
    def processed_date(self):
        """Gets the processed_date of this Payroll.

        The date the payroll was processed.

        :return: The processed_date of this Payroll.
        :rtype: str
        """
        return self._processed_date

    @processed_date.setter
    def processed_date(self, processed_date):
        """Sets the processed_date of this Payroll.

        The date the payroll was processed.

        :param processed_date: The processed_date of this Payroll.
        :type processed_date: str
        """
        if processed_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', processed_date):
            raise ValueError("Invalid value for `processed_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._processed_date = processed_date

    @property
    def start_date(self):
        """Gets the start_date of this Payroll.

        The start date, inclusive, of the pay period.

        :return: The start_date of this Payroll.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Payroll.

        The start date, inclusive, of the pay period.

        :param start_date: The start_date of this Payroll.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")
        if start_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', start_date):
            raise ValueError("Invalid value for `start_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._start_date = start_date

    @property
    def totals(self):
        """Gets the totals of this Payroll.


        :return: The totals of this Payroll.
        :rtype: PayrollTotals
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this Payroll.


        :param totals: The totals of this Payroll.
        :type totals: PayrollTotals
        """

        self._totals = totals
