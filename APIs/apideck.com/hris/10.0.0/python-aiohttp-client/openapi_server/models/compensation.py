# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.benefit import Benefit
from openapi_server.models.deduction import Deduction
from openapi_server.models.tax import Tax
from openapi_server import util


class Compensation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefits: List[Benefit]=None, deductions: List[Deduction]=None, employee_id: str=None, gross_pay: float=None, net_pay: float=None, taxes: List[Tax]=None):
        """Compensation - a model defined in OpenAPI

        :param benefits: The benefits of this Compensation.
        :param deductions: The deductions of this Compensation.
        :param employee_id: The employee_id of this Compensation.
        :param gross_pay: The gross_pay of this Compensation.
        :param net_pay: The net_pay of this Compensation.
        :param taxes: The taxes of this Compensation.
        """
        self.openapi_types = {
            'benefits': List[Benefit],
            'deductions': List[Deduction],
            'employee_id': str,
            'gross_pay': float,
            'net_pay': float,
            'taxes': List[Tax]
        }

        self.attribute_map = {
            'benefits': 'benefits',
            'deductions': 'deductions',
            'employee_id': 'employee_id',
            'gross_pay': 'gross_pay',
            'net_pay': 'net_pay',
            'taxes': 'taxes'
        }

        self._benefits = benefits
        self._deductions = deductions
        self._employee_id = employee_id
        self._gross_pay = gross_pay
        self._net_pay = net_pay
        self._taxes = taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Compensation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Compensation of this Compensation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefits(self):
        """Gets the benefits of this Compensation.

        An array of employee benefits for the pay period.

        :return: The benefits of this Compensation.
        :rtype: List[Benefit]
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this Compensation.

        An array of employee benefits for the pay period.

        :param benefits: The benefits of this Compensation.
        :type benefits: List[Benefit]
        """

        self._benefits = benefits

    @property
    def deductions(self):
        """Gets the deductions of this Compensation.

        An array of employee deductions for the pay period.

        :return: The deductions of this Compensation.
        :rtype: List[Deduction]
        """
        return self._deductions

    @deductions.setter
    def deductions(self, deductions):
        """Sets the deductions of this Compensation.

        An array of employee deductions for the pay period.

        :param deductions: The deductions of this Compensation.
        :type deductions: List[Deduction]
        """

        self._deductions = deductions

    @property
    def employee_id(self):
        """Gets the employee_id of this Compensation.

        A unique identifier for an object.

        :return: The employee_id of this Compensation.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Compensation.

        A unique identifier for an object.

        :param employee_id: The employee_id of this Compensation.
        :type employee_id: str
        """
        if employee_id is None:
            raise ValueError("Invalid value for `employee_id`, must not be `None`")

        self._employee_id = employee_id

    @property
    def gross_pay(self):
        """Gets the gross_pay of this Compensation.

        The employee's gross pay. Only available when payroll has been processed

        :return: The gross_pay of this Compensation.
        :rtype: float
        """
        return self._gross_pay

    @gross_pay.setter
    def gross_pay(self, gross_pay):
        """Sets the gross_pay of this Compensation.

        The employee's gross pay. Only available when payroll has been processed

        :param gross_pay: The gross_pay of this Compensation.
        :type gross_pay: float
        """

        self._gross_pay = gross_pay

    @property
    def net_pay(self):
        """Gets the net_pay of this Compensation.

        The employee's net pay. Only available when payroll has been processed

        :return: The net_pay of this Compensation.
        :rtype: float
        """
        return self._net_pay

    @net_pay.setter
    def net_pay(self, net_pay):
        """Sets the net_pay of this Compensation.

        The employee's net pay. Only available when payroll has been processed

        :param net_pay: The net_pay of this Compensation.
        :type net_pay: float
        """

        self._net_pay = net_pay

    @property
    def taxes(self):
        """Gets the taxes of this Compensation.

        An array of employer and employee taxes for the pay period.

        :return: The taxes of this Compensation.
        :rtype: List[Tax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Compensation.

        An array of employer and employee taxes for the pay period.

        :param taxes: The taxes of this Compensation.
        :type taxes: List[Tax]
        """

        self._taxes = taxes
