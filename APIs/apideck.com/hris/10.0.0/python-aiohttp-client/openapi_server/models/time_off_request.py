# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_off_request_notes import TimeOffRequestNotes
import re
from openapi_server import util


class TimeOffRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, approval_date: str=None, created_at: datetime=None, created_by: str=None, custom_mappings: object=None, description: str=None, employee_id: str=None, end_date: str=None, id: str=None, notes: TimeOffRequestNotes=None, policy_id: str=None, request_date: str=None, request_type: str=None, start_date: str=None, status: str=None, units: str=None, updated_at: datetime=None, updated_by: str=None):
        """TimeOffRequest - a model defined in OpenAPI

        :param amount: The amount of this TimeOffRequest.
        :param approval_date: The approval_date of this TimeOffRequest.
        :param created_at: The created_at of this TimeOffRequest.
        :param created_by: The created_by of this TimeOffRequest.
        :param custom_mappings: The custom_mappings of this TimeOffRequest.
        :param description: The description of this TimeOffRequest.
        :param employee_id: The employee_id of this TimeOffRequest.
        :param end_date: The end_date of this TimeOffRequest.
        :param id: The id of this TimeOffRequest.
        :param notes: The notes of this TimeOffRequest.
        :param policy_id: The policy_id of this TimeOffRequest.
        :param request_date: The request_date of this TimeOffRequest.
        :param request_type: The request_type of this TimeOffRequest.
        :param start_date: The start_date of this TimeOffRequest.
        :param status: The status of this TimeOffRequest.
        :param units: The units of this TimeOffRequest.
        :param updated_at: The updated_at of this TimeOffRequest.
        :param updated_by: The updated_by of this TimeOffRequest.
        """
        self.openapi_types = {
            'amount': float,
            'approval_date': str,
            'created_at': datetime,
            'created_by': str,
            'custom_mappings': object,
            'description': str,
            'employee_id': str,
            'end_date': str,
            'id': str,
            'notes': TimeOffRequestNotes,
            'policy_id': str,
            'request_date': str,
            'request_type': str,
            'start_date': str,
            'status': str,
            'units': str,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'approval_date': 'approval_date',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_mappings': 'custom_mappings',
            'description': 'description',
            'employee_id': 'employee_id',
            'end_date': 'end_date',
            'id': 'id',
            'notes': 'notes',
            'policy_id': 'policy_id',
            'request_date': 'request_date',
            'request_type': 'request_type',
            'start_date': 'start_date',
            'status': 'status',
            'units': 'units',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._amount = amount
        self._approval_date = approval_date
        self._created_at = created_at
        self._created_by = created_by
        self._custom_mappings = custom_mappings
        self._description = description
        self._employee_id = employee_id
        self._end_date = end_date
        self._id = id
        self._notes = notes
        self._policy_id = policy_id
        self._request_date = request_date
        self._request_type = request_type
        self._start_date = start_date
        self._status = status
        self._units = units
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeOffRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeOffRequest of this TimeOffRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this TimeOffRequest.

        The amount of time off requested.

        :return: The amount of this TimeOffRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TimeOffRequest.

        The amount of time off requested.

        :param amount: The amount of this TimeOffRequest.
        :type amount: float
        """

        self._amount = amount

    @property
    def approval_date(self):
        """Gets the approval_date of this TimeOffRequest.

        The date the request was approved

        :return: The approval_date of this TimeOffRequest.
        :rtype: str
        """
        return self._approval_date

    @approval_date.setter
    def approval_date(self, approval_date):
        """Sets the approval_date of this TimeOffRequest.

        The date the request was approved

        :param approval_date: The approval_date of this TimeOffRequest.
        :type approval_date: str
        """
        if approval_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', approval_date):
            raise ValueError("Invalid value for `approval_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._approval_date = approval_date

    @property
    def created_at(self):
        """Gets the created_at of this TimeOffRequest.

        The date and time when the object was created.

        :return: The created_at of this TimeOffRequest.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TimeOffRequest.

        The date and time when the object was created.

        :param created_at: The created_at of this TimeOffRequest.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this TimeOffRequest.

        The user who created the object.

        :return: The created_by of this TimeOffRequest.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TimeOffRequest.

        The user who created the object.

        :param created_by: The created_by of this TimeOffRequest.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this TimeOffRequest.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this TimeOffRequest.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this TimeOffRequest.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this TimeOffRequest.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def description(self):
        """Gets the description of this TimeOffRequest.

        Description of the time off request.

        :return: The description of this TimeOffRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TimeOffRequest.

        Description of the time off request.

        :param description: The description of this TimeOffRequest.
        :type description: str
        """

        self._description = description

    @property
    def employee_id(self):
        """Gets the employee_id of this TimeOffRequest.

        ID of the employee

        :return: The employee_id of this TimeOffRequest.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this TimeOffRequest.

        ID of the employee

        :param employee_id: The employee_id of this TimeOffRequest.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def end_date(self):
        """Gets the end_date of this TimeOffRequest.

        The end date of the time off request.

        :return: The end_date of this TimeOffRequest.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TimeOffRequest.

        The end date of the time off request.

        :param end_date: The end_date of this TimeOffRequest.
        :type end_date: str
        """
        if end_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', end_date):
            raise ValueError("Invalid value for `end_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this TimeOffRequest.

        A unique identifier for an object.

        :return: The id of this TimeOffRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeOffRequest.

        A unique identifier for an object.

        :param id: The id of this TimeOffRequest.
        :type id: str
        """

        self._id = id

    @property
    def notes(self):
        """Gets the notes of this TimeOffRequest.


        :return: The notes of this TimeOffRequest.
        :rtype: TimeOffRequestNotes
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this TimeOffRequest.


        :param notes: The notes of this TimeOffRequest.
        :type notes: TimeOffRequestNotes
        """

        self._notes = notes

    @property
    def policy_id(self):
        """Gets the policy_id of this TimeOffRequest.

        ID of the policy

        :return: The policy_id of this TimeOffRequest.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this TimeOffRequest.

        ID of the policy

        :param policy_id: The policy_id of this TimeOffRequest.
        :type policy_id: str
        """

        self._policy_id = policy_id

    @property
    def request_date(self):
        """Gets the request_date of this TimeOffRequest.

        The date the request was made.

        :return: The request_date of this TimeOffRequest.
        :rtype: str
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this TimeOffRequest.

        The date the request was made.

        :param request_date: The request_date of this TimeOffRequest.
        :type request_date: str
        """
        if request_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', request_date):
            raise ValueError("Invalid value for `request_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._request_date = request_date

    @property
    def request_type(self):
        """Gets the request_type of this TimeOffRequest.

        The type of request

        :return: The request_type of this TimeOffRequest.
        :rtype: str
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this TimeOffRequest.

        The type of request

        :param request_type: The request_type of this TimeOffRequest.
        :type request_type: str
        """
        allowed_values = [None,"vacation", "sick", "personal", "jury_duty", "volunteer", "bereavement", "other"]  # noqa: E501
        if request_type not in allowed_values:
            raise ValueError(
                "Invalid value for `request_type` ({0}), must be one of {1}"
                .format(request_type, allowed_values)
            )

        self._request_type = request_type

    @property
    def start_date(self):
        """Gets the start_date of this TimeOffRequest.

        The start date of the time off request.

        :return: The start_date of this TimeOffRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TimeOffRequest.

        The start date of the time off request.

        :param start_date: The start_date of this TimeOffRequest.
        :type start_date: str
        """
        if start_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', start_date):
            raise ValueError("Invalid value for `start_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this TimeOffRequest.

        The status of the time off request.

        :return: The status of this TimeOffRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TimeOffRequest.

        The status of the time off request.

        :param status: The status of this TimeOffRequest.
        :type status: str
        """
        allowed_values = [None,"requested", "approved", "declined", "cancelled", "deleted", "other"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def units(self):
        """Gets the units of this TimeOffRequest.

        The unit of time off requested. Possible values include: `hours`, `days`, or `other`.

        :return: The units of this TimeOffRequest.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this TimeOffRequest.

        The unit of time off requested. Possible values include: `hours`, `days`, or `other`.

        :param units: The units of this TimeOffRequest.
        :type units: str
        """
        allowed_values = [None,"days", "hours", "other"]  # noqa: E501
        if units not in allowed_values:
            raise ValueError(
                "Invalid value for `units` ({0}), must be one of {1}"
                .format(units, allowed_values)
            )

        self._units = units

    @property
    def updated_at(self):
        """Gets the updated_at of this TimeOffRequest.

        The date and time when the object was last updated.

        :return: The updated_at of this TimeOffRequest.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TimeOffRequest.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this TimeOffRequest.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this TimeOffRequest.

        The user who last updated the object.

        :return: The updated_by of this TimeOffRequest.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this TimeOffRequest.

        The user who last updated the object.

        :param updated_by: The updated_by of this TimeOffRequest.
        :type updated_by: str
        """

        self._updated_by = updated_by
