# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmployeeEmploymentRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sub_type: str=None, type: str=None):
        """EmployeeEmploymentRole - a model defined in OpenAPI

        :param sub_type: The sub_type of this EmployeeEmploymentRole.
        :param type: The type of this EmployeeEmploymentRole.
        """
        self.openapi_types = {
            'sub_type': str,
            'type': str
        }

        self.attribute_map = {
            'sub_type': 'sub_type',
            'type': 'type'
        }

        self._sub_type = sub_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmployeeEmploymentRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Employee_employment_role of this EmployeeEmploymentRole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_type(self):
        """Gets the sub_type of this EmployeeEmploymentRole.

        The work schedule of the employee.

        :return: The sub_type of this EmployeeEmploymentRole.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this EmployeeEmploymentRole.

        The work schedule of the employee.

        :param sub_type: The sub_type of this EmployeeEmploymentRole.
        :type sub_type: str
        """
        allowed_values = [None,"full_time", "part_time", "hourly", "other"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def type(self):
        """Gets the type of this EmployeeEmploymentRole.

        The type of employment relationship the employee has with the organization.

        :return: The type of this EmployeeEmploymentRole.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EmployeeEmploymentRole.

        The type of employment relationship the employee has with the organization.

        :param type: The type of this EmployeeEmploymentRole.
        :type type: str
        """
        allowed_values = [None,"contractor", "employee", "freelance", "temp", "internship", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
