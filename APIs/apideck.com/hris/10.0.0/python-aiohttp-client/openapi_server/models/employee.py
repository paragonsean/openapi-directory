# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.custom_field import CustomField
from openapi_server.models.email import Email
from openapi_server.models.employee_compensation import EmployeeCompensation
from openapi_server.models.employee_employment_role import EmployeeEmploymentRole
from openapi_server.models.employee_job import EmployeeJob
from openapi_server.models.employee_manager import EmployeeManager
from openapi_server.models.employment_status import EmploymentStatus
from openapi_server.models.gender import Gender
from openapi_server.models.person import Person
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.probation_period import ProbationPeriod
from openapi_server.models.social_link import SocialLink
from openapi_server.models.team import Team
from openapi_server import util


class Employee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[Address]=None, bank_accounts: List[BankAccount]=None, birthday: date=None, company_id: str=None, company_name: str=None, compensations: List[EmployeeCompensation]=None, country_of_birth: str=None, created_at: datetime=None, created_by: str=None, custom_fields: List[CustomField]=None, custom_mappings: object=None, deceased_on: date=None, deleted: bool=None, department: str=None, department_id: str=None, department_name: str=None, description: str=None, dietary_preference: str=None, direct_reports: List[str]=None, display_name: str=None, division: str=None, division_id: str=None, emails: List[Email]=None, employee_number: str=None, employment_end_date: str=None, employment_role: EmployeeEmploymentRole=None, employment_start_date: str=None, employment_status: EmploymentStatus=None, ethnicity: str=None, first_name: str=None, food_allergies: List[str]=None, gender: Gender=None, id: str=None, initials: str=None, jobs: List[EmployeeJob]=None, languages: List[str]=None, last_name: str=None, leaving_reason: str=None, manager: EmployeeManager=None, marital_status: str=None, middle_name: str=None, nationalities: List[str]=None, partner: Person=None, phone_numbers: List[PhoneNumber]=None, photo_url: str=None, preferred_language: str=None, preferred_name: str=None, probation_period: ProbationPeriod=None, pronouns: str=None, record_url: str=None, row_version: str=None, salutation: str=None, social_links: List[SocialLink]=None, social_security_number: str=None, source: str=None, source_id: str=None, tags: List[str]=None, tax_code: str=None, tax_id: str=None, team: Team=None, timezone: str=None, title: str=None, updated_at: datetime=None, updated_by: str=None, works_remote: bool=None):
        """Employee - a model defined in OpenAPI

        :param addresses: The addresses of this Employee.
        :param bank_accounts: The bank_accounts of this Employee.
        :param birthday: The birthday of this Employee.
        :param company_id: The company_id of this Employee.
        :param company_name: The company_name of this Employee.
        :param compensations: The compensations of this Employee.
        :param country_of_birth: The country_of_birth of this Employee.
        :param created_at: The created_at of this Employee.
        :param created_by: The created_by of this Employee.
        :param custom_fields: The custom_fields of this Employee.
        :param custom_mappings: The custom_mappings of this Employee.
        :param deceased_on: The deceased_on of this Employee.
        :param deleted: The deleted of this Employee.
        :param department: The department of this Employee.
        :param department_id: The department_id of this Employee.
        :param department_name: The department_name of this Employee.
        :param description: The description of this Employee.
        :param dietary_preference: The dietary_preference of this Employee.
        :param direct_reports: The direct_reports of this Employee.
        :param display_name: The display_name of this Employee.
        :param division: The division of this Employee.
        :param division_id: The division_id of this Employee.
        :param emails: The emails of this Employee.
        :param employee_number: The employee_number of this Employee.
        :param employment_end_date: The employment_end_date of this Employee.
        :param employment_role: The employment_role of this Employee.
        :param employment_start_date: The employment_start_date of this Employee.
        :param employment_status: The employment_status of this Employee.
        :param ethnicity: The ethnicity of this Employee.
        :param first_name: The first_name of this Employee.
        :param food_allergies: The food_allergies of this Employee.
        :param gender: The gender of this Employee.
        :param id: The id of this Employee.
        :param initials: The initials of this Employee.
        :param jobs: The jobs of this Employee.
        :param languages: The languages of this Employee.
        :param last_name: The last_name of this Employee.
        :param leaving_reason: The leaving_reason of this Employee.
        :param manager: The manager of this Employee.
        :param marital_status: The marital_status of this Employee.
        :param middle_name: The middle_name of this Employee.
        :param nationalities: The nationalities of this Employee.
        :param partner: The partner of this Employee.
        :param phone_numbers: The phone_numbers of this Employee.
        :param photo_url: The photo_url of this Employee.
        :param preferred_language: The preferred_language of this Employee.
        :param preferred_name: The preferred_name of this Employee.
        :param probation_period: The probation_period of this Employee.
        :param pronouns: The pronouns of this Employee.
        :param record_url: The record_url of this Employee.
        :param row_version: The row_version of this Employee.
        :param salutation: The salutation of this Employee.
        :param social_links: The social_links of this Employee.
        :param social_security_number: The social_security_number of this Employee.
        :param source: The source of this Employee.
        :param source_id: The source_id of this Employee.
        :param tags: The tags of this Employee.
        :param tax_code: The tax_code of this Employee.
        :param tax_id: The tax_id of this Employee.
        :param team: The team of this Employee.
        :param timezone: The timezone of this Employee.
        :param title: The title of this Employee.
        :param updated_at: The updated_at of this Employee.
        :param updated_by: The updated_by of this Employee.
        :param works_remote: The works_remote of this Employee.
        """
        self.openapi_types = {
            'addresses': List[Address],
            'bank_accounts': List[BankAccount],
            'birthday': date,
            'company_id': str,
            'company_name': str,
            'compensations': List[EmployeeCompensation],
            'country_of_birth': str,
            'created_at': datetime,
            'created_by': str,
            'custom_fields': List[CustomField],
            'custom_mappings': object,
            'deceased_on': date,
            'deleted': bool,
            'department': str,
            'department_id': str,
            'department_name': str,
            'description': str,
            'dietary_preference': str,
            'direct_reports': List[str],
            'display_name': str,
            'division': str,
            'division_id': str,
            'emails': List[Email],
            'employee_number': str,
            'employment_end_date': str,
            'employment_role': EmployeeEmploymentRole,
            'employment_start_date': str,
            'employment_status': EmploymentStatus,
            'ethnicity': str,
            'first_name': str,
            'food_allergies': List[str],
            'gender': Gender,
            'id': str,
            'initials': str,
            'jobs': List[EmployeeJob],
            'languages': List[str],
            'last_name': str,
            'leaving_reason': str,
            'manager': EmployeeManager,
            'marital_status': str,
            'middle_name': str,
            'nationalities': List[str],
            'partner': Person,
            'phone_numbers': List[PhoneNumber],
            'photo_url': str,
            'preferred_language': str,
            'preferred_name': str,
            'probation_period': ProbationPeriod,
            'pronouns': str,
            'record_url': str,
            'row_version': str,
            'salutation': str,
            'social_links': List[SocialLink],
            'social_security_number': str,
            'source': str,
            'source_id': str,
            'tags': List[str],
            'tax_code': str,
            'tax_id': str,
            'team': Team,
            'timezone': str,
            'title': str,
            'updated_at': datetime,
            'updated_by': str,
            'works_remote': bool
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'bank_accounts': 'bank_accounts',
            'birthday': 'birthday',
            'company_id': 'company_id',
            'company_name': 'company_name',
            'compensations': 'compensations',
            'country_of_birth': 'country_of_birth',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_fields': 'custom_fields',
            'custom_mappings': 'custom_mappings',
            'deceased_on': 'deceased_on',
            'deleted': 'deleted',
            'department': 'department',
            'department_id': 'department_id',
            'department_name': 'department_name',
            'description': 'description',
            'dietary_preference': 'dietary_preference',
            'direct_reports': 'direct_reports',
            'display_name': 'display_name',
            'division': 'division',
            'division_id': 'division_id',
            'emails': 'emails',
            'employee_number': 'employee_number',
            'employment_end_date': 'employment_end_date',
            'employment_role': 'employment_role',
            'employment_start_date': 'employment_start_date',
            'employment_status': 'employment_status',
            'ethnicity': 'ethnicity',
            'first_name': 'first_name',
            'food_allergies': 'food_allergies',
            'gender': 'gender',
            'id': 'id',
            'initials': 'initials',
            'jobs': 'jobs',
            'languages': 'languages',
            'last_name': 'last_name',
            'leaving_reason': 'leaving_reason',
            'manager': 'manager',
            'marital_status': 'marital_status',
            'middle_name': 'middle_name',
            'nationalities': 'nationalities',
            'partner': 'partner',
            'phone_numbers': 'phone_numbers',
            'photo_url': 'photo_url',
            'preferred_language': 'preferred_language',
            'preferred_name': 'preferred_name',
            'probation_period': 'probation_period',
            'pronouns': 'pronouns',
            'record_url': 'record_url',
            'row_version': 'row_version',
            'salutation': 'salutation',
            'social_links': 'social_links',
            'social_security_number': 'social_security_number',
            'source': 'source',
            'source_id': 'source_id',
            'tags': 'tags',
            'tax_code': 'tax_code',
            'tax_id': 'tax_id',
            'team': 'team',
            'timezone': 'timezone',
            'title': 'title',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'works_remote': 'works_remote'
        }

        self._addresses = addresses
        self._bank_accounts = bank_accounts
        self._birthday = birthday
        self._company_id = company_id
        self._company_name = company_name
        self._compensations = compensations
        self._country_of_birth = country_of_birth
        self._created_at = created_at
        self._created_by = created_by
        self._custom_fields = custom_fields
        self._custom_mappings = custom_mappings
        self._deceased_on = deceased_on
        self._deleted = deleted
        self._department = department
        self._department_id = department_id
        self._department_name = department_name
        self._description = description
        self._dietary_preference = dietary_preference
        self._direct_reports = direct_reports
        self._display_name = display_name
        self._division = division
        self._division_id = division_id
        self._emails = emails
        self._employee_number = employee_number
        self._employment_end_date = employment_end_date
        self._employment_role = employment_role
        self._employment_start_date = employment_start_date
        self._employment_status = employment_status
        self._ethnicity = ethnicity
        self._first_name = first_name
        self._food_allergies = food_allergies
        self._gender = gender
        self._id = id
        self._initials = initials
        self._jobs = jobs
        self._languages = languages
        self._last_name = last_name
        self._leaving_reason = leaving_reason
        self._manager = manager
        self._marital_status = marital_status
        self._middle_name = middle_name
        self._nationalities = nationalities
        self._partner = partner
        self._phone_numbers = phone_numbers
        self._photo_url = photo_url
        self._preferred_language = preferred_language
        self._preferred_name = preferred_name
        self._probation_period = probation_period
        self._pronouns = pronouns
        self._record_url = record_url
        self._row_version = row_version
        self._salutation = salutation
        self._social_links = social_links
        self._social_security_number = social_security_number
        self._source = source
        self._source_id = source_id
        self._tags = tags
        self._tax_code = tax_code
        self._tax_id = tax_id
        self._team = team
        self._timezone = timezone
        self._title = title
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._works_remote = works_remote

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Employee of this Employee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this Employee.


        :return: The addresses of this Employee.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Employee.


        :param addresses: The addresses of this Employee.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def bank_accounts(self):
        """Gets the bank_accounts of this Employee.


        :return: The bank_accounts of this Employee.
        :rtype: List[BankAccount]
        """
        return self._bank_accounts

    @bank_accounts.setter
    def bank_accounts(self, bank_accounts):
        """Sets the bank_accounts of this Employee.


        :param bank_accounts: The bank_accounts of this Employee.
        :type bank_accounts: List[BankAccount]
        """

        self._bank_accounts = bank_accounts

    @property
    def birthday(self):
        """Gets the birthday of this Employee.

        The date of birth of the person.

        :return: The birthday of this Employee.
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this Employee.

        The date of birth of the person.

        :param birthday: The birthday of this Employee.
        :type birthday: date
        """

        self._birthday = birthday

    @property
    def company_id(self):
        """Gets the company_id of this Employee.

        The unique identifier of the company.

        :return: The company_id of this Employee.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Employee.

        The unique identifier of the company.

        :param company_id: The company_id of this Employee.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def company_name(self):
        """Gets the company_name of this Employee.

        The name of the company.

        :return: The company_name of this Employee.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Employee.

        The name of the company.

        :param company_name: The company_name of this Employee.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def compensations(self):
        """Gets the compensations of this Employee.


        :return: The compensations of this Employee.
        :rtype: List[EmployeeCompensation]
        """
        return self._compensations

    @compensations.setter
    def compensations(self, compensations):
        """Sets the compensations of this Employee.


        :param compensations: The compensations of this Employee.
        :type compensations: List[EmployeeCompensation]
        """

        self._compensations = compensations

    @property
    def country_of_birth(self):
        """Gets the country_of_birth of this Employee.

        Country code according to ISO 3166-1 alpha-2.

        :return: The country_of_birth of this Employee.
        :rtype: str
        """
        return self._country_of_birth

    @country_of_birth.setter
    def country_of_birth(self, country_of_birth):
        """Sets the country_of_birth of this Employee.

        Country code according to ISO 3166-1 alpha-2.

        :param country_of_birth: The country_of_birth of this Employee.
        :type country_of_birth: str
        """
        if country_of_birth is not None and len(country_of_birth) > 2:
            raise ValueError("Invalid value for `country_of_birth`, length must be less than or equal to `2`")
        if country_of_birth is not None and len(country_of_birth) < 2:
            raise ValueError("Invalid value for `country_of_birth`, length must be greater than or equal to `2`")

        self._country_of_birth = country_of_birth

    @property
    def created_at(self):
        """Gets the created_at of this Employee.

        The date and time when the object was created.

        :return: The created_at of this Employee.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Employee.

        The date and time when the object was created.

        :param created_at: The created_at of this Employee.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Employee.

        The user who created the object.

        :return: The created_by of this Employee.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Employee.

        The user who created the object.

        :param created_by: The created_by of this Employee.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Employee.


        :return: The custom_fields of this Employee.
        :rtype: List[CustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Employee.


        :param custom_fields: The custom_fields of this Employee.
        :type custom_fields: List[CustomField]
        """

        self._custom_fields = custom_fields

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Employee.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Employee.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Employee.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Employee.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def deceased_on(self):
        """Gets the deceased_on of this Employee.

        The date the person deceased.

        :return: The deceased_on of this Employee.
        :rtype: date
        """
        return self._deceased_on

    @deceased_on.setter
    def deceased_on(self, deceased_on):
        """Sets the deceased_on of this Employee.

        The date the person deceased.

        :param deceased_on: The deceased_on of this Employee.
        :type deceased_on: date
        """

        self._deceased_on = deceased_on

    @property
    def deleted(self):
        """Gets the deleted of this Employee.

        Flag to indicate if the object is deleted.

        :return: The deleted of this Employee.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Employee.

        Flag to indicate if the object is deleted.

        :param deleted: The deleted of this Employee.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def department(self):
        """Gets the department of this Employee.

        The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.

        :return: The department of this Employee.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Employee.

        The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.

        :param department: The department of this Employee.
        :type department: str
        """

        self._department = department

    @property
    def department_id(self):
        """Gets the department_id of this Employee.

        Unique identifier of the department ID this employee belongs to.

        :return: The department_id of this Employee.
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this Employee.

        Unique identifier of the department ID this employee belongs to.

        :param department_id: The department_id of this Employee.
        :type department_id: str
        """

        self._department_id = department_id

    @property
    def department_name(self):
        """Gets the department_name of this Employee.

        Name of the department this employee belongs to.

        :return: The department_name of this Employee.
        :rtype: str
        """
        return self._department_name

    @department_name.setter
    def department_name(self, department_name):
        """Sets the department_name of this Employee.

        Name of the department this employee belongs to.

        :param department_name: The department_name of this Employee.
        :type department_name: str
        """

        self._department_name = department_name

    @property
    def description(self):
        """Gets the description of this Employee.

        A description of the object.

        :return: The description of this Employee.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Employee.

        A description of the object.

        :param description: The description of this Employee.
        :type description: str
        """

        self._description = description

    @property
    def dietary_preference(self):
        """Gets the dietary_preference of this Employee.

        Indicate the employee's dietary preference.

        :return: The dietary_preference of this Employee.
        :rtype: str
        """
        return self._dietary_preference

    @dietary_preference.setter
    def dietary_preference(self, dietary_preference):
        """Sets the dietary_preference of this Employee.

        Indicate the employee's dietary preference.

        :param dietary_preference: The dietary_preference of this Employee.
        :type dietary_preference: str
        """

        self._dietary_preference = dietary_preference

    @property
    def direct_reports(self):
        """Gets the direct_reports of this Employee.

        Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.

        :return: The direct_reports of this Employee.
        :rtype: List[str]
        """
        return self._direct_reports

    @direct_reports.setter
    def direct_reports(self, direct_reports):
        """Sets the direct_reports of this Employee.

        Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.

        :param direct_reports: The direct_reports of this Employee.
        :type direct_reports: List[str]
        """

        self._direct_reports = direct_reports

    @property
    def display_name(self):
        """Gets the display_name of this Employee.

        The name used to display the employee, often a combination of their first and last names.

        :return: The display_name of this Employee.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Employee.

        The name used to display the employee, often a combination of their first and last names.

        :param display_name: The display_name of this Employee.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def division(self):
        """Gets the division of this Employee.

        The division the person is currently in. Usually a collection of departments or teams or regions.

        :return: The division of this Employee.
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this Employee.

        The division the person is currently in. Usually a collection of departments or teams or regions.

        :param division: The division of this Employee.
        :type division: str
        """

        self._division = division

    @property
    def division_id(self):
        """Gets the division_id of this Employee.

        Unique identifier of the division this employee belongs to.

        :return: The division_id of this Employee.
        :rtype: str
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this Employee.

        Unique identifier of the division this employee belongs to.

        :param division_id: The division_id of this Employee.
        :type division_id: str
        """

        self._division_id = division_id

    @property
    def emails(self):
        """Gets the emails of this Employee.


        :return: The emails of this Employee.
        :rtype: List[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Employee.


        :param emails: The emails of this Employee.
        :type emails: List[Email]
        """

        self._emails = emails

    @property
    def employee_number(self):
        """Gets the employee_number of this Employee.

        An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.

        :return: The employee_number of this Employee.
        :rtype: str
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this Employee.

        An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.

        :param employee_number: The employee_number of this Employee.
        :type employee_number: str
        """

        self._employee_number = employee_number

    @property
    def employment_end_date(self):
        """Gets the employment_end_date of this Employee.

        An End Date is the date that the employee ended working at the company

        :return: The employment_end_date of this Employee.
        :rtype: str
        """
        return self._employment_end_date

    @employment_end_date.setter
    def employment_end_date(self, employment_end_date):
        """Sets the employment_end_date of this Employee.

        An End Date is the date that the employee ended working at the company

        :param employment_end_date: The employment_end_date of this Employee.
        :type employment_end_date: str
        """

        self._employment_end_date = employment_end_date

    @property
    def employment_role(self):
        """Gets the employment_role of this Employee.


        :return: The employment_role of this Employee.
        :rtype: EmployeeEmploymentRole
        """
        return self._employment_role

    @employment_role.setter
    def employment_role(self, employment_role):
        """Sets the employment_role of this Employee.


        :param employment_role: The employment_role of this Employee.
        :type employment_role: EmployeeEmploymentRole
        """

        self._employment_role = employment_role

    @property
    def employment_start_date(self):
        """Gets the employment_start_date of this Employee.

        A Start Date is the date that the employee started working at the company

        :return: The employment_start_date of this Employee.
        :rtype: str
        """
        return self._employment_start_date

    @employment_start_date.setter
    def employment_start_date(self, employment_start_date):
        """Sets the employment_start_date of this Employee.

        A Start Date is the date that the employee started working at the company

        :param employment_start_date: The employment_start_date of this Employee.
        :type employment_start_date: str
        """

        self._employment_start_date = employment_start_date

    @property
    def employment_status(self):
        """Gets the employment_status of this Employee.


        :return: The employment_status of this Employee.
        :rtype: EmploymentStatus
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this Employee.


        :param employment_status: The employment_status of this Employee.
        :type employment_status: EmploymentStatus
        """

        self._employment_status = employment_status

    @property
    def ethnicity(self):
        """Gets the ethnicity of this Employee.

        The ethnicity of the employee

        :return: The ethnicity of this Employee.
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this Employee.

        The ethnicity of the employee

        :param ethnicity: The ethnicity of this Employee.
        :type ethnicity: str
        """

        self._ethnicity = ethnicity

    @property
    def first_name(self):
        """Gets the first_name of this Employee.

        The first name of the person.

        :return: The first_name of this Employee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Employee.

        The first name of the person.

        :param first_name: The first_name of this Employee.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def food_allergies(self):
        """Gets the food_allergies of this Employee.

        Indicate the employee's food allergies.

        :return: The food_allergies of this Employee.
        :rtype: List[str]
        """
        return self._food_allergies

    @food_allergies.setter
    def food_allergies(self, food_allergies):
        """Sets the food_allergies of this Employee.

        Indicate the employee's food allergies.

        :param food_allergies: The food_allergies of this Employee.
        :type food_allergies: List[str]
        """

        self._food_allergies = food_allergies

    @property
    def gender(self):
        """Gets the gender of this Employee.


        :return: The gender of this Employee.
        :rtype: Gender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Employee.


        :param gender: The gender of this Employee.
        :type gender: Gender
        """

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this Employee.

        A unique identifier for an object.

        :return: The id of this Employee.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Employee.

        A unique identifier for an object.

        :param id: The id of this Employee.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def initials(self):
        """Gets the initials of this Employee.

        The initials of the person, usually derived from their first, middle, and last names.

        :return: The initials of this Employee.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this Employee.

        The initials of the person, usually derived from their first, middle, and last names.

        :param initials: The initials of this Employee.
        :type initials: str
        """

        self._initials = initials

    @property
    def jobs(self):
        """Gets the jobs of this Employee.


        :return: The jobs of this Employee.
        :rtype: List[EmployeeJob]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this Employee.


        :param jobs: The jobs of this Employee.
        :type jobs: List[EmployeeJob]
        """

        self._jobs = jobs

    @property
    def languages(self):
        """Gets the languages of this Employee.


        :return: The languages of this Employee.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Employee.


        :param languages: The languages of this Employee.
        :type languages: List[str]
        """

        self._languages = languages

    @property
    def last_name(self):
        """Gets the last_name of this Employee.

        The last name of the person.

        :return: The last_name of this Employee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Employee.

        The last name of the person.

        :param last_name: The last_name of this Employee.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def leaving_reason(self):
        """Gets the leaving_reason of this Employee.

        The reason because the employment ended.

        :return: The leaving_reason of this Employee.
        :rtype: str
        """
        return self._leaving_reason

    @leaving_reason.setter
    def leaving_reason(self, leaving_reason):
        """Sets the leaving_reason of this Employee.

        The reason because the employment ended.

        :param leaving_reason: The leaving_reason of this Employee.
        :type leaving_reason: str
        """
        allowed_values = [None,"dismissed", "resigned", "redundancy", "other"]  # noqa: E501
        if leaving_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `leaving_reason` ({0}), must be one of {1}"
                .format(leaving_reason, allowed_values)
            )

        self._leaving_reason = leaving_reason

    @property
    def manager(self):
        """Gets the manager of this Employee.


        :return: The manager of this Employee.
        :rtype: EmployeeManager
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this Employee.


        :param manager: The manager of this Employee.
        :type manager: EmployeeManager
        """

        self._manager = manager

    @property
    def marital_status(self):
        """Gets the marital_status of this Employee.

        The marital status of the employee.

        :return: The marital_status of this Employee.
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this Employee.

        The marital status of the employee.

        :param marital_status: The marital_status of this Employee.
        :type marital_status: str
        """

        self._marital_status = marital_status

    @property
    def middle_name(self):
        """Gets the middle_name of this Employee.

        Middle name of the person.

        :return: The middle_name of this Employee.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Employee.

        Middle name of the person.

        :param middle_name: The middle_name of this Employee.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def nationalities(self):
        """Gets the nationalities of this Employee.


        :return: The nationalities of this Employee.
        :rtype: List[str]
        """
        return self._nationalities

    @nationalities.setter
    def nationalities(self, nationalities):
        """Sets the nationalities of this Employee.


        :param nationalities: The nationalities of this Employee.
        :type nationalities: List[str]
        """

        self._nationalities = nationalities

    @property
    def partner(self):
        """Gets the partner of this Employee.


        :return: The partner of this Employee.
        :rtype: Person
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Employee.


        :param partner: The partner of this Employee.
        :type partner: Person
        """

        self._partner = partner

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Employee.


        :return: The phone_numbers of this Employee.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Employee.


        :param phone_numbers: The phone_numbers of this Employee.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def photo_url(self):
        """Gets the photo_url of this Employee.

        The URL of the photo of a person.

        :return: The photo_url of this Employee.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this Employee.

        The URL of the photo of a person.

        :param photo_url: The photo_url of this Employee.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def preferred_language(self):
        """Gets the preferred_language of this Employee.

        language code according to ISO 639-1. For the United States - EN

        :return: The preferred_language of this Employee.
        :rtype: str
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """Sets the preferred_language of this Employee.

        language code according to ISO 639-1. For the United States - EN

        :param preferred_language: The preferred_language of this Employee.
        :type preferred_language: str
        """

        self._preferred_language = preferred_language

    @property
    def preferred_name(self):
        """Gets the preferred_name of this Employee.

        The name the employee prefers to be addressed by, which may be different from their legal name.

        :return: The preferred_name of this Employee.
        :rtype: str
        """
        return self._preferred_name

    @preferred_name.setter
    def preferred_name(self, preferred_name):
        """Sets the preferred_name of this Employee.

        The name the employee prefers to be addressed by, which may be different from their legal name.

        :param preferred_name: The preferred_name of this Employee.
        :type preferred_name: str
        """

        self._preferred_name = preferred_name

    @property
    def probation_period(self):
        """Gets the probation_period of this Employee.


        :return: The probation_period of this Employee.
        :rtype: ProbationPeriod
        """
        return self._probation_period

    @probation_period.setter
    def probation_period(self, probation_period):
        """Sets the probation_period of this Employee.


        :param probation_period: The probation_period of this Employee.
        :type probation_period: ProbationPeriod
        """

        self._probation_period = probation_period

    @property
    def pronouns(self):
        """Gets the pronouns of this Employee.

        The preferred pronouns of the person.

        :return: The pronouns of this Employee.
        :rtype: str
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns):
        """Sets the pronouns of this Employee.

        The preferred pronouns of the person.

        :param pronouns: The pronouns of this Employee.
        :type pronouns: str
        """

        self._pronouns = pronouns

    @property
    def record_url(self):
        """Gets the record_url of this Employee.


        :return: The record_url of this Employee.
        :rtype: str
        """
        return self._record_url

    @record_url.setter
    def record_url(self, record_url):
        """Sets the record_url of this Employee.


        :param record_url: The record_url of this Employee.
        :type record_url: str
        """

        self._record_url = record_url

    @property
    def row_version(self):
        """Gets the row_version of this Employee.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this Employee.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this Employee.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this Employee.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def salutation(self):
        """Gets the salutation of this Employee.

        A formal salutation for the person. For example, 'Mr', 'Mrs'

        :return: The salutation of this Employee.
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this Employee.

        A formal salutation for the person. For example, 'Mr', 'Mrs'

        :param salutation: The salutation of this Employee.
        :type salutation: str
        """

        self._salutation = salutation

    @property
    def social_links(self):
        """Gets the social_links of this Employee.


        :return: The social_links of this Employee.
        :rtype: List[SocialLink]
        """
        return self._social_links

    @social_links.setter
    def social_links(self, social_links):
        """Sets the social_links of this Employee.


        :param social_links: The social_links of this Employee.
        :type social_links: List[SocialLink]
        """

        self._social_links = social_links

    @property
    def social_security_number(self):
        """Gets the social_security_number of this Employee.

        A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.

        :return: The social_security_number of this Employee.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this Employee.

        A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.

        :param social_security_number: The social_security_number of this Employee.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number

    @property
    def source(self):
        """Gets the source of this Employee.

        When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.

        :return: The source of this Employee.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Employee.

        When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.

        :param source: The source of this Employee.
        :type source: str
        """

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this Employee.

        Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).

        :return: The source_id of this Employee.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Employee.

        Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).

        :param source_id: The source_id of this Employee.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def tags(self):
        """Gets the tags of this Employee.


        :return: The tags of this Employee.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Employee.


        :param tags: The tags of this Employee.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tax_code(self):
        """Gets the tax_code of this Employee.


        :return: The tax_code of this Employee.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this Employee.


        :param tax_code: The tax_code of this Employee.
        :type tax_code: str
        """

        self._tax_code = tax_code

    @property
    def tax_id(self):
        """Gets the tax_id of this Employee.


        :return: The tax_id of this Employee.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this Employee.


        :param tax_id: The tax_id of this Employee.
        :type tax_id: str
        """

        self._tax_id = tax_id

    @property
    def team(self):
        """Gets the team of this Employee.


        :return: The team of this Employee.
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Employee.


        :param team: The team of this Employee.
        :type team: Team
        """

        self._team = team

    @property
    def timezone(self):
        """Gets the timezone of this Employee.

        The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.

        :return: The timezone of this Employee.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Employee.

        The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.

        :param timezone: The timezone of this Employee.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def title(self):
        """Gets the title of this Employee.

        The job title of the person.

        :return: The title of this Employee.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Employee.

        The job title of the person.

        :param title: The title of this Employee.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Employee.

        The date and time when the object was last updated.

        :return: The updated_at of this Employee.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Employee.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Employee.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Employee.

        The user who last updated the object.

        :return: The updated_by of this Employee.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Employee.

        The user who last updated the object.

        :param updated_by: The updated_by of this Employee.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def works_remote(self):
        """Gets the works_remote of this Employee.

        Indicates if the employee works from a remote location.

        :return: The works_remote of this Employee.
        :rtype: bool
        """
        return self._works_remote

    @works_remote.setter
    def works_remote(self, works_remote):
        """Sets the works_remote of this Employee.

        Indicates if the employee works from a remote location.

        :param works_remote: The works_remote of this Employee.
        :type works_remote: bool
        """

        self._works_remote = works_remote
