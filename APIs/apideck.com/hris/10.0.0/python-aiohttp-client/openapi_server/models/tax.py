# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, employer: bool=None, name: str=None):
        """Tax - a model defined in OpenAPI

        :param amount: The amount of this Tax.
        :param employer: The employer of this Tax.
        :param name: The name of this Tax.
        """
        self.openapi_types = {
            'amount': float,
            'employer': bool,
            'name': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'employer': 'employer',
            'name': 'name'
        }

        self._amount = amount
        self._employer = employer
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tax of this Tax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Tax.

        The amount of the tax.

        :return: The amount of this Tax.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Tax.

        The amount of the tax.

        :param amount: The amount of this Tax.
        :type amount: float
        """

        self._amount = amount

    @property
    def employer(self):
        """Gets the employer of this Tax.

        Paid by employer.

        :return: The employer of this Tax.
        :rtype: bool
        """
        return self._employer

    @employer.setter
    def employer(self, employer):
        """Sets the employer of this Tax.

        Paid by employer.

        :param employer: The employer of this Tax.
        :type employer: bool
        """

        self._employer = employer

    @property
    def name(self):
        """Gets the name of this Tax.

        The name of the tax.

        :return: The name of this Tax.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tax.

        The name of the tax.

        :param name: The name of this Tax.
        :type name: str
        """

        self._name = name
