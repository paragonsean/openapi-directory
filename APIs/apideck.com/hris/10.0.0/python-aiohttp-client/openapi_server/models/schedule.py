# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schedule_work_pattern import ScheduleWorkPattern
import re
from openapi_server import util


class Schedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date: str=None, id: str=None, start_date: str=None, work_pattern: ScheduleWorkPattern=None):
        """Schedule - a model defined in OpenAPI

        :param end_date: The end_date of this Schedule.
        :param id: The id of this Schedule.
        :param start_date: The start_date of this Schedule.
        :param work_pattern: The work_pattern of this Schedule.
        """
        self.openapi_types = {
            'end_date': str,
            'id': str,
            'start_date': str,
            'work_pattern': ScheduleWorkPattern
        }

        self.attribute_map = {
            'end_date': 'end_date',
            'id': 'id',
            'start_date': 'start_date',
            'work_pattern': 'work_pattern'
        }

        self._end_date = end_date
        self._id = id
        self._start_date = start_date
        self._work_pattern = work_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Schedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Schedule of this Schedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date(self):
        """Gets the end_date of this Schedule.

        The end date, inclusive, of the schedule period.

        :return: The end_date of this Schedule.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Schedule.

        The end date, inclusive, of the schedule period.

        :param end_date: The end_date of this Schedule.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")
        if end_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', end_date):
            raise ValueError("Invalid value for `end_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this Schedule.

        A unique identifier for an object.

        :return: The id of this Schedule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Schedule.

        A unique identifier for an object.

        :param id: The id of this Schedule.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def start_date(self):
        """Gets the start_date of this Schedule.

        The start date, inclusive, of the schedule period.

        :return: The start_date of this Schedule.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Schedule.

        The start date, inclusive, of the schedule period.

        :param start_date: The start_date of this Schedule.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")
        if start_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', start_date):
            raise ValueError("Invalid value for `start_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._start_date = start_date

    @property
    def work_pattern(self):
        """Gets the work_pattern of this Schedule.


        :return: The work_pattern of this Schedule.
        :rtype: ScheduleWorkPattern
        """
        return self._work_pattern

    @work_pattern.setter
    def work_pattern(self, work_pattern):
        """Sets the work_pattern of this Schedule.


        :param work_pattern: The work_pattern of this Schedule.
        :type work_pattern: ScheduleWorkPattern
        """
        if work_pattern is None:
            raise ValueError("Invalid value for `work_pattern`, must not be `None`")

        self._work_pattern = work_pattern
