# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayrollTotals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_amount: float=None, company_debit: float=None, employee_benefit_deductions: float=None, employee_taxes: float=None, employer_benefit_contributions: float=None, employer_taxes: float=None, gross_pay: float=None, net_pay: float=None, tax_debit: float=None):
        """PayrollTotals - a model defined in OpenAPI

        :param check_amount: The check_amount of this PayrollTotals.
        :param company_debit: The company_debit of this PayrollTotals.
        :param employee_benefit_deductions: The employee_benefit_deductions of this PayrollTotals.
        :param employee_taxes: The employee_taxes of this PayrollTotals.
        :param employer_benefit_contributions: The employer_benefit_contributions of this PayrollTotals.
        :param employer_taxes: The employer_taxes of this PayrollTotals.
        :param gross_pay: The gross_pay of this PayrollTotals.
        :param net_pay: The net_pay of this PayrollTotals.
        :param tax_debit: The tax_debit of this PayrollTotals.
        """
        self.openapi_types = {
            'check_amount': float,
            'company_debit': float,
            'employee_benefit_deductions': float,
            'employee_taxes': float,
            'employer_benefit_contributions': float,
            'employer_taxes': float,
            'gross_pay': float,
            'net_pay': float,
            'tax_debit': float
        }

        self.attribute_map = {
            'check_amount': 'check_amount',
            'company_debit': 'company_debit',
            'employee_benefit_deductions': 'employee_benefit_deductions',
            'employee_taxes': 'employee_taxes',
            'employer_benefit_contributions': 'employer_benefit_contributions',
            'employer_taxes': 'employer_taxes',
            'gross_pay': 'gross_pay',
            'net_pay': 'net_pay',
            'tax_debit': 'tax_debit'
        }

        self._check_amount = check_amount
        self._company_debit = company_debit
        self._employee_benefit_deductions = employee_benefit_deductions
        self._employee_taxes = employee_taxes
        self._employer_benefit_contributions = employer_benefit_contributions
        self._employer_taxes = employer_taxes
        self._gross_pay = gross_pay
        self._net_pay = net_pay
        self._tax_debit = tax_debit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayrollTotals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayrollTotals of this PayrollTotals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_amount(self):
        """Gets the check_amount of this PayrollTotals.

        The total check amount for the payroll.

        :return: The check_amount of this PayrollTotals.
        :rtype: float
        """
        return self._check_amount

    @check_amount.setter
    def check_amount(self, check_amount):
        """Sets the check_amount of this PayrollTotals.

        The total check amount for the payroll.

        :param check_amount: The check_amount of this PayrollTotals.
        :type check_amount: float
        """

        self._check_amount = check_amount

    @property
    def company_debit(self):
        """Gets the company_debit of this PayrollTotals.

        The total company debit for the payroll.

        :return: The company_debit of this PayrollTotals.
        :rtype: float
        """
        return self._company_debit

    @company_debit.setter
    def company_debit(self, company_debit):
        """Sets the company_debit of this PayrollTotals.

        The total company debit for the payroll.

        :param company_debit: The company_debit of this PayrollTotals.
        :type company_debit: float
        """

        self._company_debit = company_debit

    @property
    def employee_benefit_deductions(self):
        """Gets the employee_benefit_deductions of this PayrollTotals.

        The total amount of employee deducted benefits for the payroll.

        :return: The employee_benefit_deductions of this PayrollTotals.
        :rtype: float
        """
        return self._employee_benefit_deductions

    @employee_benefit_deductions.setter
    def employee_benefit_deductions(self, employee_benefit_deductions):
        """Sets the employee_benefit_deductions of this PayrollTotals.

        The total amount of employee deducted benefits for the payroll.

        :param employee_benefit_deductions: The employee_benefit_deductions of this PayrollTotals.
        :type employee_benefit_deductions: float
        """

        self._employee_benefit_deductions = employee_benefit_deductions

    @property
    def employee_taxes(self):
        """Gets the employee_taxes of this PayrollTotals.

        The total amount of employee paid taxes for the payroll.

        :return: The employee_taxes of this PayrollTotals.
        :rtype: float
        """
        return self._employee_taxes

    @employee_taxes.setter
    def employee_taxes(self, employee_taxes):
        """Sets the employee_taxes of this PayrollTotals.

        The total amount of employee paid taxes for the payroll.

        :param employee_taxes: The employee_taxes of this PayrollTotals.
        :type employee_taxes: float
        """

        self._employee_taxes = employee_taxes

    @property
    def employer_benefit_contributions(self):
        """Gets the employer_benefit_contributions of this PayrollTotals.

        The total amount of company contributed benefits for the payroll.

        :return: The employer_benefit_contributions of this PayrollTotals.
        :rtype: float
        """
        return self._employer_benefit_contributions

    @employer_benefit_contributions.setter
    def employer_benefit_contributions(self, employer_benefit_contributions):
        """Sets the employer_benefit_contributions of this PayrollTotals.

        The total amount of company contributed benefits for the payroll.

        :param employer_benefit_contributions: The employer_benefit_contributions of this PayrollTotals.
        :type employer_benefit_contributions: float
        """

        self._employer_benefit_contributions = employer_benefit_contributions

    @property
    def employer_taxes(self):
        """Gets the employer_taxes of this PayrollTotals.

        The total amount of employer paid taxes for the payroll.

        :return: The employer_taxes of this PayrollTotals.
        :rtype: float
        """
        return self._employer_taxes

    @employer_taxes.setter
    def employer_taxes(self, employer_taxes):
        """Sets the employer_taxes of this PayrollTotals.

        The total amount of employer paid taxes for the payroll.

        :param employer_taxes: The employer_taxes of this PayrollTotals.
        :type employer_taxes: float
        """

        self._employer_taxes = employer_taxes

    @property
    def gross_pay(self):
        """Gets the gross_pay of this PayrollTotals.

        The gross pay amount for the payroll.

        :return: The gross_pay of this PayrollTotals.
        :rtype: float
        """
        return self._gross_pay

    @gross_pay.setter
    def gross_pay(self, gross_pay):
        """Sets the gross_pay of this PayrollTotals.

        The gross pay amount for the payroll.

        :param gross_pay: The gross_pay of this PayrollTotals.
        :type gross_pay: float
        """

        self._gross_pay = gross_pay

    @property
    def net_pay(self):
        """Gets the net_pay of this PayrollTotals.

        The net pay amount for the payroll.

        :return: The net_pay of this PayrollTotals.
        :rtype: float
        """
        return self._net_pay

    @net_pay.setter
    def net_pay(self, net_pay):
        """Sets the net_pay of this PayrollTotals.

        The net pay amount for the payroll.

        :param net_pay: The net_pay of this PayrollTotals.
        :type net_pay: float
        """

        self._net_pay = net_pay

    @property
    def tax_debit(self):
        """Gets the tax_debit of this PayrollTotals.

        The total tax debit for the payroll.

        :return: The tax_debit of this PayrollTotals.
        :rtype: float
        """
        return self._tax_debit

    @tax_debit.setter
    def tax_debit(self, tax_debit):
        """Sets the tax_debit of this PayrollTotals.

        The total tax debit for the payroll.

        :param tax_debit: The tax_debit of this PayrollTotals.
        :type tax_debit: float
        """

        self._tax_debit = tax_debit
