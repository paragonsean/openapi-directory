# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gender import Gender
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birthday: date=None, custom_mappings: object=None, deceased_on: date=None, first_name: str=None, gender: Gender=None, id: str=None, initials: str=None, last_name: str=None, middle_name: str=None):
        """Person - a model defined in OpenAPI

        :param birthday: The birthday of this Person.
        :param custom_mappings: The custom_mappings of this Person.
        :param deceased_on: The deceased_on of this Person.
        :param first_name: The first_name of this Person.
        :param gender: The gender of this Person.
        :param id: The id of this Person.
        :param initials: The initials of this Person.
        :param last_name: The last_name of this Person.
        :param middle_name: The middle_name of this Person.
        """
        self.openapi_types = {
            'birthday': date,
            'custom_mappings': object,
            'deceased_on': date,
            'first_name': str,
            'gender': Gender,
            'id': str,
            'initials': str,
            'last_name': str,
            'middle_name': str
        }

        self.attribute_map = {
            'birthday': 'birthday',
            'custom_mappings': 'custom_mappings',
            'deceased_on': 'deceased_on',
            'first_name': 'first_name',
            'gender': 'gender',
            'id': 'id',
            'initials': 'initials',
            'last_name': 'last_name',
            'middle_name': 'middle_name'
        }

        self._birthday = birthday
        self._custom_mappings = custom_mappings
        self._deceased_on = deceased_on
        self._first_name = first_name
        self._gender = gender
        self._id = id
        self._initials = initials
        self._last_name = last_name
        self._middle_name = middle_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birthday(self):
        """Gets the birthday of this Person.

        Date of birth

        :return: The birthday of this Person.
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this Person.

        Date of birth

        :param birthday: The birthday of this Person.
        :type birthday: date
        """

        self._birthday = birthday

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Person.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Person.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Person.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Person.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def deceased_on(self):
        """Gets the deceased_on of this Person.

        Date of death

        :return: The deceased_on of this Person.
        :rtype: date
        """
        return self._deceased_on

    @deceased_on.setter
    def deceased_on(self, deceased_on):
        """Sets the deceased_on of this Person.

        Date of death

        :param deceased_on: The deceased_on of this Person.
        :type deceased_on: date
        """

        self._deceased_on = deceased_on

    @property
    def first_name(self):
        """Gets the first_name of this Person.

        The first name of the person.

        :return: The first_name of this Person.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Person.

        The first name of the person.

        :param first_name: The first_name of this Person.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this Person.


        :return: The gender of this Person.
        :rtype: Gender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Person.


        :param gender: The gender of this Person.
        :type gender: Gender
        """

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this Person.

        A unique identifier for an object.

        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.

        A unique identifier for an object.

        :param id: The id of this Person.
        :type id: str
        """

        self._id = id

    @property
    def initials(self):
        """Gets the initials of this Person.

        Initials of the person

        :return: The initials of this Person.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this Person.

        Initials of the person

        :param initials: The initials of this Person.
        :type initials: str
        """

        self._initials = initials

    @property
    def last_name(self):
        """Gets the last_name of this Person.

        The last name of the person.

        :return: The last_name of this Person.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Person.

        The last name of the person.

        :param last_name: The last_name of this Person.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Person.

        Middle name of the person.

        :return: The middle_name of this Person.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Person.

        Middle name of the person.

        :param middle_name: The middle_name of this Person.
        :type middle_name: str
        """

        self._middle_name = middle_name
