# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employment_status import EmploymentStatus
from openapi_server.models.hris_job_location import HrisJobLocation
from openapi_server import util


class HrisJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_mappings: object=None, department: str=None, employee_id: str=None, employment_status: EmploymentStatus=None, end_date: date=None, id: str=None, is_primary: bool=None, location: HrisJobLocation=None, start_date: date=None, title: str=None):
        """HrisJob - a model defined in OpenAPI

        :param custom_mappings: The custom_mappings of this HrisJob.
        :param department: The department of this HrisJob.
        :param employee_id: The employee_id of this HrisJob.
        :param employment_status: The employment_status of this HrisJob.
        :param end_date: The end_date of this HrisJob.
        :param id: The id of this HrisJob.
        :param is_primary: The is_primary of this HrisJob.
        :param location: The location of this HrisJob.
        :param start_date: The start_date of this HrisJob.
        :param title: The title of this HrisJob.
        """
        self.openapi_types = {
            'custom_mappings': object,
            'department': str,
            'employee_id': str,
            'employment_status': EmploymentStatus,
            'end_date': date,
            'id': str,
            'is_primary': bool,
            'location': HrisJobLocation,
            'start_date': date,
            'title': str
        }

        self.attribute_map = {
            'custom_mappings': 'custom_mappings',
            'department': 'department',
            'employee_id': 'employee_id',
            'employment_status': 'employment_status',
            'end_date': 'end_date',
            'id': 'id',
            'is_primary': 'is_primary',
            'location': 'location',
            'start_date': 'start_date',
            'title': 'title'
        }

        self._custom_mappings = custom_mappings
        self._department = department
        self._employee_id = employee_id
        self._employment_status = employment_status
        self._end_date = end_date
        self._id = id
        self._is_primary = is_primary
        self._location = location
        self._start_date = start_date
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HrisJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HrisJob of this HrisJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this HrisJob.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this HrisJob.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this HrisJob.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this HrisJob.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def department(self):
        """Gets the department of this HrisJob.

        Department name

        :return: The department of this HrisJob.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this HrisJob.

        Department name

        :param department: The department of this HrisJob.
        :type department: str
        """

        self._department = department

    @property
    def employee_id(self):
        """Gets the employee_id of this HrisJob.

        Id of the employee

        :return: The employee_id of this HrisJob.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this HrisJob.

        Id of the employee

        :param employee_id: The employee_id of this HrisJob.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def employment_status(self):
        """Gets the employment_status of this HrisJob.


        :return: The employment_status of this HrisJob.
        :rtype: EmploymentStatus
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this HrisJob.


        :param employment_status: The employment_status of this HrisJob.
        :type employment_status: EmploymentStatus
        """

        self._employment_status = employment_status

    @property
    def end_date(self):
        """Gets the end_date of this HrisJob.


        :return: The end_date of this HrisJob.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this HrisJob.


        :param end_date: The end_date of this HrisJob.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this HrisJob.

        A unique identifier for an object.

        :return: The id of this HrisJob.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HrisJob.

        A unique identifier for an object.

        :param id: The id of this HrisJob.
        :type id: str
        """

        self._id = id

    @property
    def is_primary(self):
        """Gets the is_primary of this HrisJob.

        Indicates whether this the employee's primary job.

        :return: The is_primary of this HrisJob.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this HrisJob.

        Indicates whether this the employee's primary job.

        :param is_primary: The is_primary of this HrisJob.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def location(self):
        """Gets the location of this HrisJob.


        :return: The location of this HrisJob.
        :rtype: HrisJobLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this HrisJob.


        :param location: The location of this HrisJob.
        :type location: HrisJobLocation
        """

        self._location = location

    @property
    def start_date(self):
        """Gets the start_date of this HrisJob.


        :return: The start_date of this HrisJob.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this HrisJob.


        :param start_date: The start_date of this HrisJob.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def title(self):
        """Gets the title of this HrisJob.

        The job title of the person.

        :return: The title of this HrisJob.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this HrisJob.

        The job title of the person.

        :param title: The title of this HrisJob.
        :type title: str
        """

        self._title = title
