# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmployeesFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, department_id: str=None, email: str=None, employee_number: str=None, employment_status: str=None, first_name: str=None, last_name: str=None, manager_id: str=None, title: str=None):
        """EmployeesFilter - a model defined in OpenAPI

        :param company_id: The company_id of this EmployeesFilter.
        :param department_id: The department_id of this EmployeesFilter.
        :param email: The email of this EmployeesFilter.
        :param employee_number: The employee_number of this EmployeesFilter.
        :param employment_status: The employment_status of this EmployeesFilter.
        :param first_name: The first_name of this EmployeesFilter.
        :param last_name: The last_name of this EmployeesFilter.
        :param manager_id: The manager_id of this EmployeesFilter.
        :param title: The title of this EmployeesFilter.
        """
        self.openapi_types = {
            'company_id': str,
            'department_id': str,
            'email': str,
            'employee_number': str,
            'employment_status': str,
            'first_name': str,
            'last_name': str,
            'manager_id': str,
            'title': str
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'department_id': 'department_id',
            'email': 'email',
            'employee_number': 'employee_number',
            'employment_status': 'employment_status',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'manager_id': 'manager_id',
            'title': 'title'
        }

        self._company_id = company_id
        self._department_id = department_id
        self._email = email
        self._employee_number = employee_number
        self._employment_status = employment_status
        self._first_name = first_name
        self._last_name = last_name
        self._manager_id = manager_id
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmployeesFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmployeesFilter of this EmployeesFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this EmployeesFilter.

        Company ID to filter on

        :return: The company_id of this EmployeesFilter.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this EmployeesFilter.

        Company ID to filter on

        :param company_id: The company_id of this EmployeesFilter.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def department_id(self):
        """Gets the department_id of this EmployeesFilter.

        ID of the department to filter on

        :return: The department_id of this EmployeesFilter.
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this EmployeesFilter.

        ID of the department to filter on

        :param department_id: The department_id of this EmployeesFilter.
        :type department_id: str
        """

        self._department_id = department_id

    @property
    def email(self):
        """Gets the email of this EmployeesFilter.

        Email to filter on

        :return: The email of this EmployeesFilter.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmployeesFilter.

        Email to filter on

        :param email: The email of this EmployeesFilter.
        :type email: str
        """

        self._email = email

    @property
    def employee_number(self):
        """Gets the employee_number of this EmployeesFilter.

        Employee number to filter on

        :return: The employee_number of this EmployeesFilter.
        :rtype: str
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this EmployeesFilter.

        Employee number to filter on

        :param employee_number: The employee_number of this EmployeesFilter.
        :type employee_number: str
        """

        self._employee_number = employee_number

    @property
    def employment_status(self):
        """Gets the employment_status of this EmployeesFilter.

        Employment status to filter on

        :return: The employment_status of this EmployeesFilter.
        :rtype: str
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this EmployeesFilter.

        Employment status to filter on

        :param employment_status: The employment_status of this EmployeesFilter.
        :type employment_status: str
        """
        allowed_values = ["active", "inactive", "terminated", "other"]  # noqa: E501
        if employment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `employment_status` ({0}), must be one of {1}"
                .format(employment_status, allowed_values)
            )

        self._employment_status = employment_status

    @property
    def first_name(self):
        """Gets the first_name of this EmployeesFilter.

        First Name to filter on

        :return: The first_name of this EmployeesFilter.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EmployeesFilter.

        First Name to filter on

        :param first_name: The first_name of this EmployeesFilter.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this EmployeesFilter.

        Last Name to filter on

        :return: The last_name of this EmployeesFilter.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EmployeesFilter.

        Last Name to filter on

        :param last_name: The last_name of this EmployeesFilter.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def manager_id(self):
        """Gets the manager_id of this EmployeesFilter.

        Manager id to filter on

        :return: The manager_id of this EmployeesFilter.
        :rtype: str
        """
        return self._manager_id

    @manager_id.setter
    def manager_id(self, manager_id):
        """Sets the manager_id of this EmployeesFilter.

        Manager id to filter on

        :param manager_id: The manager_id of this EmployeesFilter.
        :type manager_id: str
        """

        self._manager_id = manager_id

    @property
    def title(self):
        """Gets the title of this EmployeesFilter.

        Job title to filter on

        :return: The title of this EmployeesFilter.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EmployeesFilter.

        Job title to filter on

        :param title: The title of this EmployeesFilter.
        :type title: str
        """

        self._title = title
