# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.currency import Currency
from openapi_server.models.email import Email
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.website import Website
from openapi_server import util


class HrisCompany(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[Address]=None, company_number: str=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, custom_mappings: object=None, debtor_id: str=None, deleted: bool=None, display_name: str=None, emails: List[Email]=None, id: str=None, legal_name: str=None, phone_numbers: List[PhoneNumber]=None, status: str=None, subdomain: str=None, updated_at: datetime=None, updated_by: str=None, websites: List[Website]=None):
        """HrisCompany - a model defined in OpenAPI

        :param addresses: The addresses of this HrisCompany.
        :param company_number: The company_number of this HrisCompany.
        :param created_at: The created_at of this HrisCompany.
        :param created_by: The created_by of this HrisCompany.
        :param currency: The currency of this HrisCompany.
        :param custom_mappings: The custom_mappings of this HrisCompany.
        :param debtor_id: The debtor_id of this HrisCompany.
        :param deleted: The deleted of this HrisCompany.
        :param display_name: The display_name of this HrisCompany.
        :param emails: The emails of this HrisCompany.
        :param id: The id of this HrisCompany.
        :param legal_name: The legal_name of this HrisCompany.
        :param phone_numbers: The phone_numbers of this HrisCompany.
        :param status: The status of this HrisCompany.
        :param subdomain: The subdomain of this HrisCompany.
        :param updated_at: The updated_at of this HrisCompany.
        :param updated_by: The updated_by of this HrisCompany.
        :param websites: The websites of this HrisCompany.
        """
        self.openapi_types = {
            'addresses': List[Address],
            'company_number': str,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'custom_mappings': object,
            'debtor_id': str,
            'deleted': bool,
            'display_name': str,
            'emails': List[Email],
            'id': str,
            'legal_name': str,
            'phone_numbers': List[PhoneNumber],
            'status': str,
            'subdomain': str,
            'updated_at': datetime,
            'updated_by': str,
            'websites': List[Website]
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'company_number': 'company_number',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'debtor_id': 'debtor_id',
            'deleted': 'deleted',
            'display_name': 'display_name',
            'emails': 'emails',
            'id': 'id',
            'legal_name': 'legal_name',
            'phone_numbers': 'phone_numbers',
            'status': 'status',
            'subdomain': 'subdomain',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'websites': 'websites'
        }

        self._addresses = addresses
        self._company_number = company_number
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._custom_mappings = custom_mappings
        self._debtor_id = debtor_id
        self._deleted = deleted
        self._display_name = display_name
        self._emails = emails
        self._id = id
        self._legal_name = legal_name
        self._phone_numbers = phone_numbers
        self._status = status
        self._subdomain = subdomain
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._websites = websites

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HrisCompany':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HrisCompany of this HrisCompany.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this HrisCompany.


        :return: The addresses of this HrisCompany.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this HrisCompany.


        :param addresses: The addresses of this HrisCompany.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def company_number(self):
        """Gets the company_number of this HrisCompany.

        An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.

        :return: The company_number of this HrisCompany.
        :rtype: str
        """
        return self._company_number

    @company_number.setter
    def company_number(self, company_number):
        """Sets the company_number of this HrisCompany.

        An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.

        :param company_number: The company_number of this HrisCompany.
        :type company_number: str
        """

        self._company_number = company_number

    @property
    def created_at(self):
        """Gets the created_at of this HrisCompany.

        The date and time when the object was created.

        :return: The created_at of this HrisCompany.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this HrisCompany.

        The date and time when the object was created.

        :param created_at: The created_at of this HrisCompany.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this HrisCompany.

        The user who created the object.

        :return: The created_by of this HrisCompany.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this HrisCompany.

        The user who created the object.

        :param created_by: The created_by of this HrisCompany.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this HrisCompany.


        :return: The currency of this HrisCompany.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this HrisCompany.


        :param currency: The currency of this HrisCompany.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this HrisCompany.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this HrisCompany.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this HrisCompany.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this HrisCompany.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def debtor_id(self):
        """Gets the debtor_id of this HrisCompany.


        :return: The debtor_id of this HrisCompany.
        :rtype: str
        """
        return self._debtor_id

    @debtor_id.setter
    def debtor_id(self, debtor_id):
        """Sets the debtor_id of this HrisCompany.


        :param debtor_id: The debtor_id of this HrisCompany.
        :type debtor_id: str
        """
        if debtor_id is not None and len(debtor_id) < 1:
            raise ValueError("Invalid value for `debtor_id`, length must be greater than or equal to `1`")

        self._debtor_id = debtor_id

    @property
    def deleted(self):
        """Gets the deleted of this HrisCompany.


        :return: The deleted of this HrisCompany.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this HrisCompany.


        :param deleted: The deleted of this HrisCompany.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def display_name(self):
        """Gets the display_name of this HrisCompany.


        :return: The display_name of this HrisCompany.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this HrisCompany.


        :param display_name: The display_name of this HrisCompany.
        :type display_name: str
        """
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")

        self._display_name = display_name

    @property
    def emails(self):
        """Gets the emails of this HrisCompany.


        :return: The emails of this HrisCompany.
        :rtype: List[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this HrisCompany.


        :param emails: The emails of this HrisCompany.
        :type emails: List[Email]
        """

        self._emails = emails

    @property
    def id(self):
        """Gets the id of this HrisCompany.

        A unique identifier for an object.

        :return: The id of this HrisCompany.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HrisCompany.

        A unique identifier for an object.

        :param id: The id of this HrisCompany.
        :type id: str
        """

        self._id = id

    @property
    def legal_name(self):
        """Gets the legal_name of this HrisCompany.


        :return: The legal_name of this HrisCompany.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this HrisCompany.


        :param legal_name: The legal_name of this HrisCompany.
        :type legal_name: str
        """
        if legal_name is None:
            raise ValueError("Invalid value for `legal_name`, must not be `None`")
        if legal_name is not None and len(legal_name) < 1:
            raise ValueError("Invalid value for `legal_name`, length must be greater than or equal to `1`")

        self._legal_name = legal_name

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this HrisCompany.


        :return: The phone_numbers of this HrisCompany.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this HrisCompany.


        :param phone_numbers: The phone_numbers of this HrisCompany.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def status(self):
        """Gets the status of this HrisCompany.


        :return: The status of this HrisCompany.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HrisCompany.


        :param status: The status of this HrisCompany.
        :type status: str
        """
        allowed_values = ["active", "inactive", "trial", "other"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subdomain(self):
        """Gets the subdomain of this HrisCompany.


        :return: The subdomain of this HrisCompany.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this HrisCompany.


        :param subdomain: The subdomain of this HrisCompany.
        :type subdomain: str
        """
        if subdomain is not None and len(subdomain) < 1:
            raise ValueError("Invalid value for `subdomain`, length must be greater than or equal to `1`")

        self._subdomain = subdomain

    @property
    def updated_at(self):
        """Gets the updated_at of this HrisCompany.

        The date and time when the object was last updated.

        :return: The updated_at of this HrisCompany.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this HrisCompany.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this HrisCompany.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this HrisCompany.

        The user who last updated the object.

        :return: The updated_by of this HrisCompany.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this HrisCompany.

        The user who last updated the object.

        :param updated_by: The updated_by of this HrisCompany.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def websites(self):
        """Gets the websites of this HrisCompany.


        :return: The websites of this HrisCompany.
        :rtype: List[Website]
        """
        return self._websites

    @websites.setter
    def websites(self, websites):
        """Sets the websites of this HrisCompany.


        :param websites: The websites of this HrisCompany.
        :type websites: List[Website]
        """

        self._websites = websites
