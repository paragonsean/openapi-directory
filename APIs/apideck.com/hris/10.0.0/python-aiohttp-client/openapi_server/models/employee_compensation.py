# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.payment_frequency import PaymentFrequency
from openapi_server.models.payment_unit import PaymentUnit
from openapi_server import util


class EmployeeCompensation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: Currency=None, effective_date: str=None, flsa_status: str=None, id: str=None, job_id: str=None, payment_frequency: PaymentFrequency=None, payment_unit: PaymentUnit=None, rate: float=None):
        """EmployeeCompensation - a model defined in OpenAPI

        :param currency: The currency of this EmployeeCompensation.
        :param effective_date: The effective_date of this EmployeeCompensation.
        :param flsa_status: The flsa_status of this EmployeeCompensation.
        :param id: The id of this EmployeeCompensation.
        :param job_id: The job_id of this EmployeeCompensation.
        :param payment_frequency: The payment_frequency of this EmployeeCompensation.
        :param payment_unit: The payment_unit of this EmployeeCompensation.
        :param rate: The rate of this EmployeeCompensation.
        """
        self.openapi_types = {
            'currency': Currency,
            'effective_date': str,
            'flsa_status': str,
            'id': str,
            'job_id': str,
            'payment_frequency': PaymentFrequency,
            'payment_unit': PaymentUnit,
            'rate': float
        }

        self.attribute_map = {
            'currency': 'currency',
            'effective_date': 'effective_date',
            'flsa_status': 'flsa_status',
            'id': 'id',
            'job_id': 'job_id',
            'payment_frequency': 'payment_frequency',
            'payment_unit': 'payment_unit',
            'rate': 'rate'
        }

        self._currency = currency
        self._effective_date = effective_date
        self._flsa_status = flsa_status
        self._id = id
        self._job_id = job_id
        self._payment_frequency = payment_frequency
        self._payment_unit = payment_unit
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmployeeCompensation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmployeeCompensation of this EmployeeCompensation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this EmployeeCompensation.


        :return: The currency of this EmployeeCompensation.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EmployeeCompensation.


        :param currency: The currency of this EmployeeCompensation.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def effective_date(self):
        """Gets the effective_date of this EmployeeCompensation.

        The date on which a change to an employee's compensation takes effect.

        :return: The effective_date of this EmployeeCompensation.
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this EmployeeCompensation.

        The date on which a change to an employee's compensation takes effect.

        :param effective_date: The effective_date of this EmployeeCompensation.
        :type effective_date: str
        """

        self._effective_date = effective_date

    @property
    def flsa_status(self):
        """Gets the flsa_status of this EmployeeCompensation.

        The FLSA status for this compensation.

        :return: The flsa_status of this EmployeeCompensation.
        :rtype: str
        """
        return self._flsa_status

    @flsa_status.setter
    def flsa_status(self, flsa_status):
        """Sets the flsa_status of this EmployeeCompensation.

        The FLSA status for this compensation.

        :param flsa_status: The flsa_status of this EmployeeCompensation.
        :type flsa_status: str
        """
        allowed_values = [None,"exempt", "salaried-nonexempt", "nonexempt", "owner", "other"]  # noqa: E501
        if flsa_status not in allowed_values:
            raise ValueError(
                "Invalid value for `flsa_status` ({0}), must be one of {1}"
                .format(flsa_status, allowed_values)
            )

        self._flsa_status = flsa_status

    @property
    def id(self):
        """Gets the id of this EmployeeCompensation.

        A unique identifier for an object.

        :return: The id of this EmployeeCompensation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmployeeCompensation.

        A unique identifier for an object.

        :param id: The id of this EmployeeCompensation.
        :type id: str
        """

        self._id = id

    @property
    def job_id(self):
        """Gets the job_id of this EmployeeCompensation.

        The ID of the job to which the compensation belongs.

        :return: The job_id of this EmployeeCompensation.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this EmployeeCompensation.

        The ID of the job to which the compensation belongs.

        :param job_id: The job_id of this EmployeeCompensation.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def payment_frequency(self):
        """Gets the payment_frequency of this EmployeeCompensation.


        :return: The payment_frequency of this EmployeeCompensation.
        :rtype: PaymentFrequency
        """
        return self._payment_frequency

    @payment_frequency.setter
    def payment_frequency(self, payment_frequency):
        """Sets the payment_frequency of this EmployeeCompensation.


        :param payment_frequency: The payment_frequency of this EmployeeCompensation.
        :type payment_frequency: PaymentFrequency
        """

        self._payment_frequency = payment_frequency

    @property
    def payment_unit(self):
        """Gets the payment_unit of this EmployeeCompensation.


        :return: The payment_unit of this EmployeeCompensation.
        :rtype: PaymentUnit
        """
        return self._payment_unit

    @payment_unit.setter
    def payment_unit(self, payment_unit):
        """Sets the payment_unit of this EmployeeCompensation.


        :param payment_unit: The payment_unit of this EmployeeCompensation.
        :type payment_unit: PaymentUnit
        """

        self._payment_unit = payment_unit

    @property
    def rate(self):
        """Gets the rate of this EmployeeCompensation.

        The amount paid per payment unit.

        :return: The rate of this EmployeeCompensation.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this EmployeeCompensation.

        The amount paid per payment unit.

        :param rate: The rate of this EmployeeCompensation.
        :type rate: float
        """

        self._rate = rate
