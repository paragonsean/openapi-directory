# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TimeOffRequestsFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employee_id: str=None, end_date: str=None, start_date: str=None, time_off_request_status: str=None):
        """TimeOffRequestsFilter - a model defined in OpenAPI

        :param employee_id: The employee_id of this TimeOffRequestsFilter.
        :param end_date: The end_date of this TimeOffRequestsFilter.
        :param start_date: The start_date of this TimeOffRequestsFilter.
        :param time_off_request_status: The time_off_request_status of this TimeOffRequestsFilter.
        """
        self.openapi_types = {
            'employee_id': str,
            'end_date': str,
            'start_date': str,
            'time_off_request_status': str
        }

        self.attribute_map = {
            'employee_id': 'employee_id',
            'end_date': 'end_date',
            'start_date': 'start_date',
            'time_off_request_status': 'time_off_request_status'
        }

        self._employee_id = employee_id
        self._end_date = end_date
        self._start_date = start_date
        self._time_off_request_status = time_off_request_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeOffRequestsFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeOffRequestsFilter of this TimeOffRequestsFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employee_id(self):
        """Gets the employee_id of this TimeOffRequestsFilter.

        Employee ID

        :return: The employee_id of this TimeOffRequestsFilter.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this TimeOffRequestsFilter.

        Employee ID

        :param employee_id: The employee_id of this TimeOffRequestsFilter.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def end_date(self):
        """Gets the end_date of this TimeOffRequestsFilter.

        End date

        :return: The end_date of this TimeOffRequestsFilter.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TimeOffRequestsFilter.

        End date

        :param end_date: The end_date of this TimeOffRequestsFilter.
        :type end_date: str
        """
        if end_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', end_date):
            raise ValueError("Invalid value for `end_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._end_date = end_date

    @property
    def start_date(self):
        """Gets the start_date of this TimeOffRequestsFilter.

        Start date

        :return: The start_date of this TimeOffRequestsFilter.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TimeOffRequestsFilter.

        Start date

        :param start_date: The start_date of this TimeOffRequestsFilter.
        :type start_date: str
        """
        if start_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', start_date):
            raise ValueError("Invalid value for `start_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._start_date = start_date

    @property
    def time_off_request_status(self):
        """Gets the time_off_request_status of this TimeOffRequestsFilter.

        Time off request status to filter on

        :return: The time_off_request_status of this TimeOffRequestsFilter.
        :rtype: str
        """
        return self._time_off_request_status

    @time_off_request_status.setter
    def time_off_request_status(self, time_off_request_status):
        """Sets the time_off_request_status of this TimeOffRequestsFilter.

        Time off request status to filter on

        :param time_off_request_status: The time_off_request_status of this TimeOffRequestsFilter.
        :type time_off_request_status: str
        """
        allowed_values = ["requested", "approved", "declined", "cancelled", "deleted", "other"]  # noqa: E501
        if time_off_request_status not in allowed_values:
            raise ValueError(
                "Invalid value for `time_off_request_status` ({0}), must be one of {1}"
                .format(time_off_request_status, allowed_values)
            )

        self._time_off_request_status = time_off_request_status
