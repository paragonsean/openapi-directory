# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.currency import Currency
from openapi_server.models.payment_unit import PaymentUnit
from openapi_server import util


class EmployeeJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compensation_rate: float=None, currency: Currency=None, employee_id: str=None, end_date: date=None, hired_at: date=None, id: str=None, is_primary: bool=None, location: Address=None, payment_unit: PaymentUnit=None, role: str=None, start_date: date=None, title: str=None):
        """EmployeeJob - a model defined in OpenAPI

        :param compensation_rate: The compensation_rate of this EmployeeJob.
        :param currency: The currency of this EmployeeJob.
        :param employee_id: The employee_id of this EmployeeJob.
        :param end_date: The end_date of this EmployeeJob.
        :param hired_at: The hired_at of this EmployeeJob.
        :param id: The id of this EmployeeJob.
        :param is_primary: The is_primary of this EmployeeJob.
        :param location: The location of this EmployeeJob.
        :param payment_unit: The payment_unit of this EmployeeJob.
        :param role: The role of this EmployeeJob.
        :param start_date: The start_date of this EmployeeJob.
        :param title: The title of this EmployeeJob.
        """
        self.openapi_types = {
            'compensation_rate': float,
            'currency': Currency,
            'employee_id': str,
            'end_date': date,
            'hired_at': date,
            'id': str,
            'is_primary': bool,
            'location': Address,
            'payment_unit': PaymentUnit,
            'role': str,
            'start_date': date,
            'title': str
        }

        self.attribute_map = {
            'compensation_rate': 'compensation_rate',
            'currency': 'currency',
            'employee_id': 'employee_id',
            'end_date': 'end_date',
            'hired_at': 'hired_at',
            'id': 'id',
            'is_primary': 'is_primary',
            'location': 'location',
            'payment_unit': 'payment_unit',
            'role': 'role',
            'start_date': 'start_date',
            'title': 'title'
        }

        self._compensation_rate = compensation_rate
        self._currency = currency
        self._employee_id = employee_id
        self._end_date = end_date
        self._hired_at = hired_at
        self._id = id
        self._is_primary = is_primary
        self._location = location
        self._payment_unit = payment_unit
        self._role = role
        self._start_date = start_date
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmployeeJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmployeeJob of this EmployeeJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compensation_rate(self):
        """Gets the compensation_rate of this EmployeeJob.

        The rate of pay for the employee in their current job role.

        :return: The compensation_rate of this EmployeeJob.
        :rtype: float
        """
        return self._compensation_rate

    @compensation_rate.setter
    def compensation_rate(self, compensation_rate):
        """Sets the compensation_rate of this EmployeeJob.

        The rate of pay for the employee in their current job role.

        :param compensation_rate: The compensation_rate of this EmployeeJob.
        :type compensation_rate: float
        """

        self._compensation_rate = compensation_rate

    @property
    def currency(self):
        """Gets the currency of this EmployeeJob.


        :return: The currency of this EmployeeJob.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EmployeeJob.


        :param currency: The currency of this EmployeeJob.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def employee_id(self):
        """Gets the employee_id of this EmployeeJob.

        A unique identifier for an object.

        :return: The employee_id of this EmployeeJob.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this EmployeeJob.

        A unique identifier for an object.

        :param employee_id: The employee_id of this EmployeeJob.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def end_date(self):
        """Gets the end_date of this EmployeeJob.

        The date on which the employee leaves or is expected to leave their current job role.

        :return: The end_date of this EmployeeJob.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EmployeeJob.

        The date on which the employee leaves or is expected to leave their current job role.

        :param end_date: The end_date of this EmployeeJob.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def hired_at(self):
        """Gets the hired_at of this EmployeeJob.

        The date on which the employee was hired by the organization

        :return: The hired_at of this EmployeeJob.
        :rtype: date
        """
        return self._hired_at

    @hired_at.setter
    def hired_at(self, hired_at):
        """Sets the hired_at of this EmployeeJob.

        The date on which the employee was hired by the organization

        :param hired_at: The hired_at of this EmployeeJob.
        :type hired_at: date
        """

        self._hired_at = hired_at

    @property
    def id(self):
        """Gets the id of this EmployeeJob.

        A unique identifier for an object.

        :return: The id of this EmployeeJob.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmployeeJob.

        A unique identifier for an object.

        :param id: The id of this EmployeeJob.
        :type id: str
        """

        self._id = id

    @property
    def is_primary(self):
        """Gets the is_primary of this EmployeeJob.

        Indicates whether this the employee's primary job.

        :return: The is_primary of this EmployeeJob.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this EmployeeJob.

        Indicates whether this the employee's primary job.

        :param is_primary: The is_primary of this EmployeeJob.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def location(self):
        """Gets the location of this EmployeeJob.


        :return: The location of this EmployeeJob.
        :rtype: Address
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EmployeeJob.


        :param location: The location of this EmployeeJob.
        :type location: Address
        """

        self._location = location

    @property
    def payment_unit(self):
        """Gets the payment_unit of this EmployeeJob.


        :return: The payment_unit of this EmployeeJob.
        :rtype: PaymentUnit
        """
        return self._payment_unit

    @payment_unit.setter
    def payment_unit(self, payment_unit):
        """Sets the payment_unit of this EmployeeJob.


        :param payment_unit: The payment_unit of this EmployeeJob.
        :type payment_unit: PaymentUnit
        """

        self._payment_unit = payment_unit

    @property
    def role(self):
        """Gets the role of this EmployeeJob.

        The position and responsibilities of the person within the organization.

        :return: The role of this EmployeeJob.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this EmployeeJob.

        The position and responsibilities of the person within the organization.

        :param role: The role of this EmployeeJob.
        :type role: str
        """

        self._role = role

    @property
    def start_date(self):
        """Gets the start_date of this EmployeeJob.

        The date on which the employee starts working in their current job role.

        :return: The start_date of this EmployeeJob.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this EmployeeJob.

        The date on which the employee starts working in their current job role.

        :param start_date: The start_date of this EmployeeJob.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def title(self):
        """Gets the title of this EmployeeJob.

        The job title of the person.

        :return: The title of this EmployeeJob.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EmployeeJob.

        The job title of the person.

        :param title: The title of this EmployeeJob.
        :type title: str
        """

        self._title = title
