# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.department import Department
from openapi_server import util


class GetDepartmentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: Department=None, operation: str=None, resource: str=None, service: str=None, status: str=None, status_code: int=None):
        """GetDepartmentResponse - a model defined in OpenAPI

        :param data: The data of this GetDepartmentResponse.
        :param operation: The operation of this GetDepartmentResponse.
        :param resource: The resource of this GetDepartmentResponse.
        :param service: The service of this GetDepartmentResponse.
        :param status: The status of this GetDepartmentResponse.
        :param status_code: The status_code of this GetDepartmentResponse.
        """
        self.openapi_types = {
            'data': Department,
            'operation': str,
            'resource': str,
            'service': str,
            'status': str,
            'status_code': int
        }

        self.attribute_map = {
            'data': 'data',
            'operation': 'operation',
            'resource': 'resource',
            'service': 'service',
            'status': 'status',
            'status_code': 'status_code'
        }

        self._data = data
        self._operation = operation
        self._resource = resource
        self._service = service
        self._status = status
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDepartmentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDepartmentResponse of this GetDepartmentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this GetDepartmentResponse.


        :return: The data of this GetDepartmentResponse.
        :rtype: Department
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GetDepartmentResponse.


        :param data: The data of this GetDepartmentResponse.
        :type data: Department
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def operation(self):
        """Gets the operation of this GetDepartmentResponse.

        Operation performed

        :return: The operation of this GetDepartmentResponse.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this GetDepartmentResponse.

        Operation performed

        :param operation: The operation of this GetDepartmentResponse.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def resource(self):
        """Gets the resource of this GetDepartmentResponse.

        Unified API resource name

        :return: The resource of this GetDepartmentResponse.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this GetDepartmentResponse.

        Unified API resource name

        :param resource: The resource of this GetDepartmentResponse.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def service(self):
        """Gets the service of this GetDepartmentResponse.

        Apideck ID of service provider

        :return: The service of this GetDepartmentResponse.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GetDepartmentResponse.

        Apideck ID of service provider

        :param service: The service of this GetDepartmentResponse.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def status(self):
        """Gets the status of this GetDepartmentResponse.

        HTTP Response Status

        :return: The status of this GetDepartmentResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetDepartmentResponse.

        HTTP Response Status

        :param status: The status of this GetDepartmentResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_code(self):
        """Gets the status_code of this GetDepartmentResponse.

        HTTP Response Status Code

        :return: The status_code of this GetDepartmentResponse.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this GetDepartmentResponse.

        HTTP Response Status Code

        :param status_code: The status_code of this GetDepartmentResponse.
        :type status_code: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code
