# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Benefit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employee_deduction: float=None, employer_contribution: float=None, name: str=None):
        """Benefit - a model defined in OpenAPI

        :param employee_deduction: The employee_deduction of this Benefit.
        :param employer_contribution: The employer_contribution of this Benefit.
        :param name: The name of this Benefit.
        """
        self.openapi_types = {
            'employee_deduction': float,
            'employer_contribution': float,
            'name': str
        }

        self.attribute_map = {
            'employee_deduction': 'employee_deduction',
            'employer_contribution': 'employer_contribution',
            'name': 'name'
        }

        self._employee_deduction = employee_deduction
        self._employer_contribution = employer_contribution
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Benefit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Benefit of this Benefit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employee_deduction(self):
        """Gets the employee_deduction of this Benefit.

        The amount deducted for benefit.

        :return: The employee_deduction of this Benefit.
        :rtype: float
        """
        return self._employee_deduction

    @employee_deduction.setter
    def employee_deduction(self, employee_deduction):
        """Sets the employee_deduction of this Benefit.

        The amount deducted for benefit.

        :param employee_deduction: The employee_deduction of this Benefit.
        :type employee_deduction: float
        """

        self._employee_deduction = employee_deduction

    @property
    def employer_contribution(self):
        """Gets the employer_contribution of this Benefit.

        The amount of employer contribution.

        :return: The employer_contribution of this Benefit.
        :rtype: float
        """
        return self._employer_contribution

    @employer_contribution.setter
    def employer_contribution(self, employer_contribution):
        """Sets the employer_contribution of this Benefit.

        The amount of employer contribution.

        :param employer_contribution: The employer_contribution of this Benefit.
        :type employer_contribution: float
        """

        self._employer_contribution = employer_contribution

    @property
    def name(self):
        """Gets the name of this Benefit.

        The name of the benefit.

        :return: The name of this Benefit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Benefit.

        The name of the benefit.

        :param name: The name of this Benefit.
        :type name: str
        """

        self._name = name
