# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class JobSalary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: Currency=None, interval: str=None, max: int=None, min: int=None):
        """JobSalary - a model defined in OpenAPI

        :param currency: The currency of this JobSalary.
        :param interval: The interval of this JobSalary.
        :param max: The max of this JobSalary.
        :param min: The min of this JobSalary.
        """
        self.openapi_types = {
            'currency': Currency,
            'interval': str,
            'max': int,
            'min': int
        }

        self.attribute_map = {
            'currency': 'currency',
            'interval': 'interval',
            'max': 'max',
            'min': 'min'
        }

        self._currency = currency
        self._interval = interval
        self._max = max
        self._min = min

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobSalary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job_salary of this JobSalary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this JobSalary.


        :return: The currency of this JobSalary.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this JobSalary.


        :param currency: The currency of this JobSalary.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def interval(self):
        """Gets the interval of this JobSalary.


        :return: The interval of this JobSalary.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this JobSalary.


        :param interval: The interval of this JobSalary.
        :type interval: str
        """

        self._interval = interval

    @property
    def max(self):
        """Gets the max of this JobSalary.

        Maximum salary payable for the job role.

        :return: The max of this JobSalary.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this JobSalary.

        Maximum salary payable for the job role.

        :param max: The max of this JobSalary.
        :type max: int
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this JobSalary.

        Minimum salary payable for the job role.

        :return: The min of this JobSalary.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this JobSalary.

        Minimum salary payable for the job role.

        :param min: The min of this JobSalary.
        :type min: int
        """

        self._min = min
