# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.branch import Branch
from openapi_server.models.custom_field import CustomField
from openapi_server.models.department import Department
from openapi_server.models.job_blocks_inner import JobBlocksInner
from openapi_server.models.job_links_inner import JobLinksInner
from openapi_server.models.job_salary import JobSalary
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[Address]=None, available_to_employees: bool=None, blocks: List[JobBlocksInner]=None, branch: Branch=None, closing: str=None, closing_date: date=None, closing_html: str=None, code: str=None, confidential: bool=None, created_at: datetime=None, created_by: str=None, custom_fields: List[CustomField]=None, custom_mappings: object=None, deleted: bool=None, department: Department=None, description: str=None, description_html: str=None, employment_terms: str=None, experience: str=None, followers: List[str]=None, hiring_managers: List[str]=None, id: str=None, job_portal_url: str=None, language: str=None, links: List[JobLinksInner]=None, location: str=None, owner_id: str=None, published_at: datetime=None, record_url: str=None, recruiters: List[str]=None, remote: bool=None, requisition_id: str=None, salary: JobSalary=None, sequence: int=None, slug: str=None, status: JobStatus=None, tags: List[str]=None, title: str=None, updated_at: datetime=None, updated_by: str=None, url: str=None, visibility: str=None):
        """Job - a model defined in OpenAPI

        :param addresses: The addresses of this Job.
        :param available_to_employees: The available_to_employees of this Job.
        :param blocks: The blocks of this Job.
        :param branch: The branch of this Job.
        :param closing: The closing of this Job.
        :param closing_date: The closing_date of this Job.
        :param closing_html: The closing_html of this Job.
        :param code: The code of this Job.
        :param confidential: The confidential of this Job.
        :param created_at: The created_at of this Job.
        :param created_by: The created_by of this Job.
        :param custom_fields: The custom_fields of this Job.
        :param custom_mappings: The custom_mappings of this Job.
        :param deleted: The deleted of this Job.
        :param department: The department of this Job.
        :param description: The description of this Job.
        :param description_html: The description_html of this Job.
        :param employment_terms: The employment_terms of this Job.
        :param experience: The experience of this Job.
        :param followers: The followers of this Job.
        :param hiring_managers: The hiring_managers of this Job.
        :param id: The id of this Job.
        :param job_portal_url: The job_portal_url of this Job.
        :param language: The language of this Job.
        :param links: The links of this Job.
        :param location: The location of this Job.
        :param owner_id: The owner_id of this Job.
        :param published_at: The published_at of this Job.
        :param record_url: The record_url of this Job.
        :param recruiters: The recruiters of this Job.
        :param remote: The remote of this Job.
        :param requisition_id: The requisition_id of this Job.
        :param salary: The salary of this Job.
        :param sequence: The sequence of this Job.
        :param slug: The slug of this Job.
        :param status: The status of this Job.
        :param tags: The tags of this Job.
        :param title: The title of this Job.
        :param updated_at: The updated_at of this Job.
        :param updated_by: The updated_by of this Job.
        :param url: The url of this Job.
        :param visibility: The visibility of this Job.
        """
        self.openapi_types = {
            'addresses': List[Address],
            'available_to_employees': bool,
            'blocks': List[JobBlocksInner],
            'branch': Branch,
            'closing': str,
            'closing_date': date,
            'closing_html': str,
            'code': str,
            'confidential': bool,
            'created_at': datetime,
            'created_by': str,
            'custom_fields': List[CustomField],
            'custom_mappings': object,
            'deleted': bool,
            'department': Department,
            'description': str,
            'description_html': str,
            'employment_terms': str,
            'experience': str,
            'followers': List[str],
            'hiring_managers': List[str],
            'id': str,
            'job_portal_url': str,
            'language': str,
            'links': List[JobLinksInner],
            'location': str,
            'owner_id': str,
            'published_at': datetime,
            'record_url': str,
            'recruiters': List[str],
            'remote': bool,
            'requisition_id': str,
            'salary': JobSalary,
            'sequence': int,
            'slug': str,
            'status': JobStatus,
            'tags': List[str],
            'title': str,
            'updated_at': datetime,
            'updated_by': str,
            'url': str,
            'visibility': str
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'available_to_employees': 'available_to_employees',
            'blocks': 'blocks',
            'branch': 'branch',
            'closing': 'closing',
            'closing_date': 'closing_date',
            'closing_html': 'closing_html',
            'code': 'code',
            'confidential': 'confidential',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_fields': 'custom_fields',
            'custom_mappings': 'custom_mappings',
            'deleted': 'deleted',
            'department': 'department',
            'description': 'description',
            'description_html': 'description_html',
            'employment_terms': 'employment_terms',
            'experience': 'experience',
            'followers': 'followers',
            'hiring_managers': 'hiring_managers',
            'id': 'id',
            'job_portal_url': 'job_portal_url',
            'language': 'language',
            'links': 'links',
            'location': 'location',
            'owner_id': 'owner_id',
            'published_at': 'published_at',
            'record_url': 'record_url',
            'recruiters': 'recruiters',
            'remote': 'remote',
            'requisition_id': 'requisition_id',
            'salary': 'salary',
            'sequence': 'sequence',
            'slug': 'slug',
            'status': 'status',
            'tags': 'tags',
            'title': 'title',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'url': 'url',
            'visibility': 'visibility'
        }

        self._addresses = addresses
        self._available_to_employees = available_to_employees
        self._blocks = blocks
        self._branch = branch
        self._closing = closing
        self._closing_date = closing_date
        self._closing_html = closing_html
        self._code = code
        self._confidential = confidential
        self._created_at = created_at
        self._created_by = created_by
        self._custom_fields = custom_fields
        self._custom_mappings = custom_mappings
        self._deleted = deleted
        self._department = department
        self._description = description
        self._description_html = description_html
        self._employment_terms = employment_terms
        self._experience = experience
        self._followers = followers
        self._hiring_managers = hiring_managers
        self._id = id
        self._job_portal_url = job_portal_url
        self._language = language
        self._links = links
        self._location = location
        self._owner_id = owner_id
        self._published_at = published_at
        self._record_url = record_url
        self._recruiters = recruiters
        self._remote = remote
        self._requisition_id = requisition_id
        self._salary = salary
        self._sequence = sequence
        self._slug = slug
        self._status = status
        self._tags = tags
        self._title = title
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._url = url
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this Job.


        :return: The addresses of this Job.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Job.


        :param addresses: The addresses of this Job.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def available_to_employees(self):
        """Gets the available_to_employees of this Job.

        Specifies whether an employee of the organization can apply for the job.

        :return: The available_to_employees of this Job.
        :rtype: bool
        """
        return self._available_to_employees

    @available_to_employees.setter
    def available_to_employees(self, available_to_employees):
        """Sets the available_to_employees of this Job.

        Specifies whether an employee of the organization can apply for the job.

        :param available_to_employees: The available_to_employees of this Job.
        :type available_to_employees: bool
        """

        self._available_to_employees = available_to_employees

    @property
    def blocks(self):
        """Gets the blocks of this Job.


        :return: The blocks of this Job.
        :rtype: List[JobBlocksInner]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this Job.


        :param blocks: The blocks of this Job.
        :type blocks: List[JobBlocksInner]
        """

        self._blocks = blocks

    @property
    def branch(self):
        """Gets the branch of this Job.


        :return: The branch of this Job.
        :rtype: Branch
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Job.


        :param branch: The branch of this Job.
        :type branch: Branch
        """

        self._branch = branch

    @property
    def closing(self):
        """Gets the closing of this Job.


        :return: The closing of this Job.
        :rtype: str
        """
        return self._closing

    @closing.setter
    def closing(self, closing):
        """Sets the closing of this Job.


        :param closing: The closing of this Job.
        :type closing: str
        """

        self._closing = closing

    @property
    def closing_date(self):
        """Gets the closing_date of this Job.


        :return: The closing_date of this Job.
        :rtype: date
        """
        return self._closing_date

    @closing_date.setter
    def closing_date(self, closing_date):
        """Sets the closing_date of this Job.


        :param closing_date: The closing_date of this Job.
        :type closing_date: date
        """

        self._closing_date = closing_date

    @property
    def closing_html(self):
        """Gets the closing_html of this Job.

        The closing section of the job description in HTML format

        :return: The closing_html of this Job.
        :rtype: str
        """
        return self._closing_html

    @closing_html.setter
    def closing_html(self, closing_html):
        """Sets the closing_html of this Job.

        The closing section of the job description in HTML format

        :param closing_html: The closing_html of this Job.
        :type closing_html: str
        """

        self._closing_html = closing_html

    @property
    def code(self):
        """Gets the code of this Job.

        The code of the job.

        :return: The code of this Job.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Job.

        The code of the job.

        :param code: The code of this Job.
        :type code: str
        """

        self._code = code

    @property
    def confidential(self):
        """Gets the confidential of this Job.


        :return: The confidential of this Job.
        :rtype: bool
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """Sets the confidential of this Job.


        :param confidential: The confidential of this Job.
        :type confidential: bool
        """

        self._confidential = confidential

    @property
    def created_at(self):
        """Gets the created_at of this Job.

        The date and time when the object was created.

        :return: The created_at of this Job.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Job.

        The date and time when the object was created.

        :param created_at: The created_at of this Job.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Job.

        The user who created the object.

        :return: The created_by of this Job.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Job.

        The user who created the object.

        :param created_by: The created_by of this Job.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Job.


        :return: The custom_fields of this Job.
        :rtype: List[CustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Job.


        :param custom_fields: The custom_fields of this Job.
        :type custom_fields: List[CustomField]
        """

        self._custom_fields = custom_fields

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Job.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Job.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Job.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Job.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def deleted(self):
        """Gets the deleted of this Job.

        Flag to indicate if the object is deleted.

        :return: The deleted of this Job.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Job.

        Flag to indicate if the object is deleted.

        :param deleted: The deleted of this Job.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def department(self):
        """Gets the department of this Job.


        :return: The department of this Job.
        :rtype: Department
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Job.


        :param department: The department of this Job.
        :type department: Department
        """

        self._department = department

    @property
    def description(self):
        """Gets the description of this Job.

        A description of the object.

        :return: The description of this Job.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Job.

        A description of the object.

        :param description: The description of this Job.
        :type description: str
        """

        self._description = description

    @property
    def description_html(self):
        """Gets the description_html of this Job.

        The job description in HTML format

        :return: The description_html of this Job.
        :rtype: str
        """
        return self._description_html

    @description_html.setter
    def description_html(self, description_html):
        """Sets the description_html of this Job.

        The job description in HTML format

        :param description_html: The description_html of this Job.
        :type description_html: str
        """

        self._description_html = description_html

    @property
    def employment_terms(self):
        """Gets the employment_terms of this Job.


        :return: The employment_terms of this Job.
        :rtype: str
        """
        return self._employment_terms

    @employment_terms.setter
    def employment_terms(self, employment_terms):
        """Sets the employment_terms of this Job.


        :param employment_terms: The employment_terms of this Job.
        :type employment_terms: str
        """
        allowed_values = [None,"full-time", "part-time", "internship", "contractor", "employee", "freelance", "temp", "seasonal", "volunteer", "other"]  # noqa: E501
        if employment_terms not in allowed_values:
            raise ValueError(
                "Invalid value for `employment_terms` ({0}), must be one of {1}"
                .format(employment_terms, allowed_values)
            )

        self._employment_terms = employment_terms

    @property
    def experience(self):
        """Gets the experience of this Job.

        Level of experience required for the job role.

        :return: The experience of this Job.
        :rtype: str
        """
        return self._experience

    @experience.setter
    def experience(self, experience):
        """Sets the experience of this Job.

        Level of experience required for the job role.

        :param experience: The experience of this Job.
        :type experience: str
        """

        self._experience = experience

    @property
    def followers(self):
        """Gets the followers of this Job.


        :return: The followers of this Job.
        :rtype: List[str]
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this Job.


        :param followers: The followers of this Job.
        :type followers: List[str]
        """

        self._followers = followers

    @property
    def hiring_managers(self):
        """Gets the hiring_managers of this Job.


        :return: The hiring_managers of this Job.
        :rtype: List[str]
        """
        return self._hiring_managers

    @hiring_managers.setter
    def hiring_managers(self, hiring_managers):
        """Sets the hiring_managers of this Job.


        :param hiring_managers: The hiring_managers of this Job.
        :type hiring_managers: List[str]
        """

        self._hiring_managers = hiring_managers

    @property
    def id(self):
        """Gets the id of this Job.

        A unique identifier for an object.

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        A unique identifier for an object.

        :param id: The id of this Job.
        :type id: str
        """

        self._id = id

    @property
    def job_portal_url(self):
        """Gets the job_portal_url of this Job.

        URL of the job portal

        :return: The job_portal_url of this Job.
        :rtype: str
        """
        return self._job_portal_url

    @job_portal_url.setter
    def job_portal_url(self, job_portal_url):
        """Sets the job_portal_url of this Job.

        URL of the job portal

        :param job_portal_url: The job_portal_url of this Job.
        :type job_portal_url: str
        """

        self._job_portal_url = job_portal_url

    @property
    def language(self):
        """Gets the language of this Job.

        language code according to ISO 639-1. For the United States - EN

        :return: The language of this Job.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Job.

        language code according to ISO 639-1. For the United States - EN

        :param language: The language of this Job.
        :type language: str
        """

        self._language = language

    @property
    def links(self):
        """Gets the links of this Job.


        :return: The links of this Job.
        :rtype: List[JobLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Job.


        :param links: The links of this Job.
        :type links: List[JobLinksInner]
        """

        self._links = links

    @property
    def location(self):
        """Gets the location of this Job.

        Specifies the location for the job posting.

        :return: The location of this Job.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Job.

        Specifies the location for the job posting.

        :param location: The location of this Job.
        :type location: str
        """

        self._location = location

    @property
    def owner_id(self):
        """Gets the owner_id of this Job.


        :return: The owner_id of this Job.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Job.


        :param owner_id: The owner_id of this Job.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def published_at(self):
        """Gets the published_at of this Job.


        :return: The published_at of this Job.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this Job.


        :param published_at: The published_at of this Job.
        :type published_at: datetime
        """

        self._published_at = published_at

    @property
    def record_url(self):
        """Gets the record_url of this Job.


        :return: The record_url of this Job.
        :rtype: str
        """
        return self._record_url

    @record_url.setter
    def record_url(self, record_url):
        """Sets the record_url of this Job.


        :param record_url: The record_url of this Job.
        :type record_url: str
        """

        self._record_url = record_url

    @property
    def recruiters(self):
        """Gets the recruiters of this Job.

        The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant

        :return: The recruiters of this Job.
        :rtype: List[str]
        """
        return self._recruiters

    @recruiters.setter
    def recruiters(self, recruiters):
        """Sets the recruiters of this Job.

        The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant

        :param recruiters: The recruiters of this Job.
        :type recruiters: List[str]
        """

        self._recruiters = recruiters

    @property
    def remote(self):
        """Gets the remote of this Job.

        Specifies whether the posting is for a remote job.

        :return: The remote of this Job.
        :rtype: bool
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this Job.

        Specifies whether the posting is for a remote job.

        :param remote: The remote of this Job.
        :type remote: bool
        """

        self._remote = remote

    @property
    def requisition_id(self):
        """Gets the requisition_id of this Job.

        A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.

        :return: The requisition_id of this Job.
        :rtype: str
        """
        return self._requisition_id

    @requisition_id.setter
    def requisition_id(self, requisition_id):
        """Sets the requisition_id of this Job.

        A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.

        :param requisition_id: The requisition_id of this Job.
        :type requisition_id: str
        """

        self._requisition_id = requisition_id

    @property
    def salary(self):
        """Gets the salary of this Job.


        :return: The salary of this Job.
        :rtype: JobSalary
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """Sets the salary of this Job.


        :param salary: The salary of this Job.
        :type salary: JobSalary
        """

        self._salary = salary

    @property
    def sequence(self):
        """Gets the sequence of this Job.

        Sequence in relation to other jobs.

        :return: The sequence of this Job.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Job.

        Sequence in relation to other jobs.

        :param sequence: The sequence of this Job.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def slug(self):
        """Gets the slug of this Job.


        :return: The slug of this Job.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Job.


        :param slug: The slug of this Job.
        :type slug: str
        """

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this Job.


        :return: The status of this Job.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.
        :type status: JobStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Job.


        :return: The tags of this Job.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Job.


        :param tags: The tags of this Job.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Job.

        The job title of the person.

        :return: The title of this Job.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Job.

        The job title of the person.

        :param title: The title of this Job.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Job.

        The date and time when the object was last updated.

        :return: The updated_at of this Job.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Job.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Job.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Job.

        The user who last updated the object.

        :return: The updated_by of this Job.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Job.

        The user who last updated the object.

        :param updated_by: The updated_by of this Job.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def url(self):
        """Gets the url of this Job.

        URL of the job description

        :return: The url of this Job.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Job.

        URL of the job description

        :param url: The url of this Job.
        :type url: str
        """

        self._url = url

    @property
    def visibility(self):
        """Gets the visibility of this Job.

        The visibility of the job

        :return: The visibility of this Job.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Job.

        The visibility of the job

        :param visibility: The visibility of this Job.
        :type visibility: str
        """
        allowed_values = ["draft", "public", "internal"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
