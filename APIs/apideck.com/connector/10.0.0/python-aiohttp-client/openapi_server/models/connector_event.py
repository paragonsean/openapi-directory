# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, downstream_event_type: str=None, entity_type: str=None, event_source: str=None, event_type: str=None, resources: List[str]=None):
        """ConnectorEvent - a model defined in OpenAPI

        :param downstream_event_type: The downstream_event_type of this ConnectorEvent.
        :param entity_type: The entity_type of this ConnectorEvent.
        :param event_source: The event_source of this ConnectorEvent.
        :param event_type: The event_type of this ConnectorEvent.
        :param resources: The resources of this ConnectorEvent.
        """
        self.openapi_types = {
            'downstream_event_type': str,
            'entity_type': str,
            'event_source': str,
            'event_type': str,
            'resources': List[str]
        }

        self.attribute_map = {
            'downstream_event_type': 'downstream_event_type',
            'entity_type': 'entity_type',
            'event_source': 'event_source',
            'event_type': 'event_type',
            'resources': 'resources'
        }

        self._downstream_event_type = downstream_event_type
        self._entity_type = entity_type
        self._event_source = event_source
        self._event_type = event_type
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorEvent of this ConnectorEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def downstream_event_type(self):
        """Gets the downstream_event_type of this ConnectorEvent.

        Downstream event type

        :return: The downstream_event_type of this ConnectorEvent.
        :rtype: str
        """
        return self._downstream_event_type

    @downstream_event_type.setter
    def downstream_event_type(self, downstream_event_type):
        """Sets the downstream_event_type of this ConnectorEvent.

        Downstream event type

        :param downstream_event_type: The downstream_event_type of this ConnectorEvent.
        :type downstream_event_type: str
        """

        self._downstream_event_type = downstream_event_type

    @property
    def entity_type(self):
        """Gets the entity_type of this ConnectorEvent.

        Unify entity type

        :return: The entity_type of this ConnectorEvent.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this ConnectorEvent.

        Unify entity type

        :param entity_type: The entity_type of this ConnectorEvent.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def event_source(self):
        """Gets the event_source of this ConnectorEvent.

        Unify event source

        :return: The event_source of this ConnectorEvent.
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this ConnectorEvent.

        Unify event source

        :param event_source: The event_source of this ConnectorEvent.
        :type event_source: str
        """
        allowed_values = ["native", "virtual"]  # noqa: E501
        if event_source not in allowed_values:
            raise ValueError(
                "Invalid value for `event_source` ({0}), must be one of {1}"
                .format(event_source, allowed_values)
            )

        self._event_source = event_source

    @property
    def event_type(self):
        """Gets the event_type of this ConnectorEvent.

        Unify event type

        :return: The event_type of this ConnectorEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ConnectorEvent.

        Unify event type

        :param event_type: The event_type of this ConnectorEvent.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def resources(self):
        """Gets the resources of this ConnectorEvent.


        :return: The resources of this ConnectorEvent.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ConnectorEvent.


        :param resources: The resources of this ConnectorEvent.
        :type resources: List[str]
        """

        self._resources = resources
