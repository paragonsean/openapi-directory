# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_resources_inner import ApiResourcesInner
from openapi_server.models.api_status import ApiStatus
from openapi_server import util


class Api(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_reference_url: str=None, categories: List[str]=None, description: str=None, events: List[str]=None, id: str=None, name: str=None, postman_collection_id: str=None, resources: List[ApiResourcesInner]=None, spec_url: str=None, status: ApiStatus=None, type: str=None):
        """Api - a model defined in OpenAPI

        :param api_reference_url: The api_reference_url of this Api.
        :param categories: The categories of this Api.
        :param description: The description of this Api.
        :param events: The events of this Api.
        :param id: The id of this Api.
        :param name: The name of this Api.
        :param postman_collection_id: The postman_collection_id of this Api.
        :param resources: The resources of this Api.
        :param spec_url: The spec_url of this Api.
        :param status: The status of this Api.
        :param type: The type of this Api.
        """
        self.openapi_types = {
            'api_reference_url': str,
            'categories': List[str],
            'description': str,
            'events': List[str],
            'id': str,
            'name': str,
            'postman_collection_id': str,
            'resources': List[ApiResourcesInner],
            'spec_url': str,
            'status': ApiStatus,
            'type': str
        }

        self.attribute_map = {
            'api_reference_url': 'api_reference_url',
            'categories': 'categories',
            'description': 'description',
            'events': 'events',
            'id': 'id',
            'name': 'name',
            'postman_collection_id': 'postman_collection_id',
            'resources': 'resources',
            'spec_url': 'spec_url',
            'status': 'status',
            'type': 'type'
        }

        self._api_reference_url = api_reference_url
        self._categories = categories
        self._description = description
        self._events = events
        self._id = id
        self._name = name
        self._postman_collection_id = postman_collection_id
        self._resources = resources
        self._spec_url = spec_url
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Api':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api of this Api.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_reference_url(self):
        """Gets the api_reference_url of this Api.

        Link to the API reference of the API.

        :return: The api_reference_url of this Api.
        :rtype: str
        """
        return self._api_reference_url

    @api_reference_url.setter
    def api_reference_url(self, api_reference_url):
        """Sets the api_reference_url of this Api.

        Link to the API reference of the API.

        :param api_reference_url: The api_reference_url of this Api.
        :type api_reference_url: str
        """

        self._api_reference_url = api_reference_url

    @property
    def categories(self):
        """Gets the categories of this Api.

        List of categories the API belongs to.

        :return: The categories of this Api.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Api.

        List of categories the API belongs to.

        :param categories: The categories of this Api.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def description(self):
        """Gets the description of this Api.

        Description of the API.

        :return: The description of this Api.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Api.

        Description of the API.

        :param description: The description of this Api.
        :type description: str
        """

        self._description = description

    @property
    def events(self):
        """Gets the events of this Api.

        List of event types this API supports.

        :return: The events of this Api.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Api.

        List of event types this API supports.

        :param events: The events of this Api.
        :type events: List[str]
        """

        self._events = events

    @property
    def id(self):
        """Gets the id of this Api.

        ID of the API.

        :return: The id of this Api.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Api.

        ID of the API.

        :param id: The id of this Api.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Api.

        Name of the API.

        :return: The name of this Api.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Api.

        Name of the API.

        :param name: The name of this Api.
        :type name: str
        """

        self._name = name

    @property
    def postman_collection_id(self):
        """Gets the postman_collection_id of this Api.

        ID of the Postman collection of the API.

        :return: The postman_collection_id of this Api.
        :rtype: str
        """
        return self._postman_collection_id

    @postman_collection_id.setter
    def postman_collection_id(self, postman_collection_id):
        """Sets the postman_collection_id of this Api.

        ID of the Postman collection of the API.

        :param postman_collection_id: The postman_collection_id of this Api.
        :type postman_collection_id: str
        """

        self._postman_collection_id = postman_collection_id

    @property
    def resources(self):
        """Gets the resources of this Api.

        List of resources supported in this API.

        :return: The resources of this Api.
        :rtype: List[ApiResourcesInner]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Api.

        List of resources supported in this API.

        :param resources: The resources of this Api.
        :type resources: List[ApiResourcesInner]
        """

        self._resources = resources

    @property
    def spec_url(self):
        """Gets the spec_url of this Api.

        Link to the latest OpenAPI specification of the API.

        :return: The spec_url of this Api.
        :rtype: str
        """
        return self._spec_url

    @spec_url.setter
    def spec_url(self, spec_url):
        """Sets the spec_url of this Api.

        Link to the latest OpenAPI specification of the API.

        :param spec_url: The spec_url of this Api.
        :type spec_url: str
        """

        self._spec_url = spec_url

    @property
    def status(self):
        """Gets the status of this Api.


        :return: The status of this Api.
        :rtype: ApiStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Api.


        :param status: The status of this Api.
        :type status: ApiStatus
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Api.

        Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.

        :return: The type of this Api.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Api.

        Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.

        :param type: The type of this Api.
        :type type: str
        """
        allowed_values = ["platform", "unified"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
