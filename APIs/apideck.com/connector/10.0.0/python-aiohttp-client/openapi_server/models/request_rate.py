# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rate: int=None, size: int=None, unit: str=None):
        """RequestRate - a model defined in OpenAPI

        :param rate: The rate of this RequestRate.
        :param size: The size of this RequestRate.
        :param unit: The unit of this RequestRate.
        """
        self.openapi_types = {
            'rate': int,
            'size': int,
            'unit': str
        }

        self.attribute_map = {
            'rate': 'rate',
            'size': 'size',
            'unit': 'unit'
        }

        self._rate = rate
        self._size = size
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_Rate of this RequestRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rate(self):
        """Gets the rate of this RequestRate.

        The number of requests per window unit.

        :return: The rate of this RequestRate.
        :rtype: int
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this RequestRate.

        The number of requests per window unit.

        :param rate: The rate of this RequestRate.
        :type rate: int
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def size(self):
        """Gets the size of this RequestRate.

        Size of request window.

        :return: The size of this RequestRate.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this RequestRate.

        Size of request window.

        :param size: The size of this RequestRate.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def unit(self):
        """Gets the unit of this RequestRate.

        The window unit for the rate.

        :return: The unit of this RequestRate.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this RequestRate.

        The window unit for the rate.

        :param unit: The unit of this RequestRate.
        :type unit: str
        """
        allowed_values = ["second", "minute", "hour", "day"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
