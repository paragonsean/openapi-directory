# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorDoc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audience: str=None, format: str=None, id: str=None, name: str=None, url: str=None):
        """ConnectorDoc - a model defined in OpenAPI

        :param audience: The audience of this ConnectorDoc.
        :param format: The format of this ConnectorDoc.
        :param id: The id of this ConnectorDoc.
        :param name: The name of this ConnectorDoc.
        :param url: The url of this ConnectorDoc.
        """
        self.openapi_types = {
            'audience': str,
            'format': str,
            'id': str,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'audience': 'audience',
            'format': 'format',
            'id': 'id',
            'name': 'name',
            'url': 'url'
        }

        self._audience = audience
        self._format = format
        self._id = id
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorDoc':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorDoc of this ConnectorDoc.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audience(self):
        """Gets the audience of this ConnectorDoc.

        Audience for the doc.

        :return: The audience of this ConnectorDoc.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this ConnectorDoc.

        Audience for the doc.

        :param audience: The audience of this ConnectorDoc.
        :type audience: str
        """
        allowed_values = ["application_owner", "consumer"]  # noqa: E501
        if audience not in allowed_values:
            raise ValueError(
                "Invalid value for `audience` ({0}), must be one of {1}"
                .format(audience, allowed_values)
            )

        self._audience = audience

    @property
    def format(self):
        """Gets the format of this ConnectorDoc.

        Format of the doc.

        :return: The format of this ConnectorDoc.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ConnectorDoc.

        Format of the doc.

        :param format: The format of this ConnectorDoc.
        :type format: str
        """
        allowed_values = ["markdown"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def id(self):
        """Gets the id of this ConnectorDoc.

        A unique identifier for an object.

        :return: The id of this ConnectorDoc.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorDoc.

        A unique identifier for an object.

        :param id: The id of this ConnectorDoc.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConnectorDoc.

        Name of the doc.

        :return: The name of this ConnectorDoc.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectorDoc.

        Name of the doc.

        :param name: The name of this ConnectorDoc.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this ConnectorDoc.

        Link to fetch the content of the doc.

        :return: The url of this ConnectorDoc.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConnectorDoc.

        Link to fetch the content of the doc.

        :param url: The url of this ConnectorDoc.
        :type url: str
        """

        self._url = url
