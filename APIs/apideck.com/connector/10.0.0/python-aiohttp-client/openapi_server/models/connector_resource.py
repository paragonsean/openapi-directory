# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pagination_coverage import PaginationCoverage
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.supported_property import SupportedProperty
from openapi_server import util


class ConnectorResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_fields_supported: bool=None, downstream_id: str=None, downstream_name: str=None, downstream_unsupported_operations: List[str]=None, id: str=None, name: str=None, pagination: PaginationCoverage=None, pagination_supported: bool=None, status: ResourceStatus=None, supported_fields: List[SupportedProperty]=None, supported_filters: List[str]=None, supported_list_fields: List[SupportedProperty]=None, supported_operations: List[str]=None, supported_sort_by: List[str]=None):
        """ConnectorResource - a model defined in OpenAPI

        :param custom_fields_supported: The custom_fields_supported of this ConnectorResource.
        :param downstream_id: The downstream_id of this ConnectorResource.
        :param downstream_name: The downstream_name of this ConnectorResource.
        :param downstream_unsupported_operations: The downstream_unsupported_operations of this ConnectorResource.
        :param id: The id of this ConnectorResource.
        :param name: The name of this ConnectorResource.
        :param pagination: The pagination of this ConnectorResource.
        :param pagination_supported: The pagination_supported of this ConnectorResource.
        :param status: The status of this ConnectorResource.
        :param supported_fields: The supported_fields of this ConnectorResource.
        :param supported_filters: The supported_filters of this ConnectorResource.
        :param supported_list_fields: The supported_list_fields of this ConnectorResource.
        :param supported_operations: The supported_operations of this ConnectorResource.
        :param supported_sort_by: The supported_sort_by of this ConnectorResource.
        """
        self.openapi_types = {
            'custom_fields_supported': bool,
            'downstream_id': str,
            'downstream_name': str,
            'downstream_unsupported_operations': List[str],
            'id': str,
            'name': str,
            'pagination': PaginationCoverage,
            'pagination_supported': bool,
            'status': ResourceStatus,
            'supported_fields': List[SupportedProperty],
            'supported_filters': List[str],
            'supported_list_fields': List[SupportedProperty],
            'supported_operations': List[str],
            'supported_sort_by': List[str]
        }

        self.attribute_map = {
            'custom_fields_supported': 'custom_fields_supported',
            'downstream_id': 'downstream_id',
            'downstream_name': 'downstream_name',
            'downstream_unsupported_operations': 'downstream_unsupported_operations',
            'id': 'id',
            'name': 'name',
            'pagination': 'pagination',
            'pagination_supported': 'pagination_supported',
            'status': 'status',
            'supported_fields': 'supported_fields',
            'supported_filters': 'supported_filters',
            'supported_list_fields': 'supported_list_fields',
            'supported_operations': 'supported_operations',
            'supported_sort_by': 'supported_sort_by'
        }

        self._custom_fields_supported = custom_fields_supported
        self._downstream_id = downstream_id
        self._downstream_name = downstream_name
        self._downstream_unsupported_operations = downstream_unsupported_operations
        self._id = id
        self._name = name
        self._pagination = pagination
        self._pagination_supported = pagination_supported
        self._status = status
        self._supported_fields = supported_fields
        self._supported_filters = supported_filters
        self._supported_list_fields = supported_list_fields
        self._supported_operations = supported_operations
        self._supported_sort_by = supported_sort_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorResource of this ConnectorResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_fields_supported(self):
        """Gets the custom_fields_supported of this ConnectorResource.

        Indicates if custom fields are supported on this resource.

        :return: The custom_fields_supported of this ConnectorResource.
        :rtype: bool
        """
        return self._custom_fields_supported

    @custom_fields_supported.setter
    def custom_fields_supported(self, custom_fields_supported):
        """Sets the custom_fields_supported of this ConnectorResource.

        Indicates if custom fields are supported on this resource.

        :param custom_fields_supported: The custom_fields_supported of this ConnectorResource.
        :type custom_fields_supported: bool
        """

        self._custom_fields_supported = custom_fields_supported

    @property
    def downstream_id(self):
        """Gets the downstream_id of this ConnectorResource.

        ID of the resource in the Connector's API (downstream)

        :return: The downstream_id of this ConnectorResource.
        :rtype: str
        """
        return self._downstream_id

    @downstream_id.setter
    def downstream_id(self, downstream_id):
        """Sets the downstream_id of this ConnectorResource.

        ID of the resource in the Connector's API (downstream)

        :param downstream_id: The downstream_id of this ConnectorResource.
        :type downstream_id: str
        """

        self._downstream_id = downstream_id

    @property
    def downstream_name(self):
        """Gets the downstream_name of this ConnectorResource.

        Name of the resource in the Connector's API (downstream)

        :return: The downstream_name of this ConnectorResource.
        :rtype: str
        """
        return self._downstream_name

    @downstream_name.setter
    def downstream_name(self, downstream_name):
        """Sets the downstream_name of this ConnectorResource.

        Name of the resource in the Connector's API (downstream)

        :param downstream_name: The downstream_name of this ConnectorResource.
        :type downstream_name: str
        """

        self._downstream_name = downstream_name

    @property
    def downstream_unsupported_operations(self):
        """Gets the downstream_unsupported_operations of this ConnectorResource.

        List of operations that are not supported on the downstream.

        :return: The downstream_unsupported_operations of this ConnectorResource.
        :rtype: List[str]
        """
        return self._downstream_unsupported_operations

    @downstream_unsupported_operations.setter
    def downstream_unsupported_operations(self, downstream_unsupported_operations):
        """Sets the downstream_unsupported_operations of this ConnectorResource.

        List of operations that are not supported on the downstream.

        :param downstream_unsupported_operations: The downstream_unsupported_operations of this ConnectorResource.
        :type downstream_unsupported_operations: List[str]
        """

        self._downstream_unsupported_operations = downstream_unsupported_operations

    @property
    def id(self):
        """Gets the id of this ConnectorResource.

        ID of the resource, typically a lowercased version of name.

        :return: The id of this ConnectorResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorResource.

        ID of the resource, typically a lowercased version of name.

        :param id: The id of this ConnectorResource.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConnectorResource.

        Name of the resource (plural)

        :return: The name of this ConnectorResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectorResource.

        Name of the resource (plural)

        :param name: The name of this ConnectorResource.
        :type name: str
        """

        self._name = name

    @property
    def pagination(self):
        """Gets the pagination of this ConnectorResource.


        :return: The pagination of this ConnectorResource.
        :rtype: PaginationCoverage
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this ConnectorResource.


        :param pagination: The pagination of this ConnectorResource.
        :type pagination: PaginationCoverage
        """

        self._pagination = pagination

    @property
    def pagination_supported(self):
        """Gets the pagination_supported of this ConnectorResource.

        Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.

        :return: The pagination_supported of this ConnectorResource.
        :rtype: bool
        """
        return self._pagination_supported

    @pagination_supported.setter
    def pagination_supported(self, pagination_supported):
        """Sets the pagination_supported of this ConnectorResource.

        Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.

        :param pagination_supported: The pagination_supported of this ConnectorResource.
        :type pagination_supported: bool
        """

        self._pagination_supported = pagination_supported

    @property
    def status(self):
        """Gets the status of this ConnectorResource.


        :return: The status of this ConnectorResource.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectorResource.


        :param status: The status of this ConnectorResource.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def supported_fields(self):
        """Gets the supported_fields of this ConnectorResource.

        Supported fields on the detail endpoint.

        :return: The supported_fields of this ConnectorResource.
        :rtype: List[SupportedProperty]
        """
        return self._supported_fields

    @supported_fields.setter
    def supported_fields(self, supported_fields):
        """Sets the supported_fields of this ConnectorResource.

        Supported fields on the detail endpoint.

        :param supported_fields: The supported_fields of this ConnectorResource.
        :type supported_fields: List[SupportedProperty]
        """

        self._supported_fields = supported_fields

    @property
    def supported_filters(self):
        """Gets the supported_filters of this ConnectorResource.

        Supported filters on the list endpoint of the resource.

        :return: The supported_filters of this ConnectorResource.
        :rtype: List[str]
        """
        return self._supported_filters

    @supported_filters.setter
    def supported_filters(self, supported_filters):
        """Sets the supported_filters of this ConnectorResource.

        Supported filters on the list endpoint of the resource.

        :param supported_filters: The supported_filters of this ConnectorResource.
        :type supported_filters: List[str]
        """

        self._supported_filters = supported_filters

    @property
    def supported_list_fields(self):
        """Gets the supported_list_fields of this ConnectorResource.

        Supported fields on the list endpoint.

        :return: The supported_list_fields of this ConnectorResource.
        :rtype: List[SupportedProperty]
        """
        return self._supported_list_fields

    @supported_list_fields.setter
    def supported_list_fields(self, supported_list_fields):
        """Sets the supported_list_fields of this ConnectorResource.

        Supported fields on the list endpoint.

        :param supported_list_fields: The supported_list_fields of this ConnectorResource.
        :type supported_list_fields: List[SupportedProperty]
        """

        self._supported_list_fields = supported_list_fields

    @property
    def supported_operations(self):
        """Gets the supported_operations of this ConnectorResource.

        List of supported operations on the resource.

        :return: The supported_operations of this ConnectorResource.
        :rtype: List[str]
        """
        return self._supported_operations

    @supported_operations.setter
    def supported_operations(self, supported_operations):
        """Sets the supported_operations of this ConnectorResource.

        List of supported operations on the resource.

        :param supported_operations: The supported_operations of this ConnectorResource.
        :type supported_operations: List[str]
        """

        self._supported_operations = supported_operations

    @property
    def supported_sort_by(self):
        """Gets the supported_sort_by of this ConnectorResource.

        Supported sorting properties on the list endpoint of the resource.

        :return: The supported_sort_by of this ConnectorResource.
        :rtype: List[str]
        """
        return self._supported_sort_by

    @supported_sort_by.setter
    def supported_sort_by(self, supported_sort_by):
        """Sets the supported_sort_by of this ConnectorResource.

        Supported sorting properties on the list endpoint of the resource.

        :param supported_sort_by: The supported_sort_by of this ConnectorResource.
        :type supported_sort_by: List[str]
        """

        self._supported_sort_by = supported_sort_by
