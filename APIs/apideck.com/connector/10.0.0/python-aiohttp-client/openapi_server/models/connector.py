# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_doc import ConnectorDoc
from openapi_server.models.connector_event import ConnectorEvent
from openapi_server.models.connector_oauth_scopes_inner import ConnectorOauthScopesInner
from openapi_server.models.connector_setting import ConnectorSetting
from openapi_server.models.connector_status import ConnectorStatus
from openapi_server.models.connector_tls_support import ConnectorTlsSupport
from openapi_server.models.connector_unified_apis_inner import ConnectorUnifiedApisInner
from openapi_server.models.linked_connector_resource import LinkedConnectorResource
from openapi_server.models.schema_support import SchemaSupport
from openapi_server.models.webhook_support import WebhookSupport
from openapi_server import util


class Connector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_only: bool=None, auth_type: str=None, blind_mapped: bool=None, configurable_resources: List[str]=None, custom_scopes: bool=None, description: str=None, docs: List[ConnectorDoc]=None, free_trial_available: bool=None, has_sandbox_credentials: bool=None, icon_url: str=None, id: str=None, logo_url: str=None, name: str=None, oauth_credentials_source: str=None, oauth_grant_type: str=None, oauth_scopes: List[ConnectorOauthScopesInner]=None, partner_signup_url: str=None, schema_support: SchemaSupport=None, service_id: str=None, settings: List[ConnectorSetting]=None, signup_url: str=None, status: ConnectorStatus=None, supported_events: List[ConnectorEvent]=None, supported_resources: List[LinkedConnectorResource]=None, tls_support: ConnectorTlsSupport=None, unified_apis: List[ConnectorUnifiedApisInner]=None, webhook_support: WebhookSupport=None, website_url: str=None):
        """Connector - a model defined in OpenAPI

        :param auth_only: The auth_only of this Connector.
        :param auth_type: The auth_type of this Connector.
        :param blind_mapped: The blind_mapped of this Connector.
        :param configurable_resources: The configurable_resources of this Connector.
        :param custom_scopes: The custom_scopes of this Connector.
        :param description: The description of this Connector.
        :param docs: The docs of this Connector.
        :param free_trial_available: The free_trial_available of this Connector.
        :param has_sandbox_credentials: The has_sandbox_credentials of this Connector.
        :param icon_url: The icon_url of this Connector.
        :param id: The id of this Connector.
        :param logo_url: The logo_url of this Connector.
        :param name: The name of this Connector.
        :param oauth_credentials_source: The oauth_credentials_source of this Connector.
        :param oauth_grant_type: The oauth_grant_type of this Connector.
        :param oauth_scopes: The oauth_scopes of this Connector.
        :param partner_signup_url: The partner_signup_url of this Connector.
        :param schema_support: The schema_support of this Connector.
        :param service_id: The service_id of this Connector.
        :param settings: The settings of this Connector.
        :param signup_url: The signup_url of this Connector.
        :param status: The status of this Connector.
        :param supported_events: The supported_events of this Connector.
        :param supported_resources: The supported_resources of this Connector.
        :param tls_support: The tls_support of this Connector.
        :param unified_apis: The unified_apis of this Connector.
        :param webhook_support: The webhook_support of this Connector.
        :param website_url: The website_url of this Connector.
        """
        self.openapi_types = {
            'auth_only': bool,
            'auth_type': str,
            'blind_mapped': bool,
            'configurable_resources': List[str],
            'custom_scopes': bool,
            'description': str,
            'docs': List[ConnectorDoc],
            'free_trial_available': bool,
            'has_sandbox_credentials': bool,
            'icon_url': str,
            'id': str,
            'logo_url': str,
            'name': str,
            'oauth_credentials_source': str,
            'oauth_grant_type': str,
            'oauth_scopes': List[ConnectorOauthScopesInner],
            'partner_signup_url': str,
            'schema_support': SchemaSupport,
            'service_id': str,
            'settings': List[ConnectorSetting],
            'signup_url': str,
            'status': ConnectorStatus,
            'supported_events': List[ConnectorEvent],
            'supported_resources': List[LinkedConnectorResource],
            'tls_support': ConnectorTlsSupport,
            'unified_apis': List[ConnectorUnifiedApisInner],
            'webhook_support': WebhookSupport,
            'website_url': str
        }

        self.attribute_map = {
            'auth_only': 'auth_only',
            'auth_type': 'auth_type',
            'blind_mapped': 'blind_mapped',
            'configurable_resources': 'configurable_resources',
            'custom_scopes': 'custom_scopes',
            'description': 'description',
            'docs': 'docs',
            'free_trial_available': 'free_trial_available',
            'has_sandbox_credentials': 'has_sandbox_credentials',
            'icon_url': 'icon_url',
            'id': 'id',
            'logo_url': 'logo_url',
            'name': 'name',
            'oauth_credentials_source': 'oauth_credentials_source',
            'oauth_grant_type': 'oauth_grant_type',
            'oauth_scopes': 'oauth_scopes',
            'partner_signup_url': 'partner_signup_url',
            'schema_support': 'schema_support',
            'service_id': 'service_id',
            'settings': 'settings',
            'signup_url': 'signup_url',
            'status': 'status',
            'supported_events': 'supported_events',
            'supported_resources': 'supported_resources',
            'tls_support': 'tls_support',
            'unified_apis': 'unified_apis',
            'webhook_support': 'webhook_support',
            'website_url': 'website_url'
        }

        self._auth_only = auth_only
        self._auth_type = auth_type
        self._blind_mapped = blind_mapped
        self._configurable_resources = configurable_resources
        self._custom_scopes = custom_scopes
        self._description = description
        self._docs = docs
        self._free_trial_available = free_trial_available
        self._has_sandbox_credentials = has_sandbox_credentials
        self._icon_url = icon_url
        self._id = id
        self._logo_url = logo_url
        self._name = name
        self._oauth_credentials_source = oauth_credentials_source
        self._oauth_grant_type = oauth_grant_type
        self._oauth_scopes = oauth_scopes
        self._partner_signup_url = partner_signup_url
        self._schema_support = schema_support
        self._service_id = service_id
        self._settings = settings
        self._signup_url = signup_url
        self._status = status
        self._supported_events = supported_events
        self._supported_resources = supported_resources
        self._tls_support = tls_support
        self._unified_apis = unified_apis
        self._webhook_support = webhook_support
        self._website_url = website_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connector of this Connector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_only(self):
        """Gets the auth_only of this Connector.

        Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API

        :return: The auth_only of this Connector.
        :rtype: bool
        """
        return self._auth_only

    @auth_only.setter
    def auth_only(self, auth_only):
        """Sets the auth_only of this Connector.

        Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API

        :param auth_only: The auth_only of this Connector.
        :type auth_only: bool
        """

        self._auth_only = auth_only

    @property
    def auth_type(self):
        """Gets the auth_type of this Connector.

        Type of authorization used by the connector

        :return: The auth_type of this Connector.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Connector.

        Type of authorization used by the connector

        :param auth_type: The auth_type of this Connector.
        :type auth_type: str
        """
        allowed_values = ["oauth2", "apiKey", "basic", "custom", "none"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def blind_mapped(self):
        """Gets the blind_mapped of this Connector.

        Set to `true` when connector was implemented from downstream docs only and without API access. This state indicates that integration will require Apideck support, and access to downstream API to validate mapping quality.

        :return: The blind_mapped of this Connector.
        :rtype: bool
        """
        return self._blind_mapped

    @blind_mapped.setter
    def blind_mapped(self, blind_mapped):
        """Sets the blind_mapped of this Connector.

        Set to `true` when connector was implemented from downstream docs only and without API access. This state indicates that integration will require Apideck support, and access to downstream API to validate mapping quality.

        :param blind_mapped: The blind_mapped of this Connector.
        :type blind_mapped: bool
        """

        self._blind_mapped = blind_mapped

    @property
    def configurable_resources(self):
        """Gets the configurable_resources of this Connector.

        List of resources that have settings that can be configured.

        :return: The configurable_resources of this Connector.
        :rtype: List[str]
        """
        return self._configurable_resources

    @configurable_resources.setter
    def configurable_resources(self, configurable_resources):
        """Sets the configurable_resources of this Connector.

        List of resources that have settings that can be configured.

        :param configurable_resources: The configurable_resources of this Connector.
        :type configurable_resources: List[str]
        """

        self._configurable_resources = configurable_resources

    @property
    def custom_scopes(self):
        """Gets the custom_scopes of this Connector.

        Set to `true` when connector allows the definition of custom scopes.

        :return: The custom_scopes of this Connector.
        :rtype: bool
        """
        return self._custom_scopes

    @custom_scopes.setter
    def custom_scopes(self, custom_scopes):
        """Sets the custom_scopes of this Connector.

        Set to `true` when connector allows the definition of custom scopes.

        :param custom_scopes: The custom_scopes of this Connector.
        :type custom_scopes: bool
        """

        self._custom_scopes = custom_scopes

    @property
    def description(self):
        """Gets the description of this Connector.

        A description of the object.

        :return: The description of this Connector.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Connector.

        A description of the object.

        :param description: The description of this Connector.
        :type description: str
        """

        self._description = description

    @property
    def docs(self):
        """Gets the docs of this Connector.


        :return: The docs of this Connector.
        :rtype: List[ConnectorDoc]
        """
        return self._docs

    @docs.setter
    def docs(self, docs):
        """Sets the docs of this Connector.


        :param docs: The docs of this Connector.
        :type docs: List[ConnectorDoc]
        """

        self._docs = docs

    @property
    def free_trial_available(self):
        """Gets the free_trial_available of this Connector.

        Set to `true` when the connector offers a free trial. Use `signup_url` to sign up for a free trial

        :return: The free_trial_available of this Connector.
        :rtype: bool
        """
        return self._free_trial_available

    @free_trial_available.setter
    def free_trial_available(self, free_trial_available):
        """Sets the free_trial_available of this Connector.

        Set to `true` when the connector offers a free trial. Use `signup_url` to sign up for a free trial

        :param free_trial_available: The free_trial_available of this Connector.
        :type free_trial_available: bool
        """

        self._free_trial_available = free_trial_available

    @property
    def has_sandbox_credentials(self):
        """Gets the has_sandbox_credentials of this Connector.

        Indicates whether Apideck Sandbox OAuth credentials are available.

        :return: The has_sandbox_credentials of this Connector.
        :rtype: bool
        """
        return self._has_sandbox_credentials

    @has_sandbox_credentials.setter
    def has_sandbox_credentials(self, has_sandbox_credentials):
        """Sets the has_sandbox_credentials of this Connector.

        Indicates whether Apideck Sandbox OAuth credentials are available.

        :param has_sandbox_credentials: The has_sandbox_credentials of this Connector.
        :type has_sandbox_credentials: bool
        """

        self._has_sandbox_credentials = has_sandbox_credentials

    @property
    def icon_url(self):
        """Gets the icon_url of this Connector.

        Link to a small square icon for the connector.

        :return: The icon_url of this Connector.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this Connector.

        Link to a small square icon for the connector.

        :param icon_url: The icon_url of this Connector.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def id(self):
        """Gets the id of this Connector.

        ID of the connector.

        :return: The id of this Connector.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connector.

        ID of the connector.

        :param id: The id of this Connector.
        :type id: str
        """

        self._id = id

    @property
    def logo_url(self):
        """Gets the logo_url of this Connector.

        Link to the full logo for the connector.

        :return: The logo_url of this Connector.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Connector.

        Link to the full logo for the connector.

        :param logo_url: The logo_url of this Connector.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this Connector.

        Name of the connector.

        :return: The name of this Connector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connector.

        Name of the connector.

        :param name: The name of this Connector.
        :type name: str
        """

        self._name = name

    @property
    def oauth_credentials_source(self):
        """Gets the oauth_credentials_source of this Connector.

        Location of the OAuth client credentials. For most connectors the OAuth client credentials are stored on integration and managed by the application owner. For others they are stored on connection and managed by the consumer in Vault.

        :return: The oauth_credentials_source of this Connector.
        :rtype: str
        """
        return self._oauth_credentials_source

    @oauth_credentials_source.setter
    def oauth_credentials_source(self, oauth_credentials_source):
        """Sets the oauth_credentials_source of this Connector.

        Location of the OAuth client credentials. For most connectors the OAuth client credentials are stored on integration and managed by the application owner. For others they are stored on connection and managed by the consumer in Vault.

        :param oauth_credentials_source: The oauth_credentials_source of this Connector.
        :type oauth_credentials_source: str
        """
        allowed_values = ["integration", "connection"]  # noqa: E501
        if oauth_credentials_source not in allowed_values:
            raise ValueError(
                "Invalid value for `oauth_credentials_source` ({0}), must be one of {1}"
                .format(oauth_credentials_source, allowed_values)
            )

        self._oauth_credentials_source = oauth_credentials_source

    @property
    def oauth_grant_type(self):
        """Gets the oauth_grant_type of this Connector.

        OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types

        :return: The oauth_grant_type of this Connector.
        :rtype: str
        """
        return self._oauth_grant_type

    @oauth_grant_type.setter
    def oauth_grant_type(self, oauth_grant_type):
        """Sets the oauth_grant_type of this Connector.

        OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types

        :param oauth_grant_type: The oauth_grant_type of this Connector.
        :type oauth_grant_type: str
        """
        allowed_values = ["authorization_code", "client_credentials", "password"]  # noqa: E501
        if oauth_grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `oauth_grant_type` ({0}), must be one of {1}"
                .format(oauth_grant_type, allowed_values)
            )

        self._oauth_grant_type = oauth_grant_type

    @property
    def oauth_scopes(self):
        """Gets the oauth_scopes of this Connector.

        List of OAuth Scopes available for this connector.

        :return: The oauth_scopes of this Connector.
        :rtype: List[ConnectorOauthScopesInner]
        """
        return self._oauth_scopes

    @oauth_scopes.setter
    def oauth_scopes(self, oauth_scopes):
        """Sets the oauth_scopes of this Connector.

        List of OAuth Scopes available for this connector.

        :param oauth_scopes: The oauth_scopes of this Connector.
        :type oauth_scopes: List[ConnectorOauthScopesInner]
        """

        self._oauth_scopes = oauth_scopes

    @property
    def partner_signup_url(self):
        """Gets the partner_signup_url of this Connector.

        Link to the connector's partner program signup page.

        :return: The partner_signup_url of this Connector.
        :rtype: str
        """
        return self._partner_signup_url

    @partner_signup_url.setter
    def partner_signup_url(self, partner_signup_url):
        """Sets the partner_signup_url of this Connector.

        Link to the connector's partner program signup page.

        :param partner_signup_url: The partner_signup_url of this Connector.
        :type partner_signup_url: str
        """

        self._partner_signup_url = partner_signup_url

    @property
    def schema_support(self):
        """Gets the schema_support of this Connector.


        :return: The schema_support of this Connector.
        :rtype: SchemaSupport
        """
        return self._schema_support

    @schema_support.setter
    def schema_support(self, schema_support):
        """Sets the schema_support of this Connector.


        :param schema_support: The schema_support of this Connector.
        :type schema_support: SchemaSupport
        """

        self._schema_support = schema_support

    @property
    def service_id(self):
        """Gets the service_id of this Connector.

        Service provider identifier

        :return: The service_id of this Connector.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Connector.

        Service provider identifier

        :param service_id: The service_id of this Connector.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def settings(self):
        """Gets the settings of this Connector.


        :return: The settings of this Connector.
        :rtype: List[ConnectorSetting]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Connector.


        :param settings: The settings of this Connector.
        :type settings: List[ConnectorSetting]
        """

        self._settings = settings

    @property
    def signup_url(self):
        """Gets the signup_url of this Connector.

        Link to the connector's signup page.

        :return: The signup_url of this Connector.
        :rtype: str
        """
        return self._signup_url

    @signup_url.setter
    def signup_url(self, signup_url):
        """Sets the signup_url of this Connector.

        Link to the connector's signup page.

        :param signup_url: The signup_url of this Connector.
        :type signup_url: str
        """

        self._signup_url = signup_url

    @property
    def status(self):
        """Gets the status of this Connector.


        :return: The status of this Connector.
        :rtype: ConnectorStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Connector.


        :param status: The status of this Connector.
        :type status: ConnectorStatus
        """

        self._status = status

    @property
    def supported_events(self):
        """Gets the supported_events of this Connector.

        List of events that are supported on the connector across all Unified APIs.

        :return: The supported_events of this Connector.
        :rtype: List[ConnectorEvent]
        """
        return self._supported_events

    @supported_events.setter
    def supported_events(self, supported_events):
        """Sets the supported_events of this Connector.

        List of events that are supported on the connector across all Unified APIs.

        :param supported_events: The supported_events of this Connector.
        :type supported_events: List[ConnectorEvent]
        """

        self._supported_events = supported_events

    @property
    def supported_resources(self):
        """Gets the supported_resources of this Connector.

        List of resources that are supported on the connector.

        :return: The supported_resources of this Connector.
        :rtype: List[LinkedConnectorResource]
        """
        return self._supported_resources

    @supported_resources.setter
    def supported_resources(self, supported_resources):
        """Sets the supported_resources of this Connector.

        List of resources that are supported on the connector.

        :param supported_resources: The supported_resources of this Connector.
        :type supported_resources: List[LinkedConnectorResource]
        """

        self._supported_resources = supported_resources

    @property
    def tls_support(self):
        """Gets the tls_support of this Connector.


        :return: The tls_support of this Connector.
        :rtype: ConnectorTlsSupport
        """
        return self._tls_support

    @tls_support.setter
    def tls_support(self, tls_support):
        """Sets the tls_support of this Connector.


        :param tls_support: The tls_support of this Connector.
        :type tls_support: ConnectorTlsSupport
        """

        self._tls_support = tls_support

    @property
    def unified_apis(self):
        """Gets the unified_apis of this Connector.

        List of Unified APIs that feature this connector.

        :return: The unified_apis of this Connector.
        :rtype: List[ConnectorUnifiedApisInner]
        """
        return self._unified_apis

    @unified_apis.setter
    def unified_apis(self, unified_apis):
        """Sets the unified_apis of this Connector.

        List of Unified APIs that feature this connector.

        :param unified_apis: The unified_apis of this Connector.
        :type unified_apis: List[ConnectorUnifiedApisInner]
        """

        self._unified_apis = unified_apis

    @property
    def webhook_support(self):
        """Gets the webhook_support of this Connector.


        :return: The webhook_support of this Connector.
        :rtype: WebhookSupport
        """
        return self._webhook_support

    @webhook_support.setter
    def webhook_support(self, webhook_support):
        """Sets the webhook_support of this Connector.


        :param webhook_support: The webhook_support of this Connector.
        :type webhook_support: WebhookSupport
        """

        self._webhook_support = webhook_support

    @property
    def website_url(self):
        """Gets the website_url of this Connector.

        Link to the connector's website.

        :return: The website_url of this Connector.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Connector.

        Link to the connector's website.

        :param website_url: The website_url of this Connector.
        :type website_url: str
        """

        self._website_url = website_url
