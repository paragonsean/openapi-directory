# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_webhooks import VirtualWebhooks
from openapi_server import util


class WebhookSupport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed_via: str=None, mode: str=None, subscription_level: str=None, virtual_webhooks: VirtualWebhooks=None):
        """WebhookSupport - a model defined in OpenAPI

        :param managed_via: The managed_via of this WebhookSupport.
        :param mode: The mode of this WebhookSupport.
        :param subscription_level: The subscription_level of this WebhookSupport.
        :param virtual_webhooks: The virtual_webhooks of this WebhookSupport.
        """
        self.openapi_types = {
            'managed_via': str,
            'mode': str,
            'subscription_level': str,
            'virtual_webhooks': VirtualWebhooks
        }

        self.attribute_map = {
            'managed_via': 'managed_via',
            'mode': 'mode',
            'subscription_level': 'subscription_level',
            'virtual_webhooks': 'virtual_webhooks'
        }

        self._managed_via = managed_via
        self._mode = mode
        self._subscription_level = subscription_level
        self._virtual_webhooks = virtual_webhooks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookSupport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookSupport of this WebhookSupport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed_via(self):
        """Gets the managed_via of this WebhookSupport.

        How the subscription is managed in the downstream.

        :return: The managed_via of this WebhookSupport.
        :rtype: str
        """
        return self._managed_via

    @managed_via.setter
    def managed_via(self, managed_via):
        """Sets the managed_via of this WebhookSupport.

        How the subscription is managed in the downstream.

        :param managed_via: The managed_via of this WebhookSupport.
        :type managed_via: str
        """
        allowed_values = ["manual", "api"]  # noqa: E501
        if managed_via not in allowed_values:
            raise ValueError(
                "Invalid value for `managed_via` ({0}), must be one of {1}"
                .format(managed_via, allowed_values)
            )

        self._managed_via = managed_via

    @property
    def mode(self):
        """Gets the mode of this WebhookSupport.

        Mode of the webhook support.

        :return: The mode of this WebhookSupport.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this WebhookSupport.

        Mode of the webhook support.

        :param mode: The mode of this WebhookSupport.
        :type mode: str
        """
        allowed_values = ["native", "virtual", "none"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def subscription_level(self):
        """Gets the subscription_level of this WebhookSupport.

        Received events are scoped to connection or across integration.

        :return: The subscription_level of this WebhookSupport.
        :rtype: str
        """
        return self._subscription_level

    @subscription_level.setter
    def subscription_level(self, subscription_level):
        """Sets the subscription_level of this WebhookSupport.

        Received events are scoped to connection or across integration.

        :param subscription_level: The subscription_level of this WebhookSupport.
        :type subscription_level: str
        """
        allowed_values = ["connection", "integration"]  # noqa: E501
        if subscription_level not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_level` ({0}), must be one of {1}"
                .format(subscription_level, allowed_values)
            )

        self._subscription_level = subscription_level

    @property
    def virtual_webhooks(self):
        """Gets the virtual_webhooks of this WebhookSupport.


        :return: The virtual_webhooks of this WebhookSupport.
        :rtype: VirtualWebhooks
        """
        return self._virtual_webhooks

    @virtual_webhooks.setter
    def virtual_webhooks(self, virtual_webhooks):
        """Sets the virtual_webhooks of this WebhookSupport.


        :param virtual_webhooks: The virtual_webhooks of this WebhookSupport.
        :type virtual_webhooks: VirtualWebhooks
        """

        self._virtual_webhooks = virtual_webhooks
