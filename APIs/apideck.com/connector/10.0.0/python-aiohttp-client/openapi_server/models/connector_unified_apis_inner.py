# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_event import ConnectorEvent
from openapi_server.models.connector_unified_apis_inner_oauth_scopes_inner import ConnectorUnifiedApisInnerOauthScopesInner
from openapi_server.models.linked_connector_resource import LinkedConnectorResource
from openapi_server.models.unified_api_id import UnifiedApiId
from openapi_server import util


class ConnectorUnifiedApisInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_only: bool=None, downstream_unsupported_resources: List[str]=None, id: UnifiedApiId=None, name: str=None, oauth_scopes: List[ConnectorUnifiedApisInnerOauthScopesInner]=None, supported_events: List[ConnectorEvent]=None, supported_resources: List[LinkedConnectorResource]=None):
        """ConnectorUnifiedApisInner - a model defined in OpenAPI

        :param auth_only: The auth_only of this ConnectorUnifiedApisInner.
        :param downstream_unsupported_resources: The downstream_unsupported_resources of this ConnectorUnifiedApisInner.
        :param id: The id of this ConnectorUnifiedApisInner.
        :param name: The name of this ConnectorUnifiedApisInner.
        :param oauth_scopes: The oauth_scopes of this ConnectorUnifiedApisInner.
        :param supported_events: The supported_events of this ConnectorUnifiedApisInner.
        :param supported_resources: The supported_resources of this ConnectorUnifiedApisInner.
        """
        self.openapi_types = {
            'auth_only': bool,
            'downstream_unsupported_resources': List[str],
            'id': UnifiedApiId,
            'name': str,
            'oauth_scopes': List[ConnectorUnifiedApisInnerOauthScopesInner],
            'supported_events': List[ConnectorEvent],
            'supported_resources': List[LinkedConnectorResource]
        }

        self.attribute_map = {
            'auth_only': 'auth_only',
            'downstream_unsupported_resources': 'downstream_unsupported_resources',
            'id': 'id',
            'name': 'name',
            'oauth_scopes': 'oauth_scopes',
            'supported_events': 'supported_events',
            'supported_resources': 'supported_resources'
        }

        self._auth_only = auth_only
        self._downstream_unsupported_resources = downstream_unsupported_resources
        self._id = id
        self._name = name
        self._oauth_scopes = oauth_scopes
        self._supported_events = supported_events
        self._supported_resources = supported_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorUnifiedApisInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connector_unified_apis_inner of this ConnectorUnifiedApisInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_only(self):
        """Gets the auth_only of this ConnectorUnifiedApisInner.

        Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API

        :return: The auth_only of this ConnectorUnifiedApisInner.
        :rtype: bool
        """
        return self._auth_only

    @auth_only.setter
    def auth_only(self, auth_only):
        """Sets the auth_only of this ConnectorUnifiedApisInner.

        Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API

        :param auth_only: The auth_only of this ConnectorUnifiedApisInner.
        :type auth_only: bool
        """

        self._auth_only = auth_only

    @property
    def downstream_unsupported_resources(self):
        """Gets the downstream_unsupported_resources of this ConnectorUnifiedApisInner.

        List of resources that are not supported on the downstream.

        :return: The downstream_unsupported_resources of this ConnectorUnifiedApisInner.
        :rtype: List[str]
        """
        return self._downstream_unsupported_resources

    @downstream_unsupported_resources.setter
    def downstream_unsupported_resources(self, downstream_unsupported_resources):
        """Sets the downstream_unsupported_resources of this ConnectorUnifiedApisInner.

        List of resources that are not supported on the downstream.

        :param downstream_unsupported_resources: The downstream_unsupported_resources of this ConnectorUnifiedApisInner.
        :type downstream_unsupported_resources: List[str]
        """

        self._downstream_unsupported_resources = downstream_unsupported_resources

    @property
    def id(self):
        """Gets the id of this ConnectorUnifiedApisInner.


        :return: The id of this ConnectorUnifiedApisInner.
        :rtype: UnifiedApiId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorUnifiedApisInner.


        :param id: The id of this ConnectorUnifiedApisInner.
        :type id: UnifiedApiId
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConnectorUnifiedApisInner.

        Name of the API.

        :return: The name of this ConnectorUnifiedApisInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectorUnifiedApisInner.

        Name of the API.

        :param name: The name of this ConnectorUnifiedApisInner.
        :type name: str
        """

        self._name = name

    @property
    def oauth_scopes(self):
        """Gets the oauth_scopes of this ConnectorUnifiedApisInner.


        :return: The oauth_scopes of this ConnectorUnifiedApisInner.
        :rtype: List[ConnectorUnifiedApisInnerOauthScopesInner]
        """
        return self._oauth_scopes

    @oauth_scopes.setter
    def oauth_scopes(self, oauth_scopes):
        """Sets the oauth_scopes of this ConnectorUnifiedApisInner.


        :param oauth_scopes: The oauth_scopes of this ConnectorUnifiedApisInner.
        :type oauth_scopes: List[ConnectorUnifiedApisInnerOauthScopesInner]
        """

        self._oauth_scopes = oauth_scopes

    @property
    def supported_events(self):
        """Gets the supported_events of this ConnectorUnifiedApisInner.

        List of events that are supported on the connector for this Unified API.

        :return: The supported_events of this ConnectorUnifiedApisInner.
        :rtype: List[ConnectorEvent]
        """
        return self._supported_events

    @supported_events.setter
    def supported_events(self, supported_events):
        """Sets the supported_events of this ConnectorUnifiedApisInner.

        List of events that are supported on the connector for this Unified API.

        :param supported_events: The supported_events of this ConnectorUnifiedApisInner.
        :type supported_events: List[ConnectorEvent]
        """

        self._supported_events = supported_events

    @property
    def supported_resources(self):
        """Gets the supported_resources of this ConnectorUnifiedApisInner.

        List of resources that are supported on the connector.

        :return: The supported_resources of this ConnectorUnifiedApisInner.
        :rtype: List[LinkedConnectorResource]
        """
        return self._supported_resources

    @supported_resources.setter
    def supported_resources(self, supported_resources):
        """Sets the supported_resources of this ConnectorUnifiedApisInner.

        List of resources that are supported on the connector.

        :param supported_resources: The supported_resources of this ConnectorUnifiedApisInner.
        :type supported_resources: List[LinkedConnectorResource]
        """

        self._supported_resources = supported_resources
