# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.ecommerce_address import EcommerceAddress
from openapi_server.models.ecommerce_discount import EcommerceDiscount
from openapi_server.models.ecommerce_order_line_item import EcommerceOrderLineItem
from openapi_server.models.ecommerce_order_status import EcommerceOrderStatus
from openapi_server.models.linked_ecommerce_customer import LinkedEcommerceCustomer
from openapi_server.models.tracking_item import TrackingItem
from openapi_server import util


class EcommerceOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: EcommerceAddress=None, created_at: datetime=None, currency: Currency=None, custom_mappings: object=None, customer: LinkedEcommerceCustomer=None, discounts: List[EcommerceDiscount]=None, fulfillment_status: str=None, id: str=None, line_items: List[EcommerceOrderLineItem]=None, note: str=None, order_number: str=None, payment_method: str=None, payment_status: str=None, shipping_address: EcommerceAddress=None, shipping_cost: str=None, status: EcommerceOrderStatus=None, sub_total: str=None, total_amount: str=None, total_discount: str=None, total_tax: str=None, tracking: List[TrackingItem]=None, updated_at: datetime=None):
        """EcommerceOrder - a model defined in OpenAPI

        :param billing_address: The billing_address of this EcommerceOrder.
        :param created_at: The created_at of this EcommerceOrder.
        :param currency: The currency of this EcommerceOrder.
        :param custom_mappings: The custom_mappings of this EcommerceOrder.
        :param customer: The customer of this EcommerceOrder.
        :param discounts: The discounts of this EcommerceOrder.
        :param fulfillment_status: The fulfillment_status of this EcommerceOrder.
        :param id: The id of this EcommerceOrder.
        :param line_items: The line_items of this EcommerceOrder.
        :param note: The note of this EcommerceOrder.
        :param order_number: The order_number of this EcommerceOrder.
        :param payment_method: The payment_method of this EcommerceOrder.
        :param payment_status: The payment_status of this EcommerceOrder.
        :param shipping_address: The shipping_address of this EcommerceOrder.
        :param shipping_cost: The shipping_cost of this EcommerceOrder.
        :param status: The status of this EcommerceOrder.
        :param sub_total: The sub_total of this EcommerceOrder.
        :param total_amount: The total_amount of this EcommerceOrder.
        :param total_discount: The total_discount of this EcommerceOrder.
        :param total_tax: The total_tax of this EcommerceOrder.
        :param tracking: The tracking of this EcommerceOrder.
        :param updated_at: The updated_at of this EcommerceOrder.
        """
        self.openapi_types = {
            'billing_address': EcommerceAddress,
            'created_at': datetime,
            'currency': Currency,
            'custom_mappings': object,
            'customer': LinkedEcommerceCustomer,
            'discounts': List[EcommerceDiscount],
            'fulfillment_status': str,
            'id': str,
            'line_items': List[EcommerceOrderLineItem],
            'note': str,
            'order_number': str,
            'payment_method': str,
            'payment_status': str,
            'shipping_address': EcommerceAddress,
            'shipping_cost': str,
            'status': EcommerceOrderStatus,
            'sub_total': str,
            'total_amount': str,
            'total_discount': str,
            'total_tax': str,
            'tracking': List[TrackingItem],
            'updated_at': datetime
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'created_at': 'created_at',
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'customer': 'customer',
            'discounts': 'discounts',
            'fulfillment_status': 'fulfillment_status',
            'id': 'id',
            'line_items': 'line_items',
            'note': 'note',
            'order_number': 'order_number',
            'payment_method': 'payment_method',
            'payment_status': 'payment_status',
            'shipping_address': 'shipping_address',
            'shipping_cost': 'shipping_cost',
            'status': 'status',
            'sub_total': 'sub_total',
            'total_amount': 'total_amount',
            'total_discount': 'total_discount',
            'total_tax': 'total_tax',
            'tracking': 'tracking',
            'updated_at': 'updated_at'
        }

        self._billing_address = billing_address
        self._created_at = created_at
        self._currency = currency
        self._custom_mappings = custom_mappings
        self._customer = customer
        self._discounts = discounts
        self._fulfillment_status = fulfillment_status
        self._id = id
        self._line_items = line_items
        self._note = note
        self._order_number = order_number
        self._payment_method = payment_method
        self._payment_status = payment_status
        self._shipping_address = shipping_address
        self._shipping_cost = shipping_cost
        self._status = status
        self._sub_total = sub_total
        self._total_amount = total_amount
        self._total_discount = total_discount
        self._total_tax = total_tax
        self._tracking = tracking
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcommerceOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcommerceOrder of this EcommerceOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this EcommerceOrder.


        :return: The billing_address of this EcommerceOrder.
        :rtype: EcommerceAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this EcommerceOrder.


        :param billing_address: The billing_address of this EcommerceOrder.
        :type billing_address: EcommerceAddress
        """

        self._billing_address = billing_address

    @property
    def created_at(self):
        """Gets the created_at of this EcommerceOrder.

        The date and time when the object was created.

        :return: The created_at of this EcommerceOrder.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EcommerceOrder.

        The date and time when the object was created.

        :param created_at: The created_at of this EcommerceOrder.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this EcommerceOrder.


        :return: The currency of this EcommerceOrder.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EcommerceOrder.


        :param currency: The currency of this EcommerceOrder.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this EcommerceOrder.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this EcommerceOrder.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this EcommerceOrder.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this EcommerceOrder.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def customer(self):
        """Gets the customer of this EcommerceOrder.


        :return: The customer of this EcommerceOrder.
        :rtype: LinkedEcommerceCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this EcommerceOrder.


        :param customer: The customer of this EcommerceOrder.
        :type customer: LinkedEcommerceCustomer
        """

        self._customer = customer

    @property
    def discounts(self):
        """Gets the discounts of this EcommerceOrder.


        :return: The discounts of this EcommerceOrder.
        :rtype: List[EcommerceDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this EcommerceOrder.


        :param discounts: The discounts of this EcommerceOrder.
        :type discounts: List[EcommerceDiscount]
        """

        self._discounts = discounts

    @property
    def fulfillment_status(self):
        """Gets the fulfillment_status of this EcommerceOrder.

        Current fulfillment status of the order.

        :return: The fulfillment_status of this EcommerceOrder.
        :rtype: str
        """
        return self._fulfillment_status

    @fulfillment_status.setter
    def fulfillment_status(self, fulfillment_status):
        """Sets the fulfillment_status of this EcommerceOrder.

        Current fulfillment status of the order.

        :param fulfillment_status: The fulfillment_status of this EcommerceOrder.
        :type fulfillment_status: str
        """
        allowed_values = [None,"pending", "shipped", "partial", "delivered", "cancelled", "returned", "unknown"]  # noqa: E501
        if fulfillment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `fulfillment_status` ({0}), must be one of {1}"
                .format(fulfillment_status, allowed_values)
            )

        self._fulfillment_status = fulfillment_status

    @property
    def id(self):
        """Gets the id of this EcommerceOrder.

        A unique identifier for an object.

        :return: The id of this EcommerceOrder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcommerceOrder.

        A unique identifier for an object.

        :param id: The id of this EcommerceOrder.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def line_items(self):
        """Gets the line_items of this EcommerceOrder.


        :return: The line_items of this EcommerceOrder.
        :rtype: List[EcommerceOrderLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this EcommerceOrder.


        :param line_items: The line_items of this EcommerceOrder.
        :type line_items: List[EcommerceOrderLineItem]
        """

        self._line_items = line_items

    @property
    def note(self):
        """Gets the note of this EcommerceOrder.

        Note for the order.

        :return: The note of this EcommerceOrder.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EcommerceOrder.

        Note for the order.

        :param note: The note of this EcommerceOrder.
        :type note: str
        """

        self._note = note

    @property
    def order_number(self):
        """Gets the order_number of this EcommerceOrder.

        Order number, if any.

        :return: The order_number of this EcommerceOrder.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this EcommerceOrder.

        Order number, if any.

        :param order_number: The order_number of this EcommerceOrder.
        :type order_number: str
        """

        self._order_number = order_number

    @property
    def payment_method(self):
        """Gets the payment_method of this EcommerceOrder.

        Payment method used for this order.

        :return: The payment_method of this EcommerceOrder.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this EcommerceOrder.

        Payment method used for this order.

        :param payment_method: The payment_method of this EcommerceOrder.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def payment_status(self):
        """Gets the payment_status of this EcommerceOrder.

        Current payment status of the order.

        :return: The payment_status of this EcommerceOrder.
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this EcommerceOrder.

        Current payment status of the order.

        :param payment_status: The payment_status of this EcommerceOrder.
        :type payment_status: str
        """
        allowed_values = [None,"pending", "authorized", "paid", "partial", "refunded", "voided", "unknown"]  # noqa: E501
        if payment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_status` ({0}), must be one of {1}"
                .format(payment_status, allowed_values)
            )

        self._payment_status = payment_status

    @property
    def shipping_address(self):
        """Gets the shipping_address of this EcommerceOrder.


        :return: The shipping_address of this EcommerceOrder.
        :rtype: EcommerceAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this EcommerceOrder.


        :param shipping_address: The shipping_address of this EcommerceOrder.
        :type shipping_address: EcommerceAddress
        """

        self._shipping_address = shipping_address

    @property
    def shipping_cost(self):
        """Gets the shipping_cost of this EcommerceOrder.

        Shipping cost, if any.

        :return: The shipping_cost of this EcommerceOrder.
        :rtype: str
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """Sets the shipping_cost of this EcommerceOrder.

        Shipping cost, if any.

        :param shipping_cost: The shipping_cost of this EcommerceOrder.
        :type shipping_cost: str
        """

        self._shipping_cost = shipping_cost

    @property
    def status(self):
        """Gets the status of this EcommerceOrder.


        :return: The status of this EcommerceOrder.
        :rtype: EcommerceOrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EcommerceOrder.


        :param status: The status of this EcommerceOrder.
        :type status: EcommerceOrderStatus
        """

        self._status = status

    @property
    def sub_total(self):
        """Gets the sub_total of this EcommerceOrder.

        Sub-total amount, normally before tax.

        :return: The sub_total of this EcommerceOrder.
        :rtype: str
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this EcommerceOrder.

        Sub-total amount, normally before tax.

        :param sub_total: The sub_total of this EcommerceOrder.
        :type sub_total: str
        """

        self._sub_total = sub_total

    @property
    def total_amount(self):
        """Gets the total_amount of this EcommerceOrder.

        Total amount due.

        :return: The total_amount of this EcommerceOrder.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this EcommerceOrder.

        Total amount due.

        :param total_amount: The total_amount of this EcommerceOrder.
        :type total_amount: str
        """

        self._total_amount = total_amount

    @property
    def total_discount(self):
        """Gets the total_discount of this EcommerceOrder.

        Total discount, if any.

        :return: The total_discount of this EcommerceOrder.
        :rtype: str
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this EcommerceOrder.

        Total discount, if any.

        :param total_discount: The total_discount of this EcommerceOrder.
        :type total_discount: str
        """

        self._total_discount = total_discount

    @property
    def total_tax(self):
        """Gets the total_tax of this EcommerceOrder.

        Total tax, if any.

        :return: The total_tax of this EcommerceOrder.
        :rtype: str
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this EcommerceOrder.

        Total tax, if any.

        :param total_tax: The total_tax of this EcommerceOrder.
        :type total_tax: str
        """

        self._total_tax = total_tax

    @property
    def tracking(self):
        """Gets the tracking of this EcommerceOrder.


        :return: The tracking of this EcommerceOrder.
        :rtype: List[TrackingItem]
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this EcommerceOrder.


        :param tracking: The tracking of this EcommerceOrder.
        :type tracking: List[TrackingItem]
        """

        self._tracking = tracking

    @property
    def updated_at(self):
        """Gets the updated_at of this EcommerceOrder.

        The date and time when the object was last updated.

        :return: The updated_at of this EcommerceOrder.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EcommerceOrder.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this EcommerceOrder.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
