# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EcommerceAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, company_name: str=None, country: str=None, line1: str=None, line2: str=None, postal_code: str=None, state: str=None):
        """EcommerceAddress - a model defined in OpenAPI

        :param city: The city of this EcommerceAddress.
        :param company_name: The company_name of this EcommerceAddress.
        :param country: The country of this EcommerceAddress.
        :param line1: The line1 of this EcommerceAddress.
        :param line2: The line2 of this EcommerceAddress.
        :param postal_code: The postal_code of this EcommerceAddress.
        :param state: The state of this EcommerceAddress.
        """
        self.openapi_types = {
            'city': str,
            'company_name': str,
            'country': str,
            'line1': str,
            'line2': str,
            'postal_code': str,
            'state': str
        }

        self.attribute_map = {
            'city': 'city',
            'company_name': 'company_name',
            'country': 'country',
            'line1': 'line1',
            'line2': 'line2',
            'postal_code': 'postal_code',
            'state': 'state'
        }

        self._city = city
        self._company_name = company_name
        self._country = country
        self._line1 = line1
        self._line2 = line2
        self._postal_code = postal_code
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcommerceAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcommerceAddress of this EcommerceAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this EcommerceAddress.

        City of the billing address.

        :return: The city of this EcommerceAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EcommerceAddress.

        City of the billing address.

        :param city: The city of this EcommerceAddress.
        :type city: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this EcommerceAddress.

        Company name of the customer

        :return: The company_name of this EcommerceAddress.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this EcommerceAddress.

        Company name of the customer

        :param company_name: The company_name of this EcommerceAddress.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this EcommerceAddress.

        Country of the billing address.

        :return: The country of this EcommerceAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EcommerceAddress.

        Country of the billing address.

        :param country: The country of this EcommerceAddress.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")

        self._country = country

    @property
    def line1(self):
        """Gets the line1 of this EcommerceAddress.

        Address line 1 of the billing address.

        :return: The line1 of this EcommerceAddress.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this EcommerceAddress.

        Address line 1 of the billing address.

        :param line1: The line1 of this EcommerceAddress.
        :type line1: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this EcommerceAddress.

        Address line 2 of the billing address.

        :return: The line2 of this EcommerceAddress.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this EcommerceAddress.

        Address line 2 of the billing address.

        :param line2: The line2 of this EcommerceAddress.
        :type line2: str
        """

        self._line2 = line2

    @property
    def postal_code(self):
        """Gets the postal_code of this EcommerceAddress.

        Postal/ZIP code of the billing address.

        :return: The postal_code of this EcommerceAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this EcommerceAddress.

        Postal/ZIP code of the billing address.

        :param postal_code: The postal_code of this EcommerceAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this EcommerceAddress.

        State/province of the billing address.

        :return: The state of this EcommerceAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EcommerceAddress.

        State/province of the billing address.

        :param state: The state of this EcommerceAddress.
        :type state: str
        """

        self._state = state
