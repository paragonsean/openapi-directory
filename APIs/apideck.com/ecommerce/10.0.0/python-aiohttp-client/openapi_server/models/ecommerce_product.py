# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ecommerce_product_variants_inner import EcommerceProductVariantsInner
from openapi_server.models.product_categories_inner import ProductCategoriesInner
from openapi_server.models.product_images_inner import ProductImagesInner
from openapi_server.models.product_options_inner import ProductOptionsInner
from openapi_server import util


class EcommerceProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[ProductCategoriesInner]=None, created_at: datetime=None, custom_mappings: object=None, description: str=None, id: str=None, images: List[ProductImagesInner]=None, inventory_quantity: str=None, name: str=None, options: List[ProductOptionsInner]=None, price: str=None, sku: str=None, status: str=None, tags: List[str]=None, updated_at: datetime=None, variants: List[EcommerceProductVariantsInner]=None, weight: str=None, weight_unit: str=None):
        """EcommerceProduct - a model defined in OpenAPI

        :param categories: The categories of this EcommerceProduct.
        :param created_at: The created_at of this EcommerceProduct.
        :param custom_mappings: The custom_mappings of this EcommerceProduct.
        :param description: The description of this EcommerceProduct.
        :param id: The id of this EcommerceProduct.
        :param images: The images of this EcommerceProduct.
        :param inventory_quantity: The inventory_quantity of this EcommerceProduct.
        :param name: The name of this EcommerceProduct.
        :param options: The options of this EcommerceProduct.
        :param price: The price of this EcommerceProduct.
        :param sku: The sku of this EcommerceProduct.
        :param status: The status of this EcommerceProduct.
        :param tags: The tags of this EcommerceProduct.
        :param updated_at: The updated_at of this EcommerceProduct.
        :param variants: The variants of this EcommerceProduct.
        :param weight: The weight of this EcommerceProduct.
        :param weight_unit: The weight_unit of this EcommerceProduct.
        """
        self.openapi_types = {
            'categories': List[ProductCategoriesInner],
            'created_at': datetime,
            'custom_mappings': object,
            'description': str,
            'id': str,
            'images': List[ProductImagesInner],
            'inventory_quantity': str,
            'name': str,
            'options': List[ProductOptionsInner],
            'price': str,
            'sku': str,
            'status': str,
            'tags': List[str],
            'updated_at': datetime,
            'variants': List[EcommerceProductVariantsInner],
            'weight': str,
            'weight_unit': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'created_at': 'created_at',
            'custom_mappings': 'custom_mappings',
            'description': 'description',
            'id': 'id',
            'images': 'images',
            'inventory_quantity': 'inventory_quantity',
            'name': 'name',
            'options': 'options',
            'price': 'price',
            'sku': 'sku',
            'status': 'status',
            'tags': 'tags',
            'updated_at': 'updated_at',
            'variants': 'variants',
            'weight': 'weight',
            'weight_unit': 'weight_unit'
        }

        self._categories = categories
        self._created_at = created_at
        self._custom_mappings = custom_mappings
        self._description = description
        self._id = id
        self._images = images
        self._inventory_quantity = inventory_quantity
        self._name = name
        self._options = options
        self._price = price
        self._sku = sku
        self._status = status
        self._tags = tags
        self._updated_at = updated_at
        self._variants = variants
        self._weight = weight
        self._weight_unit = weight_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcommerceProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcommerceProduct of this EcommerceProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this EcommerceProduct.

        An array of categories for the product, used for organization and searching.

        :return: The categories of this EcommerceProduct.
        :rtype: List[ProductCategoriesInner]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this EcommerceProduct.

        An array of categories for the product, used for organization and searching.

        :param categories: The categories of this EcommerceProduct.
        :type categories: List[ProductCategoriesInner]
        """

        self._categories = categories

    @property
    def created_at(self):
        """Gets the created_at of this EcommerceProduct.

        The date and time when the object was created.

        :return: The created_at of this EcommerceProduct.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EcommerceProduct.

        The date and time when the object was created.

        :param created_at: The created_at of this EcommerceProduct.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this EcommerceProduct.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this EcommerceProduct.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this EcommerceProduct.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this EcommerceProduct.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def description(self):
        """Gets the description of this EcommerceProduct.

        A detailed description of the product.

        :return: The description of this EcommerceProduct.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EcommerceProduct.

        A detailed description of the product.

        :param description: The description of this EcommerceProduct.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this EcommerceProduct.

        A unique identifier for an object.

        :return: The id of this EcommerceProduct.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcommerceProduct.

        A unique identifier for an object.

        :param id: The id of this EcommerceProduct.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this EcommerceProduct.

        An array of image URLs for the product.

        :return: The images of this EcommerceProduct.
        :rtype: List[ProductImagesInner]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this EcommerceProduct.

        An array of image URLs for the product.

        :param images: The images of this EcommerceProduct.
        :type images: List[ProductImagesInner]
        """

        self._images = images

    @property
    def inventory_quantity(self):
        """Gets the inventory_quantity of this EcommerceProduct.

        The quantity of the product in stock.

        :return: The inventory_quantity of this EcommerceProduct.
        :rtype: str
        """
        return self._inventory_quantity

    @inventory_quantity.setter
    def inventory_quantity(self, inventory_quantity):
        """Sets the inventory_quantity of this EcommerceProduct.

        The quantity of the product in stock.

        :param inventory_quantity: The inventory_quantity of this EcommerceProduct.
        :type inventory_quantity: str
        """

        self._inventory_quantity = inventory_quantity

    @property
    def name(self):
        """Gets the name of this EcommerceProduct.

        The name of the product as it should be displayed to customers.

        :return: The name of this EcommerceProduct.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EcommerceProduct.

        The name of the product as it should be displayed to customers.

        :param name: The name of this EcommerceProduct.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this EcommerceProduct.

        An array of options for the product.

        :return: The options of this EcommerceProduct.
        :rtype: List[ProductOptionsInner]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EcommerceProduct.

        An array of options for the product.

        :param options: The options of this EcommerceProduct.
        :type options: List[ProductOptionsInner]
        """

        self._options = options

    @property
    def price(self):
        """Gets the price of this EcommerceProduct.

        The price of the product.

        :return: The price of this EcommerceProduct.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this EcommerceProduct.

        The price of the product.

        :param price: The price of this EcommerceProduct.
        :type price: str
        """

        self._price = price

    @property
    def sku(self):
        """Gets the sku of this EcommerceProduct.

        The stock keeping unit of the product.

        :return: The sku of this EcommerceProduct.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this EcommerceProduct.

        The stock keeping unit of the product.

        :param sku: The sku of this EcommerceProduct.
        :type sku: str
        """

        self._sku = sku

    @property
    def status(self):
        """Gets the status of this EcommerceProduct.

        The current status of the product (active or archived).

        :return: The status of this EcommerceProduct.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EcommerceProduct.

        The current status of the product (active or archived).

        :param status: The status of this EcommerceProduct.
        :type status: str
        """
        allowed_values = [None,"active", "archived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this EcommerceProduct.

        An array of tags for the product, used for organization and searching.

        :return: The tags of this EcommerceProduct.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EcommerceProduct.

        An array of tags for the product, used for organization and searching.

        :param tags: The tags of this EcommerceProduct.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def updated_at(self):
        """Gets the updated_at of this EcommerceProduct.

        The date and time when the object was last updated.

        :return: The updated_at of this EcommerceProduct.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EcommerceProduct.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this EcommerceProduct.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def variants(self):
        """Gets the variants of this EcommerceProduct.


        :return: The variants of this EcommerceProduct.
        :rtype: List[EcommerceProductVariantsInner]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this EcommerceProduct.


        :param variants: The variants of this EcommerceProduct.
        :type variants: List[EcommerceProductVariantsInner]
        """

        self._variants = variants

    @property
    def weight(self):
        """Gets the weight of this EcommerceProduct.

        The weight of the product.

        :return: The weight of this EcommerceProduct.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this EcommerceProduct.

        The weight of the product.

        :param weight: The weight of this EcommerceProduct.
        :type weight: str
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this EcommerceProduct.

        The unit of measurement for the weight of the product.

        :return: The weight_unit of this EcommerceProduct.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this EcommerceProduct.

        The unit of measurement for the weight of the product.

        :param weight_unit: The weight_unit of this EcommerceProduct.
        :type weight_unit: str
        """

        self._weight_unit = weight_unit
