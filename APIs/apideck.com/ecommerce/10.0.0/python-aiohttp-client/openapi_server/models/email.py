# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Email(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, id: str=None, type: str=None):
        """Email - a model defined in OpenAPI

        :param email: The email of this Email.
        :param id: The id of this Email.
        :param type: The type of this Email.
        """
        self.openapi_types = {
            'email': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'email': 'email',
            'id': 'id',
            'type': 'type'
        }

        self._email = email
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Email':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Email of this Email.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Email.

        Email address

        :return: The email of this Email.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Email.

        Email address

        :param email: The email of this Email.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this Email.

        Unique identifier for the email address

        :return: The id of this Email.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Email.

        Unique identifier for the email address

        :param id: The id of this Email.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Email.

        Email type

        :return: The type of this Email.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Email.

        Email type

        :param type: The type of this Email.
        :type type: str
        """
        allowed_values = [None,"primary", "secondary", "work", "personal", "billing", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
