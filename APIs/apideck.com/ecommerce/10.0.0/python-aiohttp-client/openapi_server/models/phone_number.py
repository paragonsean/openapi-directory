# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhoneNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_code: str=None, country_code: str=None, extension: str=None, id: str=None, number: str=None, type: str=None):
        """PhoneNumber - a model defined in OpenAPI

        :param area_code: The area_code of this PhoneNumber.
        :param country_code: The country_code of this PhoneNumber.
        :param extension: The extension of this PhoneNumber.
        :param id: The id of this PhoneNumber.
        :param number: The number of this PhoneNumber.
        :param type: The type of this PhoneNumber.
        """
        self.openapi_types = {
            'area_code': str,
            'country_code': str,
            'extension': str,
            'id': str,
            'number': str,
            'type': str
        }

        self.attribute_map = {
            'area_code': 'area_code',
            'country_code': 'country_code',
            'extension': 'extension',
            'id': 'id',
            'number': 'number',
            'type': 'type'
        }

        self._area_code = area_code
        self._country_code = country_code
        self._extension = extension
        self._id = id
        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhoneNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhoneNumber of this PhoneNumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_code(self):
        """Gets the area_code of this PhoneNumber.

        The area code of the phone number, e.g. 323

        :return: The area_code of this PhoneNumber.
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this PhoneNumber.

        The area code of the phone number, e.g. 323

        :param area_code: The area_code of this PhoneNumber.
        :type area_code: str
        """

        self._area_code = area_code

    @property
    def country_code(self):
        """Gets the country_code of this PhoneNumber.

        The country code of the phone number, e.g. +1

        :return: The country_code of this PhoneNumber.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PhoneNumber.

        The country code of the phone number, e.g. +1

        :param country_code: The country_code of this PhoneNumber.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def extension(self):
        """Gets the extension of this PhoneNumber.

        The extension of the phone number

        :return: The extension of this PhoneNumber.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this PhoneNumber.

        The extension of the phone number

        :param extension: The extension of this PhoneNumber.
        :type extension: str
        """

        self._extension = extension

    @property
    def id(self):
        """Gets the id of this PhoneNumber.

        Unique identifier of the phone number

        :return: The id of this PhoneNumber.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PhoneNumber.

        Unique identifier of the phone number

        :param id: The id of this PhoneNumber.
        :type id: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this PhoneNumber.

        The phone number

        :return: The number of this PhoneNumber.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PhoneNumber.

        The phone number

        :param number: The number of this PhoneNumber.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and len(number) < 1:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")

        self._number = number

    @property
    def type(self):
        """Gets the type of this PhoneNumber.

        The type of phone number

        :return: The type of this PhoneNumber.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhoneNumber.

        The type of phone number

        :param type: The type of this PhoneNumber.
        :type type: str
        """
        allowed_values = [None,"primary", "secondary", "home", "work", "office", "mobile", "assistant", "fax", "direct-dial-in", "personal", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
