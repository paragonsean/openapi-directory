# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.addresses_inner import AddressesInner
from openapi_server.models.currency import Currency
from openapi_server.models.email import Email
from openapi_server.models.linked_ecommerce_order import LinkedEcommerceOrder
from openapi_server.models.phone_number import PhoneNumber
from openapi_server import util


class EcommerceCustomer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[AddressesInner]=None, company_name: str=None, created_at: datetime=None, currency: Currency=None, custom_mappings: object=None, emails: List[Email]=None, first_name: str=None, id: str=None, last_name: str=None, name: str=None, orders: List[LinkedEcommerceOrder]=None, phone_numbers: List[PhoneNumber]=None, status: str=None, updated_at: datetime=None):
        """EcommerceCustomer - a model defined in OpenAPI

        :param addresses: The addresses of this EcommerceCustomer.
        :param company_name: The company_name of this EcommerceCustomer.
        :param created_at: The created_at of this EcommerceCustomer.
        :param currency: The currency of this EcommerceCustomer.
        :param custom_mappings: The custom_mappings of this EcommerceCustomer.
        :param emails: The emails of this EcommerceCustomer.
        :param first_name: The first_name of this EcommerceCustomer.
        :param id: The id of this EcommerceCustomer.
        :param last_name: The last_name of this EcommerceCustomer.
        :param name: The name of this EcommerceCustomer.
        :param orders: The orders of this EcommerceCustomer.
        :param phone_numbers: The phone_numbers of this EcommerceCustomer.
        :param status: The status of this EcommerceCustomer.
        :param updated_at: The updated_at of this EcommerceCustomer.
        """
        self.openapi_types = {
            'addresses': List[AddressesInner],
            'company_name': str,
            'created_at': datetime,
            'currency': Currency,
            'custom_mappings': object,
            'emails': List[Email],
            'first_name': str,
            'id': str,
            'last_name': str,
            'name': str,
            'orders': List[LinkedEcommerceOrder],
            'phone_numbers': List[PhoneNumber],
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'company_name': 'company_name',
            'created_at': 'created_at',
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'emails': 'emails',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'name': 'name',
            'orders': 'orders',
            'phone_numbers': 'phone_numbers',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._addresses = addresses
        self._company_name = company_name
        self._created_at = created_at
        self._currency = currency
        self._custom_mappings = custom_mappings
        self._emails = emails
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._name = name
        self._orders = orders
        self._phone_numbers = phone_numbers
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcommerceCustomer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcommerceCustomer of this EcommerceCustomer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this EcommerceCustomer.

        An array of addresses for the customer.

        :return: The addresses of this EcommerceCustomer.
        :rtype: List[AddressesInner]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this EcommerceCustomer.

        An array of addresses for the customer.

        :param addresses: The addresses of this EcommerceCustomer.
        :type addresses: List[AddressesInner]
        """

        self._addresses = addresses

    @property
    def company_name(self):
        """Gets the company_name of this EcommerceCustomer.

        Company name of the customer

        :return: The company_name of this EcommerceCustomer.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this EcommerceCustomer.

        Company name of the customer

        :param company_name: The company_name of this EcommerceCustomer.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def created_at(self):
        """Gets the created_at of this EcommerceCustomer.

        The date and time when the object was created.

        :return: The created_at of this EcommerceCustomer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EcommerceCustomer.

        The date and time when the object was created.

        :param created_at: The created_at of this EcommerceCustomer.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this EcommerceCustomer.


        :return: The currency of this EcommerceCustomer.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EcommerceCustomer.


        :param currency: The currency of this EcommerceCustomer.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this EcommerceCustomer.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this EcommerceCustomer.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this EcommerceCustomer.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this EcommerceCustomer.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def emails(self):
        """Gets the emails of this EcommerceCustomer.

        An array of email addresses for the customer.

        :return: The emails of this EcommerceCustomer.
        :rtype: List[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this EcommerceCustomer.

        An array of email addresses for the customer.

        :param emails: The emails of this EcommerceCustomer.
        :type emails: List[Email]
        """

        self._emails = emails

    @property
    def first_name(self):
        """Gets the first_name of this EcommerceCustomer.

        First name of the customer

        :return: The first_name of this EcommerceCustomer.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EcommerceCustomer.

        First name of the customer

        :param first_name: The first_name of this EcommerceCustomer.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this EcommerceCustomer.

        A unique identifier for an object.

        :return: The id of this EcommerceCustomer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcommerceCustomer.

        A unique identifier for an object.

        :param id: The id of this EcommerceCustomer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this EcommerceCustomer.

        Last name of the customer

        :return: The last_name of this EcommerceCustomer.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EcommerceCustomer.

        Last name of the customer

        :param last_name: The last_name of this EcommerceCustomer.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this EcommerceCustomer.

        Full name of the customer

        :return: The name of this EcommerceCustomer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EcommerceCustomer.

        Full name of the customer

        :param name: The name of this EcommerceCustomer.
        :type name: str
        """

        self._name = name

    @property
    def orders(self):
        """Gets the orders of this EcommerceCustomer.


        :return: The orders of this EcommerceCustomer.
        :rtype: List[LinkedEcommerceOrder]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this EcommerceCustomer.


        :param orders: The orders of this EcommerceCustomer.
        :type orders: List[LinkedEcommerceOrder]
        """

        self._orders = orders

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this EcommerceCustomer.

        An array of phone numbers for the customer.

        :return: The phone_numbers of this EcommerceCustomer.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this EcommerceCustomer.

        An array of phone numbers for the customer.

        :param phone_numbers: The phone_numbers of this EcommerceCustomer.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def status(self):
        """Gets the status of this EcommerceCustomer.

        The current status of the customer

        :return: The status of this EcommerceCustomer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EcommerceCustomer.

        The current status of the customer

        :param status: The status of this EcommerceCustomer.
        :type status: str
        """
        allowed_values = [None,"active", "archived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this EcommerceCustomer.

        The date and time when the object was last updated.

        :return: The updated_at of this EcommerceCustomer.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EcommerceCustomer.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this EcommerceCustomer.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
