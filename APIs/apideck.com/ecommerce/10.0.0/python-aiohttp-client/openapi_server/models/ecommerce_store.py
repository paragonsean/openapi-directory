# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class EcommerceStore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_url: str=None, created_at: datetime=None, custom_mappings: object=None, id: str=None, name: str=None, store_url: str=None, updated_at: datetime=None):
        """EcommerceStore - a model defined in OpenAPI

        :param admin_url: The admin_url of this EcommerceStore.
        :param created_at: The created_at of this EcommerceStore.
        :param custom_mappings: The custom_mappings of this EcommerceStore.
        :param id: The id of this EcommerceStore.
        :param name: The name of this EcommerceStore.
        :param store_url: The store_url of this EcommerceStore.
        :param updated_at: The updated_at of this EcommerceStore.
        """
        self.openapi_types = {
            'admin_url': str,
            'created_at': datetime,
            'custom_mappings': object,
            'id': str,
            'name': str,
            'store_url': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'admin_url': 'admin_url',
            'created_at': 'created_at',
            'custom_mappings': 'custom_mappings',
            'id': 'id',
            'name': 'name',
            'store_url': 'store_url',
            'updated_at': 'updated_at'
        }

        self._admin_url = admin_url
        self._created_at = created_at
        self._custom_mappings = custom_mappings
        self._id = id
        self._name = name
        self._store_url = store_url
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcommerceStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcommerceStore of this EcommerceStore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_url(self):
        """Gets the admin_url of this EcommerceStore.

        The store's admin login URL

        :return: The admin_url of this EcommerceStore.
        :rtype: str
        """
        return self._admin_url

    @admin_url.setter
    def admin_url(self, admin_url):
        """Sets the admin_url of this EcommerceStore.

        The store's admin login URL

        :param admin_url: The admin_url of this EcommerceStore.
        :type admin_url: str
        """
        if admin_url is not None and not re.search(r'^https?:\/\/', admin_url):
            raise ValueError("Invalid value for `admin_url`, must be a follow pattern or equal to `/^https?:\/\//`")

        self._admin_url = admin_url

    @property
    def created_at(self):
        """Gets the created_at of this EcommerceStore.

        The date and time when the object was created.

        :return: The created_at of this EcommerceStore.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EcommerceStore.

        The date and time when the object was created.

        :param created_at: The created_at of this EcommerceStore.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this EcommerceStore.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this EcommerceStore.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this EcommerceStore.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this EcommerceStore.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def id(self):
        """Gets the id of this EcommerceStore.

        A unique identifier for an object.

        :return: The id of this EcommerceStore.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcommerceStore.

        A unique identifier for an object.

        :param id: The id of this EcommerceStore.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this EcommerceStore.

        The store's name

        :return: The name of this EcommerceStore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EcommerceStore.

        The store's name

        :param name: The name of this EcommerceStore.
        :type name: str
        """

        self._name = name

    @property
    def store_url(self):
        """Gets the store_url of this EcommerceStore.

        The store's website URL

        :return: The store_url of this EcommerceStore.
        :rtype: str
        """
        return self._store_url

    @store_url.setter
    def store_url(self, store_url):
        """Sets the store_url of this EcommerceStore.

        The store's website URL

        :param store_url: The store_url of this EcommerceStore.
        :type store_url: str
        """
        if store_url is not None and not re.search(r'^https?:\/\/', store_url):
            raise ValueError("Invalid value for `store_url`, must be a follow pattern or equal to `/^https?:\/\//`")

        self._store_url = store_url

    @property
    def updated_at(self):
        """Gets the updated_at of this EcommerceStore.

        The date and time when the object was last updated.

        :return: The updated_at of this EcommerceStore.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EcommerceStore.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this EcommerceStore.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
