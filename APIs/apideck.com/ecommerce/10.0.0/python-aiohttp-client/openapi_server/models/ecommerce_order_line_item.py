# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ecommerce_discount import EcommerceDiscount
from openapi_server.models.ecommerce_order_line_item_options_inner import EcommerceOrderLineItemOptionsInner
from openapi_server import util


class EcommerceOrderLineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, discounts: List[EcommerceDiscount]=None, id: str=None, name: str=None, options: List[EcommerceOrderLineItemOptionsInner]=None, product_id: str=None, quantity: str=None, sku: str=None, tax_amount: str=None, tax_rate: str=None, total_amount: str=None, unit_price: str=None, variant_id: str=None):
        """EcommerceOrderLineItem - a model defined in OpenAPI

        :param description: The description of this EcommerceOrderLineItem.
        :param discounts: The discounts of this EcommerceOrderLineItem.
        :param id: The id of this EcommerceOrderLineItem.
        :param name: The name of this EcommerceOrderLineItem.
        :param options: The options of this EcommerceOrderLineItem.
        :param product_id: The product_id of this EcommerceOrderLineItem.
        :param quantity: The quantity of this EcommerceOrderLineItem.
        :param sku: The sku of this EcommerceOrderLineItem.
        :param tax_amount: The tax_amount of this EcommerceOrderLineItem.
        :param tax_rate: The tax_rate of this EcommerceOrderLineItem.
        :param total_amount: The total_amount of this EcommerceOrderLineItem.
        :param unit_price: The unit_price of this EcommerceOrderLineItem.
        :param variant_id: The variant_id of this EcommerceOrderLineItem.
        """
        self.openapi_types = {
            'description': str,
            'discounts': List[EcommerceDiscount],
            'id': str,
            'name': str,
            'options': List[EcommerceOrderLineItemOptionsInner],
            'product_id': str,
            'quantity': str,
            'sku': str,
            'tax_amount': str,
            'tax_rate': str,
            'total_amount': str,
            'unit_price': str,
            'variant_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'discounts': 'discounts',
            'id': 'id',
            'name': 'name',
            'options': 'options',
            'product_id': 'product_id',
            'quantity': 'quantity',
            'sku': 'sku',
            'tax_amount': 'tax_amount',
            'tax_rate': 'tax_rate',
            'total_amount': 'total_amount',
            'unit_price': 'unit_price',
            'variant_id': 'variant_id'
        }

        self._description = description
        self._discounts = discounts
        self._id = id
        self._name = name
        self._options = options
        self._product_id = product_id
        self._quantity = quantity
        self._sku = sku
        self._tax_amount = tax_amount
        self._tax_rate = tax_rate
        self._total_amount = total_amount
        self._unit_price = unit_price
        self._variant_id = variant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcommerceOrderLineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcommerceOrderLineItem of this EcommerceOrderLineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this EcommerceOrderLineItem.

        The description of the product or variant associated with the line item.

        :return: The description of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EcommerceOrderLineItem.

        The description of the product or variant associated with the line item.

        :param description: The description of this EcommerceOrderLineItem.
        :type description: str
        """

        self._description = description

    @property
    def discounts(self):
        """Gets the discounts of this EcommerceOrderLineItem.


        :return: The discounts of this EcommerceOrderLineItem.
        :rtype: List[EcommerceDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this EcommerceOrderLineItem.


        :param discounts: The discounts of this EcommerceOrderLineItem.
        :type discounts: List[EcommerceDiscount]
        """

        self._discounts = discounts

    @property
    def id(self):
        """Gets the id of this EcommerceOrderLineItem.

        A unique identifier for an object.

        :return: The id of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcommerceOrderLineItem.

        A unique identifier for an object.

        :param id: The id of this EcommerceOrderLineItem.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EcommerceOrderLineItem.

        The name of the product or variant associated with the line item.

        :return: The name of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EcommerceOrderLineItem.

        The name of the product or variant associated with the line item.

        :param name: The name of this EcommerceOrderLineItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def options(self):
        """Gets the options of this EcommerceOrderLineItem.


        :return: The options of this EcommerceOrderLineItem.
        :rtype: List[EcommerceOrderLineItemOptionsInner]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EcommerceOrderLineItem.


        :param options: The options of this EcommerceOrderLineItem.
        :type options: List[EcommerceOrderLineItemOptionsInner]
        """

        self._options = options

    @property
    def product_id(self):
        """Gets the product_id of this EcommerceOrderLineItem.

        A unique identifier for the product associated with the line item.

        :return: The product_id of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this EcommerceOrderLineItem.

        A unique identifier for the product associated with the line item.

        :param product_id: The product_id of this EcommerceOrderLineItem.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this EcommerceOrderLineItem.

        The quantity of the product or variant associated with the line item.

        :return: The quantity of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this EcommerceOrderLineItem.

        The quantity of the product or variant associated with the line item.

        :param quantity: The quantity of this EcommerceOrderLineItem.
        :type quantity: str
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def sku(self):
        """Gets the sku of this EcommerceOrderLineItem.

        The SKU of the product or variant associated with the line item.

        :return: The sku of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this EcommerceOrderLineItem.

        The SKU of the product or variant associated with the line item.

        :param sku: The sku of this EcommerceOrderLineItem.
        :type sku: str
        """

        self._sku = sku

    @property
    def tax_amount(self):
        """Gets the tax_amount of this EcommerceOrderLineItem.

        The total tax amount applied to the product or variant associated with the line item.

        :return: The tax_amount of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this EcommerceOrderLineItem.

        The total tax amount applied to the product or variant associated with the line item.

        :param tax_amount: The tax_amount of this EcommerceOrderLineItem.
        :type tax_amount: str
        """

        self._tax_amount = tax_amount

    @property
    def tax_rate(self):
        """Gets the tax_rate of this EcommerceOrderLineItem.

        The tax rate applied to the product or variant associated with the line item.

        :return: The tax_rate of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this EcommerceOrderLineItem.

        The tax rate applied to the product or variant associated with the line item.

        :param tax_rate: The tax_rate of this EcommerceOrderLineItem.
        :type tax_rate: str
        """

        self._tax_rate = tax_rate

    @property
    def total_amount(self):
        """Gets the total_amount of this EcommerceOrderLineItem.

        The total amount for the product(s) or variant associated with the line item, including taxes and discounts.

        :return: The total_amount of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this EcommerceOrderLineItem.

        The total amount for the product(s) or variant associated with the line item, including taxes and discounts.

        :param total_amount: The total_amount of this EcommerceOrderLineItem.
        :type total_amount: str
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")

        self._total_amount = total_amount

    @property
    def unit_price(self):
        """Gets the unit_price of this EcommerceOrderLineItem.

        The unit price of the product or variant associated with the line item.

        :return: The unit_price of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this EcommerceOrderLineItem.

        The unit price of the product or variant associated with the line item.

        :param unit_price: The unit_price of this EcommerceOrderLineItem.
        :type unit_price: str
        """

        self._unit_price = unit_price

    @property
    def variant_id(self):
        """Gets the variant_id of this EcommerceOrderLineItem.

        A unique identifier for the variant of the product associated with the line item, if applicable.

        :return: The variant_id of this EcommerceOrderLineItem.
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this EcommerceOrderLineItem.

        A unique identifier for the variant of the product associated with the line item, if applicable.

        :param variant_id: The variant_id of this EcommerceOrderLineItem.
        :type variant_id: str
        """

        self._variant_id = variant_id
