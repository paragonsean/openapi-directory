# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ecommerce_product_variants_inner_images_inner import EcommerceProductVariantsInnerImagesInner
from openapi_server.models.ecommerce_product_variants_inner_options_inner import EcommerceProductVariantsInnerOptionsInner
from openapi_server import util


class EcommerceProductVariantsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, images: List[EcommerceProductVariantsInnerImagesInner]=None, inventory_quantity: str=None, name: str=None, options: List[EcommerceProductVariantsInnerOptionsInner]=None, price: str=None, sku: str=None, weight: str=None, weight_unit: str=None):
        """EcommerceProductVariantsInner - a model defined in OpenAPI

        :param id: The id of this EcommerceProductVariantsInner.
        :param images: The images of this EcommerceProductVariantsInner.
        :param inventory_quantity: The inventory_quantity of this EcommerceProductVariantsInner.
        :param name: The name of this EcommerceProductVariantsInner.
        :param options: The options of this EcommerceProductVariantsInner.
        :param price: The price of this EcommerceProductVariantsInner.
        :param sku: The sku of this EcommerceProductVariantsInner.
        :param weight: The weight of this EcommerceProductVariantsInner.
        :param weight_unit: The weight_unit of this EcommerceProductVariantsInner.
        """
        self.openapi_types = {
            'id': str,
            'images': List[EcommerceProductVariantsInnerImagesInner],
            'inventory_quantity': str,
            'name': str,
            'options': List[EcommerceProductVariantsInnerOptionsInner],
            'price': str,
            'sku': str,
            'weight': str,
            'weight_unit': str
        }

        self.attribute_map = {
            'id': 'id',
            'images': 'images',
            'inventory_quantity': 'inventory_quantity',
            'name': 'name',
            'options': 'options',
            'price': 'price',
            'sku': 'sku',
            'weight': 'weight',
            'weight_unit': 'weight_unit'
        }

        self._id = id
        self._images = images
        self._inventory_quantity = inventory_quantity
        self._name = name
        self._options = options
        self._price = price
        self._sku = sku
        self._weight = weight
        self._weight_unit = weight_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcommerceProductVariantsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcommerceProduct_variants_inner of this EcommerceProductVariantsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EcommerceProductVariantsInner.

        A unique identifier for the variant of the product.

        :return: The id of this EcommerceProductVariantsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcommerceProductVariantsInner.

        A unique identifier for the variant of the product.

        :param id: The id of this EcommerceProductVariantsInner.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this EcommerceProductVariantsInner.


        :return: The images of this EcommerceProductVariantsInner.
        :rtype: List[EcommerceProductVariantsInnerImagesInner]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this EcommerceProductVariantsInner.


        :param images: The images of this EcommerceProductVariantsInner.
        :type images: List[EcommerceProductVariantsInnerImagesInner]
        """

        self._images = images

    @property
    def inventory_quantity(self):
        """Gets the inventory_quantity of this EcommerceProductVariantsInner.

        The quantity of the variant in stock.

        :return: The inventory_quantity of this EcommerceProductVariantsInner.
        :rtype: str
        """
        return self._inventory_quantity

    @inventory_quantity.setter
    def inventory_quantity(self, inventory_quantity):
        """Sets the inventory_quantity of this EcommerceProductVariantsInner.

        The quantity of the variant in stock.

        :param inventory_quantity: The inventory_quantity of this EcommerceProductVariantsInner.
        :type inventory_quantity: str
        """

        self._inventory_quantity = inventory_quantity

    @property
    def name(self):
        """Gets the name of this EcommerceProductVariantsInner.

        The name for the variant, used for displaying to customers.

        :return: The name of this EcommerceProductVariantsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EcommerceProductVariantsInner.

        The name for the variant, used for displaying to customers.

        :param name: The name of this EcommerceProductVariantsInner.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this EcommerceProductVariantsInner.


        :return: The options of this EcommerceProductVariantsInner.
        :rtype: List[EcommerceProductVariantsInnerOptionsInner]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EcommerceProductVariantsInner.


        :param options: The options of this EcommerceProductVariantsInner.
        :type options: List[EcommerceProductVariantsInnerOptionsInner]
        """

        self._options = options

    @property
    def price(self):
        """Gets the price of this EcommerceProductVariantsInner.

        The price of the variant.

        :return: The price of this EcommerceProductVariantsInner.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this EcommerceProductVariantsInner.

        The price of the variant.

        :param price: The price of this EcommerceProductVariantsInner.
        :type price: str
        """

        self._price = price

    @property
    def sku(self):
        """Gets the sku of this EcommerceProductVariantsInner.

        The stock keeping unit of the variant.

        :return: The sku of this EcommerceProductVariantsInner.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this EcommerceProductVariantsInner.

        The stock keeping unit of the variant.

        :param sku: The sku of this EcommerceProductVariantsInner.
        :type sku: str
        """

        self._sku = sku

    @property
    def weight(self):
        """Gets the weight of this EcommerceProductVariantsInner.

        The weight of the variant.

        :return: The weight of this EcommerceProductVariantsInner.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this EcommerceProductVariantsInner.

        The weight of the variant.

        :param weight: The weight of this EcommerceProductVariantsInner.
        :type weight: str
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this EcommerceProductVariantsInner.

        The unit of measurement for the weight of the variant.

        :return: The weight_unit of this EcommerceProductVariantsInner.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this EcommerceProductVariantsInner.

        The unit of measurement for the weight of the variant.

        :param weight_unit: The weight_unit of this EcommerceProductVariantsInner.
        :type weight_unit: str
        """

        self._weight_unit = weight_unit
