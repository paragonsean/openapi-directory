# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class VariationsInner1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, id: str=None, item_id: str=None, name: str=None, present_at_all_locations: bool=None, price_amount: float=None, price_currency: Currency=None, pricing_type: str=None, sequence: float=None, sku: str=None, stockable: bool=None, updated_at: datetime=None, version: str=None):
        """VariationsInner1 - a model defined in OpenAPI

        :param created_at: The created_at of this VariationsInner1.
        :param id: The id of this VariationsInner1.
        :param item_id: The item_id of this VariationsInner1.
        :param name: The name of this VariationsInner1.
        :param present_at_all_locations: The present_at_all_locations of this VariationsInner1.
        :param price_amount: The price_amount of this VariationsInner1.
        :param price_currency: The price_currency of this VariationsInner1.
        :param pricing_type: The pricing_type of this VariationsInner1.
        :param sequence: The sequence of this VariationsInner1.
        :param sku: The sku of this VariationsInner1.
        :param stockable: The stockable of this VariationsInner1.
        :param updated_at: The updated_at of this VariationsInner1.
        :param version: The version of this VariationsInner1.
        """
        self.openapi_types = {
            'created_at': datetime,
            'id': str,
            'item_id': str,
            'name': str,
            'present_at_all_locations': bool,
            'price_amount': float,
            'price_currency': Currency,
            'pricing_type': str,
            'sequence': float,
            'sku': str,
            'stockable': bool,
            'updated_at': datetime,
            'version': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'item_id': 'item_id',
            'name': 'name',
            'present_at_all_locations': 'present_at_all_locations',
            'price_amount': 'price_amount',
            'price_currency': 'price_currency',
            'pricing_type': 'pricing_type',
            'sequence': 'sequence',
            'sku': 'sku',
            'stockable': 'stockable',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._created_at = created_at
        self._id = id
        self._item_id = item_id
        self._name = name
        self._present_at_all_locations = present_at_all_locations
        self._price_amount = price_amount
        self._price_currency = price_currency
        self._pricing_type = pricing_type
        self._sequence = sequence
        self._sku = sku
        self._stockable = stockable
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VariationsInner1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Variations_inner_1 of this VariationsInner1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this VariationsInner1.

        The date and time when the object was created.

        :return: The created_at of this VariationsInner1.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VariationsInner1.

        The date and time when the object was created.

        :param created_at: The created_at of this VariationsInner1.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this VariationsInner1.

        A unique identifier for an object.

        :return: The id of this VariationsInner1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VariationsInner1.

        A unique identifier for an object.

        :param id: The id of this VariationsInner1.
        :type id: str
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this VariationsInner1.

        A unique identifier for an object.

        :return: The item_id of this VariationsInner1.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this VariationsInner1.

        A unique identifier for an object.

        :param item_id: The item_id of this VariationsInner1.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this VariationsInner1.


        :return: The name of this VariationsInner1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VariationsInner1.


        :param name: The name of this VariationsInner1.
        :type name: str
        """

        self._name = name

    @property
    def present_at_all_locations(self):
        """Gets the present_at_all_locations of this VariationsInner1.


        :return: The present_at_all_locations of this VariationsInner1.
        :rtype: bool
        """
        return self._present_at_all_locations

    @present_at_all_locations.setter
    def present_at_all_locations(self, present_at_all_locations):
        """Sets the present_at_all_locations of this VariationsInner1.


        :param present_at_all_locations: The present_at_all_locations of this VariationsInner1.
        :type present_at_all_locations: bool
        """

        self._present_at_all_locations = present_at_all_locations

    @property
    def price_amount(self):
        """Gets the price_amount of this VariationsInner1.


        :return: The price_amount of this VariationsInner1.
        :rtype: float
        """
        return self._price_amount

    @price_amount.setter
    def price_amount(self, price_amount):
        """Sets the price_amount of this VariationsInner1.


        :param price_amount: The price_amount of this VariationsInner1.
        :type price_amount: float
        """

        self._price_amount = price_amount

    @property
    def price_currency(self):
        """Gets the price_currency of this VariationsInner1.


        :return: The price_currency of this VariationsInner1.
        :rtype: Currency
        """
        return self._price_currency

    @price_currency.setter
    def price_currency(self, price_currency):
        """Sets the price_currency of this VariationsInner1.


        :param price_currency: The price_currency of this VariationsInner1.
        :type price_currency: Currency
        """

        self._price_currency = price_currency

    @property
    def pricing_type(self):
        """Gets the pricing_type of this VariationsInner1.


        :return: The pricing_type of this VariationsInner1.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this VariationsInner1.


        :param pricing_type: The pricing_type of this VariationsInner1.
        :type pricing_type: str
        """
        allowed_values = ["fixed", "variable", "other"]  # noqa: E501
        if pricing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_type` ({0}), must be one of {1}"
                .format(pricing_type, allowed_values)
            )

        self._pricing_type = pricing_type

    @property
    def sequence(self):
        """Gets the sequence of this VariationsInner1.


        :return: The sequence of this VariationsInner1.
        :rtype: float
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this VariationsInner1.


        :param sequence: The sequence of this VariationsInner1.
        :type sequence: float
        """

        self._sequence = sequence

    @property
    def sku(self):
        """Gets the sku of this VariationsInner1.


        :return: The sku of this VariationsInner1.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this VariationsInner1.


        :param sku: The sku of this VariationsInner1.
        :type sku: str
        """

        self._sku = sku

    @property
    def stockable(self):
        """Gets the stockable of this VariationsInner1.


        :return: The stockable of this VariationsInner1.
        :rtype: bool
        """
        return self._stockable

    @stockable.setter
    def stockable(self, stockable):
        """Sets the stockable of this VariationsInner1.


        :param stockable: The stockable of this VariationsInner1.
        :type stockable: bool
        """

        self._stockable = stockable

    @property
    def updated_at(self):
        """Gets the updated_at of this VariationsInner1.

        The date and time when the object was last updated.

        :return: The updated_at of this VariationsInner1.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VariationsInner1.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this VariationsInner1.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this VariationsInner1.

        The user who last updated the object.

        :return: The version of this VariationsInner1.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VariationsInner1.

        The user who last updated the object.

        :param version: The version of this VariationsInner1.
        :type version: str
        """

        self._version = version
