# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, allows_tipping: bool=True, created_at: datetime=None, created_by: str=None, custom_mappings: object=None, editable: bool=None, hidden: bool=None, id: str=None, key: str=None, label: str=None, opens_cash_drawer: bool=True, updated_at: datetime=None, updated_by: str=None):
        """Tender - a model defined in OpenAPI

        :param active: The active of this Tender.
        :param allows_tipping: The allows_tipping of this Tender.
        :param created_at: The created_at of this Tender.
        :param created_by: The created_by of this Tender.
        :param custom_mappings: The custom_mappings of this Tender.
        :param editable: The editable of this Tender.
        :param hidden: The hidden of this Tender.
        :param id: The id of this Tender.
        :param key: The key of this Tender.
        :param label: The label of this Tender.
        :param opens_cash_drawer: The opens_cash_drawer of this Tender.
        :param updated_at: The updated_at of this Tender.
        :param updated_by: The updated_by of this Tender.
        """
        self.openapi_types = {
            'active': bool,
            'allows_tipping': bool,
            'created_at': datetime,
            'created_by': str,
            'custom_mappings': object,
            'editable': bool,
            'hidden': bool,
            'id': str,
            'key': str,
            'label': str,
            'opens_cash_drawer': bool,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'active': 'active',
            'allows_tipping': 'allows_tipping',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_mappings': 'custom_mappings',
            'editable': 'editable',
            'hidden': 'hidden',
            'id': 'id',
            'key': 'key',
            'label': 'label',
            'opens_cash_drawer': 'opens_cash_drawer',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._active = active
        self._allows_tipping = allows_tipping
        self._created_at = created_at
        self._created_by = created_by
        self._custom_mappings = custom_mappings
        self._editable = editable
        self._hidden = hidden
        self._id = id
        self._key = key
        self._label = label
        self._opens_cash_drawer = opens_cash_drawer
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tender of this Tender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Tender.


        :return: The active of this Tender.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Tender.


        :param active: The active of this Tender.
        :type active: bool
        """

        self._active = active

    @property
    def allows_tipping(self):
        """Gets the allows_tipping of this Tender.

        Allow tipping on payment from tender

        :return: The allows_tipping of this Tender.
        :rtype: bool
        """
        return self._allows_tipping

    @allows_tipping.setter
    def allows_tipping(self, allows_tipping):
        """Sets the allows_tipping of this Tender.

        Allow tipping on payment from tender

        :param allows_tipping: The allows_tipping of this Tender.
        :type allows_tipping: bool
        """

        self._allows_tipping = allows_tipping

    @property
    def created_at(self):
        """Gets the created_at of this Tender.

        The date and time when the object was created.

        :return: The created_at of this Tender.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Tender.

        The date and time when the object was created.

        :param created_at: The created_at of this Tender.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Tender.

        The user who created the object.

        :return: The created_by of this Tender.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Tender.

        The user who created the object.

        :param created_by: The created_by of this Tender.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Tender.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Tender.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Tender.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Tender.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def editable(self):
        """Gets the editable of this Tender.


        :return: The editable of this Tender.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this Tender.


        :param editable: The editable of this Tender.
        :type editable: bool
        """

        self._editable = editable

    @property
    def hidden(self):
        """Gets the hidden of this Tender.


        :return: The hidden of this Tender.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Tender.


        :param hidden: The hidden of this Tender.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this Tender.

        A unique identifier for an object.

        :return: The id of this Tender.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tender.

        A unique identifier for an object.

        :param id: The id of this Tender.
        :type id: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this Tender.


        :return: The key of this Tender.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Tender.


        :param key: The key of this Tender.
        :type key: str
        """

        self._key = key

    @property
    def label(self):
        """Gets the label of this Tender.


        :return: The label of this Tender.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Tender.


        :param label: The label of this Tender.
        :type label: str
        """

        self._label = label

    @property
    def opens_cash_drawer(self):
        """Gets the opens_cash_drawer of this Tender.

        If this tender opens the cash drawer

        :return: The opens_cash_drawer of this Tender.
        :rtype: bool
        """
        return self._opens_cash_drawer

    @opens_cash_drawer.setter
    def opens_cash_drawer(self, opens_cash_drawer):
        """Sets the opens_cash_drawer of this Tender.

        If this tender opens the cash drawer

        :param opens_cash_drawer: The opens_cash_drawer of this Tender.
        :type opens_cash_drawer: bool
        """

        self._opens_cash_drawer = opens_cash_drawer

    @property
    def updated_at(self):
        """Gets the updated_at of this Tender.

        The date and time when the object was last updated.

        :return: The updated_at of this Tender.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Tender.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Tender.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Tender.

        The user who last updated the object.

        :return: The updated_by of this Tender.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Tender.

        The user who last updated the object.

        :param updated_by: The updated_by of this Tender.
        :type updated_by: str
        """

        self._updated_by = updated_by
