# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class Modifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_name: str=None, available: bool=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, custom_mappings: object=None, id: str=None, idempotency_key: str=None, modifier_group_id: str=None, name: str=None, price_amount: float=None, updated_at: datetime=None, updated_by: str=None):
        """Modifier - a model defined in OpenAPI

        :param alternate_name: The alternate_name of this Modifier.
        :param available: The available of this Modifier.
        :param created_at: The created_at of this Modifier.
        :param created_by: The created_by of this Modifier.
        :param currency: The currency of this Modifier.
        :param custom_mappings: The custom_mappings of this Modifier.
        :param id: The id of this Modifier.
        :param idempotency_key: The idempotency_key of this Modifier.
        :param modifier_group_id: The modifier_group_id of this Modifier.
        :param name: The name of this Modifier.
        :param price_amount: The price_amount of this Modifier.
        :param updated_at: The updated_at of this Modifier.
        :param updated_by: The updated_by of this Modifier.
        """
        self.openapi_types = {
            'alternate_name': str,
            'available': bool,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'custom_mappings': object,
            'id': str,
            'idempotency_key': str,
            'modifier_group_id': str,
            'name': str,
            'price_amount': float,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'alternate_name': 'alternate_name',
            'available': 'available',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'id': 'id',
            'idempotency_key': 'idempotency_key',
            'modifier_group_id': 'modifier_group_id',
            'name': 'name',
            'price_amount': 'price_amount',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._alternate_name = alternate_name
        self._available = available
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._custom_mappings = custom_mappings
        self._id = id
        self._idempotency_key = idempotency_key
        self._modifier_group_id = modifier_group_id
        self._name = name
        self._price_amount = price_amount
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Modifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Modifier of this Modifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_name(self):
        """Gets the alternate_name of this Modifier.


        :return: The alternate_name of this Modifier.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this Modifier.


        :param alternate_name: The alternate_name of this Modifier.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name

    @property
    def available(self):
        """Gets the available of this Modifier.


        :return: The available of this Modifier.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Modifier.


        :param available: The available of this Modifier.
        :type available: bool
        """

        self._available = available

    @property
    def created_at(self):
        """Gets the created_at of this Modifier.

        The date and time when the object was created.

        :return: The created_at of this Modifier.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Modifier.

        The date and time when the object was created.

        :param created_at: The created_at of this Modifier.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Modifier.

        The user who created the object.

        :return: The created_by of this Modifier.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Modifier.

        The user who created the object.

        :param created_by: The created_by of this Modifier.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this Modifier.


        :return: The currency of this Modifier.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Modifier.


        :param currency: The currency of this Modifier.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Modifier.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Modifier.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Modifier.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Modifier.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def id(self):
        """Gets the id of this Modifier.

        A unique identifier for an object.

        :return: The id of this Modifier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Modifier.

        A unique identifier for an object.

        :param id: The id of this Modifier.
        :type id: str
        """

        self._id = id

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this Modifier.

        A value you specify that uniquely identifies this request among requests you have sent.

        :return: The idempotency_key of this Modifier.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this Modifier.

        A value you specify that uniquely identifies this request among requests you have sent.

        :param idempotency_key: The idempotency_key of this Modifier.
        :type idempotency_key: str
        """
        if idempotency_key is not None and len(idempotency_key) > 45:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `45`")

        self._idempotency_key = idempotency_key

    @property
    def modifier_group_id(self):
        """Gets the modifier_group_id of this Modifier.


        :return: The modifier_group_id of this Modifier.
        :rtype: str
        """
        return self._modifier_group_id

    @modifier_group_id.setter
    def modifier_group_id(self, modifier_group_id):
        """Sets the modifier_group_id of this Modifier.


        :param modifier_group_id: The modifier_group_id of this Modifier.
        :type modifier_group_id: str
        """
        if modifier_group_id is None:
            raise ValueError("Invalid value for `modifier_group_id`, must not be `None`")

        self._modifier_group_id = modifier_group_id

    @property
    def name(self):
        """Gets the name of this Modifier.


        :return: The name of this Modifier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Modifier.


        :param name: The name of this Modifier.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def price_amount(self):
        """Gets the price_amount of this Modifier.


        :return: The price_amount of this Modifier.
        :rtype: float
        """
        return self._price_amount

    @price_amount.setter
    def price_amount(self, price_amount):
        """Sets the price_amount of this Modifier.


        :param price_amount: The price_amount of this Modifier.
        :type price_amount: float
        """

        self._price_amount = price_amount

    @property
    def updated_at(self):
        """Gets the updated_at of this Modifier.

        The date and time when the object was last updated.

        :return: The updated_at of this Modifier.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Modifier.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Modifier.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Modifier.

        The user who last updated the object.

        :return: The updated_by of this Modifier.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Modifier.

        The user who last updated the object.

        :param updated_by: The updated_by of this Modifier.
        :type updated_by: str
        """

        self._updated_by = updated_by
