# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.modifier_group_modifiers_inner import ModifierGroupModifiersInner
from openapi_server import util


class ModifierGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_name: str=None, created_at: datetime=None, created_by: str=None, custom_mappings: object=None, deleted: bool=None, id: str=None, maximum_allowed: int=None, minimum_required: int=None, modifiers: List[ModifierGroupModifiersInner]=None, name: str=None, present_at_all_locations: bool=None, row_version: str=None, selection_type: str=None, updated_at: datetime=None, updated_by: str=None):
        """ModifierGroup - a model defined in OpenAPI

        :param alternate_name: The alternate_name of this ModifierGroup.
        :param created_at: The created_at of this ModifierGroup.
        :param created_by: The created_by of this ModifierGroup.
        :param custom_mappings: The custom_mappings of this ModifierGroup.
        :param deleted: The deleted of this ModifierGroup.
        :param id: The id of this ModifierGroup.
        :param maximum_allowed: The maximum_allowed of this ModifierGroup.
        :param minimum_required: The minimum_required of this ModifierGroup.
        :param modifiers: The modifiers of this ModifierGroup.
        :param name: The name of this ModifierGroup.
        :param present_at_all_locations: The present_at_all_locations of this ModifierGroup.
        :param row_version: The row_version of this ModifierGroup.
        :param selection_type: The selection_type of this ModifierGroup.
        :param updated_at: The updated_at of this ModifierGroup.
        :param updated_by: The updated_by of this ModifierGroup.
        """
        self.openapi_types = {
            'alternate_name': str,
            'created_at': datetime,
            'created_by': str,
            'custom_mappings': object,
            'deleted': bool,
            'id': str,
            'maximum_allowed': int,
            'minimum_required': int,
            'modifiers': List[ModifierGroupModifiersInner],
            'name': str,
            'present_at_all_locations': bool,
            'row_version': str,
            'selection_type': str,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'alternate_name': 'alternate_name',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_mappings': 'custom_mappings',
            'deleted': 'deleted',
            'id': 'id',
            'maximum_allowed': 'maximum_allowed',
            'minimum_required': 'minimum_required',
            'modifiers': 'modifiers',
            'name': 'name',
            'present_at_all_locations': 'present_at_all_locations',
            'row_version': 'row_version',
            'selection_type': 'selection_type',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._alternate_name = alternate_name
        self._created_at = created_at
        self._created_by = created_by
        self._custom_mappings = custom_mappings
        self._deleted = deleted
        self._id = id
        self._maximum_allowed = maximum_allowed
        self._minimum_required = minimum_required
        self._modifiers = modifiers
        self._name = name
        self._present_at_all_locations = present_at_all_locations
        self._row_version = row_version
        self._selection_type = selection_type
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifierGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifierGroup of this ModifierGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_name(self):
        """Gets the alternate_name of this ModifierGroup.


        :return: The alternate_name of this ModifierGroup.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this ModifierGroup.


        :param alternate_name: The alternate_name of this ModifierGroup.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name

    @property
    def created_at(self):
        """Gets the created_at of this ModifierGroup.

        The date and time when the object was created.

        :return: The created_at of this ModifierGroup.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModifierGroup.

        The date and time when the object was created.

        :param created_at: The created_at of this ModifierGroup.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this ModifierGroup.

        The user who created the object.

        :return: The created_by of this ModifierGroup.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ModifierGroup.

        The user who created the object.

        :param created_by: The created_by of this ModifierGroup.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this ModifierGroup.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this ModifierGroup.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this ModifierGroup.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this ModifierGroup.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def deleted(self):
        """Gets the deleted of this ModifierGroup.

        Flag to indicate if the object is deleted.

        :return: The deleted of this ModifierGroup.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ModifierGroup.

        Flag to indicate if the object is deleted.

        :param deleted: The deleted of this ModifierGroup.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this ModifierGroup.

        A unique identifier for an object.

        :return: The id of this ModifierGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModifierGroup.

        A unique identifier for an object.

        :param id: The id of this ModifierGroup.
        :type id: str
        """

        self._id = id

    @property
    def maximum_allowed(self):
        """Gets the maximum_allowed of this ModifierGroup.


        :return: The maximum_allowed of this ModifierGroup.
        :rtype: int
        """
        return self._maximum_allowed

    @maximum_allowed.setter
    def maximum_allowed(self, maximum_allowed):
        """Sets the maximum_allowed of this ModifierGroup.


        :param maximum_allowed: The maximum_allowed of this ModifierGroup.
        :type maximum_allowed: int
        """

        self._maximum_allowed = maximum_allowed

    @property
    def minimum_required(self):
        """Gets the minimum_required of this ModifierGroup.


        :return: The minimum_required of this ModifierGroup.
        :rtype: int
        """
        return self._minimum_required

    @minimum_required.setter
    def minimum_required(self, minimum_required):
        """Sets the minimum_required of this ModifierGroup.


        :param minimum_required: The minimum_required of this ModifierGroup.
        :type minimum_required: int
        """

        self._minimum_required = minimum_required

    @property
    def modifiers(self):
        """Gets the modifiers of this ModifierGroup.


        :return: The modifiers of this ModifierGroup.
        :rtype: List[ModifierGroupModifiersInner]
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this ModifierGroup.


        :param modifiers: The modifiers of this ModifierGroup.
        :type modifiers: List[ModifierGroupModifiersInner]
        """

        self._modifiers = modifiers

    @property
    def name(self):
        """Gets the name of this ModifierGroup.


        :return: The name of this ModifierGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModifierGroup.


        :param name: The name of this ModifierGroup.
        :type name: str
        """

        self._name = name

    @property
    def present_at_all_locations(self):
        """Gets the present_at_all_locations of this ModifierGroup.


        :return: The present_at_all_locations of this ModifierGroup.
        :rtype: bool
        """
        return self._present_at_all_locations

    @present_at_all_locations.setter
    def present_at_all_locations(self, present_at_all_locations):
        """Sets the present_at_all_locations of this ModifierGroup.


        :param present_at_all_locations: The present_at_all_locations of this ModifierGroup.
        :type present_at_all_locations: bool
        """

        self._present_at_all_locations = present_at_all_locations

    @property
    def row_version(self):
        """Gets the row_version of this ModifierGroup.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this ModifierGroup.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this ModifierGroup.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this ModifierGroup.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def selection_type(self):
        """Gets the selection_type of this ModifierGroup.


        :return: The selection_type of this ModifierGroup.
        :rtype: str
        """
        return self._selection_type

    @selection_type.setter
    def selection_type(self, selection_type):
        """Sets the selection_type of this ModifierGroup.


        :param selection_type: The selection_type of this ModifierGroup.
        :type selection_type: str
        """
        allowed_values = ["single", "multiple"]  # noqa: E501
        if selection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `selection_type` ({0}), must be one of {1}"
                .format(selection_type, allowed_values)
            )

        self._selection_type = selection_type

    @property
    def updated_at(self):
        """Gets the updated_at of this ModifierGroup.

        The date and time when the object was last updated.

        :return: The updated_at of this ModifierGroup.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModifierGroup.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this ModifierGroup.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this ModifierGroup.

        The user who last updated the object.

        :return: The updated_by of this ModifierGroup.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ModifierGroup.

        The user who last updated the object.

        :param updated_by: The updated_by of this ModifierGroup.
        :type updated_by: str
        """

        self._updated_by = updated_by
