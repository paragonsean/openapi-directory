# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.currency import Currency
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, business_name: str=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, custom_mappings: object=None, id: str=None, merchant_id: str=None, name: str=None, status: str=None, updated_at: datetime=None, updated_by: str=None):
        """Location - a model defined in OpenAPI

        :param address: The address of this Location.
        :param business_name: The business_name of this Location.
        :param created_at: The created_at of this Location.
        :param created_by: The created_by of this Location.
        :param currency: The currency of this Location.
        :param custom_mappings: The custom_mappings of this Location.
        :param id: The id of this Location.
        :param merchant_id: The merchant_id of this Location.
        :param name: The name of this Location.
        :param status: The status of this Location.
        :param updated_at: The updated_at of this Location.
        :param updated_by: The updated_by of this Location.
        """
        self.openapi_types = {
            'address': Address,
            'business_name': str,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'custom_mappings': object,
            'id': str,
            'merchant_id': str,
            'name': str,
            'status': str,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'address': 'address',
            'business_name': 'business_name',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'id': 'id',
            'merchant_id': 'merchant_id',
            'name': 'name',
            'status': 'status',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._address = address
        self._business_name = business_name
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._custom_mappings = custom_mappings
        self._id = id
        self._merchant_id = merchant_id
        self._name = name
        self._status = status
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Location.


        :return: The address of this Location.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Location.


        :param address: The address of this Location.
        :type address: Address
        """

        self._address = address

    @property
    def business_name(self):
        """Gets the business_name of this Location.

        The business name of the location

        :return: The business_name of this Location.
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this Location.

        The business name of the location

        :param business_name: The business_name of this Location.
        :type business_name: str
        """

        self._business_name = business_name

    @property
    def created_at(self):
        """Gets the created_at of this Location.

        The date and time when the object was created.

        :return: The created_at of this Location.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Location.

        The date and time when the object was created.

        :param created_at: The created_at of this Location.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Location.

        The user who created the object.

        :return: The created_by of this Location.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Location.

        The user who created the object.

        :param created_by: The created_by of this Location.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this Location.


        :return: The currency of this Location.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Location.


        :param currency: The currency of this Location.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Location.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Location.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Location.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Location.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def id(self):
        """Gets the id of this Location.

        A unique identifier for an object.

        :return: The id of this Location.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.

        A unique identifier for an object.

        :param id: The id of this Location.
        :type id: str
        """

        self._id = id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Location.


        :return: The merchant_id of this Location.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Location.


        :param merchant_id: The merchant_id of this Location.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def name(self):
        """Gets the name of this Location.

        The name of the location

        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.

        The name of the location

        :param name: The name of this Location.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Location.

        Status of this location.

        :return: The status of this Location.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Location.

        Status of this location.

        :param status: The status of this Location.
        :type status: str
        """
        allowed_values = [None,"active", "inactive", "other"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Location.

        The date and time when the object was last updated.

        :return: The updated_at of this Location.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Location.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Location.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Location.

        The user who last updated the object.

        :return: The updated_by of this Location.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Location.

        The user who last updated the object.

        :param updated_by: The updated_by of this Location.
        :type updated_by: str
        """

        self._updated_by = updated_by
