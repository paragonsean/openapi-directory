# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Website(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: str=None, url: str=None):
        """Website - a model defined in OpenAPI

        :param id: The id of this Website.
        :param type: The type of this Website.
        :param url: The url of this Website.
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'url': 'url'
        }

        self._id = id
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Website':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Website of this Website.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Website.

        Unique identifier for the website

        :return: The id of this Website.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Website.

        Unique identifier for the website

        :param id: The id of this Website.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Website.

        The type of website

        :return: The type of this Website.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Website.

        The type of website

        :param type: The type of this Website.
        :type type: str
        """
        allowed_values = [None,"primary", "secondary", "work", "personal", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this Website.

        The website URL

        :return: The url of this Website.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Website.

        The website URL

        :param url: The url of this Website.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url
