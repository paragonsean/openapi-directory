# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.categories_inner import CategoriesInner
from openapi_server.models.currency import Currency
from openapi_server.models.item_options_inner import ItemOptionsInner
from openapi_server.models.variations_inner import VariationsInner
from openapi_server.models.variations_inner1 import VariationsInner1
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abbreviation: str=None, absent_at_location_ids: List[str]=None, available: bool=None, available_for_pickup: bool=None, available_online: bool=None, categories: List[CategoriesInner]=None, code: str=None, cost: float=None, created_at: datetime=None, created_by: str=None, custom_mappings: object=None, deleted: bool=None, description: str=None, hidden: bool=None, id: str=None, idempotency_key: str=None, is_revenue: bool=None, modifier_groups: List[VariationsInner]=None, name: str=None, options: List[ItemOptionsInner]=None, present_at_all_locations: bool=None, price_amount: float=None, price_currency: Currency=None, pricing_type: str=None, product_type: str=None, sku: str=None, tax_ids: List[str]=None, updated_at: datetime=None, updated_by: str=None, use_default_tax_rates: bool=None, variations: List[VariationsInner1]=None, version: str=None):
        """Item - a model defined in OpenAPI

        :param abbreviation: The abbreviation of this Item.
        :param absent_at_location_ids: The absent_at_location_ids of this Item.
        :param available: The available of this Item.
        :param available_for_pickup: The available_for_pickup of this Item.
        :param available_online: The available_online of this Item.
        :param categories: The categories of this Item.
        :param code: The code of this Item.
        :param cost: The cost of this Item.
        :param created_at: The created_at of this Item.
        :param created_by: The created_by of this Item.
        :param custom_mappings: The custom_mappings of this Item.
        :param deleted: The deleted of this Item.
        :param description: The description of this Item.
        :param hidden: The hidden of this Item.
        :param id: The id of this Item.
        :param idempotency_key: The idempotency_key of this Item.
        :param is_revenue: The is_revenue of this Item.
        :param modifier_groups: The modifier_groups of this Item.
        :param name: The name of this Item.
        :param options: The options of this Item.
        :param present_at_all_locations: The present_at_all_locations of this Item.
        :param price_amount: The price_amount of this Item.
        :param price_currency: The price_currency of this Item.
        :param pricing_type: The pricing_type of this Item.
        :param product_type: The product_type of this Item.
        :param sku: The sku of this Item.
        :param tax_ids: The tax_ids of this Item.
        :param updated_at: The updated_at of this Item.
        :param updated_by: The updated_by of this Item.
        :param use_default_tax_rates: The use_default_tax_rates of this Item.
        :param variations: The variations of this Item.
        :param version: The version of this Item.
        """
        self.openapi_types = {
            'abbreviation': str,
            'absent_at_location_ids': List[str],
            'available': bool,
            'available_for_pickup': bool,
            'available_online': bool,
            'categories': List[CategoriesInner],
            'code': str,
            'cost': float,
            'created_at': datetime,
            'created_by': str,
            'custom_mappings': object,
            'deleted': bool,
            'description': str,
            'hidden': bool,
            'id': str,
            'idempotency_key': str,
            'is_revenue': bool,
            'modifier_groups': List[VariationsInner],
            'name': str,
            'options': List[ItemOptionsInner],
            'present_at_all_locations': bool,
            'price_amount': float,
            'price_currency': Currency,
            'pricing_type': str,
            'product_type': str,
            'sku': str,
            'tax_ids': List[str],
            'updated_at': datetime,
            'updated_by': str,
            'use_default_tax_rates': bool,
            'variations': List[VariationsInner1],
            'version': str
        }

        self.attribute_map = {
            'abbreviation': 'abbreviation',
            'absent_at_location_ids': 'absent_at_location_ids',
            'available': 'available',
            'available_for_pickup': 'available_for_pickup',
            'available_online': 'available_online',
            'categories': 'categories',
            'code': 'code',
            'cost': 'cost',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_mappings': 'custom_mappings',
            'deleted': 'deleted',
            'description': 'description',
            'hidden': 'hidden',
            'id': 'id',
            'idempotency_key': 'idempotency_key',
            'is_revenue': 'is_revenue',
            'modifier_groups': 'modifier_groups',
            'name': 'name',
            'options': 'options',
            'present_at_all_locations': 'present_at_all_locations',
            'price_amount': 'price_amount',
            'price_currency': 'price_currency',
            'pricing_type': 'pricing_type',
            'product_type': 'product_type',
            'sku': 'sku',
            'tax_ids': 'tax_ids',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'use_default_tax_rates': 'use_default_tax_rates',
            'variations': 'variations',
            'version': 'version'
        }

        self._abbreviation = abbreviation
        self._absent_at_location_ids = absent_at_location_ids
        self._available = available
        self._available_for_pickup = available_for_pickup
        self._available_online = available_online
        self._categories = categories
        self._code = code
        self._cost = cost
        self._created_at = created_at
        self._created_by = created_by
        self._custom_mappings = custom_mappings
        self._deleted = deleted
        self._description = description
        self._hidden = hidden
        self._id = id
        self._idempotency_key = idempotency_key
        self._is_revenue = is_revenue
        self._modifier_groups = modifier_groups
        self._name = name
        self._options = options
        self._present_at_all_locations = present_at_all_locations
        self._price_amount = price_amount
        self._price_currency = price_currency
        self._pricing_type = pricing_type
        self._product_type = product_type
        self._sku = sku
        self._tax_ids = tax_ids
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._use_default_tax_rates = use_default_tax_rates
        self._variations = variations
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Item.


        :return: The abbreviation of this Item.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Item.


        :param abbreviation: The abbreviation of this Item.
        :type abbreviation: str
        """

        self._abbreviation = abbreviation

    @property
    def absent_at_location_ids(self):
        """Gets the absent_at_location_ids of this Item.

        A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.

        :return: The absent_at_location_ids of this Item.
        :rtype: List[str]
        """
        return self._absent_at_location_ids

    @absent_at_location_ids.setter
    def absent_at_location_ids(self, absent_at_location_ids):
        """Sets the absent_at_location_ids of this Item.

        A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.

        :param absent_at_location_ids: The absent_at_location_ids of this Item.
        :type absent_at_location_ids: List[str]
        """

        self._absent_at_location_ids = absent_at_location_ids

    @property
    def available(self):
        """Gets the available of this Item.


        :return: The available of this Item.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Item.


        :param available: The available of this Item.
        :type available: bool
        """

        self._available = available

    @property
    def available_for_pickup(self):
        """Gets the available_for_pickup of this Item.


        :return: The available_for_pickup of this Item.
        :rtype: bool
        """
        return self._available_for_pickup

    @available_for_pickup.setter
    def available_for_pickup(self, available_for_pickup):
        """Sets the available_for_pickup of this Item.


        :param available_for_pickup: The available_for_pickup of this Item.
        :type available_for_pickup: bool
        """

        self._available_for_pickup = available_for_pickup

    @property
    def available_online(self):
        """Gets the available_online of this Item.


        :return: The available_online of this Item.
        :rtype: bool
        """
        return self._available_online

    @available_online.setter
    def available_online(self, available_online):
        """Sets the available_online of this Item.


        :param available_online: The available_online of this Item.
        :type available_online: bool
        """

        self._available_online = available_online

    @property
    def categories(self):
        """Gets the categories of this Item.


        :return: The categories of this Item.
        :rtype: List[CategoriesInner]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Item.


        :param categories: The categories of this Item.
        :type categories: List[CategoriesInner]
        """

        self._categories = categories

    @property
    def code(self):
        """Gets the code of this Item.

        Product code, e.g. UPC or EAN

        :return: The code of this Item.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Item.

        Product code, e.g. UPC or EAN

        :param code: The code of this Item.
        :type code: str
        """

        self._code = code

    @property
    def cost(self):
        """Gets the cost of this Item.


        :return: The cost of this Item.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this Item.


        :param cost: The cost of this Item.
        :type cost: float
        """

        self._cost = cost

    @property
    def created_at(self):
        """Gets the created_at of this Item.

        The date and time when the object was created.

        :return: The created_at of this Item.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Item.

        The date and time when the object was created.

        :param created_at: The created_at of this Item.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Item.

        The user who created the object.

        :return: The created_by of this Item.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Item.

        The user who created the object.

        :param created_by: The created_by of this Item.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Item.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Item.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Item.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Item.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def deleted(self):
        """Gets the deleted of this Item.

        Flag to indicate if the object is deleted.

        :return: The deleted of this Item.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Item.

        Flag to indicate if the object is deleted.

        :param deleted: The deleted of this Item.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Item.


        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.


        :param description: The description of this Item.
        :type description: str
        """

        self._description = description

    @property
    def hidden(self):
        """Gets the hidden of this Item.


        :return: The hidden of this Item.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Item.


        :param hidden: The hidden of this Item.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this Item.


        :return: The id of this Item.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item.


        :param id: The id of this Item.
        :type id: str
        """

        self._id = id

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this Item.

        A value you specify that uniquely identifies this request among requests you have sent.

        :return: The idempotency_key of this Item.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this Item.

        A value you specify that uniquely identifies this request among requests you have sent.

        :param idempotency_key: The idempotency_key of this Item.
        :type idempotency_key: str
        """
        if idempotency_key is not None and len(idempotency_key) > 45:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `45`")

        self._idempotency_key = idempotency_key

    @property
    def is_revenue(self):
        """Gets the is_revenue of this Item.

        True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.

        :return: The is_revenue of this Item.
        :rtype: bool
        """
        return self._is_revenue

    @is_revenue.setter
    def is_revenue(self, is_revenue):
        """Sets the is_revenue of this Item.

        True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.

        :param is_revenue: The is_revenue of this Item.
        :type is_revenue: bool
        """

        self._is_revenue = is_revenue

    @property
    def modifier_groups(self):
        """Gets the modifier_groups of this Item.


        :return: The modifier_groups of this Item.
        :rtype: List[VariationsInner]
        """
        return self._modifier_groups

    @modifier_groups.setter
    def modifier_groups(self, modifier_groups):
        """Sets the modifier_groups of this Item.


        :param modifier_groups: The modifier_groups of this Item.
        :type modifier_groups: List[VariationsInner]
        """

        self._modifier_groups = modifier_groups

    @property
    def name(self):
        """Gets the name of this Item.


        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.


        :param name: The name of this Item.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def options(self):
        """Gets the options of this Item.

        List of options pertaining to this item's attribute variation

        :return: The options of this Item.
        :rtype: List[ItemOptionsInner]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Item.

        List of options pertaining to this item's attribute variation

        :param options: The options of this Item.
        :type options: List[ItemOptionsInner]
        """

        self._options = options

    @property
    def present_at_all_locations(self):
        """Gets the present_at_all_locations of this Item.


        :return: The present_at_all_locations of this Item.
        :rtype: bool
        """
        return self._present_at_all_locations

    @present_at_all_locations.setter
    def present_at_all_locations(self, present_at_all_locations):
        """Sets the present_at_all_locations of this Item.


        :param present_at_all_locations: The present_at_all_locations of this Item.
        :type present_at_all_locations: bool
        """

        self._present_at_all_locations = present_at_all_locations

    @property
    def price_amount(self):
        """Gets the price_amount of this Item.


        :return: The price_amount of this Item.
        :rtype: float
        """
        return self._price_amount

    @price_amount.setter
    def price_amount(self, price_amount):
        """Sets the price_amount of this Item.


        :param price_amount: The price_amount of this Item.
        :type price_amount: float
        """

        self._price_amount = price_amount

    @property
    def price_currency(self):
        """Gets the price_currency of this Item.


        :return: The price_currency of this Item.
        :rtype: Currency
        """
        return self._price_currency

    @price_currency.setter
    def price_currency(self, price_currency):
        """Sets the price_currency of this Item.


        :param price_currency: The price_currency of this Item.
        :type price_currency: Currency
        """

        self._price_currency = price_currency

    @property
    def pricing_type(self):
        """Gets the pricing_type of this Item.


        :return: The pricing_type of this Item.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this Item.


        :param pricing_type: The pricing_type of this Item.
        :type pricing_type: str
        """
        allowed_values = ["fixed", "variable", "per_unit", "other"]  # noqa: E501
        if pricing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_type` ({0}), must be one of {1}"
                .format(pricing_type, allowed_values)
            )

        self._pricing_type = pricing_type

    @property
    def product_type(self):
        """Gets the product_type of this Item.


        :return: The product_type of this Item.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this Item.


        :param product_type: The product_type of this Item.
        :type product_type: str
        """
        allowed_values = ["regular", "other"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def sku(self):
        """Gets the sku of this Item.

        SKU of the item

        :return: The sku of this Item.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Item.

        SKU of the item

        :param sku: The sku of this Item.
        :type sku: str
        """

        self._sku = sku

    @property
    def tax_ids(self):
        """Gets the tax_ids of this Item.

        A list of Tax IDs for the product.

        :return: The tax_ids of this Item.
        :rtype: List[str]
        """
        return self._tax_ids

    @tax_ids.setter
    def tax_ids(self, tax_ids):
        """Sets the tax_ids of this Item.

        A list of Tax IDs for the product.

        :param tax_ids: The tax_ids of this Item.
        :type tax_ids: List[str]
        """

        self._tax_ids = tax_ids

    @property
    def updated_at(self):
        """Gets the updated_at of this Item.

        The date and time when the object was last updated.

        :return: The updated_at of this Item.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Item.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Item.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Item.

        The user who last updated the object.

        :return: The updated_by of this Item.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Item.

        The user who last updated the object.

        :param updated_by: The updated_by of this Item.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def use_default_tax_rates(self):
        """Gets the use_default_tax_rates of this Item.


        :return: The use_default_tax_rates of this Item.
        :rtype: bool
        """
        return self._use_default_tax_rates

    @use_default_tax_rates.setter
    def use_default_tax_rates(self, use_default_tax_rates):
        """Sets the use_default_tax_rates of this Item.


        :param use_default_tax_rates: The use_default_tax_rates of this Item.
        :type use_default_tax_rates: bool
        """

        self._use_default_tax_rates = use_default_tax_rates

    @property
    def variations(self):
        """Gets the variations of this Item.


        :return: The variations of this Item.
        :rtype: List[VariationsInner1]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this Item.


        :param variations: The variations of this Item.
        :type variations: List[VariationsInner1]
        """

        self._variations = variations

    @property
    def version(self):
        """Gets the version of this Item.

        The user who last updated the object.

        :return: The version of this Item.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Item.

        The user who last updated the object.

        :param version: The version of this Item.
        :type version: str
        """

        self._version = version
