# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PosBankAccountAchDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number_suffix: str=None, account_type: str=None, routing_number: str=None):
        """PosBankAccountAchDetails - a model defined in OpenAPI

        :param account_number_suffix: The account_number_suffix of this PosBankAccountAchDetails.
        :param account_type: The account_type of this PosBankAccountAchDetails.
        :param routing_number: The routing_number of this PosBankAccountAchDetails.
        """
        self.openapi_types = {
            'account_number_suffix': str,
            'account_type': str,
            'routing_number': str
        }

        self.attribute_map = {
            'account_number_suffix': 'account_number_suffix',
            'account_type': 'account_type',
            'routing_number': 'routing_number'
        }

        self._account_number_suffix = account_number_suffix
        self._account_type = account_type
        self._routing_number = routing_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PosBankAccountAchDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PosBankAccount_ach_details of this PosBankAccountAchDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number_suffix(self):
        """Gets the account_number_suffix of this PosBankAccountAchDetails.

        The last few digits of the bank account number.

        :return: The account_number_suffix of this PosBankAccountAchDetails.
        :rtype: str
        """
        return self._account_number_suffix

    @account_number_suffix.setter
    def account_number_suffix(self, account_number_suffix):
        """Sets the account_number_suffix of this PosBankAccountAchDetails.

        The last few digits of the bank account number.

        :param account_number_suffix: The account_number_suffix of this PosBankAccountAchDetails.
        :type account_number_suffix: str
        """
        if account_number_suffix is not None and len(account_number_suffix) > 4:
            raise ValueError("Invalid value for `account_number_suffix`, length must be less than or equal to `4`")

        self._account_number_suffix = account_number_suffix

    @property
    def account_type(self):
        """Gets the account_type of this PosBankAccountAchDetails.

        The type of the bank account performing the transfer. The account type can be `CHECKING`, `SAVINGS`, or `UNKNOWN`.

        :return: The account_type of this PosBankAccountAchDetails.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this PosBankAccountAchDetails.

        The type of the bank account performing the transfer. The account type can be `CHECKING`, `SAVINGS`, or `UNKNOWN`.

        :param account_type: The account_type of this PosBankAccountAchDetails.
        :type account_type: str
        """
        if account_type is not None and len(account_type) > 50:
            raise ValueError("Invalid value for `account_type`, length must be less than or equal to `50`")

        self._account_type = account_type

    @property
    def routing_number(self):
        """Gets the routing_number of this PosBankAccountAchDetails.

        The routing number for the bank account.

        :return: The routing_number of this PosBankAccountAchDetails.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this PosBankAccountAchDetails.

        The routing number for the bank account.

        :param routing_number: The routing_number of this PosBankAccountAchDetails.
        :type routing_number: str
        """
        if routing_number is not None and len(routing_number) > 50:
            raise ValueError("Invalid value for `routing_number`, length must be less than or equal to `50`")

        self._routing_number = routing_number
