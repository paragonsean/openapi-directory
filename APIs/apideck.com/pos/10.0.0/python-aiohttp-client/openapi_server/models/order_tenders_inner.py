# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.payment_card import PaymentCard
from openapi_server import util


class OrderTendersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, buyer_tendered_cash_amount: int=None, card: PaymentCard=None, card_entry_method: str=None, card_status: str=None, change_back_cash_amount: int=None, currency: Currency=None, id: str=None, location_id: str=None, name: str=None, note: str=None, payment_id: str=None, percentage: float=None, total_amount: int=None, total_discount: int=None, total_processing_fee: int=None, total_refund: int=None, total_service_charge: int=None, total_tax: int=None, total_tip: int=None, transaction_id: str=None, type: str=None):
        """OrderTendersInner - a model defined in OpenAPI

        :param amount: The amount of this OrderTendersInner.
        :param buyer_tendered_cash_amount: The buyer_tendered_cash_amount of this OrderTendersInner.
        :param card: The card of this OrderTendersInner.
        :param card_entry_method: The card_entry_method of this OrderTendersInner.
        :param card_status: The card_status of this OrderTendersInner.
        :param change_back_cash_amount: The change_back_cash_amount of this OrderTendersInner.
        :param currency: The currency of this OrderTendersInner.
        :param id: The id of this OrderTendersInner.
        :param location_id: The location_id of this OrderTendersInner.
        :param name: The name of this OrderTendersInner.
        :param note: The note of this OrderTendersInner.
        :param payment_id: The payment_id of this OrderTendersInner.
        :param percentage: The percentage of this OrderTendersInner.
        :param total_amount: The total_amount of this OrderTendersInner.
        :param total_discount: The total_discount of this OrderTendersInner.
        :param total_processing_fee: The total_processing_fee of this OrderTendersInner.
        :param total_refund: The total_refund of this OrderTendersInner.
        :param total_service_charge: The total_service_charge of this OrderTendersInner.
        :param total_tax: The total_tax of this OrderTendersInner.
        :param total_tip: The total_tip of this OrderTendersInner.
        :param transaction_id: The transaction_id of this OrderTendersInner.
        :param type: The type of this OrderTendersInner.
        """
        self.openapi_types = {
            'amount': float,
            'buyer_tendered_cash_amount': int,
            'card': PaymentCard,
            'card_entry_method': str,
            'card_status': str,
            'change_back_cash_amount': int,
            'currency': Currency,
            'id': str,
            'location_id': str,
            'name': str,
            'note': str,
            'payment_id': str,
            'percentage': float,
            'total_amount': int,
            'total_discount': int,
            'total_processing_fee': int,
            'total_refund': int,
            'total_service_charge': int,
            'total_tax': int,
            'total_tip': int,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'buyer_tendered_cash_amount': 'buyer_tendered_cash_amount',
            'card': 'card',
            'card_entry_method': 'card_entry_method',
            'card_status': 'card_status',
            'change_back_cash_amount': 'change_back_cash_amount',
            'currency': 'currency',
            'id': 'id',
            'location_id': 'location_id',
            'name': 'name',
            'note': 'note',
            'payment_id': 'payment_id',
            'percentage': 'percentage',
            'total_amount': 'total_amount',
            'total_discount': 'total_discount',
            'total_processing_fee': 'total_processing_fee',
            'total_refund': 'total_refund',
            'total_service_charge': 'total_service_charge',
            'total_tax': 'total_tax',
            'total_tip': 'total_tip',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self._amount = amount
        self._buyer_tendered_cash_amount = buyer_tendered_cash_amount
        self._card = card
        self._card_entry_method = card_entry_method
        self._card_status = card_status
        self._change_back_cash_amount = change_back_cash_amount
        self._currency = currency
        self._id = id
        self._location_id = location_id
        self._name = name
        self._note = note
        self._payment_id = payment_id
        self._percentage = percentage
        self._total_amount = total_amount
        self._total_discount = total_discount
        self._total_processing_fee = total_processing_fee
        self._total_refund = total_refund
        self._total_service_charge = total_service_charge
        self._total_tax = total_tax
        self._total_tip = total_tip
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderTendersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_tenders_inner of this OrderTendersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this OrderTendersInner.


        :return: The amount of this OrderTendersInner.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderTendersInner.


        :param amount: The amount of this OrderTendersInner.
        :type amount: float
        """

        self._amount = amount

    @property
    def buyer_tendered_cash_amount(self):
        """Gets the buyer_tendered_cash_amount of this OrderTendersInner.

        The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.

        :return: The buyer_tendered_cash_amount of this OrderTendersInner.
        :rtype: int
        """
        return self._buyer_tendered_cash_amount

    @buyer_tendered_cash_amount.setter
    def buyer_tendered_cash_amount(self, buyer_tendered_cash_amount):
        """Sets the buyer_tendered_cash_amount of this OrderTendersInner.

        The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.

        :param buyer_tendered_cash_amount: The buyer_tendered_cash_amount of this OrderTendersInner.
        :type buyer_tendered_cash_amount: int
        """

        self._buyer_tendered_cash_amount = buyer_tendered_cash_amount

    @property
    def card(self):
        """Gets the card of this OrderTendersInner.


        :return: The card of this OrderTendersInner.
        :rtype: PaymentCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this OrderTendersInner.


        :param card: The card of this OrderTendersInner.
        :type card: PaymentCard
        """

        self._card = card

    @property
    def card_entry_method(self):
        """Gets the card_entry_method of this OrderTendersInner.

        The entry method of the card. Only applicable when the tender type is card.

        :return: The card_entry_method of this OrderTendersInner.
        :rtype: str
        """
        return self._card_entry_method

    @card_entry_method.setter
    def card_entry_method(self, card_entry_method):
        """Sets the card_entry_method of this OrderTendersInner.

        The entry method of the card. Only applicable when the tender type is card.

        :param card_entry_method: The card_entry_method of this OrderTendersInner.
        :type card_entry_method: str
        """
        allowed_values = [None,"evm", "swiped", "keyed", "on-file", "contactless"]  # noqa: E501
        if card_entry_method not in allowed_values:
            raise ValueError(
                "Invalid value for `card_entry_method` ({0}), must be one of {1}"
                .format(card_entry_method, allowed_values)
            )

        self._card_entry_method = card_entry_method

    @property
    def card_status(self):
        """Gets the card_status of this OrderTendersInner.

        The status of the card. Only applicable when the tender type is card.

        :return: The card_status of this OrderTendersInner.
        :rtype: str
        """
        return self._card_status

    @card_status.setter
    def card_status(self, card_status):
        """Sets the card_status of this OrderTendersInner.

        The status of the card. Only applicable when the tender type is card.

        :param card_status: The card_status of this OrderTendersInner.
        :type card_status: str
        """
        allowed_values = [None,"authorized", "captured", "failed", "voided"]  # noqa: E501
        if card_status not in allowed_values:
            raise ValueError(
                "Invalid value for `card_status` ({0}), must be one of {1}"
                .format(card_status, allowed_values)
            )

        self._card_status = card_status

    @property
    def change_back_cash_amount(self):
        """Gets the change_back_cash_amount of this OrderTendersInner.

        The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.

        :return: The change_back_cash_amount of this OrderTendersInner.
        :rtype: int
        """
        return self._change_back_cash_amount

    @change_back_cash_amount.setter
    def change_back_cash_amount(self, change_back_cash_amount):
        """Sets the change_back_cash_amount of this OrderTendersInner.

        The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.

        :param change_back_cash_amount: The change_back_cash_amount of this OrderTendersInner.
        :type change_back_cash_amount: int
        """

        self._change_back_cash_amount = change_back_cash_amount

    @property
    def currency(self):
        """Gets the currency of this OrderTendersInner.


        :return: The currency of this OrderTendersInner.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderTendersInner.


        :param currency: The currency of this OrderTendersInner.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this OrderTendersInner.

        A unique identifier for an object.

        :return: The id of this OrderTendersInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderTendersInner.

        A unique identifier for an object.

        :param id: The id of this OrderTendersInner.
        :type id: str
        """

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this OrderTendersInner.

        A unique identifier for an object.

        :return: The location_id of this OrderTendersInner.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this OrderTendersInner.

        A unique identifier for an object.

        :param location_id: The location_id of this OrderTendersInner.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this OrderTendersInner.


        :return: The name of this OrderTendersInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderTendersInner.


        :param name: The name of this OrderTendersInner.
        :type name: str
        """

        self._name = name

    @property
    def note(self):
        """Gets the note of this OrderTendersInner.


        :return: The note of this OrderTendersInner.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this OrderTendersInner.


        :param note: The note of this OrderTendersInner.
        :type note: str
        """

        self._note = note

    @property
    def payment_id(self):
        """Gets the payment_id of this OrderTendersInner.

        A unique identifier for an object.

        :return: The payment_id of this OrderTendersInner.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this OrderTendersInner.

        A unique identifier for an object.

        :param payment_id: The payment_id of this OrderTendersInner.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def percentage(self):
        """Gets the percentage of this OrderTendersInner.


        :return: The percentage of this OrderTendersInner.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this OrderTendersInner.


        :param percentage: The percentage of this OrderTendersInner.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def total_amount(self):
        """Gets the total_amount of this OrderTendersInner.


        :return: The total_amount of this OrderTendersInner.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this OrderTendersInner.


        :param total_amount: The total_amount of this OrderTendersInner.
        :type total_amount: int
        """

        self._total_amount = total_amount

    @property
    def total_discount(self):
        """Gets the total_discount of this OrderTendersInner.


        :return: The total_discount of this OrderTendersInner.
        :rtype: int
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this OrderTendersInner.


        :param total_discount: The total_discount of this OrderTendersInner.
        :type total_discount: int
        """

        self._total_discount = total_discount

    @property
    def total_processing_fee(self):
        """Gets the total_processing_fee of this OrderTendersInner.


        :return: The total_processing_fee of this OrderTendersInner.
        :rtype: int
        """
        return self._total_processing_fee

    @total_processing_fee.setter
    def total_processing_fee(self, total_processing_fee):
        """Sets the total_processing_fee of this OrderTendersInner.


        :param total_processing_fee: The total_processing_fee of this OrderTendersInner.
        :type total_processing_fee: int
        """

        self._total_processing_fee = total_processing_fee

    @property
    def total_refund(self):
        """Gets the total_refund of this OrderTendersInner.


        :return: The total_refund of this OrderTendersInner.
        :rtype: int
        """
        return self._total_refund

    @total_refund.setter
    def total_refund(self, total_refund):
        """Sets the total_refund of this OrderTendersInner.


        :param total_refund: The total_refund of this OrderTendersInner.
        :type total_refund: int
        """

        self._total_refund = total_refund

    @property
    def total_service_charge(self):
        """Gets the total_service_charge of this OrderTendersInner.


        :return: The total_service_charge of this OrderTendersInner.
        :rtype: int
        """
        return self._total_service_charge

    @total_service_charge.setter
    def total_service_charge(self, total_service_charge):
        """Sets the total_service_charge of this OrderTendersInner.


        :param total_service_charge: The total_service_charge of this OrderTendersInner.
        :type total_service_charge: int
        """

        self._total_service_charge = total_service_charge

    @property
    def total_tax(self):
        """Gets the total_tax of this OrderTendersInner.


        :return: The total_tax of this OrderTendersInner.
        :rtype: int
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this OrderTendersInner.


        :param total_tax: The total_tax of this OrderTendersInner.
        :type total_tax: int
        """

        self._total_tax = total_tax

    @property
    def total_tip(self):
        """Gets the total_tip of this OrderTendersInner.


        :return: The total_tip of this OrderTendersInner.
        :rtype: int
        """
        return self._total_tip

    @total_tip.setter
    def total_tip(self, total_tip):
        """Sets the total_tip of this OrderTendersInner.


        :param total_tip: The total_tip of this OrderTendersInner.
        :type total_tip: int
        """

        self._total_tip = total_tip

    @property
    def transaction_id(self):
        """Gets the transaction_id of this OrderTendersInner.

        A unique identifier for an object.

        :return: The transaction_id of this OrderTendersInner.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this OrderTendersInner.

        A unique identifier for an object.

        :param transaction_id: The transaction_id of this OrderTendersInner.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this OrderTendersInner.


        :return: The type of this OrderTendersInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderTendersInner.


        :param type: The type of this OrderTendersInner.
        :type type: str
        """
        allowed_values = ["cash", "card", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
