# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class ModifierGroupModifiersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_name: str=None, available: bool=None, currency: Currency=None, id: str=None, name: str=None, price_amount: float=None):
        """ModifierGroupModifiersInner - a model defined in OpenAPI

        :param alternate_name: The alternate_name of this ModifierGroupModifiersInner.
        :param available: The available of this ModifierGroupModifiersInner.
        :param currency: The currency of this ModifierGroupModifiersInner.
        :param id: The id of this ModifierGroupModifiersInner.
        :param name: The name of this ModifierGroupModifiersInner.
        :param price_amount: The price_amount of this ModifierGroupModifiersInner.
        """
        self.openapi_types = {
            'alternate_name': str,
            'available': bool,
            'currency': Currency,
            'id': str,
            'name': str,
            'price_amount': float
        }

        self.attribute_map = {
            'alternate_name': 'alternate_name',
            'available': 'available',
            'currency': 'currency',
            'id': 'id',
            'name': 'name',
            'price_amount': 'price_amount'
        }

        self._alternate_name = alternate_name
        self._available = available
        self._currency = currency
        self._id = id
        self._name = name
        self._price_amount = price_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifierGroupModifiersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifierGroup_modifiers_inner of this ModifierGroupModifiersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_name(self):
        """Gets the alternate_name of this ModifierGroupModifiersInner.


        :return: The alternate_name of this ModifierGroupModifiersInner.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this ModifierGroupModifiersInner.


        :param alternate_name: The alternate_name of this ModifierGroupModifiersInner.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name

    @property
    def available(self):
        """Gets the available of this ModifierGroupModifiersInner.


        :return: The available of this ModifierGroupModifiersInner.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this ModifierGroupModifiersInner.


        :param available: The available of this ModifierGroupModifiersInner.
        :type available: bool
        """

        self._available = available

    @property
    def currency(self):
        """Gets the currency of this ModifierGroupModifiersInner.


        :return: The currency of this ModifierGroupModifiersInner.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ModifierGroupModifiersInner.


        :param currency: The currency of this ModifierGroupModifiersInner.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this ModifierGroupModifiersInner.


        :return: The id of this ModifierGroupModifiersInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModifierGroupModifiersInner.


        :param id: The id of this ModifierGroupModifiersInner.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModifierGroupModifiersInner.


        :return: The name of this ModifierGroupModifiersInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModifierGroupModifiersInner.


        :param name: The name of this ModifierGroupModifiersInner.
        :type name: str
        """

        self._name = name

    @property
    def price_amount(self):
        """Gets the price_amount of this ModifierGroupModifiersInner.


        :return: The price_amount of this ModifierGroupModifiersInner.
        :rtype: float
        """
        return self._price_amount

    @price_amount.setter
    def price_amount(self, price_amount):
        """Sets the price_amount of this ModifierGroupModifiersInner.


        :param price_amount: The price_amount of this ModifierGroupModifiersInner.
        :type price_amount: float
        """

        self._price_amount = price_amount
