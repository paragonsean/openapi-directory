# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class OrderTaxesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, auto_applied: bool=None, currency: Currency=None, id: str=None, name: str=None, percentage: float=None, scope: str=None, type: str=None):
        """OrderTaxesInner - a model defined in OpenAPI

        :param amount: The amount of this OrderTaxesInner.
        :param auto_applied: The auto_applied of this OrderTaxesInner.
        :param currency: The currency of this OrderTaxesInner.
        :param id: The id of this OrderTaxesInner.
        :param name: The name of this OrderTaxesInner.
        :param percentage: The percentage of this OrderTaxesInner.
        :param scope: The scope of this OrderTaxesInner.
        :param type: The type of this OrderTaxesInner.
        """
        self.openapi_types = {
            'amount': int,
            'auto_applied': bool,
            'currency': Currency,
            'id': str,
            'name': str,
            'percentage': float,
            'scope': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'auto_applied': 'auto_applied',
            'currency': 'currency',
            'id': 'id',
            'name': 'name',
            'percentage': 'percentage',
            'scope': 'scope',
            'type': 'type'
        }

        self._amount = amount
        self._auto_applied = auto_applied
        self._currency = currency
        self._id = id
        self._name = name
        self._percentage = percentage
        self._scope = scope
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderTaxesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_taxes_inner of this OrderTaxesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this OrderTaxesInner.


        :return: The amount of this OrderTaxesInner.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderTaxesInner.


        :param amount: The amount of this OrderTaxesInner.
        :type amount: int
        """

        self._amount = amount

    @property
    def auto_applied(self):
        """Gets the auto_applied of this OrderTaxesInner.

        Square-only: Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see Automatically Apply Taxes to an Order. [https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes]()

        :return: The auto_applied of this OrderTaxesInner.
        :rtype: bool
        """
        return self._auto_applied

    @auto_applied.setter
    def auto_applied(self, auto_applied):
        """Sets the auto_applied of this OrderTaxesInner.

        Square-only: Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see Automatically Apply Taxes to an Order. [https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes]()

        :param auto_applied: The auto_applied of this OrderTaxesInner.
        :type auto_applied: bool
        """

        self._auto_applied = auto_applied

    @property
    def currency(self):
        """Gets the currency of this OrderTaxesInner.


        :return: The currency of this OrderTaxesInner.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderTaxesInner.


        :param currency: The currency of this OrderTaxesInner.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this OrderTaxesInner.


        :return: The id of this OrderTaxesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderTaxesInner.


        :param id: The id of this OrderTaxesInner.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OrderTaxesInner.

        The tax's name.

        :return: The name of this OrderTaxesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderTaxesInner.

        The tax's name.

        :param name: The name of this OrderTaxesInner.
        :type name: str
        """

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this OrderTaxesInner.


        :return: The percentage of this OrderTaxesInner.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this OrderTaxesInner.


        :param percentage: The percentage of this OrderTaxesInner.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def scope(self):
        """Gets the scope of this OrderTaxesInner.


        :return: The scope of this OrderTaxesInner.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OrderTaxesInner.


        :param scope: The scope of this OrderTaxesInner.
        :type scope: str
        """
        allowed_values = ["order", "line_item"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def type(self):
        """Gets the type of this OrderTaxesInner.


        :return: The type of this OrderTaxesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderTaxesInner.


        :param type: The type of this OrderTaxesInner.
        :type type: str
        """
        allowed_values = ["unknown", "additive", "inclusive"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
