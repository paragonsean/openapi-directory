# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PosWebhookEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_id: str=None, entity_id: str=None, entity_type: str=None, entity_url: str=None, event_id: str=None, execution_attempt: float=None, occurred_at: str=None, service_id: str=None, unified_api: str=None, event_type: str=None):
        """PosWebhookEvent - a model defined in OpenAPI

        :param consumer_id: The consumer_id of this PosWebhookEvent.
        :param entity_id: The entity_id of this PosWebhookEvent.
        :param entity_type: The entity_type of this PosWebhookEvent.
        :param entity_url: The entity_url of this PosWebhookEvent.
        :param event_id: The event_id of this PosWebhookEvent.
        :param execution_attempt: The execution_attempt of this PosWebhookEvent.
        :param occurred_at: The occurred_at of this PosWebhookEvent.
        :param service_id: The service_id of this PosWebhookEvent.
        :param unified_api: The unified_api of this PosWebhookEvent.
        :param event_type: The event_type of this PosWebhookEvent.
        """
        self.openapi_types = {
            'consumer_id': str,
            'entity_id': str,
            'entity_type': str,
            'entity_url': str,
            'event_id': str,
            'execution_attempt': float,
            'occurred_at': str,
            'service_id': str,
            'unified_api': str,
            'event_type': str
        }

        self.attribute_map = {
            'consumer_id': 'consumer_id',
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'entity_url': 'entity_url',
            'event_id': 'event_id',
            'execution_attempt': 'execution_attempt',
            'occurred_at': 'occurred_at',
            'service_id': 'service_id',
            'unified_api': 'unified_api',
            'event_type': 'event_type'
        }

        self._consumer_id = consumer_id
        self._entity_id = entity_id
        self._entity_type = entity_type
        self._entity_url = entity_url
        self._event_id = event_id
        self._execution_attempt = execution_attempt
        self._occurred_at = occurred_at
        self._service_id = service_id
        self._unified_api = unified_api
        self._event_type = event_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PosWebhookEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PosWebhookEvent of this PosWebhookEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_id(self):
        """Gets the consumer_id of this PosWebhookEvent.

        Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.

        :return: The consumer_id of this PosWebhookEvent.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this PosWebhookEvent.

        Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.

        :param consumer_id: The consumer_id of this PosWebhookEvent.
        :type consumer_id: str
        """

        self._consumer_id = consumer_id

    @property
    def entity_id(self):
        """Gets the entity_id of this PosWebhookEvent.

        The service provider's ID of the entity that triggered this event

        :return: The entity_id of this PosWebhookEvent.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this PosWebhookEvent.

        The service provider's ID of the entity that triggered this event

        :param entity_id: The entity_id of this PosWebhookEvent.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this PosWebhookEvent.

        The type entity that triggered this event

        :return: The entity_type of this PosWebhookEvent.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this PosWebhookEvent.

        The type entity that triggered this event

        :param entity_type: The entity_type of this PosWebhookEvent.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def entity_url(self):
        """Gets the entity_url of this PosWebhookEvent.

        The url to retrieve entity detail.

        :return: The entity_url of this PosWebhookEvent.
        :rtype: str
        """
        return self._entity_url

    @entity_url.setter
    def entity_url(self, entity_url):
        """Sets the entity_url of this PosWebhookEvent.

        The url to retrieve entity detail.

        :param entity_url: The entity_url of this PosWebhookEvent.
        :type entity_url: str
        """

        self._entity_url = entity_url

    @property
    def event_id(self):
        """Gets the event_id of this PosWebhookEvent.

        Unique reference to this request event

        :return: The event_id of this PosWebhookEvent.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this PosWebhookEvent.

        Unique reference to this request event

        :param event_id: The event_id of this PosWebhookEvent.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def execution_attempt(self):
        """Gets the execution_attempt of this PosWebhookEvent.

        The current count this request event has been attempted

        :return: The execution_attempt of this PosWebhookEvent.
        :rtype: float
        """
        return self._execution_attempt

    @execution_attempt.setter
    def execution_attempt(self, execution_attempt):
        """Sets the execution_attempt of this PosWebhookEvent.

        The current count this request event has been attempted

        :param execution_attempt: The execution_attempt of this PosWebhookEvent.
        :type execution_attempt: float
        """

        self._execution_attempt = execution_attempt

    @property
    def occurred_at(self):
        """Gets the occurred_at of this PosWebhookEvent.

        ISO Datetime for when the original event occurred

        :return: The occurred_at of this PosWebhookEvent.
        :rtype: str
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this PosWebhookEvent.

        ISO Datetime for when the original event occurred

        :param occurred_at: The occurred_at of this PosWebhookEvent.
        :type occurred_at: str
        """

        self._occurred_at = occurred_at

    @property
    def service_id(self):
        """Gets the service_id of this PosWebhookEvent.

        Service provider identifier

        :return: The service_id of this PosWebhookEvent.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this PosWebhookEvent.

        Service provider identifier

        :param service_id: The service_id of this PosWebhookEvent.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def unified_api(self):
        """Gets the unified_api of this PosWebhookEvent.

        Name of Apideck Unified API

        :return: The unified_api of this PosWebhookEvent.
        :rtype: str
        """
        return self._unified_api

    @unified_api.setter
    def unified_api(self, unified_api):
        """Sets the unified_api of this PosWebhookEvent.

        Name of Apideck Unified API

        :param unified_api: The unified_api of this PosWebhookEvent.
        :type unified_api: str
        """
        allowed_values = ["accounting", "ats", "calendar", "crm", "csp", "customer-support", "ecommerce", "email", "email-marketing", "expense-management", "file-storage", "form", "hris", "lead", "payroll", "pos", "procurement", "project-management", "script", "sms", "spreadsheet", "team-messaging", "issue-tracking", "time-registration", "transactional-email", "vault", "data-warehouse"]  # noqa: E501
        if unified_api not in allowed_values:
            raise ValueError(
                "Invalid value for `unified_api` ({0}), must be one of {1}"
                .format(unified_api, allowed_values)
            )

        self._unified_api = unified_api

    @property
    def event_type(self):
        """Gets the event_type of this PosWebhookEvent.


        :return: The event_type of this PosWebhookEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this PosWebhookEvent.


        :param event_type: The event_type of this PosWebhookEvent.
        :type event_type: str
        """
        allowed_values = ["pos.order.created", "pos.order.updated", "pos.order.deleted", "pos.payment.created", "pos.payment.updated", "pos.payment.deleted", "pos.merchant.created", "pos.merchant.updated", "pos.merchant.deleted", "pos.location.created", "pos.location.updated", "pos.location.deleted", "pos.item.created", "pos.item.updated", "pos.item.deleted", "pos.modifier.created", "pos.modifier.updated", "pos.modifier.deleted", "pos.modifier-group.created", "pos.modifier-group.updated", "pos.modifier-group.deleted"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type
