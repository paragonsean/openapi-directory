# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_fulfillments_inner_pickup_details import OrderFulfillmentsInnerPickupDetails
from openapi_server import util


class OrderFulfillmentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, pickup_details: OrderFulfillmentsInnerPickupDetails=None, shipment_details: object=None, status: str=None, type: str=None):
        """OrderFulfillmentsInner - a model defined in OpenAPI

        :param id: The id of this OrderFulfillmentsInner.
        :param pickup_details: The pickup_details of this OrderFulfillmentsInner.
        :param shipment_details: The shipment_details of this OrderFulfillmentsInner.
        :param status: The status of this OrderFulfillmentsInner.
        :param type: The type of this OrderFulfillmentsInner.
        """
        self.openapi_types = {
            'id': str,
            'pickup_details': OrderFulfillmentsInnerPickupDetails,
            'shipment_details': object,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'pickup_details': 'pickup_details',
            'shipment_details': 'shipment_details',
            'status': 'status',
            'type': 'type'
        }

        self._id = id
        self._pickup_details = pickup_details
        self._shipment_details = shipment_details
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderFulfillmentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_fulfillments_inner of this OrderFulfillmentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OrderFulfillmentsInner.


        :return: The id of this OrderFulfillmentsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderFulfillmentsInner.


        :param id: The id of this OrderFulfillmentsInner.
        :type id: str
        """

        self._id = id

    @property
    def pickup_details(self):
        """Gets the pickup_details of this OrderFulfillmentsInner.


        :return: The pickup_details of this OrderFulfillmentsInner.
        :rtype: OrderFulfillmentsInnerPickupDetails
        """
        return self._pickup_details

    @pickup_details.setter
    def pickup_details(self, pickup_details):
        """Sets the pickup_details of this OrderFulfillmentsInner.


        :param pickup_details: The pickup_details of this OrderFulfillmentsInner.
        :type pickup_details: OrderFulfillmentsInnerPickupDetails
        """

        self._pickup_details = pickup_details

    @property
    def shipment_details(self):
        """Gets the shipment_details of this OrderFulfillmentsInner.


        :return: The shipment_details of this OrderFulfillmentsInner.
        :rtype: object
        """
        return self._shipment_details

    @shipment_details.setter
    def shipment_details(self, shipment_details):
        """Sets the shipment_details of this OrderFulfillmentsInner.


        :param shipment_details: The shipment_details of this OrderFulfillmentsInner.
        :type shipment_details: object
        """

        self._shipment_details = shipment_details

    @property
    def status(self):
        """Gets the status of this OrderFulfillmentsInner.

        The state of the fulfillment.

        :return: The status of this OrderFulfillmentsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderFulfillmentsInner.

        The state of the fulfillment.

        :param status: The status of this OrderFulfillmentsInner.
        :type status: str
        """
        allowed_values = ["proposed", "reserved", "prepared", "completed", "cancelled", "failed", "other"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this OrderFulfillmentsInner.


        :return: The type of this OrderFulfillmentsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderFulfillmentsInner.


        :param type: The type of this OrderFulfillmentsInner.
        :type type: str
        """
        allowed_values = ["pickup", "shipment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
