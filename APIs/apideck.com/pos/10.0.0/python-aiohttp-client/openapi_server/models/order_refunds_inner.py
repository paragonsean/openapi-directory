# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class OrderRefundsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency: Currency=None, id: str=None, location_id: str=None, reason: str=None, status: str=None, tender_id: str=None, transaction_id: str=None):
        """OrderRefundsInner - a model defined in OpenAPI

        :param amount: The amount of this OrderRefundsInner.
        :param currency: The currency of this OrderRefundsInner.
        :param id: The id of this OrderRefundsInner.
        :param location_id: The location_id of this OrderRefundsInner.
        :param reason: The reason of this OrderRefundsInner.
        :param status: The status of this OrderRefundsInner.
        :param tender_id: The tender_id of this OrderRefundsInner.
        :param transaction_id: The transaction_id of this OrderRefundsInner.
        """
        self.openapi_types = {
            'amount': int,
            'currency': Currency,
            'id': str,
            'location_id': str,
            'reason': str,
            'status': str,
            'tender_id': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'id': 'id',
            'location_id': 'location_id',
            'reason': 'reason',
            'status': 'status',
            'tender_id': 'tender_id',
            'transaction_id': 'transaction_id'
        }

        self._amount = amount
        self._currency = currency
        self._id = id
        self._location_id = location_id
        self._reason = reason
        self._status = status
        self._tender_id = tender_id
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderRefundsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_refunds_inner of this OrderRefundsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this OrderRefundsInner.


        :return: The amount of this OrderRefundsInner.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderRefundsInner.


        :param amount: The amount of this OrderRefundsInner.
        :type amount: int
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this OrderRefundsInner.


        :return: The currency of this OrderRefundsInner.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderRefundsInner.


        :param currency: The currency of this OrderRefundsInner.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this OrderRefundsInner.

        A unique identifier for an object.

        :return: The id of this OrderRefundsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderRefundsInner.

        A unique identifier for an object.

        :param id: The id of this OrderRefundsInner.
        :type id: str
        """

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this OrderRefundsInner.

        A unique identifier for an object.

        :return: The location_id of this OrderRefundsInner.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this OrderRefundsInner.

        A unique identifier for an object.

        :param location_id: The location_id of this OrderRefundsInner.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def reason(self):
        """Gets the reason of this OrderRefundsInner.


        :return: The reason of this OrderRefundsInner.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this OrderRefundsInner.


        :param reason: The reason of this OrderRefundsInner.
        :type reason: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this OrderRefundsInner.


        :return: The status of this OrderRefundsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderRefundsInner.


        :param status: The status of this OrderRefundsInner.
        :type status: str
        """
        allowed_values = ["pending", "approved", "rejected", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tender_id(self):
        """Gets the tender_id of this OrderRefundsInner.

        A unique identifier for an object.

        :return: The tender_id of this OrderRefundsInner.
        :rtype: str
        """
        return self._tender_id

    @tender_id.setter
    def tender_id(self, tender_id):
        """Sets the tender_id of this OrderRefundsInner.

        A unique identifier for an object.

        :param tender_id: The tender_id of this OrderRefundsInner.
        :type tender_id: str
        """

        self._tender_id = tender_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this OrderRefundsInner.

        A unique identifier for an object.

        :return: The transaction_id of this OrderRefundsInner.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this OrderRefundsInner.

        A unique identifier for an object.

        :param transaction_id: The transaction_id of this OrderRefundsInner.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id
