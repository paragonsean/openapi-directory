# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PosPaymentProcessingFeesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, effective_at: datetime=None, processing_type: str=None):
        """PosPaymentProcessingFeesInner - a model defined in OpenAPI

        :param amount: The amount of this PosPaymentProcessingFeesInner.
        :param effective_at: The effective_at of this PosPaymentProcessingFeesInner.
        :param processing_type: The processing_type of this PosPaymentProcessingFeesInner.
        """
        self.openapi_types = {
            'amount': float,
            'effective_at': datetime,
            'processing_type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'effective_at': 'effective_at',
            'processing_type': 'processing_type'
        }

        self._amount = amount
        self._effective_at = effective_at
        self._processing_type = processing_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PosPaymentProcessingFeesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PosPayment_processing_fees_inner of this PosPaymentProcessingFeesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PosPaymentProcessingFeesInner.


        :return: The amount of this PosPaymentProcessingFeesInner.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PosPaymentProcessingFeesInner.


        :param amount: The amount of this PosPaymentProcessingFeesInner.
        :type amount: float
        """

        self._amount = amount

    @property
    def effective_at(self):
        """Gets the effective_at of this PosPaymentProcessingFeesInner.


        :return: The effective_at of this PosPaymentProcessingFeesInner.
        :rtype: datetime
        """
        return self._effective_at

    @effective_at.setter
    def effective_at(self, effective_at):
        """Sets the effective_at of this PosPaymentProcessingFeesInner.


        :param effective_at: The effective_at of this PosPaymentProcessingFeesInner.
        :type effective_at: datetime
        """

        self._effective_at = effective_at

    @property
    def processing_type(self):
        """Gets the processing_type of this PosPaymentProcessingFeesInner.


        :return: The processing_type of this PosPaymentProcessingFeesInner.
        :rtype: str
        """
        return self._processing_type

    @processing_type.setter
    def processing_type(self, processing_type):
        """Sets the processing_type of this PosPaymentProcessingFeesInner.


        :param processing_type: The processing_type of this PosPaymentProcessingFeesInner.
        :type processing_type: str
        """
        allowed_values = ["initial", "adjustment"]  # noqa: E501
        if processing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_type` ({0}), must be one of {1}"
                .format(processing_type, allowed_values)
            )

        self._processing_type = processing_type
