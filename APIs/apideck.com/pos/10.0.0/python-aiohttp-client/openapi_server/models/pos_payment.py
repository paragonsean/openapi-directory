# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cash_details import CashDetails
from openapi_server.models.currency import Currency
from openapi_server.models.pos_bank_account import PosBankAccount
from openapi_server.models.pos_payment_card_details import PosPaymentCardDetails
from openapi_server.models.pos_payment_external_details import PosPaymentExternalDetails
from openapi_server.models.pos_payment_processing_fees_inner import PosPaymentProcessingFeesInner
from openapi_server.models.service_charge import ServiceCharge
from openapi_server.models.wallet_details import WalletDetails
from openapi_server import util


class PosPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, app_fee: float=None, approved: float=None, bank_account: PosBankAccount=None, card_details: PosPaymentCardDetails=None, cash: CashDetails=None, change_back_cash_amount: float=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, custom_mappings: object=None, customer_id: str=None, device_id: str=None, employee_id: str=None, external_details: PosPaymentExternalDetails=None, external_payment_id: str=None, id: str=None, idempotency_key: str=None, location_id: str=None, merchant_id: str=None, order_id: str=None, processing_fees: List[PosPaymentProcessingFeesInner]=None, refunded: float=None, service_charges: List[ServiceCharge]=None, source: str=None, source_id: str=None, status: str=None, tax: float=None, tender_id: str=None, tip: float=None, total: float=None, updated_at: datetime=None, updated_by: str=None, wallet: WalletDetails=None):
        """PosPayment - a model defined in OpenAPI

        :param amount: The amount of this PosPayment.
        :param app_fee: The app_fee of this PosPayment.
        :param approved: The approved of this PosPayment.
        :param bank_account: The bank_account of this PosPayment.
        :param card_details: The card_details of this PosPayment.
        :param cash: The cash of this PosPayment.
        :param change_back_cash_amount: The change_back_cash_amount of this PosPayment.
        :param created_at: The created_at of this PosPayment.
        :param created_by: The created_by of this PosPayment.
        :param currency: The currency of this PosPayment.
        :param custom_mappings: The custom_mappings of this PosPayment.
        :param customer_id: The customer_id of this PosPayment.
        :param device_id: The device_id of this PosPayment.
        :param employee_id: The employee_id of this PosPayment.
        :param external_details: The external_details of this PosPayment.
        :param external_payment_id: The external_payment_id of this PosPayment.
        :param id: The id of this PosPayment.
        :param idempotency_key: The idempotency_key of this PosPayment.
        :param location_id: The location_id of this PosPayment.
        :param merchant_id: The merchant_id of this PosPayment.
        :param order_id: The order_id of this PosPayment.
        :param processing_fees: The processing_fees of this PosPayment.
        :param refunded: The refunded of this PosPayment.
        :param service_charges: The service_charges of this PosPayment.
        :param source: The source of this PosPayment.
        :param source_id: The source_id of this PosPayment.
        :param status: The status of this PosPayment.
        :param tax: The tax of this PosPayment.
        :param tender_id: The tender_id of this PosPayment.
        :param tip: The tip of this PosPayment.
        :param total: The total of this PosPayment.
        :param updated_at: The updated_at of this PosPayment.
        :param updated_by: The updated_by of this PosPayment.
        :param wallet: The wallet of this PosPayment.
        """
        self.openapi_types = {
            'amount': float,
            'app_fee': float,
            'approved': float,
            'bank_account': PosBankAccount,
            'card_details': PosPaymentCardDetails,
            'cash': CashDetails,
            'change_back_cash_amount': float,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'custom_mappings': object,
            'customer_id': str,
            'device_id': str,
            'employee_id': str,
            'external_details': PosPaymentExternalDetails,
            'external_payment_id': str,
            'id': str,
            'idempotency_key': str,
            'location_id': str,
            'merchant_id': str,
            'order_id': str,
            'processing_fees': List[PosPaymentProcessingFeesInner],
            'refunded': float,
            'service_charges': List[ServiceCharge],
            'source': str,
            'source_id': str,
            'status': str,
            'tax': float,
            'tender_id': str,
            'tip': float,
            'total': float,
            'updated_at': datetime,
            'updated_by': str,
            'wallet': WalletDetails
        }

        self.attribute_map = {
            'amount': 'amount',
            'app_fee': 'app_fee',
            'approved': 'approved',
            'bank_account': 'bank_account',
            'card_details': 'card_details',
            'cash': 'cash',
            'change_back_cash_amount': 'change_back_cash_amount',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'customer_id': 'customer_id',
            'device_id': 'device_id',
            'employee_id': 'employee_id',
            'external_details': 'external_details',
            'external_payment_id': 'external_payment_id',
            'id': 'id',
            'idempotency_key': 'idempotency_key',
            'location_id': 'location_id',
            'merchant_id': 'merchant_id',
            'order_id': 'order_id',
            'processing_fees': 'processing_fees',
            'refunded': 'refunded',
            'service_charges': 'service_charges',
            'source': 'source',
            'source_id': 'source_id',
            'status': 'status',
            'tax': 'tax',
            'tender_id': 'tender_id',
            'tip': 'tip',
            'total': 'total',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'wallet': 'wallet'
        }

        self._amount = amount
        self._app_fee = app_fee
        self._approved = approved
        self._bank_account = bank_account
        self._card_details = card_details
        self._cash = cash
        self._change_back_cash_amount = change_back_cash_amount
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._custom_mappings = custom_mappings
        self._customer_id = customer_id
        self._device_id = device_id
        self._employee_id = employee_id
        self._external_details = external_details
        self._external_payment_id = external_payment_id
        self._id = id
        self._idempotency_key = idempotency_key
        self._location_id = location_id
        self._merchant_id = merchant_id
        self._order_id = order_id
        self._processing_fees = processing_fees
        self._refunded = refunded
        self._service_charges = service_charges
        self._source = source
        self._source_id = source_id
        self._status = status
        self._tax = tax
        self._tender_id = tender_id
        self._tip = tip
        self._total = total
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._wallet = wallet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PosPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PosPayment of this PosPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PosPayment.


        :return: The amount of this PosPayment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PosPayment.


        :param amount: The amount of this PosPayment.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def app_fee(self):
        """Gets the app_fee of this PosPayment.

        The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.

        :return: The app_fee of this PosPayment.
        :rtype: float
        """
        return self._app_fee

    @app_fee.setter
    def app_fee(self, app_fee):
        """Sets the app_fee of this PosPayment.

        The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.

        :param app_fee: The app_fee of this PosPayment.
        :type app_fee: float
        """

        self._app_fee = app_fee

    @property
    def approved(self):
        """Gets the approved of this PosPayment.

        The initial amount of money approved for this payment.

        :return: The approved of this PosPayment.
        :rtype: float
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this PosPayment.

        The initial amount of money approved for this payment.

        :param approved: The approved of this PosPayment.
        :type approved: float
        """

        self._approved = approved

    @property
    def bank_account(self):
        """Gets the bank_account of this PosPayment.


        :return: The bank_account of this PosPayment.
        :rtype: PosBankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this PosPayment.


        :param bank_account: The bank_account of this PosPayment.
        :type bank_account: PosBankAccount
        """

        self._bank_account = bank_account

    @property
    def card_details(self):
        """Gets the card_details of this PosPayment.


        :return: The card_details of this PosPayment.
        :rtype: PosPaymentCardDetails
        """
        return self._card_details

    @card_details.setter
    def card_details(self, card_details):
        """Sets the card_details of this PosPayment.


        :param card_details: The card_details of this PosPayment.
        :type card_details: PosPaymentCardDetails
        """

        self._card_details = card_details

    @property
    def cash(self):
        """Gets the cash of this PosPayment.


        :return: The cash of this PosPayment.
        :rtype: CashDetails
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this PosPayment.


        :param cash: The cash of this PosPayment.
        :type cash: CashDetails
        """

        self._cash = cash

    @property
    def change_back_cash_amount(self):
        """Gets the change_back_cash_amount of this PosPayment.


        :return: The change_back_cash_amount of this PosPayment.
        :rtype: float
        """
        return self._change_back_cash_amount

    @change_back_cash_amount.setter
    def change_back_cash_amount(self, change_back_cash_amount):
        """Sets the change_back_cash_amount of this PosPayment.


        :param change_back_cash_amount: The change_back_cash_amount of this PosPayment.
        :type change_back_cash_amount: float
        """

        self._change_back_cash_amount = change_back_cash_amount

    @property
    def created_at(self):
        """Gets the created_at of this PosPayment.

        The date and time when the object was created.

        :return: The created_at of this PosPayment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PosPayment.

        The date and time when the object was created.

        :param created_at: The created_at of this PosPayment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this PosPayment.

        The user who created the object.

        :return: The created_by of this PosPayment.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PosPayment.

        The user who created the object.

        :param created_by: The created_by of this PosPayment.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this PosPayment.


        :return: The currency of this PosPayment.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PosPayment.


        :param currency: The currency of this PosPayment.
        :type currency: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this PosPayment.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this PosPayment.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this PosPayment.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this PosPayment.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def customer_id(self):
        """Gets the customer_id of this PosPayment.


        :return: The customer_id of this PosPayment.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PosPayment.


        :param customer_id: The customer_id of this PosPayment.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")

        self._customer_id = customer_id

    @property
    def device_id(self):
        """Gets the device_id of this PosPayment.


        :return: The device_id of this PosPayment.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this PosPayment.


        :param device_id: The device_id of this PosPayment.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def employee_id(self):
        """Gets the employee_id of this PosPayment.


        :return: The employee_id of this PosPayment.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this PosPayment.


        :param employee_id: The employee_id of this PosPayment.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def external_details(self):
        """Gets the external_details of this PosPayment.


        :return: The external_details of this PosPayment.
        :rtype: PosPaymentExternalDetails
        """
        return self._external_details

    @external_details.setter
    def external_details(self, external_details):
        """Sets the external_details of this PosPayment.


        :param external_details: The external_details of this PosPayment.
        :type external_details: PosPaymentExternalDetails
        """

        self._external_details = external_details

    @property
    def external_payment_id(self):
        """Gets the external_payment_id of this PosPayment.


        :return: The external_payment_id of this PosPayment.
        :rtype: str
        """
        return self._external_payment_id

    @external_payment_id.setter
    def external_payment_id(self, external_payment_id):
        """Sets the external_payment_id of this PosPayment.


        :param external_payment_id: The external_payment_id of this PosPayment.
        :type external_payment_id: str
        """

        self._external_payment_id = external_payment_id

    @property
    def id(self):
        """Gets the id of this PosPayment.

        A unique identifier for an object.

        :return: The id of this PosPayment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PosPayment.

        A unique identifier for an object.

        :param id: The id of this PosPayment.
        :type id: str
        """

        self._id = id

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this PosPayment.

        A value you specify that uniquely identifies this request among requests you have sent.

        :return: The idempotency_key of this PosPayment.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this PosPayment.

        A value you specify that uniquely identifies this request among requests you have sent.

        :param idempotency_key: The idempotency_key of this PosPayment.
        :type idempotency_key: str
        """
        if idempotency_key is not None and len(idempotency_key) > 45:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `45`")

        self._idempotency_key = idempotency_key

    @property
    def location_id(self):
        """Gets the location_id of this PosPayment.


        :return: The location_id of this PosPayment.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this PosPayment.


        :param location_id: The location_id of this PosPayment.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PosPayment.


        :return: The merchant_id of this PosPayment.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PosPayment.


        :param merchant_id: The merchant_id of this PosPayment.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def order_id(self):
        """Gets the order_id of this PosPayment.


        :return: The order_id of this PosPayment.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PosPayment.


        :param order_id: The order_id of this PosPayment.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def processing_fees(self):
        """Gets the processing_fees of this PosPayment.


        :return: The processing_fees of this PosPayment.
        :rtype: List[PosPaymentProcessingFeesInner]
        """
        return self._processing_fees

    @processing_fees.setter
    def processing_fees(self, processing_fees):
        """Sets the processing_fees of this PosPayment.


        :param processing_fees: The processing_fees of this PosPayment.
        :type processing_fees: List[PosPaymentProcessingFeesInner]
        """

        self._processing_fees = processing_fees

    @property
    def refunded(self):
        """Gets the refunded of this PosPayment.

        The initial amount of money approved for this payment.

        :return: The refunded of this PosPayment.
        :rtype: float
        """
        return self._refunded

    @refunded.setter
    def refunded(self, refunded):
        """Sets the refunded of this PosPayment.

        The initial amount of money approved for this payment.

        :param refunded: The refunded of this PosPayment.
        :type refunded: float
        """

        self._refunded = refunded

    @property
    def service_charges(self):
        """Gets the service_charges of this PosPayment.

        Optional service charges or gratuity tip applied to the order.

        :return: The service_charges of this PosPayment.
        :rtype: List[ServiceCharge]
        """
        return self._service_charges

    @service_charges.setter
    def service_charges(self, service_charges):
        """Sets the service_charges of this PosPayment.

        Optional service charges or gratuity tip applied to the order.

        :param service_charges: The service_charges of this PosPayment.
        :type service_charges: List[ServiceCharge]
        """

        self._service_charges = service_charges

    @property
    def source(self):
        """Gets the source of this PosPayment.

        Source of this payment.

        :return: The source of this PosPayment.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PosPayment.

        Source of this payment.

        :param source: The source of this PosPayment.
        :type source: str
        """
        allowed_values = ["card", "bank_account", "wallet", "bnpl", "cash", "external", "other"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this PosPayment.

        The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.

        :return: The source_id of this PosPayment.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this PosPayment.

        The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.

        :param source_id: The source_id of this PosPayment.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def status(self):
        """Gets the status of this PosPayment.

        Status of this payment.

        :return: The status of this PosPayment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PosPayment.

        Status of this payment.

        :param status: The status of this PosPayment.
        :type status: str
        """
        allowed_values = ["approved", "pending", "completed", "canceled", "failed", "other"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tax(self):
        """Gets the tax of this PosPayment.


        :return: The tax of this PosPayment.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this PosPayment.


        :param tax: The tax of this PosPayment.
        :type tax: float
        """

        self._tax = tax

    @property
    def tender_id(self):
        """Gets the tender_id of this PosPayment.


        :return: The tender_id of this PosPayment.
        :rtype: str
        """
        return self._tender_id

    @tender_id.setter
    def tender_id(self, tender_id):
        """Sets the tender_id of this PosPayment.


        :param tender_id: The tender_id of this PosPayment.
        :type tender_id: str
        """
        if tender_id is None:
            raise ValueError("Invalid value for `tender_id`, must not be `None`")

        self._tender_id = tender_id

    @property
    def tip(self):
        """Gets the tip of this PosPayment.


        :return: The tip of this PosPayment.
        :rtype: float
        """
        return self._tip

    @tip.setter
    def tip(self, tip):
        """Sets the tip of this PosPayment.


        :param tip: The tip of this PosPayment.
        :type tip: float
        """

        self._tip = tip

    @property
    def total(self):
        """Gets the total of this PosPayment.


        :return: The total of this PosPayment.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PosPayment.


        :param total: The total of this PosPayment.
        :type total: float
        """

        self._total = total

    @property
    def updated_at(self):
        """Gets the updated_at of this PosPayment.

        The date and time when the object was last updated.

        :return: The updated_at of this PosPayment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PosPayment.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this PosPayment.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this PosPayment.

        The user who last updated the object.

        :return: The updated_by of this PosPayment.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this PosPayment.

        The user who last updated the object.

        :param updated_by: The updated_by of this PosPayment.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def wallet(self):
        """Gets the wallet of this PosPayment.


        :return: The wallet of this PosPayment.
        :rtype: WalletDetails
        """
        return self._wallet

    @wallet.setter
    def wallet(self, wallet):
        """Sets the wallet of this PosPayment.


        :param wallet: The wallet of this PosPayment.
        :type wallet: WalletDetails
        """

        self._wallet = wallet
