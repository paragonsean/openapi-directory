# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class PaymentCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: Address=None, bin: str=None, card_brand: str=None, card_type: str=None, cardholder_name: str=None, customer_id: str=None, enabled: bool=None, exp_month: int=None, exp_year: int=None, fingerprint: str=None, id: str=None, last_4: str=None, merchant_id: str=None, prepaid_type: str=None, reference_id: str=None, version: str=None):
        """PaymentCard - a model defined in OpenAPI

        :param billing_address: The billing_address of this PaymentCard.
        :param bin: The bin of this PaymentCard.
        :param card_brand: The card_brand of this PaymentCard.
        :param card_type: The card_type of this PaymentCard.
        :param cardholder_name: The cardholder_name of this PaymentCard.
        :param customer_id: The customer_id of this PaymentCard.
        :param enabled: The enabled of this PaymentCard.
        :param exp_month: The exp_month of this PaymentCard.
        :param exp_year: The exp_year of this PaymentCard.
        :param fingerprint: The fingerprint of this PaymentCard.
        :param id: The id of this PaymentCard.
        :param last_4: The last_4 of this PaymentCard.
        :param merchant_id: The merchant_id of this PaymentCard.
        :param prepaid_type: The prepaid_type of this PaymentCard.
        :param reference_id: The reference_id of this PaymentCard.
        :param version: The version of this PaymentCard.
        """
        self.openapi_types = {
            'billing_address': Address,
            'bin': str,
            'card_brand': str,
            'card_type': str,
            'cardholder_name': str,
            'customer_id': str,
            'enabled': bool,
            'exp_month': int,
            'exp_year': int,
            'fingerprint': str,
            'id': str,
            'last_4': str,
            'merchant_id': str,
            'prepaid_type': str,
            'reference_id': str,
            'version': str
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'bin': 'bin',
            'card_brand': 'card_brand',
            'card_type': 'card_type',
            'cardholder_name': 'cardholder_name',
            'customer_id': 'customer_id',
            'enabled': 'enabled',
            'exp_month': 'exp_month',
            'exp_year': 'exp_year',
            'fingerprint': 'fingerprint',
            'id': 'id',
            'last_4': 'last_4',
            'merchant_id': 'merchant_id',
            'prepaid_type': 'prepaid_type',
            'reference_id': 'reference_id',
            'version': 'version'
        }

        self._billing_address = billing_address
        self._bin = bin
        self._card_brand = card_brand
        self._card_type = card_type
        self._cardholder_name = cardholder_name
        self._customer_id = customer_id
        self._enabled = enabled
        self._exp_month = exp_month
        self._exp_year = exp_year
        self._fingerprint = fingerprint
        self._id = id
        self._last_4 = last_4
        self._merchant_id = merchant_id
        self._prepaid_type = prepaid_type
        self._reference_id = reference_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentCard of this PaymentCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this PaymentCard.


        :return: The billing_address of this PaymentCard.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PaymentCard.


        :param billing_address: The billing_address of this PaymentCard.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def bin(self):
        """Gets the bin of this PaymentCard.

        The first six digits of the card number, known as the Bank Identification Number (BIN).

        :return: The bin of this PaymentCard.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this PaymentCard.

        The first six digits of the card number, known as the Bank Identification Number (BIN).

        :param bin: The bin of this PaymentCard.
        :type bin: str
        """

        self._bin = bin

    @property
    def card_brand(self):
        """Gets the card_brand of this PaymentCard.

        The first six digits of the card number, known as the Bank Identification Number (BIN).

        :return: The card_brand of this PaymentCard.
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this PaymentCard.

        The first six digits of the card number, known as the Bank Identification Number (BIN).

        :param card_brand: The card_brand of this PaymentCard.
        :type card_brand: str
        """
        allowed_values = [None,"visa", "mastercard", "amex", "discover", "discover-diners", "jcb", "china-unionpay", "square-gift-card", "square-capital-card", "interac", "eftpos", "felica", "ebt", "other"]  # noqa: E501
        if card_brand not in allowed_values:
            raise ValueError(
                "Invalid value for `card_brand` ({0}), must be one of {1}"
                .format(card_brand, allowed_values)
            )

        self._card_brand = card_brand

    @property
    def card_type(self):
        """Gets the card_type of this PaymentCard.


        :return: The card_type of this PaymentCard.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this PaymentCard.


        :param card_type: The card_type of this PaymentCard.
        :type card_type: str
        """
        allowed_values = [None,"credit", "debit", "prepaid", "other"]  # noqa: E501
        if card_type not in allowed_values:
            raise ValueError(
                "Invalid value for `card_type` ({0}), must be one of {1}"
                .format(card_type, allowed_values)
            )

        self._card_type = card_type

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this PaymentCard.


        :return: The cardholder_name of this PaymentCard.
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this PaymentCard.


        :param cardholder_name: The cardholder_name of this PaymentCard.
        :type cardholder_name: str
        """

        self._cardholder_name = cardholder_name

    @property
    def customer_id(self):
        """Gets the customer_id of this PaymentCard.


        :return: The customer_id of this PaymentCard.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PaymentCard.


        :param customer_id: The customer_id of this PaymentCard.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def enabled(self):
        """Gets the enabled of this PaymentCard.

        Indicates whether or not a card can be used for payments.

        :return: The enabled of this PaymentCard.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PaymentCard.

        Indicates whether or not a card can be used for payments.

        :param enabled: The enabled of this PaymentCard.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def exp_month(self):
        """Gets the exp_month of this PaymentCard.

        The expiration month of the associated card as an integer between 1 and 12.

        :return: The exp_month of this PaymentCard.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this PaymentCard.

        The expiration month of the associated card as an integer between 1 and 12.

        :param exp_month: The exp_month of this PaymentCard.
        :type exp_month: int
        """
        if exp_month is not None and exp_month > 12:
            raise ValueError("Invalid value for `exp_month`, must be a value less than or equal to `12`")
        if exp_month is not None and exp_month < 1:
            raise ValueError("Invalid value for `exp_month`, must be a value greater than or equal to `1`")

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this PaymentCard.

        The four-digit year of the card's expiration date.

        :return: The exp_year of this PaymentCard.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this PaymentCard.

        The four-digit year of the card's expiration date.

        :param exp_year: The exp_year of this PaymentCard.
        :type exp_year: int
        """

        self._exp_year = exp_year

    @property
    def fingerprint(self):
        """Gets the fingerprint of this PaymentCard.


        :return: The fingerprint of this PaymentCard.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this PaymentCard.


        :param fingerprint: The fingerprint of this PaymentCard.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this PaymentCard.

        A unique identifier for an object.

        :return: The id of this PaymentCard.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentCard.

        A unique identifier for an object.

        :param id: The id of this PaymentCard.
        :type id: str
        """

        self._id = id

    @property
    def last_4(self):
        """Gets the last_4 of this PaymentCard.


        :return: The last_4 of this PaymentCard.
        :rtype: str
        """
        return self._last_4

    @last_4.setter
    def last_4(self, last_4):
        """Sets the last_4 of this PaymentCard.


        :param last_4: The last_4 of this PaymentCard.
        :type last_4: str
        """

        self._last_4 = last_4

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PaymentCard.


        :return: The merchant_id of this PaymentCard.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PaymentCard.


        :param merchant_id: The merchant_id of this PaymentCard.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def prepaid_type(self):
        """Gets the prepaid_type of this PaymentCard.


        :return: The prepaid_type of this PaymentCard.
        :rtype: str
        """
        return self._prepaid_type

    @prepaid_type.setter
    def prepaid_type(self, prepaid_type):
        """Sets the prepaid_type of this PaymentCard.


        :param prepaid_type: The prepaid_type of this PaymentCard.
        :type prepaid_type: str
        """
        allowed_values = [None,"non-prepaid", "prepaid", "unknown"]  # noqa: E501
        if prepaid_type not in allowed_values:
            raise ValueError(
                "Invalid value for `prepaid_type` ({0}), must be one of {1}"
                .format(prepaid_type, allowed_values)
            )

        self._prepaid_type = prepaid_type

    @property
    def reference_id(self):
        """Gets the reference_id of this PaymentCard.

        An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.

        :return: The reference_id of this PaymentCard.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this PaymentCard.

        An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.

        :param reference_id: The reference_id of this PaymentCard.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def version(self):
        """Gets the version of this PaymentCard.


        :return: The version of this PaymentCard.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PaymentCard.


        :param version: The version of this PaymentCard.
        :type version: str
        """

        self._version = version
