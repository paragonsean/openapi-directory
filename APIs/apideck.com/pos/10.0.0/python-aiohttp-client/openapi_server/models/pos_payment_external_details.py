# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PosPaymentExternalDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source: str=None, source_fee_amount: float=None, source_id: str=None, type: str=None):
        """PosPaymentExternalDetails - a model defined in OpenAPI

        :param source: The source of this PosPaymentExternalDetails.
        :param source_fee_amount: The source_fee_amount of this PosPaymentExternalDetails.
        :param source_id: The source_id of this PosPaymentExternalDetails.
        :param type: The type of this PosPaymentExternalDetails.
        """
        self.openapi_types = {
            'source': str,
            'source_fee_amount': float,
            'source_id': str,
            'type': str
        }

        self.attribute_map = {
            'source': 'source',
            'source_fee_amount': 'source_fee_amount',
            'source_id': 'source_id',
            'type': 'type'
        }

        self._source = source
        self._source_fee_amount = source_fee_amount
        self._source_id = source_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PosPaymentExternalDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PosPayment_external_details of this PosPaymentExternalDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self):
        """Gets the source of this PosPaymentExternalDetails.

        A description of the external payment source. For example,  \"Food Delivery Service\".

        :return: The source of this PosPaymentExternalDetails.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PosPaymentExternalDetails.

        A description of the external payment source. For example,  \"Food Delivery Service\".

        :param source: The source of this PosPaymentExternalDetails.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")
        if source is not None and len(source) > 255:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `255`")

        self._source = source

    @property
    def source_fee_amount(self):
        """Gets the source_fee_amount of this PosPaymentExternalDetails.

        The fees paid to the source. The amount minus this field is the net amount seller receives.

        :return: The source_fee_amount of this PosPaymentExternalDetails.
        :rtype: float
        """
        return self._source_fee_amount

    @source_fee_amount.setter
    def source_fee_amount(self, source_fee_amount):
        """Sets the source_fee_amount of this PosPaymentExternalDetails.

        The fees paid to the source. The amount minus this field is the net amount seller receives.

        :param source_fee_amount: The source_fee_amount of this PosPaymentExternalDetails.
        :type source_fee_amount: float
        """

        self._source_fee_amount = source_fee_amount

    @property
    def source_id(self):
        """Gets the source_id of this PosPaymentExternalDetails.

        An ID to associate the payment to its originating source.

        :return: The source_id of this PosPaymentExternalDetails.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this PosPaymentExternalDetails.

        An ID to associate the payment to its originating source.

        :param source_id: The source_id of this PosPaymentExternalDetails.
        :type source_id: str
        """
        if source_id is not None and len(source_id) > 255:
            raise ValueError("Invalid value for `source_id`, length must be less than or equal to `255`")

        self._source_id = source_id

    @property
    def type(self):
        """Gets the type of this PosPaymentExternalDetails.

        The type of external payment the seller received. It can be one of the following: - CHECK - Paid using a physical check. - BANK_TRANSFER - Paid using external bank transfer. - OTHER\\_GIFT\\_CARD - Paid using a non-Square gift card. - CRYPTO - Paid using a crypto currency. - SQUARE_CASH - Paid using Square Cash App. - SOCIAL - Paid using peer-to-peer payment applications. - EXTERNAL - A third-party application gathered this payment outside of Square. - EMONEY - Paid using an E-money provider. - CARD - A credit or debit card that Square does not support. - STORED_BALANCE - Use for house accounts, store credit, and so forth. - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals - OTHER - A type not listed here.

        :return: The type of this PosPaymentExternalDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PosPaymentExternalDetails.

        The type of external payment the seller received. It can be one of the following: - CHECK - Paid using a physical check. - BANK_TRANSFER - Paid using external bank transfer. - OTHER\\_GIFT\\_CARD - Paid using a non-Square gift card. - CRYPTO - Paid using a crypto currency. - SQUARE_CASH - Paid using Square Cash App. - SOCIAL - Paid using peer-to-peer payment applications. - EXTERNAL - A third-party application gathered this payment outside of Square. - EMONEY - Paid using an E-money provider. - CARD - A credit or debit card that Square does not support. - STORED_BALANCE - Use for house accounts, store credit, and so forth. - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals - OTHER - A type not listed here.

        :param type: The type of this PosPaymentExternalDetails.
        :type type: str
        """
        allowed_values = ["check", "bank_transfer", "other_gift_card", "crypto", "square_cash", "social", "external", "emoney", "card", "stored_balance", "food_voucher", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
