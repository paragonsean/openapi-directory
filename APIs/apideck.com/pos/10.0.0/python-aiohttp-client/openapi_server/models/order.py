# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.order_customers_inner import OrderCustomersInner
from openapi_server.models.order_discounts_inner import OrderDiscountsInner
from openapi_server.models.order_fulfillments_inner import OrderFulfillmentsInner
from openapi_server.models.order_line_items_inner import OrderLineItemsInner
from openapi_server.models.order_payments_inner import OrderPaymentsInner
from openapi_server.models.order_refunds_inner import OrderRefundsInner
from openapi_server.models.order_taxes_inner import OrderTaxesInner
from openapi_server.models.order_tenders_inner import OrderTendersInner
from openapi_server.models.service_charge import ServiceCharge
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_date: date=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, custom_mappings: object=None, customer_id: str=None, customers: List[OrderCustomersInner]=None, discounts: List[OrderDiscountsInner]=None, employee_id: str=None, fulfillments: List[OrderFulfillmentsInner]=None, id: str=None, idempotency_key: str=None, line_items: List[OrderLineItemsInner]=None, location_id: str=None, merchant_id: str=None, note: str=None, order_date: date=None, order_number: str=None, order_type_id: str=None, payment_status: str=None, payments: List[OrderPaymentsInner]=None, reference_id: str=None, refunded: bool=None, refunds: List[OrderRefundsInner]=None, seat: str=None, service_charges: List[ServiceCharge]=None, source: str=None, status: str=None, table: str=None, taxes: List[OrderTaxesInner]=None, tenders: List[OrderTendersInner]=None, title: str=None, total_amount: int=None, total_discount: int=None, total_refund: int=None, total_service_charge: int=None, total_tax: int=None, total_tip: int=None, updated_at: datetime=None, updated_by: str=None, version: str=None, voided: bool=None, voided_at: datetime=None):
        """Order - a model defined in OpenAPI

        :param closed_date: The closed_date of this Order.
        :param created_at: The created_at of this Order.
        :param created_by: The created_by of this Order.
        :param currency: The currency of this Order.
        :param custom_mappings: The custom_mappings of this Order.
        :param customer_id: The customer_id of this Order.
        :param customers: The customers of this Order.
        :param discounts: The discounts of this Order.
        :param employee_id: The employee_id of this Order.
        :param fulfillments: The fulfillments of this Order.
        :param id: The id of this Order.
        :param idempotency_key: The idempotency_key of this Order.
        :param line_items: The line_items of this Order.
        :param location_id: The location_id of this Order.
        :param merchant_id: The merchant_id of this Order.
        :param note: The note of this Order.
        :param order_date: The order_date of this Order.
        :param order_number: The order_number of this Order.
        :param order_type_id: The order_type_id of this Order.
        :param payment_status: The payment_status of this Order.
        :param payments: The payments of this Order.
        :param reference_id: The reference_id of this Order.
        :param refunded: The refunded of this Order.
        :param refunds: The refunds of this Order.
        :param seat: The seat of this Order.
        :param service_charges: The service_charges of this Order.
        :param source: The source of this Order.
        :param status: The status of this Order.
        :param table: The table of this Order.
        :param taxes: The taxes of this Order.
        :param tenders: The tenders of this Order.
        :param title: The title of this Order.
        :param total_amount: The total_amount of this Order.
        :param total_discount: The total_discount of this Order.
        :param total_refund: The total_refund of this Order.
        :param total_service_charge: The total_service_charge of this Order.
        :param total_tax: The total_tax of this Order.
        :param total_tip: The total_tip of this Order.
        :param updated_at: The updated_at of this Order.
        :param updated_by: The updated_by of this Order.
        :param version: The version of this Order.
        :param voided: The voided of this Order.
        :param voided_at: The voided_at of this Order.
        """
        self.openapi_types = {
            'closed_date': date,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'custom_mappings': object,
            'customer_id': str,
            'customers': List[OrderCustomersInner],
            'discounts': List[OrderDiscountsInner],
            'employee_id': str,
            'fulfillments': List[OrderFulfillmentsInner],
            'id': str,
            'idempotency_key': str,
            'line_items': List[OrderLineItemsInner],
            'location_id': str,
            'merchant_id': str,
            'note': str,
            'order_date': date,
            'order_number': str,
            'order_type_id': str,
            'payment_status': str,
            'payments': List[OrderPaymentsInner],
            'reference_id': str,
            'refunded': bool,
            'refunds': List[OrderRefundsInner],
            'seat': str,
            'service_charges': List[ServiceCharge],
            'source': str,
            'status': str,
            'table': str,
            'taxes': List[OrderTaxesInner],
            'tenders': List[OrderTendersInner],
            'title': str,
            'total_amount': int,
            'total_discount': int,
            'total_refund': int,
            'total_service_charge': int,
            'total_tax': int,
            'total_tip': int,
            'updated_at': datetime,
            'updated_by': str,
            'version': str,
            'voided': bool,
            'voided_at': datetime
        }

        self.attribute_map = {
            'closed_date': 'closed_date',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'customer_id': 'customer_id',
            'customers': 'customers',
            'discounts': 'discounts',
            'employee_id': 'employee_id',
            'fulfillments': 'fulfillments',
            'id': 'id',
            'idempotency_key': 'idempotency_key',
            'line_items': 'line_items',
            'location_id': 'location_id',
            'merchant_id': 'merchant_id',
            'note': 'note',
            'order_date': 'order_date',
            'order_number': 'order_number',
            'order_type_id': 'order_type_id',
            'payment_status': 'payment_status',
            'payments': 'payments',
            'reference_id': 'reference_id',
            'refunded': 'refunded',
            'refunds': 'refunds',
            'seat': 'seat',
            'service_charges': 'service_charges',
            'source': 'source',
            'status': 'status',
            'table': 'table',
            'taxes': 'taxes',
            'tenders': 'tenders',
            'title': 'title',
            'total_amount': 'total_amount',
            'total_discount': 'total_discount',
            'total_refund': 'total_refund',
            'total_service_charge': 'total_service_charge',
            'total_tax': 'total_tax',
            'total_tip': 'total_tip',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'version': 'version',
            'voided': 'voided',
            'voided_at': 'voided_at'
        }

        self._closed_date = closed_date
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._custom_mappings = custom_mappings
        self._customer_id = customer_id
        self._customers = customers
        self._discounts = discounts
        self._employee_id = employee_id
        self._fulfillments = fulfillments
        self._id = id
        self._idempotency_key = idempotency_key
        self._line_items = line_items
        self._location_id = location_id
        self._merchant_id = merchant_id
        self._note = note
        self._order_date = order_date
        self._order_number = order_number
        self._order_type_id = order_type_id
        self._payment_status = payment_status
        self._payments = payments
        self._reference_id = reference_id
        self._refunded = refunded
        self._refunds = refunds
        self._seat = seat
        self._service_charges = service_charges
        self._source = source
        self._status = status
        self._table = table
        self._taxes = taxes
        self._tenders = tenders
        self._title = title
        self._total_amount = total_amount
        self._total_discount = total_discount
        self._total_refund = total_refund
        self._total_service_charge = total_service_charge
        self._total_tax = total_tax
        self._total_tip = total_tip
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._version = version
        self._voided = voided
        self._voided_at = voided_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_date(self):
        """Gets the closed_date of this Order.


        :return: The closed_date of this Order.
        :rtype: date
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this Order.


        :param closed_date: The closed_date of this Order.
        :type closed_date: date
        """

        self._closed_date = closed_date

    @property
    def created_at(self):
        """Gets the created_at of this Order.

        The date and time when the object was created.

        :return: The created_at of this Order.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Order.

        The date and time when the object was created.

        :param created_at: The created_at of this Order.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Order.

        The user who created the object.

        :return: The created_by of this Order.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Order.

        The user who created the object.

        :param created_by: The created_by of this Order.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this Order.


        :return: The currency of this Order.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Order.


        :param currency: The currency of this Order.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Order.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Order.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Order.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Order.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def customer_id(self):
        """Gets the customer_id of this Order.


        :return: The customer_id of this Order.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Order.


        :param customer_id: The customer_id of this Order.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def customers(self):
        """Gets the customers of this Order.


        :return: The customers of this Order.
        :rtype: List[OrderCustomersInner]
        """
        return self._customers

    @customers.setter
    def customers(self, customers):
        """Sets the customers of this Order.


        :param customers: The customers of this Order.
        :type customers: List[OrderCustomersInner]
        """

        self._customers = customers

    @property
    def discounts(self):
        """Gets the discounts of this Order.


        :return: The discounts of this Order.
        :rtype: List[OrderDiscountsInner]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this Order.


        :param discounts: The discounts of this Order.
        :type discounts: List[OrderDiscountsInner]
        """

        self._discounts = discounts

    @property
    def employee_id(self):
        """Gets the employee_id of this Order.


        :return: The employee_id of this Order.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Order.


        :param employee_id: The employee_id of this Order.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def fulfillments(self):
        """Gets the fulfillments of this Order.


        :return: The fulfillments of this Order.
        :rtype: List[OrderFulfillmentsInner]
        """
        return self._fulfillments

    @fulfillments.setter
    def fulfillments(self, fulfillments):
        """Sets the fulfillments of this Order.


        :param fulfillments: The fulfillments of this Order.
        :type fulfillments: List[OrderFulfillmentsInner]
        """

        self._fulfillments = fulfillments

    @property
    def id(self):
        """Gets the id of this Order.

        A unique identifier for an object.

        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.

        A unique identifier for an object.

        :param id: The id of this Order.
        :type id: str
        """

        self._id = id

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this Order.

        A value you specify that uniquely identifies this request among requests you have sent.

        :return: The idempotency_key of this Order.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this Order.

        A value you specify that uniquely identifies this request among requests you have sent.

        :param idempotency_key: The idempotency_key of this Order.
        :type idempotency_key: str
        """
        if idempotency_key is not None and len(idempotency_key) > 45:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `45`")

        self._idempotency_key = idempotency_key

    @property
    def line_items(self):
        """Gets the line_items of this Order.


        :return: The line_items of this Order.
        :rtype: List[OrderLineItemsInner]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this Order.


        :param line_items: The line_items of this Order.
        :type line_items: List[OrderLineItemsInner]
        """

        self._line_items = line_items

    @property
    def location_id(self):
        """Gets the location_id of this Order.


        :return: The location_id of this Order.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Order.


        :param location_id: The location_id of this Order.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Order.


        :return: The merchant_id of this Order.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Order.


        :param merchant_id: The merchant_id of this Order.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def note(self):
        """Gets the note of this Order.

        A note with information about this order, may be printed on the order receipt and displayed in apps

        :return: The note of this Order.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Order.

        A note with information about this order, may be printed on the order receipt and displayed in apps

        :param note: The note of this Order.
        :type note: str
        """

        self._note = note

    @property
    def order_date(self):
        """Gets the order_date of this Order.


        :return: The order_date of this Order.
        :rtype: date
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this Order.


        :param order_date: The order_date of this Order.
        :type order_date: date
        """

        self._order_date = order_date

    @property
    def order_number(self):
        """Gets the order_number of this Order.


        :return: The order_number of this Order.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Order.


        :param order_number: The order_number of this Order.
        :type order_number: str
        """

        self._order_number = order_number

    @property
    def order_type_id(self):
        """Gets the order_type_id of this Order.


        :return: The order_type_id of this Order.
        :rtype: str
        """
        return self._order_type_id

    @order_type_id.setter
    def order_type_id(self, order_type_id):
        """Sets the order_type_id of this Order.


        :param order_type_id: The order_type_id of this Order.
        :type order_type_id: str
        """

        self._order_type_id = order_type_id

    @property
    def payment_status(self):
        """Gets the payment_status of this Order.

        Is this order paid or not?

        :return: The payment_status of this Order.
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this Order.

        Is this order paid or not?

        :param payment_status: The payment_status of this Order.
        :type payment_status: str
        """
        allowed_values = ["open", "paid", "refunded", "credited", "partially_paid", "partially_refunded", "unknown"]  # noqa: E501
        if payment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_status` ({0}), must be one of {1}"
                .format(payment_status, allowed_values)
            )

        self._payment_status = payment_status

    @property
    def payments(self):
        """Gets the payments of this Order.


        :return: The payments of this Order.
        :rtype: List[OrderPaymentsInner]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this Order.


        :param payments: The payments of this Order.
        :type payments: List[OrderPaymentsInner]
        """

        self._payments = payments

    @property
    def reference_id(self):
        """Gets the reference_id of this Order.

        An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.

        :return: The reference_id of this Order.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Order.

        An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.

        :param reference_id: The reference_id of this Order.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def refunded(self):
        """Gets the refunded of this Order.


        :return: The refunded of this Order.
        :rtype: bool
        """
        return self._refunded

    @refunded.setter
    def refunded(self, refunded):
        """Sets the refunded of this Order.


        :param refunded: The refunded of this Order.
        :type refunded: bool
        """

        self._refunded = refunded

    @property
    def refunds(self):
        """Gets the refunds of this Order.


        :return: The refunds of this Order.
        :rtype: List[OrderRefundsInner]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this Order.


        :param refunds: The refunds of this Order.
        :type refunds: List[OrderRefundsInner]
        """

        self._refunds = refunds

    @property
    def seat(self):
        """Gets the seat of this Order.


        :return: The seat of this Order.
        :rtype: str
        """
        return self._seat

    @seat.setter
    def seat(self, seat):
        """Sets the seat of this Order.


        :param seat: The seat of this Order.
        :type seat: str
        """

        self._seat = seat

    @property
    def service_charges(self):
        """Gets the service_charges of this Order.

        Optional service charges or gratuity tip applied to the order.

        :return: The service_charges of this Order.
        :rtype: List[ServiceCharge]
        """
        return self._service_charges

    @service_charges.setter
    def service_charges(self, service_charges):
        """Sets the service_charges of this Order.

        Optional service charges or gratuity tip applied to the order.

        :param service_charges: The service_charges of this Order.
        :type service_charges: List[ServiceCharge]
        """

        self._service_charges = service_charges

    @property
    def source(self):
        """Gets the source of this Order.

        Source of order. Indicates the way that the order was placed.

        :return: The source of this Order.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Order.

        Source of order. Indicates the way that the order was placed.

        :param source: The source of this Order.
        :type source: str
        """
        allowed_values = [None,"in-store", "online", "opt", "api", "kiosk", "caller-id", "google", "invoice"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def status(self):
        """Gets the status of this Order.

        Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()

        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.

        Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()

        :param status: The status of this Order.
        :type status: str
        """
        allowed_values = ["open", "draft", "delivered", "delayed", "voided", "completed", "hidden"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def table(self):
        """Gets the table of this Order.


        :return: The table of this Order.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this Order.


        :param table: The table of this Order.
        :type table: str
        """

        self._table = table

    @property
    def taxes(self):
        """Gets the taxes of this Order.


        :return: The taxes of this Order.
        :rtype: List[OrderTaxesInner]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Order.


        :param taxes: The taxes of this Order.
        :type taxes: List[OrderTaxesInner]
        """

        self._taxes = taxes

    @property
    def tenders(self):
        """Gets the tenders of this Order.


        :return: The tenders of this Order.
        :rtype: List[OrderTendersInner]
        """
        return self._tenders

    @tenders.setter
    def tenders(self, tenders):
        """Sets the tenders of this Order.


        :param tenders: The tenders of this Order.
        :type tenders: List[OrderTendersInner]
        """

        self._tenders = tenders

    @property
    def title(self):
        """Gets the title of this Order.


        :return: The title of this Order.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Order.


        :param title: The title of this Order.
        :type title: str
        """

        self._title = title

    @property
    def total_amount(self):
        """Gets the total_amount of this Order.


        :return: The total_amount of this Order.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Order.


        :param total_amount: The total_amount of this Order.
        :type total_amount: int
        """

        self._total_amount = total_amount

    @property
    def total_discount(self):
        """Gets the total_discount of this Order.


        :return: The total_discount of this Order.
        :rtype: int
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this Order.


        :param total_discount: The total_discount of this Order.
        :type total_discount: int
        """

        self._total_discount = total_discount

    @property
    def total_refund(self):
        """Gets the total_refund of this Order.


        :return: The total_refund of this Order.
        :rtype: int
        """
        return self._total_refund

    @total_refund.setter
    def total_refund(self, total_refund):
        """Sets the total_refund of this Order.


        :param total_refund: The total_refund of this Order.
        :type total_refund: int
        """

        self._total_refund = total_refund

    @property
    def total_service_charge(self):
        """Gets the total_service_charge of this Order.


        :return: The total_service_charge of this Order.
        :rtype: int
        """
        return self._total_service_charge

    @total_service_charge.setter
    def total_service_charge(self, total_service_charge):
        """Sets the total_service_charge of this Order.


        :param total_service_charge: The total_service_charge of this Order.
        :type total_service_charge: int
        """

        self._total_service_charge = total_service_charge

    @property
    def total_tax(self):
        """Gets the total_tax of this Order.


        :return: The total_tax of this Order.
        :rtype: int
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this Order.


        :param total_tax: The total_tax of this Order.
        :type total_tax: int
        """

        self._total_tax = total_tax

    @property
    def total_tip(self):
        """Gets the total_tip of this Order.


        :return: The total_tip of this Order.
        :rtype: int
        """
        return self._total_tip

    @total_tip.setter
    def total_tip(self, total_tip):
        """Sets the total_tip of this Order.


        :param total_tip: The total_tip of this Order.
        :type total_tip: int
        """

        self._total_tip = total_tip

    @property
    def updated_at(self):
        """Gets the updated_at of this Order.

        The date and time when the object was last updated.

        :return: The updated_at of this Order.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Order.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Order.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Order.

        The user who last updated the object.

        :return: The updated_by of this Order.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Order.

        The user who last updated the object.

        :param updated_by: The updated_by of this Order.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def version(self):
        """Gets the version of this Order.


        :return: The version of this Order.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Order.


        :param version: The version of this Order.
        :type version: str
        """

        self._version = version

    @property
    def voided(self):
        """Gets the voided of this Order.


        :return: The voided of this Order.
        :rtype: bool
        """
        return self._voided

    @voided.setter
    def voided(self, voided):
        """Sets the voided of this Order.


        :param voided: The voided of this Order.
        :type voided: bool
        """

        self._voided = voided

    @property
    def voided_at(self):
        """Gets the voided_at of this Order.


        :return: The voided_at of this Order.
        :rtype: datetime
        """
        return self._voided_at

    @voided_at.setter
    def voided_at(self, voided_at):
        """Sets the voided_at of this Order.


        :param voided_at: The voided_at of this Order.
        :type voided_at: datetime
        """

        self._voided_at = voided_at
