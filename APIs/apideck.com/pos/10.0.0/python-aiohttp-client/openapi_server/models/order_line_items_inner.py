# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_line_items_inner_applied_discounts_inner import OrderLineItemsInnerAppliedDiscountsInner
from openapi_server.models.order_line_items_inner_applied_taxes_inner import OrderLineItemsInnerAppliedTaxesInner
from openapi_server.models.order_line_items_inner_modifiers_inner import OrderLineItemsInnerModifiersInner
from openapi_server.models.variations_inner import VariationsInner
from openapi_server import util


class OrderLineItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_discounts: List[OrderLineItemsInnerAppliedDiscountsInner]=None, applied_taxes: List[OrderLineItemsInnerAppliedTaxesInner]=None, id: str=None, item: VariationsInner=None, modifiers: List[OrderLineItemsInnerModifiersInner]=None, name: str=None, quantity: float=None, total_amount: int=None, total_discount: int=None, total_tax: int=None, unit_price: float=None):
        """OrderLineItemsInner - a model defined in OpenAPI

        :param applied_discounts: The applied_discounts of this OrderLineItemsInner.
        :param applied_taxes: The applied_taxes of this OrderLineItemsInner.
        :param id: The id of this OrderLineItemsInner.
        :param item: The item of this OrderLineItemsInner.
        :param modifiers: The modifiers of this OrderLineItemsInner.
        :param name: The name of this OrderLineItemsInner.
        :param quantity: The quantity of this OrderLineItemsInner.
        :param total_amount: The total_amount of this OrderLineItemsInner.
        :param total_discount: The total_discount of this OrderLineItemsInner.
        :param total_tax: The total_tax of this OrderLineItemsInner.
        :param unit_price: The unit_price of this OrderLineItemsInner.
        """
        self.openapi_types = {
            'applied_discounts': List[OrderLineItemsInnerAppliedDiscountsInner],
            'applied_taxes': List[OrderLineItemsInnerAppliedTaxesInner],
            'id': str,
            'item': VariationsInner,
            'modifiers': List[OrderLineItemsInnerModifiersInner],
            'name': str,
            'quantity': float,
            'total_amount': int,
            'total_discount': int,
            'total_tax': int,
            'unit_price': float
        }

        self.attribute_map = {
            'applied_discounts': 'applied_discounts',
            'applied_taxes': 'applied_taxes',
            'id': 'id',
            'item': 'item',
            'modifiers': 'modifiers',
            'name': 'name',
            'quantity': 'quantity',
            'total_amount': 'total_amount',
            'total_discount': 'total_discount',
            'total_tax': 'total_tax',
            'unit_price': 'unit_price'
        }

        self._applied_discounts = applied_discounts
        self._applied_taxes = applied_taxes
        self._id = id
        self._item = item
        self._modifiers = modifiers
        self._name = name
        self._quantity = quantity
        self._total_amount = total_amount
        self._total_discount = total_discount
        self._total_tax = total_tax
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_line_items_inner of this OrderLineItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_discounts(self):
        """Gets the applied_discounts of this OrderLineItemsInner.


        :return: The applied_discounts of this OrderLineItemsInner.
        :rtype: List[OrderLineItemsInnerAppliedDiscountsInner]
        """
        return self._applied_discounts

    @applied_discounts.setter
    def applied_discounts(self, applied_discounts):
        """Sets the applied_discounts of this OrderLineItemsInner.


        :param applied_discounts: The applied_discounts of this OrderLineItemsInner.
        :type applied_discounts: List[OrderLineItemsInnerAppliedDiscountsInner]
        """

        self._applied_discounts = applied_discounts

    @property
    def applied_taxes(self):
        """Gets the applied_taxes of this OrderLineItemsInner.


        :return: The applied_taxes of this OrderLineItemsInner.
        :rtype: List[OrderLineItemsInnerAppliedTaxesInner]
        """
        return self._applied_taxes

    @applied_taxes.setter
    def applied_taxes(self, applied_taxes):
        """Sets the applied_taxes of this OrderLineItemsInner.


        :param applied_taxes: The applied_taxes of this OrderLineItemsInner.
        :type applied_taxes: List[OrderLineItemsInnerAppliedTaxesInner]
        """

        self._applied_taxes = applied_taxes

    @property
    def id(self):
        """Gets the id of this OrderLineItemsInner.

        A unique identifier for an object.

        :return: The id of this OrderLineItemsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderLineItemsInner.

        A unique identifier for an object.

        :param id: The id of this OrderLineItemsInner.
        :type id: str
        """

        self._id = id

    @property
    def item(self):
        """Gets the item of this OrderLineItemsInner.


        :return: The item of this OrderLineItemsInner.
        :rtype: VariationsInner
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this OrderLineItemsInner.


        :param item: The item of this OrderLineItemsInner.
        :type item: VariationsInner
        """

        self._item = item

    @property
    def modifiers(self):
        """Gets the modifiers of this OrderLineItemsInner.

        Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts

        :return: The modifiers of this OrderLineItemsInner.
        :rtype: List[OrderLineItemsInnerModifiersInner]
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this OrderLineItemsInner.

        Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts

        :param modifiers: The modifiers of this OrderLineItemsInner.
        :type modifiers: List[OrderLineItemsInnerModifiersInner]
        """

        self._modifiers = modifiers

    @property
    def name(self):
        """Gets the name of this OrderLineItemsInner.


        :return: The name of this OrderLineItemsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderLineItemsInner.


        :param name: The name of this OrderLineItemsInner.
        :type name: str
        """

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this OrderLineItemsInner.


        :return: The quantity of this OrderLineItemsInner.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderLineItemsInner.


        :param quantity: The quantity of this OrderLineItemsInner.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def total_amount(self):
        """Gets the total_amount of this OrderLineItemsInner.


        :return: The total_amount of this OrderLineItemsInner.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this OrderLineItemsInner.


        :param total_amount: The total_amount of this OrderLineItemsInner.
        :type total_amount: int
        """

        self._total_amount = total_amount

    @property
    def total_discount(self):
        """Gets the total_discount of this OrderLineItemsInner.


        :return: The total_discount of this OrderLineItemsInner.
        :rtype: int
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this OrderLineItemsInner.


        :param total_discount: The total_discount of this OrderLineItemsInner.
        :type total_discount: int
        """

        self._total_discount = total_discount

    @property
    def total_tax(self):
        """Gets the total_tax of this OrderLineItemsInner.


        :return: The total_tax of this OrderLineItemsInner.
        :rtype: int
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this OrderLineItemsInner.


        :param total_tax: The total_tax of this OrderLineItemsInner.
        :type total_tax: int
        """

        self._total_tax = total_tax

    @property
    def unit_price(self):
        """Gets the unit_price of this OrderLineItemsInner.


        :return: The unit_price of this OrderLineItemsInner.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this OrderLineItemsInner.


        :param unit_price: The unit_price of this OrderLineItemsInner.
        :type unit_price: float
        """

        self._unit_price = unit_price
