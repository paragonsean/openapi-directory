# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.price import Price
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, created_at: datetime=None, created_by: str=None, custom_mappings: object=None, direction: str=None, error: Error=None, _from: str=None, id: str=None, messaging_service_id: str=None, number_of_media_files: int=None, number_of_units: int=None, price: Price=None, reference: str=None, scheduled_at: datetime=None, sent_at: datetime=None, status: str=None, subject: str=None, to: str=None, type: str=None, updated_at: datetime=None, updated_by: str=None, webhook_url: str=None):
        """Message - a model defined in OpenAPI

        :param body: The body of this Message.
        :param created_at: The created_at of this Message.
        :param created_by: The created_by of this Message.
        :param custom_mappings: The custom_mappings of this Message.
        :param direction: The direction of this Message.
        :param error: The error of this Message.
        :param _from: The _from of this Message.
        :param id: The id of this Message.
        :param messaging_service_id: The messaging_service_id of this Message.
        :param number_of_media_files: The number_of_media_files of this Message.
        :param number_of_units: The number_of_units of this Message.
        :param price: The price of this Message.
        :param reference: The reference of this Message.
        :param scheduled_at: The scheduled_at of this Message.
        :param sent_at: The sent_at of this Message.
        :param status: The status of this Message.
        :param subject: The subject of this Message.
        :param to: The to of this Message.
        :param type: The type of this Message.
        :param updated_at: The updated_at of this Message.
        :param updated_by: The updated_by of this Message.
        :param webhook_url: The webhook_url of this Message.
        """
        self.openapi_types = {
            'body': str,
            'created_at': datetime,
            'created_by': str,
            'custom_mappings': object,
            'direction': str,
            'error': Error,
            '_from': str,
            'id': str,
            'messaging_service_id': str,
            'number_of_media_files': int,
            'number_of_units': int,
            'price': Price,
            'reference': str,
            'scheduled_at': datetime,
            'sent_at': datetime,
            'status': str,
            'subject': str,
            'to': str,
            'type': str,
            'updated_at': datetime,
            'updated_by': str,
            'webhook_url': str
        }

        self.attribute_map = {
            'body': 'body',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_mappings': 'custom_mappings',
            'direction': 'direction',
            'error': 'error',
            '_from': 'from',
            'id': 'id',
            'messaging_service_id': 'messaging_service_id',
            'number_of_media_files': 'number_of_media_files',
            'number_of_units': 'number_of_units',
            'price': 'price',
            'reference': 'reference',
            'scheduled_at': 'scheduled_at',
            'sent_at': 'sent_at',
            'status': 'status',
            'subject': 'subject',
            'to': 'to',
            'type': 'type',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'webhook_url': 'webhook_url'
        }

        self._body = body
        self._created_at = created_at
        self._created_by = created_by
        self._custom_mappings = custom_mappings
        self._direction = direction
        self._error = error
        self.__from = _from
        self._id = id
        self._messaging_service_id = messaging_service_id
        self._number_of_media_files = number_of_media_files
        self._number_of_units = number_of_units
        self._price = price
        self._reference = reference
        self._scheduled_at = scheduled_at
        self._sent_at = sent_at
        self._status = status
        self._subject = subject
        self._to = to
        self._type = type
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._webhook_url = webhook_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Message.

        The message text.

        :return: The body of this Message.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Message.

        The message text.

        :param body: The body of this Message.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")
        if body is not None and len(body) > 1600:
            raise ValueError("Invalid value for `body`, length must be less than or equal to `1600`")

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this Message.

        The date and time when the object was created.

        :return: The created_at of this Message.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Message.

        The date and time when the object was created.

        :param created_at: The created_at of this Message.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Message.

        The user who created the object.

        :return: The created_by of this Message.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Message.

        The user who created the object.

        :param created_by: The created_by of this Message.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Message.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Message.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Message.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Message.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def direction(self):
        """Gets the direction of this Message.

        The direction of the message.

        :return: The direction of this Message.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Message.

        The direction of the message.

        :param direction: The direction of this Message.
        :type direction: str
        """
        allowed_values = ["inbound", "outbound-api", "outbound-call", "outbound-reply", "unknown"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def error(self):
        """Gets the error of this Message.


        :return: The error of this Message.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Message.


        :param error: The error of this Message.
        :type error: Error
        """

        self._error = error

    @property
    def _from(self):
        """Gets the _from of this Message.

        The phone number that initiated the message.

        :return: The _from of this Message.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Message.

        The phone number that initiated the message.

        :param _from: The _from of this Message.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this Message.

        A unique identifier for an object.

        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.

        A unique identifier for an object.

        :param id: The id of this Message.
        :type id: str
        """

        self._id = id

    @property
    def messaging_service_id(self):
        """Gets the messaging_service_id of this Message.

        The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.

        :return: The messaging_service_id of this Message.
        :rtype: str
        """
        return self._messaging_service_id

    @messaging_service_id.setter
    def messaging_service_id(self, messaging_service_id):
        """Sets the messaging_service_id of this Message.

        The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.

        :param messaging_service_id: The messaging_service_id of this Message.
        :type messaging_service_id: str
        """

        self._messaging_service_id = messaging_service_id

    @property
    def number_of_media_files(self):
        """Gets the number_of_media_files of this Message.

        The number of media files associated with the message.

        :return: The number_of_media_files of this Message.
        :rtype: int
        """
        return self._number_of_media_files

    @number_of_media_files.setter
    def number_of_media_files(self, number_of_media_files):
        """Sets the number_of_media_files of this Message.

        The number of media files associated with the message.

        :param number_of_media_files: The number_of_media_files of this Message.
        :type number_of_media_files: int
        """

        self._number_of_media_files = number_of_media_files

    @property
    def number_of_units(self):
        """Gets the number_of_units of this Message.

        The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.

        :return: The number_of_units of this Message.
        :rtype: int
        """
        return self._number_of_units

    @number_of_units.setter
    def number_of_units(self, number_of_units):
        """Sets the number_of_units of this Message.

        The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.

        :param number_of_units: The number_of_units of this Message.
        :type number_of_units: int
        """

        self._number_of_units = number_of_units

    @property
    def price(self):
        """Gets the price of this Message.


        :return: The price of this Message.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Message.


        :param price: The price of this Message.
        :type price: Price
        """

        self._price = price

    @property
    def reference(self):
        """Gets the reference of this Message.

        A client reference.

        :return: The reference of this Message.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Message.

        A client reference.

        :param reference: The reference of this Message.
        :type reference: str
        """

        self._reference = reference

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this Message.

        The scheduled date and time of the message.

        :return: The scheduled_at of this Message.
        :rtype: datetime
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this Message.

        The scheduled date and time of the message.

        :param scheduled_at: The scheduled_at of this Message.
        :type scheduled_at: datetime
        """

        self._scheduled_at = scheduled_at

    @property
    def sent_at(self):
        """Gets the sent_at of this Message.

        The date and time that the message was sent

        :return: The sent_at of this Message.
        :rtype: datetime
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this Message.

        The date and time that the message was sent

        :param sent_at: The sent_at of this Message.
        :type sent_at: datetime
        """

        self._sent_at = sent_at

    @property
    def status(self):
        """Gets the status of this Message.

        Status of the delivery of the message.

        :return: The status of this Message.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Message.

        Status of the delivery of the message.

        :param status: The status of this Message.
        :type status: str
        """
        allowed_values = ["accepted", "scheduled", "canceled", "queued", "sending", "sent", "failed", "delivered", "undelivered", "receiving", "received", "read"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this Message.


        :return: The subject of this Message.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Message.


        :param subject: The subject of this Message.
        :type subject: str
        """

        self._subject = subject

    @property
    def to(self):
        """Gets the to of this Message.

        The phone number that received the message.

        :return: The to of this Message.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Message.

        The phone number that received the message.

        :param to: The to of this Message.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def type(self):
        """Gets the type of this Message.

        Set to sms for SMS messages and mms for MMS messages.

        :return: The type of this Message.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Message.

        Set to sms for SMS messages and mms for MMS messages.

        :param type: The type of this Message.
        :type type: str
        """
        allowed_values = ["sms", "mms"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Message.

        The date and time when the object was last updated.

        :return: The updated_at of this Message.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Message.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Message.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Message.

        The user who last updated the object.

        :return: The updated_by of this Message.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Message.

        The user who last updated the object.

        :param updated_by: The updated_by of this Message.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def webhook_url(self):
        """Gets the webhook_url of this Message.

        Define a webhook to receive delivery notifications.

        :return: The webhook_url of this Message.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this Message.

        Define a webhook to receive delivery notifications.

        :param webhook_url: The webhook_url of this Message.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url
