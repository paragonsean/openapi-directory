# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OpportunitiesFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, monetary_amount: float=None, status: str=None, title: str=None, win_probability: float=None):
        """OpportunitiesFilter - a model defined in OpenAPI

        :param company_id: The company_id of this OpportunitiesFilter.
        :param monetary_amount: The monetary_amount of this OpportunitiesFilter.
        :param status: The status of this OpportunitiesFilter.
        :param title: The title of this OpportunitiesFilter.
        :param win_probability: The win_probability of this OpportunitiesFilter.
        """
        self.openapi_types = {
            'company_id': str,
            'monetary_amount': float,
            'status': str,
            'title': str,
            'win_probability': float
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'monetary_amount': 'monetary_amount',
            'status': 'status',
            'title': 'title',
            'win_probability': 'win_probability'
        }

        self._company_id = company_id
        self._monetary_amount = monetary_amount
        self._status = status
        self._title = title
        self._win_probability = win_probability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpportunitiesFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpportunitiesFilter of this OpportunitiesFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this OpportunitiesFilter.

        Company ID to filter on

        :return: The company_id of this OpportunitiesFilter.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this OpportunitiesFilter.

        Company ID to filter on

        :param company_id: The company_id of this OpportunitiesFilter.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def monetary_amount(self):
        """Gets the monetary_amount of this OpportunitiesFilter.

        Monetary amount to filter on

        :return: The monetary_amount of this OpportunitiesFilter.
        :rtype: float
        """
        return self._monetary_amount

    @monetary_amount.setter
    def monetary_amount(self, monetary_amount):
        """Sets the monetary_amount of this OpportunitiesFilter.

        Monetary amount to filter on

        :param monetary_amount: The monetary_amount of this OpportunitiesFilter.
        :type monetary_amount: float
        """

        self._monetary_amount = monetary_amount

    @property
    def status(self):
        """Gets the status of this OpportunitiesFilter.

        Status to filter on

        :return: The status of this OpportunitiesFilter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OpportunitiesFilter.

        Status to filter on

        :param status: The status of this OpportunitiesFilter.
        :type status: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this OpportunitiesFilter.

        Title of the opportunity to filter on

        :return: The title of this OpportunitiesFilter.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OpportunitiesFilter.

        Title of the opportunity to filter on

        :param title: The title of this OpportunitiesFilter.
        :type title: str
        """

        self._title = title

    @property
    def win_probability(self):
        """Gets the win_probability of this OpportunitiesFilter.

        Win probability to filter on

        :return: The win_probability of this OpportunitiesFilter.
        :rtype: float
        """
        return self._win_probability

    @win_probability.setter
    def win_probability(self, win_probability):
        """Sets the win_probability of this OpportunitiesFilter.

        Win probability to filter on

        :param win_probability: The win_probability of this OpportunitiesFilter.
        :type win_probability: float
        """

        self._win_probability = win_probability
