# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.pipeline_stages_inner import PipelineStagesInner
from openapi_server import util


class Pipeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, archived: bool=None, created_at: datetime=None, currency: Currency=None, display_order: int=None, id: str=None, name: str=None, stages: List[PipelineStagesInner]=None, updated_at: datetime=None, win_probability_enabled: bool=None):
        """Pipeline - a model defined in OpenAPI

        :param active: The active of this Pipeline.
        :param archived: The archived of this Pipeline.
        :param created_at: The created_at of this Pipeline.
        :param currency: The currency of this Pipeline.
        :param display_order: The display_order of this Pipeline.
        :param id: The id of this Pipeline.
        :param name: The name of this Pipeline.
        :param stages: The stages of this Pipeline.
        :param updated_at: The updated_at of this Pipeline.
        :param win_probability_enabled: The win_probability_enabled of this Pipeline.
        """
        self.openapi_types = {
            'active': bool,
            'archived': bool,
            'created_at': datetime,
            'currency': Currency,
            'display_order': int,
            'id': str,
            'name': str,
            'stages': List[PipelineStagesInner],
            'updated_at': datetime,
            'win_probability_enabled': bool
        }

        self.attribute_map = {
            'active': 'active',
            'archived': 'archived',
            'created_at': 'created_at',
            'currency': 'currency',
            'display_order': 'display_order',
            'id': 'id',
            'name': 'name',
            'stages': 'stages',
            'updated_at': 'updated_at',
            'win_probability_enabled': 'win_probability_enabled'
        }

        self._active = active
        self._archived = archived
        self._created_at = created_at
        self._currency = currency
        self._display_order = display_order
        self._id = id
        self._name = name
        self._stages = stages
        self._updated_at = updated_at
        self._win_probability_enabled = win_probability_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pipeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pipeline of this Pipeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Pipeline.

        Whether the Pipeline is active or not.

        :return: The active of this Pipeline.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Pipeline.

        Whether the Pipeline is active or not.

        :param active: The active of this Pipeline.
        :type active: bool
        """

        self._active = active

    @property
    def archived(self):
        """Gets the archived of this Pipeline.

        Whether the Pipeline is archived or not.

        :return: The archived of this Pipeline.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Pipeline.

        Whether the Pipeline is archived or not.

        :param archived: The archived of this Pipeline.
        :type archived: bool
        """

        self._archived = archived

    @property
    def created_at(self):
        """Gets the created_at of this Pipeline.

        The date and time when the object was created.

        :return: The created_at of this Pipeline.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Pipeline.

        The date and time when the object was created.

        :param created_at: The created_at of this Pipeline.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this Pipeline.


        :return: The currency of this Pipeline.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Pipeline.


        :param currency: The currency of this Pipeline.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def display_order(self):
        """Gets the display_order of this Pipeline.

        The order in which the Pipeline is displayed in the UI.

        :return: The display_order of this Pipeline.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this Pipeline.

        The order in which the Pipeline is displayed in the UI.

        :param display_order: The display_order of this Pipeline.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def id(self):
        """Gets the id of this Pipeline.

        The unique identifier of the Pipeline.

        :return: The id of this Pipeline.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pipeline.

        The unique identifier of the Pipeline.

        :param id: The id of this Pipeline.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Pipeline.

        The name of the Pipeline.

        :return: The name of this Pipeline.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pipeline.

        The name of the Pipeline.

        :param name: The name of this Pipeline.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def stages(self):
        """Gets the stages of this Pipeline.

        The Pipeline Stages.

        :return: The stages of this Pipeline.
        :rtype: List[PipelineStagesInner]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this Pipeline.

        The Pipeline Stages.

        :param stages: The stages of this Pipeline.
        :type stages: List[PipelineStagesInner]
        """

        self._stages = stages

    @property
    def updated_at(self):
        """Gets the updated_at of this Pipeline.

        The date and time when the object was last updated.

        :return: The updated_at of this Pipeline.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Pipeline.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Pipeline.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def win_probability_enabled(self):
        """Gets the win_probability_enabled of this Pipeline.

        Whether the Pipeline has win probability enabled or not.

        :return: The win_probability_enabled of this Pipeline.
        :rtype: bool
        """
        return self._win_probability_enabled

    @win_probability_enabled.setter
    def win_probability_enabled(self, win_probability_enabled):
        """Sets the win_probability_enabled of this Pipeline.

        Whether the Pipeline has win probability enabled or not.

        :param win_probability_enabled: The win_probability_enabled of this Pipeline.
        :type win_probability_enabled: bool
        """

        self._win_probability_enabled = win_probability_enabled
