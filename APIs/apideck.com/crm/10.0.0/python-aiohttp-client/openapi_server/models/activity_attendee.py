# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityAttendee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, created_at: datetime=None, email_address: str=None, first_name: str=None, id: str=None, is_organizer: bool=None, last_name: str=None, middle_name: str=None, name: str=None, prefix: str=None, status: str=None, suffix: str=None, updated_at: datetime=None, user_id: str=None):
        """ActivityAttendee - a model defined in OpenAPI

        :param contact_id: The contact_id of this ActivityAttendee.
        :param created_at: The created_at of this ActivityAttendee.
        :param email_address: The email_address of this ActivityAttendee.
        :param first_name: The first_name of this ActivityAttendee.
        :param id: The id of this ActivityAttendee.
        :param is_organizer: The is_organizer of this ActivityAttendee.
        :param last_name: The last_name of this ActivityAttendee.
        :param middle_name: The middle_name of this ActivityAttendee.
        :param name: The name of this ActivityAttendee.
        :param prefix: The prefix of this ActivityAttendee.
        :param status: The status of this ActivityAttendee.
        :param suffix: The suffix of this ActivityAttendee.
        :param updated_at: The updated_at of this ActivityAttendee.
        :param user_id: The user_id of this ActivityAttendee.
        """
        self.openapi_types = {
            'contact_id': str,
            'created_at': datetime,
            'email_address': str,
            'first_name': str,
            'id': str,
            'is_organizer': bool,
            'last_name': str,
            'middle_name': str,
            'name': str,
            'prefix': str,
            'status': str,
            'suffix': str,
            'updated_at': datetime,
            'user_id': str
        }

        self.attribute_map = {
            'contact_id': 'contact_id',
            'created_at': 'created_at',
            'email_address': 'email_address',
            'first_name': 'first_name',
            'id': 'id',
            'is_organizer': 'is_organizer',
            'last_name': 'last_name',
            'middle_name': 'middle_name',
            'name': 'name',
            'prefix': 'prefix',
            'status': 'status',
            'suffix': 'suffix',
            'updated_at': 'updated_at',
            'user_id': 'user_id'
        }

        self._contact_id = contact_id
        self._created_at = created_at
        self._email_address = email_address
        self._first_name = first_name
        self._id = id
        self._is_organizer = is_organizer
        self._last_name = last_name
        self._middle_name = middle_name
        self._name = name
        self._prefix = prefix
        self._status = status
        self._suffix = suffix
        self._updated_at = updated_at
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityAttendee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityAttendee of this ActivityAttendee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this ActivityAttendee.

        The identifier for a related contact

        :return: The contact_id of this ActivityAttendee.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this ActivityAttendee.

        The identifier for a related contact

        :param contact_id: The contact_id of this ActivityAttendee.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def created_at(self):
        """Gets the created_at of this ActivityAttendee.

        The time the attendee was created (ISO 8601)

        :return: The created_at of this ActivityAttendee.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActivityAttendee.

        The time the attendee was created (ISO 8601)

        :param created_at: The created_at of this ActivityAttendee.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def email_address(self):
        """Gets the email_address of this ActivityAttendee.

        Email address of the attendee

        :return: The email_address of this ActivityAttendee.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this ActivityAttendee.

        Email address of the attendee

        :param email_address: The email_address of this ActivityAttendee.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this ActivityAttendee.

        First name of the attendee

        :return: The first_name of this ActivityAttendee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ActivityAttendee.

        First name of the attendee

        :param first_name: The first_name of this ActivityAttendee.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this ActivityAttendee.

        Unique identifier for the attendee

        :return: The id of this ActivityAttendee.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityAttendee.

        Unique identifier for the attendee

        :param id: The id of this ActivityAttendee.
        :type id: str
        """

        self._id = id

    @property
    def is_organizer(self):
        """Gets the is_organizer of this ActivityAttendee.

        Whether the attendee is the organizer of the activity

        :return: The is_organizer of this ActivityAttendee.
        :rtype: bool
        """
        return self._is_organizer

    @is_organizer.setter
    def is_organizer(self, is_organizer):
        """Sets the is_organizer of this ActivityAttendee.

        Whether the attendee is the organizer of the activity

        :param is_organizer: The is_organizer of this ActivityAttendee.
        :type is_organizer: bool
        """

        self._is_organizer = is_organizer

    @property
    def last_name(self):
        """Gets the last_name of this ActivityAttendee.

        Last name of the attendee

        :return: The last_name of this ActivityAttendee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ActivityAttendee.

        Last name of the attendee

        :param last_name: The last_name of this ActivityAttendee.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this ActivityAttendee.

        Middle name of the attendee

        :return: The middle_name of this ActivityAttendee.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this ActivityAttendee.

        Middle name of the attendee

        :param middle_name: The middle_name of this ActivityAttendee.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def name(self):
        """Gets the name of this ActivityAttendee.

        Full name of the attendee

        :return: The name of this ActivityAttendee.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityAttendee.

        Full name of the attendee

        :param name: The name of this ActivityAttendee.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def prefix(self):
        """Gets the prefix of this ActivityAttendee.

        Prefix of the attendee

        :return: The prefix of this ActivityAttendee.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ActivityAttendee.

        Prefix of the attendee

        :param prefix: The prefix of this ActivityAttendee.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def status(self):
        """Gets the status of this ActivityAttendee.

        Status of the attendee

        :return: The status of this ActivityAttendee.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActivityAttendee.

        Status of the attendee

        :param status: The status of this ActivityAttendee.
        :type status: str
        """
        allowed_values = [None,"accepted", "tentative", "declined"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def suffix(self):
        """Gets the suffix of this ActivityAttendee.

        Suffix of the attendee

        :return: The suffix of this ActivityAttendee.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this ActivityAttendee.

        Suffix of the attendee

        :param suffix: The suffix of this ActivityAttendee.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def updated_at(self):
        """Gets the updated_at of this ActivityAttendee.

        The last time the attendee was updated (ISO 8601)

        :return: The updated_at of this ActivityAttendee.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ActivityAttendee.

        The last time the attendee was updated (ISO 8601)

        :param updated_at: The updated_at of this ActivityAttendee.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this ActivityAttendee.

        The identifier for a related user

        :return: The user_id of this ActivityAttendee.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ActivityAttendee.

        The identifier for a related user

        :param user_id: The user_id of this ActivityAttendee.
        :type user_id: str
        """

        self._user_id = user_id
