# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort_direction import SortDirection
from openapi_server import util


class ContactsSort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, by: str=None, direction: SortDirection=SortDirection.ASC):
        """ContactsSort - a model defined in OpenAPI

        :param by: The by of this ContactsSort.
        :param direction: The direction of this ContactsSort.
        """
        self.openapi_types = {
            'by': str,
            'direction': SortDirection
        }

        self.attribute_map = {
            'by': 'by',
            'direction': 'direction'
        }

        self._by = by
        self._direction = direction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactsSort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactsSort of this ContactsSort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def by(self):
        """Gets the by of this ContactsSort.

        The field on which to sort the Contacts

        :return: The by of this ContactsSort.
        :rtype: str
        """
        return self._by

    @by.setter
    def by(self, by):
        """Sets the by of this ContactsSort.

        The field on which to sort the Contacts

        :param by: The by of this ContactsSort.
        :type by: str
        """
        allowed_values = ["created_at", "updated_at", "name", "first_name", "last_name", "email"]  # noqa: E501
        if by not in allowed_values:
            raise ValueError(
                "Invalid value for `by` ({0}), must be one of {1}"
                .format(by, allowed_values)
            )

        self._by = by

    @property
    def direction(self):
        """Gets the direction of this ContactsSort.


        :return: The direction of this ContactsSort.
        :rtype: SortDirection
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ContactsSort.


        :param direction: The direction of this ContactsSort.
        :type direction: SortDirection
        """

        self._direction = direction
