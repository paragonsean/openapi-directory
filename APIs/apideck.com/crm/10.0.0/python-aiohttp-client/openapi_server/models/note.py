# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, company_id: str=None, contact_id: str=None, content: str=None, created_at: str=None, created_by: str=None, custom_mappings: object=None, id: str=None, lead_id: str=None, opportunity_id: str=None, owner_id: str=None, title: str=None, updated_at: str=None, updated_by: str=None):
        """Note - a model defined in OpenAPI

        :param active: The active of this Note.
        :param company_id: The company_id of this Note.
        :param contact_id: The contact_id of this Note.
        :param content: The content of this Note.
        :param created_at: The created_at of this Note.
        :param created_by: The created_by of this Note.
        :param custom_mappings: The custom_mappings of this Note.
        :param id: The id of this Note.
        :param lead_id: The lead_id of this Note.
        :param opportunity_id: The opportunity_id of this Note.
        :param owner_id: The owner_id of this Note.
        :param title: The title of this Note.
        :param updated_at: The updated_at of this Note.
        :param updated_by: The updated_by of this Note.
        """
        self.openapi_types = {
            'active': bool,
            'company_id': str,
            'contact_id': str,
            'content': str,
            'created_at': str,
            'created_by': str,
            'custom_mappings': object,
            'id': str,
            'lead_id': str,
            'opportunity_id': str,
            'owner_id': str,
            'title': str,
            'updated_at': str,
            'updated_by': str
        }

        self.attribute_map = {
            'active': 'active',
            'company_id': 'company_id',
            'contact_id': 'contact_id',
            'content': 'content',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_mappings': 'custom_mappings',
            'id': 'id',
            'lead_id': 'lead_id',
            'opportunity_id': 'opportunity_id',
            'owner_id': 'owner_id',
            'title': 'title',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._active = active
        self._company_id = company_id
        self._contact_id = contact_id
        self._content = content
        self._created_at = created_at
        self._created_by = created_by
        self._custom_mappings = custom_mappings
        self._id = id
        self._lead_id = lead_id
        self._opportunity_id = opportunity_id
        self._owner_id = owner_id
        self._title = title
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note of this Note.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Note.

        Whether the Note is active or not.

        :return: The active of this Note.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Note.

        Whether the Note is active or not.

        :param active: The active of this Note.
        :type active: bool
        """

        self._active = active

    @property
    def company_id(self):
        """Gets the company_id of this Note.

        The company that is related to the note.

        :return: The company_id of this Note.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Note.

        The company that is related to the note.

        :param company_id: The company_id of this Note.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def contact_id(self):
        """Gets the contact_id of this Note.

        The contact that is related to the note.

        :return: The contact_id of this Note.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this Note.

        The contact that is related to the note.

        :param contact_id: The contact_id of this Note.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def content(self):
        """Gets the content of this Note.

        The content of the note.

        :return: The content of this Note.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Note.

        The content of the note.

        :param content: The content of this Note.
        :type content: str
        """

        self._content = content

    @property
    def created_at(self):
        """Gets the created_at of this Note.

        The timestamp when the note was created

        :return: The created_at of this Note.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Note.

        The timestamp when the note was created

        :param created_at: The created_at of this Note.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Note.

        The user that created the note.

        :return: The created_by of this Note.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Note.

        The user that created the note.

        :param created_by: The created_by of this Note.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Note.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Note.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Note.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Note.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def id(self):
        """Gets the id of this Note.

        The unique identifier of the note

        :return: The id of this Note.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Note.

        The unique identifier of the note

        :param id: The id of this Note.
        :type id: str
        """

        self._id = id

    @property
    def lead_id(self):
        """Gets the lead_id of this Note.

        The lead that is related to the note.

        :return: The lead_id of this Note.
        :rtype: str
        """
        return self._lead_id

    @lead_id.setter
    def lead_id(self, lead_id):
        """Sets the lead_id of this Note.

        The lead that is related to the note.

        :param lead_id: The lead_id of this Note.
        :type lead_id: str
        """

        self._lead_id = lead_id

    @property
    def opportunity_id(self):
        """Gets the opportunity_id of this Note.

        The opportunity that is related to the note.

        :return: The opportunity_id of this Note.
        :rtype: str
        """
        return self._opportunity_id

    @opportunity_id.setter
    def opportunity_id(self, opportunity_id):
        """Sets the opportunity_id of this Note.

        The opportunity that is related to the note.

        :param opportunity_id: The opportunity_id of this Note.
        :type opportunity_id: str
        """

        self._opportunity_id = opportunity_id

    @property
    def owner_id(self):
        """Gets the owner_id of this Note.

        The user that owns the note.

        :return: The owner_id of this Note.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Note.

        The user that owns the note.

        :param owner_id: The owner_id of this Note.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def title(self):
        """Gets the title of this Note.

        The title of the note

        :return: The title of this Note.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Note.

        The title of the note

        :param title: The title of this Note.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Note.

        The timestamp when the note was last updated

        :return: The updated_at of this Note.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Note.

        The timestamp when the note was last updated

        :param updated_at: The updated_at of this Note.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Note.

        The user that last updated the note.

        :return: The updated_by of this Note.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Note.

        The user that last updated the note.

        :param updated_by: The updated_by of this Note.
        :type updated_by: str
        """

        self._updated_by = updated_by
