# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.email import Email
from openapi_server.models.phone_number import PhoneNumber
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[Address]=None, company_name: str=None, created_at: str=None, custom_mappings: object=None, department: str=None, description: str=None, division: str=None, emails: List[Email]=None, employee_number: str=None, first_name: str=None, id: str=None, image: str=None, language: str=None, last_name: str=None, parent_id: str=None, password: str=None, phone_numbers: List[PhoneNumber]=None, status: str=None, title: str=None, updated_at: str=None, username: str=None):
        """User - a model defined in OpenAPI

        :param addresses: The addresses of this User.
        :param company_name: The company_name of this User.
        :param created_at: The created_at of this User.
        :param custom_mappings: The custom_mappings of this User.
        :param department: The department of this User.
        :param description: The description of this User.
        :param division: The division of this User.
        :param emails: The emails of this User.
        :param employee_number: The employee_number of this User.
        :param first_name: The first_name of this User.
        :param id: The id of this User.
        :param image: The image of this User.
        :param language: The language of this User.
        :param last_name: The last_name of this User.
        :param parent_id: The parent_id of this User.
        :param password: The password of this User.
        :param phone_numbers: The phone_numbers of this User.
        :param status: The status of this User.
        :param title: The title of this User.
        :param updated_at: The updated_at of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'addresses': List[Address],
            'company_name': str,
            'created_at': str,
            'custom_mappings': object,
            'department': str,
            'description': str,
            'division': str,
            'emails': List[Email],
            'employee_number': str,
            'first_name': str,
            'id': str,
            'image': str,
            'language': str,
            'last_name': str,
            'parent_id': str,
            'password': str,
            'phone_numbers': List[PhoneNumber],
            'status': str,
            'title': str,
            'updated_at': str,
            'username': str
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'company_name': 'company_name',
            'created_at': 'created_at',
            'custom_mappings': 'custom_mappings',
            'department': 'department',
            'description': 'description',
            'division': 'division',
            'emails': 'emails',
            'employee_number': 'employee_number',
            'first_name': 'first_name',
            'id': 'id',
            'image': 'image',
            'language': 'language',
            'last_name': 'last_name',
            'parent_id': 'parent_id',
            'password': 'password',
            'phone_numbers': 'phone_numbers',
            'status': 'status',
            'title': 'title',
            'updated_at': 'updated_at',
            'username': 'username'
        }

        self._addresses = addresses
        self._company_name = company_name
        self._created_at = created_at
        self._custom_mappings = custom_mappings
        self._department = department
        self._description = description
        self._division = division
        self._emails = emails
        self._employee_number = employee_number
        self._first_name = first_name
        self._id = id
        self._image = image
        self._language = language
        self._last_name = last_name
        self._parent_id = parent_id
        self._password = password
        self._phone_numbers = phone_numbers
        self._status = status
        self._title = title
        self._updated_at = updated_at
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this User.


        :return: The addresses of this User.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this User.


        :param addresses: The addresses of this User.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def company_name(self):
        """Gets the company_name of this User.

        The name of the company.

        :return: The company_name of this User.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this User.

        The name of the company.

        :param company_name: The company_name of this User.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def created_at(self):
        """Gets the created_at of this User.

        The date and time when the user was created.

        :return: The created_at of this User.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        The date and time when the user was created.

        :param created_at: The created_at of this User.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this User.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this User.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this User.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this User.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def department(self):
        """Gets the department of this User.

        The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.

        :return: The department of this User.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this User.

        The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.

        :param department: The department of this User.
        :type department: str
        """

        self._department = department

    @property
    def description(self):
        """Gets the description of this User.

        A description of the object.

        :return: The description of this User.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this User.

        A description of the object.

        :param description: The description of this User.
        :type description: str
        """

        self._description = description

    @property
    def division(self):
        """Gets the division of this User.

        The division the person is currently in. Usually a collection of departments or teams or regions.

        :return: The division of this User.
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this User.

        The division the person is currently in. Usually a collection of departments or teams or regions.

        :param division: The division of this User.
        :type division: str
        """

        self._division = division

    @property
    def emails(self):
        """Gets the emails of this User.


        :return: The emails of this User.
        :rtype: List[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this User.


        :param emails: The emails of this User.
        :type emails: List[Email]
        """
        if emails is None:
            raise ValueError("Invalid value for `emails`, must not be `None`")

        self._emails = emails

    @property
    def employee_number(self):
        """Gets the employee_number of this User.

        An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.

        :return: The employee_number of this User.
        :rtype: str
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this User.

        An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.

        :param employee_number: The employee_number of this User.
        :type employee_number: str
        """

        self._employee_number = employee_number

    @property
    def first_name(self):
        """Gets the first_name of this User.

        The first name of the person.

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        The first name of the person.

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this User.

        The unique identifier for the user

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The unique identifier for the user

        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this User.

        The URL of the user's avatar

        :return: The image of this User.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this User.

        The URL of the user's avatar

        :param image: The image of this User.
        :type image: str
        """

        self._image = image

    @property
    def language(self):
        """Gets the language of this User.

        language code according to ISO 639-1. For the United States - EN

        :return: The language of this User.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this User.

        language code according to ISO 639-1. For the United States - EN

        :param language: The language of this User.
        :type language: str
        """

        self._language = language

    @property
    def last_name(self):
        """Gets the last_name of this User.

        The last name of the person.

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        The last name of the person.

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def parent_id(self):
        """Gets the parent_id of this User.

        The parent user id

        :return: The parent_id of this User.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this User.

        The parent user id

        :param parent_id: The parent_id of this User.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def password(self):
        """Gets the password of this User.

        The password of the user

        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.

        The password of the user

        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this User.


        :return: The phone_numbers of this User.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this User.


        :param phone_numbers: The phone_numbers of this User.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def status(self):
        """Gets the status of this User.

        The status of the user

        :return: The status of this User.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        The status of the user

        :param status: The status of this User.
        :type status: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this User.

        The job title of the person.

        :return: The title of this User.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this User.

        The job title of the person.

        :param title: The title of this User.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this User.

        The date and time when the user was last updated.

        :return: The updated_at of this User.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.

        The date and time when the user was last updated.

        :param updated_at: The updated_at of this User.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def username(self):
        """Gets the username of this User.

        The username of the user

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        The username of the user

        :param username: The username of this User.
        :type username: str
        """

        self._username = username
