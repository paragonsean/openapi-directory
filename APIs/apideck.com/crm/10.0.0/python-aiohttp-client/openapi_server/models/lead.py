# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.currency import Currency
from openapi_server.models.custom_field import CustomField
from openapi_server.models.email import Email
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.social_link import SocialLink
from openapi_server.models.website import Website
import re
from openapi_server import util


class Lead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[Address]=None, company_id: str=None, company_name: str=None, created_at: str=None, currency: Currency=None, custom_fields: List[CustomField]=None, custom_mappings: object=None, description: str=None, emails: List[Email]=None, fax: str=None, first_name: str=None, id: str=None, language: str=None, last_name: str=None, lead_id: str=None, lead_source: str=None, monetary_amount: float=None, name: str=None, owner_id: str=None, phone_numbers: List[PhoneNumber]=None, prefix: str=None, social_links: List[SocialLink]=None, status: str=None, tags: List[str]=None, title: str=None, updated_at: str=None, websites: List[Website]=None):
        """Lead - a model defined in OpenAPI

        :param addresses: The addresses of this Lead.
        :param company_id: The company_id of this Lead.
        :param company_name: The company_name of this Lead.
        :param created_at: The created_at of this Lead.
        :param currency: The currency of this Lead.
        :param custom_fields: The custom_fields of this Lead.
        :param custom_mappings: The custom_mappings of this Lead.
        :param description: The description of this Lead.
        :param emails: The emails of this Lead.
        :param fax: The fax of this Lead.
        :param first_name: The first_name of this Lead.
        :param id: The id of this Lead.
        :param language: The language of this Lead.
        :param last_name: The last_name of this Lead.
        :param lead_id: The lead_id of this Lead.
        :param lead_source: The lead_source of this Lead.
        :param monetary_amount: The monetary_amount of this Lead.
        :param name: The name of this Lead.
        :param owner_id: The owner_id of this Lead.
        :param phone_numbers: The phone_numbers of this Lead.
        :param prefix: The prefix of this Lead.
        :param social_links: The social_links of this Lead.
        :param status: The status of this Lead.
        :param tags: The tags of this Lead.
        :param title: The title of this Lead.
        :param updated_at: The updated_at of this Lead.
        :param websites: The websites of this Lead.
        """
        self.openapi_types = {
            'addresses': List[Address],
            'company_id': str,
            'company_name': str,
            'created_at': str,
            'currency': Currency,
            'custom_fields': List[CustomField],
            'custom_mappings': object,
            'description': str,
            'emails': List[Email],
            'fax': str,
            'first_name': str,
            'id': str,
            'language': str,
            'last_name': str,
            'lead_id': str,
            'lead_source': str,
            'monetary_amount': float,
            'name': str,
            'owner_id': str,
            'phone_numbers': List[PhoneNumber],
            'prefix': str,
            'social_links': List[SocialLink],
            'status': str,
            'tags': List[str],
            'title': str,
            'updated_at': str,
            'websites': List[Website]
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'company_id': 'company_id',
            'company_name': 'company_name',
            'created_at': 'created_at',
            'currency': 'currency',
            'custom_fields': 'custom_fields',
            'custom_mappings': 'custom_mappings',
            'description': 'description',
            'emails': 'emails',
            'fax': 'fax',
            'first_name': 'first_name',
            'id': 'id',
            'language': 'language',
            'last_name': 'last_name',
            'lead_id': 'lead_id',
            'lead_source': 'lead_source',
            'monetary_amount': 'monetary_amount',
            'name': 'name',
            'owner_id': 'owner_id',
            'phone_numbers': 'phone_numbers',
            'prefix': 'prefix',
            'social_links': 'social_links',
            'status': 'status',
            'tags': 'tags',
            'title': 'title',
            'updated_at': 'updated_at',
            'websites': 'websites'
        }

        self._addresses = addresses
        self._company_id = company_id
        self._company_name = company_name
        self._created_at = created_at
        self._currency = currency
        self._custom_fields = custom_fields
        self._custom_mappings = custom_mappings
        self._description = description
        self._emails = emails
        self._fax = fax
        self._first_name = first_name
        self._id = id
        self._language = language
        self._last_name = last_name
        self._lead_id = lead_id
        self._lead_source = lead_source
        self._monetary_amount = monetary_amount
        self._name = name
        self._owner_id = owner_id
        self._phone_numbers = phone_numbers
        self._prefix = prefix
        self._social_links = social_links
        self._status = status
        self._tags = tags
        self._title = title
        self._updated_at = updated_at
        self._websites = websites

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Lead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Lead of this Lead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this Lead.


        :return: The addresses of this Lead.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Lead.


        :param addresses: The addresses of this Lead.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def company_id(self):
        """Gets the company_id of this Lead.

        The company the lead is associated with.

        :return: The company_id of this Lead.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Lead.

        The company the lead is associated with.

        :param company_id: The company_id of this Lead.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def company_name(self):
        """Gets the company_name of this Lead.

        The name of the company the lead is associated with.

        :return: The company_name of this Lead.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Lead.

        The name of the company the lead is associated with.

        :param company_name: The company_name of this Lead.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")

        self._company_name = company_name

    @property
    def created_at(self):
        """Gets the created_at of this Lead.

        Date created in ISO 8601 format

        :return: The created_at of this Lead.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Lead.

        Date created in ISO 8601 format

        :param created_at: The created_at of this Lead.
        :type created_at: str
        """
        if created_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$', created_at):
            raise ValueError("Invalid value for `created_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this Lead.


        :return: The currency of this Lead.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Lead.


        :param currency: The currency of this Lead.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Lead.


        :return: The custom_fields of this Lead.
        :rtype: List[CustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Lead.


        :param custom_fields: The custom_fields of this Lead.
        :type custom_fields: List[CustomField]
        """

        self._custom_fields = custom_fields

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Lead.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Lead.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Lead.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Lead.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def description(self):
        """Gets the description of this Lead.

        The description of the lead.

        :return: The description of this Lead.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Lead.

        The description of the lead.

        :param description: The description of this Lead.
        :type description: str
        """

        self._description = description

    @property
    def emails(self):
        """Gets the emails of this Lead.


        :return: The emails of this Lead.
        :rtype: List[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Lead.


        :param emails: The emails of this Lead.
        :type emails: List[Email]
        """

        self._emails = emails

    @property
    def fax(self):
        """Gets the fax of this Lead.

        The fax number of the lead.

        :return: The fax of this Lead.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Lead.

        The fax number of the lead.

        :param fax: The fax of this Lead.
        :type fax: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this Lead.

        The first name of the lead.

        :return: The first_name of this Lead.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Lead.

        The first name of the lead.

        :param first_name: The first_name of this Lead.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Lead.

        Unique identifier for the contact.

        :return: The id of this Lead.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lead.

        Unique identifier for the contact.

        :param id: The id of this Lead.
        :type id: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this Lead.

        language code according to ISO 639-1. For the United States - EN

        :return: The language of this Lead.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Lead.

        language code according to ISO 639-1. For the United States - EN

        :param language: The language of this Lead.
        :type language: str
        """

        self._language = language

    @property
    def last_name(self):
        """Gets the last_name of this Lead.

        The last name of the lead.

        :return: The last_name of this Lead.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Lead.

        The last name of the lead.

        :param last_name: The last_name of this Lead.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def lead_id(self):
        """Gets the lead_id of this Lead.

        The identifier of the lead.

        :return: The lead_id of this Lead.
        :rtype: str
        """
        return self._lead_id

    @lead_id.setter
    def lead_id(self, lead_id):
        """Sets the lead_id of this Lead.

        The identifier of the lead.

        :param lead_id: The lead_id of this Lead.
        :type lead_id: str
        """

        self._lead_id = lead_id

    @property
    def lead_source(self):
        """Gets the lead_source of this Lead.

        The source of the lead.

        :return: The lead_source of this Lead.
        :rtype: str
        """
        return self._lead_source

    @lead_source.setter
    def lead_source(self, lead_source):
        """Sets the lead_source of this Lead.

        The source of the lead.

        :param lead_source: The lead_source of this Lead.
        :type lead_source: str
        """

        self._lead_source = lead_source

    @property
    def monetary_amount(self):
        """Gets the monetary_amount of this Lead.

        The monetary amount of the lead.

        :return: The monetary_amount of this Lead.
        :rtype: float
        """
        return self._monetary_amount

    @monetary_amount.setter
    def monetary_amount(self, monetary_amount):
        """Sets the monetary_amount of this Lead.

        The monetary amount of the lead.

        :param monetary_amount: The monetary_amount of this Lead.
        :type monetary_amount: float
        """

        self._monetary_amount = monetary_amount

    @property
    def name(self):
        """Gets the name of this Lead.

        Full name of the lead.

        :return: The name of this Lead.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Lead.

        Full name of the lead.

        :param name: The name of this Lead.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this Lead.

        The owner of the lead.

        :return: The owner_id of this Lead.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Lead.

        The owner of the lead.

        :param owner_id: The owner_id of this Lead.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Lead.


        :return: The phone_numbers of this Lead.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Lead.


        :param phone_numbers: The phone_numbers of this Lead.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def prefix(self):
        """Gets the prefix of this Lead.

        The prefix of the lead.

        :return: The prefix of this Lead.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Lead.

        The prefix of the lead.

        :param prefix: The prefix of this Lead.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def social_links(self):
        """Gets the social_links of this Lead.


        :return: The social_links of this Lead.
        :rtype: List[SocialLink]
        """
        return self._social_links

    @social_links.setter
    def social_links(self, social_links):
        """Sets the social_links of this Lead.


        :param social_links: The social_links of this Lead.
        :type social_links: List[SocialLink]
        """

        self._social_links = social_links

    @property
    def status(self):
        """Gets the status of this Lead.


        :return: The status of this Lead.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Lead.


        :param status: The status of this Lead.
        :type status: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Lead.


        :return: The tags of this Lead.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Lead.


        :param tags: The tags of this Lead.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Lead.

        The job title of the lead.

        :return: The title of this Lead.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Lead.

        The job title of the lead.

        :param title: The title of this Lead.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Lead.

        Date updated in ISO 8601 format

        :return: The updated_at of this Lead.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Lead.

        Date updated in ISO 8601 format

        :param updated_at: The updated_at of this Lead.
        :type updated_at: str
        """
        if updated_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$', updated_at):
            raise ValueError("Invalid value for `updated_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/`")

        self._updated_at = updated_at

    @property
    def websites(self):
        """Gets the websites of this Lead.


        :return: The websites of this Lead.
        :rtype: List[Website]
        """
        return self._websites

    @websites.setter
    def websites(self, websites):
        """Sets the websites of this Lead.


        :param websites: The websites of this Lead.
        :type websites: List[Website]
        """

        self._websites = websites
