# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_attendee import ActivityAttendee
from openapi_server.models.address import Address
from openapi_server.models.custom_field import CustomField
from openapi_server import util


class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, activity_date: str=None, activity_datetime: str=None, all_day_event: bool=None, archived: bool=None, asset_id: str=None, attendees: List[ActivityAttendee]=None, campaign_id: str=None, case_id: str=None, child: bool=None, company_id: str=None, contact_id: str=None, contract_id: str=None, created_at: str=None, created_by: str=None, custom_fields: List[CustomField]=None, custom_mappings: object=None, custom_object_id: str=None, deleted: bool=None, description: str=None, done: bool=None, downstream_id: str=None, duration_minutes: int=None, duration_seconds: int=None, end_date: str=None, end_datetime: str=None, event_sub_type: str=None, group_event: bool=None, group_event_type: str=None, id: str=None, lead_id: str=None, location: str=None, location_address: Address=None, note: str=None, opportunity_id: str=None, owner_id: str=None, private: bool=None, product_id: str=None, recurrent: bool=None, reminder_datetime: str=None, reminder_set: bool=None, show_as: str=None, solution_id: str=None, start_datetime: str=None, title: str=None, type: str=None, updated_at: str=None, updated_by: str=None, user_id: str=None, video_conference_id: str=None, video_conference_url: str=None):
        """Activity - a model defined in OpenAPI

        :param account_id: The account_id of this Activity.
        :param activity_date: The activity_date of this Activity.
        :param activity_datetime: The activity_datetime of this Activity.
        :param all_day_event: The all_day_event of this Activity.
        :param archived: The archived of this Activity.
        :param asset_id: The asset_id of this Activity.
        :param attendees: The attendees of this Activity.
        :param campaign_id: The campaign_id of this Activity.
        :param case_id: The case_id of this Activity.
        :param child: The child of this Activity.
        :param company_id: The company_id of this Activity.
        :param contact_id: The contact_id of this Activity.
        :param contract_id: The contract_id of this Activity.
        :param created_at: The created_at of this Activity.
        :param created_by: The created_by of this Activity.
        :param custom_fields: The custom_fields of this Activity.
        :param custom_mappings: The custom_mappings of this Activity.
        :param custom_object_id: The custom_object_id of this Activity.
        :param deleted: The deleted of this Activity.
        :param description: The description of this Activity.
        :param done: The done of this Activity.
        :param downstream_id: The downstream_id of this Activity.
        :param duration_minutes: The duration_minutes of this Activity.
        :param duration_seconds: The duration_seconds of this Activity.
        :param end_date: The end_date of this Activity.
        :param end_datetime: The end_datetime of this Activity.
        :param event_sub_type: The event_sub_type of this Activity.
        :param group_event: The group_event of this Activity.
        :param group_event_type: The group_event_type of this Activity.
        :param id: The id of this Activity.
        :param lead_id: The lead_id of this Activity.
        :param location: The location of this Activity.
        :param location_address: The location_address of this Activity.
        :param note: The note of this Activity.
        :param opportunity_id: The opportunity_id of this Activity.
        :param owner_id: The owner_id of this Activity.
        :param private: The private of this Activity.
        :param product_id: The product_id of this Activity.
        :param recurrent: The recurrent of this Activity.
        :param reminder_datetime: The reminder_datetime of this Activity.
        :param reminder_set: The reminder_set of this Activity.
        :param show_as: The show_as of this Activity.
        :param solution_id: The solution_id of this Activity.
        :param start_datetime: The start_datetime of this Activity.
        :param title: The title of this Activity.
        :param type: The type of this Activity.
        :param updated_at: The updated_at of this Activity.
        :param updated_by: The updated_by of this Activity.
        :param user_id: The user_id of this Activity.
        :param video_conference_id: The video_conference_id of this Activity.
        :param video_conference_url: The video_conference_url of this Activity.
        """
        self.openapi_types = {
            'account_id': str,
            'activity_date': str,
            'activity_datetime': str,
            'all_day_event': bool,
            'archived': bool,
            'asset_id': str,
            'attendees': List[ActivityAttendee],
            'campaign_id': str,
            'case_id': str,
            'child': bool,
            'company_id': str,
            'contact_id': str,
            'contract_id': str,
            'created_at': str,
            'created_by': str,
            'custom_fields': List[CustomField],
            'custom_mappings': object,
            'custom_object_id': str,
            'deleted': bool,
            'description': str,
            'done': bool,
            'downstream_id': str,
            'duration_minutes': int,
            'duration_seconds': int,
            'end_date': str,
            'end_datetime': str,
            'event_sub_type': str,
            'group_event': bool,
            'group_event_type': str,
            'id': str,
            'lead_id': str,
            'location': str,
            'location_address': Address,
            'note': str,
            'opportunity_id': str,
            'owner_id': str,
            'private': bool,
            'product_id': str,
            'recurrent': bool,
            'reminder_datetime': str,
            'reminder_set': bool,
            'show_as': str,
            'solution_id': str,
            'start_datetime': str,
            'title': str,
            'type': str,
            'updated_at': str,
            'updated_by': str,
            'user_id': str,
            'video_conference_id': str,
            'video_conference_url': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'activity_date': 'activity_date',
            'activity_datetime': 'activity_datetime',
            'all_day_event': 'all_day_event',
            'archived': 'archived',
            'asset_id': 'asset_id',
            'attendees': 'attendees',
            'campaign_id': 'campaign_id',
            'case_id': 'case_id',
            'child': 'child',
            'company_id': 'company_id',
            'contact_id': 'contact_id',
            'contract_id': 'contract_id',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_fields': 'custom_fields',
            'custom_mappings': 'custom_mappings',
            'custom_object_id': 'custom_object_id',
            'deleted': 'deleted',
            'description': 'description',
            'done': 'done',
            'downstream_id': 'downstream_id',
            'duration_minutes': 'duration_minutes',
            'duration_seconds': 'duration_seconds',
            'end_date': 'end_date',
            'end_datetime': 'end_datetime',
            'event_sub_type': 'event_sub_type',
            'group_event': 'group_event',
            'group_event_type': 'group_event_type',
            'id': 'id',
            'lead_id': 'lead_id',
            'location': 'location',
            'location_address': 'location_address',
            'note': 'note',
            'opportunity_id': 'opportunity_id',
            'owner_id': 'owner_id',
            'private': 'private',
            'product_id': 'product_id',
            'recurrent': 'recurrent',
            'reminder_datetime': 'reminder_datetime',
            'reminder_set': 'reminder_set',
            'show_as': 'show_as',
            'solution_id': 'solution_id',
            'start_datetime': 'start_datetime',
            'title': 'title',
            'type': 'type',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'user_id': 'user_id',
            'video_conference_id': 'video_conference_id',
            'video_conference_url': 'video_conference_url'
        }

        self._account_id = account_id
        self._activity_date = activity_date
        self._activity_datetime = activity_datetime
        self._all_day_event = all_day_event
        self._archived = archived
        self._asset_id = asset_id
        self._attendees = attendees
        self._campaign_id = campaign_id
        self._case_id = case_id
        self._child = child
        self._company_id = company_id
        self._contact_id = contact_id
        self._contract_id = contract_id
        self._created_at = created_at
        self._created_by = created_by
        self._custom_fields = custom_fields
        self._custom_mappings = custom_mappings
        self._custom_object_id = custom_object_id
        self._deleted = deleted
        self._description = description
        self._done = done
        self._downstream_id = downstream_id
        self._duration_minutes = duration_minutes
        self._duration_seconds = duration_seconds
        self._end_date = end_date
        self._end_datetime = end_datetime
        self._event_sub_type = event_sub_type
        self._group_event = group_event
        self._group_event_type = group_event_type
        self._id = id
        self._lead_id = lead_id
        self._location = location
        self._location_address = location_address
        self._note = note
        self._opportunity_id = opportunity_id
        self._owner_id = owner_id
        self._private = private
        self._product_id = product_id
        self._recurrent = recurrent
        self._reminder_datetime = reminder_datetime
        self._reminder_set = reminder_set
        self._show_as = show_as
        self._solution_id = solution_id
        self._start_datetime = start_datetime
        self._title = title
        self._type = type
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._user_id = user_id
        self._video_conference_id = video_conference_id
        self._video_conference_url = video_conference_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity of this Activity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Activity.

        The account related to the activity

        :return: The account_id of this Activity.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Activity.

        The account related to the activity

        :param account_id: The account_id of this Activity.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def activity_date(self):
        """Gets the activity_date of this Activity.

        The date of the activity

        :return: The activity_date of this Activity.
        :rtype: str
        """
        return self._activity_date

    @activity_date.setter
    def activity_date(self, activity_date):
        """Sets the activity_date of this Activity.

        The date of the activity

        :param activity_date: The activity_date of this Activity.
        :type activity_date: str
        """

        self._activity_date = activity_date

    @property
    def activity_datetime(self):
        """Gets the activity_datetime of this Activity.

        The date and time of the activity

        :return: The activity_datetime of this Activity.
        :rtype: str
        """
        return self._activity_datetime

    @activity_datetime.setter
    def activity_datetime(self, activity_datetime):
        """Sets the activity_datetime of this Activity.

        The date and time of the activity

        :param activity_datetime: The activity_datetime of this Activity.
        :type activity_datetime: str
        """

        self._activity_datetime = activity_datetime

    @property
    def all_day_event(self):
        """Gets the all_day_event of this Activity.

        Whether the Activity is an all day event or not

        :return: The all_day_event of this Activity.
        :rtype: bool
        """
        return self._all_day_event

    @all_day_event.setter
    def all_day_event(self, all_day_event):
        """Sets the all_day_event of this Activity.

        Whether the Activity is an all day event or not

        :param all_day_event: The all_day_event of this Activity.
        :type all_day_event: bool
        """

        self._all_day_event = all_day_event

    @property
    def archived(self):
        """Gets the archived of this Activity.

        Whether the activity is archived or not

        :return: The archived of this Activity.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Activity.

        Whether the activity is archived or not

        :param archived: The archived of this Activity.
        :type archived: bool
        """

        self._archived = archived

    @property
    def asset_id(self):
        """Gets the asset_id of this Activity.

        The asset related to the activity

        :return: The asset_id of this Activity.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this Activity.

        The asset related to the activity

        :param asset_id: The asset_id of this Activity.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def attendees(self):
        """Gets the attendees of this Activity.


        :return: The attendees of this Activity.
        :rtype: List[ActivityAttendee]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this Activity.


        :param attendees: The attendees of this Activity.
        :type attendees: List[ActivityAttendee]
        """

        self._attendees = attendees

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Activity.

        The campaign related to the activity

        :return: The campaign_id of this Activity.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Activity.

        The campaign related to the activity

        :param campaign_id: The campaign_id of this Activity.
        :type campaign_id: str
        """

        self._campaign_id = campaign_id

    @property
    def case_id(self):
        """Gets the case_id of this Activity.

        The case related to the activity

        :return: The case_id of this Activity.
        :rtype: str
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this Activity.

        The case related to the activity

        :param case_id: The case_id of this Activity.
        :type case_id: str
        """

        self._case_id = case_id

    @property
    def child(self):
        """Gets the child of this Activity.

        Whether the activity is a child of another activity or not

        :return: The child of this Activity.
        :rtype: bool
        """
        return self._child

    @child.setter
    def child(self, child):
        """Sets the child of this Activity.

        Whether the activity is a child of another activity or not

        :param child: The child of this Activity.
        :type child: bool
        """

        self._child = child

    @property
    def company_id(self):
        """Gets the company_id of this Activity.

        The company related to the activity

        :return: The company_id of this Activity.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Activity.

        The company related to the activity

        :param company_id: The company_id of this Activity.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def contact_id(self):
        """Gets the contact_id of this Activity.

        The contact related to the activity

        :return: The contact_id of this Activity.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this Activity.

        The contact related to the activity

        :param contact_id: The contact_id of this Activity.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def contract_id(self):
        """Gets the contract_id of this Activity.

        The contract related to the activity

        :return: The contract_id of this Activity.
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this Activity.

        The contract related to the activity

        :param contract_id: The contract_id of this Activity.
        :type contract_id: str
        """

        self._contract_id = contract_id

    @property
    def created_at(self):
        """Gets the created_at of this Activity.

        The date and time when the activity was created

        :return: The created_at of this Activity.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Activity.

        The date and time when the activity was created

        :param created_at: The created_at of this Activity.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Activity.

        The user who created the activity

        :return: The created_by of this Activity.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Activity.

        The user who created the activity

        :param created_by: The created_by of this Activity.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Activity.

        Custom fields of the activity

        :return: The custom_fields of this Activity.
        :rtype: List[CustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Activity.

        Custom fields of the activity

        :param custom_fields: The custom_fields of this Activity.
        :type custom_fields: List[CustomField]
        """

        self._custom_fields = custom_fields

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Activity.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Activity.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Activity.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Activity.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def custom_object_id(self):
        """Gets the custom_object_id of this Activity.

        The custom object related to the activity

        :return: The custom_object_id of this Activity.
        :rtype: str
        """
        return self._custom_object_id

    @custom_object_id.setter
    def custom_object_id(self, custom_object_id):
        """Sets the custom_object_id of this Activity.

        The custom object related to the activity

        :param custom_object_id: The custom_object_id of this Activity.
        :type custom_object_id: str
        """

        self._custom_object_id = custom_object_id

    @property
    def deleted(self):
        """Gets the deleted of this Activity.

        Whether the activity is deleted or not

        :return: The deleted of this Activity.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Activity.

        Whether the activity is deleted or not

        :param deleted: The deleted of this Activity.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Activity.

        A description of the activity

        :return: The description of this Activity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Activity.

        A description of the activity

        :param description: The description of this Activity.
        :type description: str
        """

        self._description = description

    @property
    def done(self):
        """Gets the done of this Activity.

        Whether the Activity is done or not

        :return: The done of this Activity.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this Activity.

        Whether the Activity is done or not

        :param done: The done of this Activity.
        :type done: bool
        """

        self._done = done

    @property
    def downstream_id(self):
        """Gets the downstream_id of this Activity.

        The third-party API ID of original entity

        :return: The downstream_id of this Activity.
        :rtype: str
        """
        return self._downstream_id

    @downstream_id.setter
    def downstream_id(self, downstream_id):
        """Sets the downstream_id of this Activity.

        The third-party API ID of original entity

        :param downstream_id: The downstream_id of this Activity.
        :type downstream_id: str
        """

        self._downstream_id = downstream_id

    @property
    def duration_minutes(self):
        """Gets the duration_minutes of this Activity.

        The duration of the activity in minutes

        :return: The duration_minutes of this Activity.
        :rtype: int
        """
        return self._duration_minutes

    @duration_minutes.setter
    def duration_minutes(self, duration_minutes):
        """Sets the duration_minutes of this Activity.

        The duration of the activity in minutes

        :param duration_minutes: The duration_minutes of this Activity.
        :type duration_minutes: int
        """

        self._duration_minutes = duration_minutes

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this Activity.

        The duration of the activity in seconds

        :return: The duration_seconds of this Activity.
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this Activity.

        The duration of the activity in seconds

        :param duration_seconds: The duration_seconds of this Activity.
        :type duration_seconds: int
        """
        if duration_seconds is not None and duration_seconds < 0:
            raise ValueError("Invalid value for `duration_seconds`, must be a value greater than or equal to `0`")

        self._duration_seconds = duration_seconds

    @property
    def end_date(self):
        """Gets the end_date of this Activity.

        The end date of the activity

        :return: The end_date of this Activity.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Activity.

        The end date of the activity

        :param end_date: The end_date of this Activity.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def end_datetime(self):
        """Gets the end_datetime of this Activity.

        The end date and time of the activity

        :return: The end_datetime of this Activity.
        :rtype: str
        """
        return self._end_datetime

    @end_datetime.setter
    def end_datetime(self, end_datetime):
        """Sets the end_datetime of this Activity.

        The end date and time of the activity

        :param end_datetime: The end_datetime of this Activity.
        :type end_datetime: str
        """

        self._end_datetime = end_datetime

    @property
    def event_sub_type(self):
        """Gets the event_sub_type of this Activity.

        The sub type of the group event

        :return: The event_sub_type of this Activity.
        :rtype: str
        """
        return self._event_sub_type

    @event_sub_type.setter
    def event_sub_type(self, event_sub_type):
        """Sets the event_sub_type of this Activity.

        The sub type of the group event

        :param event_sub_type: The event_sub_type of this Activity.
        :type event_sub_type: str
        """

        self._event_sub_type = event_sub_type

    @property
    def group_event(self):
        """Gets the group_event of this Activity.

        Whether the Activity is a group event or not

        :return: The group_event of this Activity.
        :rtype: bool
        """
        return self._group_event

    @group_event.setter
    def group_event(self, group_event):
        """Sets the group_event of this Activity.

        Whether the Activity is a group event or not

        :param group_event: The group_event of this Activity.
        :type group_event: bool
        """

        self._group_event = group_event

    @property
    def group_event_type(self):
        """Gets the group_event_type of this Activity.

        The type of the group event

        :return: The group_event_type of this Activity.
        :rtype: str
        """
        return self._group_event_type

    @group_event_type.setter
    def group_event_type(self, group_event_type):
        """Sets the group_event_type of this Activity.

        The type of the group event

        :param group_event_type: The group_event_type of this Activity.
        :type group_event_type: str
        """

        self._group_event_type = group_event_type

    @property
    def id(self):
        """Gets the id of this Activity.

        The unique identifier of the activity

        :return: The id of this Activity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.

        The unique identifier of the activity

        :param id: The id of this Activity.
        :type id: str
        """

        self._id = id

    @property
    def lead_id(self):
        """Gets the lead_id of this Activity.

        The lead related to the activity

        :return: The lead_id of this Activity.
        :rtype: str
        """
        return self._lead_id

    @lead_id.setter
    def lead_id(self, lead_id):
        """Sets the lead_id of this Activity.

        The lead related to the activity

        :param lead_id: The lead_id of this Activity.
        :type lead_id: str
        """

        self._lead_id = lead_id

    @property
    def location(self):
        """Gets the location of this Activity.

        The location of the activity

        :return: The location of this Activity.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Activity.

        The location of the activity

        :param location: The location of this Activity.
        :type location: str
        """

        self._location = location

    @property
    def location_address(self):
        """Gets the location_address of this Activity.


        :return: The location_address of this Activity.
        :rtype: Address
        """
        return self._location_address

    @location_address.setter
    def location_address(self, location_address):
        """Sets the location_address of this Activity.


        :param location_address: The location_address of this Activity.
        :type location_address: Address
        """

        self._location_address = location_address

    @property
    def note(self):
        """Gets the note of this Activity.

        An internal note about the activity

        :return: The note of this Activity.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Activity.

        An internal note about the activity

        :param note: The note of this Activity.
        :type note: str
        """

        self._note = note

    @property
    def opportunity_id(self):
        """Gets the opportunity_id of this Activity.

        The opportunity related to the activity

        :return: The opportunity_id of this Activity.
        :rtype: str
        """
        return self._opportunity_id

    @opportunity_id.setter
    def opportunity_id(self, opportunity_id):
        """Sets the opportunity_id of this Activity.

        The opportunity related to the activity

        :param opportunity_id: The opportunity_id of this Activity.
        :type opportunity_id: str
        """

        self._opportunity_id = opportunity_id

    @property
    def owner_id(self):
        """Gets the owner_id of this Activity.

        The owner of the activity

        :return: The owner_id of this Activity.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Activity.

        The owner of the activity

        :param owner_id: The owner_id of this Activity.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def private(self):
        """Gets the private of this Activity.

        Whether the Activity is private or not

        :return: The private of this Activity.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Activity.

        Whether the Activity is private or not

        :param private: The private of this Activity.
        :type private: bool
        """

        self._private = private

    @property
    def product_id(self):
        """Gets the product_id of this Activity.

        The product related to the activity

        :return: The product_id of this Activity.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Activity.

        The product related to the activity

        :param product_id: The product_id of this Activity.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def recurrent(self):
        """Gets the recurrent of this Activity.

        Whether the activity is recurrent or not

        :return: The recurrent of this Activity.
        :rtype: bool
        """
        return self._recurrent

    @recurrent.setter
    def recurrent(self, recurrent):
        """Sets the recurrent of this Activity.

        Whether the activity is recurrent or not

        :param recurrent: The recurrent of this Activity.
        :type recurrent: bool
        """

        self._recurrent = recurrent

    @property
    def reminder_datetime(self):
        """Gets the reminder_datetime of this Activity.

        The date and time of the reminder

        :return: The reminder_datetime of this Activity.
        :rtype: str
        """
        return self._reminder_datetime

    @reminder_datetime.setter
    def reminder_datetime(self, reminder_datetime):
        """Sets the reminder_datetime of this Activity.

        The date and time of the reminder

        :param reminder_datetime: The reminder_datetime of this Activity.
        :type reminder_datetime: str
        """

        self._reminder_datetime = reminder_datetime

    @property
    def reminder_set(self):
        """Gets the reminder_set of this Activity.

        Whether the reminder is set or not

        :return: The reminder_set of this Activity.
        :rtype: bool
        """
        return self._reminder_set

    @reminder_set.setter
    def reminder_set(self, reminder_set):
        """Sets the reminder_set of this Activity.

        Whether the reminder is set or not

        :param reminder_set: The reminder_set of this Activity.
        :type reminder_set: bool
        """

        self._reminder_set = reminder_set

    @property
    def show_as(self):
        """Gets the show_as of this Activity.


        :return: The show_as of this Activity.
        :rtype: str
        """
        return self._show_as

    @show_as.setter
    def show_as(self, show_as):
        """Sets the show_as of this Activity.


        :param show_as: The show_as of this Activity.
        :type show_as: str
        """
        allowed_values = [None,"free", "busy"]  # noqa: E501
        if show_as not in allowed_values:
            raise ValueError(
                "Invalid value for `show_as` ({0}), must be one of {1}"
                .format(show_as, allowed_values)
            )

        self._show_as = show_as

    @property
    def solution_id(self):
        """Gets the solution_id of this Activity.

        The solution related to the activity

        :return: The solution_id of this Activity.
        :rtype: str
        """
        return self._solution_id

    @solution_id.setter
    def solution_id(self, solution_id):
        """Sets the solution_id of this Activity.

        The solution related to the activity

        :param solution_id: The solution_id of this Activity.
        :type solution_id: str
        """

        self._solution_id = solution_id

    @property
    def start_datetime(self):
        """Gets the start_datetime of this Activity.

        The start date and time of the activity

        :return: The start_datetime of this Activity.
        :rtype: str
        """
        return self._start_datetime

    @start_datetime.setter
    def start_datetime(self, start_datetime):
        """Sets the start_datetime of this Activity.

        The start date and time of the activity

        :param start_datetime: The start_datetime of this Activity.
        :type start_datetime: str
        """

        self._start_datetime = start_datetime

    @property
    def title(self):
        """Gets the title of this Activity.

        The title of the activity

        :return: The title of this Activity.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Activity.

        The title of the activity

        :param title: The title of this Activity.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Activity.

        The type of the activity

        :return: The type of this Activity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Activity.

        The type of the activity

        :param type: The type of this Activity.
        :type type: str
        """
        allowed_values = [None,"call", "meeting", "email", "note", "task", "deadline", "send-letter", "send-quote", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Activity.

        The date and time when the activity was last updated

        :return: The updated_at of this Activity.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Activity.

        The date and time when the activity was last updated

        :param updated_at: The updated_at of this Activity.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Activity.

        The user who last updated the activity

        :return: The updated_by of this Activity.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Activity.

        The user who last updated the activity

        :param updated_by: The updated_by of this Activity.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def user_id(self):
        """Gets the user_id of this Activity.

        The user related to the activity

        :return: The user_id of this Activity.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Activity.

        The user related to the activity

        :param user_id: The user_id of this Activity.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def video_conference_id(self):
        """Gets the video_conference_id of this Activity.

        The ID of the video conference

        :return: The video_conference_id of this Activity.
        :rtype: str
        """
        return self._video_conference_id

    @video_conference_id.setter
    def video_conference_id(self, video_conference_id):
        """Sets the video_conference_id of this Activity.

        The ID of the video conference

        :param video_conference_id: The video_conference_id of this Activity.
        :type video_conference_id: str
        """

        self._video_conference_id = video_conference_id

    @property
    def video_conference_url(self):
        """Gets the video_conference_url of this Activity.

        The URL of the video conference

        :return: The video_conference_url of this Activity.
        :rtype: str
        """
        return self._video_conference_url

    @video_conference_url.setter
    def video_conference_url(self, video_conference_url):
        """Sets the video_conference_url of this Activity.

        The URL of the video conference

        :param video_conference_url: The video_conference_url of this Activity.
        :type video_conference_url: str
        """

        self._video_conference_url = video_conference_url
