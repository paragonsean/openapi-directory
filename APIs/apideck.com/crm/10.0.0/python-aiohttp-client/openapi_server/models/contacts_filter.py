# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactsFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, email: str=None, first_name: str=None, last_name: str=None, name: str=None):
        """ContactsFilter - a model defined in OpenAPI

        :param company_id: The company_id of this ContactsFilter.
        :param email: The email of this ContactsFilter.
        :param first_name: The first_name of this ContactsFilter.
        :param last_name: The last_name of this ContactsFilter.
        :param name: The name of this ContactsFilter.
        """
        self.openapi_types = {
            'company_id': str,
            'email': str,
            'first_name': str,
            'last_name': str,
            'name': str
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'name': 'name'
        }

        self._company_id = company_id
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactsFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactsFilter of this ContactsFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this ContactsFilter.

        Unique identifier for the associated company of the contact to filter on

        :return: The company_id of this ContactsFilter.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ContactsFilter.

        Unique identifier for the associated company of the contact to filter on

        :param company_id: The company_id of this ContactsFilter.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def email(self):
        """Gets the email of this ContactsFilter.

        Email of the contact to filter on

        :return: The email of this ContactsFilter.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactsFilter.

        Email of the contact to filter on

        :param email: The email of this ContactsFilter.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this ContactsFilter.

        First name of the contact to filter on

        :return: The first_name of this ContactsFilter.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactsFilter.

        First name of the contact to filter on

        :param first_name: The first_name of this ContactsFilter.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ContactsFilter.

        Last name of the contact to filter on

        :return: The last_name of this ContactsFilter.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactsFilter.

        Last name of the contact to filter on

        :param last_name: The last_name of this ContactsFilter.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this ContactsFilter.

        Name of the contact to filter on

        :return: The name of this ContactsFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactsFilter.

        Name of the contact to filter on

        :param name: The name of this ContactsFilter.
        :type name: str
        """

        self._name = name
