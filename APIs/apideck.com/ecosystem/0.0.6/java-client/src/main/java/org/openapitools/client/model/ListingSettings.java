/*
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListingSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:03.100845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListingSettings {
  public static final String SERIALIZED_NAME_DESCRIPTION_TEXT_TEMPLATE = "description_text_template";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_TEXT_TEMPLATE)
  private String descriptionTextTemplate;

  public static final String SERIALIZED_NAME_DESCRIPTION_TITLE = "description_title";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_TITLE)
  private String descriptionTitle;

  public static final String SERIALIZED_NAME_FEATURES_TEXT_TEMPLATE = "features_text_template";
  @SerializedName(SERIALIZED_NAME_FEATURES_TEXT_TEMPLATE)
  private String featuresTextTemplate;

  public static final String SERIALIZED_NAME_FEATURES_TITLE = "features_title";
  @SerializedName(SERIALIZED_NAME_FEATURES_TITLE)
  private String featuresTitle;

  public static final String SERIALIZED_NAME_INSTALL_BUTTON_LABEL = "install_button_label";
  @SerializedName(SERIALIZED_NAME_INSTALL_BUTTON_LABEL)
  private String installButtonLabel;

  public static final String SERIALIZED_NAME_NAME_POSTFIX = "name_postfix";
  @SerializedName(SERIALIZED_NAME_NAME_POSTFIX)
  private String namePostfix;

  /**
   * Gets or Sets naming
   */
  @JsonAdapter(NamingEnum.Adapter.class)
  public enum NamingEnum {
    LISTING("LISTING"),
    
    LISTINGS("LISTINGS"),
    
    INTEGRATIONS("INTEGRATIONS"),
    
    APPS("APPS"),
    
    CONNECTORS("CONNECTORS"),
    
    DATASOURCES("DATASOURCES"),
    
    ADDONS("ADDONS"),
    
    PLUGINS("PLUGINS"),
    
    PARTNERS("PARTNERS"),
    
    CHANNELS("CHANNELS"),
    
    CONNECTIONS("CONNECTIONS"),
    
    EXTENSIONS("EXTENSIONS");

    private String value;

    NamingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NamingEnum fromValue(String value) {
      for (NamingEnum b : NamingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NamingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NamingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NamingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NamingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NamingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAMING = "naming";
  @SerializedName(SERIALIZED_NAME_NAMING)
  private NamingEnum naming;

  public static final String SERIALIZED_NAME_NATIVE_INTEGRATION_LINK = "native_integration_link";
  @SerializedName(SERIALIZED_NAME_NATIVE_INTEGRATION_LINK)
  private String nativeIntegrationLink;

  public static final String SERIALIZED_NAME_PRICING_DISABLED = "pricing_disabled";
  @SerializedName(SERIALIZED_NAME_PRICING_DISABLED)
  private Boolean pricingDisabled;

  public static final String SERIALIZED_NAME_PRICING_TEXT_TEMPLATE = "pricing_text_template";
  @SerializedName(SERIALIZED_NAME_PRICING_TEXT_TEMPLATE)
  private String pricingTextTemplate;

  public static final String SERIALIZED_NAME_PRICING_TITLE = "pricing_title";
  @SerializedName(SERIALIZED_NAME_PRICING_TITLE)
  private String pricingTitle;

  /**
   * Gets or Sets sidebarPosition
   */
  @JsonAdapter(SidebarPositionEnum.Adapter.class)
  public enum SidebarPositionEnum {
    TOP("TOP"),
    
    LEFT("LEFT"),
    
    RIGHT("RIGHT"),
    
    HIDDEN("HIDDEN");

    private String value;

    SidebarPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SidebarPositionEnum fromValue(String value) {
      for (SidebarPositionEnum b : SidebarPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SidebarPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SidebarPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SidebarPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SidebarPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SidebarPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIDEBAR_POSITION = "sidebar_position";
  @SerializedName(SERIALIZED_NAME_SIDEBAR_POSITION)
  private SidebarPositionEnum sidebarPosition;

  public ListingSettings() {
  }

  public ListingSettings descriptionTextTemplate(String descriptionTextTemplate) {
    this.descriptionTextTemplate = descriptionTextTemplate;
    return this;
  }

  /**
   * Get descriptionTextTemplate
   * @return descriptionTextTemplate
   */
  @javax.annotation.Nullable
  public String getDescriptionTextTemplate() {
    return descriptionTextTemplate;
  }

  public void setDescriptionTextTemplate(String descriptionTextTemplate) {
    this.descriptionTextTemplate = descriptionTextTemplate;
  }


  public ListingSettings descriptionTitle(String descriptionTitle) {
    this.descriptionTitle = descriptionTitle;
    return this;
  }

  /**
   * Get descriptionTitle
   * @return descriptionTitle
   */
  @javax.annotation.Nullable
  public String getDescriptionTitle() {
    return descriptionTitle;
  }

  public void setDescriptionTitle(String descriptionTitle) {
    this.descriptionTitle = descriptionTitle;
  }


  public ListingSettings featuresTextTemplate(String featuresTextTemplate) {
    this.featuresTextTemplate = featuresTextTemplate;
    return this;
  }

  /**
   * Get featuresTextTemplate
   * @return featuresTextTemplate
   */
  @javax.annotation.Nullable
  public String getFeaturesTextTemplate() {
    return featuresTextTemplate;
  }

  public void setFeaturesTextTemplate(String featuresTextTemplate) {
    this.featuresTextTemplate = featuresTextTemplate;
  }


  public ListingSettings featuresTitle(String featuresTitle) {
    this.featuresTitle = featuresTitle;
    return this;
  }

  /**
   * Get featuresTitle
   * @return featuresTitle
   */
  @javax.annotation.Nullable
  public String getFeaturesTitle() {
    return featuresTitle;
  }

  public void setFeaturesTitle(String featuresTitle) {
    this.featuresTitle = featuresTitle;
  }


  public ListingSettings installButtonLabel(String installButtonLabel) {
    this.installButtonLabel = installButtonLabel;
    return this;
  }

  /**
   * Get installButtonLabel
   * @return installButtonLabel
   */
  @javax.annotation.Nullable
  public String getInstallButtonLabel() {
    return installButtonLabel;
  }

  public void setInstallButtonLabel(String installButtonLabel) {
    this.installButtonLabel = installButtonLabel;
  }


  public ListingSettings namePostfix(String namePostfix) {
    this.namePostfix = namePostfix;
    return this;
  }

  /**
   * Get namePostfix
   * @return namePostfix
   */
  @javax.annotation.Nullable
  public String getNamePostfix() {
    return namePostfix;
  }

  public void setNamePostfix(String namePostfix) {
    this.namePostfix = namePostfix;
  }


  public ListingSettings naming(NamingEnum naming) {
    this.naming = naming;
    return this;
  }

  /**
   * Get naming
   * @return naming
   */
  @javax.annotation.Nullable
  public NamingEnum getNaming() {
    return naming;
  }

  public void setNaming(NamingEnum naming) {
    this.naming = naming;
  }


  public ListingSettings nativeIntegrationLink(String nativeIntegrationLink) {
    this.nativeIntegrationLink = nativeIntegrationLink;
    return this;
  }

  /**
   * Get nativeIntegrationLink
   * @return nativeIntegrationLink
   */
  @javax.annotation.Nullable
  public String getNativeIntegrationLink() {
    return nativeIntegrationLink;
  }

  public void setNativeIntegrationLink(String nativeIntegrationLink) {
    this.nativeIntegrationLink = nativeIntegrationLink;
  }


  public ListingSettings pricingDisabled(Boolean pricingDisabled) {
    this.pricingDisabled = pricingDisabled;
    return this;
  }

  /**
   * Get pricingDisabled
   * @return pricingDisabled
   */
  @javax.annotation.Nullable
  public Boolean getPricingDisabled() {
    return pricingDisabled;
  }

  public void setPricingDisabled(Boolean pricingDisabled) {
    this.pricingDisabled = pricingDisabled;
  }


  public ListingSettings pricingTextTemplate(String pricingTextTemplate) {
    this.pricingTextTemplate = pricingTextTemplate;
    return this;
  }

  /**
   * Get pricingTextTemplate
   * @return pricingTextTemplate
   */
  @javax.annotation.Nullable
  public String getPricingTextTemplate() {
    return pricingTextTemplate;
  }

  public void setPricingTextTemplate(String pricingTextTemplate) {
    this.pricingTextTemplate = pricingTextTemplate;
  }


  public ListingSettings pricingTitle(String pricingTitle) {
    this.pricingTitle = pricingTitle;
    return this;
  }

  /**
   * Get pricingTitle
   * @return pricingTitle
   */
  @javax.annotation.Nullable
  public String getPricingTitle() {
    return pricingTitle;
  }

  public void setPricingTitle(String pricingTitle) {
    this.pricingTitle = pricingTitle;
  }


  public ListingSettings sidebarPosition(SidebarPositionEnum sidebarPosition) {
    this.sidebarPosition = sidebarPosition;
    return this;
  }

  /**
   * Get sidebarPosition
   * @return sidebarPosition
   */
  @javax.annotation.Nullable
  public SidebarPositionEnum getSidebarPosition() {
    return sidebarPosition;
  }

  public void setSidebarPosition(SidebarPositionEnum sidebarPosition) {
    this.sidebarPosition = sidebarPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingSettings listingSettings = (ListingSettings) o;
    return Objects.equals(this.descriptionTextTemplate, listingSettings.descriptionTextTemplate) &&
        Objects.equals(this.descriptionTitle, listingSettings.descriptionTitle) &&
        Objects.equals(this.featuresTextTemplate, listingSettings.featuresTextTemplate) &&
        Objects.equals(this.featuresTitle, listingSettings.featuresTitle) &&
        Objects.equals(this.installButtonLabel, listingSettings.installButtonLabel) &&
        Objects.equals(this.namePostfix, listingSettings.namePostfix) &&
        Objects.equals(this.naming, listingSettings.naming) &&
        Objects.equals(this.nativeIntegrationLink, listingSettings.nativeIntegrationLink) &&
        Objects.equals(this.pricingDisabled, listingSettings.pricingDisabled) &&
        Objects.equals(this.pricingTextTemplate, listingSettings.pricingTextTemplate) &&
        Objects.equals(this.pricingTitle, listingSettings.pricingTitle) &&
        Objects.equals(this.sidebarPosition, listingSettings.sidebarPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(descriptionTextTemplate, descriptionTitle, featuresTextTemplate, featuresTitle, installButtonLabel, namePostfix, naming, nativeIntegrationLink, pricingDisabled, pricingTextTemplate, pricingTitle, sidebarPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingSettings {\n");
    sb.append("    descriptionTextTemplate: ").append(toIndentedString(descriptionTextTemplate)).append("\n");
    sb.append("    descriptionTitle: ").append(toIndentedString(descriptionTitle)).append("\n");
    sb.append("    featuresTextTemplate: ").append(toIndentedString(featuresTextTemplate)).append("\n");
    sb.append("    featuresTitle: ").append(toIndentedString(featuresTitle)).append("\n");
    sb.append("    installButtonLabel: ").append(toIndentedString(installButtonLabel)).append("\n");
    sb.append("    namePostfix: ").append(toIndentedString(namePostfix)).append("\n");
    sb.append("    naming: ").append(toIndentedString(naming)).append("\n");
    sb.append("    nativeIntegrationLink: ").append(toIndentedString(nativeIntegrationLink)).append("\n");
    sb.append("    pricingDisabled: ").append(toIndentedString(pricingDisabled)).append("\n");
    sb.append("    pricingTextTemplate: ").append(toIndentedString(pricingTextTemplate)).append("\n");
    sb.append("    pricingTitle: ").append(toIndentedString(pricingTitle)).append("\n");
    sb.append("    sidebarPosition: ").append(toIndentedString(sidebarPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description_text_template");
    openapiFields.add("description_title");
    openapiFields.add("features_text_template");
    openapiFields.add("features_title");
    openapiFields.add("install_button_label");
    openapiFields.add("name_postfix");
    openapiFields.add("naming");
    openapiFields.add("native_integration_link");
    openapiFields.add("pricing_disabled");
    openapiFields.add("pricing_text_template");
    openapiFields.add("pricing_title");
    openapiFields.add("sidebar_position");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingSettings is not found in the empty JSON string", ListingSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description_text_template") != null && !jsonObj.get("description_text_template").isJsonNull()) && !jsonObj.get("description_text_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_text_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_text_template").toString()));
      }
      if ((jsonObj.get("description_title") != null && !jsonObj.get("description_title").isJsonNull()) && !jsonObj.get("description_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_title").toString()));
      }
      if ((jsonObj.get("features_text_template") != null && !jsonObj.get("features_text_template").isJsonNull()) && !jsonObj.get("features_text_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `features_text_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("features_text_template").toString()));
      }
      if ((jsonObj.get("features_title") != null && !jsonObj.get("features_title").isJsonNull()) && !jsonObj.get("features_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `features_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("features_title").toString()));
      }
      if ((jsonObj.get("install_button_label") != null && !jsonObj.get("install_button_label").isJsonNull()) && !jsonObj.get("install_button_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `install_button_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("install_button_label").toString()));
      }
      if ((jsonObj.get("name_postfix") != null && !jsonObj.get("name_postfix").isJsonNull()) && !jsonObj.get("name_postfix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_postfix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_postfix").toString()));
      }
      if ((jsonObj.get("naming") != null && !jsonObj.get("naming").isJsonNull()) && !jsonObj.get("naming").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `naming` to be a primitive type in the JSON string but got `%s`", jsonObj.get("naming").toString()));
      }
      // validate the optional field `naming`
      if (jsonObj.get("naming") != null && !jsonObj.get("naming").isJsonNull()) {
        NamingEnum.validateJsonElement(jsonObj.get("naming"));
      }
      if ((jsonObj.get("native_integration_link") != null && !jsonObj.get("native_integration_link").isJsonNull()) && !jsonObj.get("native_integration_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `native_integration_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("native_integration_link").toString()));
      }
      if ((jsonObj.get("pricing_text_template") != null && !jsonObj.get("pricing_text_template").isJsonNull()) && !jsonObj.get("pricing_text_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing_text_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricing_text_template").toString()));
      }
      if ((jsonObj.get("pricing_title") != null && !jsonObj.get("pricing_title").isJsonNull()) && !jsonObj.get("pricing_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricing_title").toString()));
      }
      if ((jsonObj.get("sidebar_position") != null && !jsonObj.get("sidebar_position").isJsonNull()) && !jsonObj.get("sidebar_position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sidebar_position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sidebar_position").toString()));
      }
      // validate the optional field `sidebar_position`
      if (jsonObj.get("sidebar_position") != null && !jsonObj.get("sidebar_position").isJsonNull()) {
        SidebarPositionEnum.validateJsonElement(jsonObj.get("sidebar_position"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingSettings>() {
           @Override
           public void write(JsonWriter out, ListingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingSettings
   * @throws IOException if the JSON string is invalid with respect to ListingSettings
   */
  public static ListingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingSettings.class);
  }

  /**
   * Convert an instance of ListingSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

