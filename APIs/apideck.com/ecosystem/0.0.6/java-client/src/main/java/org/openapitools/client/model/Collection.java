/*
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.Translation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Collection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:03.100845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Collection {
  public static final String SERIALIZED_NAME_CARD_BACKGROUND_COLOR = "card_background_color";
  @SerializedName(SERIALIZED_NAME_CARD_BACKGROUND_COLOR)
  private String cardBackgroundColor;

  public static final String SERIALIZED_NAME_CARD_BACKGROUND_IMAGE = "card_background_image";
  @SerializedName(SERIALIZED_NAME_CARD_BACKGROUND_IMAGE)
  private ModelFile cardBackgroundImage;

  public static final String SERIALIZED_NAME_CARD_COLUMNS = "card_columns";
  @SerializedName(SERIALIZED_NAME_CARD_COLUMNS)
  private Integer cardColumns;

  public static final String SERIALIZED_NAME_CARD_STYLE = "card_style";
  @SerializedName(SERIALIZED_NAME_CARD_STYLE)
  private String cardStyle;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HIDDEN_FROM_HOMEPAGE = "hidden_from_homepage";
  @SerializedName(SERIALIZED_NAME_HIDDEN_FROM_HOMEPAGE)
  private Boolean hiddenFromHomepage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private ModelFile logo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_SHOW_MAX_ITEMS_HOMEPAGE = "show_max_items_homepage";
  @SerializedName(SERIALIZED_NAME_SHOW_MAX_ITEMS_HOMEPAGE)
  private Integer showMaxItemsHomepage;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TRANSLATIONS = "translations";
  @SerializedName(SERIALIZED_NAME_TRANSLATIONS)
  private List<Translation> translations;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public Collection() {
  }

  public Collection cardBackgroundColor(String cardBackgroundColor) {
    this.cardBackgroundColor = cardBackgroundColor;
    return this;
  }

  /**
   * Get cardBackgroundColor
   * @return cardBackgroundColor
   */
  @javax.annotation.Nullable
  public String getCardBackgroundColor() {
    return cardBackgroundColor;
  }

  public void setCardBackgroundColor(String cardBackgroundColor) {
    this.cardBackgroundColor = cardBackgroundColor;
  }


  public Collection cardBackgroundImage(ModelFile cardBackgroundImage) {
    this.cardBackgroundImage = cardBackgroundImage;
    return this;
  }

  /**
   * Get cardBackgroundImage
   * @return cardBackgroundImage
   */
  @javax.annotation.Nullable
  public ModelFile getCardBackgroundImage() {
    return cardBackgroundImage;
  }

  public void setCardBackgroundImage(ModelFile cardBackgroundImage) {
    this.cardBackgroundImage = cardBackgroundImage;
  }


  public Collection cardColumns(Integer cardColumns) {
    this.cardColumns = cardColumns;
    return this;
  }

  /**
   * Get cardColumns
   * @return cardColumns
   */
  @javax.annotation.Nullable
  public Integer getCardColumns() {
    return cardColumns;
  }

  public void setCardColumns(Integer cardColumns) {
    this.cardColumns = cardColumns;
  }


  public Collection cardStyle(String cardStyle) {
    this.cardStyle = cardStyle;
    return this;
  }

  /**
   * Get cardStyle
   * @return cardStyle
   */
  @javax.annotation.Nullable
  public String getCardStyle() {
    return cardStyle;
  }

  public void setCardStyle(String cardStyle) {
    this.cardStyle = cardStyle;
  }


  public Collection count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public Collection description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Collection hiddenFromHomepage(Boolean hiddenFromHomepage) {
    this.hiddenFromHomepage = hiddenFromHomepage;
    return this;
  }

  /**
   * Get hiddenFromHomepage
   * @return hiddenFromHomepage
   */
  @javax.annotation.Nullable
  public Boolean getHiddenFromHomepage() {
    return hiddenFromHomepage;
  }

  public void setHiddenFromHomepage(Boolean hiddenFromHomepage) {
    this.hiddenFromHomepage = hiddenFromHomepage;
  }


  public Collection id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Collection logo(ModelFile logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public ModelFile getLogo() {
    return logo;
  }

  public void setLogo(ModelFile logo) {
    this.logo = logo;
  }


  public Collection name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Collection sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public Collection showMaxItemsHomepage(Integer showMaxItemsHomepage) {
    this.showMaxItemsHomepage = showMaxItemsHomepage;
    return this;
  }

  /**
   * Get showMaxItemsHomepage
   * @return showMaxItemsHomepage
   */
  @javax.annotation.Nullable
  public Integer getShowMaxItemsHomepage() {
    return showMaxItemsHomepage;
  }

  public void setShowMaxItemsHomepage(Integer showMaxItemsHomepage) {
    this.showMaxItemsHomepage = showMaxItemsHomepage;
  }


  public Collection slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public Collection translations(List<Translation> translations) {
    this.translations = translations;
    return this;
  }

  public Collection addTranslationsItem(Translation translationsItem) {
    if (this.translations == null) {
      this.translations = new ArrayList<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

  /**
   * Get translations
   * @return translations
   */
  @javax.annotation.Nullable
  public List<Translation> getTranslations() {
    return translations;
  }

  public void setTranslations(List<Translation> translations) {
    this.translations = translations;
  }


  public Collection visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Get visible
   * @return visible
   */
  @javax.annotation.Nonnull
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collection collection = (Collection) o;
    return Objects.equals(this.cardBackgroundColor, collection.cardBackgroundColor) &&
        Objects.equals(this.cardBackgroundImage, collection.cardBackgroundImage) &&
        Objects.equals(this.cardColumns, collection.cardColumns) &&
        Objects.equals(this.cardStyle, collection.cardStyle) &&
        Objects.equals(this.count, collection.count) &&
        Objects.equals(this.description, collection.description) &&
        Objects.equals(this.hiddenFromHomepage, collection.hiddenFromHomepage) &&
        Objects.equals(this.id, collection.id) &&
        Objects.equals(this.logo, collection.logo) &&
        Objects.equals(this.name, collection.name) &&
        Objects.equals(this.sequence, collection.sequence) &&
        Objects.equals(this.showMaxItemsHomepage, collection.showMaxItemsHomepage) &&
        Objects.equals(this.slug, collection.slug) &&
        Objects.equals(this.translations, collection.translations) &&
        Objects.equals(this.visible, collection.visible);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardBackgroundColor, cardBackgroundImage, cardColumns, cardStyle, count, description, hiddenFromHomepage, id, logo, name, sequence, showMaxItemsHomepage, slug, translations, visible);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collection {\n");
    sb.append("    cardBackgroundColor: ").append(toIndentedString(cardBackgroundColor)).append("\n");
    sb.append("    cardBackgroundImage: ").append(toIndentedString(cardBackgroundImage)).append("\n");
    sb.append("    cardColumns: ").append(toIndentedString(cardColumns)).append("\n");
    sb.append("    cardStyle: ").append(toIndentedString(cardStyle)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hiddenFromHomepage: ").append(toIndentedString(hiddenFromHomepage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    showMaxItemsHomepage: ").append(toIndentedString(showMaxItemsHomepage)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_background_color");
    openapiFields.add("card_background_image");
    openapiFields.add("card_columns");
    openapiFields.add("card_style");
    openapiFields.add("count");
    openapiFields.add("description");
    openapiFields.add("hidden_from_homepage");
    openapiFields.add("id");
    openapiFields.add("logo");
    openapiFields.add("name");
    openapiFields.add("sequence");
    openapiFields.add("show_max_items_homepage");
    openapiFields.add("slug");
    openapiFields.add("translations");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("visible");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Collection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Collection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Collection is not found in the empty JSON string", Collection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Collection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Collection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Collection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("card_background_color") != null && !jsonObj.get("card_background_color").isJsonNull()) && !jsonObj.get("card_background_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_background_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_background_color").toString()));
      }
      // validate the optional field `card_background_image`
      if (jsonObj.get("card_background_image") != null && !jsonObj.get("card_background_image").isJsonNull()) {
        ModelFile.validateJsonElement(jsonObj.get("card_background_image"));
      }
      if ((jsonObj.get("card_style") != null && !jsonObj.get("card_style").isJsonNull()) && !jsonObj.get("card_style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_style").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        ModelFile.validateJsonElement(jsonObj.get("logo"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (jsonObj.get("translations") != null && !jsonObj.get("translations").isJsonNull()) {
        JsonArray jsonArraytranslations = jsonObj.getAsJsonArray("translations");
        if (jsonArraytranslations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("translations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `translations` to be an array in the JSON string but got `%s`", jsonObj.get("translations").toString()));
          }

          // validate the optional field `translations` (array)
          for (int i = 0; i < jsonArraytranslations.size(); i++) {
            Translation.validateJsonElement(jsonArraytranslations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Collection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Collection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Collection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Collection.class));

       return (TypeAdapter<T>) new TypeAdapter<Collection>() {
           @Override
           public void write(JsonWriter out, Collection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Collection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Collection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Collection
   * @throws IOException if the JSON string is invalid with respect to Collection
   */
  public static Collection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Collection.class);
  }

  /**
   * Convert an instance of Collection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

