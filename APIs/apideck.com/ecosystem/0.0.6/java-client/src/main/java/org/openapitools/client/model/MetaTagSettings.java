/*
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MetaTagSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:03.100845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetaTagSettings {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTION_CATEGORY_PAGE = "description_category_page";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_CATEGORY_PAGE)
  private String descriptionCategoryPage;

  public static final String SERIALIZED_NAME_DESCRIPTION_COLLECTION_PAGE = "description_collection_page";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_COLLECTION_PAGE)
  private String descriptionCollectionPage;

  public static final String SERIALIZED_NAME_DESCRIPTION_LISTING_PAGE = "description_listing_page";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_LISTING_PAGE)
  private String descriptionListingPage;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private String keywords;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_POSTFIX = "title_postfix";
  @SerializedName(SERIALIZED_NAME_TITLE_POSTFIX)
  private String titlePostfix;

  public MetaTagSettings() {
  }

  public MetaTagSettings description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MetaTagSettings descriptionCategoryPage(String descriptionCategoryPage) {
    this.descriptionCategoryPage = descriptionCategoryPage;
    return this;
  }

  /**
   * Get descriptionCategoryPage
   * @return descriptionCategoryPage
   */
  @javax.annotation.Nullable
  public String getDescriptionCategoryPage() {
    return descriptionCategoryPage;
  }

  public void setDescriptionCategoryPage(String descriptionCategoryPage) {
    this.descriptionCategoryPage = descriptionCategoryPage;
  }


  public MetaTagSettings descriptionCollectionPage(String descriptionCollectionPage) {
    this.descriptionCollectionPage = descriptionCollectionPage;
    return this;
  }

  /**
   * Get descriptionCollectionPage
   * @return descriptionCollectionPage
   */
  @javax.annotation.Nullable
  public String getDescriptionCollectionPage() {
    return descriptionCollectionPage;
  }

  public void setDescriptionCollectionPage(String descriptionCollectionPage) {
    this.descriptionCollectionPage = descriptionCollectionPage;
  }


  public MetaTagSettings descriptionListingPage(String descriptionListingPage) {
    this.descriptionListingPage = descriptionListingPage;
    return this;
  }

  /**
   * Get descriptionListingPage
   * @return descriptionListingPage
   */
  @javax.annotation.Nullable
  public String getDescriptionListingPage() {
    return descriptionListingPage;
  }

  public void setDescriptionListingPage(String descriptionListingPage) {
    this.descriptionListingPage = descriptionListingPage;
  }


  public MetaTagSettings keywords(String keywords) {
    this.keywords = keywords;
    return this;
  }

  /**
   * Get keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public String getKeywords() {
    return keywords;
  }

  public void setKeywords(String keywords) {
    this.keywords = keywords;
  }


  public MetaTagSettings title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MetaTagSettings titlePostfix(String titlePostfix) {
    this.titlePostfix = titlePostfix;
    return this;
  }

  /**
   * Get titlePostfix
   * @return titlePostfix
   */
  @javax.annotation.Nullable
  public String getTitlePostfix() {
    return titlePostfix;
  }

  public void setTitlePostfix(String titlePostfix) {
    this.titlePostfix = titlePostfix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetaTagSettings metaTagSettings = (MetaTagSettings) o;
    return Objects.equals(this.description, metaTagSettings.description) &&
        Objects.equals(this.descriptionCategoryPage, metaTagSettings.descriptionCategoryPage) &&
        Objects.equals(this.descriptionCollectionPage, metaTagSettings.descriptionCollectionPage) &&
        Objects.equals(this.descriptionListingPage, metaTagSettings.descriptionListingPage) &&
        Objects.equals(this.keywords, metaTagSettings.keywords) &&
        Objects.equals(this.title, metaTagSettings.title) &&
        Objects.equals(this.titlePostfix, metaTagSettings.titlePostfix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, descriptionCategoryPage, descriptionCollectionPage, descriptionListingPage, keywords, title, titlePostfix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetaTagSettings {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionCategoryPage: ").append(toIndentedString(descriptionCategoryPage)).append("\n");
    sb.append("    descriptionCollectionPage: ").append(toIndentedString(descriptionCollectionPage)).append("\n");
    sb.append("    descriptionListingPage: ").append(toIndentedString(descriptionListingPage)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titlePostfix: ").append(toIndentedString(titlePostfix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("description_category_page");
    openapiFields.add("description_collection_page");
    openapiFields.add("description_listing_page");
    openapiFields.add("keywords");
    openapiFields.add("title");
    openapiFields.add("title_postfix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetaTagSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetaTagSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetaTagSettings is not found in the empty JSON string", MetaTagSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetaTagSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetaTagSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("description_category_page") != null && !jsonObj.get("description_category_page").isJsonNull()) && !jsonObj.get("description_category_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_category_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_category_page").toString()));
      }
      if ((jsonObj.get("description_collection_page") != null && !jsonObj.get("description_collection_page").isJsonNull()) && !jsonObj.get("description_collection_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_collection_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_collection_page").toString()));
      }
      if ((jsonObj.get("description_listing_page") != null && !jsonObj.get("description_listing_page").isJsonNull()) && !jsonObj.get("description_listing_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_listing_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_listing_page").toString()));
      }
      if ((jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull()) && !jsonObj.get("keywords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("title_postfix") != null && !jsonObj.get("title_postfix").isJsonNull()) && !jsonObj.get("title_postfix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_postfix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_postfix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetaTagSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetaTagSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetaTagSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetaTagSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MetaTagSettings>() {
           @Override
           public void write(JsonWriter out, MetaTagSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetaTagSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetaTagSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetaTagSettings
   * @throws IOException if the JSON string is invalid with respect to MetaTagSettings
   */
  public static MetaTagSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetaTagSettings.class);
  }

  /**
   * Convert an instance of MetaTagSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

