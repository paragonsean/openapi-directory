/*
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:03.100845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomSettings {
  public static final String SERIALIZED_NAME_CSS = "css";
  @SerializedName(SERIALIZED_NAME_CSS)
  private String css;

  public static final String SERIALIZED_NAME_CSS_LINK = "css_link";
  @SerializedName(SERIALIZED_NAME_CSS_LINK)
  private String cssLink;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_HTML_FOOTER = "html_footer";
  @SerializedName(SERIALIZED_NAME_HTML_FOOTER)
  private String htmlFooter;

  public static final String SERIALIZED_NAME_HTML_NAV = "html_nav";
  @SerializedName(SERIALIZED_NAME_HTML_NAV)
  private String htmlNav;

  public static final String SERIALIZED_NAME_JAVA_SCRIPT_LINK = "java_script_link";
  @SerializedName(SERIALIZED_NAME_JAVA_SCRIPT_LINK)
  private String javaScriptLink;

  public CustomSettings() {
  }

  public CustomSettings css(String css) {
    this.css = css;
    return this;
  }

  /**
   * Get css
   * @return css
   */
  @javax.annotation.Nullable
  public String getCss() {
    return css;
  }

  public void setCss(String css) {
    this.css = css;
  }


  public CustomSettings cssLink(String cssLink) {
    this.cssLink = cssLink;
    return this;
  }

  /**
   * Get cssLink
   * @return cssLink
   */
  @javax.annotation.Nullable
  public String getCssLink() {
    return cssLink;
  }

  public void setCssLink(String cssLink) {
    this.cssLink = cssLink;
  }


  public CustomSettings domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public CustomSettings htmlFooter(String htmlFooter) {
    this.htmlFooter = htmlFooter;
    return this;
  }

  /**
   * Get htmlFooter
   * @return htmlFooter
   */
  @javax.annotation.Nullable
  public String getHtmlFooter() {
    return htmlFooter;
  }

  public void setHtmlFooter(String htmlFooter) {
    this.htmlFooter = htmlFooter;
  }


  public CustomSettings htmlNav(String htmlNav) {
    this.htmlNav = htmlNav;
    return this;
  }

  /**
   * Get htmlNav
   * @return htmlNav
   */
  @javax.annotation.Nullable
  public String getHtmlNav() {
    return htmlNav;
  }

  public void setHtmlNav(String htmlNav) {
    this.htmlNav = htmlNav;
  }


  public CustomSettings javaScriptLink(String javaScriptLink) {
    this.javaScriptLink = javaScriptLink;
    return this;
  }

  /**
   * Get javaScriptLink
   * @return javaScriptLink
   */
  @javax.annotation.Nullable
  public String getJavaScriptLink() {
    return javaScriptLink;
  }

  public void setJavaScriptLink(String javaScriptLink) {
    this.javaScriptLink = javaScriptLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomSettings customSettings = (CustomSettings) o;
    return Objects.equals(this.css, customSettings.css) &&
        Objects.equals(this.cssLink, customSettings.cssLink) &&
        Objects.equals(this.domain, customSettings.domain) &&
        Objects.equals(this.htmlFooter, customSettings.htmlFooter) &&
        Objects.equals(this.htmlNav, customSettings.htmlNav) &&
        Objects.equals(this.javaScriptLink, customSettings.javaScriptLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(css, cssLink, domain, htmlFooter, htmlNav, javaScriptLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomSettings {\n");
    sb.append("    css: ").append(toIndentedString(css)).append("\n");
    sb.append("    cssLink: ").append(toIndentedString(cssLink)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    htmlFooter: ").append(toIndentedString(htmlFooter)).append("\n");
    sb.append("    htmlNav: ").append(toIndentedString(htmlNav)).append("\n");
    sb.append("    javaScriptLink: ").append(toIndentedString(javaScriptLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("css");
    openapiFields.add("css_link");
    openapiFields.add("domain");
    openapiFields.add("html_footer");
    openapiFields.add("html_nav");
    openapiFields.add("java_script_link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomSettings is not found in the empty JSON string", CustomSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("css") != null && !jsonObj.get("css").isJsonNull()) && !jsonObj.get("css").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `css` to be a primitive type in the JSON string but got `%s`", jsonObj.get("css").toString()));
      }
      if ((jsonObj.get("css_link") != null && !jsonObj.get("css_link").isJsonNull()) && !jsonObj.get("css_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `css_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("css_link").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("html_footer") != null && !jsonObj.get("html_footer").isJsonNull()) && !jsonObj.get("html_footer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_footer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_footer").toString()));
      }
      if ((jsonObj.get("html_nav") != null && !jsonObj.get("html_nav").isJsonNull()) && !jsonObj.get("html_nav").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_nav` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_nav").toString()));
      }
      if ((jsonObj.get("java_script_link") != null && !jsonObj.get("java_script_link").isJsonNull()) && !jsonObj.get("java_script_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `java_script_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("java_script_link").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomSettings>() {
           @Override
           public void write(JsonWriter out, CustomSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomSettings
   * @throws IOException if the JSON string is invalid with respect to CustomSettings
   */
  public static CustomSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomSettings.class);
  }

  /**
   * Convert an instance of CustomSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

