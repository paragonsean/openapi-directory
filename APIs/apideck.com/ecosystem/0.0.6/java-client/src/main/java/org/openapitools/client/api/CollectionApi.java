/*
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetCollectionResponse;
import org.openapitools.client.model.GetCollectionsResponse;
import org.openapitools.client.model.GetListingsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CollectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for collectionListingsAll
     * @param ecosystemId  (required)
     * @param id ID of the record you are acting upon. (required)
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)
     * @param limit Number of records to return (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListingsAllCall(String ecosystemId, String id, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecosystems/{ecosystem_id}/collections/{id}/listings"
            .replace("{" + "ecosystem_id" + "}", localVarApiClient.escapeString(ecosystemId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionListingsAllValidateBeforeCall(String ecosystemId, String id, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemId' is set
        if (ecosystemId == null) {
            throw new ApiException("Missing the required parameter 'ecosystemId' when calling collectionListingsAll(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling collectionListingsAll(Async)");
        }

        return collectionListingsAllCall(ecosystemId, id, cursor, limit, _callback);

    }

    /**
     * List collection listings
     * List collection listings
     * @param ecosystemId  (required)
     * @param id ID of the record you are acting upon. (required)
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)
     * @param limit Number of records to return (optional, default to 50)
     * @return GetListingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listings </td><td>  -  </td></tr>
     </table>
     */
    public GetListingsResponse collectionListingsAll(String ecosystemId, String id, String cursor, Integer limit) throws ApiException {
        ApiResponse<GetListingsResponse> localVarResp = collectionListingsAllWithHttpInfo(ecosystemId, id, cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List collection listings
     * List collection listings
     * @param ecosystemId  (required)
     * @param id ID of the record you are acting upon. (required)
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)
     * @param limit Number of records to return (optional, default to 50)
     * @return ApiResponse&lt;GetListingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetListingsResponse> collectionListingsAllWithHttpInfo(String ecosystemId, String id, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = collectionListingsAllValidateBeforeCall(ecosystemId, id, cursor, limit, null);
        Type localVarReturnType = new TypeToken<GetListingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List collection listings (asynchronously)
     * List collection listings
     * @param ecosystemId  (required)
     * @param id ID of the record you are acting upon. (required)
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)
     * @param limit Number of records to return (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListingsAllAsync(String ecosystemId, String id, String cursor, Integer limit, final ApiCallback<GetListingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionListingsAllValidateBeforeCall(ecosystemId, id, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<GetListingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionsAll
     * @param ecosystemId  (required)
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)
     * @param limit Number of records to return (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collections </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionsAllCall(String ecosystemId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecosystems/{ecosystem_id}/collections"
            .replace("{" + "ecosystem_id" + "}", localVarApiClient.escapeString(ecosystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionsAllValidateBeforeCall(String ecosystemId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemId' is set
        if (ecosystemId == null) {
            throw new ApiException("Missing the required parameter 'ecosystemId' when calling collectionsAll(Async)");
        }

        return collectionsAllCall(ecosystemId, cursor, limit, _callback);

    }

    /**
     * List collections
     * List collections
     * @param ecosystemId  (required)
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)
     * @param limit Number of records to return (optional, default to 50)
     * @return GetCollectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collections </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionsResponse collectionsAll(String ecosystemId, String cursor, Integer limit) throws ApiException {
        ApiResponse<GetCollectionsResponse> localVarResp = collectionsAllWithHttpInfo(ecosystemId, cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List collections
     * List collections
     * @param ecosystemId  (required)
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)
     * @param limit Number of records to return (optional, default to 50)
     * @return ApiResponse&lt;GetCollectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collections </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCollectionsResponse> collectionsAllWithHttpInfo(String ecosystemId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = collectionsAllValidateBeforeCall(ecosystemId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<GetCollectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List collections (asynchronously)
     * List collections
     * @param ecosystemId  (required)
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)
     * @param limit Number of records to return (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collections </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionsAllAsync(String ecosystemId, String cursor, Integer limit, final ApiCallback<GetCollectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionsAllValidateBeforeCall(ecosystemId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<GetCollectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionsOne
     * @param ecosystemId  (required)
     * @param id ID of the record you are acting upon. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionsOneCall(String ecosystemId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ecosystems/{ecosystem_id}/collections/{id}"
            .replace("{" + "ecosystem_id" + "}", localVarApiClient.escapeString(ecosystemId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionsOneValidateBeforeCall(String ecosystemId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemId' is set
        if (ecosystemId == null) {
            throw new ApiException("Missing the required parameter 'ecosystemId' when calling collectionsOne(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling collectionsOne(Async)");
        }

        return collectionsOneCall(ecosystemId, id, _callback);

    }

    /**
     * Get collection
     * Get collection
     * @param ecosystemId  (required)
     * @param id ID of the record you are acting upon. (required)
     * @return GetCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionResponse collectionsOne(String ecosystemId, String id) throws ApiException {
        ApiResponse<GetCollectionResponse> localVarResp = collectionsOneWithHttpInfo(ecosystemId, id);
        return localVarResp.getData();
    }

    /**
     * Get collection
     * Get collection
     * @param ecosystemId  (required)
     * @param id ID of the record you are acting upon. (required)
     * @return ApiResponse&lt;GetCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCollectionResponse> collectionsOneWithHttpInfo(String ecosystemId, String id) throws ApiException {
        okhttp3.Call localVarCall = collectionsOneValidateBeforeCall(ecosystemId, id, null);
        Type localVarReturnType = new TypeToken<GetCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection (asynchronously)
     * Get collection
     * @param ecosystemId  (required)
     * @param id ID of the record you are acting upon. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionsOneAsync(String ecosystemId, String id, final ApiCallback<GetCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionsOneValidateBeforeCall(ecosystemId, id, _callback);
        Type localVarReturnType = new TypeToken<GetCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
