/*
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CTASettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:03.100845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CTASettings {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "background_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_BUTTON_BACKGROUND_COLOR = "button_background_color";
  @SerializedName(SERIALIZED_NAME_BUTTON_BACKGROUND_COLOR)
  private String buttonBackgroundColor;

  public static final String SERIALIZED_NAME_BUTTON_COLOR = "button_color";
  @SerializedName(SERIALIZED_NAME_BUTTON_COLOR)
  private String buttonColor;

  public static final String SERIALIZED_NAME_BUTTON_LABEL = "button_label";
  @SerializedName(SERIALIZED_NAME_BUTTON_LABEL)
  private String buttonLabel;

  public static final String SERIALIZED_NAME_BUTTON_LINK = "button_link";
  @SerializedName(SERIALIZED_NAME_BUTTON_LINK)
  private String buttonLink;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public CTASettings() {
  }

  public CTASettings backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public CTASettings buttonBackgroundColor(String buttonBackgroundColor) {
    this.buttonBackgroundColor = buttonBackgroundColor;
    return this;
  }

  /**
   * Get buttonBackgroundColor
   * @return buttonBackgroundColor
   */
  @javax.annotation.Nullable
  public String getButtonBackgroundColor() {
    return buttonBackgroundColor;
  }

  public void setButtonBackgroundColor(String buttonBackgroundColor) {
    this.buttonBackgroundColor = buttonBackgroundColor;
  }


  public CTASettings buttonColor(String buttonColor) {
    this.buttonColor = buttonColor;
    return this;
  }

  /**
   * Get buttonColor
   * @return buttonColor
   */
  @javax.annotation.Nullable
  public String getButtonColor() {
    return buttonColor;
  }

  public void setButtonColor(String buttonColor) {
    this.buttonColor = buttonColor;
  }


  public CTASettings buttonLabel(String buttonLabel) {
    this.buttonLabel = buttonLabel;
    return this;
  }

  /**
   * Get buttonLabel
   * @return buttonLabel
   */
  @javax.annotation.Nullable
  public String getButtonLabel() {
    return buttonLabel;
  }

  public void setButtonLabel(String buttonLabel) {
    this.buttonLabel = buttonLabel;
  }


  public CTASettings buttonLink(String buttonLink) {
    this.buttonLink = buttonLink;
    return this;
  }

  /**
   * Get buttonLink
   * @return buttonLink
   */
  @javax.annotation.Nullable
  public String getButtonLink() {
    return buttonLink;
  }

  public void setButtonLink(String buttonLink) {
    this.buttonLink = buttonLink;
  }


  public CTASettings color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public CTASettings description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CTASettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CTASettings title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CTASettings ctASettings = (CTASettings) o;
    return Objects.equals(this.backgroundColor, ctASettings.backgroundColor) &&
        Objects.equals(this.buttonBackgroundColor, ctASettings.buttonBackgroundColor) &&
        Objects.equals(this.buttonColor, ctASettings.buttonColor) &&
        Objects.equals(this.buttonLabel, ctASettings.buttonLabel) &&
        Objects.equals(this.buttonLink, ctASettings.buttonLink) &&
        Objects.equals(this.color, ctASettings.color) &&
        Objects.equals(this.description, ctASettings.description) &&
        Objects.equals(this.enabled, ctASettings.enabled) &&
        Objects.equals(this.title, ctASettings.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, buttonBackgroundColor, buttonColor, buttonLabel, buttonLink, color, description, enabled, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CTASettings {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    buttonBackgroundColor: ").append(toIndentedString(buttonBackgroundColor)).append("\n");
    sb.append("    buttonColor: ").append(toIndentedString(buttonColor)).append("\n");
    sb.append("    buttonLabel: ").append(toIndentedString(buttonLabel)).append("\n");
    sb.append("    buttonLink: ").append(toIndentedString(buttonLink)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("background_color");
    openapiFields.add("button_background_color");
    openapiFields.add("button_color");
    openapiFields.add("button_label");
    openapiFields.add("button_link");
    openapiFields.add("color");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CTASettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CTASettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CTASettings is not found in the empty JSON string", CTASettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CTASettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CTASettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("background_color") != null && !jsonObj.get("background_color").isJsonNull()) && !jsonObj.get("background_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_color").toString()));
      }
      if ((jsonObj.get("button_background_color") != null && !jsonObj.get("button_background_color").isJsonNull()) && !jsonObj.get("button_background_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button_background_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button_background_color").toString()));
      }
      if ((jsonObj.get("button_color") != null && !jsonObj.get("button_color").isJsonNull()) && !jsonObj.get("button_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button_color").toString()));
      }
      if ((jsonObj.get("button_label") != null && !jsonObj.get("button_label").isJsonNull()) && !jsonObj.get("button_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button_label").toString()));
      }
      if ((jsonObj.get("button_link") != null && !jsonObj.get("button_link").isJsonNull()) && !jsonObj.get("button_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button_link").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CTASettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CTASettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CTASettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CTASettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CTASettings>() {
           @Override
           public void write(JsonWriter out, CTASettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CTASettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CTASettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CTASettings
   * @throws IOException if the JSON string is invalid with respect to CTASettings
   */
  public static CTASettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CTASettings.class);
  }

  /**
   * Convert an instance of CTASettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

