/*
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:03.100845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardSettings {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "background_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_BORDER_COLOR = "border_color";
  @SerializedName(SERIALIZED_NAME_BORDER_COLOR)
  private String borderColor;

  public static final String SERIALIZED_NAME_BORDER_RADIUS = "border_radius";
  @SerializedName(SERIALIZED_NAME_BORDER_RADIUS)
  private String borderRadius;

  public static final String SERIALIZED_NAME_BORDER_SIZE = "border_size";
  @SerializedName(SERIALIZED_NAME_BORDER_SIZE)
  private String borderSize;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private Integer columns;

  public static final String SERIALIZED_NAME_DESCRIPTION_LINES = "description_lines";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_LINES)
  private Integer descriptionLines;

  public static final String SERIALIZED_NAME_ICON_BORDER_RADIUS = "icon_border_radius";
  @SerializedName(SERIALIZED_NAME_ICON_BORDER_RADIUS)
  private String iconBorderRadius;

  public static final String SERIALIZED_NAME_ICON_SHADOW_ENABLED = "icon_shadow_enabled";
  @SerializedName(SERIALIZED_NAME_ICON_SHADOW_ENABLED)
  private Boolean iconShadowEnabled;

  public static final String SERIALIZED_NAME_ICON_SIZE = "icon_size";
  @SerializedName(SERIALIZED_NAME_ICON_SIZE)
  private Integer iconSize;

  public static final String SERIALIZED_NAME_SHADOW_ENABLED = "shadow_enabled";
  @SerializedName(SERIALIZED_NAME_SHADOW_ENABLED)
  private Boolean shadowEnabled;

  public static final String SERIALIZED_NAME_SHOW_ACTION = "show_action";
  @SerializedName(SERIALIZED_NAME_SHOW_ACTION)
  private Boolean showAction;

  public static final String SERIALIZED_NAME_SHOW_BADGES = "show_badges";
  @SerializedName(SERIALIZED_NAME_SHOW_BADGES)
  private Boolean showBadges;

  public static final String SERIALIZED_NAME_SHOW_CATEGORY = "show_category";
  @SerializedName(SERIALIZED_NAME_SHOW_CATEGORY)
  private Boolean showCategory;

  public static final String SERIALIZED_NAME_SHOW_DESCRIPTION = "show_description";
  @SerializedName(SERIALIZED_NAME_SHOW_DESCRIPTION)
  private Boolean showDescription;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private String style;

  public CardSettings() {
  }

  public CardSettings backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public CardSettings borderColor(String borderColor) {
    this.borderColor = borderColor;
    return this;
  }

  /**
   * Get borderColor
   * @return borderColor
   */
  @javax.annotation.Nullable
  public String getBorderColor() {
    return borderColor;
  }

  public void setBorderColor(String borderColor) {
    this.borderColor = borderColor;
  }


  public CardSettings borderRadius(String borderRadius) {
    this.borderRadius = borderRadius;
    return this;
  }

  /**
   * Get borderRadius
   * @return borderRadius
   */
  @javax.annotation.Nullable
  public String getBorderRadius() {
    return borderRadius;
  }

  public void setBorderRadius(String borderRadius) {
    this.borderRadius = borderRadius;
  }


  public CardSettings borderSize(String borderSize) {
    this.borderSize = borderSize;
    return this;
  }

  /**
   * Get borderSize
   * @return borderSize
   */
  @javax.annotation.Nullable
  public String getBorderSize() {
    return borderSize;
  }

  public void setBorderSize(String borderSize) {
    this.borderSize = borderSize;
  }


  public CardSettings color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public CardSettings columns(Integer columns) {
    this.columns = columns;
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nullable
  public Integer getColumns() {
    return columns;
  }

  public void setColumns(Integer columns) {
    this.columns = columns;
  }


  public CardSettings descriptionLines(Integer descriptionLines) {
    this.descriptionLines = descriptionLines;
    return this;
  }

  /**
   * Get descriptionLines
   * @return descriptionLines
   */
  @javax.annotation.Nullable
  public Integer getDescriptionLines() {
    return descriptionLines;
  }

  public void setDescriptionLines(Integer descriptionLines) {
    this.descriptionLines = descriptionLines;
  }


  public CardSettings iconBorderRadius(String iconBorderRadius) {
    this.iconBorderRadius = iconBorderRadius;
    return this;
  }

  /**
   * Get iconBorderRadius
   * @return iconBorderRadius
   */
  @javax.annotation.Nullable
  public String getIconBorderRadius() {
    return iconBorderRadius;
  }

  public void setIconBorderRadius(String iconBorderRadius) {
    this.iconBorderRadius = iconBorderRadius;
  }


  public CardSettings iconShadowEnabled(Boolean iconShadowEnabled) {
    this.iconShadowEnabled = iconShadowEnabled;
    return this;
  }

  /**
   * Get iconShadowEnabled
   * @return iconShadowEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIconShadowEnabled() {
    return iconShadowEnabled;
  }

  public void setIconShadowEnabled(Boolean iconShadowEnabled) {
    this.iconShadowEnabled = iconShadowEnabled;
  }


  public CardSettings iconSize(Integer iconSize) {
    this.iconSize = iconSize;
    return this;
  }

  /**
   * Get iconSize
   * @return iconSize
   */
  @javax.annotation.Nullable
  public Integer getIconSize() {
    return iconSize;
  }

  public void setIconSize(Integer iconSize) {
    this.iconSize = iconSize;
  }


  public CardSettings shadowEnabled(Boolean shadowEnabled) {
    this.shadowEnabled = shadowEnabled;
    return this;
  }

  /**
   * Get shadowEnabled
   * @return shadowEnabled
   */
  @javax.annotation.Nullable
  public Boolean getShadowEnabled() {
    return shadowEnabled;
  }

  public void setShadowEnabled(Boolean shadowEnabled) {
    this.shadowEnabled = shadowEnabled;
  }


  public CardSettings showAction(Boolean showAction) {
    this.showAction = showAction;
    return this;
  }

  /**
   * Get showAction
   * @return showAction
   */
  @javax.annotation.Nullable
  public Boolean getShowAction() {
    return showAction;
  }

  public void setShowAction(Boolean showAction) {
    this.showAction = showAction;
  }


  public CardSettings showBadges(Boolean showBadges) {
    this.showBadges = showBadges;
    return this;
  }

  /**
   * Get showBadges
   * @return showBadges
   */
  @javax.annotation.Nullable
  public Boolean getShowBadges() {
    return showBadges;
  }

  public void setShowBadges(Boolean showBadges) {
    this.showBadges = showBadges;
  }


  public CardSettings showCategory(Boolean showCategory) {
    this.showCategory = showCategory;
    return this;
  }

  /**
   * Get showCategory
   * @return showCategory
   */
  @javax.annotation.Nullable
  public Boolean getShowCategory() {
    return showCategory;
  }

  public void setShowCategory(Boolean showCategory) {
    this.showCategory = showCategory;
  }


  public CardSettings showDescription(Boolean showDescription) {
    this.showDescription = showDescription;
    return this;
  }

  /**
   * Get showDescription
   * @return showDescription
   */
  @javax.annotation.Nullable
  public Boolean getShowDescription() {
    return showDescription;
  }

  public void setShowDescription(Boolean showDescription) {
    this.showDescription = showDescription;
  }


  public CardSettings style(String style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nullable
  public String getStyle() {
    return style;
  }

  public void setStyle(String style) {
    this.style = style;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardSettings cardSettings = (CardSettings) o;
    return Objects.equals(this.backgroundColor, cardSettings.backgroundColor) &&
        Objects.equals(this.borderColor, cardSettings.borderColor) &&
        Objects.equals(this.borderRadius, cardSettings.borderRadius) &&
        Objects.equals(this.borderSize, cardSettings.borderSize) &&
        Objects.equals(this.color, cardSettings.color) &&
        Objects.equals(this.columns, cardSettings.columns) &&
        Objects.equals(this.descriptionLines, cardSettings.descriptionLines) &&
        Objects.equals(this.iconBorderRadius, cardSettings.iconBorderRadius) &&
        Objects.equals(this.iconShadowEnabled, cardSettings.iconShadowEnabled) &&
        Objects.equals(this.iconSize, cardSettings.iconSize) &&
        Objects.equals(this.shadowEnabled, cardSettings.shadowEnabled) &&
        Objects.equals(this.showAction, cardSettings.showAction) &&
        Objects.equals(this.showBadges, cardSettings.showBadges) &&
        Objects.equals(this.showCategory, cardSettings.showCategory) &&
        Objects.equals(this.showDescription, cardSettings.showDescription) &&
        Objects.equals(this.style, cardSettings.style);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, borderColor, borderRadius, borderSize, color, columns, descriptionLines, iconBorderRadius, iconShadowEnabled, iconSize, shadowEnabled, showAction, showBadges, showCategory, showDescription, style);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardSettings {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    borderColor: ").append(toIndentedString(borderColor)).append("\n");
    sb.append("    borderRadius: ").append(toIndentedString(borderRadius)).append("\n");
    sb.append("    borderSize: ").append(toIndentedString(borderSize)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    descriptionLines: ").append(toIndentedString(descriptionLines)).append("\n");
    sb.append("    iconBorderRadius: ").append(toIndentedString(iconBorderRadius)).append("\n");
    sb.append("    iconShadowEnabled: ").append(toIndentedString(iconShadowEnabled)).append("\n");
    sb.append("    iconSize: ").append(toIndentedString(iconSize)).append("\n");
    sb.append("    shadowEnabled: ").append(toIndentedString(shadowEnabled)).append("\n");
    sb.append("    showAction: ").append(toIndentedString(showAction)).append("\n");
    sb.append("    showBadges: ").append(toIndentedString(showBadges)).append("\n");
    sb.append("    showCategory: ").append(toIndentedString(showCategory)).append("\n");
    sb.append("    showDescription: ").append(toIndentedString(showDescription)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("background_color");
    openapiFields.add("border_color");
    openapiFields.add("border_radius");
    openapiFields.add("border_size");
    openapiFields.add("color");
    openapiFields.add("columns");
    openapiFields.add("description_lines");
    openapiFields.add("icon_border_radius");
    openapiFields.add("icon_shadow_enabled");
    openapiFields.add("icon_size");
    openapiFields.add("shadow_enabled");
    openapiFields.add("show_action");
    openapiFields.add("show_badges");
    openapiFields.add("show_category");
    openapiFields.add("show_description");
    openapiFields.add("style");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardSettings is not found in the empty JSON string", CardSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("background_color") != null && !jsonObj.get("background_color").isJsonNull()) && !jsonObj.get("background_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_color").toString()));
      }
      if ((jsonObj.get("border_color") != null && !jsonObj.get("border_color").isJsonNull()) && !jsonObj.get("border_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `border_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("border_color").toString()));
      }
      if ((jsonObj.get("border_radius") != null && !jsonObj.get("border_radius").isJsonNull()) && !jsonObj.get("border_radius").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `border_radius` to be a primitive type in the JSON string but got `%s`", jsonObj.get("border_radius").toString()));
      }
      if ((jsonObj.get("border_size") != null && !jsonObj.get("border_size").isJsonNull()) && !jsonObj.get("border_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `border_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("border_size").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("icon_border_radius") != null && !jsonObj.get("icon_border_radius").isJsonNull()) && !jsonObj.get("icon_border_radius").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_border_radius` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_border_radius").toString()));
      }
      if ((jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) && !jsonObj.get("style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("style").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CardSettings>() {
           @Override
           public void write(JsonWriter out, CardSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardSettings
   * @throws IOException if the JSON string is invalid with respect to CardSettings
   */
  public static CardSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardSettings.class);
  }

  /**
   * Convert an instance of CardSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

