/*
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Logo;
import org.openapitools.client.model.Translation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Category
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:03.100845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Category {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LISTING_DESCRIPTION_TEXT_TEMPLATE = "listing_description_text_template";
  @SerializedName(SERIALIZED_NAME_LISTING_DESCRIPTION_TEXT_TEMPLATE)
  private String listingDescriptionTextTemplate;

  public static final String SERIALIZED_NAME_LISTING_FEATURES_TEXT_TEMPLATE = "listing_features_text_template";
  @SerializedName(SERIALIZED_NAME_LISTING_FEATURES_TEXT_TEMPLATE)
  private String listingFeaturesTextTemplate;

  public static final String SERIALIZED_NAME_LISTING_PRICING_TEXT_TEMPLATE = "listing_pricing_text_template";
  @SerializedName(SERIALIZED_NAME_LISTING_PRICING_TEXT_TEMPLATE)
  private String listingPricingTextTemplate;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private Logo logo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TRANSLATIONS = "translations";
  @SerializedName(SERIALIZED_NAME_TRANSLATIONS)
  private List<Translation> translations;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Category() {
  }

  public Category(
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  public Category count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public Category description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Category id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Category listingDescriptionTextTemplate(String listingDescriptionTextTemplate) {
    this.listingDescriptionTextTemplate = listingDescriptionTextTemplate;
    return this;
  }

  /**
   * Get listingDescriptionTextTemplate
   * @return listingDescriptionTextTemplate
   */
  @javax.annotation.Nullable
  public String getListingDescriptionTextTemplate() {
    return listingDescriptionTextTemplate;
  }

  public void setListingDescriptionTextTemplate(String listingDescriptionTextTemplate) {
    this.listingDescriptionTextTemplate = listingDescriptionTextTemplate;
  }


  public Category listingFeaturesTextTemplate(String listingFeaturesTextTemplate) {
    this.listingFeaturesTextTemplate = listingFeaturesTextTemplate;
    return this;
  }

  /**
   * Get listingFeaturesTextTemplate
   * @return listingFeaturesTextTemplate
   */
  @javax.annotation.Nullable
  public String getListingFeaturesTextTemplate() {
    return listingFeaturesTextTemplate;
  }

  public void setListingFeaturesTextTemplate(String listingFeaturesTextTemplate) {
    this.listingFeaturesTextTemplate = listingFeaturesTextTemplate;
  }


  public Category listingPricingTextTemplate(String listingPricingTextTemplate) {
    this.listingPricingTextTemplate = listingPricingTextTemplate;
    return this;
  }

  /**
   * Get listingPricingTextTemplate
   * @return listingPricingTextTemplate
   */
  @javax.annotation.Nullable
  public String getListingPricingTextTemplate() {
    return listingPricingTextTemplate;
  }

  public void setListingPricingTextTemplate(String listingPricingTextTemplate) {
    this.listingPricingTextTemplate = listingPricingTextTemplate;
  }


  public Category logo(Logo logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public Logo getLogo() {
    return logo;
  }

  public void setLogo(Logo logo) {
    this.logo = logo;
  }


  public Category name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Category slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public Category translations(List<Translation> translations) {
    this.translations = translations;
    return this;
  }

  public Category addTranslationsItem(Translation translationsItem) {
    if (this.translations == null) {
      this.translations = new ArrayList<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

  /**
   * Get translations
   * @return translations
   */
  @javax.annotation.Nullable
  public List<Translation> getTranslations() {
    return translations;
  }

  public void setTranslations(List<Translation> translations) {
    this.translations = translations;
  }


  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.count, category.count) &&
        Objects.equals(this.createdAt, category.createdAt) &&
        Objects.equals(this.description, category.description) &&
        Objects.equals(this.id, category.id) &&
        Objects.equals(this.listingDescriptionTextTemplate, category.listingDescriptionTextTemplate) &&
        Objects.equals(this.listingFeaturesTextTemplate, category.listingFeaturesTextTemplate) &&
        Objects.equals(this.listingPricingTextTemplate, category.listingPricingTextTemplate) &&
        Objects.equals(this.logo, category.logo) &&
        Objects.equals(this.name, category.name) &&
        Objects.equals(this.slug, category.slug) &&
        Objects.equals(this.translations, category.translations) &&
        Objects.equals(this.updatedAt, category.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, createdAt, description, id, listingDescriptionTextTemplate, listingFeaturesTextTemplate, listingPricingTextTemplate, logo, name, slug, translations, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    listingDescriptionTextTemplate: ").append(toIndentedString(listingDescriptionTextTemplate)).append("\n");
    sb.append("    listingFeaturesTextTemplate: ").append(toIndentedString(listingFeaturesTextTemplate)).append("\n");
    sb.append("    listingPricingTextTemplate: ").append(toIndentedString(listingPricingTextTemplate)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("listing_description_text_template");
    openapiFields.add("listing_features_text_template");
    openapiFields.add("listing_pricing_text_template");
    openapiFields.add("logo");
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("translations");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Category
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Category.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Category is not found in the empty JSON string", Category.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Category.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Category` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Category.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("listing_description_text_template") != null && !jsonObj.get("listing_description_text_template").isJsonNull()) && !jsonObj.get("listing_description_text_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_description_text_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_description_text_template").toString()));
      }
      if ((jsonObj.get("listing_features_text_template") != null && !jsonObj.get("listing_features_text_template").isJsonNull()) && !jsonObj.get("listing_features_text_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_features_text_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_features_text_template").toString()));
      }
      if ((jsonObj.get("listing_pricing_text_template") != null && !jsonObj.get("listing_pricing_text_template").isJsonNull()) && !jsonObj.get("listing_pricing_text_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_pricing_text_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_pricing_text_template").toString()));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        Logo.validateJsonElement(jsonObj.get("logo"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (jsonObj.get("translations") != null && !jsonObj.get("translations").isJsonNull()) {
        JsonArray jsonArraytranslations = jsonObj.getAsJsonArray("translations");
        if (jsonArraytranslations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("translations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `translations` to be an array in the JSON string but got `%s`", jsonObj.get("translations").toString()));
          }

          // validate the optional field `translations` (array)
          for (int i = 0; i < jsonArraytranslations.size(); i++) {
            Translation.validateJsonElement(jsonArraytranslations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Category.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Category' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Category> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Category.class));

       return (TypeAdapter<T>) new TypeAdapter<Category>() {
           @Override
           public void write(JsonWriter out, Category value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Category read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Category given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Category
   * @throws IOException if the JSON string is invalid with respect to Category
   */
  public static Category fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Category.class);
  }

  /**
   * Convert an instance of Category to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

