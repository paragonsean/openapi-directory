# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description_text_template: str=None, description_title: str=None, features_text_template: str=None, features_title: str=None, install_button_label: str=None, name_postfix: str=None, naming: str=None, native_integration_link: str=None, pricing_disabled: bool=None, pricing_text_template: str=None, pricing_title: str=None, sidebar_position: str=None):
        """ListingSettings - a model defined in OpenAPI

        :param description_text_template: The description_text_template of this ListingSettings.
        :param description_title: The description_title of this ListingSettings.
        :param features_text_template: The features_text_template of this ListingSettings.
        :param features_title: The features_title of this ListingSettings.
        :param install_button_label: The install_button_label of this ListingSettings.
        :param name_postfix: The name_postfix of this ListingSettings.
        :param naming: The naming of this ListingSettings.
        :param native_integration_link: The native_integration_link of this ListingSettings.
        :param pricing_disabled: The pricing_disabled of this ListingSettings.
        :param pricing_text_template: The pricing_text_template of this ListingSettings.
        :param pricing_title: The pricing_title of this ListingSettings.
        :param sidebar_position: The sidebar_position of this ListingSettings.
        """
        self.openapi_types = {
            'description_text_template': str,
            'description_title': str,
            'features_text_template': str,
            'features_title': str,
            'install_button_label': str,
            'name_postfix': str,
            'naming': str,
            'native_integration_link': str,
            'pricing_disabled': bool,
            'pricing_text_template': str,
            'pricing_title': str,
            'sidebar_position': str
        }

        self.attribute_map = {
            'description_text_template': 'description_text_template',
            'description_title': 'description_title',
            'features_text_template': 'features_text_template',
            'features_title': 'features_title',
            'install_button_label': 'install_button_label',
            'name_postfix': 'name_postfix',
            'naming': 'naming',
            'native_integration_link': 'native_integration_link',
            'pricing_disabled': 'pricing_disabled',
            'pricing_text_template': 'pricing_text_template',
            'pricing_title': 'pricing_title',
            'sidebar_position': 'sidebar_position'
        }

        self._description_text_template = description_text_template
        self._description_title = description_title
        self._features_text_template = features_text_template
        self._features_title = features_title
        self._install_button_label = install_button_label
        self._name_postfix = name_postfix
        self._naming = naming
        self._native_integration_link = native_integration_link
        self._pricing_disabled = pricing_disabled
        self._pricing_text_template = pricing_text_template
        self._pricing_title = pricing_title
        self._sidebar_position = sidebar_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListingSettings of this ListingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description_text_template(self):
        """Gets the description_text_template of this ListingSettings.


        :return: The description_text_template of this ListingSettings.
        :rtype: str
        """
        return self._description_text_template

    @description_text_template.setter
    def description_text_template(self, description_text_template):
        """Sets the description_text_template of this ListingSettings.


        :param description_text_template: The description_text_template of this ListingSettings.
        :type description_text_template: str
        """

        self._description_text_template = description_text_template

    @property
    def description_title(self):
        """Gets the description_title of this ListingSettings.


        :return: The description_title of this ListingSettings.
        :rtype: str
        """
        return self._description_title

    @description_title.setter
    def description_title(self, description_title):
        """Sets the description_title of this ListingSettings.


        :param description_title: The description_title of this ListingSettings.
        :type description_title: str
        """

        self._description_title = description_title

    @property
    def features_text_template(self):
        """Gets the features_text_template of this ListingSettings.


        :return: The features_text_template of this ListingSettings.
        :rtype: str
        """
        return self._features_text_template

    @features_text_template.setter
    def features_text_template(self, features_text_template):
        """Sets the features_text_template of this ListingSettings.


        :param features_text_template: The features_text_template of this ListingSettings.
        :type features_text_template: str
        """

        self._features_text_template = features_text_template

    @property
    def features_title(self):
        """Gets the features_title of this ListingSettings.


        :return: The features_title of this ListingSettings.
        :rtype: str
        """
        return self._features_title

    @features_title.setter
    def features_title(self, features_title):
        """Sets the features_title of this ListingSettings.


        :param features_title: The features_title of this ListingSettings.
        :type features_title: str
        """

        self._features_title = features_title

    @property
    def install_button_label(self):
        """Gets the install_button_label of this ListingSettings.


        :return: The install_button_label of this ListingSettings.
        :rtype: str
        """
        return self._install_button_label

    @install_button_label.setter
    def install_button_label(self, install_button_label):
        """Sets the install_button_label of this ListingSettings.


        :param install_button_label: The install_button_label of this ListingSettings.
        :type install_button_label: str
        """

        self._install_button_label = install_button_label

    @property
    def name_postfix(self):
        """Gets the name_postfix of this ListingSettings.


        :return: The name_postfix of this ListingSettings.
        :rtype: str
        """
        return self._name_postfix

    @name_postfix.setter
    def name_postfix(self, name_postfix):
        """Sets the name_postfix of this ListingSettings.


        :param name_postfix: The name_postfix of this ListingSettings.
        :type name_postfix: str
        """

        self._name_postfix = name_postfix

    @property
    def naming(self):
        """Gets the naming of this ListingSettings.


        :return: The naming of this ListingSettings.
        :rtype: str
        """
        return self._naming

    @naming.setter
    def naming(self, naming):
        """Sets the naming of this ListingSettings.


        :param naming: The naming of this ListingSettings.
        :type naming: str
        """
        allowed_values = ["LISTING", "LISTINGS", "INTEGRATIONS", "APPS", "CONNECTORS", "DATASOURCES", "ADDONS", "PLUGINS", "PARTNERS", "CHANNELS", "CONNECTIONS", "EXTENSIONS"]  # noqa: E501
        if naming not in allowed_values:
            raise ValueError(
                "Invalid value for `naming` ({0}), must be one of {1}"
                .format(naming, allowed_values)
            )

        self._naming = naming

    @property
    def native_integration_link(self):
        """Gets the native_integration_link of this ListingSettings.


        :return: The native_integration_link of this ListingSettings.
        :rtype: str
        """
        return self._native_integration_link

    @native_integration_link.setter
    def native_integration_link(self, native_integration_link):
        """Sets the native_integration_link of this ListingSettings.


        :param native_integration_link: The native_integration_link of this ListingSettings.
        :type native_integration_link: str
        """

        self._native_integration_link = native_integration_link

    @property
    def pricing_disabled(self):
        """Gets the pricing_disabled of this ListingSettings.


        :return: The pricing_disabled of this ListingSettings.
        :rtype: bool
        """
        return self._pricing_disabled

    @pricing_disabled.setter
    def pricing_disabled(self, pricing_disabled):
        """Sets the pricing_disabled of this ListingSettings.


        :param pricing_disabled: The pricing_disabled of this ListingSettings.
        :type pricing_disabled: bool
        """

        self._pricing_disabled = pricing_disabled

    @property
    def pricing_text_template(self):
        """Gets the pricing_text_template of this ListingSettings.


        :return: The pricing_text_template of this ListingSettings.
        :rtype: str
        """
        return self._pricing_text_template

    @pricing_text_template.setter
    def pricing_text_template(self, pricing_text_template):
        """Sets the pricing_text_template of this ListingSettings.


        :param pricing_text_template: The pricing_text_template of this ListingSettings.
        :type pricing_text_template: str
        """

        self._pricing_text_template = pricing_text_template

    @property
    def pricing_title(self):
        """Gets the pricing_title of this ListingSettings.


        :return: The pricing_title of this ListingSettings.
        :rtype: str
        """
        return self._pricing_title

    @pricing_title.setter
    def pricing_title(self, pricing_title):
        """Sets the pricing_title of this ListingSettings.


        :param pricing_title: The pricing_title of this ListingSettings.
        :type pricing_title: str
        """

        self._pricing_title = pricing_title

    @property
    def sidebar_position(self):
        """Gets the sidebar_position of this ListingSettings.


        :return: The sidebar_position of this ListingSettings.
        :rtype: str
        """
        return self._sidebar_position

    @sidebar_position.setter
    def sidebar_position(self, sidebar_position):
        """Sets the sidebar_position of this ListingSettings.


        :param sidebar_position: The sidebar_position of this ListingSettings.
        :type sidebar_position: str
        """
        allowed_values = ["TOP", "LEFT", "RIGHT", "HIDDEN"]  # noqa: E501
        if sidebar_position not in allowed_values:
            raise ValueError(
                "Invalid value for `sidebar_position` ({0}), must be one of {1}"
                .format(sidebar_position, allowed_values)
            )

        self._sidebar_position = sidebar_position
