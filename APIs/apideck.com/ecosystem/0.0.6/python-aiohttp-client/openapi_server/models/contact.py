# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, id: str=None, last_name: str=None, linked_in: str=None, name: str=None, role: str=None, twitter: str=None):
        """Contact - a model defined in OpenAPI

        :param email: The email of this Contact.
        :param first_name: The first_name of this Contact.
        :param id: The id of this Contact.
        :param last_name: The last_name of this Contact.
        :param linked_in: The linked_in of this Contact.
        :param name: The name of this Contact.
        :param role: The role of this Contact.
        :param twitter: The twitter of this Contact.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'linked_in': str,
            'name': str,
            'role': str,
            'twitter': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'linked_in': 'linked_in',
            'name': 'name',
            'role': 'role',
            'twitter': 'twitter'
        }

        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._linked_in = linked_in
        self._name = name
        self._role = role
        self._twitter = twitter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Contact.


        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.


        :param email: The email of this Contact.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Contact.


        :return: The first_name of this Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.


        :param first_name: The first_name of this Contact.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Contact.


        :return: The id of this Contact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.


        :param id: The id of this Contact.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Contact.


        :return: The last_name of this Contact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.


        :param last_name: The last_name of this Contact.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def linked_in(self):
        """Gets the linked_in of this Contact.


        :return: The linked_in of this Contact.
        :rtype: str
        """
        return self._linked_in

    @linked_in.setter
    def linked_in(self, linked_in):
        """Sets the linked_in of this Contact.


        :param linked_in: The linked_in of this Contact.
        :type linked_in: str
        """

        self._linked_in = linked_in

    @property
    def name(self):
        """Gets the name of this Contact.


        :return: The name of this Contact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contact.


        :param name: The name of this Contact.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role(self):
        """Gets the role of this Contact.


        :return: The role of this Contact.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Contact.


        :param role: The role of this Contact.
        :type role: str
        """

        self._role = role

    @property
    def twitter(self):
        """Gets the twitter of this Contact.


        :return: The twitter of this Contact.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Contact.


        :param twitter: The twitter of this Contact.
        :type twitter: str
        """

        self._twitter = twitter
