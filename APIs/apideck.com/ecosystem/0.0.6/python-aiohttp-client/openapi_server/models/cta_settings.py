# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CTASettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: str=None, button_background_color: str=None, button_color: str=None, button_label: str=None, button_link: str=None, color: str=None, description: str=None, enabled: bool=None, title: str=None):
        """CTASettings - a model defined in OpenAPI

        :param background_color: The background_color of this CTASettings.
        :param button_background_color: The button_background_color of this CTASettings.
        :param button_color: The button_color of this CTASettings.
        :param button_label: The button_label of this CTASettings.
        :param button_link: The button_link of this CTASettings.
        :param color: The color of this CTASettings.
        :param description: The description of this CTASettings.
        :param enabled: The enabled of this CTASettings.
        :param title: The title of this CTASettings.
        """
        self.openapi_types = {
            'background_color': str,
            'button_background_color': str,
            'button_color': str,
            'button_label': str,
            'button_link': str,
            'color': str,
            'description': str,
            'enabled': bool,
            'title': str
        }

        self.attribute_map = {
            'background_color': 'background_color',
            'button_background_color': 'button_background_color',
            'button_color': 'button_color',
            'button_label': 'button_label',
            'button_link': 'button_link',
            'color': 'color',
            'description': 'description',
            'enabled': 'enabled',
            'title': 'title'
        }

        self._background_color = background_color
        self._button_background_color = button_background_color
        self._button_color = button_color
        self._button_label = button_label
        self._button_link = button_link
        self._color = color
        self._description = description
        self._enabled = enabled
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CTASettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CTASettings of this CTASettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this CTASettings.


        :return: The background_color of this CTASettings.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this CTASettings.


        :param background_color: The background_color of this CTASettings.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def button_background_color(self):
        """Gets the button_background_color of this CTASettings.


        :return: The button_background_color of this CTASettings.
        :rtype: str
        """
        return self._button_background_color

    @button_background_color.setter
    def button_background_color(self, button_background_color):
        """Sets the button_background_color of this CTASettings.


        :param button_background_color: The button_background_color of this CTASettings.
        :type button_background_color: str
        """

        self._button_background_color = button_background_color

    @property
    def button_color(self):
        """Gets the button_color of this CTASettings.


        :return: The button_color of this CTASettings.
        :rtype: str
        """
        return self._button_color

    @button_color.setter
    def button_color(self, button_color):
        """Sets the button_color of this CTASettings.


        :param button_color: The button_color of this CTASettings.
        :type button_color: str
        """

        self._button_color = button_color

    @property
    def button_label(self):
        """Gets the button_label of this CTASettings.


        :return: The button_label of this CTASettings.
        :rtype: str
        """
        return self._button_label

    @button_label.setter
    def button_label(self, button_label):
        """Sets the button_label of this CTASettings.


        :param button_label: The button_label of this CTASettings.
        :type button_label: str
        """

        self._button_label = button_label

    @property
    def button_link(self):
        """Gets the button_link of this CTASettings.


        :return: The button_link of this CTASettings.
        :rtype: str
        """
        return self._button_link

    @button_link.setter
    def button_link(self, button_link):
        """Sets the button_link of this CTASettings.


        :param button_link: The button_link of this CTASettings.
        :type button_link: str
        """

        self._button_link = button_link

    @property
    def color(self):
        """Gets the color of this CTASettings.


        :return: The color of this CTASettings.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CTASettings.


        :param color: The color of this CTASettings.
        :type color: str
        """

        self._color = color

    @property
    def description(self):
        """Gets the description of this CTASettings.


        :return: The description of this CTASettings.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CTASettings.


        :param description: The description of this CTASettings.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this CTASettings.


        :return: The enabled of this CTASettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CTASettings.


        :param enabled: The enabled of this CTASettings.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def title(self):
        """Gets the title of this CTASettings.


        :return: The title of this CTASettings.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CTASettings.


        :param title: The title of this CTASettings.
        :type title: str
        """

        self._title = title
