# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logo import Logo
from openapi_server.models.translation import Translation
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, created_at: datetime=None, description: str=None, id: str=None, listing_description_text_template: str=None, listing_features_text_template: str=None, listing_pricing_text_template: str=None, logo: Logo=None, name: str=None, slug: str=None, translations: List[Translation]=None, updated_at: datetime=None):
        """Category - a model defined in OpenAPI

        :param count: The count of this Category.
        :param created_at: The created_at of this Category.
        :param description: The description of this Category.
        :param id: The id of this Category.
        :param listing_description_text_template: The listing_description_text_template of this Category.
        :param listing_features_text_template: The listing_features_text_template of this Category.
        :param listing_pricing_text_template: The listing_pricing_text_template of this Category.
        :param logo: The logo of this Category.
        :param name: The name of this Category.
        :param slug: The slug of this Category.
        :param translations: The translations of this Category.
        :param updated_at: The updated_at of this Category.
        """
        self.openapi_types = {
            'count': int,
            'created_at': datetime,
            'description': str,
            'id': str,
            'listing_description_text_template': str,
            'listing_features_text_template': str,
            'listing_pricing_text_template': str,
            'logo': Logo,
            'name': str,
            'slug': str,
            'translations': List[Translation],
            'updated_at': datetime
        }

        self.attribute_map = {
            'count': 'count',
            'created_at': 'created_at',
            'description': 'description',
            'id': 'id',
            'listing_description_text_template': 'listing_description_text_template',
            'listing_features_text_template': 'listing_features_text_template',
            'listing_pricing_text_template': 'listing_pricing_text_template',
            'logo': 'logo',
            'name': 'name',
            'slug': 'slug',
            'translations': 'translations',
            'updated_at': 'updated_at'
        }

        self._count = count
        self._created_at = created_at
        self._description = description
        self._id = id
        self._listing_description_text_template = listing_description_text_template
        self._listing_features_text_template = listing_features_text_template
        self._listing_pricing_text_template = listing_pricing_text_template
        self._logo = logo
        self._name = name
        self._slug = slug
        self._translations = translations
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Category.


        :return: The count of this Category.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Category.


        :param count: The count of this Category.
        :type count: int
        """

        self._count = count

    @property
    def created_at(self):
        """Gets the created_at of this Category.


        :return: The created_at of this Category.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Category.


        :param created_at: The created_at of this Category.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Category.


        :return: The description of this Category.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Category.


        :param description: The description of this Category.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Category.


        :return: The id of this Category.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.


        :param id: The id of this Category.
        :type id: str
        """

        self._id = id

    @property
    def listing_description_text_template(self):
        """Gets the listing_description_text_template of this Category.


        :return: The listing_description_text_template of this Category.
        :rtype: str
        """
        return self._listing_description_text_template

    @listing_description_text_template.setter
    def listing_description_text_template(self, listing_description_text_template):
        """Sets the listing_description_text_template of this Category.


        :param listing_description_text_template: The listing_description_text_template of this Category.
        :type listing_description_text_template: str
        """

        self._listing_description_text_template = listing_description_text_template

    @property
    def listing_features_text_template(self):
        """Gets the listing_features_text_template of this Category.


        :return: The listing_features_text_template of this Category.
        :rtype: str
        """
        return self._listing_features_text_template

    @listing_features_text_template.setter
    def listing_features_text_template(self, listing_features_text_template):
        """Sets the listing_features_text_template of this Category.


        :param listing_features_text_template: The listing_features_text_template of this Category.
        :type listing_features_text_template: str
        """

        self._listing_features_text_template = listing_features_text_template

    @property
    def listing_pricing_text_template(self):
        """Gets the listing_pricing_text_template of this Category.


        :return: The listing_pricing_text_template of this Category.
        :rtype: str
        """
        return self._listing_pricing_text_template

    @listing_pricing_text_template.setter
    def listing_pricing_text_template(self, listing_pricing_text_template):
        """Sets the listing_pricing_text_template of this Category.


        :param listing_pricing_text_template: The listing_pricing_text_template of this Category.
        :type listing_pricing_text_template: str
        """

        self._listing_pricing_text_template = listing_pricing_text_template

    @property
    def logo(self):
        """Gets the logo of this Category.


        :return: The logo of this Category.
        :rtype: Logo
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Category.


        :param logo: The logo of this Category.
        :type logo: Logo
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this Category.


        :return: The name of this Category.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.


        :param name: The name of this Category.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Category.


        :return: The slug of this Category.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Category.


        :param slug: The slug of this Category.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def translations(self):
        """Gets the translations of this Category.


        :return: The translations of this Category.
        :rtype: List[Translation]
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this Category.


        :param translations: The translations of this Category.
        :type translations: List[Translation]
        """

        self._translations = translations

    @property
    def updated_at(self):
        """Gets the updated_at of this Category.


        :return: The updated_at of this Category.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Category.


        :param updated_at: The updated_at of this Category.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
