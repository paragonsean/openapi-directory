# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.translation import Translation
from openapi_server import util


class Media(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, id: str=None, sequence: int=None, translations: List[Translation]=None, type: str=None, url: str=None):
        """Media - a model defined in OpenAPI

        :param caption: The caption of this Media.
        :param id: The id of this Media.
        :param sequence: The sequence of this Media.
        :param translations: The translations of this Media.
        :param type: The type of this Media.
        :param url: The url of this Media.
        """
        self.openapi_types = {
            'caption': str,
            'id': str,
            'sequence': int,
            'translations': List[Translation],
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'caption': 'caption',
            'id': 'id',
            'sequence': 'sequence',
            'translations': 'translations',
            'type': 'type',
            'url': 'url'
        }

        self._caption = caption
        self._id = id
        self._sequence = sequence
        self._translations = translations
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Media':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Media of this Media.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this Media.


        :return: The caption of this Media.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this Media.


        :param caption: The caption of this Media.
        :type caption: str
        """

        self._caption = caption

    @property
    def id(self):
        """Gets the id of this Media.


        :return: The id of this Media.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Media.


        :param id: The id of this Media.
        :type id: str
        """

        self._id = id

    @property
    def sequence(self):
        """Gets the sequence of this Media.


        :return: The sequence of this Media.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Media.


        :param sequence: The sequence of this Media.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def translations(self):
        """Gets the translations of this Media.


        :return: The translations of this Media.
        :rtype: List[Translation]
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this Media.


        :param translations: The translations of this Media.
        :type translations: List[Translation]
        """

        self._translations = translations

    @property
    def type(self):
        """Gets the type of this Media.


        :return: The type of this Media.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Media.


        :param type: The type of this Media.
        :type type: str
        """
        allowed_values = ["SCREENSHOT", "VIDEO"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this Media.


        :return: The url of this Media.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Media.


        :param url: The url of this Media.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
