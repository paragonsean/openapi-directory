# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server.models.file import File
from openapi_server import util


class Partner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company: str=None, contacts: List[Contact]=None, created_at: datetime=None, icon: File=None, id: str=None, listed: str=None, twitter: str=None, updated_at: datetime=None, website: str=None):
        """Partner - a model defined in OpenAPI

        :param company: The company of this Partner.
        :param contacts: The contacts of this Partner.
        :param created_at: The created_at of this Partner.
        :param icon: The icon of this Partner.
        :param id: The id of this Partner.
        :param listed: The listed of this Partner.
        :param twitter: The twitter of this Partner.
        :param updated_at: The updated_at of this Partner.
        :param website: The website of this Partner.
        """
        self.openapi_types = {
            'company': str,
            'contacts': List[Contact],
            'created_at': datetime,
            'icon': File,
            'id': str,
            'listed': str,
            'twitter': str,
            'updated_at': datetime,
            'website': str
        }

        self.attribute_map = {
            'company': 'company',
            'contacts': 'contacts',
            'created_at': 'created_at',
            'icon': 'icon',
            'id': 'id',
            'listed': 'listed',
            'twitter': 'twitter',
            'updated_at': 'updated_at',
            'website': 'website'
        }

        self._company = company
        self._contacts = contacts
        self._created_at = created_at
        self._icon = icon
        self._id = id
        self._listed = listed
        self._twitter = twitter
        self._updated_at = updated_at
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Partner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Partner of this Partner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company(self):
        """Gets the company of this Partner.


        :return: The company of this Partner.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Partner.


        :param company: The company of this Partner.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")

        self._company = company

    @property
    def contacts(self):
        """Gets the contacts of this Partner.


        :return: The contacts of this Partner.
        :rtype: List[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Partner.


        :param contacts: The contacts of this Partner.
        :type contacts: List[Contact]
        """

        self._contacts = contacts

    @property
    def created_at(self):
        """Gets the created_at of this Partner.


        :return: The created_at of this Partner.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Partner.


        :param created_at: The created_at of this Partner.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def icon(self):
        """Gets the icon of this Partner.


        :return: The icon of this Partner.
        :rtype: File
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Partner.


        :param icon: The icon of this Partner.
        :type icon: File
        """

        self._icon = icon

    @property
    def id(self):
        """Gets the id of this Partner.


        :return: The id of this Partner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Partner.


        :param id: The id of this Partner.
        :type id: str
        """

        self._id = id

    @property
    def listed(self):
        """Gets the listed of this Partner.


        :return: The listed of this Partner.
        :rtype: str
        """
        return self._listed

    @listed.setter
    def listed(self, listed):
        """Sets the listed of this Partner.


        :param listed: The listed of this Partner.
        :type listed: str
        """

        self._listed = listed

    @property
    def twitter(self):
        """Gets the twitter of this Partner.


        :return: The twitter of this Partner.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Partner.


        :param twitter: The twitter of this Partner.
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def updated_at(self):
        """Gets the updated_at of this Partner.


        :return: The updated_at of this Partner.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Partner.


        :param updated_at: The updated_at of this Partner.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def website(self):
        """Gets the website of this Partner.


        :return: The website of this Partner.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Partner.


        :param website: The website of this Partner.
        :type website: str
        """

        self._website = website
