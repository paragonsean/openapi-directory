# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cta_settings import CTASettings
from openapi_server.models.card_settings import CardSettings
from openapi_server.models.custom_settings import CustomSettings
from openapi_server.models.integration_settings import IntegrationSettings
from openapi_server.models.lead_form_settings import LeadFormSettings
from openapi_server.models.listing_settings import ListingSettings
from openapi_server.models.masthead_settings import MastheadSettings
from openapi_server.models.meta_tag_settings import MetaTagSettings
from openapi_server import util


class Ecosystem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about: str=None, alternatives_background_color: str=None, alternatives_color: str=None, attribution: bool=None, body_background_color: str=None, body_button_background_color: str=None, body_button_color: str=None, body_color: str=None, body_link_color: str=None, card_settings: CardSettings=None, categories_count_badge: bool=None, categories_show_max_items: int=None, collections_count_badge: bool=None, collections_title: str=None, create_link: str=None, created_at: datetime=None, cta_settings: CTASettings=None, custom_domain: str=None, custom_settings: CustomSettings=None, detail_pages_enabled: bool=None, footer_background_color: str=None, footer_color: str=None, google_site_verification_id: str=None, hide_install_buttons: bool=None, home_page_collection_category_cards: bool=None, home_page_show_all_listings: bool=None, id: str=None, installation_request_flow_enabled: bool=None, integration_settings: IntegrationSettings=None, is_published: bool=None, lead_form_settings: LeadFormSettings=None, listing_settings: ListingSettings=None, masthead_settings: MastheadSettings=None, menu_position: str=None, menu_style: str=None, meta_tag_settings: MetaTagSettings=None, name: str=None, navigation_background_color: str=None, navigation_color: str=None, navigation_logo_post_fix: str=None, navigation_mobile_menu_type: str=None, navigation_sticky: bool=None, primary_color: str=None, privacy_link: str=None, request_link: str=None, shadow_page_description: str=None, shadow_pages_enabled: bool=None, show_attribution_badge: bool=None, show_requested_listings: bool=None, slug: str=None, terms_link: str=None, total_published_listings: int=None, unify_application_id: str=None, updated_at: datetime=None, utm_campaign: str=None, website: str=None, zaps_menu_title: str=None, zaps_page_enabled: bool=None):
        """Ecosystem - a model defined in OpenAPI

        :param about: The about of this Ecosystem.
        :param alternatives_background_color: The alternatives_background_color of this Ecosystem.
        :param alternatives_color: The alternatives_color of this Ecosystem.
        :param attribution: The attribution of this Ecosystem.
        :param body_background_color: The body_background_color of this Ecosystem.
        :param body_button_background_color: The body_button_background_color of this Ecosystem.
        :param body_button_color: The body_button_color of this Ecosystem.
        :param body_color: The body_color of this Ecosystem.
        :param body_link_color: The body_link_color of this Ecosystem.
        :param card_settings: The card_settings of this Ecosystem.
        :param categories_count_badge: The categories_count_badge of this Ecosystem.
        :param categories_show_max_items: The categories_show_max_items of this Ecosystem.
        :param collections_count_badge: The collections_count_badge of this Ecosystem.
        :param collections_title: The collections_title of this Ecosystem.
        :param create_link: The create_link of this Ecosystem.
        :param created_at: The created_at of this Ecosystem.
        :param cta_settings: The cta_settings of this Ecosystem.
        :param custom_domain: The custom_domain of this Ecosystem.
        :param custom_settings: The custom_settings of this Ecosystem.
        :param detail_pages_enabled: The detail_pages_enabled of this Ecosystem.
        :param footer_background_color: The footer_background_color of this Ecosystem.
        :param footer_color: The footer_color of this Ecosystem.
        :param google_site_verification_id: The google_site_verification_id of this Ecosystem.
        :param hide_install_buttons: The hide_install_buttons of this Ecosystem.
        :param home_page_collection_category_cards: The home_page_collection_category_cards of this Ecosystem.
        :param home_page_show_all_listings: The home_page_show_all_listings of this Ecosystem.
        :param id: The id of this Ecosystem.
        :param installation_request_flow_enabled: The installation_request_flow_enabled of this Ecosystem.
        :param integration_settings: The integration_settings of this Ecosystem.
        :param is_published: The is_published of this Ecosystem.
        :param lead_form_settings: The lead_form_settings of this Ecosystem.
        :param listing_settings: The listing_settings of this Ecosystem.
        :param masthead_settings: The masthead_settings of this Ecosystem.
        :param menu_position: The menu_position of this Ecosystem.
        :param menu_style: The menu_style of this Ecosystem.
        :param meta_tag_settings: The meta_tag_settings of this Ecosystem.
        :param name: The name of this Ecosystem.
        :param navigation_background_color: The navigation_background_color of this Ecosystem.
        :param navigation_color: The navigation_color of this Ecosystem.
        :param navigation_logo_post_fix: The navigation_logo_post_fix of this Ecosystem.
        :param navigation_mobile_menu_type: The navigation_mobile_menu_type of this Ecosystem.
        :param navigation_sticky: The navigation_sticky of this Ecosystem.
        :param primary_color: The primary_color of this Ecosystem.
        :param privacy_link: The privacy_link of this Ecosystem.
        :param request_link: The request_link of this Ecosystem.
        :param shadow_page_description: The shadow_page_description of this Ecosystem.
        :param shadow_pages_enabled: The shadow_pages_enabled of this Ecosystem.
        :param show_attribution_badge: The show_attribution_badge of this Ecosystem.
        :param show_requested_listings: The show_requested_listings of this Ecosystem.
        :param slug: The slug of this Ecosystem.
        :param terms_link: The terms_link of this Ecosystem.
        :param total_published_listings: The total_published_listings of this Ecosystem.
        :param unify_application_id: The unify_application_id of this Ecosystem.
        :param updated_at: The updated_at of this Ecosystem.
        :param utm_campaign: The utm_campaign of this Ecosystem.
        :param website: The website of this Ecosystem.
        :param zaps_menu_title: The zaps_menu_title of this Ecosystem.
        :param zaps_page_enabled: The zaps_page_enabled of this Ecosystem.
        """
        self.openapi_types = {
            'about': str,
            'alternatives_background_color': str,
            'alternatives_color': str,
            'attribution': bool,
            'body_background_color': str,
            'body_button_background_color': str,
            'body_button_color': str,
            'body_color': str,
            'body_link_color': str,
            'card_settings': CardSettings,
            'categories_count_badge': bool,
            'categories_show_max_items': int,
            'collections_count_badge': bool,
            'collections_title': str,
            'create_link': str,
            'created_at': datetime,
            'cta_settings': CTASettings,
            'custom_domain': str,
            'custom_settings': CustomSettings,
            'detail_pages_enabled': bool,
            'footer_background_color': str,
            'footer_color': str,
            'google_site_verification_id': str,
            'hide_install_buttons': bool,
            'home_page_collection_category_cards': bool,
            'home_page_show_all_listings': bool,
            'id': str,
            'installation_request_flow_enabled': bool,
            'integration_settings': IntegrationSettings,
            'is_published': bool,
            'lead_form_settings': LeadFormSettings,
            'listing_settings': ListingSettings,
            'masthead_settings': MastheadSettings,
            'menu_position': str,
            'menu_style': str,
            'meta_tag_settings': MetaTagSettings,
            'name': str,
            'navigation_background_color': str,
            'navigation_color': str,
            'navigation_logo_post_fix': str,
            'navigation_mobile_menu_type': str,
            'navigation_sticky': bool,
            'primary_color': str,
            'privacy_link': str,
            'request_link': str,
            'shadow_page_description': str,
            'shadow_pages_enabled': bool,
            'show_attribution_badge': bool,
            'show_requested_listings': bool,
            'slug': str,
            'terms_link': str,
            'total_published_listings': int,
            'unify_application_id': str,
            'updated_at': datetime,
            'utm_campaign': str,
            'website': str,
            'zaps_menu_title': str,
            'zaps_page_enabled': bool
        }

        self.attribute_map = {
            'about': 'about',
            'alternatives_background_color': 'alternatives_background_color',
            'alternatives_color': 'alternatives_color',
            'attribution': 'attribution',
            'body_background_color': 'body_background_color',
            'body_button_background_color': 'body_button_background_color',
            'body_button_color': 'body_button_color',
            'body_color': 'body_color',
            'body_link_color': 'body_link_color',
            'card_settings': 'card_settings',
            'categories_count_badge': 'categories_count_badge',
            'categories_show_max_items': 'categories_show_max_items',
            'collections_count_badge': 'collections_count_badge',
            'collections_title': 'collections_title',
            'create_link': 'create_link',
            'created_at': 'created_at',
            'cta_settings': 'cta_settings',
            'custom_domain': 'custom_domain',
            'custom_settings': 'custom_settings',
            'detail_pages_enabled': 'detail_pages_enabled',
            'footer_background_color': 'footer_background_color',
            'footer_color': 'footer_color',
            'google_site_verification_id': 'google_site_verification_id',
            'hide_install_buttons': 'hide_install_buttons',
            'home_page_collection_category_cards': 'home_page_collection_category_cards',
            'home_page_show_all_listings': 'home_page_show_all_listings',
            'id': 'id',
            'installation_request_flow_enabled': 'installation_request_flow_enabled',
            'integration_settings': 'integration_settings',
            'is_published': 'is_published',
            'lead_form_settings': 'lead_form_settings',
            'listing_settings': 'listing_settings',
            'masthead_settings': 'masthead_settings',
            'menu_position': 'menu_position',
            'menu_style': 'menu_style',
            'meta_tag_settings': 'meta_tag_settings',
            'name': 'name',
            'navigation_background_color': 'navigation_background_color',
            'navigation_color': 'navigation_color',
            'navigation_logo_post_fix': 'navigation_logo_post_fix',
            'navigation_mobile_menu_type': 'navigation_mobile_menu_type',
            'navigation_sticky': 'navigation_sticky',
            'primary_color': 'primary_color',
            'privacy_link': 'privacy_link',
            'request_link': 'request_link',
            'shadow_page_description': 'shadow_page_description',
            'shadow_pages_enabled': 'shadow_pages_enabled',
            'show_attribution_badge': 'show_attribution_badge',
            'show_requested_listings': 'show_requested_listings',
            'slug': 'slug',
            'terms_link': 'terms_link',
            'total_published_listings': 'total_published_listings',
            'unify_application_id': 'unify_application_id',
            'updated_at': 'updated_at',
            'utm_campaign': 'utm_campaign',
            'website': 'website',
            'zaps_menu_title': 'zaps_menu_title',
            'zaps_page_enabled': 'zaps_page_enabled'
        }

        self._about = about
        self._alternatives_background_color = alternatives_background_color
        self._alternatives_color = alternatives_color
        self._attribution = attribution
        self._body_background_color = body_background_color
        self._body_button_background_color = body_button_background_color
        self._body_button_color = body_button_color
        self._body_color = body_color
        self._body_link_color = body_link_color
        self._card_settings = card_settings
        self._categories_count_badge = categories_count_badge
        self._categories_show_max_items = categories_show_max_items
        self._collections_count_badge = collections_count_badge
        self._collections_title = collections_title
        self._create_link = create_link
        self._created_at = created_at
        self._cta_settings = cta_settings
        self._custom_domain = custom_domain
        self._custom_settings = custom_settings
        self._detail_pages_enabled = detail_pages_enabled
        self._footer_background_color = footer_background_color
        self._footer_color = footer_color
        self._google_site_verification_id = google_site_verification_id
        self._hide_install_buttons = hide_install_buttons
        self._home_page_collection_category_cards = home_page_collection_category_cards
        self._home_page_show_all_listings = home_page_show_all_listings
        self._id = id
        self._installation_request_flow_enabled = installation_request_flow_enabled
        self._integration_settings = integration_settings
        self._is_published = is_published
        self._lead_form_settings = lead_form_settings
        self._listing_settings = listing_settings
        self._masthead_settings = masthead_settings
        self._menu_position = menu_position
        self._menu_style = menu_style
        self._meta_tag_settings = meta_tag_settings
        self._name = name
        self._navigation_background_color = navigation_background_color
        self._navigation_color = navigation_color
        self._navigation_logo_post_fix = navigation_logo_post_fix
        self._navigation_mobile_menu_type = navigation_mobile_menu_type
        self._navigation_sticky = navigation_sticky
        self._primary_color = primary_color
        self._privacy_link = privacy_link
        self._request_link = request_link
        self._shadow_page_description = shadow_page_description
        self._shadow_pages_enabled = shadow_pages_enabled
        self._show_attribution_badge = show_attribution_badge
        self._show_requested_listings = show_requested_listings
        self._slug = slug
        self._terms_link = terms_link
        self._total_published_listings = total_published_listings
        self._unify_application_id = unify_application_id
        self._updated_at = updated_at
        self._utm_campaign = utm_campaign
        self._website = website
        self._zaps_menu_title = zaps_menu_title
        self._zaps_page_enabled = zaps_page_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ecosystem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ecosystem of this Ecosystem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this Ecosystem.


        :return: The about of this Ecosystem.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this Ecosystem.


        :param about: The about of this Ecosystem.
        :type about: str
        """

        self._about = about

    @property
    def alternatives_background_color(self):
        """Gets the alternatives_background_color of this Ecosystem.


        :return: The alternatives_background_color of this Ecosystem.
        :rtype: str
        """
        return self._alternatives_background_color

    @alternatives_background_color.setter
    def alternatives_background_color(self, alternatives_background_color):
        """Sets the alternatives_background_color of this Ecosystem.


        :param alternatives_background_color: The alternatives_background_color of this Ecosystem.
        :type alternatives_background_color: str
        """

        self._alternatives_background_color = alternatives_background_color

    @property
    def alternatives_color(self):
        """Gets the alternatives_color of this Ecosystem.


        :return: The alternatives_color of this Ecosystem.
        :rtype: str
        """
        return self._alternatives_color

    @alternatives_color.setter
    def alternatives_color(self, alternatives_color):
        """Sets the alternatives_color of this Ecosystem.


        :param alternatives_color: The alternatives_color of this Ecosystem.
        :type alternatives_color: str
        """

        self._alternatives_color = alternatives_color

    @property
    def attribution(self):
        """Gets the attribution of this Ecosystem.


        :return: The attribution of this Ecosystem.
        :rtype: bool
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this Ecosystem.


        :param attribution: The attribution of this Ecosystem.
        :type attribution: bool
        """

        self._attribution = attribution

    @property
    def body_background_color(self):
        """Gets the body_background_color of this Ecosystem.


        :return: The body_background_color of this Ecosystem.
        :rtype: str
        """
        return self._body_background_color

    @body_background_color.setter
    def body_background_color(self, body_background_color):
        """Sets the body_background_color of this Ecosystem.


        :param body_background_color: The body_background_color of this Ecosystem.
        :type body_background_color: str
        """

        self._body_background_color = body_background_color

    @property
    def body_button_background_color(self):
        """Gets the body_button_background_color of this Ecosystem.


        :return: The body_button_background_color of this Ecosystem.
        :rtype: str
        """
        return self._body_button_background_color

    @body_button_background_color.setter
    def body_button_background_color(self, body_button_background_color):
        """Sets the body_button_background_color of this Ecosystem.


        :param body_button_background_color: The body_button_background_color of this Ecosystem.
        :type body_button_background_color: str
        """

        self._body_button_background_color = body_button_background_color

    @property
    def body_button_color(self):
        """Gets the body_button_color of this Ecosystem.


        :return: The body_button_color of this Ecosystem.
        :rtype: str
        """
        return self._body_button_color

    @body_button_color.setter
    def body_button_color(self, body_button_color):
        """Sets the body_button_color of this Ecosystem.


        :param body_button_color: The body_button_color of this Ecosystem.
        :type body_button_color: str
        """

        self._body_button_color = body_button_color

    @property
    def body_color(self):
        """Gets the body_color of this Ecosystem.


        :return: The body_color of this Ecosystem.
        :rtype: str
        """
        return self._body_color

    @body_color.setter
    def body_color(self, body_color):
        """Sets the body_color of this Ecosystem.


        :param body_color: The body_color of this Ecosystem.
        :type body_color: str
        """

        self._body_color = body_color

    @property
    def body_link_color(self):
        """Gets the body_link_color of this Ecosystem.


        :return: The body_link_color of this Ecosystem.
        :rtype: str
        """
        return self._body_link_color

    @body_link_color.setter
    def body_link_color(self, body_link_color):
        """Sets the body_link_color of this Ecosystem.


        :param body_link_color: The body_link_color of this Ecosystem.
        :type body_link_color: str
        """

        self._body_link_color = body_link_color

    @property
    def card_settings(self):
        """Gets the card_settings of this Ecosystem.


        :return: The card_settings of this Ecosystem.
        :rtype: CardSettings
        """
        return self._card_settings

    @card_settings.setter
    def card_settings(self, card_settings):
        """Sets the card_settings of this Ecosystem.


        :param card_settings: The card_settings of this Ecosystem.
        :type card_settings: CardSettings
        """

        self._card_settings = card_settings

    @property
    def categories_count_badge(self):
        """Gets the categories_count_badge of this Ecosystem.


        :return: The categories_count_badge of this Ecosystem.
        :rtype: bool
        """
        return self._categories_count_badge

    @categories_count_badge.setter
    def categories_count_badge(self, categories_count_badge):
        """Sets the categories_count_badge of this Ecosystem.


        :param categories_count_badge: The categories_count_badge of this Ecosystem.
        :type categories_count_badge: bool
        """

        self._categories_count_badge = categories_count_badge

    @property
    def categories_show_max_items(self):
        """Gets the categories_show_max_items of this Ecosystem.


        :return: The categories_show_max_items of this Ecosystem.
        :rtype: int
        """
        return self._categories_show_max_items

    @categories_show_max_items.setter
    def categories_show_max_items(self, categories_show_max_items):
        """Sets the categories_show_max_items of this Ecosystem.


        :param categories_show_max_items: The categories_show_max_items of this Ecosystem.
        :type categories_show_max_items: int
        """

        self._categories_show_max_items = categories_show_max_items

    @property
    def collections_count_badge(self):
        """Gets the collections_count_badge of this Ecosystem.


        :return: The collections_count_badge of this Ecosystem.
        :rtype: bool
        """
        return self._collections_count_badge

    @collections_count_badge.setter
    def collections_count_badge(self, collections_count_badge):
        """Sets the collections_count_badge of this Ecosystem.


        :param collections_count_badge: The collections_count_badge of this Ecosystem.
        :type collections_count_badge: bool
        """

        self._collections_count_badge = collections_count_badge

    @property
    def collections_title(self):
        """Gets the collections_title of this Ecosystem.


        :return: The collections_title of this Ecosystem.
        :rtype: str
        """
        return self._collections_title

    @collections_title.setter
    def collections_title(self, collections_title):
        """Sets the collections_title of this Ecosystem.


        :param collections_title: The collections_title of this Ecosystem.
        :type collections_title: str
        """

        self._collections_title = collections_title

    @property
    def create_link(self):
        """Gets the create_link of this Ecosystem.


        :return: The create_link of this Ecosystem.
        :rtype: str
        """
        return self._create_link

    @create_link.setter
    def create_link(self, create_link):
        """Sets the create_link of this Ecosystem.


        :param create_link: The create_link of this Ecosystem.
        :type create_link: str
        """

        self._create_link = create_link

    @property
    def created_at(self):
        """Gets the created_at of this Ecosystem.


        :return: The created_at of this Ecosystem.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Ecosystem.


        :param created_at: The created_at of this Ecosystem.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def cta_settings(self):
        """Gets the cta_settings of this Ecosystem.


        :return: The cta_settings of this Ecosystem.
        :rtype: CTASettings
        """
        return self._cta_settings

    @cta_settings.setter
    def cta_settings(self, cta_settings):
        """Sets the cta_settings of this Ecosystem.


        :param cta_settings: The cta_settings of this Ecosystem.
        :type cta_settings: CTASettings
        """

        self._cta_settings = cta_settings

    @property
    def custom_domain(self):
        """Gets the custom_domain of this Ecosystem.


        :return: The custom_domain of this Ecosystem.
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this Ecosystem.


        :param custom_domain: The custom_domain of this Ecosystem.
        :type custom_domain: str
        """

        self._custom_domain = custom_domain

    @property
    def custom_settings(self):
        """Gets the custom_settings of this Ecosystem.


        :return: The custom_settings of this Ecosystem.
        :rtype: CustomSettings
        """
        return self._custom_settings

    @custom_settings.setter
    def custom_settings(self, custom_settings):
        """Sets the custom_settings of this Ecosystem.


        :param custom_settings: The custom_settings of this Ecosystem.
        :type custom_settings: CustomSettings
        """

        self._custom_settings = custom_settings

    @property
    def detail_pages_enabled(self):
        """Gets the detail_pages_enabled of this Ecosystem.


        :return: The detail_pages_enabled of this Ecosystem.
        :rtype: bool
        """
        return self._detail_pages_enabled

    @detail_pages_enabled.setter
    def detail_pages_enabled(self, detail_pages_enabled):
        """Sets the detail_pages_enabled of this Ecosystem.


        :param detail_pages_enabled: The detail_pages_enabled of this Ecosystem.
        :type detail_pages_enabled: bool
        """

        self._detail_pages_enabled = detail_pages_enabled

    @property
    def footer_background_color(self):
        """Gets the footer_background_color of this Ecosystem.


        :return: The footer_background_color of this Ecosystem.
        :rtype: str
        """
        return self._footer_background_color

    @footer_background_color.setter
    def footer_background_color(self, footer_background_color):
        """Sets the footer_background_color of this Ecosystem.


        :param footer_background_color: The footer_background_color of this Ecosystem.
        :type footer_background_color: str
        """

        self._footer_background_color = footer_background_color

    @property
    def footer_color(self):
        """Gets the footer_color of this Ecosystem.


        :return: The footer_color of this Ecosystem.
        :rtype: str
        """
        return self._footer_color

    @footer_color.setter
    def footer_color(self, footer_color):
        """Sets the footer_color of this Ecosystem.


        :param footer_color: The footer_color of this Ecosystem.
        :type footer_color: str
        """

        self._footer_color = footer_color

    @property
    def google_site_verification_id(self):
        """Gets the google_site_verification_id of this Ecosystem.


        :return: The google_site_verification_id of this Ecosystem.
        :rtype: str
        """
        return self._google_site_verification_id

    @google_site_verification_id.setter
    def google_site_verification_id(self, google_site_verification_id):
        """Sets the google_site_verification_id of this Ecosystem.


        :param google_site_verification_id: The google_site_verification_id of this Ecosystem.
        :type google_site_verification_id: str
        """

        self._google_site_verification_id = google_site_verification_id

    @property
    def hide_install_buttons(self):
        """Gets the hide_install_buttons of this Ecosystem.


        :return: The hide_install_buttons of this Ecosystem.
        :rtype: bool
        """
        return self._hide_install_buttons

    @hide_install_buttons.setter
    def hide_install_buttons(self, hide_install_buttons):
        """Sets the hide_install_buttons of this Ecosystem.


        :param hide_install_buttons: The hide_install_buttons of this Ecosystem.
        :type hide_install_buttons: bool
        """

        self._hide_install_buttons = hide_install_buttons

    @property
    def home_page_collection_category_cards(self):
        """Gets the home_page_collection_category_cards of this Ecosystem.


        :return: The home_page_collection_category_cards of this Ecosystem.
        :rtype: bool
        """
        return self._home_page_collection_category_cards

    @home_page_collection_category_cards.setter
    def home_page_collection_category_cards(self, home_page_collection_category_cards):
        """Sets the home_page_collection_category_cards of this Ecosystem.


        :param home_page_collection_category_cards: The home_page_collection_category_cards of this Ecosystem.
        :type home_page_collection_category_cards: bool
        """

        self._home_page_collection_category_cards = home_page_collection_category_cards

    @property
    def home_page_show_all_listings(self):
        """Gets the home_page_show_all_listings of this Ecosystem.


        :return: The home_page_show_all_listings of this Ecosystem.
        :rtype: bool
        """
        return self._home_page_show_all_listings

    @home_page_show_all_listings.setter
    def home_page_show_all_listings(self, home_page_show_all_listings):
        """Sets the home_page_show_all_listings of this Ecosystem.


        :param home_page_show_all_listings: The home_page_show_all_listings of this Ecosystem.
        :type home_page_show_all_listings: bool
        """

        self._home_page_show_all_listings = home_page_show_all_listings

    @property
    def id(self):
        """Gets the id of this Ecosystem.


        :return: The id of this Ecosystem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ecosystem.


        :param id: The id of this Ecosystem.
        :type id: str
        """

        self._id = id

    @property
    def installation_request_flow_enabled(self):
        """Gets the installation_request_flow_enabled of this Ecosystem.


        :return: The installation_request_flow_enabled of this Ecosystem.
        :rtype: bool
        """
        return self._installation_request_flow_enabled

    @installation_request_flow_enabled.setter
    def installation_request_flow_enabled(self, installation_request_flow_enabled):
        """Sets the installation_request_flow_enabled of this Ecosystem.


        :param installation_request_flow_enabled: The installation_request_flow_enabled of this Ecosystem.
        :type installation_request_flow_enabled: bool
        """

        self._installation_request_flow_enabled = installation_request_flow_enabled

    @property
    def integration_settings(self):
        """Gets the integration_settings of this Ecosystem.


        :return: The integration_settings of this Ecosystem.
        :rtype: IntegrationSettings
        """
        return self._integration_settings

    @integration_settings.setter
    def integration_settings(self, integration_settings):
        """Sets the integration_settings of this Ecosystem.


        :param integration_settings: The integration_settings of this Ecosystem.
        :type integration_settings: IntegrationSettings
        """

        self._integration_settings = integration_settings

    @property
    def is_published(self):
        """Gets the is_published of this Ecosystem.


        :return: The is_published of this Ecosystem.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this Ecosystem.


        :param is_published: The is_published of this Ecosystem.
        :type is_published: bool
        """
        if is_published is None:
            raise ValueError("Invalid value for `is_published`, must not be `None`")

        self._is_published = is_published

    @property
    def lead_form_settings(self):
        """Gets the lead_form_settings of this Ecosystem.


        :return: The lead_form_settings of this Ecosystem.
        :rtype: LeadFormSettings
        """
        return self._lead_form_settings

    @lead_form_settings.setter
    def lead_form_settings(self, lead_form_settings):
        """Sets the lead_form_settings of this Ecosystem.


        :param lead_form_settings: The lead_form_settings of this Ecosystem.
        :type lead_form_settings: LeadFormSettings
        """

        self._lead_form_settings = lead_form_settings

    @property
    def listing_settings(self):
        """Gets the listing_settings of this Ecosystem.


        :return: The listing_settings of this Ecosystem.
        :rtype: ListingSettings
        """
        return self._listing_settings

    @listing_settings.setter
    def listing_settings(self, listing_settings):
        """Sets the listing_settings of this Ecosystem.


        :param listing_settings: The listing_settings of this Ecosystem.
        :type listing_settings: ListingSettings
        """

        self._listing_settings = listing_settings

    @property
    def masthead_settings(self):
        """Gets the masthead_settings of this Ecosystem.


        :return: The masthead_settings of this Ecosystem.
        :rtype: MastheadSettings
        """
        return self._masthead_settings

    @masthead_settings.setter
    def masthead_settings(self, masthead_settings):
        """Sets the masthead_settings of this Ecosystem.


        :param masthead_settings: The masthead_settings of this Ecosystem.
        :type masthead_settings: MastheadSettings
        """

        self._masthead_settings = masthead_settings

    @property
    def menu_position(self):
        """Gets the menu_position of this Ecosystem.


        :return: The menu_position of this Ecosystem.
        :rtype: str
        """
        return self._menu_position

    @menu_position.setter
    def menu_position(self, menu_position):
        """Sets the menu_position of this Ecosystem.


        :param menu_position: The menu_position of this Ecosystem.
        :type menu_position: str
        """
        allowed_values = ["TOP", "LEFT", "RIGHT", "HIDDEN"]  # noqa: E501
        if menu_position not in allowed_values:
            raise ValueError(
                "Invalid value for `menu_position` ({0}), must be one of {1}"
                .format(menu_position, allowed_values)
            )

        self._menu_position = menu_position

    @property
    def menu_style(self):
        """Gets the menu_style of this Ecosystem.


        :return: The menu_style of this Ecosystem.
        :rtype: str
        """
        return self._menu_style

    @menu_style.setter
    def menu_style(self, menu_style):
        """Sets the menu_style of this Ecosystem.


        :param menu_style: The menu_style of this Ecosystem.
        :type menu_style: str
        """
        allowed_values = ["LIST", "PILL", "FILTER"]  # noqa: E501
        if menu_style not in allowed_values:
            raise ValueError(
                "Invalid value for `menu_style` ({0}), must be one of {1}"
                .format(menu_style, allowed_values)
            )

        self._menu_style = menu_style

    @property
    def meta_tag_settings(self):
        """Gets the meta_tag_settings of this Ecosystem.


        :return: The meta_tag_settings of this Ecosystem.
        :rtype: MetaTagSettings
        """
        return self._meta_tag_settings

    @meta_tag_settings.setter
    def meta_tag_settings(self, meta_tag_settings):
        """Sets the meta_tag_settings of this Ecosystem.


        :param meta_tag_settings: The meta_tag_settings of this Ecosystem.
        :type meta_tag_settings: MetaTagSettings
        """

        self._meta_tag_settings = meta_tag_settings

    @property
    def name(self):
        """Gets the name of this Ecosystem.


        :return: The name of this Ecosystem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ecosystem.


        :param name: The name of this Ecosystem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def navigation_background_color(self):
        """Gets the navigation_background_color of this Ecosystem.


        :return: The navigation_background_color of this Ecosystem.
        :rtype: str
        """
        return self._navigation_background_color

    @navigation_background_color.setter
    def navigation_background_color(self, navigation_background_color):
        """Sets the navigation_background_color of this Ecosystem.


        :param navigation_background_color: The navigation_background_color of this Ecosystem.
        :type navigation_background_color: str
        """

        self._navigation_background_color = navigation_background_color

    @property
    def navigation_color(self):
        """Gets the navigation_color of this Ecosystem.


        :return: The navigation_color of this Ecosystem.
        :rtype: str
        """
        return self._navigation_color

    @navigation_color.setter
    def navigation_color(self, navigation_color):
        """Sets the navigation_color of this Ecosystem.


        :param navigation_color: The navigation_color of this Ecosystem.
        :type navigation_color: str
        """

        self._navigation_color = navigation_color

    @property
    def navigation_logo_post_fix(self):
        """Gets the navigation_logo_post_fix of this Ecosystem.


        :return: The navigation_logo_post_fix of this Ecosystem.
        :rtype: str
        """
        return self._navigation_logo_post_fix

    @navigation_logo_post_fix.setter
    def navigation_logo_post_fix(self, navigation_logo_post_fix):
        """Sets the navigation_logo_post_fix of this Ecosystem.


        :param navigation_logo_post_fix: The navigation_logo_post_fix of this Ecosystem.
        :type navigation_logo_post_fix: str
        """

        self._navigation_logo_post_fix = navigation_logo_post_fix

    @property
    def navigation_mobile_menu_type(self):
        """Gets the navigation_mobile_menu_type of this Ecosystem.


        :return: The navigation_mobile_menu_type of this Ecosystem.
        :rtype: str
        """
        return self._navigation_mobile_menu_type

    @navigation_mobile_menu_type.setter
    def navigation_mobile_menu_type(self, navigation_mobile_menu_type):
        """Sets the navigation_mobile_menu_type of this Ecosystem.


        :param navigation_mobile_menu_type: The navigation_mobile_menu_type of this Ecosystem.
        :type navigation_mobile_menu_type: str
        """
        allowed_values = ["ICON", "TEXT"]  # noqa: E501
        if navigation_mobile_menu_type not in allowed_values:
            raise ValueError(
                "Invalid value for `navigation_mobile_menu_type` ({0}), must be one of {1}"
                .format(navigation_mobile_menu_type, allowed_values)
            )

        self._navigation_mobile_menu_type = navigation_mobile_menu_type

    @property
    def navigation_sticky(self):
        """Gets the navigation_sticky of this Ecosystem.


        :return: The navigation_sticky of this Ecosystem.
        :rtype: bool
        """
        return self._navigation_sticky

    @navigation_sticky.setter
    def navigation_sticky(self, navigation_sticky):
        """Sets the navigation_sticky of this Ecosystem.


        :param navigation_sticky: The navigation_sticky of this Ecosystem.
        :type navigation_sticky: bool
        """

        self._navigation_sticky = navigation_sticky

    @property
    def primary_color(self):
        """Gets the primary_color of this Ecosystem.


        :return: The primary_color of this Ecosystem.
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """Sets the primary_color of this Ecosystem.


        :param primary_color: The primary_color of this Ecosystem.
        :type primary_color: str
        """

        self._primary_color = primary_color

    @property
    def privacy_link(self):
        """Gets the privacy_link of this Ecosystem.


        :return: The privacy_link of this Ecosystem.
        :rtype: str
        """
        return self._privacy_link

    @privacy_link.setter
    def privacy_link(self, privacy_link):
        """Sets the privacy_link of this Ecosystem.


        :param privacy_link: The privacy_link of this Ecosystem.
        :type privacy_link: str
        """

        self._privacy_link = privacy_link

    @property
    def request_link(self):
        """Gets the request_link of this Ecosystem.


        :return: The request_link of this Ecosystem.
        :rtype: str
        """
        return self._request_link

    @request_link.setter
    def request_link(self, request_link):
        """Sets the request_link of this Ecosystem.


        :param request_link: The request_link of this Ecosystem.
        :type request_link: str
        """

        self._request_link = request_link

    @property
    def shadow_page_description(self):
        """Gets the shadow_page_description of this Ecosystem.


        :return: The shadow_page_description of this Ecosystem.
        :rtype: str
        """
        return self._shadow_page_description

    @shadow_page_description.setter
    def shadow_page_description(self, shadow_page_description):
        """Sets the shadow_page_description of this Ecosystem.


        :param shadow_page_description: The shadow_page_description of this Ecosystem.
        :type shadow_page_description: str
        """

        self._shadow_page_description = shadow_page_description

    @property
    def shadow_pages_enabled(self):
        """Gets the shadow_pages_enabled of this Ecosystem.


        :return: The shadow_pages_enabled of this Ecosystem.
        :rtype: bool
        """
        return self._shadow_pages_enabled

    @shadow_pages_enabled.setter
    def shadow_pages_enabled(self, shadow_pages_enabled):
        """Sets the shadow_pages_enabled of this Ecosystem.


        :param shadow_pages_enabled: The shadow_pages_enabled of this Ecosystem.
        :type shadow_pages_enabled: bool
        """

        self._shadow_pages_enabled = shadow_pages_enabled

    @property
    def show_attribution_badge(self):
        """Gets the show_attribution_badge of this Ecosystem.


        :return: The show_attribution_badge of this Ecosystem.
        :rtype: bool
        """
        return self._show_attribution_badge

    @show_attribution_badge.setter
    def show_attribution_badge(self, show_attribution_badge):
        """Sets the show_attribution_badge of this Ecosystem.


        :param show_attribution_badge: The show_attribution_badge of this Ecosystem.
        :type show_attribution_badge: bool
        """

        self._show_attribution_badge = show_attribution_badge

    @property
    def show_requested_listings(self):
        """Gets the show_requested_listings of this Ecosystem.


        :return: The show_requested_listings of this Ecosystem.
        :rtype: bool
        """
        return self._show_requested_listings

    @show_requested_listings.setter
    def show_requested_listings(self, show_requested_listings):
        """Sets the show_requested_listings of this Ecosystem.


        :param show_requested_listings: The show_requested_listings of this Ecosystem.
        :type show_requested_listings: bool
        """

        self._show_requested_listings = show_requested_listings

    @property
    def slug(self):
        """Gets the slug of this Ecosystem.


        :return: The slug of this Ecosystem.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Ecosystem.


        :param slug: The slug of this Ecosystem.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def terms_link(self):
        """Gets the terms_link of this Ecosystem.


        :return: The terms_link of this Ecosystem.
        :rtype: str
        """
        return self._terms_link

    @terms_link.setter
    def terms_link(self, terms_link):
        """Sets the terms_link of this Ecosystem.


        :param terms_link: The terms_link of this Ecosystem.
        :type terms_link: str
        """

        self._terms_link = terms_link

    @property
    def total_published_listings(self):
        """Gets the total_published_listings of this Ecosystem.


        :return: The total_published_listings of this Ecosystem.
        :rtype: int
        """
        return self._total_published_listings

    @total_published_listings.setter
    def total_published_listings(self, total_published_listings):
        """Sets the total_published_listings of this Ecosystem.


        :param total_published_listings: The total_published_listings of this Ecosystem.
        :type total_published_listings: int
        """

        self._total_published_listings = total_published_listings

    @property
    def unify_application_id(self):
        """Gets the unify_application_id of this Ecosystem.


        :return: The unify_application_id of this Ecosystem.
        :rtype: str
        """
        return self._unify_application_id

    @unify_application_id.setter
    def unify_application_id(self, unify_application_id):
        """Sets the unify_application_id of this Ecosystem.


        :param unify_application_id: The unify_application_id of this Ecosystem.
        :type unify_application_id: str
        """

        self._unify_application_id = unify_application_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Ecosystem.


        :return: The updated_at of this Ecosystem.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Ecosystem.


        :param updated_at: The updated_at of this Ecosystem.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def utm_campaign(self):
        """Gets the utm_campaign of this Ecosystem.


        :return: The utm_campaign of this Ecosystem.
        :rtype: str
        """
        return self._utm_campaign

    @utm_campaign.setter
    def utm_campaign(self, utm_campaign):
        """Sets the utm_campaign of this Ecosystem.


        :param utm_campaign: The utm_campaign of this Ecosystem.
        :type utm_campaign: str
        """

        self._utm_campaign = utm_campaign

    @property
    def website(self):
        """Gets the website of this Ecosystem.


        :return: The website of this Ecosystem.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Ecosystem.


        :param website: The website of this Ecosystem.
        :type website: str
        """

        self._website = website

    @property
    def zaps_menu_title(self):
        """Gets the zaps_menu_title of this Ecosystem.


        :return: The zaps_menu_title of this Ecosystem.
        :rtype: str
        """
        return self._zaps_menu_title

    @zaps_menu_title.setter
    def zaps_menu_title(self, zaps_menu_title):
        """Sets the zaps_menu_title of this Ecosystem.


        :param zaps_menu_title: The zaps_menu_title of this Ecosystem.
        :type zaps_menu_title: str
        """

        self._zaps_menu_title = zaps_menu_title

    @property
    def zaps_page_enabled(self):
        """Gets the zaps_page_enabled of this Ecosystem.


        :return: The zaps_page_enabled of this Ecosystem.
        :rtype: bool
        """
        return self._zaps_page_enabled

    @zaps_page_enabled.setter
    def zaps_page_enabled(self, zaps_page_enabled):
        """Sets the zaps_page_enabled of this Ecosystem.


        :param zaps_page_enabled: The zaps_page_enabled of this Ecosystem.
        :type zaps_page_enabled: bool
        """

        self._zaps_page_enabled = zaps_page_enabled
