# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file import File
from openapi_server.models.translation import Translation
from openapi_server import util


class Collection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_background_color: str=None, card_background_image: File=None, card_columns: int=None, card_style: str=None, count: int=None, description: str=None, hidden_from_homepage: bool=None, id: str=None, logo: File=None, name: str=None, sequence: int=None, show_max_items_homepage: int=None, slug: str=None, translations: List[Translation]=None, visible: bool=None):
        """Collection - a model defined in OpenAPI

        :param card_background_color: The card_background_color of this Collection.
        :param card_background_image: The card_background_image of this Collection.
        :param card_columns: The card_columns of this Collection.
        :param card_style: The card_style of this Collection.
        :param count: The count of this Collection.
        :param description: The description of this Collection.
        :param hidden_from_homepage: The hidden_from_homepage of this Collection.
        :param id: The id of this Collection.
        :param logo: The logo of this Collection.
        :param name: The name of this Collection.
        :param sequence: The sequence of this Collection.
        :param show_max_items_homepage: The show_max_items_homepage of this Collection.
        :param slug: The slug of this Collection.
        :param translations: The translations of this Collection.
        :param visible: The visible of this Collection.
        """
        self.openapi_types = {
            'card_background_color': str,
            'card_background_image': File,
            'card_columns': int,
            'card_style': str,
            'count': int,
            'description': str,
            'hidden_from_homepage': bool,
            'id': str,
            'logo': File,
            'name': str,
            'sequence': int,
            'show_max_items_homepage': int,
            'slug': str,
            'translations': List[Translation],
            'visible': bool
        }

        self.attribute_map = {
            'card_background_color': 'card_background_color',
            'card_background_image': 'card_background_image',
            'card_columns': 'card_columns',
            'card_style': 'card_style',
            'count': 'count',
            'description': 'description',
            'hidden_from_homepage': 'hidden_from_homepage',
            'id': 'id',
            'logo': 'logo',
            'name': 'name',
            'sequence': 'sequence',
            'show_max_items_homepage': 'show_max_items_homepage',
            'slug': 'slug',
            'translations': 'translations',
            'visible': 'visible'
        }

        self._card_background_color = card_background_color
        self._card_background_image = card_background_image
        self._card_columns = card_columns
        self._card_style = card_style
        self._count = count
        self._description = description
        self._hidden_from_homepage = hidden_from_homepage
        self._id = id
        self._logo = logo
        self._name = name
        self._sequence = sequence
        self._show_max_items_homepage = show_max_items_homepage
        self._slug = slug
        self._translations = translations
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collection of this Collection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_background_color(self):
        """Gets the card_background_color of this Collection.


        :return: The card_background_color of this Collection.
        :rtype: str
        """
        return self._card_background_color

    @card_background_color.setter
    def card_background_color(self, card_background_color):
        """Sets the card_background_color of this Collection.


        :param card_background_color: The card_background_color of this Collection.
        :type card_background_color: str
        """

        self._card_background_color = card_background_color

    @property
    def card_background_image(self):
        """Gets the card_background_image of this Collection.


        :return: The card_background_image of this Collection.
        :rtype: File
        """
        return self._card_background_image

    @card_background_image.setter
    def card_background_image(self, card_background_image):
        """Sets the card_background_image of this Collection.


        :param card_background_image: The card_background_image of this Collection.
        :type card_background_image: File
        """

        self._card_background_image = card_background_image

    @property
    def card_columns(self):
        """Gets the card_columns of this Collection.


        :return: The card_columns of this Collection.
        :rtype: int
        """
        return self._card_columns

    @card_columns.setter
    def card_columns(self, card_columns):
        """Sets the card_columns of this Collection.


        :param card_columns: The card_columns of this Collection.
        :type card_columns: int
        """

        self._card_columns = card_columns

    @property
    def card_style(self):
        """Gets the card_style of this Collection.


        :return: The card_style of this Collection.
        :rtype: str
        """
        return self._card_style

    @card_style.setter
    def card_style(self, card_style):
        """Sets the card_style of this Collection.


        :param card_style: The card_style of this Collection.
        :type card_style: str
        """

        self._card_style = card_style

    @property
    def count(self):
        """Gets the count of this Collection.


        :return: The count of this Collection.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Collection.


        :param count: The count of this Collection.
        :type count: int
        """

        self._count = count

    @property
    def description(self):
        """Gets the description of this Collection.


        :return: The description of this Collection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Collection.


        :param description: The description of this Collection.
        :type description: str
        """

        self._description = description

    @property
    def hidden_from_homepage(self):
        """Gets the hidden_from_homepage of this Collection.


        :return: The hidden_from_homepage of this Collection.
        :rtype: bool
        """
        return self._hidden_from_homepage

    @hidden_from_homepage.setter
    def hidden_from_homepage(self, hidden_from_homepage):
        """Sets the hidden_from_homepage of this Collection.


        :param hidden_from_homepage: The hidden_from_homepage of this Collection.
        :type hidden_from_homepage: bool
        """

        self._hidden_from_homepage = hidden_from_homepage

    @property
    def id(self):
        """Gets the id of this Collection.


        :return: The id of this Collection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Collection.


        :param id: The id of this Collection.
        :type id: str
        """

        self._id = id

    @property
    def logo(self):
        """Gets the logo of this Collection.


        :return: The logo of this Collection.
        :rtype: File
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Collection.


        :param logo: The logo of this Collection.
        :type logo: File
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this Collection.


        :return: The name of this Collection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Collection.


        :param name: The name of this Collection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sequence(self):
        """Gets the sequence of this Collection.


        :return: The sequence of this Collection.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Collection.


        :param sequence: The sequence of this Collection.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def show_max_items_homepage(self):
        """Gets the show_max_items_homepage of this Collection.


        :return: The show_max_items_homepage of this Collection.
        :rtype: int
        """
        return self._show_max_items_homepage

    @show_max_items_homepage.setter
    def show_max_items_homepage(self, show_max_items_homepage):
        """Sets the show_max_items_homepage of this Collection.


        :param show_max_items_homepage: The show_max_items_homepage of this Collection.
        :type show_max_items_homepage: int
        """

        self._show_max_items_homepage = show_max_items_homepage

    @property
    def slug(self):
        """Gets the slug of this Collection.


        :return: The slug of this Collection.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Collection.


        :param slug: The slug of this Collection.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def translations(self):
        """Gets the translations of this Collection.


        :return: The translations of this Collection.
        :rtype: List[Translation]
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this Collection.


        :param translations: The translations of this Collection.
        :type translations: List[Translation]
        """

        self._translations = translations

    @property
    def visible(self):
        """Gets the visible of this Collection.


        :return: The visible of this Collection.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Collection.


        :param visible: The visible of this Collection.
        :type visible: bool
        """
        if visible is None:
            raise ValueError("Invalid value for `visible`, must not be `None`")

        self._visible = visible
