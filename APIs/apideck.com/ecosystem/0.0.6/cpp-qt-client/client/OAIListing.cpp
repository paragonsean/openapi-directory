/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListing::OAIListing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListing::OAIListing() {
    this->initializeModel();
}

OAIListing::~OAIListing() {}

void OAIListing::initializeModel() {

    m_automate_id_isSet = false;
    m_automate_id_isValid = false;

    m_blendr_id_isSet = false;
    m_blendr_id_isValid = false;

    m_card_background_color_isSet = false;
    m_card_background_color_isValid = false;

    m_card_background_image_isSet = false;
    m_card_background_image_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_cloud_service_id_isSet = false;
    m_cloud_service_id_isValid = false;

    m_collections_isSet = false;
    m_collections_isValid = false;

    m_combidesk_id_isSet = false;
    m_combidesk_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_detail_page_disabled_isSet = false;
    m_detail_page_disabled_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_integromat_id_isSet = false;
    m_integromat_id_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_meta_tag_description_isSet = false;
    m_meta_tag_description_isValid = false;

    m_meta_tag_keywords_isSet = false;
    m_meta_tag_keywords_isValid = false;

    m_meta_tag_title_isSet = false;
    m_meta_tag_title_isValid = false;

    m_microsoft_flow_id_isSet = false;
    m_microsoft_flow_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_native_integration_isSet = false;
    m_native_integration_isValid = false;

    m_native_integration_link_isSet = false;
    m_native_integration_link_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_piesync_id_isSet = false;
    m_piesync_id_isValid = false;

    m_pricing_isSet = false;
    m_pricing_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_screenshots_isSet = false;
    m_screenshots_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_sticky_isSet = false;
    m_sticky_isValid = false;

    m_tag_line_isSet = false;
    m_tag_line_isValid = false;

    m_third_party_integration_isSet = false;
    m_third_party_integration_isValid = false;

    m_third_party_integration_link_isSet = false;
    m_third_party_integration_link_isValid = false;

    m_translations_isSet = false;
    m_translations_isValid = false;

    m_tray_io_id_isSet = false;
    m_tray_io_id_isValid = false;

    m_unify_connector_id_isSet = false;
    m_unify_connector_id_isValid = false;

    m_upcoming_isSet = false;
    m_upcoming_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_zapier_id_isSet = false;
    m_zapier_id_isValid = false;
}

void OAIListing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListing::fromJsonObject(QJsonObject json) {

    m_automate_id_isValid = ::OpenAPI::fromJsonValue(m_automate_id, json[QString("automate_id")]);
    m_automate_id_isSet = !json[QString("automate_id")].isNull() && m_automate_id_isValid;

    m_blendr_id_isValid = ::OpenAPI::fromJsonValue(m_blendr_id, json[QString("blendr_id")]);
    m_blendr_id_isSet = !json[QString("blendr_id")].isNull() && m_blendr_id_isValid;

    m_card_background_color_isValid = ::OpenAPI::fromJsonValue(m_card_background_color, json[QString("card_background_color")]);
    m_card_background_color_isSet = !json[QString("card_background_color")].isNull() && m_card_background_color_isValid;

    m_card_background_image_isValid = ::OpenAPI::fromJsonValue(m_card_background_image, json[QString("card_background_image")]);
    m_card_background_image_isSet = !json[QString("card_background_image")].isNull() && m_card_background_image_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_cloud_service_id_isValid = ::OpenAPI::fromJsonValue(m_cloud_service_id, json[QString("cloud_service_id")]);
    m_cloud_service_id_isSet = !json[QString("cloud_service_id")].isNull() && m_cloud_service_id_isValid;

    m_collections_isValid = ::OpenAPI::fromJsonValue(m_collections, json[QString("collections")]);
    m_collections_isSet = !json[QString("collections")].isNull() && m_collections_isValid;

    m_combidesk_id_isValid = ::OpenAPI::fromJsonValue(m_combidesk_id, json[QString("combidesk_id")]);
    m_combidesk_id_isSet = !json[QString("combidesk_id")].isNull() && m_combidesk_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_detail_page_disabled_isValid = ::OpenAPI::fromJsonValue(m_detail_page_disabled, json[QString("detail_page_disabled")]);
    m_detail_page_disabled_isSet = !json[QString("detail_page_disabled")].isNull() && m_detail_page_disabled_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_integromat_id_isValid = ::OpenAPI::fromJsonValue(m_integromat_id, json[QString("integromat_id")]);
    m_integromat_id_isSet = !json[QString("integromat_id")].isNull() && m_integromat_id_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_meta_tag_description_isValid = ::OpenAPI::fromJsonValue(m_meta_tag_description, json[QString("meta_tag_description")]);
    m_meta_tag_description_isSet = !json[QString("meta_tag_description")].isNull() && m_meta_tag_description_isValid;

    m_meta_tag_keywords_isValid = ::OpenAPI::fromJsonValue(m_meta_tag_keywords, json[QString("meta_tag_keywords")]);
    m_meta_tag_keywords_isSet = !json[QString("meta_tag_keywords")].isNull() && m_meta_tag_keywords_isValid;

    m_meta_tag_title_isValid = ::OpenAPI::fromJsonValue(m_meta_tag_title, json[QString("meta_tag_title")]);
    m_meta_tag_title_isSet = !json[QString("meta_tag_title")].isNull() && m_meta_tag_title_isValid;

    m_microsoft_flow_id_isValid = ::OpenAPI::fromJsonValue(m_microsoft_flow_id, json[QString("microsoft_flow_id")]);
    m_microsoft_flow_id_isSet = !json[QString("microsoft_flow_id")].isNull() && m_microsoft_flow_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_native_integration_isValid = ::OpenAPI::fromJsonValue(m_native_integration, json[QString("native_integration")]);
    m_native_integration_isSet = !json[QString("native_integration")].isNull() && m_native_integration_isValid;

    m_native_integration_link_isValid = ::OpenAPI::fromJsonValue(m_native_integration_link, json[QString("native_integration_link")]);
    m_native_integration_link_isSet = !json[QString("native_integration_link")].isNull() && m_native_integration_link_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_piesync_id_isValid = ::OpenAPI::fromJsonValue(m_piesync_id, json[QString("piesync_id")]);
    m_piesync_id_isSet = !json[QString("piesync_id")].isNull() && m_piesync_id_isValid;

    m_pricing_isValid = ::OpenAPI::fromJsonValue(m_pricing, json[QString("pricing")]);
    m_pricing_isSet = !json[QString("pricing")].isNull() && m_pricing_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("published_at")]);
    m_published_at_isSet = !json[QString("published_at")].isNull() && m_published_at_isValid;

    m_screenshots_isValid = ::OpenAPI::fromJsonValue(m_screenshots, json[QString("screenshots")]);
    m_screenshots_isSet = !json[QString("screenshots")].isNull() && m_screenshots_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segment_id")]);
    m_segment_id_isSet = !json[QString("segment_id")].isNull() && m_segment_id_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_sticky_isValid = ::OpenAPI::fromJsonValue(m_sticky, json[QString("sticky")]);
    m_sticky_isSet = !json[QString("sticky")].isNull() && m_sticky_isValid;

    m_tag_line_isValid = ::OpenAPI::fromJsonValue(m_tag_line, json[QString("tag_line")]);
    m_tag_line_isSet = !json[QString("tag_line")].isNull() && m_tag_line_isValid;

    m_third_party_integration_isValid = ::OpenAPI::fromJsonValue(m_third_party_integration, json[QString("third_party_integration")]);
    m_third_party_integration_isSet = !json[QString("third_party_integration")].isNull() && m_third_party_integration_isValid;

    m_third_party_integration_link_isValid = ::OpenAPI::fromJsonValue(m_third_party_integration_link, json[QString("third_party_integration_link")]);
    m_third_party_integration_link_isSet = !json[QString("third_party_integration_link")].isNull() && m_third_party_integration_link_isValid;

    m_translations_isValid = ::OpenAPI::fromJsonValue(m_translations, json[QString("translations")]);
    m_translations_isSet = !json[QString("translations")].isNull() && m_translations_isValid;

    m_tray_io_id_isValid = ::OpenAPI::fromJsonValue(m_tray_io_id, json[QString("tray_io_id")]);
    m_tray_io_id_isSet = !json[QString("tray_io_id")].isNull() && m_tray_io_id_isValid;

    m_unify_connector_id_isValid = ::OpenAPI::fromJsonValue(m_unify_connector_id, json[QString("unify_connector_id")]);
    m_unify_connector_id_isSet = !json[QString("unify_connector_id")].isNull() && m_unify_connector_id_isValid;

    m_upcoming_isValid = ::OpenAPI::fromJsonValue(m_upcoming, json[QString("upcoming")]);
    m_upcoming_isSet = !json[QString("upcoming")].isNull() && m_upcoming_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_zapier_id_isValid = ::OpenAPI::fromJsonValue(m_zapier_id, json[QString("zapier_id")]);
    m_zapier_id_isSet = !json[QString("zapier_id")].isNull() && m_zapier_id_isValid;
}

QString OAIListing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListing::asJsonObject() const {
    QJsonObject obj;
    if (m_automate_id_isSet) {
        obj.insert(QString("automate_id"), ::OpenAPI::toJsonValue(m_automate_id));
    }
    if (m_blendr_id_isSet) {
        obj.insert(QString("blendr_id"), ::OpenAPI::toJsonValue(m_blendr_id));
    }
    if (m_card_background_color_isSet) {
        obj.insert(QString("card_background_color"), ::OpenAPI::toJsonValue(m_card_background_color));
    }
    if (m_card_background_image.isSet()) {
        obj.insert(QString("card_background_image"), ::OpenAPI::toJsonValue(m_card_background_image));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_cloud_service_id_isSet) {
        obj.insert(QString("cloud_service_id"), ::OpenAPI::toJsonValue(m_cloud_service_id));
    }
    if (m_collections.size() > 0) {
        obj.insert(QString("collections"), ::OpenAPI::toJsonValue(m_collections));
    }
    if (m_combidesk_id_isSet) {
        obj.insert(QString("combidesk_id"), ::OpenAPI::toJsonValue(m_combidesk_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_detail_page_disabled_isSet) {
        obj.insert(QString("detail_page_disabled"), ::OpenAPI::toJsonValue(m_detail_page_disabled));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_features_isSet) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_integromat_id_isSet) {
        obj.insert(QString("integromat_id"), ::OpenAPI::toJsonValue(m_integromat_id));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_meta_tag_description_isSet) {
        obj.insert(QString("meta_tag_description"), ::OpenAPI::toJsonValue(m_meta_tag_description));
    }
    if (m_meta_tag_keywords_isSet) {
        obj.insert(QString("meta_tag_keywords"), ::OpenAPI::toJsonValue(m_meta_tag_keywords));
    }
    if (m_meta_tag_title_isSet) {
        obj.insert(QString("meta_tag_title"), ::OpenAPI::toJsonValue(m_meta_tag_title));
    }
    if (m_microsoft_flow_id_isSet) {
        obj.insert(QString("microsoft_flow_id"), ::OpenAPI::toJsonValue(m_microsoft_flow_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_native_integration_isSet) {
        obj.insert(QString("native_integration"), ::OpenAPI::toJsonValue(m_native_integration));
    }
    if (m_native_integration_link_isSet) {
        obj.insert(QString("native_integration_link"), ::OpenAPI::toJsonValue(m_native_integration_link));
    }
    if (m_partner.isSet()) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_piesync_id_isSet) {
        obj.insert(QString("piesync_id"), ::OpenAPI::toJsonValue(m_piesync_id));
    }
    if (m_pricing_isSet) {
        obj.insert(QString("pricing"), ::OpenAPI::toJsonValue(m_pricing));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("published_at"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_screenshots.size() > 0) {
        obj.insert(QString("screenshots"), ::OpenAPI::toJsonValue(m_screenshots));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segment_id"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_sticky_isSet) {
        obj.insert(QString("sticky"), ::OpenAPI::toJsonValue(m_sticky));
    }
    if (m_tag_line_isSet) {
        obj.insert(QString("tag_line"), ::OpenAPI::toJsonValue(m_tag_line));
    }
    if (m_third_party_integration_isSet) {
        obj.insert(QString("third_party_integration"), ::OpenAPI::toJsonValue(m_third_party_integration));
    }
    if (m_third_party_integration_link_isSet) {
        obj.insert(QString("third_party_integration_link"), ::OpenAPI::toJsonValue(m_third_party_integration_link));
    }
    if (m_translations.size() > 0) {
        obj.insert(QString("translations"), ::OpenAPI::toJsonValue(m_translations));
    }
    if (m_tray_io_id_isSet) {
        obj.insert(QString("tray_io_id"), ::OpenAPI::toJsonValue(m_tray_io_id));
    }
    if (m_unify_connector_id_isSet) {
        obj.insert(QString("unify_connector_id"), ::OpenAPI::toJsonValue(m_unify_connector_id));
    }
    if (m_upcoming_isSet) {
        obj.insert(QString("upcoming"), ::OpenAPI::toJsonValue(m_upcoming));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_zapier_id_isSet) {
        obj.insert(QString("zapier_id"), ::OpenAPI::toJsonValue(m_zapier_id));
    }
    return obj;
}

QString OAIListing::getAutomateId() const {
    return m_automate_id;
}
void OAIListing::setAutomateId(const QString &automate_id) {
    m_automate_id = automate_id;
    m_automate_id_isSet = true;
}

bool OAIListing::is_automate_id_Set() const{
    return m_automate_id_isSet;
}

bool OAIListing::is_automate_id_Valid() const{
    return m_automate_id_isValid;
}

QString OAIListing::getBlendrId() const {
    return m_blendr_id;
}
void OAIListing::setBlendrId(const QString &blendr_id) {
    m_blendr_id = blendr_id;
    m_blendr_id_isSet = true;
}

bool OAIListing::is_blendr_id_Set() const{
    return m_blendr_id_isSet;
}

bool OAIListing::is_blendr_id_Valid() const{
    return m_blendr_id_isValid;
}

QString OAIListing::getCardBackgroundColor() const {
    return m_card_background_color;
}
void OAIListing::setCardBackgroundColor(const QString &card_background_color) {
    m_card_background_color = card_background_color;
    m_card_background_color_isSet = true;
}

bool OAIListing::is_card_background_color_Set() const{
    return m_card_background_color_isSet;
}

bool OAIListing::is_card_background_color_Valid() const{
    return m_card_background_color_isValid;
}

OAIFile OAIListing::getCardBackgroundImage() const {
    return m_card_background_image;
}
void OAIListing::setCardBackgroundImage(const OAIFile &card_background_image) {
    m_card_background_image = card_background_image;
    m_card_background_image_isSet = true;
}

bool OAIListing::is_card_background_image_Set() const{
    return m_card_background_image_isSet;
}

bool OAIListing::is_card_background_image_Valid() const{
    return m_card_background_image_isValid;
}

QList<OAICategory> OAIListing::getCategories() const {
    return m_categories;
}
void OAIListing::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIListing::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIListing::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIListing::getCloudServiceId() const {
    return m_cloud_service_id;
}
void OAIListing::setCloudServiceId(const QString &cloud_service_id) {
    m_cloud_service_id = cloud_service_id;
    m_cloud_service_id_isSet = true;
}

bool OAIListing::is_cloud_service_id_Set() const{
    return m_cloud_service_id_isSet;
}

bool OAIListing::is_cloud_service_id_Valid() const{
    return m_cloud_service_id_isValid;
}

QList<OAICollection> OAIListing::getCollections() const {
    return m_collections;
}
void OAIListing::setCollections(const QList<OAICollection> &collections) {
    m_collections = collections;
    m_collections_isSet = true;
}

bool OAIListing::is_collections_Set() const{
    return m_collections_isSet;
}

bool OAIListing::is_collections_Valid() const{
    return m_collections_isValid;
}

QString OAIListing::getCombideskId() const {
    return m_combidesk_id;
}
void OAIListing::setCombideskId(const QString &combidesk_id) {
    m_combidesk_id = combidesk_id;
    m_combidesk_id_isSet = true;
}

bool OAIListing::is_combidesk_id_Set() const{
    return m_combidesk_id_isSet;
}

bool OAIListing::is_combidesk_id_Valid() const{
    return m_combidesk_id_isValid;
}

QDateTime OAIListing::getCreatedAt() const {
    return m_created_at;
}
void OAIListing::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIListing::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIListing::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIListing::getDescription() const {
    return m_description;
}
void OAIListing::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIListing::is_description_Set() const{
    return m_description_isSet;
}

bool OAIListing::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIListing::isDetailPageDisabled() const {
    return m_detail_page_disabled;
}
void OAIListing::setDetailPageDisabled(const bool &detail_page_disabled) {
    m_detail_page_disabled = detail_page_disabled;
    m_detail_page_disabled_isSet = true;
}

bool OAIListing::is_detail_page_disabled_Set() const{
    return m_detail_page_disabled_isSet;
}

bool OAIListing::is_detail_page_disabled_Valid() const{
    return m_detail_page_disabled_isValid;
}

QString OAIListing::getExternalId() const {
    return m_external_id;
}
void OAIListing::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIListing::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIListing::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIListing::getFeatures() const {
    return m_features;
}
void OAIListing::setFeatures(const QString &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIListing::is_features_Set() const{
    return m_features_isSet;
}

bool OAIListing::is_features_Valid() const{
    return m_features_isValid;
}

QString OAIListing::getId() const {
    return m_id;
}
void OAIListing::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIListing::is_id_Set() const{
    return m_id_isSet;
}

bool OAIListing::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIListing::getIntegromatId() const {
    return m_integromat_id;
}
void OAIListing::setIntegromatId(const QString &integromat_id) {
    m_integromat_id = integromat_id;
    m_integromat_id_isSet = true;
}

bool OAIListing::is_integromat_id_Set() const{
    return m_integromat_id_isSet;
}

bool OAIListing::is_integromat_id_Valid() const{
    return m_integromat_id_isValid;
}

OAILogo OAIListing::getLogo() const {
    return m_logo;
}
void OAIListing::setLogo(const OAILogo &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIListing::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIListing::is_logo_Valid() const{
    return m_logo_isValid;
}

QList<OAIMedia> OAIListing::getMedia() const {
    return m_media;
}
void OAIListing::setMedia(const QList<OAIMedia> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIListing::is_media_Set() const{
    return m_media_isSet;
}

bool OAIListing::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIListing::getMetaTagDescription() const {
    return m_meta_tag_description;
}
void OAIListing::setMetaTagDescription(const QString &meta_tag_description) {
    m_meta_tag_description = meta_tag_description;
    m_meta_tag_description_isSet = true;
}

bool OAIListing::is_meta_tag_description_Set() const{
    return m_meta_tag_description_isSet;
}

bool OAIListing::is_meta_tag_description_Valid() const{
    return m_meta_tag_description_isValid;
}

QString OAIListing::getMetaTagKeywords() const {
    return m_meta_tag_keywords;
}
void OAIListing::setMetaTagKeywords(const QString &meta_tag_keywords) {
    m_meta_tag_keywords = meta_tag_keywords;
    m_meta_tag_keywords_isSet = true;
}

bool OAIListing::is_meta_tag_keywords_Set() const{
    return m_meta_tag_keywords_isSet;
}

bool OAIListing::is_meta_tag_keywords_Valid() const{
    return m_meta_tag_keywords_isValid;
}

QString OAIListing::getMetaTagTitle() const {
    return m_meta_tag_title;
}
void OAIListing::setMetaTagTitle(const QString &meta_tag_title) {
    m_meta_tag_title = meta_tag_title;
    m_meta_tag_title_isSet = true;
}

bool OAIListing::is_meta_tag_title_Set() const{
    return m_meta_tag_title_isSet;
}

bool OAIListing::is_meta_tag_title_Valid() const{
    return m_meta_tag_title_isValid;
}

QString OAIListing::getMicrosoftFlowId() const {
    return m_microsoft_flow_id;
}
void OAIListing::setMicrosoftFlowId(const QString &microsoft_flow_id) {
    m_microsoft_flow_id = microsoft_flow_id;
    m_microsoft_flow_id_isSet = true;
}

bool OAIListing::is_microsoft_flow_id_Set() const{
    return m_microsoft_flow_id_isSet;
}

bool OAIListing::is_microsoft_flow_id_Valid() const{
    return m_microsoft_flow_id_isValid;
}

QString OAIListing::getName() const {
    return m_name;
}
void OAIListing::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIListing::is_name_Set() const{
    return m_name_isSet;
}

bool OAIListing::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIListing::isNativeIntegration() const {
    return m_native_integration;
}
void OAIListing::setNativeIntegration(const bool &native_integration) {
    m_native_integration = native_integration;
    m_native_integration_isSet = true;
}

bool OAIListing::is_native_integration_Set() const{
    return m_native_integration_isSet;
}

bool OAIListing::is_native_integration_Valid() const{
    return m_native_integration_isValid;
}

QString OAIListing::getNativeIntegrationLink() const {
    return m_native_integration_link;
}
void OAIListing::setNativeIntegrationLink(const QString &native_integration_link) {
    m_native_integration_link = native_integration_link;
    m_native_integration_link_isSet = true;
}

bool OAIListing::is_native_integration_link_Set() const{
    return m_native_integration_link_isSet;
}

bool OAIListing::is_native_integration_link_Valid() const{
    return m_native_integration_link_isValid;
}

OAIPartner OAIListing::getPartner() const {
    return m_partner;
}
void OAIListing::setPartner(const OAIPartner &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIListing::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIListing::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAIListing::getPiesyncId() const {
    return m_piesync_id;
}
void OAIListing::setPiesyncId(const QString &piesync_id) {
    m_piesync_id = piesync_id;
    m_piesync_id_isSet = true;
}

bool OAIListing::is_piesync_id_Set() const{
    return m_piesync_id_isSet;
}

bool OAIListing::is_piesync_id_Valid() const{
    return m_piesync_id_isValid;
}

QString OAIListing::getPricing() const {
    return m_pricing;
}
void OAIListing::setPricing(const QString &pricing) {
    m_pricing = pricing;
    m_pricing_isSet = true;
}

bool OAIListing::is_pricing_Set() const{
    return m_pricing_isSet;
}

bool OAIListing::is_pricing_Valid() const{
    return m_pricing_isValid;
}

QList<OAIProduct> OAIListing::getProducts() const {
    return m_products;
}
void OAIListing::setProducts(const QList<OAIProduct> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIListing::is_products_Set() const{
    return m_products_isSet;
}

bool OAIListing::is_products_Valid() const{
    return m_products_isValid;
}

bool OAIListing::isPublished() const {
    return m_published;
}
void OAIListing::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIListing::is_published_Set() const{
    return m_published_isSet;
}

bool OAIListing::is_published_Valid() const{
    return m_published_isValid;
}

QDateTime OAIListing::getPublishedAt() const {
    return m_published_at;
}
void OAIListing::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAIListing::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAIListing::is_published_at_Valid() const{
    return m_published_at_isValid;
}

QList<OAIScreenshot> OAIListing::getScreenshots() const {
    return m_screenshots;
}
void OAIListing::setScreenshots(const QList<OAIScreenshot> &screenshots) {
    m_screenshots = screenshots;
    m_screenshots_isSet = true;
}

bool OAIListing::is_screenshots_Set() const{
    return m_screenshots_isSet;
}

bool OAIListing::is_screenshots_Valid() const{
    return m_screenshots_isValid;
}

QString OAIListing::getSegmentId() const {
    return m_segment_id;
}
void OAIListing::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAIListing::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAIListing::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

QString OAIListing::getSlug() const {
    return m_slug;
}
void OAIListing::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIListing::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIListing::is_slug_Valid() const{
    return m_slug_isValid;
}

bool OAIListing::isSticky() const {
    return m_sticky;
}
void OAIListing::setSticky(const bool &sticky) {
    m_sticky = sticky;
    m_sticky_isSet = true;
}

bool OAIListing::is_sticky_Set() const{
    return m_sticky_isSet;
}

bool OAIListing::is_sticky_Valid() const{
    return m_sticky_isValid;
}

QString OAIListing::getTagLine() const {
    return m_tag_line;
}
void OAIListing::setTagLine(const QString &tag_line) {
    m_tag_line = tag_line;
    m_tag_line_isSet = true;
}

bool OAIListing::is_tag_line_Set() const{
    return m_tag_line_isSet;
}

bool OAIListing::is_tag_line_Valid() const{
    return m_tag_line_isValid;
}

bool OAIListing::isThirdPartyIntegration() const {
    return m_third_party_integration;
}
void OAIListing::setThirdPartyIntegration(const bool &third_party_integration) {
    m_third_party_integration = third_party_integration;
    m_third_party_integration_isSet = true;
}

bool OAIListing::is_third_party_integration_Set() const{
    return m_third_party_integration_isSet;
}

bool OAIListing::is_third_party_integration_Valid() const{
    return m_third_party_integration_isValid;
}

QString OAIListing::getThirdPartyIntegrationLink() const {
    return m_third_party_integration_link;
}
void OAIListing::setThirdPartyIntegrationLink(const QString &third_party_integration_link) {
    m_third_party_integration_link = third_party_integration_link;
    m_third_party_integration_link_isSet = true;
}

bool OAIListing::is_third_party_integration_link_Set() const{
    return m_third_party_integration_link_isSet;
}

bool OAIListing::is_third_party_integration_link_Valid() const{
    return m_third_party_integration_link_isValid;
}

QList<OAITranslation> OAIListing::getTranslations() const {
    return m_translations;
}
void OAIListing::setTranslations(const QList<OAITranslation> &translations) {
    m_translations = translations;
    m_translations_isSet = true;
}

bool OAIListing::is_translations_Set() const{
    return m_translations_isSet;
}

bool OAIListing::is_translations_Valid() const{
    return m_translations_isValid;
}

QString OAIListing::getTrayIoId() const {
    return m_tray_io_id;
}
void OAIListing::setTrayIoId(const QString &tray_io_id) {
    m_tray_io_id = tray_io_id;
    m_tray_io_id_isSet = true;
}

bool OAIListing::is_tray_io_id_Set() const{
    return m_tray_io_id_isSet;
}

bool OAIListing::is_tray_io_id_Valid() const{
    return m_tray_io_id_isValid;
}

QString OAIListing::getUnifyConnectorId() const {
    return m_unify_connector_id;
}
void OAIListing::setUnifyConnectorId(const QString &unify_connector_id) {
    m_unify_connector_id = unify_connector_id;
    m_unify_connector_id_isSet = true;
}

bool OAIListing::is_unify_connector_id_Set() const{
    return m_unify_connector_id_isSet;
}

bool OAIListing::is_unify_connector_id_Valid() const{
    return m_unify_connector_id_isValid;
}

bool OAIListing::isUpcoming() const {
    return m_upcoming;
}
void OAIListing::setUpcoming(const bool &upcoming) {
    m_upcoming = upcoming;
    m_upcoming_isSet = true;
}

bool OAIListing::is_upcoming_Set() const{
    return m_upcoming_isSet;
}

bool OAIListing::is_upcoming_Valid() const{
    return m_upcoming_isValid;
}

QDateTime OAIListing::getUpdatedAt() const {
    return m_updated_at;
}
void OAIListing::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIListing::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIListing::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIListing::getZapierId() const {
    return m_zapier_id;
}
void OAIListing::setZapierId(const QString &zapier_id) {
    m_zapier_id = zapier_id;
    m_zapier_id_isSet = true;
}

bool OAIListing::is_zapier_id_Set() const{
    return m_zapier_id_isSet;
}

bool OAIListing::is_zapier_id_Valid() const{
    return m_zapier_id_isValid;
}

bool OAIListing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blendr_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_background_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_combidesk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_page_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integromat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_tag_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_tag_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_tag_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_flow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_native_integration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_native_integration_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_piesync_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticky_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_integration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_integration_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tray_io_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unify_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zapier_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListing::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_slug_isValid && true;
}

} // namespace OpenAPI
