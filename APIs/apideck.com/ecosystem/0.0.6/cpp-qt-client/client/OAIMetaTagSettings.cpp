/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetaTagSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetaTagSettings::OAIMetaTagSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetaTagSettings::OAIMetaTagSettings() {
    this->initializeModel();
}

OAIMetaTagSettings::~OAIMetaTagSettings() {}

void OAIMetaTagSettings::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_category_page_isSet = false;
    m_description_category_page_isValid = false;

    m_description_collection_page_isSet = false;
    m_description_collection_page_isValid = false;

    m_description_listing_page_isSet = false;
    m_description_listing_page_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_postfix_isSet = false;
    m_title_postfix_isValid = false;
}

void OAIMetaTagSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetaTagSettings::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_description_category_page_isValid = ::OpenAPI::fromJsonValue(m_description_category_page, json[QString("description_category_page")]);
    m_description_category_page_isSet = !json[QString("description_category_page")].isNull() && m_description_category_page_isValid;

    m_description_collection_page_isValid = ::OpenAPI::fromJsonValue(m_description_collection_page, json[QString("description_collection_page")]);
    m_description_collection_page_isSet = !json[QString("description_collection_page")].isNull() && m_description_collection_page_isValid;

    m_description_listing_page_isValid = ::OpenAPI::fromJsonValue(m_description_listing_page, json[QString("description_listing_page")]);
    m_description_listing_page_isSet = !json[QString("description_listing_page")].isNull() && m_description_listing_page_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_postfix_isValid = ::OpenAPI::fromJsonValue(m_title_postfix, json[QString("title_postfix")]);
    m_title_postfix_isSet = !json[QString("title_postfix")].isNull() && m_title_postfix_isValid;
}

QString OAIMetaTagSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetaTagSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_category_page_isSet) {
        obj.insert(QString("description_category_page"), ::OpenAPI::toJsonValue(m_description_category_page));
    }
    if (m_description_collection_page_isSet) {
        obj.insert(QString("description_collection_page"), ::OpenAPI::toJsonValue(m_description_collection_page));
    }
    if (m_description_listing_page_isSet) {
        obj.insert(QString("description_listing_page"), ::OpenAPI::toJsonValue(m_description_listing_page));
    }
    if (m_keywords_isSet) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_postfix_isSet) {
        obj.insert(QString("title_postfix"), ::OpenAPI::toJsonValue(m_title_postfix));
    }
    return obj;
}

QString OAIMetaTagSettings::getDescription() const {
    return m_description;
}
void OAIMetaTagSettings::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMetaTagSettings::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMetaTagSettings::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMetaTagSettings::getDescriptionCategoryPage() const {
    return m_description_category_page;
}
void OAIMetaTagSettings::setDescriptionCategoryPage(const QString &description_category_page) {
    m_description_category_page = description_category_page;
    m_description_category_page_isSet = true;
}

bool OAIMetaTagSettings::is_description_category_page_Set() const{
    return m_description_category_page_isSet;
}

bool OAIMetaTagSettings::is_description_category_page_Valid() const{
    return m_description_category_page_isValid;
}

QString OAIMetaTagSettings::getDescriptionCollectionPage() const {
    return m_description_collection_page;
}
void OAIMetaTagSettings::setDescriptionCollectionPage(const QString &description_collection_page) {
    m_description_collection_page = description_collection_page;
    m_description_collection_page_isSet = true;
}

bool OAIMetaTagSettings::is_description_collection_page_Set() const{
    return m_description_collection_page_isSet;
}

bool OAIMetaTagSettings::is_description_collection_page_Valid() const{
    return m_description_collection_page_isValid;
}

QString OAIMetaTagSettings::getDescriptionListingPage() const {
    return m_description_listing_page;
}
void OAIMetaTagSettings::setDescriptionListingPage(const QString &description_listing_page) {
    m_description_listing_page = description_listing_page;
    m_description_listing_page_isSet = true;
}

bool OAIMetaTagSettings::is_description_listing_page_Set() const{
    return m_description_listing_page_isSet;
}

bool OAIMetaTagSettings::is_description_listing_page_Valid() const{
    return m_description_listing_page_isValid;
}

QString OAIMetaTagSettings::getKeywords() const {
    return m_keywords;
}
void OAIMetaTagSettings::setKeywords(const QString &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIMetaTagSettings::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIMetaTagSettings::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIMetaTagSettings::getTitle() const {
    return m_title;
}
void OAIMetaTagSettings::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMetaTagSettings::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMetaTagSettings::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMetaTagSettings::getTitlePostfix() const {
    return m_title_postfix;
}
void OAIMetaTagSettings::setTitlePostfix(const QString &title_postfix) {
    m_title_postfix = title_postfix;
    m_title_postfix_isSet = true;
}

bool OAIMetaTagSettings::is_title_postfix_Set() const{
    return m_title_postfix_isSet;
}

bool OAIMetaTagSettings::is_title_postfix_Valid() const{
    return m_title_postfix_isValid;
}

bool OAIMetaTagSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_category_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_collection_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_listing_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_postfix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetaTagSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
