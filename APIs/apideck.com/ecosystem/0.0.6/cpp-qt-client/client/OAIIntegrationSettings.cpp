/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationSettings::OAIIntegrationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationSettings::OAIIntegrationSettings() {
    this->initializeModel();
}

OAIIntegrationSettings::~OAIIntegrationSettings() {}

void OAIIntegrationSettings::initializeModel() {

    m_albacross_id_isSet = false;
    m_albacross_id_isValid = false;

    m_automate_enabled_isSet = false;
    m_automate_enabled_isValid = false;

    m_blendr_enabled_isSet = false;
    m_blendr_enabled_isValid = false;

    m_combidesk_enabled_isSet = false;
    m_combidesk_enabled_isValid = false;

    m_crisp_id_isSet = false;
    m_crisp_id_isValid = false;

    m_drift_id_isSet = false;
    m_drift_id_isValid = false;

    m_google_analytics_id_isSet = false;
    m_google_analytics_id_isValid = false;

    m_google_tag_manager_id_isSet = false;
    m_google_tag_manager_id_isValid = false;

    m_heap_id_isSet = false;
    m_heap_id_isValid = false;

    m_hubspot_portal_id_isSet = false;
    m_hubspot_portal_id_isValid = false;

    m_integromat_enabled_isSet = false;
    m_integromat_enabled_isValid = false;

    m_intercom_app_id_isSet = false;
    m_intercom_app_id_isValid = false;

    m_iubenda_cookie_policy_id_isSet = false;
    m_iubenda_cookie_policy_id_isValid = false;

    m_iubenda_site_id_isSet = false;
    m_iubenda_site_id_isValid = false;

    m_journy_io_domain_isSet = false;
    m_journy_io_domain_isValid = false;

    m_journy_io_id_isSet = false;
    m_journy_io_id_isValid = false;

    m_livechat_id_isSet = false;
    m_livechat_id_isValid = false;

    m_metomic_id_isSet = false;
    m_metomic_id_isValid = false;

    m_microsoft_flow_enabled_isSet = false;
    m_microsoft_flow_enabled_isValid = false;

    m_microsoft_flow_id_isSet = false;
    m_microsoft_flow_id_isValid = false;

    m_onetrust_id_isSet = false;
    m_onetrust_id_isValid = false;

    m_piesync_enabled_isSet = false;
    m_piesync_enabled_isValid = false;

    m_segment_enabled_isSet = false;
    m_segment_enabled_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_tray_io_enabled_isSet = false;
    m_tray_io_enabled_isValid = false;

    m_zapier_beta_link_isSet = false;
    m_zapier_beta_link_isValid = false;

    m_zapier_enabled_isSet = false;
    m_zapier_enabled_isValid = false;

    m_zapier_id_isSet = false;
    m_zapier_id_isValid = false;
}

void OAIIntegrationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationSettings::fromJsonObject(QJsonObject json) {

    m_albacross_id_isValid = ::OpenAPI::fromJsonValue(m_albacross_id, json[QString("albacross_id")]);
    m_albacross_id_isSet = !json[QString("albacross_id")].isNull() && m_albacross_id_isValid;

    m_automate_enabled_isValid = ::OpenAPI::fromJsonValue(m_automate_enabled, json[QString("automate_enabled")]);
    m_automate_enabled_isSet = !json[QString("automate_enabled")].isNull() && m_automate_enabled_isValid;

    m_blendr_enabled_isValid = ::OpenAPI::fromJsonValue(m_blendr_enabled, json[QString("blendr_enabled")]);
    m_blendr_enabled_isSet = !json[QString("blendr_enabled")].isNull() && m_blendr_enabled_isValid;

    m_combidesk_enabled_isValid = ::OpenAPI::fromJsonValue(m_combidesk_enabled, json[QString("combidesk_enabled")]);
    m_combidesk_enabled_isSet = !json[QString("combidesk_enabled")].isNull() && m_combidesk_enabled_isValid;

    m_crisp_id_isValid = ::OpenAPI::fromJsonValue(m_crisp_id, json[QString("crisp_id")]);
    m_crisp_id_isSet = !json[QString("crisp_id")].isNull() && m_crisp_id_isValid;

    m_drift_id_isValid = ::OpenAPI::fromJsonValue(m_drift_id, json[QString("drift_id")]);
    m_drift_id_isSet = !json[QString("drift_id")].isNull() && m_drift_id_isValid;

    m_google_analytics_id_isValid = ::OpenAPI::fromJsonValue(m_google_analytics_id, json[QString("google_analytics_id")]);
    m_google_analytics_id_isSet = !json[QString("google_analytics_id")].isNull() && m_google_analytics_id_isValid;

    m_google_tag_manager_id_isValid = ::OpenAPI::fromJsonValue(m_google_tag_manager_id, json[QString("google_tag_manager_id")]);
    m_google_tag_manager_id_isSet = !json[QString("google_tag_manager_id")].isNull() && m_google_tag_manager_id_isValid;

    m_heap_id_isValid = ::OpenAPI::fromJsonValue(m_heap_id, json[QString("heap_id")]);
    m_heap_id_isSet = !json[QString("heap_id")].isNull() && m_heap_id_isValid;

    m_hubspot_portal_id_isValid = ::OpenAPI::fromJsonValue(m_hubspot_portal_id, json[QString("hubspot_portal_id")]);
    m_hubspot_portal_id_isSet = !json[QString("hubspot_portal_id")].isNull() && m_hubspot_portal_id_isValid;

    m_integromat_enabled_isValid = ::OpenAPI::fromJsonValue(m_integromat_enabled, json[QString("integromat_enabled")]);
    m_integromat_enabled_isSet = !json[QString("integromat_enabled")].isNull() && m_integromat_enabled_isValid;

    m_intercom_app_id_isValid = ::OpenAPI::fromJsonValue(m_intercom_app_id, json[QString("intercom_app_id")]);
    m_intercom_app_id_isSet = !json[QString("intercom_app_id")].isNull() && m_intercom_app_id_isValid;

    m_iubenda_cookie_policy_id_isValid = ::OpenAPI::fromJsonValue(m_iubenda_cookie_policy_id, json[QString("iubenda_cookie_policy_id")]);
    m_iubenda_cookie_policy_id_isSet = !json[QString("iubenda_cookie_policy_id")].isNull() && m_iubenda_cookie_policy_id_isValid;

    m_iubenda_site_id_isValid = ::OpenAPI::fromJsonValue(m_iubenda_site_id, json[QString("iubenda_site_id")]);
    m_iubenda_site_id_isSet = !json[QString("iubenda_site_id")].isNull() && m_iubenda_site_id_isValid;

    m_journy_io_domain_isValid = ::OpenAPI::fromJsonValue(m_journy_io_domain, json[QString("journy_io_domain")]);
    m_journy_io_domain_isSet = !json[QString("journy_io_domain")].isNull() && m_journy_io_domain_isValid;

    m_journy_io_id_isValid = ::OpenAPI::fromJsonValue(m_journy_io_id, json[QString("journy_io_id")]);
    m_journy_io_id_isSet = !json[QString("journy_io_id")].isNull() && m_journy_io_id_isValid;

    m_livechat_id_isValid = ::OpenAPI::fromJsonValue(m_livechat_id, json[QString("livechat_id")]);
    m_livechat_id_isSet = !json[QString("livechat_id")].isNull() && m_livechat_id_isValid;

    m_metomic_id_isValid = ::OpenAPI::fromJsonValue(m_metomic_id, json[QString("metomic_id")]);
    m_metomic_id_isSet = !json[QString("metomic_id")].isNull() && m_metomic_id_isValid;

    m_microsoft_flow_enabled_isValid = ::OpenAPI::fromJsonValue(m_microsoft_flow_enabled, json[QString("microsoft_flow_enabled")]);
    m_microsoft_flow_enabled_isSet = !json[QString("microsoft_flow_enabled")].isNull() && m_microsoft_flow_enabled_isValid;

    m_microsoft_flow_id_isValid = ::OpenAPI::fromJsonValue(m_microsoft_flow_id, json[QString("microsoft_flow_id")]);
    m_microsoft_flow_id_isSet = !json[QString("microsoft_flow_id")].isNull() && m_microsoft_flow_id_isValid;

    m_onetrust_id_isValid = ::OpenAPI::fromJsonValue(m_onetrust_id, json[QString("onetrust_id")]);
    m_onetrust_id_isSet = !json[QString("onetrust_id")].isNull() && m_onetrust_id_isValid;

    m_piesync_enabled_isValid = ::OpenAPI::fromJsonValue(m_piesync_enabled, json[QString("piesync_enabled")]);
    m_piesync_enabled_isSet = !json[QString("piesync_enabled")].isNull() && m_piesync_enabled_isValid;

    m_segment_enabled_isValid = ::OpenAPI::fromJsonValue(m_segment_enabled, json[QString("segment_enabled")]);
    m_segment_enabled_isSet = !json[QString("segment_enabled")].isNull() && m_segment_enabled_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segment_id")]);
    m_segment_id_isSet = !json[QString("segment_id")].isNull() && m_segment_id_isValid;

    m_tray_io_enabled_isValid = ::OpenAPI::fromJsonValue(m_tray_io_enabled, json[QString("tray_io_enabled")]);
    m_tray_io_enabled_isSet = !json[QString("tray_io_enabled")].isNull() && m_tray_io_enabled_isValid;

    m_zapier_beta_link_isValid = ::OpenAPI::fromJsonValue(m_zapier_beta_link, json[QString("zapier_beta_link")]);
    m_zapier_beta_link_isSet = !json[QString("zapier_beta_link")].isNull() && m_zapier_beta_link_isValid;

    m_zapier_enabled_isValid = ::OpenAPI::fromJsonValue(m_zapier_enabled, json[QString("zapier_enabled")]);
    m_zapier_enabled_isSet = !json[QString("zapier_enabled")].isNull() && m_zapier_enabled_isValid;

    m_zapier_id_isValid = ::OpenAPI::fromJsonValue(m_zapier_id, json[QString("zapier_id")]);
    m_zapier_id_isSet = !json[QString("zapier_id")].isNull() && m_zapier_id_isValid;
}

QString OAIIntegrationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_albacross_id_isSet) {
        obj.insert(QString("albacross_id"), ::OpenAPI::toJsonValue(m_albacross_id));
    }
    if (m_automate_enabled_isSet) {
        obj.insert(QString("automate_enabled"), ::OpenAPI::toJsonValue(m_automate_enabled));
    }
    if (m_blendr_enabled_isSet) {
        obj.insert(QString("blendr_enabled"), ::OpenAPI::toJsonValue(m_blendr_enabled));
    }
    if (m_combidesk_enabled_isSet) {
        obj.insert(QString("combidesk_enabled"), ::OpenAPI::toJsonValue(m_combidesk_enabled));
    }
    if (m_crisp_id_isSet) {
        obj.insert(QString("crisp_id"), ::OpenAPI::toJsonValue(m_crisp_id));
    }
    if (m_drift_id_isSet) {
        obj.insert(QString("drift_id"), ::OpenAPI::toJsonValue(m_drift_id));
    }
    if (m_google_analytics_id_isSet) {
        obj.insert(QString("google_analytics_id"), ::OpenAPI::toJsonValue(m_google_analytics_id));
    }
    if (m_google_tag_manager_id_isSet) {
        obj.insert(QString("google_tag_manager_id"), ::OpenAPI::toJsonValue(m_google_tag_manager_id));
    }
    if (m_heap_id_isSet) {
        obj.insert(QString("heap_id"), ::OpenAPI::toJsonValue(m_heap_id));
    }
    if (m_hubspot_portal_id_isSet) {
        obj.insert(QString("hubspot_portal_id"), ::OpenAPI::toJsonValue(m_hubspot_portal_id));
    }
    if (m_integromat_enabled_isSet) {
        obj.insert(QString("integromat_enabled"), ::OpenAPI::toJsonValue(m_integromat_enabled));
    }
    if (m_intercom_app_id_isSet) {
        obj.insert(QString("intercom_app_id"), ::OpenAPI::toJsonValue(m_intercom_app_id));
    }
    if (m_iubenda_cookie_policy_id_isSet) {
        obj.insert(QString("iubenda_cookie_policy_id"), ::OpenAPI::toJsonValue(m_iubenda_cookie_policy_id));
    }
    if (m_iubenda_site_id_isSet) {
        obj.insert(QString("iubenda_site_id"), ::OpenAPI::toJsonValue(m_iubenda_site_id));
    }
    if (m_journy_io_domain_isSet) {
        obj.insert(QString("journy_io_domain"), ::OpenAPI::toJsonValue(m_journy_io_domain));
    }
    if (m_journy_io_id_isSet) {
        obj.insert(QString("journy_io_id"), ::OpenAPI::toJsonValue(m_journy_io_id));
    }
    if (m_livechat_id_isSet) {
        obj.insert(QString("livechat_id"), ::OpenAPI::toJsonValue(m_livechat_id));
    }
    if (m_metomic_id_isSet) {
        obj.insert(QString("metomic_id"), ::OpenAPI::toJsonValue(m_metomic_id));
    }
    if (m_microsoft_flow_enabled_isSet) {
        obj.insert(QString("microsoft_flow_enabled"), ::OpenAPI::toJsonValue(m_microsoft_flow_enabled));
    }
    if (m_microsoft_flow_id_isSet) {
        obj.insert(QString("microsoft_flow_id"), ::OpenAPI::toJsonValue(m_microsoft_flow_id));
    }
    if (m_onetrust_id_isSet) {
        obj.insert(QString("onetrust_id"), ::OpenAPI::toJsonValue(m_onetrust_id));
    }
    if (m_piesync_enabled_isSet) {
        obj.insert(QString("piesync_enabled"), ::OpenAPI::toJsonValue(m_piesync_enabled));
    }
    if (m_segment_enabled_isSet) {
        obj.insert(QString("segment_enabled"), ::OpenAPI::toJsonValue(m_segment_enabled));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segment_id"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_tray_io_enabled_isSet) {
        obj.insert(QString("tray_io_enabled"), ::OpenAPI::toJsonValue(m_tray_io_enabled));
    }
    if (m_zapier_beta_link_isSet) {
        obj.insert(QString("zapier_beta_link"), ::OpenAPI::toJsonValue(m_zapier_beta_link));
    }
    if (m_zapier_enabled_isSet) {
        obj.insert(QString("zapier_enabled"), ::OpenAPI::toJsonValue(m_zapier_enabled));
    }
    if (m_zapier_id_isSet) {
        obj.insert(QString("zapier_id"), ::OpenAPI::toJsonValue(m_zapier_id));
    }
    return obj;
}

QString OAIIntegrationSettings::getAlbacrossId() const {
    return m_albacross_id;
}
void OAIIntegrationSettings::setAlbacrossId(const QString &albacross_id) {
    m_albacross_id = albacross_id;
    m_albacross_id_isSet = true;
}

bool OAIIntegrationSettings::is_albacross_id_Set() const{
    return m_albacross_id_isSet;
}

bool OAIIntegrationSettings::is_albacross_id_Valid() const{
    return m_albacross_id_isValid;
}

bool OAIIntegrationSettings::isAutomateEnabled() const {
    return m_automate_enabled;
}
void OAIIntegrationSettings::setAutomateEnabled(const bool &automate_enabled) {
    m_automate_enabled = automate_enabled;
    m_automate_enabled_isSet = true;
}

bool OAIIntegrationSettings::is_automate_enabled_Set() const{
    return m_automate_enabled_isSet;
}

bool OAIIntegrationSettings::is_automate_enabled_Valid() const{
    return m_automate_enabled_isValid;
}

bool OAIIntegrationSettings::isBlendrEnabled() const {
    return m_blendr_enabled;
}
void OAIIntegrationSettings::setBlendrEnabled(const bool &blendr_enabled) {
    m_blendr_enabled = blendr_enabled;
    m_blendr_enabled_isSet = true;
}

bool OAIIntegrationSettings::is_blendr_enabled_Set() const{
    return m_blendr_enabled_isSet;
}

bool OAIIntegrationSettings::is_blendr_enabled_Valid() const{
    return m_blendr_enabled_isValid;
}

bool OAIIntegrationSettings::isCombideskEnabled() const {
    return m_combidesk_enabled;
}
void OAIIntegrationSettings::setCombideskEnabled(const bool &combidesk_enabled) {
    m_combidesk_enabled = combidesk_enabled;
    m_combidesk_enabled_isSet = true;
}

bool OAIIntegrationSettings::is_combidesk_enabled_Set() const{
    return m_combidesk_enabled_isSet;
}

bool OAIIntegrationSettings::is_combidesk_enabled_Valid() const{
    return m_combidesk_enabled_isValid;
}

QString OAIIntegrationSettings::getCrispId() const {
    return m_crisp_id;
}
void OAIIntegrationSettings::setCrispId(const QString &crisp_id) {
    m_crisp_id = crisp_id;
    m_crisp_id_isSet = true;
}

bool OAIIntegrationSettings::is_crisp_id_Set() const{
    return m_crisp_id_isSet;
}

bool OAIIntegrationSettings::is_crisp_id_Valid() const{
    return m_crisp_id_isValid;
}

QString OAIIntegrationSettings::getDriftId() const {
    return m_drift_id;
}
void OAIIntegrationSettings::setDriftId(const QString &drift_id) {
    m_drift_id = drift_id;
    m_drift_id_isSet = true;
}

bool OAIIntegrationSettings::is_drift_id_Set() const{
    return m_drift_id_isSet;
}

bool OAIIntegrationSettings::is_drift_id_Valid() const{
    return m_drift_id_isValid;
}

QString OAIIntegrationSettings::getGoogleAnalyticsId() const {
    return m_google_analytics_id;
}
void OAIIntegrationSettings::setGoogleAnalyticsId(const QString &google_analytics_id) {
    m_google_analytics_id = google_analytics_id;
    m_google_analytics_id_isSet = true;
}

bool OAIIntegrationSettings::is_google_analytics_id_Set() const{
    return m_google_analytics_id_isSet;
}

bool OAIIntegrationSettings::is_google_analytics_id_Valid() const{
    return m_google_analytics_id_isValid;
}

QString OAIIntegrationSettings::getGoogleTagManagerId() const {
    return m_google_tag_manager_id;
}
void OAIIntegrationSettings::setGoogleTagManagerId(const QString &google_tag_manager_id) {
    m_google_tag_manager_id = google_tag_manager_id;
    m_google_tag_manager_id_isSet = true;
}

bool OAIIntegrationSettings::is_google_tag_manager_id_Set() const{
    return m_google_tag_manager_id_isSet;
}

bool OAIIntegrationSettings::is_google_tag_manager_id_Valid() const{
    return m_google_tag_manager_id_isValid;
}

QString OAIIntegrationSettings::getHeapId() const {
    return m_heap_id;
}
void OAIIntegrationSettings::setHeapId(const QString &heap_id) {
    m_heap_id = heap_id;
    m_heap_id_isSet = true;
}

bool OAIIntegrationSettings::is_heap_id_Set() const{
    return m_heap_id_isSet;
}

bool OAIIntegrationSettings::is_heap_id_Valid() const{
    return m_heap_id_isValid;
}

QString OAIIntegrationSettings::getHubspotPortalId() const {
    return m_hubspot_portal_id;
}
void OAIIntegrationSettings::setHubspotPortalId(const QString &hubspot_portal_id) {
    m_hubspot_portal_id = hubspot_portal_id;
    m_hubspot_portal_id_isSet = true;
}

bool OAIIntegrationSettings::is_hubspot_portal_id_Set() const{
    return m_hubspot_portal_id_isSet;
}

bool OAIIntegrationSettings::is_hubspot_portal_id_Valid() const{
    return m_hubspot_portal_id_isValid;
}

bool OAIIntegrationSettings::isIntegromatEnabled() const {
    return m_integromat_enabled;
}
void OAIIntegrationSettings::setIntegromatEnabled(const bool &integromat_enabled) {
    m_integromat_enabled = integromat_enabled;
    m_integromat_enabled_isSet = true;
}

bool OAIIntegrationSettings::is_integromat_enabled_Set() const{
    return m_integromat_enabled_isSet;
}

bool OAIIntegrationSettings::is_integromat_enabled_Valid() const{
    return m_integromat_enabled_isValid;
}

QString OAIIntegrationSettings::getIntercomAppId() const {
    return m_intercom_app_id;
}
void OAIIntegrationSettings::setIntercomAppId(const QString &intercom_app_id) {
    m_intercom_app_id = intercom_app_id;
    m_intercom_app_id_isSet = true;
}

bool OAIIntegrationSettings::is_intercom_app_id_Set() const{
    return m_intercom_app_id_isSet;
}

bool OAIIntegrationSettings::is_intercom_app_id_Valid() const{
    return m_intercom_app_id_isValid;
}

QString OAIIntegrationSettings::getIubendaCookiePolicyId() const {
    return m_iubenda_cookie_policy_id;
}
void OAIIntegrationSettings::setIubendaCookiePolicyId(const QString &iubenda_cookie_policy_id) {
    m_iubenda_cookie_policy_id = iubenda_cookie_policy_id;
    m_iubenda_cookie_policy_id_isSet = true;
}

bool OAIIntegrationSettings::is_iubenda_cookie_policy_id_Set() const{
    return m_iubenda_cookie_policy_id_isSet;
}

bool OAIIntegrationSettings::is_iubenda_cookie_policy_id_Valid() const{
    return m_iubenda_cookie_policy_id_isValid;
}

QString OAIIntegrationSettings::getIubendaSiteId() const {
    return m_iubenda_site_id;
}
void OAIIntegrationSettings::setIubendaSiteId(const QString &iubenda_site_id) {
    m_iubenda_site_id = iubenda_site_id;
    m_iubenda_site_id_isSet = true;
}

bool OAIIntegrationSettings::is_iubenda_site_id_Set() const{
    return m_iubenda_site_id_isSet;
}

bool OAIIntegrationSettings::is_iubenda_site_id_Valid() const{
    return m_iubenda_site_id_isValid;
}

QString OAIIntegrationSettings::getJournyIoDomain() const {
    return m_journy_io_domain;
}
void OAIIntegrationSettings::setJournyIoDomain(const QString &journy_io_domain) {
    m_journy_io_domain = journy_io_domain;
    m_journy_io_domain_isSet = true;
}

bool OAIIntegrationSettings::is_journy_io_domain_Set() const{
    return m_journy_io_domain_isSet;
}

bool OAIIntegrationSettings::is_journy_io_domain_Valid() const{
    return m_journy_io_domain_isValid;
}

QString OAIIntegrationSettings::getJournyIoId() const {
    return m_journy_io_id;
}
void OAIIntegrationSettings::setJournyIoId(const QString &journy_io_id) {
    m_journy_io_id = journy_io_id;
    m_journy_io_id_isSet = true;
}

bool OAIIntegrationSettings::is_journy_io_id_Set() const{
    return m_journy_io_id_isSet;
}

bool OAIIntegrationSettings::is_journy_io_id_Valid() const{
    return m_journy_io_id_isValid;
}

QString OAIIntegrationSettings::getLivechatId() const {
    return m_livechat_id;
}
void OAIIntegrationSettings::setLivechatId(const QString &livechat_id) {
    m_livechat_id = livechat_id;
    m_livechat_id_isSet = true;
}

bool OAIIntegrationSettings::is_livechat_id_Set() const{
    return m_livechat_id_isSet;
}

bool OAIIntegrationSettings::is_livechat_id_Valid() const{
    return m_livechat_id_isValid;
}

QString OAIIntegrationSettings::getMetomicId() const {
    return m_metomic_id;
}
void OAIIntegrationSettings::setMetomicId(const QString &metomic_id) {
    m_metomic_id = metomic_id;
    m_metomic_id_isSet = true;
}

bool OAIIntegrationSettings::is_metomic_id_Set() const{
    return m_metomic_id_isSet;
}

bool OAIIntegrationSettings::is_metomic_id_Valid() const{
    return m_metomic_id_isValid;
}

bool OAIIntegrationSettings::isMicrosoftFlowEnabled() const {
    return m_microsoft_flow_enabled;
}
void OAIIntegrationSettings::setMicrosoftFlowEnabled(const bool &microsoft_flow_enabled) {
    m_microsoft_flow_enabled = microsoft_flow_enabled;
    m_microsoft_flow_enabled_isSet = true;
}

bool OAIIntegrationSettings::is_microsoft_flow_enabled_Set() const{
    return m_microsoft_flow_enabled_isSet;
}

bool OAIIntegrationSettings::is_microsoft_flow_enabled_Valid() const{
    return m_microsoft_flow_enabled_isValid;
}

QString OAIIntegrationSettings::getMicrosoftFlowId() const {
    return m_microsoft_flow_id;
}
void OAIIntegrationSettings::setMicrosoftFlowId(const QString &microsoft_flow_id) {
    m_microsoft_flow_id = microsoft_flow_id;
    m_microsoft_flow_id_isSet = true;
}

bool OAIIntegrationSettings::is_microsoft_flow_id_Set() const{
    return m_microsoft_flow_id_isSet;
}

bool OAIIntegrationSettings::is_microsoft_flow_id_Valid() const{
    return m_microsoft_flow_id_isValid;
}

QString OAIIntegrationSettings::getOnetrustId() const {
    return m_onetrust_id;
}
void OAIIntegrationSettings::setOnetrustId(const QString &onetrust_id) {
    m_onetrust_id = onetrust_id;
    m_onetrust_id_isSet = true;
}

bool OAIIntegrationSettings::is_onetrust_id_Set() const{
    return m_onetrust_id_isSet;
}

bool OAIIntegrationSettings::is_onetrust_id_Valid() const{
    return m_onetrust_id_isValid;
}

bool OAIIntegrationSettings::isPiesyncEnabled() const {
    return m_piesync_enabled;
}
void OAIIntegrationSettings::setPiesyncEnabled(const bool &piesync_enabled) {
    m_piesync_enabled = piesync_enabled;
    m_piesync_enabled_isSet = true;
}

bool OAIIntegrationSettings::is_piesync_enabled_Set() const{
    return m_piesync_enabled_isSet;
}

bool OAIIntegrationSettings::is_piesync_enabled_Valid() const{
    return m_piesync_enabled_isValid;
}

bool OAIIntegrationSettings::isSegmentEnabled() const {
    return m_segment_enabled;
}
void OAIIntegrationSettings::setSegmentEnabled(const bool &segment_enabled) {
    m_segment_enabled = segment_enabled;
    m_segment_enabled_isSet = true;
}

bool OAIIntegrationSettings::is_segment_enabled_Set() const{
    return m_segment_enabled_isSet;
}

bool OAIIntegrationSettings::is_segment_enabled_Valid() const{
    return m_segment_enabled_isValid;
}

QString OAIIntegrationSettings::getSegmentId() const {
    return m_segment_id;
}
void OAIIntegrationSettings::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAIIntegrationSettings::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAIIntegrationSettings::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

bool OAIIntegrationSettings::isTrayIoEnabled() const {
    return m_tray_io_enabled;
}
void OAIIntegrationSettings::setTrayIoEnabled(const bool &tray_io_enabled) {
    m_tray_io_enabled = tray_io_enabled;
    m_tray_io_enabled_isSet = true;
}

bool OAIIntegrationSettings::is_tray_io_enabled_Set() const{
    return m_tray_io_enabled_isSet;
}

bool OAIIntegrationSettings::is_tray_io_enabled_Valid() const{
    return m_tray_io_enabled_isValid;
}

QString OAIIntegrationSettings::getZapierBetaLink() const {
    return m_zapier_beta_link;
}
void OAIIntegrationSettings::setZapierBetaLink(const QString &zapier_beta_link) {
    m_zapier_beta_link = zapier_beta_link;
    m_zapier_beta_link_isSet = true;
}

bool OAIIntegrationSettings::is_zapier_beta_link_Set() const{
    return m_zapier_beta_link_isSet;
}

bool OAIIntegrationSettings::is_zapier_beta_link_Valid() const{
    return m_zapier_beta_link_isValid;
}

bool OAIIntegrationSettings::isZapierEnabled() const {
    return m_zapier_enabled;
}
void OAIIntegrationSettings::setZapierEnabled(const bool &zapier_enabled) {
    m_zapier_enabled = zapier_enabled;
    m_zapier_enabled_isSet = true;
}

bool OAIIntegrationSettings::is_zapier_enabled_Set() const{
    return m_zapier_enabled_isSet;
}

bool OAIIntegrationSettings::is_zapier_enabled_Valid() const{
    return m_zapier_enabled_isValid;
}

QString OAIIntegrationSettings::getZapierId() const {
    return m_zapier_id;
}
void OAIIntegrationSettings::setZapierId(const QString &zapier_id) {
    m_zapier_id = zapier_id;
    m_zapier_id_isSet = true;
}

bool OAIIntegrationSettings::is_zapier_id_Set() const{
    return m_zapier_id_isSet;
}

bool OAIIntegrationSettings::is_zapier_id_Valid() const{
    return m_zapier_id_isValid;
}

bool OAIIntegrationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_albacross_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automate_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blendr_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combidesk_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crisp_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_analytics_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_tag_manager_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heap_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hubspot_portal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integromat_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intercom_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iubenda_cookie_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iubenda_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journy_io_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journy_io_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_livechat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metomic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_flow_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_flow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onetrust_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_piesync_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tray_io_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zapier_beta_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zapier_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zapier_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
