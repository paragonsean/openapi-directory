/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcosystem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcosystem::OAIEcosystem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcosystem::OAIEcosystem() {
    this->initializeModel();
}

OAIEcosystem::~OAIEcosystem() {}

void OAIEcosystem::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_alternatives_background_color_isSet = false;
    m_alternatives_background_color_isValid = false;

    m_alternatives_color_isSet = false;
    m_alternatives_color_isValid = false;

    m_attribution_isSet = false;
    m_attribution_isValid = false;

    m_body_background_color_isSet = false;
    m_body_background_color_isValid = false;

    m_body_button_background_color_isSet = false;
    m_body_button_background_color_isValid = false;

    m_body_button_color_isSet = false;
    m_body_button_color_isValid = false;

    m_body_color_isSet = false;
    m_body_color_isValid = false;

    m_body_link_color_isSet = false;
    m_body_link_color_isValid = false;

    m_card_settings_isSet = false;
    m_card_settings_isValid = false;

    m_categories_count_badge_isSet = false;
    m_categories_count_badge_isValid = false;

    m_categories_show_max_items_isSet = false;
    m_categories_show_max_items_isValid = false;

    m_collections_count_badge_isSet = false;
    m_collections_count_badge_isValid = false;

    m_collections_title_isSet = false;
    m_collections_title_isValid = false;

    m_create_link_isSet = false;
    m_create_link_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_cta_settings_isSet = false;
    m_cta_settings_isValid = false;

    m_custom_domain_isSet = false;
    m_custom_domain_isValid = false;

    m_custom_settings_isSet = false;
    m_custom_settings_isValid = false;

    m_detail_pages_enabled_isSet = false;
    m_detail_pages_enabled_isValid = false;

    m_footer_background_color_isSet = false;
    m_footer_background_color_isValid = false;

    m_footer_color_isSet = false;
    m_footer_color_isValid = false;

    m_google_site_verification_id_isSet = false;
    m_google_site_verification_id_isValid = false;

    m_hide_install_buttons_isSet = false;
    m_hide_install_buttons_isValid = false;

    m_home_page_collection_category_cards_isSet = false;
    m_home_page_collection_category_cards_isValid = false;

    m_home_page_show_all_listings_isSet = false;
    m_home_page_show_all_listings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installation_request_flow_enabled_isSet = false;
    m_installation_request_flow_enabled_isValid = false;

    m_integration_settings_isSet = false;
    m_integration_settings_isValid = false;

    m_is_published_isSet = false;
    m_is_published_isValid = false;

    m_lead_form_settings_isSet = false;
    m_lead_form_settings_isValid = false;

    m_listing_settings_isSet = false;
    m_listing_settings_isValid = false;

    m_masthead_settings_isSet = false;
    m_masthead_settings_isValid = false;

    m_menu_position_isSet = false;
    m_menu_position_isValid = false;

    m_menu_style_isSet = false;
    m_menu_style_isValid = false;

    m_meta_tag_settings_isSet = false;
    m_meta_tag_settings_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_navigation_background_color_isSet = false;
    m_navigation_background_color_isValid = false;

    m_navigation_color_isSet = false;
    m_navigation_color_isValid = false;

    m_navigation_logo_post_fix_isSet = false;
    m_navigation_logo_post_fix_isValid = false;

    m_navigation_mobile_menu_type_isSet = false;
    m_navigation_mobile_menu_type_isValid = false;

    m_navigation_sticky_isSet = false;
    m_navigation_sticky_isValid = false;

    m_primary_color_isSet = false;
    m_primary_color_isValid = false;

    m_privacy_link_isSet = false;
    m_privacy_link_isValid = false;

    m_request_link_isSet = false;
    m_request_link_isValid = false;

    m_shadow_page_description_isSet = false;
    m_shadow_page_description_isValid = false;

    m_shadow_pages_enabled_isSet = false;
    m_shadow_pages_enabled_isValid = false;

    m_show_attribution_badge_isSet = false;
    m_show_attribution_badge_isValid = false;

    m_show_requested_listings_isSet = false;
    m_show_requested_listings_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_terms_link_isSet = false;
    m_terms_link_isValid = false;

    m_total_published_listings_isSet = false;
    m_total_published_listings_isValid = false;

    m_unify_application_id_isSet = false;
    m_unify_application_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_utm_campaign_isSet = false;
    m_utm_campaign_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_zaps_menu_title_isSet = false;
    m_zaps_menu_title_isValid = false;

    m_zaps_page_enabled_isSet = false;
    m_zaps_page_enabled_isValid = false;
}

void OAIEcosystem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcosystem::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_alternatives_background_color_isValid = ::OpenAPI::fromJsonValue(m_alternatives_background_color, json[QString("alternatives_background_color")]);
    m_alternatives_background_color_isSet = !json[QString("alternatives_background_color")].isNull() && m_alternatives_background_color_isValid;

    m_alternatives_color_isValid = ::OpenAPI::fromJsonValue(m_alternatives_color, json[QString("alternatives_color")]);
    m_alternatives_color_isSet = !json[QString("alternatives_color")].isNull() && m_alternatives_color_isValid;

    m_attribution_isValid = ::OpenAPI::fromJsonValue(m_attribution, json[QString("attribution")]);
    m_attribution_isSet = !json[QString("attribution")].isNull() && m_attribution_isValid;

    m_body_background_color_isValid = ::OpenAPI::fromJsonValue(m_body_background_color, json[QString("body_background_color")]);
    m_body_background_color_isSet = !json[QString("body_background_color")].isNull() && m_body_background_color_isValid;

    m_body_button_background_color_isValid = ::OpenAPI::fromJsonValue(m_body_button_background_color, json[QString("body_button_background_color")]);
    m_body_button_background_color_isSet = !json[QString("body_button_background_color")].isNull() && m_body_button_background_color_isValid;

    m_body_button_color_isValid = ::OpenAPI::fromJsonValue(m_body_button_color, json[QString("body_button_color")]);
    m_body_button_color_isSet = !json[QString("body_button_color")].isNull() && m_body_button_color_isValid;

    m_body_color_isValid = ::OpenAPI::fromJsonValue(m_body_color, json[QString("body_color")]);
    m_body_color_isSet = !json[QString("body_color")].isNull() && m_body_color_isValid;

    m_body_link_color_isValid = ::OpenAPI::fromJsonValue(m_body_link_color, json[QString("body_link_color")]);
    m_body_link_color_isSet = !json[QString("body_link_color")].isNull() && m_body_link_color_isValid;

    m_card_settings_isValid = ::OpenAPI::fromJsonValue(m_card_settings, json[QString("card_settings")]);
    m_card_settings_isSet = !json[QString("card_settings")].isNull() && m_card_settings_isValid;

    m_categories_count_badge_isValid = ::OpenAPI::fromJsonValue(m_categories_count_badge, json[QString("categories_count_badge")]);
    m_categories_count_badge_isSet = !json[QString("categories_count_badge")].isNull() && m_categories_count_badge_isValid;

    m_categories_show_max_items_isValid = ::OpenAPI::fromJsonValue(m_categories_show_max_items, json[QString("categories_show_max_items")]);
    m_categories_show_max_items_isSet = !json[QString("categories_show_max_items")].isNull() && m_categories_show_max_items_isValid;

    m_collections_count_badge_isValid = ::OpenAPI::fromJsonValue(m_collections_count_badge, json[QString("collections_count_badge")]);
    m_collections_count_badge_isSet = !json[QString("collections_count_badge")].isNull() && m_collections_count_badge_isValid;

    m_collections_title_isValid = ::OpenAPI::fromJsonValue(m_collections_title, json[QString("collections_title")]);
    m_collections_title_isSet = !json[QString("collections_title")].isNull() && m_collections_title_isValid;

    m_create_link_isValid = ::OpenAPI::fromJsonValue(m_create_link, json[QString("create_link")]);
    m_create_link_isSet = !json[QString("create_link")].isNull() && m_create_link_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_cta_settings_isValid = ::OpenAPI::fromJsonValue(m_cta_settings, json[QString("cta_settings")]);
    m_cta_settings_isSet = !json[QString("cta_settings")].isNull() && m_cta_settings_isValid;

    m_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_domain, json[QString("custom_domain")]);
    m_custom_domain_isSet = !json[QString("custom_domain")].isNull() && m_custom_domain_isValid;

    m_custom_settings_isValid = ::OpenAPI::fromJsonValue(m_custom_settings, json[QString("custom_settings")]);
    m_custom_settings_isSet = !json[QString("custom_settings")].isNull() && m_custom_settings_isValid;

    m_detail_pages_enabled_isValid = ::OpenAPI::fromJsonValue(m_detail_pages_enabled, json[QString("detail_pages_enabled")]);
    m_detail_pages_enabled_isSet = !json[QString("detail_pages_enabled")].isNull() && m_detail_pages_enabled_isValid;

    m_footer_background_color_isValid = ::OpenAPI::fromJsonValue(m_footer_background_color, json[QString("footer_background_color")]);
    m_footer_background_color_isSet = !json[QString("footer_background_color")].isNull() && m_footer_background_color_isValid;

    m_footer_color_isValid = ::OpenAPI::fromJsonValue(m_footer_color, json[QString("footer_color")]);
    m_footer_color_isSet = !json[QString("footer_color")].isNull() && m_footer_color_isValid;

    m_google_site_verification_id_isValid = ::OpenAPI::fromJsonValue(m_google_site_verification_id, json[QString("google_site_verification_id")]);
    m_google_site_verification_id_isSet = !json[QString("google_site_verification_id")].isNull() && m_google_site_verification_id_isValid;

    m_hide_install_buttons_isValid = ::OpenAPI::fromJsonValue(m_hide_install_buttons, json[QString("hide_install_buttons")]);
    m_hide_install_buttons_isSet = !json[QString("hide_install_buttons")].isNull() && m_hide_install_buttons_isValid;

    m_home_page_collection_category_cards_isValid = ::OpenAPI::fromJsonValue(m_home_page_collection_category_cards, json[QString("home_page_collection_category_cards")]);
    m_home_page_collection_category_cards_isSet = !json[QString("home_page_collection_category_cards")].isNull() && m_home_page_collection_category_cards_isValid;

    m_home_page_show_all_listings_isValid = ::OpenAPI::fromJsonValue(m_home_page_show_all_listings, json[QString("home_page_show_all_listings")]);
    m_home_page_show_all_listings_isSet = !json[QString("home_page_show_all_listings")].isNull() && m_home_page_show_all_listings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installation_request_flow_enabled_isValid = ::OpenAPI::fromJsonValue(m_installation_request_flow_enabled, json[QString("installation_request_flow_enabled")]);
    m_installation_request_flow_enabled_isSet = !json[QString("installation_request_flow_enabled")].isNull() && m_installation_request_flow_enabled_isValid;

    m_integration_settings_isValid = ::OpenAPI::fromJsonValue(m_integration_settings, json[QString("integration_settings")]);
    m_integration_settings_isSet = !json[QString("integration_settings")].isNull() && m_integration_settings_isValid;

    m_is_published_isValid = ::OpenAPI::fromJsonValue(m_is_published, json[QString("is_published")]);
    m_is_published_isSet = !json[QString("is_published")].isNull() && m_is_published_isValid;

    m_lead_form_settings_isValid = ::OpenAPI::fromJsonValue(m_lead_form_settings, json[QString("lead_form_settings")]);
    m_lead_form_settings_isSet = !json[QString("lead_form_settings")].isNull() && m_lead_form_settings_isValid;

    m_listing_settings_isValid = ::OpenAPI::fromJsonValue(m_listing_settings, json[QString("listing_settings")]);
    m_listing_settings_isSet = !json[QString("listing_settings")].isNull() && m_listing_settings_isValid;

    m_masthead_settings_isValid = ::OpenAPI::fromJsonValue(m_masthead_settings, json[QString("masthead_settings")]);
    m_masthead_settings_isSet = !json[QString("masthead_settings")].isNull() && m_masthead_settings_isValid;

    m_menu_position_isValid = ::OpenAPI::fromJsonValue(m_menu_position, json[QString("menu_position")]);
    m_menu_position_isSet = !json[QString("menu_position")].isNull() && m_menu_position_isValid;

    m_menu_style_isValid = ::OpenAPI::fromJsonValue(m_menu_style, json[QString("menu_style")]);
    m_menu_style_isSet = !json[QString("menu_style")].isNull() && m_menu_style_isValid;

    m_meta_tag_settings_isValid = ::OpenAPI::fromJsonValue(m_meta_tag_settings, json[QString("meta_tag_settings")]);
    m_meta_tag_settings_isSet = !json[QString("meta_tag_settings")].isNull() && m_meta_tag_settings_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_navigation_background_color_isValid = ::OpenAPI::fromJsonValue(m_navigation_background_color, json[QString("navigation_background_color")]);
    m_navigation_background_color_isSet = !json[QString("navigation_background_color")].isNull() && m_navigation_background_color_isValid;

    m_navigation_color_isValid = ::OpenAPI::fromJsonValue(m_navigation_color, json[QString("navigation_color")]);
    m_navigation_color_isSet = !json[QString("navigation_color")].isNull() && m_navigation_color_isValid;

    m_navigation_logo_post_fix_isValid = ::OpenAPI::fromJsonValue(m_navigation_logo_post_fix, json[QString("navigation_logo_post_fix")]);
    m_navigation_logo_post_fix_isSet = !json[QString("navigation_logo_post_fix")].isNull() && m_navigation_logo_post_fix_isValid;

    m_navigation_mobile_menu_type_isValid = ::OpenAPI::fromJsonValue(m_navigation_mobile_menu_type, json[QString("navigation_mobile_menu_type")]);
    m_navigation_mobile_menu_type_isSet = !json[QString("navigation_mobile_menu_type")].isNull() && m_navigation_mobile_menu_type_isValid;

    m_navigation_sticky_isValid = ::OpenAPI::fromJsonValue(m_navigation_sticky, json[QString("navigation_sticky")]);
    m_navigation_sticky_isSet = !json[QString("navigation_sticky")].isNull() && m_navigation_sticky_isValid;

    m_primary_color_isValid = ::OpenAPI::fromJsonValue(m_primary_color, json[QString("primary_color")]);
    m_primary_color_isSet = !json[QString("primary_color")].isNull() && m_primary_color_isValid;

    m_privacy_link_isValid = ::OpenAPI::fromJsonValue(m_privacy_link, json[QString("privacy_link")]);
    m_privacy_link_isSet = !json[QString("privacy_link")].isNull() && m_privacy_link_isValid;

    m_request_link_isValid = ::OpenAPI::fromJsonValue(m_request_link, json[QString("request_link")]);
    m_request_link_isSet = !json[QString("request_link")].isNull() && m_request_link_isValid;

    m_shadow_page_description_isValid = ::OpenAPI::fromJsonValue(m_shadow_page_description, json[QString("shadow_page_description")]);
    m_shadow_page_description_isSet = !json[QString("shadow_page_description")].isNull() && m_shadow_page_description_isValid;

    m_shadow_pages_enabled_isValid = ::OpenAPI::fromJsonValue(m_shadow_pages_enabled, json[QString("shadow_pages_enabled")]);
    m_shadow_pages_enabled_isSet = !json[QString("shadow_pages_enabled")].isNull() && m_shadow_pages_enabled_isValid;

    m_show_attribution_badge_isValid = ::OpenAPI::fromJsonValue(m_show_attribution_badge, json[QString("show_attribution_badge")]);
    m_show_attribution_badge_isSet = !json[QString("show_attribution_badge")].isNull() && m_show_attribution_badge_isValid;

    m_show_requested_listings_isValid = ::OpenAPI::fromJsonValue(m_show_requested_listings, json[QString("show_requested_listings")]);
    m_show_requested_listings_isSet = !json[QString("show_requested_listings")].isNull() && m_show_requested_listings_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_terms_link_isValid = ::OpenAPI::fromJsonValue(m_terms_link, json[QString("terms_link")]);
    m_terms_link_isSet = !json[QString("terms_link")].isNull() && m_terms_link_isValid;

    m_total_published_listings_isValid = ::OpenAPI::fromJsonValue(m_total_published_listings, json[QString("total_published_listings")]);
    m_total_published_listings_isSet = !json[QString("total_published_listings")].isNull() && m_total_published_listings_isValid;

    m_unify_application_id_isValid = ::OpenAPI::fromJsonValue(m_unify_application_id, json[QString("unify_application_id")]);
    m_unify_application_id_isSet = !json[QString("unify_application_id")].isNull() && m_unify_application_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_utm_campaign_isValid = ::OpenAPI::fromJsonValue(m_utm_campaign, json[QString("utm_campaign")]);
    m_utm_campaign_isSet = !json[QString("utm_campaign")].isNull() && m_utm_campaign_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_zaps_menu_title_isValid = ::OpenAPI::fromJsonValue(m_zaps_menu_title, json[QString("zaps_menu_title")]);
    m_zaps_menu_title_isSet = !json[QString("zaps_menu_title")].isNull() && m_zaps_menu_title_isValid;

    m_zaps_page_enabled_isValid = ::OpenAPI::fromJsonValue(m_zaps_page_enabled, json[QString("zaps_page_enabled")]);
    m_zaps_page_enabled_isSet = !json[QString("zaps_page_enabled")].isNull() && m_zaps_page_enabled_isValid;
}

QString OAIEcosystem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcosystem::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_alternatives_background_color_isSet) {
        obj.insert(QString("alternatives_background_color"), ::OpenAPI::toJsonValue(m_alternatives_background_color));
    }
    if (m_alternatives_color_isSet) {
        obj.insert(QString("alternatives_color"), ::OpenAPI::toJsonValue(m_alternatives_color));
    }
    if (m_attribution_isSet) {
        obj.insert(QString("attribution"), ::OpenAPI::toJsonValue(m_attribution));
    }
    if (m_body_background_color_isSet) {
        obj.insert(QString("body_background_color"), ::OpenAPI::toJsonValue(m_body_background_color));
    }
    if (m_body_button_background_color_isSet) {
        obj.insert(QString("body_button_background_color"), ::OpenAPI::toJsonValue(m_body_button_background_color));
    }
    if (m_body_button_color_isSet) {
        obj.insert(QString("body_button_color"), ::OpenAPI::toJsonValue(m_body_button_color));
    }
    if (m_body_color_isSet) {
        obj.insert(QString("body_color"), ::OpenAPI::toJsonValue(m_body_color));
    }
    if (m_body_link_color_isSet) {
        obj.insert(QString("body_link_color"), ::OpenAPI::toJsonValue(m_body_link_color));
    }
    if (m_card_settings.isSet()) {
        obj.insert(QString("card_settings"), ::OpenAPI::toJsonValue(m_card_settings));
    }
    if (m_categories_count_badge_isSet) {
        obj.insert(QString("categories_count_badge"), ::OpenAPI::toJsonValue(m_categories_count_badge));
    }
    if (m_categories_show_max_items_isSet) {
        obj.insert(QString("categories_show_max_items"), ::OpenAPI::toJsonValue(m_categories_show_max_items));
    }
    if (m_collections_count_badge_isSet) {
        obj.insert(QString("collections_count_badge"), ::OpenAPI::toJsonValue(m_collections_count_badge));
    }
    if (m_collections_title_isSet) {
        obj.insert(QString("collections_title"), ::OpenAPI::toJsonValue(m_collections_title));
    }
    if (m_create_link_isSet) {
        obj.insert(QString("create_link"), ::OpenAPI::toJsonValue(m_create_link));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_cta_settings.isSet()) {
        obj.insert(QString("cta_settings"), ::OpenAPI::toJsonValue(m_cta_settings));
    }
    if (m_custom_domain_isSet) {
        obj.insert(QString("custom_domain"), ::OpenAPI::toJsonValue(m_custom_domain));
    }
    if (m_custom_settings.isSet()) {
        obj.insert(QString("custom_settings"), ::OpenAPI::toJsonValue(m_custom_settings));
    }
    if (m_detail_pages_enabled_isSet) {
        obj.insert(QString("detail_pages_enabled"), ::OpenAPI::toJsonValue(m_detail_pages_enabled));
    }
    if (m_footer_background_color_isSet) {
        obj.insert(QString("footer_background_color"), ::OpenAPI::toJsonValue(m_footer_background_color));
    }
    if (m_footer_color_isSet) {
        obj.insert(QString("footer_color"), ::OpenAPI::toJsonValue(m_footer_color));
    }
    if (m_google_site_verification_id_isSet) {
        obj.insert(QString("google_site_verification_id"), ::OpenAPI::toJsonValue(m_google_site_verification_id));
    }
    if (m_hide_install_buttons_isSet) {
        obj.insert(QString("hide_install_buttons"), ::OpenAPI::toJsonValue(m_hide_install_buttons));
    }
    if (m_home_page_collection_category_cards_isSet) {
        obj.insert(QString("home_page_collection_category_cards"), ::OpenAPI::toJsonValue(m_home_page_collection_category_cards));
    }
    if (m_home_page_show_all_listings_isSet) {
        obj.insert(QString("home_page_show_all_listings"), ::OpenAPI::toJsonValue(m_home_page_show_all_listings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installation_request_flow_enabled_isSet) {
        obj.insert(QString("installation_request_flow_enabled"), ::OpenAPI::toJsonValue(m_installation_request_flow_enabled));
    }
    if (m_integration_settings.isSet()) {
        obj.insert(QString("integration_settings"), ::OpenAPI::toJsonValue(m_integration_settings));
    }
    if (m_is_published_isSet) {
        obj.insert(QString("is_published"), ::OpenAPI::toJsonValue(m_is_published));
    }
    if (m_lead_form_settings.isSet()) {
        obj.insert(QString("lead_form_settings"), ::OpenAPI::toJsonValue(m_lead_form_settings));
    }
    if (m_listing_settings.isSet()) {
        obj.insert(QString("listing_settings"), ::OpenAPI::toJsonValue(m_listing_settings));
    }
    if (m_masthead_settings.isSet()) {
        obj.insert(QString("masthead_settings"), ::OpenAPI::toJsonValue(m_masthead_settings));
    }
    if (m_menu_position_isSet) {
        obj.insert(QString("menu_position"), ::OpenAPI::toJsonValue(m_menu_position));
    }
    if (m_menu_style_isSet) {
        obj.insert(QString("menu_style"), ::OpenAPI::toJsonValue(m_menu_style));
    }
    if (m_meta_tag_settings.isSet()) {
        obj.insert(QString("meta_tag_settings"), ::OpenAPI::toJsonValue(m_meta_tag_settings));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_navigation_background_color_isSet) {
        obj.insert(QString("navigation_background_color"), ::OpenAPI::toJsonValue(m_navigation_background_color));
    }
    if (m_navigation_color_isSet) {
        obj.insert(QString("navigation_color"), ::OpenAPI::toJsonValue(m_navigation_color));
    }
    if (m_navigation_logo_post_fix_isSet) {
        obj.insert(QString("navigation_logo_post_fix"), ::OpenAPI::toJsonValue(m_navigation_logo_post_fix));
    }
    if (m_navigation_mobile_menu_type_isSet) {
        obj.insert(QString("navigation_mobile_menu_type"), ::OpenAPI::toJsonValue(m_navigation_mobile_menu_type));
    }
    if (m_navigation_sticky_isSet) {
        obj.insert(QString("navigation_sticky"), ::OpenAPI::toJsonValue(m_navigation_sticky));
    }
    if (m_primary_color_isSet) {
        obj.insert(QString("primary_color"), ::OpenAPI::toJsonValue(m_primary_color));
    }
    if (m_privacy_link_isSet) {
        obj.insert(QString("privacy_link"), ::OpenAPI::toJsonValue(m_privacy_link));
    }
    if (m_request_link_isSet) {
        obj.insert(QString("request_link"), ::OpenAPI::toJsonValue(m_request_link));
    }
    if (m_shadow_page_description_isSet) {
        obj.insert(QString("shadow_page_description"), ::OpenAPI::toJsonValue(m_shadow_page_description));
    }
    if (m_shadow_pages_enabled_isSet) {
        obj.insert(QString("shadow_pages_enabled"), ::OpenAPI::toJsonValue(m_shadow_pages_enabled));
    }
    if (m_show_attribution_badge_isSet) {
        obj.insert(QString("show_attribution_badge"), ::OpenAPI::toJsonValue(m_show_attribution_badge));
    }
    if (m_show_requested_listings_isSet) {
        obj.insert(QString("show_requested_listings"), ::OpenAPI::toJsonValue(m_show_requested_listings));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_terms_link_isSet) {
        obj.insert(QString("terms_link"), ::OpenAPI::toJsonValue(m_terms_link));
    }
    if (m_total_published_listings_isSet) {
        obj.insert(QString("total_published_listings"), ::OpenAPI::toJsonValue(m_total_published_listings));
    }
    if (m_unify_application_id_isSet) {
        obj.insert(QString("unify_application_id"), ::OpenAPI::toJsonValue(m_unify_application_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_utm_campaign_isSet) {
        obj.insert(QString("utm_campaign"), ::OpenAPI::toJsonValue(m_utm_campaign));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_zaps_menu_title_isSet) {
        obj.insert(QString("zaps_menu_title"), ::OpenAPI::toJsonValue(m_zaps_menu_title));
    }
    if (m_zaps_page_enabled_isSet) {
        obj.insert(QString("zaps_page_enabled"), ::OpenAPI::toJsonValue(m_zaps_page_enabled));
    }
    return obj;
}

QString OAIEcosystem::getAbout() const {
    return m_about;
}
void OAIEcosystem::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIEcosystem::is_about_Set() const{
    return m_about_isSet;
}

bool OAIEcosystem::is_about_Valid() const{
    return m_about_isValid;
}

QString OAIEcosystem::getAlternativesBackgroundColor() const {
    return m_alternatives_background_color;
}
void OAIEcosystem::setAlternativesBackgroundColor(const QString &alternatives_background_color) {
    m_alternatives_background_color = alternatives_background_color;
    m_alternatives_background_color_isSet = true;
}

bool OAIEcosystem::is_alternatives_background_color_Set() const{
    return m_alternatives_background_color_isSet;
}

bool OAIEcosystem::is_alternatives_background_color_Valid() const{
    return m_alternatives_background_color_isValid;
}

QString OAIEcosystem::getAlternativesColor() const {
    return m_alternatives_color;
}
void OAIEcosystem::setAlternativesColor(const QString &alternatives_color) {
    m_alternatives_color = alternatives_color;
    m_alternatives_color_isSet = true;
}

bool OAIEcosystem::is_alternatives_color_Set() const{
    return m_alternatives_color_isSet;
}

bool OAIEcosystem::is_alternatives_color_Valid() const{
    return m_alternatives_color_isValid;
}

bool OAIEcosystem::isAttribution() const {
    return m_attribution;
}
void OAIEcosystem::setAttribution(const bool &attribution) {
    m_attribution = attribution;
    m_attribution_isSet = true;
}

bool OAIEcosystem::is_attribution_Set() const{
    return m_attribution_isSet;
}

bool OAIEcosystem::is_attribution_Valid() const{
    return m_attribution_isValid;
}

QString OAIEcosystem::getBodyBackgroundColor() const {
    return m_body_background_color;
}
void OAIEcosystem::setBodyBackgroundColor(const QString &body_background_color) {
    m_body_background_color = body_background_color;
    m_body_background_color_isSet = true;
}

bool OAIEcosystem::is_body_background_color_Set() const{
    return m_body_background_color_isSet;
}

bool OAIEcosystem::is_body_background_color_Valid() const{
    return m_body_background_color_isValid;
}

QString OAIEcosystem::getBodyButtonBackgroundColor() const {
    return m_body_button_background_color;
}
void OAIEcosystem::setBodyButtonBackgroundColor(const QString &body_button_background_color) {
    m_body_button_background_color = body_button_background_color;
    m_body_button_background_color_isSet = true;
}

bool OAIEcosystem::is_body_button_background_color_Set() const{
    return m_body_button_background_color_isSet;
}

bool OAIEcosystem::is_body_button_background_color_Valid() const{
    return m_body_button_background_color_isValid;
}

QString OAIEcosystem::getBodyButtonColor() const {
    return m_body_button_color;
}
void OAIEcosystem::setBodyButtonColor(const QString &body_button_color) {
    m_body_button_color = body_button_color;
    m_body_button_color_isSet = true;
}

bool OAIEcosystem::is_body_button_color_Set() const{
    return m_body_button_color_isSet;
}

bool OAIEcosystem::is_body_button_color_Valid() const{
    return m_body_button_color_isValid;
}

QString OAIEcosystem::getBodyColor() const {
    return m_body_color;
}
void OAIEcosystem::setBodyColor(const QString &body_color) {
    m_body_color = body_color;
    m_body_color_isSet = true;
}

bool OAIEcosystem::is_body_color_Set() const{
    return m_body_color_isSet;
}

bool OAIEcosystem::is_body_color_Valid() const{
    return m_body_color_isValid;
}

QString OAIEcosystem::getBodyLinkColor() const {
    return m_body_link_color;
}
void OAIEcosystem::setBodyLinkColor(const QString &body_link_color) {
    m_body_link_color = body_link_color;
    m_body_link_color_isSet = true;
}

bool OAIEcosystem::is_body_link_color_Set() const{
    return m_body_link_color_isSet;
}

bool OAIEcosystem::is_body_link_color_Valid() const{
    return m_body_link_color_isValid;
}

OAICardSettings OAIEcosystem::getCardSettings() const {
    return m_card_settings;
}
void OAIEcosystem::setCardSettings(const OAICardSettings &card_settings) {
    m_card_settings = card_settings;
    m_card_settings_isSet = true;
}

bool OAIEcosystem::is_card_settings_Set() const{
    return m_card_settings_isSet;
}

bool OAIEcosystem::is_card_settings_Valid() const{
    return m_card_settings_isValid;
}

bool OAIEcosystem::isCategoriesCountBadge() const {
    return m_categories_count_badge;
}
void OAIEcosystem::setCategoriesCountBadge(const bool &categories_count_badge) {
    m_categories_count_badge = categories_count_badge;
    m_categories_count_badge_isSet = true;
}

bool OAIEcosystem::is_categories_count_badge_Set() const{
    return m_categories_count_badge_isSet;
}

bool OAIEcosystem::is_categories_count_badge_Valid() const{
    return m_categories_count_badge_isValid;
}

qint32 OAIEcosystem::getCategoriesShowMaxItems() const {
    return m_categories_show_max_items;
}
void OAIEcosystem::setCategoriesShowMaxItems(const qint32 &categories_show_max_items) {
    m_categories_show_max_items = categories_show_max_items;
    m_categories_show_max_items_isSet = true;
}

bool OAIEcosystem::is_categories_show_max_items_Set() const{
    return m_categories_show_max_items_isSet;
}

bool OAIEcosystem::is_categories_show_max_items_Valid() const{
    return m_categories_show_max_items_isValid;
}

bool OAIEcosystem::isCollectionsCountBadge() const {
    return m_collections_count_badge;
}
void OAIEcosystem::setCollectionsCountBadge(const bool &collections_count_badge) {
    m_collections_count_badge = collections_count_badge;
    m_collections_count_badge_isSet = true;
}

bool OAIEcosystem::is_collections_count_badge_Set() const{
    return m_collections_count_badge_isSet;
}

bool OAIEcosystem::is_collections_count_badge_Valid() const{
    return m_collections_count_badge_isValid;
}

QString OAIEcosystem::getCollectionsTitle() const {
    return m_collections_title;
}
void OAIEcosystem::setCollectionsTitle(const QString &collections_title) {
    m_collections_title = collections_title;
    m_collections_title_isSet = true;
}

bool OAIEcosystem::is_collections_title_Set() const{
    return m_collections_title_isSet;
}

bool OAIEcosystem::is_collections_title_Valid() const{
    return m_collections_title_isValid;
}

QString OAIEcosystem::getCreateLink() const {
    return m_create_link;
}
void OAIEcosystem::setCreateLink(const QString &create_link) {
    m_create_link = create_link;
    m_create_link_isSet = true;
}

bool OAIEcosystem::is_create_link_Set() const{
    return m_create_link_isSet;
}

bool OAIEcosystem::is_create_link_Valid() const{
    return m_create_link_isValid;
}

QDateTime OAIEcosystem::getCreatedAt() const {
    return m_created_at;
}
void OAIEcosystem::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEcosystem::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEcosystem::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICTASettings OAIEcosystem::getCtaSettings() const {
    return m_cta_settings;
}
void OAIEcosystem::setCtaSettings(const OAICTASettings &cta_settings) {
    m_cta_settings = cta_settings;
    m_cta_settings_isSet = true;
}

bool OAIEcosystem::is_cta_settings_Set() const{
    return m_cta_settings_isSet;
}

bool OAIEcosystem::is_cta_settings_Valid() const{
    return m_cta_settings_isValid;
}

QString OAIEcosystem::getCustomDomain() const {
    return m_custom_domain;
}
void OAIEcosystem::setCustomDomain(const QString &custom_domain) {
    m_custom_domain = custom_domain;
    m_custom_domain_isSet = true;
}

bool OAIEcosystem::is_custom_domain_Set() const{
    return m_custom_domain_isSet;
}

bool OAIEcosystem::is_custom_domain_Valid() const{
    return m_custom_domain_isValid;
}

OAICustomSettings OAIEcosystem::getCustomSettings() const {
    return m_custom_settings;
}
void OAIEcosystem::setCustomSettings(const OAICustomSettings &custom_settings) {
    m_custom_settings = custom_settings;
    m_custom_settings_isSet = true;
}

bool OAIEcosystem::is_custom_settings_Set() const{
    return m_custom_settings_isSet;
}

bool OAIEcosystem::is_custom_settings_Valid() const{
    return m_custom_settings_isValid;
}

bool OAIEcosystem::isDetailPagesEnabled() const {
    return m_detail_pages_enabled;
}
void OAIEcosystem::setDetailPagesEnabled(const bool &detail_pages_enabled) {
    m_detail_pages_enabled = detail_pages_enabled;
    m_detail_pages_enabled_isSet = true;
}

bool OAIEcosystem::is_detail_pages_enabled_Set() const{
    return m_detail_pages_enabled_isSet;
}

bool OAIEcosystem::is_detail_pages_enabled_Valid() const{
    return m_detail_pages_enabled_isValid;
}

QString OAIEcosystem::getFooterBackgroundColor() const {
    return m_footer_background_color;
}
void OAIEcosystem::setFooterBackgroundColor(const QString &footer_background_color) {
    m_footer_background_color = footer_background_color;
    m_footer_background_color_isSet = true;
}

bool OAIEcosystem::is_footer_background_color_Set() const{
    return m_footer_background_color_isSet;
}

bool OAIEcosystem::is_footer_background_color_Valid() const{
    return m_footer_background_color_isValid;
}

QString OAIEcosystem::getFooterColor() const {
    return m_footer_color;
}
void OAIEcosystem::setFooterColor(const QString &footer_color) {
    m_footer_color = footer_color;
    m_footer_color_isSet = true;
}

bool OAIEcosystem::is_footer_color_Set() const{
    return m_footer_color_isSet;
}

bool OAIEcosystem::is_footer_color_Valid() const{
    return m_footer_color_isValid;
}

QString OAIEcosystem::getGoogleSiteVerificationId() const {
    return m_google_site_verification_id;
}
void OAIEcosystem::setGoogleSiteVerificationId(const QString &google_site_verification_id) {
    m_google_site_verification_id = google_site_verification_id;
    m_google_site_verification_id_isSet = true;
}

bool OAIEcosystem::is_google_site_verification_id_Set() const{
    return m_google_site_verification_id_isSet;
}

bool OAIEcosystem::is_google_site_verification_id_Valid() const{
    return m_google_site_verification_id_isValid;
}

bool OAIEcosystem::isHideInstallButtons() const {
    return m_hide_install_buttons;
}
void OAIEcosystem::setHideInstallButtons(const bool &hide_install_buttons) {
    m_hide_install_buttons = hide_install_buttons;
    m_hide_install_buttons_isSet = true;
}

bool OAIEcosystem::is_hide_install_buttons_Set() const{
    return m_hide_install_buttons_isSet;
}

bool OAIEcosystem::is_hide_install_buttons_Valid() const{
    return m_hide_install_buttons_isValid;
}

bool OAIEcosystem::isHomePageCollectionCategoryCards() const {
    return m_home_page_collection_category_cards;
}
void OAIEcosystem::setHomePageCollectionCategoryCards(const bool &home_page_collection_category_cards) {
    m_home_page_collection_category_cards = home_page_collection_category_cards;
    m_home_page_collection_category_cards_isSet = true;
}

bool OAIEcosystem::is_home_page_collection_category_cards_Set() const{
    return m_home_page_collection_category_cards_isSet;
}

bool OAIEcosystem::is_home_page_collection_category_cards_Valid() const{
    return m_home_page_collection_category_cards_isValid;
}

bool OAIEcosystem::isHomePageShowAllListings() const {
    return m_home_page_show_all_listings;
}
void OAIEcosystem::setHomePageShowAllListings(const bool &home_page_show_all_listings) {
    m_home_page_show_all_listings = home_page_show_all_listings;
    m_home_page_show_all_listings_isSet = true;
}

bool OAIEcosystem::is_home_page_show_all_listings_Set() const{
    return m_home_page_show_all_listings_isSet;
}

bool OAIEcosystem::is_home_page_show_all_listings_Valid() const{
    return m_home_page_show_all_listings_isValid;
}

QString OAIEcosystem::getId() const {
    return m_id;
}
void OAIEcosystem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEcosystem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEcosystem::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEcosystem::isInstallationRequestFlowEnabled() const {
    return m_installation_request_flow_enabled;
}
void OAIEcosystem::setInstallationRequestFlowEnabled(const bool &installation_request_flow_enabled) {
    m_installation_request_flow_enabled = installation_request_flow_enabled;
    m_installation_request_flow_enabled_isSet = true;
}

bool OAIEcosystem::is_installation_request_flow_enabled_Set() const{
    return m_installation_request_flow_enabled_isSet;
}

bool OAIEcosystem::is_installation_request_flow_enabled_Valid() const{
    return m_installation_request_flow_enabled_isValid;
}

OAIIntegrationSettings OAIEcosystem::getIntegrationSettings() const {
    return m_integration_settings;
}
void OAIEcosystem::setIntegrationSettings(const OAIIntegrationSettings &integration_settings) {
    m_integration_settings = integration_settings;
    m_integration_settings_isSet = true;
}

bool OAIEcosystem::is_integration_settings_Set() const{
    return m_integration_settings_isSet;
}

bool OAIEcosystem::is_integration_settings_Valid() const{
    return m_integration_settings_isValid;
}

bool OAIEcosystem::isIsPublished() const {
    return m_is_published;
}
void OAIEcosystem::setIsPublished(const bool &is_published) {
    m_is_published = is_published;
    m_is_published_isSet = true;
}

bool OAIEcosystem::is_is_published_Set() const{
    return m_is_published_isSet;
}

bool OAIEcosystem::is_is_published_Valid() const{
    return m_is_published_isValid;
}

OAILeadFormSettings OAIEcosystem::getLeadFormSettings() const {
    return m_lead_form_settings;
}
void OAIEcosystem::setLeadFormSettings(const OAILeadFormSettings &lead_form_settings) {
    m_lead_form_settings = lead_form_settings;
    m_lead_form_settings_isSet = true;
}

bool OAIEcosystem::is_lead_form_settings_Set() const{
    return m_lead_form_settings_isSet;
}

bool OAIEcosystem::is_lead_form_settings_Valid() const{
    return m_lead_form_settings_isValid;
}

OAIListingSettings OAIEcosystem::getListingSettings() const {
    return m_listing_settings;
}
void OAIEcosystem::setListingSettings(const OAIListingSettings &listing_settings) {
    m_listing_settings = listing_settings;
    m_listing_settings_isSet = true;
}

bool OAIEcosystem::is_listing_settings_Set() const{
    return m_listing_settings_isSet;
}

bool OAIEcosystem::is_listing_settings_Valid() const{
    return m_listing_settings_isValid;
}

OAIMastheadSettings OAIEcosystem::getMastheadSettings() const {
    return m_masthead_settings;
}
void OAIEcosystem::setMastheadSettings(const OAIMastheadSettings &masthead_settings) {
    m_masthead_settings = masthead_settings;
    m_masthead_settings_isSet = true;
}

bool OAIEcosystem::is_masthead_settings_Set() const{
    return m_masthead_settings_isSet;
}

bool OAIEcosystem::is_masthead_settings_Valid() const{
    return m_masthead_settings_isValid;
}

QString OAIEcosystem::getMenuPosition() const {
    return m_menu_position;
}
void OAIEcosystem::setMenuPosition(const QString &menu_position) {
    m_menu_position = menu_position;
    m_menu_position_isSet = true;
}

bool OAIEcosystem::is_menu_position_Set() const{
    return m_menu_position_isSet;
}

bool OAIEcosystem::is_menu_position_Valid() const{
    return m_menu_position_isValid;
}

QString OAIEcosystem::getMenuStyle() const {
    return m_menu_style;
}
void OAIEcosystem::setMenuStyle(const QString &menu_style) {
    m_menu_style = menu_style;
    m_menu_style_isSet = true;
}

bool OAIEcosystem::is_menu_style_Set() const{
    return m_menu_style_isSet;
}

bool OAIEcosystem::is_menu_style_Valid() const{
    return m_menu_style_isValid;
}

OAIMetaTagSettings OAIEcosystem::getMetaTagSettings() const {
    return m_meta_tag_settings;
}
void OAIEcosystem::setMetaTagSettings(const OAIMetaTagSettings &meta_tag_settings) {
    m_meta_tag_settings = meta_tag_settings;
    m_meta_tag_settings_isSet = true;
}

bool OAIEcosystem::is_meta_tag_settings_Set() const{
    return m_meta_tag_settings_isSet;
}

bool OAIEcosystem::is_meta_tag_settings_Valid() const{
    return m_meta_tag_settings_isValid;
}

QString OAIEcosystem::getName() const {
    return m_name;
}
void OAIEcosystem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEcosystem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEcosystem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEcosystem::getNavigationBackgroundColor() const {
    return m_navigation_background_color;
}
void OAIEcosystem::setNavigationBackgroundColor(const QString &navigation_background_color) {
    m_navigation_background_color = navigation_background_color;
    m_navigation_background_color_isSet = true;
}

bool OAIEcosystem::is_navigation_background_color_Set() const{
    return m_navigation_background_color_isSet;
}

bool OAIEcosystem::is_navigation_background_color_Valid() const{
    return m_navigation_background_color_isValid;
}

QString OAIEcosystem::getNavigationColor() const {
    return m_navigation_color;
}
void OAIEcosystem::setNavigationColor(const QString &navigation_color) {
    m_navigation_color = navigation_color;
    m_navigation_color_isSet = true;
}

bool OAIEcosystem::is_navigation_color_Set() const{
    return m_navigation_color_isSet;
}

bool OAIEcosystem::is_navigation_color_Valid() const{
    return m_navigation_color_isValid;
}

QString OAIEcosystem::getNavigationLogoPostFix() const {
    return m_navigation_logo_post_fix;
}
void OAIEcosystem::setNavigationLogoPostFix(const QString &navigation_logo_post_fix) {
    m_navigation_logo_post_fix = navigation_logo_post_fix;
    m_navigation_logo_post_fix_isSet = true;
}

bool OAIEcosystem::is_navigation_logo_post_fix_Set() const{
    return m_navigation_logo_post_fix_isSet;
}

bool OAIEcosystem::is_navigation_logo_post_fix_Valid() const{
    return m_navigation_logo_post_fix_isValid;
}

QString OAIEcosystem::getNavigationMobileMenuType() const {
    return m_navigation_mobile_menu_type;
}
void OAIEcosystem::setNavigationMobileMenuType(const QString &navigation_mobile_menu_type) {
    m_navigation_mobile_menu_type = navigation_mobile_menu_type;
    m_navigation_mobile_menu_type_isSet = true;
}

bool OAIEcosystem::is_navigation_mobile_menu_type_Set() const{
    return m_navigation_mobile_menu_type_isSet;
}

bool OAIEcosystem::is_navigation_mobile_menu_type_Valid() const{
    return m_navigation_mobile_menu_type_isValid;
}

bool OAIEcosystem::isNavigationSticky() const {
    return m_navigation_sticky;
}
void OAIEcosystem::setNavigationSticky(const bool &navigation_sticky) {
    m_navigation_sticky = navigation_sticky;
    m_navigation_sticky_isSet = true;
}

bool OAIEcosystem::is_navigation_sticky_Set() const{
    return m_navigation_sticky_isSet;
}

bool OAIEcosystem::is_navigation_sticky_Valid() const{
    return m_navigation_sticky_isValid;
}

QString OAIEcosystem::getPrimaryColor() const {
    return m_primary_color;
}
void OAIEcosystem::setPrimaryColor(const QString &primary_color) {
    m_primary_color = primary_color;
    m_primary_color_isSet = true;
}

bool OAIEcosystem::is_primary_color_Set() const{
    return m_primary_color_isSet;
}

bool OAIEcosystem::is_primary_color_Valid() const{
    return m_primary_color_isValid;
}

QString OAIEcosystem::getPrivacyLink() const {
    return m_privacy_link;
}
void OAIEcosystem::setPrivacyLink(const QString &privacy_link) {
    m_privacy_link = privacy_link;
    m_privacy_link_isSet = true;
}

bool OAIEcosystem::is_privacy_link_Set() const{
    return m_privacy_link_isSet;
}

bool OAIEcosystem::is_privacy_link_Valid() const{
    return m_privacy_link_isValid;
}

QString OAIEcosystem::getRequestLink() const {
    return m_request_link;
}
void OAIEcosystem::setRequestLink(const QString &request_link) {
    m_request_link = request_link;
    m_request_link_isSet = true;
}

bool OAIEcosystem::is_request_link_Set() const{
    return m_request_link_isSet;
}

bool OAIEcosystem::is_request_link_Valid() const{
    return m_request_link_isValid;
}

QString OAIEcosystem::getShadowPageDescription() const {
    return m_shadow_page_description;
}
void OAIEcosystem::setShadowPageDescription(const QString &shadow_page_description) {
    m_shadow_page_description = shadow_page_description;
    m_shadow_page_description_isSet = true;
}

bool OAIEcosystem::is_shadow_page_description_Set() const{
    return m_shadow_page_description_isSet;
}

bool OAIEcosystem::is_shadow_page_description_Valid() const{
    return m_shadow_page_description_isValid;
}

bool OAIEcosystem::isShadowPagesEnabled() const {
    return m_shadow_pages_enabled;
}
void OAIEcosystem::setShadowPagesEnabled(const bool &shadow_pages_enabled) {
    m_shadow_pages_enabled = shadow_pages_enabled;
    m_shadow_pages_enabled_isSet = true;
}

bool OAIEcosystem::is_shadow_pages_enabled_Set() const{
    return m_shadow_pages_enabled_isSet;
}

bool OAIEcosystem::is_shadow_pages_enabled_Valid() const{
    return m_shadow_pages_enabled_isValid;
}

bool OAIEcosystem::isShowAttributionBadge() const {
    return m_show_attribution_badge;
}
void OAIEcosystem::setShowAttributionBadge(const bool &show_attribution_badge) {
    m_show_attribution_badge = show_attribution_badge;
    m_show_attribution_badge_isSet = true;
}

bool OAIEcosystem::is_show_attribution_badge_Set() const{
    return m_show_attribution_badge_isSet;
}

bool OAIEcosystem::is_show_attribution_badge_Valid() const{
    return m_show_attribution_badge_isValid;
}

bool OAIEcosystem::isShowRequestedListings() const {
    return m_show_requested_listings;
}
void OAIEcosystem::setShowRequestedListings(const bool &show_requested_listings) {
    m_show_requested_listings = show_requested_listings;
    m_show_requested_listings_isSet = true;
}

bool OAIEcosystem::is_show_requested_listings_Set() const{
    return m_show_requested_listings_isSet;
}

bool OAIEcosystem::is_show_requested_listings_Valid() const{
    return m_show_requested_listings_isValid;
}

QString OAIEcosystem::getSlug() const {
    return m_slug;
}
void OAIEcosystem::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIEcosystem::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIEcosystem::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIEcosystem::getTermsLink() const {
    return m_terms_link;
}
void OAIEcosystem::setTermsLink(const QString &terms_link) {
    m_terms_link = terms_link;
    m_terms_link_isSet = true;
}

bool OAIEcosystem::is_terms_link_Set() const{
    return m_terms_link_isSet;
}

bool OAIEcosystem::is_terms_link_Valid() const{
    return m_terms_link_isValid;
}

qint32 OAIEcosystem::getTotalPublishedListings() const {
    return m_total_published_listings;
}
void OAIEcosystem::setTotalPublishedListings(const qint32 &total_published_listings) {
    m_total_published_listings = total_published_listings;
    m_total_published_listings_isSet = true;
}

bool OAIEcosystem::is_total_published_listings_Set() const{
    return m_total_published_listings_isSet;
}

bool OAIEcosystem::is_total_published_listings_Valid() const{
    return m_total_published_listings_isValid;
}

QString OAIEcosystem::getUnifyApplicationId() const {
    return m_unify_application_id;
}
void OAIEcosystem::setUnifyApplicationId(const QString &unify_application_id) {
    m_unify_application_id = unify_application_id;
    m_unify_application_id_isSet = true;
}

bool OAIEcosystem::is_unify_application_id_Set() const{
    return m_unify_application_id_isSet;
}

bool OAIEcosystem::is_unify_application_id_Valid() const{
    return m_unify_application_id_isValid;
}

QDateTime OAIEcosystem::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEcosystem::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEcosystem::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEcosystem::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIEcosystem::getUtmCampaign() const {
    return m_utm_campaign;
}
void OAIEcosystem::setUtmCampaign(const QString &utm_campaign) {
    m_utm_campaign = utm_campaign;
    m_utm_campaign_isSet = true;
}

bool OAIEcosystem::is_utm_campaign_Set() const{
    return m_utm_campaign_isSet;
}

bool OAIEcosystem::is_utm_campaign_Valid() const{
    return m_utm_campaign_isValid;
}

QString OAIEcosystem::getWebsite() const {
    return m_website;
}
void OAIEcosystem::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIEcosystem::is_website_Set() const{
    return m_website_isSet;
}

bool OAIEcosystem::is_website_Valid() const{
    return m_website_isValid;
}

QString OAIEcosystem::getZapsMenuTitle() const {
    return m_zaps_menu_title;
}
void OAIEcosystem::setZapsMenuTitle(const QString &zaps_menu_title) {
    m_zaps_menu_title = zaps_menu_title;
    m_zaps_menu_title_isSet = true;
}

bool OAIEcosystem::is_zaps_menu_title_Set() const{
    return m_zaps_menu_title_isSet;
}

bool OAIEcosystem::is_zaps_menu_title_Valid() const{
    return m_zaps_menu_title_isValid;
}

bool OAIEcosystem::isZapsPageEnabled() const {
    return m_zaps_page_enabled;
}
void OAIEcosystem::setZapsPageEnabled(const bool &zaps_page_enabled) {
    m_zaps_page_enabled = zaps_page_enabled;
    m_zaps_page_enabled_isSet = true;
}

bool OAIEcosystem::is_zaps_page_enabled_Set() const{
    return m_zaps_page_enabled_isSet;
}

bool OAIEcosystem::is_zaps_page_enabled_Valid() const{
    return m_zaps_page_enabled_isValid;
}

bool OAIEcosystem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternatives_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternatives_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_button_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_button_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_link_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_count_badge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_show_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections_count_badge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cta_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_pages_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_site_verification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_install_buttons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_page_collection_category_cards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_page_show_all_listings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installation_request_flow_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_form_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_masthead_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_tag_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_logo_post_fix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_mobile_menu_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_sticky_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_page_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_pages_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_attribution_badge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_requested_listings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_published_listings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unify_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zaps_menu_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zaps_page_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcosystem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_published_isValid && m_name_isValid && m_slug_isValid && true;
}

} // namespace OpenAPI
