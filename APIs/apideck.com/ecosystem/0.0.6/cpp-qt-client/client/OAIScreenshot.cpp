/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreenshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreenshot::OAIScreenshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreenshot::OAIScreenshot() {
    this->initializeModel();
}

OAIScreenshot::~OAIScreenshot() {}

void OAIScreenshot::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_translations_isSet = false;
    m_translations_isValid = false;
}

void OAIScreenshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreenshot::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_translations_isValid = ::OpenAPI::fromJsonValue(m_translations, json[QString("translations")]);
    m_translations_isSet = !json[QString("translations")].isNull() && m_translations_isValid;
}

QString OAIScreenshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreenshot::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_translations.size() > 0) {
        obj.insert(QString("translations"), ::OpenAPI::toJsonValue(m_translations));
    }
    return obj;
}

QString OAIScreenshot::getCaption() const {
    return m_caption;
}
void OAIScreenshot::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIScreenshot::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIScreenshot::is_caption_Valid() const{
    return m_caption_isValid;
}

OAIFile OAIScreenshot::getFile() const {
    return m_file;
}
void OAIScreenshot::setFile(const OAIFile &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIScreenshot::is_file_Set() const{
    return m_file_isSet;
}

bool OAIScreenshot::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIScreenshot::getId() const {
    return m_id;
}
void OAIScreenshot::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScreenshot::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScreenshot::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAITranslation> OAIScreenshot::getTranslations() const {
    return m_translations;
}
void OAIScreenshot::setTranslations(const QList<OAITranslation> &translations) {
    m_translations = translations;
    m_translations_isSet = true;
}

bool OAIScreenshot::is_translations_Set() const{
    return m_translations_isSet;
}

bool OAIScreenshot::is_translations_Valid() const{
    return m_translations_isValid;
}

bool OAIScreenshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreenshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
