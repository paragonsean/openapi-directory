/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartner::OAIPartner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartner::OAIPartner() {
    this->initializeModel();
}

OAIPartner::~OAIPartner() {}

void OAIPartner::initializeModel() {

    m_company_isSet = false;
    m_company_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_listed_isSet = false;
    m_listed_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIPartner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartner::fromJsonObject(QJsonObject json) {

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_listed_isValid = ::OpenAPI::fromJsonValue(m_listed, json[QString("listed")]);
    m_listed_isSet = !json[QString("listed")].isNull() && m_listed_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIPartner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartner::asJsonObject() const {
    QJsonObject obj;
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_icon.isSet()) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_listed_isSet) {
        obj.insert(QString("listed"), ::OpenAPI::toJsonValue(m_listed));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIPartner::getCompany() const {
    return m_company;
}
void OAIPartner::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIPartner::is_company_Set() const{
    return m_company_isSet;
}

bool OAIPartner::is_company_Valid() const{
    return m_company_isValid;
}

QList<OAIContact> OAIPartner::getContacts() const {
    return m_contacts;
}
void OAIPartner::setContacts(const QList<OAIContact> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIPartner::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIPartner::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QDateTime OAIPartner::getCreatedAt() const {
    return m_created_at;
}
void OAIPartner::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPartner::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPartner::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIFile OAIPartner::getIcon() const {
    return m_icon;
}
void OAIPartner::setIcon(const OAIFile &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIPartner::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIPartner::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIPartner::getId() const {
    return m_id;
}
void OAIPartner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPartner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPartner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPartner::getListed() const {
    return m_listed;
}
void OAIPartner::setListed(const QString &listed) {
    m_listed = listed;
    m_listed_isSet = true;
}

bool OAIPartner::is_listed_Set() const{
    return m_listed_isSet;
}

bool OAIPartner::is_listed_Valid() const{
    return m_listed_isValid;
}

QString OAIPartner::getTwitter() const {
    return m_twitter;
}
void OAIPartner::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAIPartner::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAIPartner::is_twitter_Valid() const{
    return m_twitter_isValid;
}

QDateTime OAIPartner::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPartner::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPartner::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPartner::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPartner::getWebsite() const {
    return m_website;
}
void OAIPartner::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIPartner::is_website_Set() const{
    return m_website_isSet;
}

bool OAIPartner::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIPartner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_company_isValid && true;
}

} // namespace OpenAPI
