/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardSettings::OAICardSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardSettings::OAICardSettings() {
    this->initializeModel();
}

OAICardSettings::~OAICardSettings() {}

void OAICardSettings::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_border_color_isSet = false;
    m_border_color_isValid = false;

    m_border_radius_isSet = false;
    m_border_radius_isValid = false;

    m_border_size_isSet = false;
    m_border_size_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_description_lines_isSet = false;
    m_description_lines_isValid = false;

    m_icon_border_radius_isSet = false;
    m_icon_border_radius_isValid = false;

    m_icon_shadow_enabled_isSet = false;
    m_icon_shadow_enabled_isValid = false;

    m_icon_size_isSet = false;
    m_icon_size_isValid = false;

    m_shadow_enabled_isSet = false;
    m_shadow_enabled_isValid = false;

    m_show_action_isSet = false;
    m_show_action_isValid = false;

    m_show_badges_isSet = false;
    m_show_badges_isValid = false;

    m_show_category_isSet = false;
    m_show_category_isValid = false;

    m_show_description_isSet = false;
    m_show_description_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;
}

void OAICardSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardSettings::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("background_color")]);
    m_background_color_isSet = !json[QString("background_color")].isNull() && m_background_color_isValid;

    m_border_color_isValid = ::OpenAPI::fromJsonValue(m_border_color, json[QString("border_color")]);
    m_border_color_isSet = !json[QString("border_color")].isNull() && m_border_color_isValid;

    m_border_radius_isValid = ::OpenAPI::fromJsonValue(m_border_radius, json[QString("border_radius")]);
    m_border_radius_isSet = !json[QString("border_radius")].isNull() && m_border_radius_isValid;

    m_border_size_isValid = ::OpenAPI::fromJsonValue(m_border_size, json[QString("border_size")]);
    m_border_size_isSet = !json[QString("border_size")].isNull() && m_border_size_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_description_lines_isValid = ::OpenAPI::fromJsonValue(m_description_lines, json[QString("description_lines")]);
    m_description_lines_isSet = !json[QString("description_lines")].isNull() && m_description_lines_isValid;

    m_icon_border_radius_isValid = ::OpenAPI::fromJsonValue(m_icon_border_radius, json[QString("icon_border_radius")]);
    m_icon_border_radius_isSet = !json[QString("icon_border_radius")].isNull() && m_icon_border_radius_isValid;

    m_icon_shadow_enabled_isValid = ::OpenAPI::fromJsonValue(m_icon_shadow_enabled, json[QString("icon_shadow_enabled")]);
    m_icon_shadow_enabled_isSet = !json[QString("icon_shadow_enabled")].isNull() && m_icon_shadow_enabled_isValid;

    m_icon_size_isValid = ::OpenAPI::fromJsonValue(m_icon_size, json[QString("icon_size")]);
    m_icon_size_isSet = !json[QString("icon_size")].isNull() && m_icon_size_isValid;

    m_shadow_enabled_isValid = ::OpenAPI::fromJsonValue(m_shadow_enabled, json[QString("shadow_enabled")]);
    m_shadow_enabled_isSet = !json[QString("shadow_enabled")].isNull() && m_shadow_enabled_isValid;

    m_show_action_isValid = ::OpenAPI::fromJsonValue(m_show_action, json[QString("show_action")]);
    m_show_action_isSet = !json[QString("show_action")].isNull() && m_show_action_isValid;

    m_show_badges_isValid = ::OpenAPI::fromJsonValue(m_show_badges, json[QString("show_badges")]);
    m_show_badges_isSet = !json[QString("show_badges")].isNull() && m_show_badges_isValid;

    m_show_category_isValid = ::OpenAPI::fromJsonValue(m_show_category, json[QString("show_category")]);
    m_show_category_isSet = !json[QString("show_category")].isNull() && m_show_category_isValid;

    m_show_description_isValid = ::OpenAPI::fromJsonValue(m_show_description, json[QString("show_description")]);
    m_show_description_isSet = !json[QString("show_description")].isNull() && m_show_description_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;
}

QString OAICardSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_isSet) {
        obj.insert(QString("background_color"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_border_color_isSet) {
        obj.insert(QString("border_color"), ::OpenAPI::toJsonValue(m_border_color));
    }
    if (m_border_radius_isSet) {
        obj.insert(QString("border_radius"), ::OpenAPI::toJsonValue(m_border_radius));
    }
    if (m_border_size_isSet) {
        obj.insert(QString("border_size"), ::OpenAPI::toJsonValue(m_border_size));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_columns_isSet) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_description_lines_isSet) {
        obj.insert(QString("description_lines"), ::OpenAPI::toJsonValue(m_description_lines));
    }
    if (m_icon_border_radius_isSet) {
        obj.insert(QString("icon_border_radius"), ::OpenAPI::toJsonValue(m_icon_border_radius));
    }
    if (m_icon_shadow_enabled_isSet) {
        obj.insert(QString("icon_shadow_enabled"), ::OpenAPI::toJsonValue(m_icon_shadow_enabled));
    }
    if (m_icon_size_isSet) {
        obj.insert(QString("icon_size"), ::OpenAPI::toJsonValue(m_icon_size));
    }
    if (m_shadow_enabled_isSet) {
        obj.insert(QString("shadow_enabled"), ::OpenAPI::toJsonValue(m_shadow_enabled));
    }
    if (m_show_action_isSet) {
        obj.insert(QString("show_action"), ::OpenAPI::toJsonValue(m_show_action));
    }
    if (m_show_badges_isSet) {
        obj.insert(QString("show_badges"), ::OpenAPI::toJsonValue(m_show_badges));
    }
    if (m_show_category_isSet) {
        obj.insert(QString("show_category"), ::OpenAPI::toJsonValue(m_show_category));
    }
    if (m_show_description_isSet) {
        obj.insert(QString("show_description"), ::OpenAPI::toJsonValue(m_show_description));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    return obj;
}

QString OAICardSettings::getBackgroundColor() const {
    return m_background_color;
}
void OAICardSettings::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAICardSettings::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAICardSettings::is_background_color_Valid() const{
    return m_background_color_isValid;
}

QString OAICardSettings::getBorderColor() const {
    return m_border_color;
}
void OAICardSettings::setBorderColor(const QString &border_color) {
    m_border_color = border_color;
    m_border_color_isSet = true;
}

bool OAICardSettings::is_border_color_Set() const{
    return m_border_color_isSet;
}

bool OAICardSettings::is_border_color_Valid() const{
    return m_border_color_isValid;
}

QString OAICardSettings::getBorderRadius() const {
    return m_border_radius;
}
void OAICardSettings::setBorderRadius(const QString &border_radius) {
    m_border_radius = border_radius;
    m_border_radius_isSet = true;
}

bool OAICardSettings::is_border_radius_Set() const{
    return m_border_radius_isSet;
}

bool OAICardSettings::is_border_radius_Valid() const{
    return m_border_radius_isValid;
}

QString OAICardSettings::getBorderSize() const {
    return m_border_size;
}
void OAICardSettings::setBorderSize(const QString &border_size) {
    m_border_size = border_size;
    m_border_size_isSet = true;
}

bool OAICardSettings::is_border_size_Set() const{
    return m_border_size_isSet;
}

bool OAICardSettings::is_border_size_Valid() const{
    return m_border_size_isValid;
}

QString OAICardSettings::getColor() const {
    return m_color;
}
void OAICardSettings::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAICardSettings::is_color_Set() const{
    return m_color_isSet;
}

bool OAICardSettings::is_color_Valid() const{
    return m_color_isValid;
}

qint32 OAICardSettings::getColumns() const {
    return m_columns;
}
void OAICardSettings::setColumns(const qint32 &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAICardSettings::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAICardSettings::is_columns_Valid() const{
    return m_columns_isValid;
}

qint32 OAICardSettings::getDescriptionLines() const {
    return m_description_lines;
}
void OAICardSettings::setDescriptionLines(const qint32 &description_lines) {
    m_description_lines = description_lines;
    m_description_lines_isSet = true;
}

bool OAICardSettings::is_description_lines_Set() const{
    return m_description_lines_isSet;
}

bool OAICardSettings::is_description_lines_Valid() const{
    return m_description_lines_isValid;
}

QString OAICardSettings::getIconBorderRadius() const {
    return m_icon_border_radius;
}
void OAICardSettings::setIconBorderRadius(const QString &icon_border_radius) {
    m_icon_border_radius = icon_border_radius;
    m_icon_border_radius_isSet = true;
}

bool OAICardSettings::is_icon_border_radius_Set() const{
    return m_icon_border_radius_isSet;
}

bool OAICardSettings::is_icon_border_radius_Valid() const{
    return m_icon_border_radius_isValid;
}

bool OAICardSettings::isIconShadowEnabled() const {
    return m_icon_shadow_enabled;
}
void OAICardSettings::setIconShadowEnabled(const bool &icon_shadow_enabled) {
    m_icon_shadow_enabled = icon_shadow_enabled;
    m_icon_shadow_enabled_isSet = true;
}

bool OAICardSettings::is_icon_shadow_enabled_Set() const{
    return m_icon_shadow_enabled_isSet;
}

bool OAICardSettings::is_icon_shadow_enabled_Valid() const{
    return m_icon_shadow_enabled_isValid;
}

qint32 OAICardSettings::getIconSize() const {
    return m_icon_size;
}
void OAICardSettings::setIconSize(const qint32 &icon_size) {
    m_icon_size = icon_size;
    m_icon_size_isSet = true;
}

bool OAICardSettings::is_icon_size_Set() const{
    return m_icon_size_isSet;
}

bool OAICardSettings::is_icon_size_Valid() const{
    return m_icon_size_isValid;
}

bool OAICardSettings::isShadowEnabled() const {
    return m_shadow_enabled;
}
void OAICardSettings::setShadowEnabled(const bool &shadow_enabled) {
    m_shadow_enabled = shadow_enabled;
    m_shadow_enabled_isSet = true;
}

bool OAICardSettings::is_shadow_enabled_Set() const{
    return m_shadow_enabled_isSet;
}

bool OAICardSettings::is_shadow_enabled_Valid() const{
    return m_shadow_enabled_isValid;
}

bool OAICardSettings::isShowAction() const {
    return m_show_action;
}
void OAICardSettings::setShowAction(const bool &show_action) {
    m_show_action = show_action;
    m_show_action_isSet = true;
}

bool OAICardSettings::is_show_action_Set() const{
    return m_show_action_isSet;
}

bool OAICardSettings::is_show_action_Valid() const{
    return m_show_action_isValid;
}

bool OAICardSettings::isShowBadges() const {
    return m_show_badges;
}
void OAICardSettings::setShowBadges(const bool &show_badges) {
    m_show_badges = show_badges;
    m_show_badges_isSet = true;
}

bool OAICardSettings::is_show_badges_Set() const{
    return m_show_badges_isSet;
}

bool OAICardSettings::is_show_badges_Valid() const{
    return m_show_badges_isValid;
}

bool OAICardSettings::isShowCategory() const {
    return m_show_category;
}
void OAICardSettings::setShowCategory(const bool &show_category) {
    m_show_category = show_category;
    m_show_category_isSet = true;
}

bool OAICardSettings::is_show_category_Set() const{
    return m_show_category_isSet;
}

bool OAICardSettings::is_show_category_Valid() const{
    return m_show_category_isValid;
}

bool OAICardSettings::isShowDescription() const {
    return m_show_description;
}
void OAICardSettings::setShowDescription(const bool &show_description) {
    m_show_description = show_description;
    m_show_description_isSet = true;
}

bool OAICardSettings::is_show_description_Set() const{
    return m_show_description_isSet;
}

bool OAICardSettings::is_show_description_Valid() const{
    return m_show_description_isValid;
}

QString OAICardSettings::getStyle() const {
    return m_style;
}
void OAICardSettings::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAICardSettings::is_style_Set() const{
    return m_style_isSet;
}

bool OAICardSettings::is_style_Valid() const{
    return m_style_isValid;
}

bool OAICardSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_border_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_shadow_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_badges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
