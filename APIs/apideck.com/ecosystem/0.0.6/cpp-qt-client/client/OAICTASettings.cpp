/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICTASettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICTASettings::OAICTASettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICTASettings::OAICTASettings() {
    this->initializeModel();
}

OAICTASettings::~OAICTASettings() {}

void OAICTASettings::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_button_background_color_isSet = false;
    m_button_background_color_isValid = false;

    m_button_color_isSet = false;
    m_button_color_isValid = false;

    m_button_label_isSet = false;
    m_button_label_isValid = false;

    m_button_link_isSet = false;
    m_button_link_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICTASettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICTASettings::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("background_color")]);
    m_background_color_isSet = !json[QString("background_color")].isNull() && m_background_color_isValid;

    m_button_background_color_isValid = ::OpenAPI::fromJsonValue(m_button_background_color, json[QString("button_background_color")]);
    m_button_background_color_isSet = !json[QString("button_background_color")].isNull() && m_button_background_color_isValid;

    m_button_color_isValid = ::OpenAPI::fromJsonValue(m_button_color, json[QString("button_color")]);
    m_button_color_isSet = !json[QString("button_color")].isNull() && m_button_color_isValid;

    m_button_label_isValid = ::OpenAPI::fromJsonValue(m_button_label, json[QString("button_label")]);
    m_button_label_isSet = !json[QString("button_label")].isNull() && m_button_label_isValid;

    m_button_link_isValid = ::OpenAPI::fromJsonValue(m_button_link, json[QString("button_link")]);
    m_button_link_isSet = !json[QString("button_link")].isNull() && m_button_link_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICTASettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICTASettings::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_isSet) {
        obj.insert(QString("background_color"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_button_background_color_isSet) {
        obj.insert(QString("button_background_color"), ::OpenAPI::toJsonValue(m_button_background_color));
    }
    if (m_button_color_isSet) {
        obj.insert(QString("button_color"), ::OpenAPI::toJsonValue(m_button_color));
    }
    if (m_button_label_isSet) {
        obj.insert(QString("button_label"), ::OpenAPI::toJsonValue(m_button_label));
    }
    if (m_button_link_isSet) {
        obj.insert(QString("button_link"), ::OpenAPI::toJsonValue(m_button_link));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAICTASettings::getBackgroundColor() const {
    return m_background_color;
}
void OAICTASettings::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAICTASettings::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAICTASettings::is_background_color_Valid() const{
    return m_background_color_isValid;
}

QString OAICTASettings::getButtonBackgroundColor() const {
    return m_button_background_color;
}
void OAICTASettings::setButtonBackgroundColor(const QString &button_background_color) {
    m_button_background_color = button_background_color;
    m_button_background_color_isSet = true;
}

bool OAICTASettings::is_button_background_color_Set() const{
    return m_button_background_color_isSet;
}

bool OAICTASettings::is_button_background_color_Valid() const{
    return m_button_background_color_isValid;
}

QString OAICTASettings::getButtonColor() const {
    return m_button_color;
}
void OAICTASettings::setButtonColor(const QString &button_color) {
    m_button_color = button_color;
    m_button_color_isSet = true;
}

bool OAICTASettings::is_button_color_Set() const{
    return m_button_color_isSet;
}

bool OAICTASettings::is_button_color_Valid() const{
    return m_button_color_isValid;
}

QString OAICTASettings::getButtonLabel() const {
    return m_button_label;
}
void OAICTASettings::setButtonLabel(const QString &button_label) {
    m_button_label = button_label;
    m_button_label_isSet = true;
}

bool OAICTASettings::is_button_label_Set() const{
    return m_button_label_isSet;
}

bool OAICTASettings::is_button_label_Valid() const{
    return m_button_label_isValid;
}

QString OAICTASettings::getButtonLink() const {
    return m_button_link;
}
void OAICTASettings::setButtonLink(const QString &button_link) {
    m_button_link = button_link;
    m_button_link_isSet = true;
}

bool OAICTASettings::is_button_link_Set() const{
    return m_button_link_isSet;
}

bool OAICTASettings::is_button_link_Valid() const{
    return m_button_link_isValid;
}

QString OAICTASettings::getColor() const {
    return m_color;
}
void OAICTASettings::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAICTASettings::is_color_Set() const{
    return m_color_isSet;
}

bool OAICTASettings::is_color_Valid() const{
    return m_color_isValid;
}

QString OAICTASettings::getDescription() const {
    return m_description;
}
void OAICTASettings::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICTASettings::is_description_Set() const{
    return m_description_isSet;
}

bool OAICTASettings::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICTASettings::isEnabled() const {
    return m_enabled;
}
void OAICTASettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICTASettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICTASettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICTASettings::getTitle() const {
    return m_title;
}
void OAICTASettings::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICTASettings::is_title_Set() const{
    return m_title_isSet;
}

bool OAICTASettings::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICTASettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_button_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_button_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_button_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_button_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICTASettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
