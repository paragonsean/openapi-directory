/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetCategoriesResponse from '../model/GetCategoriesResponse';
import GetCategoryResponse from '../model/GetCategoryResponse';
import GetListingsResponse from '../model/GetListingsResponse';

/**
* Category service.
* @module api/CategoryApi
* @version 0.0.6
*/
export default class CategoryApi {

    /**
    * Constructs a new CategoryApi. 
    * @alias module:api/CategoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the categoriesAll operation.
     * @callback module:api/CategoryApi~categoriesAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCategoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List categories
     * List categories
     * @param {String} ecosystemId 
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     * @param {Number} [limit = 50)] Number of records to return
     * @param {module:api/CategoryApi~categoriesAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCategoriesResponse}
     */
    categoriesAll(ecosystemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ecosystemId' is set
      if (ecosystemId === undefined || ecosystemId === null) {
        throw new Error("Missing the required parameter 'ecosystemId' when calling categoriesAll");
      }

      let pathParams = {
        'ecosystem_id': ecosystemId
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCategoriesResponse;
      return this.apiClient.callApi(
        '/ecosystems/{ecosystem_id}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesOne operation.
     * @callback module:api/CategoryApi~categoriesOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get category
     * Get category
     * @param {String} ecosystemId 
     * @param {String} id ID of the record you are acting upon.
     * @param {module:api/CategoryApi~categoriesOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCategoryResponse}
     */
    categoriesOne(ecosystemId, id, callback) {
      let postBody = null;
      // verify the required parameter 'ecosystemId' is set
      if (ecosystemId === undefined || ecosystemId === null) {
        throw new Error("Missing the required parameter 'ecosystemId' when calling categoriesOne");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling categoriesOne");
      }

      let pathParams = {
        'ecosystem_id': ecosystemId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCategoryResponse;
      return this.apiClient.callApi(
        '/ecosystems/{ecosystem_id}/categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoryListingsAll operation.
     * @callback module:api/CategoryApi~categoryListingsAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetListingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List category listings
     * List category listings
     * @param {String} ecosystemId 
     * @param {String} id ID of the record you are acting upon.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     * @param {Number} [limit = 50)] Number of records to return
     * @param {module:api/CategoryApi~categoryListingsAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetListingsResponse}
     */
    categoryListingsAll(ecosystemId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ecosystemId' is set
      if (ecosystemId === undefined || ecosystemId === null) {
        throw new Error("Missing the required parameter 'ecosystemId' when calling categoryListingsAll");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling categoryListingsAll");
      }

      let pathParams = {
        'ecosystem_id': ecosystemId,
        'id': id
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetListingsResponse;
      return this.apiClient.callApi(
        '/ecosystems/{ecosystem_id}/categories/{id}/listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
