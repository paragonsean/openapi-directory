/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CTASettings from './CTASettings';
import CardSettings from './CardSettings';
import CustomSettings from './CustomSettings';
import IntegrationSettings from './IntegrationSettings';
import LeadFormSettings from './LeadFormSettings';
import ListingSettings from './ListingSettings';
import MastheadSettings from './MastheadSettings';
import MetaTagSettings from './MetaTagSettings';

/**
 * The Ecosystem model module.
 * @module model/Ecosystem
 * @version 0.0.6
 */
class Ecosystem {
    /**
     * Constructs a new <code>Ecosystem</code>.
     * @alias module:model/Ecosystem
     * @param isPublished {Boolean} 
     * @param name {String} 
     * @param slug {String} 
     */
    constructor(isPublished, name, slug) { 
        
        Ecosystem.initialize(this, isPublished, name, slug);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isPublished, name, slug) { 
        obj['is_published'] = isPublished;
        obj['name'] = name;
        obj['slug'] = slug;
    }

    /**
     * Constructs a <code>Ecosystem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Ecosystem} obj Optional instance to populate.
     * @return {module:model/Ecosystem} The populated <code>Ecosystem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Ecosystem();

            if (data.hasOwnProperty('about')) {
                obj['about'] = ApiClient.convertToType(data['about'], 'String');
            }
            if (data.hasOwnProperty('alternatives_background_color')) {
                obj['alternatives_background_color'] = ApiClient.convertToType(data['alternatives_background_color'], 'String');
            }
            if (data.hasOwnProperty('alternatives_color')) {
                obj['alternatives_color'] = ApiClient.convertToType(data['alternatives_color'], 'String');
            }
            if (data.hasOwnProperty('attribution')) {
                obj['attribution'] = ApiClient.convertToType(data['attribution'], 'Boolean');
            }
            if (data.hasOwnProperty('body_background_color')) {
                obj['body_background_color'] = ApiClient.convertToType(data['body_background_color'], 'String');
            }
            if (data.hasOwnProperty('body_button_background_color')) {
                obj['body_button_background_color'] = ApiClient.convertToType(data['body_button_background_color'], 'String');
            }
            if (data.hasOwnProperty('body_button_color')) {
                obj['body_button_color'] = ApiClient.convertToType(data['body_button_color'], 'String');
            }
            if (data.hasOwnProperty('body_color')) {
                obj['body_color'] = ApiClient.convertToType(data['body_color'], 'String');
            }
            if (data.hasOwnProperty('body_link_color')) {
                obj['body_link_color'] = ApiClient.convertToType(data['body_link_color'], 'String');
            }
            if (data.hasOwnProperty('card_settings')) {
                obj['card_settings'] = CardSettings.constructFromObject(data['card_settings']);
            }
            if (data.hasOwnProperty('categories_count_badge')) {
                obj['categories_count_badge'] = ApiClient.convertToType(data['categories_count_badge'], 'Boolean');
            }
            if (data.hasOwnProperty('categories_show_max_items')) {
                obj['categories_show_max_items'] = ApiClient.convertToType(data['categories_show_max_items'], 'Number');
            }
            if (data.hasOwnProperty('collections_count_badge')) {
                obj['collections_count_badge'] = ApiClient.convertToType(data['collections_count_badge'], 'Boolean');
            }
            if (data.hasOwnProperty('collections_title')) {
                obj['collections_title'] = ApiClient.convertToType(data['collections_title'], 'String');
            }
            if (data.hasOwnProperty('create_link')) {
                obj['create_link'] = ApiClient.convertToType(data['create_link'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('cta_settings')) {
                obj['cta_settings'] = CTASettings.constructFromObject(data['cta_settings']);
            }
            if (data.hasOwnProperty('custom_domain')) {
                obj['custom_domain'] = ApiClient.convertToType(data['custom_domain'], 'String');
            }
            if (data.hasOwnProperty('custom_settings')) {
                obj['custom_settings'] = CustomSettings.constructFromObject(data['custom_settings']);
            }
            if (data.hasOwnProperty('detail_pages_enabled')) {
                obj['detail_pages_enabled'] = ApiClient.convertToType(data['detail_pages_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('footer_background_color')) {
                obj['footer_background_color'] = ApiClient.convertToType(data['footer_background_color'], 'String');
            }
            if (data.hasOwnProperty('footer_color')) {
                obj['footer_color'] = ApiClient.convertToType(data['footer_color'], 'String');
            }
            if (data.hasOwnProperty('google_site_verification_id')) {
                obj['google_site_verification_id'] = ApiClient.convertToType(data['google_site_verification_id'], 'String');
            }
            if (data.hasOwnProperty('hide_install_buttons')) {
                obj['hide_install_buttons'] = ApiClient.convertToType(data['hide_install_buttons'], 'Boolean');
            }
            if (data.hasOwnProperty('home_page_collection_category_cards')) {
                obj['home_page_collection_category_cards'] = ApiClient.convertToType(data['home_page_collection_category_cards'], 'Boolean');
            }
            if (data.hasOwnProperty('home_page_show_all_listings')) {
                obj['home_page_show_all_listings'] = ApiClient.convertToType(data['home_page_show_all_listings'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('installation_request_flow_enabled')) {
                obj['installation_request_flow_enabled'] = ApiClient.convertToType(data['installation_request_flow_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('integration_settings')) {
                obj['integration_settings'] = IntegrationSettings.constructFromObject(data['integration_settings']);
            }
            if (data.hasOwnProperty('is_published')) {
                obj['is_published'] = ApiClient.convertToType(data['is_published'], 'Boolean');
            }
            if (data.hasOwnProperty('lead_form_settings')) {
                obj['lead_form_settings'] = LeadFormSettings.constructFromObject(data['lead_form_settings']);
            }
            if (data.hasOwnProperty('listing_settings')) {
                obj['listing_settings'] = ListingSettings.constructFromObject(data['listing_settings']);
            }
            if (data.hasOwnProperty('masthead_settings')) {
                obj['masthead_settings'] = MastheadSettings.constructFromObject(data['masthead_settings']);
            }
            if (data.hasOwnProperty('menu_position')) {
                obj['menu_position'] = ApiClient.convertToType(data['menu_position'], 'String');
            }
            if (data.hasOwnProperty('menu_style')) {
                obj['menu_style'] = ApiClient.convertToType(data['menu_style'], 'String');
            }
            if (data.hasOwnProperty('meta_tag_settings')) {
                obj['meta_tag_settings'] = MetaTagSettings.constructFromObject(data['meta_tag_settings']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('navigation_background_color')) {
                obj['navigation_background_color'] = ApiClient.convertToType(data['navigation_background_color'], 'String');
            }
            if (data.hasOwnProperty('navigation_color')) {
                obj['navigation_color'] = ApiClient.convertToType(data['navigation_color'], 'String');
            }
            if (data.hasOwnProperty('navigation_logo_post_fix')) {
                obj['navigation_logo_post_fix'] = ApiClient.convertToType(data['navigation_logo_post_fix'], 'String');
            }
            if (data.hasOwnProperty('navigation_mobile_menu_type')) {
                obj['navigation_mobile_menu_type'] = ApiClient.convertToType(data['navigation_mobile_menu_type'], 'String');
            }
            if (data.hasOwnProperty('navigation_sticky')) {
                obj['navigation_sticky'] = ApiClient.convertToType(data['navigation_sticky'], 'Boolean');
            }
            if (data.hasOwnProperty('primary_color')) {
                obj['primary_color'] = ApiClient.convertToType(data['primary_color'], 'String');
            }
            if (data.hasOwnProperty('privacy_link')) {
                obj['privacy_link'] = ApiClient.convertToType(data['privacy_link'], 'String');
            }
            if (data.hasOwnProperty('request_link')) {
                obj['request_link'] = ApiClient.convertToType(data['request_link'], 'String');
            }
            if (data.hasOwnProperty('shadow_page_description')) {
                obj['shadow_page_description'] = ApiClient.convertToType(data['shadow_page_description'], 'String');
            }
            if (data.hasOwnProperty('shadow_pages_enabled')) {
                obj['shadow_pages_enabled'] = ApiClient.convertToType(data['shadow_pages_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('show_attribution_badge')) {
                obj['show_attribution_badge'] = ApiClient.convertToType(data['show_attribution_badge'], 'Boolean');
            }
            if (data.hasOwnProperty('show_requested_listings')) {
                obj['show_requested_listings'] = ApiClient.convertToType(data['show_requested_listings'], 'Boolean');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('terms_link')) {
                obj['terms_link'] = ApiClient.convertToType(data['terms_link'], 'String');
            }
            if (data.hasOwnProperty('total_published_listings')) {
                obj['total_published_listings'] = ApiClient.convertToType(data['total_published_listings'], 'Number');
            }
            if (data.hasOwnProperty('unify_application_id')) {
                obj['unify_application_id'] = ApiClient.convertToType(data['unify_application_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('utm_campaign')) {
                obj['utm_campaign'] = ApiClient.convertToType(data['utm_campaign'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('zaps_menu_title')) {
                obj['zaps_menu_title'] = ApiClient.convertToType(data['zaps_menu_title'], 'String');
            }
            if (data.hasOwnProperty('zaps_page_enabled')) {
                obj['zaps_page_enabled'] = ApiClient.convertToType(data['zaps_page_enabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Ecosystem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Ecosystem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Ecosystem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['about'] && !(typeof data['about'] === 'string' || data['about'] instanceof String)) {
            throw new Error("Expected the field `about` to be a primitive type in the JSON string but got " + data['about']);
        }
        // ensure the json data is a string
        if (data['alternatives_background_color'] && !(typeof data['alternatives_background_color'] === 'string' || data['alternatives_background_color'] instanceof String)) {
            throw new Error("Expected the field `alternatives_background_color` to be a primitive type in the JSON string but got " + data['alternatives_background_color']);
        }
        // ensure the json data is a string
        if (data['alternatives_color'] && !(typeof data['alternatives_color'] === 'string' || data['alternatives_color'] instanceof String)) {
            throw new Error("Expected the field `alternatives_color` to be a primitive type in the JSON string but got " + data['alternatives_color']);
        }
        // ensure the json data is a string
        if (data['body_background_color'] && !(typeof data['body_background_color'] === 'string' || data['body_background_color'] instanceof String)) {
            throw new Error("Expected the field `body_background_color` to be a primitive type in the JSON string but got " + data['body_background_color']);
        }
        // ensure the json data is a string
        if (data['body_button_background_color'] && !(typeof data['body_button_background_color'] === 'string' || data['body_button_background_color'] instanceof String)) {
            throw new Error("Expected the field `body_button_background_color` to be a primitive type in the JSON string but got " + data['body_button_background_color']);
        }
        // ensure the json data is a string
        if (data['body_button_color'] && !(typeof data['body_button_color'] === 'string' || data['body_button_color'] instanceof String)) {
            throw new Error("Expected the field `body_button_color` to be a primitive type in the JSON string but got " + data['body_button_color']);
        }
        // ensure the json data is a string
        if (data['body_color'] && !(typeof data['body_color'] === 'string' || data['body_color'] instanceof String)) {
            throw new Error("Expected the field `body_color` to be a primitive type in the JSON string but got " + data['body_color']);
        }
        // ensure the json data is a string
        if (data['body_link_color'] && !(typeof data['body_link_color'] === 'string' || data['body_link_color'] instanceof String)) {
            throw new Error("Expected the field `body_link_color` to be a primitive type in the JSON string but got " + data['body_link_color']);
        }
        // validate the optional field `card_settings`
        if (data['card_settings']) { // data not null
          CardSettings.validateJSON(data['card_settings']);
        }
        // ensure the json data is a string
        if (data['collections_title'] && !(typeof data['collections_title'] === 'string' || data['collections_title'] instanceof String)) {
            throw new Error("Expected the field `collections_title` to be a primitive type in the JSON string but got " + data['collections_title']);
        }
        // ensure the json data is a string
        if (data['create_link'] && !(typeof data['create_link'] === 'string' || data['create_link'] instanceof String)) {
            throw new Error("Expected the field `create_link` to be a primitive type in the JSON string but got " + data['create_link']);
        }
        // validate the optional field `cta_settings`
        if (data['cta_settings']) { // data not null
          CTASettings.validateJSON(data['cta_settings']);
        }
        // ensure the json data is a string
        if (data['custom_domain'] && !(typeof data['custom_domain'] === 'string' || data['custom_domain'] instanceof String)) {
            throw new Error("Expected the field `custom_domain` to be a primitive type in the JSON string but got " + data['custom_domain']);
        }
        // validate the optional field `custom_settings`
        if (data['custom_settings']) { // data not null
          CustomSettings.validateJSON(data['custom_settings']);
        }
        // ensure the json data is a string
        if (data['footer_background_color'] && !(typeof data['footer_background_color'] === 'string' || data['footer_background_color'] instanceof String)) {
            throw new Error("Expected the field `footer_background_color` to be a primitive type in the JSON string but got " + data['footer_background_color']);
        }
        // ensure the json data is a string
        if (data['footer_color'] && !(typeof data['footer_color'] === 'string' || data['footer_color'] instanceof String)) {
            throw new Error("Expected the field `footer_color` to be a primitive type in the JSON string but got " + data['footer_color']);
        }
        // ensure the json data is a string
        if (data['google_site_verification_id'] && !(typeof data['google_site_verification_id'] === 'string' || data['google_site_verification_id'] instanceof String)) {
            throw new Error("Expected the field `google_site_verification_id` to be a primitive type in the JSON string but got " + data['google_site_verification_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `integration_settings`
        if (data['integration_settings']) { // data not null
          IntegrationSettings.validateJSON(data['integration_settings']);
        }
        // validate the optional field `lead_form_settings`
        if (data['lead_form_settings']) { // data not null
          LeadFormSettings.validateJSON(data['lead_form_settings']);
        }
        // validate the optional field `listing_settings`
        if (data['listing_settings']) { // data not null
          ListingSettings.validateJSON(data['listing_settings']);
        }
        // validate the optional field `masthead_settings`
        if (data['masthead_settings']) { // data not null
          MastheadSettings.validateJSON(data['masthead_settings']);
        }
        // ensure the json data is a string
        if (data['menu_position'] && !(typeof data['menu_position'] === 'string' || data['menu_position'] instanceof String)) {
            throw new Error("Expected the field `menu_position` to be a primitive type in the JSON string but got " + data['menu_position']);
        }
        // ensure the json data is a string
        if (data['menu_style'] && !(typeof data['menu_style'] === 'string' || data['menu_style'] instanceof String)) {
            throw new Error("Expected the field `menu_style` to be a primitive type in the JSON string but got " + data['menu_style']);
        }
        // validate the optional field `meta_tag_settings`
        if (data['meta_tag_settings']) { // data not null
          MetaTagSettings.validateJSON(data['meta_tag_settings']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['navigation_background_color'] && !(typeof data['navigation_background_color'] === 'string' || data['navigation_background_color'] instanceof String)) {
            throw new Error("Expected the field `navigation_background_color` to be a primitive type in the JSON string but got " + data['navigation_background_color']);
        }
        // ensure the json data is a string
        if (data['navigation_color'] && !(typeof data['navigation_color'] === 'string' || data['navigation_color'] instanceof String)) {
            throw new Error("Expected the field `navigation_color` to be a primitive type in the JSON string but got " + data['navigation_color']);
        }
        // ensure the json data is a string
        if (data['navigation_logo_post_fix'] && !(typeof data['navigation_logo_post_fix'] === 'string' || data['navigation_logo_post_fix'] instanceof String)) {
            throw new Error("Expected the field `navigation_logo_post_fix` to be a primitive type in the JSON string but got " + data['navigation_logo_post_fix']);
        }
        // ensure the json data is a string
        if (data['navigation_mobile_menu_type'] && !(typeof data['navigation_mobile_menu_type'] === 'string' || data['navigation_mobile_menu_type'] instanceof String)) {
            throw new Error("Expected the field `navigation_mobile_menu_type` to be a primitive type in the JSON string but got " + data['navigation_mobile_menu_type']);
        }
        // ensure the json data is a string
        if (data['primary_color'] && !(typeof data['primary_color'] === 'string' || data['primary_color'] instanceof String)) {
            throw new Error("Expected the field `primary_color` to be a primitive type in the JSON string but got " + data['primary_color']);
        }
        // ensure the json data is a string
        if (data['privacy_link'] && !(typeof data['privacy_link'] === 'string' || data['privacy_link'] instanceof String)) {
            throw new Error("Expected the field `privacy_link` to be a primitive type in the JSON string but got " + data['privacy_link']);
        }
        // ensure the json data is a string
        if (data['request_link'] && !(typeof data['request_link'] === 'string' || data['request_link'] instanceof String)) {
            throw new Error("Expected the field `request_link` to be a primitive type in the JSON string but got " + data['request_link']);
        }
        // ensure the json data is a string
        if (data['shadow_page_description'] && !(typeof data['shadow_page_description'] === 'string' || data['shadow_page_description'] instanceof String)) {
            throw new Error("Expected the field `shadow_page_description` to be a primitive type in the JSON string but got " + data['shadow_page_description']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['terms_link'] && !(typeof data['terms_link'] === 'string' || data['terms_link'] instanceof String)) {
            throw new Error("Expected the field `terms_link` to be a primitive type in the JSON string but got " + data['terms_link']);
        }
        // ensure the json data is a string
        if (data['unify_application_id'] && !(typeof data['unify_application_id'] === 'string' || data['unify_application_id'] instanceof String)) {
            throw new Error("Expected the field `unify_application_id` to be a primitive type in the JSON string but got " + data['unify_application_id']);
        }
        // ensure the json data is a string
        if (data['utm_campaign'] && !(typeof data['utm_campaign'] === 'string' || data['utm_campaign'] instanceof String)) {
            throw new Error("Expected the field `utm_campaign` to be a primitive type in the JSON string but got " + data['utm_campaign']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['zaps_menu_title'] && !(typeof data['zaps_menu_title'] === 'string' || data['zaps_menu_title'] instanceof String)) {
            throw new Error("Expected the field `zaps_menu_title` to be a primitive type in the JSON string but got " + data['zaps_menu_title']);
        }

        return true;
    }


}

Ecosystem.RequiredProperties = ["is_published", "name", "slug"];

/**
 * @member {String} about
 */
Ecosystem.prototype['about'] = undefined;

/**
 * @member {String} alternatives_background_color
 */
Ecosystem.prototype['alternatives_background_color'] = undefined;

/**
 * @member {String} alternatives_color
 */
Ecosystem.prototype['alternatives_color'] = undefined;

/**
 * @member {Boolean} attribution
 */
Ecosystem.prototype['attribution'] = undefined;

/**
 * @member {String} body_background_color
 */
Ecosystem.prototype['body_background_color'] = undefined;

/**
 * @member {String} body_button_background_color
 */
Ecosystem.prototype['body_button_background_color'] = undefined;

/**
 * @member {String} body_button_color
 */
Ecosystem.prototype['body_button_color'] = undefined;

/**
 * @member {String} body_color
 */
Ecosystem.prototype['body_color'] = undefined;

/**
 * @member {String} body_link_color
 */
Ecosystem.prototype['body_link_color'] = undefined;

/**
 * @member {module:model/CardSettings} card_settings
 */
Ecosystem.prototype['card_settings'] = undefined;

/**
 * @member {Boolean} categories_count_badge
 */
Ecosystem.prototype['categories_count_badge'] = undefined;

/**
 * @member {Number} categories_show_max_items
 */
Ecosystem.prototype['categories_show_max_items'] = undefined;

/**
 * @member {Boolean} collections_count_badge
 */
Ecosystem.prototype['collections_count_badge'] = undefined;

/**
 * @member {String} collections_title
 */
Ecosystem.prototype['collections_title'] = undefined;

/**
 * @member {String} create_link
 */
Ecosystem.prototype['create_link'] = undefined;

/**
 * @member {Date} created_at
 */
Ecosystem.prototype['created_at'] = undefined;

/**
 * @member {module:model/CTASettings} cta_settings
 */
Ecosystem.prototype['cta_settings'] = undefined;

/**
 * @member {String} custom_domain
 */
Ecosystem.prototype['custom_domain'] = undefined;

/**
 * @member {module:model/CustomSettings} custom_settings
 */
Ecosystem.prototype['custom_settings'] = undefined;

/**
 * @member {Boolean} detail_pages_enabled
 */
Ecosystem.prototype['detail_pages_enabled'] = undefined;

/**
 * @member {String} footer_background_color
 */
Ecosystem.prototype['footer_background_color'] = undefined;

/**
 * @member {String} footer_color
 */
Ecosystem.prototype['footer_color'] = undefined;

/**
 * @member {String} google_site_verification_id
 */
Ecosystem.prototype['google_site_verification_id'] = undefined;

/**
 * @member {Boolean} hide_install_buttons
 */
Ecosystem.prototype['hide_install_buttons'] = undefined;

/**
 * @member {Boolean} home_page_collection_category_cards
 */
Ecosystem.prototype['home_page_collection_category_cards'] = undefined;

/**
 * @member {Boolean} home_page_show_all_listings
 */
Ecosystem.prototype['home_page_show_all_listings'] = undefined;

/**
 * @member {String} id
 */
Ecosystem.prototype['id'] = undefined;

/**
 * @member {Boolean} installation_request_flow_enabled
 */
Ecosystem.prototype['installation_request_flow_enabled'] = undefined;

/**
 * @member {module:model/IntegrationSettings} integration_settings
 */
Ecosystem.prototype['integration_settings'] = undefined;

/**
 * @member {Boolean} is_published
 */
Ecosystem.prototype['is_published'] = undefined;

/**
 * @member {module:model/LeadFormSettings} lead_form_settings
 */
Ecosystem.prototype['lead_form_settings'] = undefined;

/**
 * @member {module:model/ListingSettings} listing_settings
 */
Ecosystem.prototype['listing_settings'] = undefined;

/**
 * @member {module:model/MastheadSettings} masthead_settings
 */
Ecosystem.prototype['masthead_settings'] = undefined;

/**
 * @member {module:model/Ecosystem.MenuPositionEnum} menu_position
 */
Ecosystem.prototype['menu_position'] = undefined;

/**
 * @member {module:model/Ecosystem.MenuStyleEnum} menu_style
 */
Ecosystem.prototype['menu_style'] = undefined;

/**
 * @member {module:model/MetaTagSettings} meta_tag_settings
 */
Ecosystem.prototype['meta_tag_settings'] = undefined;

/**
 * @member {String} name
 */
Ecosystem.prototype['name'] = undefined;

/**
 * @member {String} navigation_background_color
 */
Ecosystem.prototype['navigation_background_color'] = undefined;

/**
 * @member {String} navigation_color
 */
Ecosystem.prototype['navigation_color'] = undefined;

/**
 * @member {String} navigation_logo_post_fix
 */
Ecosystem.prototype['navigation_logo_post_fix'] = undefined;

/**
 * @member {module:model/Ecosystem.NavigationMobileMenuTypeEnum} navigation_mobile_menu_type
 */
Ecosystem.prototype['navigation_mobile_menu_type'] = undefined;

/**
 * @member {Boolean} navigation_sticky
 */
Ecosystem.prototype['navigation_sticky'] = undefined;

/**
 * @member {String} primary_color
 */
Ecosystem.prototype['primary_color'] = undefined;

/**
 * @member {String} privacy_link
 */
Ecosystem.prototype['privacy_link'] = undefined;

/**
 * @member {String} request_link
 */
Ecosystem.prototype['request_link'] = undefined;

/**
 * @member {String} shadow_page_description
 */
Ecosystem.prototype['shadow_page_description'] = undefined;

/**
 * @member {Boolean} shadow_pages_enabled
 */
Ecosystem.prototype['shadow_pages_enabled'] = undefined;

/**
 * @member {Boolean} show_attribution_badge
 */
Ecosystem.prototype['show_attribution_badge'] = undefined;

/**
 * @member {Boolean} show_requested_listings
 */
Ecosystem.prototype['show_requested_listings'] = undefined;

/**
 * @member {String} slug
 */
Ecosystem.prototype['slug'] = undefined;

/**
 * @member {String} terms_link
 */
Ecosystem.prototype['terms_link'] = undefined;

/**
 * @member {Number} total_published_listings
 */
Ecosystem.prototype['total_published_listings'] = undefined;

/**
 * @member {String} unify_application_id
 */
Ecosystem.prototype['unify_application_id'] = undefined;

/**
 * @member {Date} updated_at
 */
Ecosystem.prototype['updated_at'] = undefined;

/**
 * @member {String} utm_campaign
 */
Ecosystem.prototype['utm_campaign'] = undefined;

/**
 * @member {String} website
 */
Ecosystem.prototype['website'] = undefined;

/**
 * @member {String} zaps_menu_title
 */
Ecosystem.prototype['zaps_menu_title'] = undefined;

/**
 * @member {Boolean} zaps_page_enabled
 */
Ecosystem.prototype['zaps_page_enabled'] = undefined;





/**
 * Allowed values for the <code>menu_position</code> property.
 * @enum {String}
 * @readonly
 */
Ecosystem['MenuPositionEnum'] = {

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT",

    /**
     * value: "HIDDEN"
     * @const
     */
    "HIDDEN": "HIDDEN"
};


/**
 * Allowed values for the <code>menu_style</code> property.
 * @enum {String}
 * @readonly
 */
Ecosystem['MenuStyleEnum'] = {

    /**
     * value: "LIST"
     * @const
     */
    "LIST": "LIST",

    /**
     * value: "PILL"
     * @const
     */
    "PILL": "PILL",

    /**
     * value: "FILTER"
     * @const
     */
    "FILTER": "FILTER"
};


/**
 * Allowed values for the <code>navigation_mobile_menu_type</code> property.
 * @enum {String}
 * @readonly
 */
Ecosystem['NavigationMobileMenuTypeEnum'] = {

    /**
     * value: "ICON"
     * @const
     */
    "ICON": "ICON",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT"
};



export default Ecosystem;

