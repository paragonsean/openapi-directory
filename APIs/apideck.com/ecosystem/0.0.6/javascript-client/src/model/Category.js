/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Logo from './Logo';
import Translation from './Translation';

/**
 * The Category model module.
 * @module model/Category
 * @version 0.0.6
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * @alias module:model/Category
     * @param name {String} 
     * @param slug {String} 
     */
    constructor(name, slug) { 
        
        Category.initialize(this, name, slug);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, slug) { 
        obj['name'] = name;
        obj['slug'] = slug;
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('listing_description_text_template')) {
                obj['listing_description_text_template'] = ApiClient.convertToType(data['listing_description_text_template'], 'String');
            }
            if (data.hasOwnProperty('listing_features_text_template')) {
                obj['listing_features_text_template'] = ApiClient.convertToType(data['listing_features_text_template'], 'String');
            }
            if (data.hasOwnProperty('listing_pricing_text_template')) {
                obj['listing_pricing_text_template'] = ApiClient.convertToType(data['listing_pricing_text_template'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = Logo.constructFromObject(data['logo']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], [Translation]);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Category.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['listing_description_text_template'] && !(typeof data['listing_description_text_template'] === 'string' || data['listing_description_text_template'] instanceof String)) {
            throw new Error("Expected the field `listing_description_text_template` to be a primitive type in the JSON string but got " + data['listing_description_text_template']);
        }
        // ensure the json data is a string
        if (data['listing_features_text_template'] && !(typeof data['listing_features_text_template'] === 'string' || data['listing_features_text_template'] instanceof String)) {
            throw new Error("Expected the field `listing_features_text_template` to be a primitive type in the JSON string but got " + data['listing_features_text_template']);
        }
        // ensure the json data is a string
        if (data['listing_pricing_text_template'] && !(typeof data['listing_pricing_text_template'] === 'string' || data['listing_pricing_text_template'] instanceof String)) {
            throw new Error("Expected the field `listing_pricing_text_template` to be a primitive type in the JSON string but got " + data['listing_pricing_text_template']);
        }
        // validate the optional field `logo`
        if (data['logo']) { // data not null
          Logo.validateJSON(data['logo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        if (data['translations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['translations'])) {
                throw new Error("Expected the field `translations` to be an array in the JSON data but got " + data['translations']);
            }
            // validate the optional field `translations` (array)
            for (const item of data['translations']) {
                Translation.validateJSON(item);
            };
        }

        return true;
    }


}

Category.RequiredProperties = ["name", "slug"];

/**
 * @member {Number} count
 */
Category.prototype['count'] = undefined;

/**
 * @member {Date} created_at
 */
Category.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
Category.prototype['description'] = undefined;

/**
 * @member {String} id
 */
Category.prototype['id'] = undefined;

/**
 * @member {String} listing_description_text_template
 */
Category.prototype['listing_description_text_template'] = undefined;

/**
 * @member {String} listing_features_text_template
 */
Category.prototype['listing_features_text_template'] = undefined;

/**
 * @member {String} listing_pricing_text_template
 */
Category.prototype['listing_pricing_text_template'] = undefined;

/**
 * @member {module:model/Logo} logo
 */
Category.prototype['logo'] = undefined;

/**
 * @member {String} name
 */
Category.prototype['name'] = undefined;

/**
 * @member {String} slug
 */
Category.prototype['slug'] = undefined;

/**
 * @member {Array.<module:model/Translation>} translations
 */
Category.prototype['translations'] = undefined;

/**
 * @member {Date} updated_at
 */
Category.prototype['updated_at'] = undefined;






export default Category;

