/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListingSettings model module.
 * @module model/ListingSettings
 * @version 0.0.6
 */
class ListingSettings {
    /**
     * Constructs a new <code>ListingSettings</code>.
     * @alias module:model/ListingSettings
     */
    constructor() { 
        
        ListingSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListingSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListingSettings} obj Optional instance to populate.
     * @return {module:model/ListingSettings} The populated <code>ListingSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListingSettings();

            if (data.hasOwnProperty('description_text_template')) {
                obj['description_text_template'] = ApiClient.convertToType(data['description_text_template'], 'String');
            }
            if (data.hasOwnProperty('description_title')) {
                obj['description_title'] = ApiClient.convertToType(data['description_title'], 'String');
            }
            if (data.hasOwnProperty('features_text_template')) {
                obj['features_text_template'] = ApiClient.convertToType(data['features_text_template'], 'String');
            }
            if (data.hasOwnProperty('features_title')) {
                obj['features_title'] = ApiClient.convertToType(data['features_title'], 'String');
            }
            if (data.hasOwnProperty('install_button_label')) {
                obj['install_button_label'] = ApiClient.convertToType(data['install_button_label'], 'String');
            }
            if (data.hasOwnProperty('name_postfix')) {
                obj['name_postfix'] = ApiClient.convertToType(data['name_postfix'], 'String');
            }
            if (data.hasOwnProperty('naming')) {
                obj['naming'] = ApiClient.convertToType(data['naming'], 'String');
            }
            if (data.hasOwnProperty('native_integration_link')) {
                obj['native_integration_link'] = ApiClient.convertToType(data['native_integration_link'], 'String');
            }
            if (data.hasOwnProperty('pricing_disabled')) {
                obj['pricing_disabled'] = ApiClient.convertToType(data['pricing_disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('pricing_text_template')) {
                obj['pricing_text_template'] = ApiClient.convertToType(data['pricing_text_template'], 'String');
            }
            if (data.hasOwnProperty('pricing_title')) {
                obj['pricing_title'] = ApiClient.convertToType(data['pricing_title'], 'String');
            }
            if (data.hasOwnProperty('sidebar_position')) {
                obj['sidebar_position'] = ApiClient.convertToType(data['sidebar_position'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListingSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListingSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description_text_template'] && !(typeof data['description_text_template'] === 'string' || data['description_text_template'] instanceof String)) {
            throw new Error("Expected the field `description_text_template` to be a primitive type in the JSON string but got " + data['description_text_template']);
        }
        // ensure the json data is a string
        if (data['description_title'] && !(typeof data['description_title'] === 'string' || data['description_title'] instanceof String)) {
            throw new Error("Expected the field `description_title` to be a primitive type in the JSON string but got " + data['description_title']);
        }
        // ensure the json data is a string
        if (data['features_text_template'] && !(typeof data['features_text_template'] === 'string' || data['features_text_template'] instanceof String)) {
            throw new Error("Expected the field `features_text_template` to be a primitive type in the JSON string but got " + data['features_text_template']);
        }
        // ensure the json data is a string
        if (data['features_title'] && !(typeof data['features_title'] === 'string' || data['features_title'] instanceof String)) {
            throw new Error("Expected the field `features_title` to be a primitive type in the JSON string but got " + data['features_title']);
        }
        // ensure the json data is a string
        if (data['install_button_label'] && !(typeof data['install_button_label'] === 'string' || data['install_button_label'] instanceof String)) {
            throw new Error("Expected the field `install_button_label` to be a primitive type in the JSON string but got " + data['install_button_label']);
        }
        // ensure the json data is a string
        if (data['name_postfix'] && !(typeof data['name_postfix'] === 'string' || data['name_postfix'] instanceof String)) {
            throw new Error("Expected the field `name_postfix` to be a primitive type in the JSON string but got " + data['name_postfix']);
        }
        // ensure the json data is a string
        if (data['naming'] && !(typeof data['naming'] === 'string' || data['naming'] instanceof String)) {
            throw new Error("Expected the field `naming` to be a primitive type in the JSON string but got " + data['naming']);
        }
        // ensure the json data is a string
        if (data['native_integration_link'] && !(typeof data['native_integration_link'] === 'string' || data['native_integration_link'] instanceof String)) {
            throw new Error("Expected the field `native_integration_link` to be a primitive type in the JSON string but got " + data['native_integration_link']);
        }
        // ensure the json data is a string
        if (data['pricing_text_template'] && !(typeof data['pricing_text_template'] === 'string' || data['pricing_text_template'] instanceof String)) {
            throw new Error("Expected the field `pricing_text_template` to be a primitive type in the JSON string but got " + data['pricing_text_template']);
        }
        // ensure the json data is a string
        if (data['pricing_title'] && !(typeof data['pricing_title'] === 'string' || data['pricing_title'] instanceof String)) {
            throw new Error("Expected the field `pricing_title` to be a primitive type in the JSON string but got " + data['pricing_title']);
        }
        // ensure the json data is a string
        if (data['sidebar_position'] && !(typeof data['sidebar_position'] === 'string' || data['sidebar_position'] instanceof String)) {
            throw new Error("Expected the field `sidebar_position` to be a primitive type in the JSON string but got " + data['sidebar_position']);
        }

        return true;
    }


}



/**
 * @member {String} description_text_template
 */
ListingSettings.prototype['description_text_template'] = undefined;

/**
 * @member {String} description_title
 */
ListingSettings.prototype['description_title'] = undefined;

/**
 * @member {String} features_text_template
 */
ListingSettings.prototype['features_text_template'] = undefined;

/**
 * @member {String} features_title
 */
ListingSettings.prototype['features_title'] = undefined;

/**
 * @member {String} install_button_label
 */
ListingSettings.prototype['install_button_label'] = undefined;

/**
 * @member {String} name_postfix
 */
ListingSettings.prototype['name_postfix'] = undefined;

/**
 * @member {module:model/ListingSettings.NamingEnum} naming
 */
ListingSettings.prototype['naming'] = undefined;

/**
 * @member {String} native_integration_link
 */
ListingSettings.prototype['native_integration_link'] = undefined;

/**
 * @member {Boolean} pricing_disabled
 */
ListingSettings.prototype['pricing_disabled'] = undefined;

/**
 * @member {String} pricing_text_template
 */
ListingSettings.prototype['pricing_text_template'] = undefined;

/**
 * @member {String} pricing_title
 */
ListingSettings.prototype['pricing_title'] = undefined;

/**
 * @member {module:model/ListingSettings.SidebarPositionEnum} sidebar_position
 */
ListingSettings.prototype['sidebar_position'] = undefined;





/**
 * Allowed values for the <code>naming</code> property.
 * @enum {String}
 * @readonly
 */
ListingSettings['NamingEnum'] = {

    /**
     * value: "LISTING"
     * @const
     */
    "LISTING": "LISTING",

    /**
     * value: "LISTINGS"
     * @const
     */
    "LISTINGS": "LISTINGS",

    /**
     * value: "INTEGRATIONS"
     * @const
     */
    "INTEGRATIONS": "INTEGRATIONS",

    /**
     * value: "APPS"
     * @const
     */
    "APPS": "APPS",

    /**
     * value: "CONNECTORS"
     * @const
     */
    "CONNECTORS": "CONNECTORS",

    /**
     * value: "DATASOURCES"
     * @const
     */
    "DATASOURCES": "DATASOURCES",

    /**
     * value: "ADDONS"
     * @const
     */
    "ADDONS": "ADDONS",

    /**
     * value: "PLUGINS"
     * @const
     */
    "PLUGINS": "PLUGINS",

    /**
     * value: "PARTNERS"
     * @const
     */
    "PARTNERS": "PARTNERS",

    /**
     * value: "CHANNELS"
     * @const
     */
    "CHANNELS": "CHANNELS",

    /**
     * value: "CONNECTIONS"
     * @const
     */
    "CONNECTIONS": "CONNECTIONS",

    /**
     * value: "EXTENSIONS"
     * @const
     */
    "EXTENSIONS": "EXTENSIONS"
};


/**
 * Allowed values for the <code>sidebar_position</code> property.
 * @enum {String}
 * @readonly
 */
ListingSettings['SidebarPositionEnum'] = {

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT",

    /**
     * value: "HIDDEN"
     * @const
     */
    "HIDDEN": "HIDDEN"
};



export default ListingSettings;

