/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CTASettings model module.
 * @module model/CTASettings
 * @version 0.0.6
 */
class CTASettings {
    /**
     * Constructs a new <code>CTASettings</code>.
     * @alias module:model/CTASettings
     */
    constructor() { 
        
        CTASettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CTASettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CTASettings} obj Optional instance to populate.
     * @return {module:model/CTASettings} The populated <code>CTASettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CTASettings();

            if (data.hasOwnProperty('background_color')) {
                obj['background_color'] = ApiClient.convertToType(data['background_color'], 'String');
            }
            if (data.hasOwnProperty('button_background_color')) {
                obj['button_background_color'] = ApiClient.convertToType(data['button_background_color'], 'String');
            }
            if (data.hasOwnProperty('button_color')) {
                obj['button_color'] = ApiClient.convertToType(data['button_color'], 'String');
            }
            if (data.hasOwnProperty('button_label')) {
                obj['button_label'] = ApiClient.convertToType(data['button_label'], 'String');
            }
            if (data.hasOwnProperty('button_link')) {
                obj['button_link'] = ApiClient.convertToType(data['button_link'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CTASettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CTASettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['background_color'] && !(typeof data['background_color'] === 'string' || data['background_color'] instanceof String)) {
            throw new Error("Expected the field `background_color` to be a primitive type in the JSON string but got " + data['background_color']);
        }
        // ensure the json data is a string
        if (data['button_background_color'] && !(typeof data['button_background_color'] === 'string' || data['button_background_color'] instanceof String)) {
            throw new Error("Expected the field `button_background_color` to be a primitive type in the JSON string but got " + data['button_background_color']);
        }
        // ensure the json data is a string
        if (data['button_color'] && !(typeof data['button_color'] === 'string' || data['button_color'] instanceof String)) {
            throw new Error("Expected the field `button_color` to be a primitive type in the JSON string but got " + data['button_color']);
        }
        // ensure the json data is a string
        if (data['button_label'] && !(typeof data['button_label'] === 'string' || data['button_label'] instanceof String)) {
            throw new Error("Expected the field `button_label` to be a primitive type in the JSON string but got " + data['button_label']);
        }
        // ensure the json data is a string
        if (data['button_link'] && !(typeof data['button_link'] === 'string' || data['button_link'] instanceof String)) {
            throw new Error("Expected the field `button_link` to be a primitive type in the JSON string but got " + data['button_link']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} background_color
 */
CTASettings.prototype['background_color'] = undefined;

/**
 * @member {String} button_background_color
 */
CTASettings.prototype['button_background_color'] = undefined;

/**
 * @member {String} button_color
 */
CTASettings.prototype['button_color'] = undefined;

/**
 * @member {String} button_label
 */
CTASettings.prototype['button_label'] = undefined;

/**
 * @member {String} button_link
 */
CTASettings.prototype['button_link'] = undefined;

/**
 * @member {String} color
 */
CTASettings.prototype['color'] = undefined;

/**
 * @member {String} description
 */
CTASettings.prototype['description'] = undefined;

/**
 * @member {Boolean} enabled
 */
CTASettings.prototype['enabled'] = undefined;

/**
 * @member {String} title
 */
CTASettings.prototype['title'] = undefined;






export default CTASettings;

