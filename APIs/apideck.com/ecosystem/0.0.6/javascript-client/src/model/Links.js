/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Links model module.
 * @module model/Links
 * @version 0.0.6
 */
class Links {
    /**
     * Constructs a new <code>Links</code>.
     * Links to navigate to previous or next pages through the API
     * @alias module:model/Links
     * @param current {String} Link to navigate to the current page through the API
     */
    constructor(current) { 
        
        Links.initialize(this, current);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, current) { 
        obj['current'] = current;
    }

    /**
     * Constructs a <code>Links</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Links} obj Optional instance to populate.
     * @return {module:model/Links} The populated <code>Links</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Links();

            if (data.hasOwnProperty('current')) {
                obj['current'] = ApiClient.convertToType(data['current'], 'String');
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('previous')) {
                obj['previous'] = ApiClient.convertToType(data['previous'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Links</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Links</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Links.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['current'] && !(typeof data['current'] === 'string' || data['current'] instanceof String)) {
            throw new Error("Expected the field `current` to be a primitive type in the JSON string but got " + data['current']);
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // ensure the json data is a string
        if (data['previous'] && !(typeof data['previous'] === 'string' || data['previous'] instanceof String)) {
            throw new Error("Expected the field `previous` to be a primitive type in the JSON string but got " + data['previous']);
        }

        return true;
    }


}

Links.RequiredProperties = ["current"];

/**
 * Link to navigate to the current page through the API
 * @member {String} current
 */
Links.prototype['current'] = undefined;

/**
 * Link to navigate to the previous page through the API
 * @member {String} next
 */
Links.prototype['next'] = undefined;

/**
 * Link to navigate to the previous page through the API
 * @member {String} previous
 */
Links.prototype['previous'] = undefined;






export default Links;

