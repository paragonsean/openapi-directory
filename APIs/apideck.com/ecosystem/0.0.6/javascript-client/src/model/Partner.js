/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';

/**
 * The Partner model module.
 * @module model/Partner
 * @version 0.0.6
 */
class Partner {
    /**
     * Constructs a new <code>Partner</code>.
     * @alias module:model/Partner
     * @param company {String} 
     */
    constructor(company) { 
        
        Partner.initialize(this, company);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, company) { 
        obj['company'] = company;
    }

    /**
     * Constructs a <code>Partner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Partner} obj Optional instance to populate.
     * @return {module:model/Partner} The populated <code>Partner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Partner();

            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], [Contact]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = File.constructFromObject(data['icon']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('listed')) {
                obj['listed'] = ApiClient.convertToType(data['listed'], 'String');
            }
            if (data.hasOwnProperty('twitter')) {
                obj['twitter'] = ApiClient.convertToType(data['twitter'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Partner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Partner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Partner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        if (data['contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contacts'])) {
                throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
            }
            // validate the optional field `contacts` (array)
            for (const item of data['contacts']) {
                Contact.validateJSON(item);
            };
        }
        // validate the optional field `icon`
        if (data['icon']) { // data not null
          File.validateJSON(data['icon']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['listed'] && !(typeof data['listed'] === 'string' || data['listed'] instanceof String)) {
            throw new Error("Expected the field `listed` to be a primitive type in the JSON string but got " + data['listed']);
        }
        // ensure the json data is a string
        if (data['twitter'] && !(typeof data['twitter'] === 'string' || data['twitter'] instanceof String)) {
            throw new Error("Expected the field `twitter` to be a primitive type in the JSON string but got " + data['twitter']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

Partner.RequiredProperties = ["company"];

/**
 * @member {String} company
 */
Partner.prototype['company'] = undefined;

/**
 * @member {Array.<module:model/Contact>} contacts
 */
Partner.prototype['contacts'] = undefined;

/**
 * @member {Date} created_at
 */
Partner.prototype['created_at'] = undefined;

/**
 * @member {File} icon
 */
Partner.prototype['icon'] = undefined;

/**
 * @member {String} id
 */
Partner.prototype['id'] = undefined;

/**
 * @member {String} listed
 */
Partner.prototype['listed'] = undefined;

/**
 * @member {String} twitter
 */
Partner.prototype['twitter'] = undefined;

/**
 * @member {Date} updated_at
 */
Partner.prototype['updated_at'] = undefined;

/**
 * @member {String} website
 */
Partner.prototype['website'] = undefined;






export default Partner;

