/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EcosystemApi);
  }
}(this, function(expect, EcosystemApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EcosystemApi.Listing();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Listing', function() {
    it('should create an instance of Listing', function() {
      // uncomment below and update the code to test Listing
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be.a(EcosystemApi.Listing);
    });

    it('should have the property automateId (base name: "automate_id")', function() {
      // uncomment below and update the code to test the property automateId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property blendrId (base name: "blendr_id")', function() {
      // uncomment below and update the code to test the property blendrId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property cardBackgroundColor (base name: "card_background_color")', function() {
      // uncomment below and update the code to test the property cardBackgroundColor
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property cardBackgroundImage (base name: "card_background_image")', function() {
      // uncomment below and update the code to test the property cardBackgroundImage
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property cloudServiceId (base name: "cloud_service_id")', function() {
      // uncomment below and update the code to test the property cloudServiceId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property collections (base name: "collections")', function() {
      // uncomment below and update the code to test the property collections
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property combideskId (base name: "combidesk_id")', function() {
      // uncomment below and update the code to test the property combideskId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property detailPageDisabled (base name: "detail_page_disabled")', function() {
      // uncomment below and update the code to test the property detailPageDisabled
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "external_id")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property features (base name: "features")', function() {
      // uncomment below and update the code to test the property features
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property integromatId (base name: "integromat_id")', function() {
      // uncomment below and update the code to test the property integromatId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property logo (base name: "logo")', function() {
      // uncomment below and update the code to test the property logo
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property media (base name: "media")', function() {
      // uncomment below and update the code to test the property media
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property metaTagDescription (base name: "meta_tag_description")', function() {
      // uncomment below and update the code to test the property metaTagDescription
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property metaTagKeywords (base name: "meta_tag_keywords")', function() {
      // uncomment below and update the code to test the property metaTagKeywords
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property metaTagTitle (base name: "meta_tag_title")', function() {
      // uncomment below and update the code to test the property metaTagTitle
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property microsoftFlowId (base name: "microsoft_flow_id")', function() {
      // uncomment below and update the code to test the property microsoftFlowId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property nativeIntegration (base name: "native_integration")', function() {
      // uncomment below and update the code to test the property nativeIntegration
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property nativeIntegrationLink (base name: "native_integration_link")', function() {
      // uncomment below and update the code to test the property nativeIntegrationLink
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property partner (base name: "partner")', function() {
      // uncomment below and update the code to test the property partner
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property piesyncId (base name: "piesync_id")', function() {
      // uncomment below and update the code to test the property piesyncId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property pricing (base name: "pricing")', function() {
      // uncomment below and update the code to test the property pricing
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property products (base name: "products")', function() {
      // uncomment below and update the code to test the property products
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property published (base name: "published")', function() {
      // uncomment below and update the code to test the property published
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property publishedAt (base name: "published_at")', function() {
      // uncomment below and update the code to test the property publishedAt
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property screenshots (base name: "screenshots")', function() {
      // uncomment below and update the code to test the property screenshots
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property segmentId (base name: "segment_id")', function() {
      // uncomment below and update the code to test the property segmentId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property sticky (base name: "sticky")', function() {
      // uncomment below and update the code to test the property sticky
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property tagLine (base name: "tag_line")', function() {
      // uncomment below and update the code to test the property tagLine
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property thirdPartyIntegration (base name: "third_party_integration")', function() {
      // uncomment below and update the code to test the property thirdPartyIntegration
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property thirdPartyIntegrationLink (base name: "third_party_integration_link")', function() {
      // uncomment below and update the code to test the property thirdPartyIntegrationLink
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property translations (base name: "translations")', function() {
      // uncomment below and update the code to test the property translations
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property trayIoId (base name: "tray_io_id")', function() {
      // uncomment below and update the code to test the property trayIoId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property unifyConnectorId (base name: "unify_connector_id")', function() {
      // uncomment below and update the code to test the property unifyConnectorId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property upcoming (base name: "upcoming")', function() {
      // uncomment below and update the code to test the property upcoming
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

    it('should have the property zapierId (base name: "zapier_id")', function() {
      // uncomment below and update the code to test the property zapierId
      //var instance = new EcosystemApi.Listing();
      //expect(instance).to.be();
    });

  });

}));
