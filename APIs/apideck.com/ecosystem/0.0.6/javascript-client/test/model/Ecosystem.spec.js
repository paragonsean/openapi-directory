/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EcosystemApi);
  }
}(this, function(expect, EcosystemApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EcosystemApi.Ecosystem();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Ecosystem', function() {
    it('should create an instance of Ecosystem', function() {
      // uncomment below and update the code to test Ecosystem
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be.a(EcosystemApi.Ecosystem);
    });

    it('should have the property about (base name: "about")', function() {
      // uncomment below and update the code to test the property about
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property alternativesBackgroundColor (base name: "alternatives_background_color")', function() {
      // uncomment below and update the code to test the property alternativesBackgroundColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property alternativesColor (base name: "alternatives_color")', function() {
      // uncomment below and update the code to test the property alternativesColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property attribution (base name: "attribution")', function() {
      // uncomment below and update the code to test the property attribution
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property bodyBackgroundColor (base name: "body_background_color")', function() {
      // uncomment below and update the code to test the property bodyBackgroundColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property bodyButtonBackgroundColor (base name: "body_button_background_color")', function() {
      // uncomment below and update the code to test the property bodyButtonBackgroundColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property bodyButtonColor (base name: "body_button_color")', function() {
      // uncomment below and update the code to test the property bodyButtonColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property bodyColor (base name: "body_color")', function() {
      // uncomment below and update the code to test the property bodyColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property bodyLinkColor (base name: "body_link_color")', function() {
      // uncomment below and update the code to test the property bodyLinkColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property cardSettings (base name: "card_settings")', function() {
      // uncomment below and update the code to test the property cardSettings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property categoriesCountBadge (base name: "categories_count_badge")', function() {
      // uncomment below and update the code to test the property categoriesCountBadge
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property categoriesShowMaxItems (base name: "categories_show_max_items")', function() {
      // uncomment below and update the code to test the property categoriesShowMaxItems
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property collectionsCountBadge (base name: "collections_count_badge")', function() {
      // uncomment below and update the code to test the property collectionsCountBadge
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property collectionsTitle (base name: "collections_title")', function() {
      // uncomment below and update the code to test the property collectionsTitle
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property createLink (base name: "create_link")', function() {
      // uncomment below and update the code to test the property createLink
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property ctaSettings (base name: "cta_settings")', function() {
      // uncomment below and update the code to test the property ctaSettings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property customDomain (base name: "custom_domain")', function() {
      // uncomment below and update the code to test the property customDomain
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property customSettings (base name: "custom_settings")', function() {
      // uncomment below and update the code to test the property customSettings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property detailPagesEnabled (base name: "detail_pages_enabled")', function() {
      // uncomment below and update the code to test the property detailPagesEnabled
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property footerBackgroundColor (base name: "footer_background_color")', function() {
      // uncomment below and update the code to test the property footerBackgroundColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property footerColor (base name: "footer_color")', function() {
      // uncomment below and update the code to test the property footerColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property googleSiteVerificationId (base name: "google_site_verification_id")', function() {
      // uncomment below and update the code to test the property googleSiteVerificationId
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property hideInstallButtons (base name: "hide_install_buttons")', function() {
      // uncomment below and update the code to test the property hideInstallButtons
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property homePageCollectionCategoryCards (base name: "home_page_collection_category_cards")', function() {
      // uncomment below and update the code to test the property homePageCollectionCategoryCards
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property homePageShowAllListings (base name: "home_page_show_all_listings")', function() {
      // uncomment below and update the code to test the property homePageShowAllListings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property installationRequestFlowEnabled (base name: "installation_request_flow_enabled")', function() {
      // uncomment below and update the code to test the property installationRequestFlowEnabled
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property integrationSettings (base name: "integration_settings")', function() {
      // uncomment below and update the code to test the property integrationSettings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property isPublished (base name: "is_published")', function() {
      // uncomment below and update the code to test the property isPublished
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property leadFormSettings (base name: "lead_form_settings")', function() {
      // uncomment below and update the code to test the property leadFormSettings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property listingSettings (base name: "listing_settings")', function() {
      // uncomment below and update the code to test the property listingSettings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property mastheadSettings (base name: "masthead_settings")', function() {
      // uncomment below and update the code to test the property mastheadSettings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property menuPosition (base name: "menu_position")', function() {
      // uncomment below and update the code to test the property menuPosition
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property menuStyle (base name: "menu_style")', function() {
      // uncomment below and update the code to test the property menuStyle
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property metaTagSettings (base name: "meta_tag_settings")', function() {
      // uncomment below and update the code to test the property metaTagSettings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property navigationBackgroundColor (base name: "navigation_background_color")', function() {
      // uncomment below and update the code to test the property navigationBackgroundColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property navigationColor (base name: "navigation_color")', function() {
      // uncomment below and update the code to test the property navigationColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property navigationLogoPostFix (base name: "navigation_logo_post_fix")', function() {
      // uncomment below and update the code to test the property navigationLogoPostFix
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property navigationMobileMenuType (base name: "navigation_mobile_menu_type")', function() {
      // uncomment below and update the code to test the property navigationMobileMenuType
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property navigationSticky (base name: "navigation_sticky")', function() {
      // uncomment below and update the code to test the property navigationSticky
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property primaryColor (base name: "primary_color")', function() {
      // uncomment below and update the code to test the property primaryColor
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property privacyLink (base name: "privacy_link")', function() {
      // uncomment below and update the code to test the property privacyLink
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property requestLink (base name: "request_link")', function() {
      // uncomment below and update the code to test the property requestLink
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property shadowPageDescription (base name: "shadow_page_description")', function() {
      // uncomment below and update the code to test the property shadowPageDescription
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property shadowPagesEnabled (base name: "shadow_pages_enabled")', function() {
      // uncomment below and update the code to test the property shadowPagesEnabled
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property showAttributionBadge (base name: "show_attribution_badge")', function() {
      // uncomment below and update the code to test the property showAttributionBadge
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property showRequestedListings (base name: "show_requested_listings")', function() {
      // uncomment below and update the code to test the property showRequestedListings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property termsLink (base name: "terms_link")', function() {
      // uncomment below and update the code to test the property termsLink
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property totalPublishedListings (base name: "total_published_listings")', function() {
      // uncomment below and update the code to test the property totalPublishedListings
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property unifyApplicationId (base name: "unify_application_id")', function() {
      // uncomment below and update the code to test the property unifyApplicationId
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property utmCampaign (base name: "utm_campaign")', function() {
      // uncomment below and update the code to test the property utmCampaign
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property website (base name: "website")', function() {
      // uncomment below and update the code to test the property website
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property zapsMenuTitle (base name: "zaps_menu_title")', function() {
      // uncomment below and update the code to test the property zapsMenuTitle
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

    it('should have the property zapsPageEnabled (base name: "zaps_page_enabled")', function() {
      // uncomment below and update the code to test the property zapsPageEnabled
      //var instance = new EcosystemApi.Ecosystem();
      //expect(instance).to.be();
    });

  });

}));
