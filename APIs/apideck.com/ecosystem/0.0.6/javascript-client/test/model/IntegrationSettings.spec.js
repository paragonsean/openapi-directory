/**
 * Ecosystem API
 * Ecosystem API
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: hello@apideck.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EcosystemApi);
  }
}(this, function(expect, EcosystemApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EcosystemApi.IntegrationSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IntegrationSettings', function() {
    it('should create an instance of IntegrationSettings', function() {
      // uncomment below and update the code to test IntegrationSettings
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be.a(EcosystemApi.IntegrationSettings);
    });

    it('should have the property albacrossId (base name: "albacross_id")', function() {
      // uncomment below and update the code to test the property albacrossId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property automateEnabled (base name: "automate_enabled")', function() {
      // uncomment below and update the code to test the property automateEnabled
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property blendrEnabled (base name: "blendr_enabled")', function() {
      // uncomment below and update the code to test the property blendrEnabled
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property combideskEnabled (base name: "combidesk_enabled")', function() {
      // uncomment below and update the code to test the property combideskEnabled
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property crispId (base name: "crisp_id")', function() {
      // uncomment below and update the code to test the property crispId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property driftId (base name: "drift_id")', function() {
      // uncomment below and update the code to test the property driftId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property googleAnalyticsId (base name: "google_analytics_id")', function() {
      // uncomment below and update the code to test the property googleAnalyticsId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property googleTagManagerId (base name: "google_tag_manager_id")', function() {
      // uncomment below and update the code to test the property googleTagManagerId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property heapId (base name: "heap_id")', function() {
      // uncomment below and update the code to test the property heapId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property hubspotPortalId (base name: "hubspot_portal_id")', function() {
      // uncomment below and update the code to test the property hubspotPortalId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property integromatEnabled (base name: "integromat_enabled")', function() {
      // uncomment below and update the code to test the property integromatEnabled
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property intercomAppId (base name: "intercom_app_id")', function() {
      // uncomment below and update the code to test the property intercomAppId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property iubendaCookiePolicyId (base name: "iubenda_cookie_policy_id")', function() {
      // uncomment below and update the code to test the property iubendaCookiePolicyId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property iubendaSiteId (base name: "iubenda_site_id")', function() {
      // uncomment below and update the code to test the property iubendaSiteId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property journyIoDomain (base name: "journy_io_domain")', function() {
      // uncomment below and update the code to test the property journyIoDomain
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property journyIoId (base name: "journy_io_id")', function() {
      // uncomment below and update the code to test the property journyIoId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property livechatId (base name: "livechat_id")', function() {
      // uncomment below and update the code to test the property livechatId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property metomicId (base name: "metomic_id")', function() {
      // uncomment below and update the code to test the property metomicId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property microsoftFlowEnabled (base name: "microsoft_flow_enabled")', function() {
      // uncomment below and update the code to test the property microsoftFlowEnabled
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property microsoftFlowId (base name: "microsoft_flow_id")', function() {
      // uncomment below and update the code to test the property microsoftFlowId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property onetrustId (base name: "onetrust_id")', function() {
      // uncomment below and update the code to test the property onetrustId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property piesyncEnabled (base name: "piesync_enabled")', function() {
      // uncomment below and update the code to test the property piesyncEnabled
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property segmentEnabled (base name: "segment_enabled")', function() {
      // uncomment below and update the code to test the property segmentEnabled
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property segmentId (base name: "segment_id")', function() {
      // uncomment below and update the code to test the property segmentId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property trayIoEnabled (base name: "tray_io_enabled")', function() {
      // uncomment below and update the code to test the property trayIoEnabled
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property zapierBetaLink (base name: "zapier_beta_link")', function() {
      // uncomment below and update the code to test the property zapierBetaLink
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property zapierEnabled (base name: "zapier_enabled")', function() {
      // uncomment below and update the code to test the property zapierEnabled
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

    it('should have the property zapierId (base name: "zapier_id")', function() {
      // uncomment below and update the code to test the property zapierId
      //var instance = new EcosystemApi.IntegrationSettings();
      //expect(instance).to.be();
    });

  });

}));
