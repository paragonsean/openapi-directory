# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linked_tax_rate import LinkedTaxRate
from openapi_server import util


class InvoiceItemPurchaseDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tax_inclusive: bool=None, tax_rate: LinkedTaxRate=None, unit_of_measure: str=None, unit_price: float=None):
        """InvoiceItemPurchaseDetails - a model defined in OpenAPI

        :param tax_inclusive: The tax_inclusive of this InvoiceItemPurchaseDetails.
        :param tax_rate: The tax_rate of this InvoiceItemPurchaseDetails.
        :param unit_of_measure: The unit_of_measure of this InvoiceItemPurchaseDetails.
        :param unit_price: The unit_price of this InvoiceItemPurchaseDetails.
        """
        self.openapi_types = {
            'tax_inclusive': bool,
            'tax_rate': LinkedTaxRate,
            'unit_of_measure': str,
            'unit_price': float
        }

        self.attribute_map = {
            'tax_inclusive': 'tax_inclusive',
            'tax_rate': 'tax_rate',
            'unit_of_measure': 'unit_of_measure',
            'unit_price': 'unit_price'
        }

        self._tax_inclusive = tax_inclusive
        self._tax_rate = tax_rate
        self._unit_of_measure = unit_of_measure
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceItemPurchaseDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceItem_purchase_details of this InvoiceItemPurchaseDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tax_inclusive(self):
        """Gets the tax_inclusive of this InvoiceItemPurchaseDetails.

        Amounts are including tax

        :return: The tax_inclusive of this InvoiceItemPurchaseDetails.
        :rtype: bool
        """
        return self._tax_inclusive

    @tax_inclusive.setter
    def tax_inclusive(self, tax_inclusive):
        """Sets the tax_inclusive of this InvoiceItemPurchaseDetails.

        Amounts are including tax

        :param tax_inclusive: The tax_inclusive of this InvoiceItemPurchaseDetails.
        :type tax_inclusive: bool
        """

        self._tax_inclusive = tax_inclusive

    @property
    def tax_rate(self):
        """Gets the tax_rate of this InvoiceItemPurchaseDetails.


        :return: The tax_rate of this InvoiceItemPurchaseDetails.
        :rtype: LinkedTaxRate
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this InvoiceItemPurchaseDetails.


        :param tax_rate: The tax_rate of this InvoiceItemPurchaseDetails.
        :type tax_rate: LinkedTaxRate
        """

        self._tax_rate = tax_rate

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this InvoiceItemPurchaseDetails.

        Description of the unit type the item is sold as, ie: kg, hour.

        :return: The unit_of_measure of this InvoiceItemPurchaseDetails.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this InvoiceItemPurchaseDetails.

        Description of the unit type the item is sold as, ie: kg, hour.

        :param unit_of_measure: The unit_of_measure of this InvoiceItemPurchaseDetails.
        :type unit_of_measure: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def unit_price(self):
        """Gets the unit_price of this InvoiceItemPurchaseDetails.


        :return: The unit_price of this InvoiceItemPurchaseDetails.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InvoiceItemPurchaseDetails.


        :param unit_price: The unit_price of this InvoiceItemPurchaseDetails.
        :type unit_price: float
        """

        self._unit_price = unit_price
