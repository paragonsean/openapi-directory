# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balance_sheet_assets_current_assets import BalanceSheetAssetsCurrentAssets
from openapi_server.models.balance_sheet_assets_fixed_assets import BalanceSheetAssetsFixedAssets
from openapi_server import util


class BalanceSheetAssets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_assets: BalanceSheetAssetsCurrentAssets=None, fixed_assets: BalanceSheetAssetsFixedAssets=None, total: float=None):
        """BalanceSheetAssets - a model defined in OpenAPI

        :param current_assets: The current_assets of this BalanceSheetAssets.
        :param fixed_assets: The fixed_assets of this BalanceSheetAssets.
        :param total: The total of this BalanceSheetAssets.
        """
        self.openapi_types = {
            'current_assets': BalanceSheetAssetsCurrentAssets,
            'fixed_assets': BalanceSheetAssetsFixedAssets,
            'total': float
        }

        self.attribute_map = {
            'current_assets': 'current_assets',
            'fixed_assets': 'fixed_assets',
            'total': 'total'
        }

        self._current_assets = current_assets
        self._fixed_assets = fixed_assets
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BalanceSheetAssets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BalanceSheet_assets of this BalanceSheetAssets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_assets(self):
        """Gets the current_assets of this BalanceSheetAssets.


        :return: The current_assets of this BalanceSheetAssets.
        :rtype: BalanceSheetAssetsCurrentAssets
        """
        return self._current_assets

    @current_assets.setter
    def current_assets(self, current_assets):
        """Sets the current_assets of this BalanceSheetAssets.


        :param current_assets: The current_assets of this BalanceSheetAssets.
        :type current_assets: BalanceSheetAssetsCurrentAssets
        """
        if current_assets is None:
            raise ValueError("Invalid value for `current_assets`, must not be `None`")

        self._current_assets = current_assets

    @property
    def fixed_assets(self):
        """Gets the fixed_assets of this BalanceSheetAssets.


        :return: The fixed_assets of this BalanceSheetAssets.
        :rtype: BalanceSheetAssetsFixedAssets
        """
        return self._fixed_assets

    @fixed_assets.setter
    def fixed_assets(self, fixed_assets):
        """Sets the fixed_assets of this BalanceSheetAssets.


        :param fixed_assets: The fixed_assets of this BalanceSheetAssets.
        :type fixed_assets: BalanceSheetAssetsFixedAssets
        """
        if fixed_assets is None:
            raise ValueError("Invalid value for `fixed_assets`, must not be `None`")

        self._fixed_assets = fixed_assets

    @property
    def total(self):
        """Gets the total of this BalanceSheetAssets.

        Total assets

        :return: The total of this BalanceSheetAssets.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BalanceSheetAssets.

        Total assets

        :param total: The total of this BalanceSheetAssets.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
