# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.linked_customer import LinkedCustomer
from openapi_server.models.linked_ledger_account import LinkedLedgerAccount
from openapi_server.models.linked_supplier import LinkedSupplier
from openapi_server.models.payment_allocations_inner import PaymentAllocationsInner
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: LinkedLedgerAccount=None, accounts_receivable_account_id: str=None, accounts_receivable_account_type: str=None, allocations: List[PaymentAllocationsInner]=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, currency_rate: float=None, custom_mappings: object=None, customer: LinkedCustomer=None, display_id: str=None, downstream_id: str=None, id: str=None, note: str=None, payment_method: str=None, payment_method_id: str=None, payment_method_reference: str=None, reconciled: bool=None, reference: str=None, row_version: str=None, status: str=None, supplier: LinkedSupplier=None, total_amount: float=None, transaction_date: datetime=None, type: str=None, updated_at: datetime=None, updated_by: str=None):
        """Payment - a model defined in OpenAPI

        :param account: The account of this Payment.
        :param accounts_receivable_account_id: The accounts_receivable_account_id of this Payment.
        :param accounts_receivable_account_type: The accounts_receivable_account_type of this Payment.
        :param allocations: The allocations of this Payment.
        :param created_at: The created_at of this Payment.
        :param created_by: The created_by of this Payment.
        :param currency: The currency of this Payment.
        :param currency_rate: The currency_rate of this Payment.
        :param custom_mappings: The custom_mappings of this Payment.
        :param customer: The customer of this Payment.
        :param display_id: The display_id of this Payment.
        :param downstream_id: The downstream_id of this Payment.
        :param id: The id of this Payment.
        :param note: The note of this Payment.
        :param payment_method: The payment_method of this Payment.
        :param payment_method_id: The payment_method_id of this Payment.
        :param payment_method_reference: The payment_method_reference of this Payment.
        :param reconciled: The reconciled of this Payment.
        :param reference: The reference of this Payment.
        :param row_version: The row_version of this Payment.
        :param status: The status of this Payment.
        :param supplier: The supplier of this Payment.
        :param total_amount: The total_amount of this Payment.
        :param transaction_date: The transaction_date of this Payment.
        :param type: The type of this Payment.
        :param updated_at: The updated_at of this Payment.
        :param updated_by: The updated_by of this Payment.
        """
        self.openapi_types = {
            'account': LinkedLedgerAccount,
            'accounts_receivable_account_id': str,
            'accounts_receivable_account_type': str,
            'allocations': List[PaymentAllocationsInner],
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'currency_rate': float,
            'custom_mappings': object,
            'customer': LinkedCustomer,
            'display_id': str,
            'downstream_id': str,
            'id': str,
            'note': str,
            'payment_method': str,
            'payment_method_id': str,
            'payment_method_reference': str,
            'reconciled': bool,
            'reference': str,
            'row_version': str,
            'status': str,
            'supplier': LinkedSupplier,
            'total_amount': float,
            'transaction_date': datetime,
            'type': str,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'account': 'account',
            'accounts_receivable_account_id': 'accounts_receivable_account_id',
            'accounts_receivable_account_type': 'accounts_receivable_account_type',
            'allocations': 'allocations',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'currency_rate': 'currency_rate',
            'custom_mappings': 'custom_mappings',
            'customer': 'customer',
            'display_id': 'display_id',
            'downstream_id': 'downstream_id',
            'id': 'id',
            'note': 'note',
            'payment_method': 'payment_method',
            'payment_method_id': 'payment_method_id',
            'payment_method_reference': 'payment_method_reference',
            'reconciled': 'reconciled',
            'reference': 'reference',
            'row_version': 'row_version',
            'status': 'status',
            'supplier': 'supplier',
            'total_amount': 'total_amount',
            'transaction_date': 'transaction_date',
            'type': 'type',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._account = account
        self._accounts_receivable_account_id = accounts_receivable_account_id
        self._accounts_receivable_account_type = accounts_receivable_account_type
        self._allocations = allocations
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._currency_rate = currency_rate
        self._custom_mappings = custom_mappings
        self._customer = customer
        self._display_id = display_id
        self._downstream_id = downstream_id
        self._id = id
        self._note = note
        self._payment_method = payment_method
        self._payment_method_id = payment_method_id
        self._payment_method_reference = payment_method_reference
        self._reconciled = reconciled
        self._reference = reference
        self._row_version = row_version
        self._status = status
        self._supplier = supplier
        self._total_amount = total_amount
        self._transaction_date = transaction_date
        self._type = type
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Payment.


        :return: The account of this Payment.
        :rtype: LinkedLedgerAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Payment.


        :param account: The account of this Payment.
        :type account: LinkedLedgerAccount
        """

        self._account = account

    @property
    def accounts_receivable_account_id(self):
        """Gets the accounts_receivable_account_id of this Payment.

        Unique identifier for the account to allocate payment to.

        :return: The accounts_receivable_account_id of this Payment.
        :rtype: str
        """
        return self._accounts_receivable_account_id

    @accounts_receivable_account_id.setter
    def accounts_receivable_account_id(self, accounts_receivable_account_id):
        """Sets the accounts_receivable_account_id of this Payment.

        Unique identifier for the account to allocate payment to.

        :param accounts_receivable_account_id: The accounts_receivable_account_id of this Payment.
        :type accounts_receivable_account_id: str
        """

        self._accounts_receivable_account_id = accounts_receivable_account_id

    @property
    def accounts_receivable_account_type(self):
        """Gets the accounts_receivable_account_type of this Payment.

        Type of accounts receivable account.

        :return: The accounts_receivable_account_type of this Payment.
        :rtype: str
        """
        return self._accounts_receivable_account_type

    @accounts_receivable_account_type.setter
    def accounts_receivable_account_type(self, accounts_receivable_account_type):
        """Sets the accounts_receivable_account_type of this Payment.

        Type of accounts receivable account.

        :param accounts_receivable_account_type: The accounts_receivable_account_type of this Payment.
        :type accounts_receivable_account_type: str
        """

        self._accounts_receivable_account_type = accounts_receivable_account_type

    @property
    def allocations(self):
        """Gets the allocations of this Payment.


        :return: The allocations of this Payment.
        :rtype: List[PaymentAllocationsInner]
        """
        return self._allocations

    @allocations.setter
    def allocations(self, allocations):
        """Sets the allocations of this Payment.


        :param allocations: The allocations of this Payment.
        :type allocations: List[PaymentAllocationsInner]
        """

        self._allocations = allocations

    @property
    def created_at(self):
        """Gets the created_at of this Payment.

        The date and time when the object was created.

        :return: The created_at of this Payment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Payment.

        The date and time when the object was created.

        :param created_at: The created_at of this Payment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Payment.

        The user who created the object.

        :return: The created_by of this Payment.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Payment.

        The user who created the object.

        :param created_by: The created_by of this Payment.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this Payment.


        :return: The currency of this Payment.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Payment.


        :param currency: The currency of this Payment.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def currency_rate(self):
        """Gets the currency_rate of this Payment.

        Currency Exchange Rate at the time entity was recorded/generated.

        :return: The currency_rate of this Payment.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this Payment.

        Currency Exchange Rate at the time entity was recorded/generated.

        :param currency_rate: The currency_rate of this Payment.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Payment.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Payment.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Payment.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Payment.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def customer(self):
        """Gets the customer of this Payment.


        :return: The customer of this Payment.
        :rtype: LinkedCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Payment.


        :param customer: The customer of this Payment.
        :type customer: LinkedCustomer
        """

        self._customer = customer

    @property
    def display_id(self):
        """Gets the display_id of this Payment.

        Payment id to be displayed.

        :return: The display_id of this Payment.
        :rtype: str
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this Payment.

        Payment id to be displayed.

        :param display_id: The display_id of this Payment.
        :type display_id: str
        """

        self._display_id = display_id

    @property
    def downstream_id(self):
        """Gets the downstream_id of this Payment.

        The third-party API ID of original entity

        :return: The downstream_id of this Payment.
        :rtype: str
        """
        return self._downstream_id

    @downstream_id.setter
    def downstream_id(self, downstream_id):
        """Sets the downstream_id of this Payment.

        The third-party API ID of original entity

        :param downstream_id: The downstream_id of this Payment.
        :type downstream_id: str
        """

        self._downstream_id = downstream_id

    @property
    def id(self):
        """Gets the id of this Payment.

        Unique identifier representing the entity

        :return: The id of this Payment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        Unique identifier representing the entity

        :param id: The id of this Payment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def note(self):
        """Gets the note of this Payment.

        Optional note to be associated with the payment.

        :return: The note of this Payment.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Payment.

        Optional note to be associated with the payment.

        :param note: The note of this Payment.
        :type note: str
        """

        self._note = note

    @property
    def payment_method(self):
        """Gets the payment_method of this Payment.

        Payment method name

        :return: The payment_method of this Payment.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Payment.

        Payment method name

        :param payment_method: The payment_method of this Payment.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this Payment.

        Unique identifier for the payment method.

        :return: The payment_method_id of this Payment.
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this Payment.

        Unique identifier for the payment method.

        :param payment_method_id: The payment_method_id of this Payment.
        :type payment_method_id: str
        """

        self._payment_method_id = payment_method_id

    @property
    def payment_method_reference(self):
        """Gets the payment_method_reference of this Payment.

        Optional reference message returned by payment method on processing

        :return: The payment_method_reference of this Payment.
        :rtype: str
        """
        return self._payment_method_reference

    @payment_method_reference.setter
    def payment_method_reference(self, payment_method_reference):
        """Sets the payment_method_reference of this Payment.

        Optional reference message returned by payment method on processing

        :param payment_method_reference: The payment_method_reference of this Payment.
        :type payment_method_reference: str
        """

        self._payment_method_reference = payment_method_reference

    @property
    def reconciled(self):
        """Gets the reconciled of this Payment.

        Payment has been reconciled

        :return: The reconciled of this Payment.
        :rtype: bool
        """
        return self._reconciled

    @reconciled.setter
    def reconciled(self, reconciled):
        """Sets the reconciled of this Payment.

        Payment has been reconciled

        :param reconciled: The reconciled of this Payment.
        :type reconciled: bool
        """

        self._reconciled = reconciled

    @property
    def reference(self):
        """Gets the reference of this Payment.

        Optional payment reference message ie: Debit remittance detail.

        :return: The reference of this Payment.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Payment.

        Optional payment reference message ie: Debit remittance detail.

        :param reference: The reference of this Payment.
        :type reference: str
        """

        self._reference = reference

    @property
    def row_version(self):
        """Gets the row_version of this Payment.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this Payment.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this Payment.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this Payment.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def status(self):
        """Gets the status of this Payment.

        Status of payment

        :return: The status of this Payment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.

        Status of payment

        :param status: The status of this Payment.
        :type status: str
        """
        allowed_values = ["authorised", "paid", "voided", "deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supplier(self):
        """Gets the supplier of this Payment.


        :return: The supplier of this Payment.
        :rtype: LinkedSupplier
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this Payment.


        :param supplier: The supplier of this Payment.
        :type supplier: LinkedSupplier
        """

        self._supplier = supplier

    @property
    def total_amount(self):
        """Gets the total_amount of this Payment.

        Amount of payment

        :return: The total_amount of this Payment.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Payment.

        Amount of payment

        :param total_amount: The total_amount of this Payment.
        :type total_amount: float
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")

        self._total_amount = total_amount

    @property
    def transaction_date(self):
        """Gets the transaction_date of this Payment.

        Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD

        :return: The transaction_date of this Payment.
        :rtype: datetime
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this Payment.

        Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD

        :param transaction_date: The transaction_date of this Payment.
        :type transaction_date: datetime
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")

        self._transaction_date = transaction_date

    @property
    def type(self):
        """Gets the type of this Payment.

        Type of payment

        :return: The type of this Payment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Payment.

        Type of payment

        :param type: The type of this Payment.
        :type type: str
        """
        allowed_values = ["accounts_receivable", "accounts_payable", "accounts_receivable_credit", "accounts_payable_credit", "accounts_receivable_overpayment", "accounts_payable_overpayment", "accounts_receivable_prepayment", "accounts_payable_prepayment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Payment.

        The date and time when the object was last updated.

        :return: The updated_at of this Payment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Payment.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Payment.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Payment.

        The user who last updated the object.

        :return: The updated_by of this Payment.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Payment.

        The user who last updated the object.

        :param updated_by: The updated_by of this Payment.
        :type updated_by: str
        """

        self._updated_by = updated_by
