# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balance_sheet_assets_current_assets_accounts_inner import BalanceSheetAssetsCurrentAssetsAccountsInner
from openapi_server import util


class BalanceSheetAssetsCurrentAssets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: List[BalanceSheetAssetsCurrentAssetsAccountsInner]=None, total: float=None):
        """BalanceSheetAssetsCurrentAssets - a model defined in OpenAPI

        :param accounts: The accounts of this BalanceSheetAssetsCurrentAssets.
        :param total: The total of this BalanceSheetAssetsCurrentAssets.
        """
        self.openapi_types = {
            'accounts': List[BalanceSheetAssetsCurrentAssetsAccountsInner],
            'total': float
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'total': 'total'
        }

        self._accounts = accounts
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BalanceSheetAssetsCurrentAssets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BalanceSheet_assets_current_assets of this BalanceSheetAssetsCurrentAssets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this BalanceSheetAssetsCurrentAssets.


        :return: The accounts of this BalanceSheetAssetsCurrentAssets.
        :rtype: List[BalanceSheetAssetsCurrentAssetsAccountsInner]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this BalanceSheetAssetsCurrentAssets.


        :param accounts: The accounts of this BalanceSheetAssetsCurrentAssets.
        :type accounts: List[BalanceSheetAssetsCurrentAssetsAccountsInner]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")

        self._accounts = accounts

    @property
    def total(self):
        """Gets the total of this BalanceSheetAssetsCurrentAssets.

        Total current assets

        :return: The total of this BalanceSheetAssetsCurrentAssets.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BalanceSheetAssetsCurrentAssets.

        Total current assets

        :param total: The total of this BalanceSheetAssetsCurrentAssets.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
