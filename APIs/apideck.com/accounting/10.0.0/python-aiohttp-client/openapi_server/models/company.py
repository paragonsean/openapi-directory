# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.company_row_type import CompanyRowType
from openapi_server.models.currency import Currency
from openapi_server.models.custom_field import CustomField
from openapi_server.models.email import Email
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.social_link import SocialLink
from openapi_server.models.website import Website
from openapi_server import util


class Company(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abn_branch: str=None, abn_or_tfn: str=None, acn: str=None, addresses: List[Address]=None, annual_revenue: str=None, bank_accounts: List[BankAccount]=None, birthday: date=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, custom_fields: List[CustomField]=None, custom_mappings: object=None, deleted: bool=None, description: str=None, emails: List[Email]=None, fax: str=None, first_name: str=None, id: str=None, image: str=None, industry: str=None, interaction_count: int=None, last_activity_at: datetime=None, last_name: str=None, name: str=None, number_of_employees: str=None, owner_id: str=None, ownership: str=None, parent_id: str=None, payee_number: str=None, phone_numbers: List[PhoneNumber]=None, read_only: bool=None, row_type: CompanyRowType=None, sales_tax_number: str=None, salutation: str=None, social_links: List[SocialLink]=None, status: str=None, tags: List[str]=None, updated_at: datetime=None, updated_by: str=None, vat_number: str=None, websites: List[Website]=None):
        """Company - a model defined in OpenAPI

        :param abn_branch: The abn_branch of this Company.
        :param abn_or_tfn: The abn_or_tfn of this Company.
        :param acn: The acn of this Company.
        :param addresses: The addresses of this Company.
        :param annual_revenue: The annual_revenue of this Company.
        :param bank_accounts: The bank_accounts of this Company.
        :param birthday: The birthday of this Company.
        :param created_at: The created_at of this Company.
        :param created_by: The created_by of this Company.
        :param currency: The currency of this Company.
        :param custom_fields: The custom_fields of this Company.
        :param custom_mappings: The custom_mappings of this Company.
        :param deleted: The deleted of this Company.
        :param description: The description of this Company.
        :param emails: The emails of this Company.
        :param fax: The fax of this Company.
        :param first_name: The first_name of this Company.
        :param id: The id of this Company.
        :param image: The image of this Company.
        :param industry: The industry of this Company.
        :param interaction_count: The interaction_count of this Company.
        :param last_activity_at: The last_activity_at of this Company.
        :param last_name: The last_name of this Company.
        :param name: The name of this Company.
        :param number_of_employees: The number_of_employees of this Company.
        :param owner_id: The owner_id of this Company.
        :param ownership: The ownership of this Company.
        :param parent_id: The parent_id of this Company.
        :param payee_number: The payee_number of this Company.
        :param phone_numbers: The phone_numbers of this Company.
        :param read_only: The read_only of this Company.
        :param row_type: The row_type of this Company.
        :param sales_tax_number: The sales_tax_number of this Company.
        :param salutation: The salutation of this Company.
        :param social_links: The social_links of this Company.
        :param status: The status of this Company.
        :param tags: The tags of this Company.
        :param updated_at: The updated_at of this Company.
        :param updated_by: The updated_by of this Company.
        :param vat_number: The vat_number of this Company.
        :param websites: The websites of this Company.
        """
        self.openapi_types = {
            'abn_branch': str,
            'abn_or_tfn': str,
            'acn': str,
            'addresses': List[Address],
            'annual_revenue': str,
            'bank_accounts': List[BankAccount],
            'birthday': date,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'custom_fields': List[CustomField],
            'custom_mappings': object,
            'deleted': bool,
            'description': str,
            'emails': List[Email],
            'fax': str,
            'first_name': str,
            'id': str,
            'image': str,
            'industry': str,
            'interaction_count': int,
            'last_activity_at': datetime,
            'last_name': str,
            'name': str,
            'number_of_employees': str,
            'owner_id': str,
            'ownership': str,
            'parent_id': str,
            'payee_number': str,
            'phone_numbers': List[PhoneNumber],
            'read_only': bool,
            'row_type': CompanyRowType,
            'sales_tax_number': str,
            'salutation': str,
            'social_links': List[SocialLink],
            'status': str,
            'tags': List[str],
            'updated_at': datetime,
            'updated_by': str,
            'vat_number': str,
            'websites': List[Website]
        }

        self.attribute_map = {
            'abn_branch': 'abn_branch',
            'abn_or_tfn': 'abn_or_tfn',
            'acn': 'acn',
            'addresses': 'addresses',
            'annual_revenue': 'annual_revenue',
            'bank_accounts': 'bank_accounts',
            'birthday': 'birthday',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'custom_fields': 'custom_fields',
            'custom_mappings': 'custom_mappings',
            'deleted': 'deleted',
            'description': 'description',
            'emails': 'emails',
            'fax': 'fax',
            'first_name': 'first_name',
            'id': 'id',
            'image': 'image',
            'industry': 'industry',
            'interaction_count': 'interaction_count',
            'last_activity_at': 'last_activity_at',
            'last_name': 'last_name',
            'name': 'name',
            'number_of_employees': 'number_of_employees',
            'owner_id': 'owner_id',
            'ownership': 'ownership',
            'parent_id': 'parent_id',
            'payee_number': 'payee_number',
            'phone_numbers': 'phone_numbers',
            'read_only': 'read_only',
            'row_type': 'row_type',
            'sales_tax_number': 'sales_tax_number',
            'salutation': 'salutation',
            'social_links': 'social_links',
            'status': 'status',
            'tags': 'tags',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'vat_number': 'vat_number',
            'websites': 'websites'
        }

        self._abn_branch = abn_branch
        self._abn_or_tfn = abn_or_tfn
        self._acn = acn
        self._addresses = addresses
        self._annual_revenue = annual_revenue
        self._bank_accounts = bank_accounts
        self._birthday = birthday
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._custom_fields = custom_fields
        self._custom_mappings = custom_mappings
        self._deleted = deleted
        self._description = description
        self._emails = emails
        self._fax = fax
        self._first_name = first_name
        self._id = id
        self._image = image
        self._industry = industry
        self._interaction_count = interaction_count
        self._last_activity_at = last_activity_at
        self._last_name = last_name
        self._name = name
        self._number_of_employees = number_of_employees
        self._owner_id = owner_id
        self._ownership = ownership
        self._parent_id = parent_id
        self._payee_number = payee_number
        self._phone_numbers = phone_numbers
        self._read_only = read_only
        self._row_type = row_type
        self._sales_tax_number = sales_tax_number
        self._salutation = salutation
        self._social_links = social_links
        self._status = status
        self._tags = tags
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._vat_number = vat_number
        self._websites = websites

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Company':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Company of this Company.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abn_branch(self):
        """Gets the abn_branch of this Company.

        An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.

        :return: The abn_branch of this Company.
        :rtype: str
        """
        return self._abn_branch

    @abn_branch.setter
    def abn_branch(self, abn_branch):
        """Sets the abn_branch of this Company.

        An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.

        :param abn_branch: The abn_branch of this Company.
        :type abn_branch: str
        """

        self._abn_branch = abn_branch

    @property
    def abn_or_tfn(self):
        """Gets the abn_or_tfn of this Company.

        An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.

        :return: The abn_or_tfn of this Company.
        :rtype: str
        """
        return self._abn_or_tfn

    @abn_or_tfn.setter
    def abn_or_tfn(self, abn_or_tfn):
        """Sets the abn_or_tfn of this Company.

        An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.

        :param abn_or_tfn: The abn_or_tfn of this Company.
        :type abn_or_tfn: str
        """

        self._abn_or_tfn = abn_or_tfn

    @property
    def acn(self):
        """Gets the acn of this Company.

        The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.

        :return: The acn of this Company.
        :rtype: str
        """
        return self._acn

    @acn.setter
    def acn(self, acn):
        """Sets the acn of this Company.

        The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.

        :param acn: The acn of this Company.
        :type acn: str
        """

        self._acn = acn

    @property
    def addresses(self):
        """Gets the addresses of this Company.


        :return: The addresses of this Company.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Company.


        :param addresses: The addresses of this Company.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def annual_revenue(self):
        """Gets the annual_revenue of this Company.

        The annual revenue of the company

        :return: The annual_revenue of this Company.
        :rtype: str
        """
        return self._annual_revenue

    @annual_revenue.setter
    def annual_revenue(self, annual_revenue):
        """Sets the annual_revenue of this Company.

        The annual revenue of the company

        :param annual_revenue: The annual_revenue of this Company.
        :type annual_revenue: str
        """

        self._annual_revenue = annual_revenue

    @property
    def bank_accounts(self):
        """Gets the bank_accounts of this Company.


        :return: The bank_accounts of this Company.
        :rtype: List[BankAccount]
        """
        return self._bank_accounts

    @bank_accounts.setter
    def bank_accounts(self, bank_accounts):
        """Sets the bank_accounts of this Company.


        :param bank_accounts: The bank_accounts of this Company.
        :type bank_accounts: List[BankAccount]
        """

        self._bank_accounts = bank_accounts

    @property
    def birthday(self):
        """Gets the birthday of this Company.

        The date of birth of the person.

        :return: The birthday of this Company.
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this Company.

        The date of birth of the person.

        :param birthday: The birthday of this Company.
        :type birthday: date
        """

        self._birthday = birthday

    @property
    def created_at(self):
        """Gets the created_at of this Company.

        Creation date

        :return: The created_at of this Company.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Company.

        Creation date

        :param created_at: The created_at of this Company.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Company.

        Created by user ID

        :return: The created_by of this Company.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Company.

        Created by user ID

        :param created_by: The created_by of this Company.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this Company.


        :return: The currency of this Company.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Company.


        :param currency: The currency of this Company.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Company.


        :return: The custom_fields of this Company.
        :rtype: List[CustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Company.


        :param custom_fields: The custom_fields of this Company.
        :type custom_fields: List[CustomField]
        """

        self._custom_fields = custom_fields

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Company.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Company.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Company.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Company.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def deleted(self):
        """Gets the deleted of this Company.

        Whether the company is deleted or not

        :return: The deleted of this Company.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Company.

        Whether the company is deleted or not

        :param deleted: The deleted of this Company.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Company.

        A description of the company

        :return: The description of this Company.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Company.

        A description of the company

        :param description: The description of this Company.
        :type description: str
        """

        self._description = description

    @property
    def emails(self):
        """Gets the emails of this Company.


        :return: The emails of this Company.
        :rtype: List[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Company.


        :param emails: The emails of this Company.
        :type emails: List[Email]
        """

        self._emails = emails

    @property
    def fax(self):
        """Gets the fax of this Company.

        The fax number of the company

        :return: The fax of this Company.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Company.

        The fax number of the company

        :param fax: The fax of this Company.
        :type fax: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this Company.

        The first name of the person.

        :return: The first_name of this Company.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Company.

        The first name of the person.

        :param first_name: The first_name of this Company.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Company.

        Unique identifier for the company

        :return: The id of this Company.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Company.

        Unique identifier for the company

        :param id: The id of this Company.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Company.

        The Image URL of the company

        :return: The image of this Company.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Company.

        The Image URL of the company

        :param image: The image of this Company.
        :type image: str
        """

        self._image = image

    @property
    def industry(self):
        """Gets the industry of this Company.

        The industry represents the type of business the company is in.

        :return: The industry of this Company.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this Company.

        The industry represents the type of business the company is in.

        :param industry: The industry of this Company.
        :type industry: str
        """

        self._industry = industry

    @property
    def interaction_count(self):
        """Gets the interaction_count of this Company.

        Number of interactions

        :return: The interaction_count of this Company.
        :rtype: int
        """
        return self._interaction_count

    @interaction_count.setter
    def interaction_count(self, interaction_count):
        """Sets the interaction_count of this Company.

        Number of interactions

        :param interaction_count: The interaction_count of this Company.
        :type interaction_count: int
        """

        self._interaction_count = interaction_count

    @property
    def last_activity_at(self):
        """Gets the last_activity_at of this Company.

        Last activity date

        :return: The last_activity_at of this Company.
        :rtype: datetime
        """
        return self._last_activity_at

    @last_activity_at.setter
    def last_activity_at(self, last_activity_at):
        """Sets the last_activity_at of this Company.

        Last activity date

        :param last_activity_at: The last_activity_at of this Company.
        :type last_activity_at: datetime
        """

        self._last_activity_at = last_activity_at

    @property
    def last_name(self):
        """Gets the last_name of this Company.

        The last name of the person.

        :return: The last_name of this Company.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Company.

        The last name of the person.

        :param last_name: The last_name of this Company.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this Company.

        Name of the company

        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        Name of the company

        :param name: The name of this Company.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this Company.

        Number of employees

        :return: The number_of_employees of this Company.
        :rtype: str
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this Company.

        Number of employees

        :param number_of_employees: The number_of_employees of this Company.
        :type number_of_employees: str
        """

        self._number_of_employees = number_of_employees

    @property
    def owner_id(self):
        """Gets the owner_id of this Company.

        Owner ID

        :return: The owner_id of this Company.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Company.

        Owner ID

        :param owner_id: The owner_id of this Company.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def ownership(self):
        """Gets the ownership of this Company.

        The ownership indicates the type of ownership of the company.

        :return: The ownership of this Company.
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this Company.

        The ownership indicates the type of ownership of the company.

        :param ownership: The ownership of this Company.
        :type ownership: str
        """

        self._ownership = ownership

    @property
    def parent_id(self):
        """Gets the parent_id of this Company.

        Parent ID

        :return: The parent_id of this Company.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Company.

        Parent ID

        :param parent_id: The parent_id of this Company.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def payee_number(self):
        """Gets the payee_number of this Company.

        A payee number is a unique number that identifies a payee for tax purposes.

        :return: The payee_number of this Company.
        :rtype: str
        """
        return self._payee_number

    @payee_number.setter
    def payee_number(self, payee_number):
        """Sets the payee_number of this Company.

        A payee number is a unique number that identifies a payee for tax purposes.

        :param payee_number: The payee_number of this Company.
        :type payee_number: str
        """

        self._payee_number = payee_number

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Company.


        :return: The phone_numbers of this Company.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Company.


        :param phone_numbers: The phone_numbers of this Company.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def read_only(self):
        """Gets the read_only of this Company.

        Whether the company is read-only or not

        :return: The read_only of this Company.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Company.

        Whether the company is read-only or not

        :param read_only: The read_only of this Company.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def row_type(self):
        """Gets the row_type of this Company.


        :return: The row_type of this Company.
        :rtype: CompanyRowType
        """
        return self._row_type

    @row_type.setter
    def row_type(self, row_type):
        """Sets the row_type of this Company.


        :param row_type: The row_type of this Company.
        :type row_type: CompanyRowType
        """

        self._row_type = row_type

    @property
    def sales_tax_number(self):
        """Gets the sales_tax_number of this Company.

        A sales tax number is a unique number that identifies a company for tax purposes.

        :return: The sales_tax_number of this Company.
        :rtype: str
        """
        return self._sales_tax_number

    @sales_tax_number.setter
    def sales_tax_number(self, sales_tax_number):
        """Sets the sales_tax_number of this Company.

        A sales tax number is a unique number that identifies a company for tax purposes.

        :param sales_tax_number: The sales_tax_number of this Company.
        :type sales_tax_number: str
        """

        self._sales_tax_number = sales_tax_number

    @property
    def salutation(self):
        """Gets the salutation of this Company.

        A formal salutation for the person. For example, 'Mr', 'Mrs'

        :return: The salutation of this Company.
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this Company.

        A formal salutation for the person. For example, 'Mr', 'Mrs'

        :param salutation: The salutation of this Company.
        :type salutation: str
        """

        self._salutation = salutation

    @property
    def social_links(self):
        """Gets the social_links of this Company.


        :return: The social_links of this Company.
        :rtype: List[SocialLink]
        """
        return self._social_links

    @social_links.setter
    def social_links(self, social_links):
        """Sets the social_links of this Company.


        :param social_links: The social_links of this Company.
        :type social_links: List[SocialLink]
        """

        self._social_links = social_links

    @property
    def status(self):
        """Gets the status of this Company.

        The status of the company

        :return: The status of this Company.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Company.

        The status of the company

        :param status: The status of this Company.
        :type status: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Company.


        :return: The tags of this Company.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Company.


        :param tags: The tags of this Company.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def updated_at(self):
        """Gets the updated_at of this Company.

        Last updated date

        :return: The updated_at of this Company.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Company.

        Last updated date

        :param updated_at: The updated_at of this Company.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Company.

        Updated by user ID

        :return: The updated_by of this Company.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Company.

        Updated by user ID

        :param updated_by: The updated_by of this Company.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def vat_number(self):
        """Gets the vat_number of this Company.

        The VAT number of the company

        :return: The vat_number of this Company.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this Company.

        The VAT number of the company

        :param vat_number: The vat_number of this Company.
        :type vat_number: str
        """

        self._vat_number = vat_number

    @property
    def websites(self):
        """Gets the websites of this Company.


        :return: The websites of this Company.
        :rtype: List[Website]
        """
        return self._websites

    @websites.setter
    def websites(self, websites):
        """Sets the websites of this Company.


        :param websites: The websites of this Company.
        :type websites: List[Website]
        """

        self._websites = websites
