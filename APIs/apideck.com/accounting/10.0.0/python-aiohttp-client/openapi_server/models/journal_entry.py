# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.journal_entry_line_item import JournalEntryLineItem
from openapi_server import util


class JournalEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, created_by: str=None, currency: Currency=None, currency_rate: float=None, custom_mappings: object=None, id: str=None, journal_symbol: str=None, line_items: List[JournalEntryLineItem]=None, memo: str=None, number: str=None, posted_at: datetime=None, row_version: str=None, tax_code: str=None, tax_type: str=None, title: str=None, updated_at: datetime=None, updated_by: str=None):
        """JournalEntry - a model defined in OpenAPI

        :param created_at: The created_at of this JournalEntry.
        :param created_by: The created_by of this JournalEntry.
        :param currency: The currency of this JournalEntry.
        :param currency_rate: The currency_rate of this JournalEntry.
        :param custom_mappings: The custom_mappings of this JournalEntry.
        :param id: The id of this JournalEntry.
        :param journal_symbol: The journal_symbol of this JournalEntry.
        :param line_items: The line_items of this JournalEntry.
        :param memo: The memo of this JournalEntry.
        :param number: The number of this JournalEntry.
        :param posted_at: The posted_at of this JournalEntry.
        :param row_version: The row_version of this JournalEntry.
        :param tax_code: The tax_code of this JournalEntry.
        :param tax_type: The tax_type of this JournalEntry.
        :param title: The title of this JournalEntry.
        :param updated_at: The updated_at of this JournalEntry.
        :param updated_by: The updated_by of this JournalEntry.
        """
        self.openapi_types = {
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'currency_rate': float,
            'custom_mappings': object,
            'id': str,
            'journal_symbol': str,
            'line_items': List[JournalEntryLineItem],
            'memo': str,
            'number': str,
            'posted_at': datetime,
            'row_version': str,
            'tax_code': str,
            'tax_type': str,
            'title': str,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'currency_rate': 'currency_rate',
            'custom_mappings': 'custom_mappings',
            'id': 'id',
            'journal_symbol': 'journal_symbol',
            'line_items': 'line_items',
            'memo': 'memo',
            'number': 'number',
            'posted_at': 'posted_at',
            'row_version': 'row_version',
            'tax_code': 'tax_code',
            'tax_type': 'tax_type',
            'title': 'title',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._currency_rate = currency_rate
        self._custom_mappings = custom_mappings
        self._id = id
        self._journal_symbol = journal_symbol
        self._line_items = line_items
        self._memo = memo
        self._number = number
        self._posted_at = posted_at
        self._row_version = row_version
        self._tax_code = tax_code
        self._tax_type = tax_type
        self._title = title
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JournalEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JournalEntry of this JournalEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this JournalEntry.

        The date and time when the object was created.

        :return: The created_at of this JournalEntry.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this JournalEntry.

        The date and time when the object was created.

        :param created_at: The created_at of this JournalEntry.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this JournalEntry.

        The user who created the object.

        :return: The created_by of this JournalEntry.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this JournalEntry.

        The user who created the object.

        :param created_by: The created_by of this JournalEntry.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this JournalEntry.


        :return: The currency of this JournalEntry.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this JournalEntry.


        :param currency: The currency of this JournalEntry.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def currency_rate(self):
        """Gets the currency_rate of this JournalEntry.

        Currency Exchange Rate at the time entity was recorded/generated.

        :return: The currency_rate of this JournalEntry.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this JournalEntry.

        Currency Exchange Rate at the time entity was recorded/generated.

        :param currency_rate: The currency_rate of this JournalEntry.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this JournalEntry.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this JournalEntry.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this JournalEntry.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this JournalEntry.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def id(self):
        """Gets the id of this JournalEntry.

        A unique identifier for an object.

        :return: The id of this JournalEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JournalEntry.

        A unique identifier for an object.

        :param id: The id of this JournalEntry.
        :type id: str
        """

        self._id = id

    @property
    def journal_symbol(self):
        """Gets the journal_symbol of this JournalEntry.

        Journal symbol of the entry. For example IND for indirect costs

        :return: The journal_symbol of this JournalEntry.
        :rtype: str
        """
        return self._journal_symbol

    @journal_symbol.setter
    def journal_symbol(self, journal_symbol):
        """Sets the journal_symbol of this JournalEntry.

        Journal symbol of the entry. For example IND for indirect costs

        :param journal_symbol: The journal_symbol of this JournalEntry.
        :type journal_symbol: str
        """

        self._journal_symbol = journal_symbol

    @property
    def line_items(self):
        """Gets the line_items of this JournalEntry.

        Requires a minimum of 2 line items that sum to 0

        :return: The line_items of this JournalEntry.
        :rtype: List[JournalEntryLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this JournalEntry.

        Requires a minimum of 2 line items that sum to 0

        :param line_items: The line_items of this JournalEntry.
        :type line_items: List[JournalEntryLineItem]
        """
        if line_items is not None and len(line_items) < 2:
            raise ValueError("Invalid value for `line_items`, number of items must be greater than or equal to `2`")

        self._line_items = line_items

    @property
    def memo(self):
        """Gets the memo of this JournalEntry.

        Reference for the journal entry.

        :return: The memo of this JournalEntry.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this JournalEntry.

        Reference for the journal entry.

        :param memo: The memo of this JournalEntry.
        :type memo: str
        """

        self._memo = memo

    @property
    def number(self):
        """Gets the number of this JournalEntry.

        Journal entry number.

        :return: The number of this JournalEntry.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this JournalEntry.

        Journal entry number.

        :param number: The number of this JournalEntry.
        :type number: str
        """

        self._number = number

    @property
    def posted_at(self):
        """Gets the posted_at of this JournalEntry.

        This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.

        :return: The posted_at of this JournalEntry.
        :rtype: datetime
        """
        return self._posted_at

    @posted_at.setter
    def posted_at(self, posted_at):
        """Sets the posted_at of this JournalEntry.

        This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.

        :param posted_at: The posted_at of this JournalEntry.
        :type posted_at: datetime
        """

        self._posted_at = posted_at

    @property
    def row_version(self):
        """Gets the row_version of this JournalEntry.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this JournalEntry.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this JournalEntry.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this JournalEntry.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def tax_code(self):
        """Gets the tax_code of this JournalEntry.

        Applicable tax id/code override if tax is not supplied on a line item basis.

        :return: The tax_code of this JournalEntry.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this JournalEntry.

        Applicable tax id/code override if tax is not supplied on a line item basis.

        :param tax_code: The tax_code of this JournalEntry.
        :type tax_code: str
        """

        self._tax_code = tax_code

    @property
    def tax_type(self):
        """Gets the tax_type of this JournalEntry.

        The specific category of tax associated with a transaction like sales or purchase

        :return: The tax_type of this JournalEntry.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this JournalEntry.

        The specific category of tax associated with a transaction like sales or purchase

        :param tax_type: The tax_type of this JournalEntry.
        :type tax_type: str
        """

        self._tax_type = tax_type

    @property
    def title(self):
        """Gets the title of this JournalEntry.

        Journal entry title

        :return: The title of this JournalEntry.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this JournalEntry.

        Journal entry title

        :param title: The title of this JournalEntry.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this JournalEntry.

        The date and time when the object was last updated.

        :return: The updated_at of this JournalEntry.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this JournalEntry.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this JournalEntry.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this JournalEntry.

        The user who last updated the object.

        :return: The updated_by of this JournalEntry.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this JournalEntry.

        The user who last updated the object.

        :param updated_by: The updated_by of this JournalEntry.
        :type updated_by: str
        """

        self._updated_by = updated_by
