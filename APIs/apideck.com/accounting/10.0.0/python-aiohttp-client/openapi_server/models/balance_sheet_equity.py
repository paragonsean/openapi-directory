# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balance_sheet_equity_items_inner import BalanceSheetEquityItemsInner
from openapi_server import util


class BalanceSheetEquity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[BalanceSheetEquityItemsInner]=None, total: float=None):
        """BalanceSheetEquity - a model defined in OpenAPI

        :param items: The items of this BalanceSheetEquity.
        :param total: The total of this BalanceSheetEquity.
        """
        self.openapi_types = {
            'items': List[BalanceSheetEquityItemsInner],
            'total': float
        }

        self.attribute_map = {
            'items': 'items',
            'total': 'total'
        }

        self._items = items
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BalanceSheetEquity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BalanceSheet_equity of this BalanceSheetEquity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this BalanceSheetEquity.


        :return: The items of this BalanceSheetEquity.
        :rtype: List[BalanceSheetEquityItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BalanceSheetEquity.


        :param items: The items of this BalanceSheetEquity.
        :type items: List[BalanceSheetEquityItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def total(self):
        """Gets the total of this BalanceSheetEquity.

        Total equity

        :return: The total of this BalanceSheetEquity.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BalanceSheetEquity.

        Total equity

        :param total: The total of this BalanceSheetEquity.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
