# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentAllocationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, code: str=None, id: str=None, type: str=None):
        """PaymentAllocationsInner - a model defined in OpenAPI

        :param amount: The amount of this PaymentAllocationsInner.
        :param code: The code of this PaymentAllocationsInner.
        :param id: The id of this PaymentAllocationsInner.
        :param type: The type of this PaymentAllocationsInner.
        """
        self.openapi_types = {
            'amount': float,
            'code': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'code': 'code',
            'id': 'id',
            'type': 'type'
        }

        self._amount = amount
        self._code = code
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentAllocationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment_allocations_inner of this PaymentAllocationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PaymentAllocationsInner.

        Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.

        :return: The amount of this PaymentAllocationsInner.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentAllocationsInner.

        Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.

        :param amount: The amount of this PaymentAllocationsInner.
        :type amount: float
        """

        self._amount = amount

    @property
    def code(self):
        """Gets the code of this PaymentAllocationsInner.


        :return: The code of this PaymentAllocationsInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PaymentAllocationsInner.


        :param code: The code of this PaymentAllocationsInner.
        :type code: str
        """

        self._code = code

    @property
    def id(self):
        """Gets the id of this PaymentAllocationsInner.

        Unique identifier of entity this payment should be attributed to.

        :return: The id of this PaymentAllocationsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentAllocationsInner.

        Unique identifier of entity this payment should be attributed to.

        :param id: The id of this PaymentAllocationsInner.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this PaymentAllocationsInner.

        Type of entity this payment should be attributed to.

        :return: The type of this PaymentAllocationsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentAllocationsInner.

        Type of entity this payment should be attributed to.

        :param type: The type of this PaymentAllocationsInner.
        :type type: str
        """
        allowed_values = ["invoice", "order", "expense", "credit_memo", "over_payment", "pre_payment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
