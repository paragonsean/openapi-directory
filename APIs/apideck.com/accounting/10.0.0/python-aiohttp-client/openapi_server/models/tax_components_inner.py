# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxComponentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compound: bool=None, id: str=None, name: str=None, rate: float=None):
        """TaxComponentsInner - a model defined in OpenAPI

        :param compound: The compound of this TaxComponentsInner.
        :param id: The id of this TaxComponentsInner.
        :param name: The name of this TaxComponentsInner.
        :param rate: The rate of this TaxComponentsInner.
        """
        self.openapi_types = {
            'compound': bool,
            'id': str,
            'name': str,
            'rate': float
        }

        self.attribute_map = {
            'compound': 'compound',
            'id': 'id',
            'name': 'name',
            'rate': 'rate'
        }

        self._compound = compound
        self._id = id
        self._name = name
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxComponentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tax_components_inner of this TaxComponentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compound(self):
        """Gets the compound of this TaxComponentsInner.


        :return: The compound of this TaxComponentsInner.
        :rtype: bool
        """
        return self._compound

    @compound.setter
    def compound(self, compound):
        """Sets the compound of this TaxComponentsInner.


        :param compound: The compound of this TaxComponentsInner.
        :type compound: bool
        """

        self._compound = compound

    @property
    def id(self):
        """Gets the id of this TaxComponentsInner.


        :return: The id of this TaxComponentsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxComponentsInner.


        :param id: The id of this TaxComponentsInner.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TaxComponentsInner.


        :return: The name of this TaxComponentsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxComponentsInner.


        :param name: The name of this TaxComponentsInner.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this TaxComponentsInner.


        :return: The rate of this TaxComponentsInner.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this TaxComponentsInner.


        :param rate: The rate of this TaxComponentsInner.
        :type rate: float
        """

        self._rate = rate
