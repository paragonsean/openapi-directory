# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxRatesFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: bool=None, equity: bool=None, expenses: bool=None, liabilities: bool=None, revenue: bool=None):
        """TaxRatesFilter - a model defined in OpenAPI

        :param assets: The assets of this TaxRatesFilter.
        :param equity: The equity of this TaxRatesFilter.
        :param expenses: The expenses of this TaxRatesFilter.
        :param liabilities: The liabilities of this TaxRatesFilter.
        :param revenue: The revenue of this TaxRatesFilter.
        """
        self.openapi_types = {
            'assets': bool,
            'equity': bool,
            'expenses': bool,
            'liabilities': bool,
            'revenue': bool
        }

        self.attribute_map = {
            'assets': 'assets',
            'equity': 'equity',
            'expenses': 'expenses',
            'liabilities': 'liabilities',
            'revenue': 'revenue'
        }

        self._assets = assets
        self._equity = equity
        self._expenses = expenses
        self._liabilities = liabilities
        self._revenue = revenue

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxRatesFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxRatesFilter of this TaxRatesFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for asset accounts

        :return: The assets of this TaxRatesFilter.
        :rtype: bool
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for asset accounts

        :param assets: The assets of this TaxRatesFilter.
        :type assets: bool
        """

        self._assets = assets

    @property
    def equity(self):
        """Gets the equity of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for equity accounts

        :return: The equity of this TaxRatesFilter.
        :rtype: bool
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for equity accounts

        :param equity: The equity of this TaxRatesFilter.
        :type equity: bool
        """

        self._equity = equity

    @property
    def expenses(self):
        """Gets the expenses of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for expense accounts

        :return: The expenses of this TaxRatesFilter.
        :rtype: bool
        """
        return self._expenses

    @expenses.setter
    def expenses(self, expenses):
        """Sets the expenses of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for expense accounts

        :param expenses: The expenses of this TaxRatesFilter.
        :type expenses: bool
        """

        self._expenses = expenses

    @property
    def liabilities(self):
        """Gets the liabilities of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for liability accounts

        :return: The liabilities of this TaxRatesFilter.
        :rtype: bool
        """
        return self._liabilities

    @liabilities.setter
    def liabilities(self, liabilities):
        """Sets the liabilities of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for liability accounts

        :param liabilities: The liabilities of this TaxRatesFilter.
        :type liabilities: bool
        """

        self._liabilities = liabilities

    @property
    def revenue(self):
        """Gets the revenue of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for revenue accounts

        :return: The revenue of this TaxRatesFilter.
        :rtype: bool
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this TaxRatesFilter.

        Boolean to describe if tax rate can be used for revenue accounts

        :param revenue: The revenue of this TaxRatesFilter.
        :type revenue: bool
        """

        self._revenue = revenue
