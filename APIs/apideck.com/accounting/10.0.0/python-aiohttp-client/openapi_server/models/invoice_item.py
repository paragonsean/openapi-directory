# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_item_purchase_details import InvoiceItemPurchaseDetails
from openapi_server.models.linked_ledger_account import LinkedLedgerAccount
from openapi_server.models.linked_tracking_category import LinkedTrackingCategory
from openapi_server import util


class InvoiceItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, asset_account: LinkedLedgerAccount=None, code: str=None, created_at: datetime=None, created_by: str=None, custom_mappings: object=None, description: str=None, expense_account: LinkedLedgerAccount=None, id: str=None, income_account: LinkedLedgerAccount=None, inventory_date: date=None, name: str=None, purchase_details: InvoiceItemPurchaseDetails=None, purchased: bool=None, quantity: float=None, row_version: str=None, sales_details: InvoiceItemPurchaseDetails=None, sold: bool=None, taxable: bool=None, tracked: bool=None, tracking_category: LinkedTrackingCategory=None, type: str=None, unit_price: float=None, updated_at: datetime=None, updated_by: str=None):
        """InvoiceItem - a model defined in OpenAPI

        :param active: The active of this InvoiceItem.
        :param asset_account: The asset_account of this InvoiceItem.
        :param code: The code of this InvoiceItem.
        :param created_at: The created_at of this InvoiceItem.
        :param created_by: The created_by of this InvoiceItem.
        :param custom_mappings: The custom_mappings of this InvoiceItem.
        :param description: The description of this InvoiceItem.
        :param expense_account: The expense_account of this InvoiceItem.
        :param id: The id of this InvoiceItem.
        :param income_account: The income_account of this InvoiceItem.
        :param inventory_date: The inventory_date of this InvoiceItem.
        :param name: The name of this InvoiceItem.
        :param purchase_details: The purchase_details of this InvoiceItem.
        :param purchased: The purchased of this InvoiceItem.
        :param quantity: The quantity of this InvoiceItem.
        :param row_version: The row_version of this InvoiceItem.
        :param sales_details: The sales_details of this InvoiceItem.
        :param sold: The sold of this InvoiceItem.
        :param taxable: The taxable of this InvoiceItem.
        :param tracked: The tracked of this InvoiceItem.
        :param tracking_category: The tracking_category of this InvoiceItem.
        :param type: The type of this InvoiceItem.
        :param unit_price: The unit_price of this InvoiceItem.
        :param updated_at: The updated_at of this InvoiceItem.
        :param updated_by: The updated_by of this InvoiceItem.
        """
        self.openapi_types = {
            'active': bool,
            'asset_account': LinkedLedgerAccount,
            'code': str,
            'created_at': datetime,
            'created_by': str,
            'custom_mappings': object,
            'description': str,
            'expense_account': LinkedLedgerAccount,
            'id': str,
            'income_account': LinkedLedgerAccount,
            'inventory_date': date,
            'name': str,
            'purchase_details': InvoiceItemPurchaseDetails,
            'purchased': bool,
            'quantity': float,
            'row_version': str,
            'sales_details': InvoiceItemPurchaseDetails,
            'sold': bool,
            'taxable': bool,
            'tracked': bool,
            'tracking_category': LinkedTrackingCategory,
            'type': str,
            'unit_price': float,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'active': 'active',
            'asset_account': 'asset_account',
            'code': 'code',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_mappings': 'custom_mappings',
            'description': 'description',
            'expense_account': 'expense_account',
            'id': 'id',
            'income_account': 'income_account',
            'inventory_date': 'inventory_date',
            'name': 'name',
            'purchase_details': 'purchase_details',
            'purchased': 'purchased',
            'quantity': 'quantity',
            'row_version': 'row_version',
            'sales_details': 'sales_details',
            'sold': 'sold',
            'taxable': 'taxable',
            'tracked': 'tracked',
            'tracking_category': 'tracking_category',
            'type': 'type',
            'unit_price': 'unit_price',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._active = active
        self._asset_account = asset_account
        self._code = code
        self._created_at = created_at
        self._created_by = created_by
        self._custom_mappings = custom_mappings
        self._description = description
        self._expense_account = expense_account
        self._id = id
        self._income_account = income_account
        self._inventory_date = inventory_date
        self._name = name
        self._purchase_details = purchase_details
        self._purchased = purchased
        self._quantity = quantity
        self._row_version = row_version
        self._sales_details = sales_details
        self._sold = sold
        self._taxable = taxable
        self._tracked = tracked
        self._tracking_category = tracking_category
        self._type = type
        self._unit_price = unit_price
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceItem of this InvoiceItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this InvoiceItem.


        :return: The active of this InvoiceItem.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InvoiceItem.


        :param active: The active of this InvoiceItem.
        :type active: bool
        """

        self._active = active

    @property
    def asset_account(self):
        """Gets the asset_account of this InvoiceItem.


        :return: The asset_account of this InvoiceItem.
        :rtype: LinkedLedgerAccount
        """
        return self._asset_account

    @asset_account.setter
    def asset_account(self, asset_account):
        """Sets the asset_account of this InvoiceItem.


        :param asset_account: The asset_account of this InvoiceItem.
        :type asset_account: LinkedLedgerAccount
        """

        self._asset_account = asset_account

    @property
    def code(self):
        """Gets the code of this InvoiceItem.

        User defined item code

        :return: The code of this InvoiceItem.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InvoiceItem.

        User defined item code

        :param code: The code of this InvoiceItem.
        :type code: str
        """

        self._code = code

    @property
    def created_at(self):
        """Gets the created_at of this InvoiceItem.

        The date and time when the object was created.

        :return: The created_at of this InvoiceItem.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InvoiceItem.

        The date and time when the object was created.

        :param created_at: The created_at of this InvoiceItem.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this InvoiceItem.

        The user who created the object.

        :return: The created_by of this InvoiceItem.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this InvoiceItem.

        The user who created the object.

        :param created_by: The created_by of this InvoiceItem.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this InvoiceItem.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this InvoiceItem.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this InvoiceItem.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this InvoiceItem.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def description(self):
        """Gets the description of this InvoiceItem.

        A short description of the item

        :return: The description of this InvoiceItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceItem.

        A short description of the item

        :param description: The description of this InvoiceItem.
        :type description: str
        """

        self._description = description

    @property
    def expense_account(self):
        """Gets the expense_account of this InvoiceItem.


        :return: The expense_account of this InvoiceItem.
        :rtype: LinkedLedgerAccount
        """
        return self._expense_account

    @expense_account.setter
    def expense_account(self, expense_account):
        """Sets the expense_account of this InvoiceItem.


        :param expense_account: The expense_account of this InvoiceItem.
        :type expense_account: LinkedLedgerAccount
        """

        self._expense_account = expense_account

    @property
    def id(self):
        """Gets the id of this InvoiceItem.

        The ID of the item.

        :return: The id of this InvoiceItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceItem.

        The ID of the item.

        :param id: The id of this InvoiceItem.
        :type id: str
        """

        self._id = id

    @property
    def income_account(self):
        """Gets the income_account of this InvoiceItem.


        :return: The income_account of this InvoiceItem.
        :rtype: LinkedLedgerAccount
        """
        return self._income_account

    @income_account.setter
    def income_account(self, income_account):
        """Sets the income_account of this InvoiceItem.


        :param income_account: The income_account of this InvoiceItem.
        :type income_account: LinkedLedgerAccount
        """

        self._income_account = income_account

    @property
    def inventory_date(self):
        """Gets the inventory_date of this InvoiceItem.

        The date of opening balance if inventory item is tracked - YYYY-MM-DD.

        :return: The inventory_date of this InvoiceItem.
        :rtype: date
        """
        return self._inventory_date

    @inventory_date.setter
    def inventory_date(self, inventory_date):
        """Sets the inventory_date of this InvoiceItem.

        The date of opening balance if inventory item is tracked - YYYY-MM-DD.

        :param inventory_date: The inventory_date of this InvoiceItem.
        :type inventory_date: date
        """

        self._inventory_date = inventory_date

    @property
    def name(self):
        """Gets the name of this InvoiceItem.

        Item name

        :return: The name of this InvoiceItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvoiceItem.

        Item name

        :param name: The name of this InvoiceItem.
        :type name: str
        """

        self._name = name

    @property
    def purchase_details(self):
        """Gets the purchase_details of this InvoiceItem.


        :return: The purchase_details of this InvoiceItem.
        :rtype: InvoiceItemPurchaseDetails
        """
        return self._purchase_details

    @purchase_details.setter
    def purchase_details(self, purchase_details):
        """Sets the purchase_details of this InvoiceItem.


        :param purchase_details: The purchase_details of this InvoiceItem.
        :type purchase_details: InvoiceItemPurchaseDetails
        """

        self._purchase_details = purchase_details

    @property
    def purchased(self):
        """Gets the purchased of this InvoiceItem.

        Item is available for purchase transactions

        :return: The purchased of this InvoiceItem.
        :rtype: bool
        """
        return self._purchased

    @purchased.setter
    def purchased(self, purchased):
        """Sets the purchased of this InvoiceItem.

        Item is available for purchase transactions

        :param purchased: The purchased of this InvoiceItem.
        :type purchased: bool
        """

        self._purchased = purchased

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceItem.


        :return: The quantity of this InvoiceItem.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceItem.


        :param quantity: The quantity of this InvoiceItem.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def row_version(self):
        """Gets the row_version of this InvoiceItem.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this InvoiceItem.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this InvoiceItem.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this InvoiceItem.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def sales_details(self):
        """Gets the sales_details of this InvoiceItem.


        :return: The sales_details of this InvoiceItem.
        :rtype: InvoiceItemPurchaseDetails
        """
        return self._sales_details

    @sales_details.setter
    def sales_details(self, sales_details):
        """Sets the sales_details of this InvoiceItem.


        :param sales_details: The sales_details of this InvoiceItem.
        :type sales_details: InvoiceItemPurchaseDetails
        """

        self._sales_details = sales_details

    @property
    def sold(self):
        """Gets the sold of this InvoiceItem.

        Item will be available on sales transactions

        :return: The sold of this InvoiceItem.
        :rtype: bool
        """
        return self._sold

    @sold.setter
    def sold(self, sold):
        """Sets the sold of this InvoiceItem.

        Item will be available on sales transactions

        :param sold: The sold of this InvoiceItem.
        :type sold: bool
        """

        self._sold = sold

    @property
    def taxable(self):
        """Gets the taxable of this InvoiceItem.

        If true, transactions for this item are taxable

        :return: The taxable of this InvoiceItem.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this InvoiceItem.

        If true, transactions for this item are taxable

        :param taxable: The taxable of this InvoiceItem.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def tracked(self):
        """Gets the tracked of this InvoiceItem.

        Item is inventoried

        :return: The tracked of this InvoiceItem.
        :rtype: bool
        """
        return self._tracked

    @tracked.setter
    def tracked(self, tracked):
        """Sets the tracked of this InvoiceItem.

        Item is inventoried

        :param tracked: The tracked of this InvoiceItem.
        :type tracked: bool
        """

        self._tracked = tracked

    @property
    def tracking_category(self):
        """Gets the tracking_category of this InvoiceItem.


        :return: The tracking_category of this InvoiceItem.
        :rtype: LinkedTrackingCategory
        """
        return self._tracking_category

    @tracking_category.setter
    def tracking_category(self, tracking_category):
        """Sets the tracking_category of this InvoiceItem.


        :param tracking_category: The tracking_category of this InvoiceItem.
        :type tracking_category: LinkedTrackingCategory
        """

        self._tracking_category = tracking_category

    @property
    def type(self):
        """Gets the type of this InvoiceItem.

        Item type

        :return: The type of this InvoiceItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvoiceItem.

        Item type

        :param type: The type of this InvoiceItem.
        :type type: str
        """
        allowed_values = [None,"inventory", "service", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit_price(self):
        """Gets the unit_price of this InvoiceItem.


        :return: The unit_price of this InvoiceItem.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InvoiceItem.


        :param unit_price: The unit_price of this InvoiceItem.
        :type unit_price: float
        """

        self._unit_price = unit_price

    @property
    def updated_at(self):
        """Gets the updated_at of this InvoiceItem.

        The date and time when the object was last updated.

        :return: The updated_at of this InvoiceItem.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InvoiceItem.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this InvoiceItem.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this InvoiceItem.

        The user who last updated the object.

        :return: The updated_by of this InvoiceItem.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this InvoiceItem.

        The user who last updated the object.

        :param updated_by: The updated_by of this InvoiceItem.
        :type updated_by: str
        """

        self._updated_by = updated_by
