# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.categories_inner import CategoriesInner
from openapi_server.models.currency import Currency
from openapi_server.models.ledger_account_parent_account import LedgerAccountParentAccount
from openapi_server.models.linked_tax_rate import LinkedTaxRate
from openapi_server.models.sub_accounts_inner import SubAccountsInner
from openapi_server import util


class LedgerAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, bank_account: BankAccount=None, categories: List[CategoriesInner]=None, classification: str=None, code: str=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, current_balance: float=None, custom_mappings: object=None, description: str=None, display_id: str=None, fully_qualified_name: str=None, header: bool=None, id: str=None, last_reconciliation_date: date=None, level: float=None, name: str=None, nominal_code: str=None, opening_balance: float=None, parent_account: LedgerAccountParentAccount=None, row_version: str=None, status: str=None, sub_account: bool=None, sub_accounts: List[SubAccountsInner]=None, sub_type: str=None, tax_rate: LinkedTaxRate=None, tax_type: str=None, type: str=None, updated_at: datetime=None, updated_by: str=None):
        """LedgerAccount - a model defined in OpenAPI

        :param active: The active of this LedgerAccount.
        :param bank_account: The bank_account of this LedgerAccount.
        :param categories: The categories of this LedgerAccount.
        :param classification: The classification of this LedgerAccount.
        :param code: The code of this LedgerAccount.
        :param created_at: The created_at of this LedgerAccount.
        :param created_by: The created_by of this LedgerAccount.
        :param currency: The currency of this LedgerAccount.
        :param current_balance: The current_balance of this LedgerAccount.
        :param custom_mappings: The custom_mappings of this LedgerAccount.
        :param description: The description of this LedgerAccount.
        :param display_id: The display_id of this LedgerAccount.
        :param fully_qualified_name: The fully_qualified_name of this LedgerAccount.
        :param header: The header of this LedgerAccount.
        :param id: The id of this LedgerAccount.
        :param last_reconciliation_date: The last_reconciliation_date of this LedgerAccount.
        :param level: The level of this LedgerAccount.
        :param name: The name of this LedgerAccount.
        :param nominal_code: The nominal_code of this LedgerAccount.
        :param opening_balance: The opening_balance of this LedgerAccount.
        :param parent_account: The parent_account of this LedgerAccount.
        :param row_version: The row_version of this LedgerAccount.
        :param status: The status of this LedgerAccount.
        :param sub_account: The sub_account of this LedgerAccount.
        :param sub_accounts: The sub_accounts of this LedgerAccount.
        :param sub_type: The sub_type of this LedgerAccount.
        :param tax_rate: The tax_rate of this LedgerAccount.
        :param tax_type: The tax_type of this LedgerAccount.
        :param type: The type of this LedgerAccount.
        :param updated_at: The updated_at of this LedgerAccount.
        :param updated_by: The updated_by of this LedgerAccount.
        """
        self.openapi_types = {
            'active': bool,
            'bank_account': BankAccount,
            'categories': List[CategoriesInner],
            'classification': str,
            'code': str,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'current_balance': float,
            'custom_mappings': object,
            'description': str,
            'display_id': str,
            'fully_qualified_name': str,
            'header': bool,
            'id': str,
            'last_reconciliation_date': date,
            'level': float,
            'name': str,
            'nominal_code': str,
            'opening_balance': float,
            'parent_account': LedgerAccountParentAccount,
            'row_version': str,
            'status': str,
            'sub_account': bool,
            'sub_accounts': List[SubAccountsInner],
            'sub_type': str,
            'tax_rate': LinkedTaxRate,
            'tax_type': str,
            'type': str,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'active': 'active',
            'bank_account': 'bank_account',
            'categories': 'categories',
            'classification': 'classification',
            'code': 'code',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'current_balance': 'current_balance',
            'custom_mappings': 'custom_mappings',
            'description': 'description',
            'display_id': 'display_id',
            'fully_qualified_name': 'fully_qualified_name',
            'header': 'header',
            'id': 'id',
            'last_reconciliation_date': 'last_reconciliation_date',
            'level': 'level',
            'name': 'name',
            'nominal_code': 'nominal_code',
            'opening_balance': 'opening_balance',
            'parent_account': 'parent_account',
            'row_version': 'row_version',
            'status': 'status',
            'sub_account': 'sub_account',
            'sub_accounts': 'sub_accounts',
            'sub_type': 'sub_type',
            'tax_rate': 'tax_rate',
            'tax_type': 'tax_type',
            'type': 'type',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._active = active
        self._bank_account = bank_account
        self._categories = categories
        self._classification = classification
        self._code = code
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._current_balance = current_balance
        self._custom_mappings = custom_mappings
        self._description = description
        self._display_id = display_id
        self._fully_qualified_name = fully_qualified_name
        self._header = header
        self._id = id
        self._last_reconciliation_date = last_reconciliation_date
        self._level = level
        self._name = name
        self._nominal_code = nominal_code
        self._opening_balance = opening_balance
        self._parent_account = parent_account
        self._row_version = row_version
        self._status = status
        self._sub_account = sub_account
        self._sub_accounts = sub_accounts
        self._sub_type = sub_type
        self._tax_rate = tax_rate
        self._tax_type = tax_type
        self._type = type
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LedgerAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LedgerAccount of this LedgerAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this LedgerAccount.

        Whether the account is active or not.

        :return: The active of this LedgerAccount.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this LedgerAccount.

        Whether the account is active or not.

        :param active: The active of this LedgerAccount.
        :type active: bool
        """

        self._active = active

    @property
    def bank_account(self):
        """Gets the bank_account of this LedgerAccount.


        :return: The bank_account of this LedgerAccount.
        :rtype: BankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this LedgerAccount.


        :param bank_account: The bank_account of this LedgerAccount.
        :type bank_account: BankAccount
        """

        self._bank_account = bank_account

    @property
    def categories(self):
        """Gets the categories of this LedgerAccount.

        The categories of the account.

        :return: The categories of this LedgerAccount.
        :rtype: List[CategoriesInner]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this LedgerAccount.

        The categories of the account.

        :param categories: The categories of this LedgerAccount.
        :type categories: List[CategoriesInner]
        """

        self._categories = categories

    @property
    def classification(self):
        """Gets the classification of this LedgerAccount.

        The classification of account.

        :return: The classification of this LedgerAccount.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this LedgerAccount.

        The classification of account.

        :param classification: The classification of this LedgerAccount.
        :type classification: str
        """
        allowed_values = [None,"asset", "equity", "expense", "liability", "revenue", "income", "other_income", "other_expense", "costs_of_sales"]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def code(self):
        """Gets the code of this LedgerAccount.

        The code assigned to the account.

        :return: The code of this LedgerAccount.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LedgerAccount.

        The code assigned to the account.

        :param code: The code of this LedgerAccount.
        :type code: str
        """

        self._code = code

    @property
    def created_at(self):
        """Gets the created_at of this LedgerAccount.

        The date and time when the object was created.

        :return: The created_at of this LedgerAccount.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LedgerAccount.

        The date and time when the object was created.

        :param created_at: The created_at of this LedgerAccount.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this LedgerAccount.

        The user who created the object.

        :return: The created_by of this LedgerAccount.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this LedgerAccount.

        The user who created the object.

        :param created_by: The created_by of this LedgerAccount.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this LedgerAccount.


        :return: The currency of this LedgerAccount.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LedgerAccount.


        :param currency: The currency of this LedgerAccount.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def current_balance(self):
        """Gets the current_balance of this LedgerAccount.

        The current balance of the account.

        :return: The current_balance of this LedgerAccount.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this LedgerAccount.

        The current balance of the account.

        :param current_balance: The current_balance of this LedgerAccount.
        :type current_balance: float
        """

        self._current_balance = current_balance

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this LedgerAccount.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this LedgerAccount.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this LedgerAccount.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this LedgerAccount.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def description(self):
        """Gets the description of this LedgerAccount.

        The description of the account.

        :return: The description of this LedgerAccount.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LedgerAccount.

        The description of the account.

        :param description: The description of this LedgerAccount.
        :type description: str
        """

        self._description = description

    @property
    def display_id(self):
        """Gets the display_id of this LedgerAccount.

        The human readable display ID used when displaying the account

        :return: The display_id of this LedgerAccount.
        :rtype: str
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this LedgerAccount.

        The human readable display ID used when displaying the account

        :param display_id: The display_id of this LedgerAccount.
        :type display_id: str
        """

        self._display_id = display_id

    @property
    def fully_qualified_name(self):
        """Gets the fully_qualified_name of this LedgerAccount.

        The fully qualified name of the account.

        :return: The fully_qualified_name of this LedgerAccount.
        :rtype: str
        """
        return self._fully_qualified_name

    @fully_qualified_name.setter
    def fully_qualified_name(self, fully_qualified_name):
        """Sets the fully_qualified_name of this LedgerAccount.

        The fully qualified name of the account.

        :param fully_qualified_name: The fully_qualified_name of this LedgerAccount.
        :type fully_qualified_name: str
        """

        self._fully_qualified_name = fully_qualified_name

    @property
    def header(self):
        """Gets the header of this LedgerAccount.

        Whether the account is a header or not.

        :return: The header of this LedgerAccount.
        :rtype: bool
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this LedgerAccount.

        Whether the account is a header or not.

        :param header: The header of this LedgerAccount.
        :type header: bool
        """

        self._header = header

    @property
    def id(self):
        """Gets the id of this LedgerAccount.

        A unique identifier for an object.

        :return: The id of this LedgerAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LedgerAccount.

        A unique identifier for an object.

        :param id: The id of this LedgerAccount.
        :type id: str
        """

        self._id = id

    @property
    def last_reconciliation_date(self):
        """Gets the last_reconciliation_date of this LedgerAccount.

        Reconciliation Date means the last calendar day of each Reconciliation Period.

        :return: The last_reconciliation_date of this LedgerAccount.
        :rtype: date
        """
        return self._last_reconciliation_date

    @last_reconciliation_date.setter
    def last_reconciliation_date(self, last_reconciliation_date):
        """Sets the last_reconciliation_date of this LedgerAccount.

        Reconciliation Date means the last calendar day of each Reconciliation Period.

        :param last_reconciliation_date: The last_reconciliation_date of this LedgerAccount.
        :type last_reconciliation_date: date
        """

        self._last_reconciliation_date = last_reconciliation_date

    @property
    def level(self):
        """Gets the level of this LedgerAccount.


        :return: The level of this LedgerAccount.
        :rtype: float
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this LedgerAccount.


        :param level: The level of this LedgerAccount.
        :type level: float
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this LedgerAccount.

        The name of the account.

        :return: The name of this LedgerAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LedgerAccount.

        The name of the account.

        :param name: The name of this LedgerAccount.
        :type name: str
        """

        self._name = name

    @property
    def nominal_code(self):
        """Gets the nominal_code of this LedgerAccount.

        The nominal code of the ledger account.

        :return: The nominal_code of this LedgerAccount.
        :rtype: str
        """
        return self._nominal_code

    @nominal_code.setter
    def nominal_code(self, nominal_code):
        """Sets the nominal_code of this LedgerAccount.

        The nominal code of the ledger account.

        :param nominal_code: The nominal_code of this LedgerAccount.
        :type nominal_code: str
        """

        self._nominal_code = nominal_code

    @property
    def opening_balance(self):
        """Gets the opening_balance of this LedgerAccount.

        The opening balance of the account.

        :return: The opening_balance of this LedgerAccount.
        :rtype: float
        """
        return self._opening_balance

    @opening_balance.setter
    def opening_balance(self, opening_balance):
        """Sets the opening_balance of this LedgerAccount.

        The opening balance of the account.

        :param opening_balance: The opening_balance of this LedgerAccount.
        :type opening_balance: float
        """

        self._opening_balance = opening_balance

    @property
    def parent_account(self):
        """Gets the parent_account of this LedgerAccount.


        :return: The parent_account of this LedgerAccount.
        :rtype: LedgerAccountParentAccount
        """
        return self._parent_account

    @parent_account.setter
    def parent_account(self, parent_account):
        """Sets the parent_account of this LedgerAccount.


        :param parent_account: The parent_account of this LedgerAccount.
        :type parent_account: LedgerAccountParentAccount
        """

        self._parent_account = parent_account

    @property
    def row_version(self):
        """Gets the row_version of this LedgerAccount.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this LedgerAccount.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this LedgerAccount.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this LedgerAccount.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def status(self):
        """Gets the status of this LedgerAccount.

        The status of the account.

        :return: The status of this LedgerAccount.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LedgerAccount.

        The status of the account.

        :param status: The status of this LedgerAccount.
        :type status: str
        """
        allowed_values = [None,"active", "inactive", "archived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_account(self):
        """Gets the sub_account of this LedgerAccount.

        Whether the account is a sub account or not.

        :return: The sub_account of this LedgerAccount.
        :rtype: bool
        """
        return self._sub_account

    @sub_account.setter
    def sub_account(self, sub_account):
        """Sets the sub_account of this LedgerAccount.

        Whether the account is a sub account or not.

        :param sub_account: The sub_account of this LedgerAccount.
        :type sub_account: bool
        """

        self._sub_account = sub_account

    @property
    def sub_accounts(self):
        """Gets the sub_accounts of this LedgerAccount.

        The sub accounts of the account.

        :return: The sub_accounts of this LedgerAccount.
        :rtype: List[SubAccountsInner]
        """
        return self._sub_accounts

    @sub_accounts.setter
    def sub_accounts(self, sub_accounts):
        """Sets the sub_accounts of this LedgerAccount.

        The sub accounts of the account.

        :param sub_accounts: The sub_accounts of this LedgerAccount.
        :type sub_accounts: List[SubAccountsInner]
        """

        self._sub_accounts = sub_accounts

    @property
    def sub_type(self):
        """Gets the sub_type of this LedgerAccount.

        The sub type of account.

        :return: The sub_type of this LedgerAccount.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this LedgerAccount.

        The sub type of account.

        :param sub_type: The sub_type of this LedgerAccount.
        :type sub_type: str
        """

        self._sub_type = sub_type

    @property
    def tax_rate(self):
        """Gets the tax_rate of this LedgerAccount.


        :return: The tax_rate of this LedgerAccount.
        :rtype: LinkedTaxRate
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this LedgerAccount.


        :param tax_rate: The tax_rate of this LedgerAccount.
        :type tax_rate: LinkedTaxRate
        """

        self._tax_rate = tax_rate

    @property
    def tax_type(self):
        """Gets the tax_type of this LedgerAccount.

        The tax type of the account.

        :return: The tax_type of this LedgerAccount.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this LedgerAccount.

        The tax type of the account.

        :param tax_type: The tax_type of this LedgerAccount.
        :type tax_type: str
        """

        self._tax_type = tax_type

    @property
    def type(self):
        """Gets the type of this LedgerAccount.

        The type of account.

        :return: The type of this LedgerAccount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LedgerAccount.

        The type of account.

        :param type: The type of this LedgerAccount.
        :type type: str
        """
        allowed_values = ["accounts_receivable", "revenue", "sales", "other_income", "bank", "current_asset", "fixed_asset", "non_current_asset", "other_asset", "balancesheet", "equity", "expense", "other_expense", "costs_of_sales", "accounts_payable", "credit_card", "current_liability", "non_current_liability", "other_liability", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this LedgerAccount.

        The date and time when the object was last updated.

        :return: The updated_at of this LedgerAccount.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LedgerAccount.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this LedgerAccount.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this LedgerAccount.

        The user who last updated the object.

        :return: The updated_by of this LedgerAccount.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this LedgerAccount.

        The user who last updated the object.

        :param updated_by: The updated_by of this LedgerAccount.
        :type updated_by: str
        """

        self._updated_by = updated_by
