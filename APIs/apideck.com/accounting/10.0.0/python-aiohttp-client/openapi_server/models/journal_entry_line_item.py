# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linked_customer import LinkedCustomer
from openapi_server.models.linked_ledger_account import LinkedLedgerAccount
from openapi_server.models.linked_supplier import LinkedSupplier
from openapi_server.models.linked_tax_rate import LinkedTaxRate
from openapi_server.models.linked_tracking_category import LinkedTrackingCategory
from openapi_server import util


class JournalEntryLineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer: LinkedCustomer=None, department_id: str=None, description: str=None, id: str=None, ledger_account: LinkedLedgerAccount=None, location_id: str=None, sub_total: float=None, supplier: LinkedSupplier=None, tax_amount: float=None, tax_rate: LinkedTaxRate=None, total_amount: float=None, tracking_category: LinkedTrackingCategory=None, type: str=None):
        """JournalEntryLineItem - a model defined in OpenAPI

        :param customer: The customer of this JournalEntryLineItem.
        :param department_id: The department_id of this JournalEntryLineItem.
        :param description: The description of this JournalEntryLineItem.
        :param id: The id of this JournalEntryLineItem.
        :param ledger_account: The ledger_account of this JournalEntryLineItem.
        :param location_id: The location_id of this JournalEntryLineItem.
        :param sub_total: The sub_total of this JournalEntryLineItem.
        :param supplier: The supplier of this JournalEntryLineItem.
        :param tax_amount: The tax_amount of this JournalEntryLineItem.
        :param tax_rate: The tax_rate of this JournalEntryLineItem.
        :param total_amount: The total_amount of this JournalEntryLineItem.
        :param tracking_category: The tracking_category of this JournalEntryLineItem.
        :param type: The type of this JournalEntryLineItem.
        """
        self.openapi_types = {
            'customer': LinkedCustomer,
            'department_id': str,
            'description': str,
            'id': str,
            'ledger_account': LinkedLedgerAccount,
            'location_id': str,
            'sub_total': float,
            'supplier': LinkedSupplier,
            'tax_amount': float,
            'tax_rate': LinkedTaxRate,
            'total_amount': float,
            'tracking_category': LinkedTrackingCategory,
            'type': str
        }

        self.attribute_map = {
            'customer': 'customer',
            'department_id': 'department_id',
            'description': 'description',
            'id': 'id',
            'ledger_account': 'ledger_account',
            'location_id': 'location_id',
            'sub_total': 'sub_total',
            'supplier': 'supplier',
            'tax_amount': 'tax_amount',
            'tax_rate': 'tax_rate',
            'total_amount': 'total_amount',
            'tracking_category': 'tracking_category',
            'type': 'type'
        }

        self._customer = customer
        self._department_id = department_id
        self._description = description
        self._id = id
        self._ledger_account = ledger_account
        self._location_id = location_id
        self._sub_total = sub_total
        self._supplier = supplier
        self._tax_amount = tax_amount
        self._tax_rate = tax_rate
        self._total_amount = total_amount
        self._tracking_category = tracking_category
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JournalEntryLineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JournalEntryLineItem of this JournalEntryLineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer(self):
        """Gets the customer of this JournalEntryLineItem.


        :return: The customer of this JournalEntryLineItem.
        :rtype: LinkedCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this JournalEntryLineItem.


        :param customer: The customer of this JournalEntryLineItem.
        :type customer: LinkedCustomer
        """

        self._customer = customer

    @property
    def department_id(self):
        """Gets the department_id of this JournalEntryLineItem.

        A unique identifier for an object.

        :return: The department_id of this JournalEntryLineItem.
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this JournalEntryLineItem.

        A unique identifier for an object.

        :param department_id: The department_id of this JournalEntryLineItem.
        :type department_id: str
        """

        self._department_id = department_id

    @property
    def description(self):
        """Gets the description of this JournalEntryLineItem.

        User defined description

        :return: The description of this JournalEntryLineItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JournalEntryLineItem.

        User defined description

        :param description: The description of this JournalEntryLineItem.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this JournalEntryLineItem.

        A unique identifier for an object.

        :return: The id of this JournalEntryLineItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JournalEntryLineItem.

        A unique identifier for an object.

        :param id: The id of this JournalEntryLineItem.
        :type id: str
        """

        self._id = id

    @property
    def ledger_account(self):
        """Gets the ledger_account of this JournalEntryLineItem.


        :return: The ledger_account of this JournalEntryLineItem.
        :rtype: LinkedLedgerAccount
        """
        return self._ledger_account

    @ledger_account.setter
    def ledger_account(self, ledger_account):
        """Sets the ledger_account of this JournalEntryLineItem.


        :param ledger_account: The ledger_account of this JournalEntryLineItem.
        :type ledger_account: LinkedLedgerAccount
        """
        if ledger_account is None:
            raise ValueError("Invalid value for `ledger_account`, must not be `None`")

        self._ledger_account = ledger_account

    @property
    def location_id(self):
        """Gets the location_id of this JournalEntryLineItem.

        A unique identifier for an object.

        :return: The location_id of this JournalEntryLineItem.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this JournalEntryLineItem.

        A unique identifier for an object.

        :param location_id: The location_id of this JournalEntryLineItem.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def sub_total(self):
        """Gets the sub_total of this JournalEntryLineItem.

        Sub-total amount, normally before tax.

        :return: The sub_total of this JournalEntryLineItem.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this JournalEntryLineItem.

        Sub-total amount, normally before tax.

        :param sub_total: The sub_total of this JournalEntryLineItem.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def supplier(self):
        """Gets the supplier of this JournalEntryLineItem.


        :return: The supplier of this JournalEntryLineItem.
        :rtype: LinkedSupplier
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this JournalEntryLineItem.


        :param supplier: The supplier of this JournalEntryLineItem.
        :type supplier: LinkedSupplier
        """

        self._supplier = supplier

    @property
    def tax_amount(self):
        """Gets the tax_amount of this JournalEntryLineItem.

        Tax amount

        :return: The tax_amount of this JournalEntryLineItem.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this JournalEntryLineItem.

        Tax amount

        :param tax_amount: The tax_amount of this JournalEntryLineItem.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_rate(self):
        """Gets the tax_rate of this JournalEntryLineItem.


        :return: The tax_rate of this JournalEntryLineItem.
        :rtype: LinkedTaxRate
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this JournalEntryLineItem.


        :param tax_rate: The tax_rate of this JournalEntryLineItem.
        :type tax_rate: LinkedTaxRate
        """

        self._tax_rate = tax_rate

    @property
    def total_amount(self):
        """Gets the total_amount of this JournalEntryLineItem.

        Debit entries are considered positive, and credit entries are considered negative.

        :return: The total_amount of this JournalEntryLineItem.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this JournalEntryLineItem.

        Debit entries are considered positive, and credit entries are considered negative.

        :param total_amount: The total_amount of this JournalEntryLineItem.
        :type total_amount: float
        """

        self._total_amount = total_amount

    @property
    def tracking_category(self):
        """Gets the tracking_category of this JournalEntryLineItem.


        :return: The tracking_category of this JournalEntryLineItem.
        :rtype: LinkedTrackingCategory
        """
        return self._tracking_category

    @tracking_category.setter
    def tracking_category(self, tracking_category):
        """Sets the tracking_category of this JournalEntryLineItem.


        :param tracking_category: The tracking_category of this JournalEntryLineItem.
        :type tracking_category: LinkedTrackingCategory
        """

        self._tracking_category = tracking_category

    @property
    def type(self):
        """Gets the type of this JournalEntryLineItem.

        Debit entries are considered positive, and credit entries are considered negative.

        :return: The type of this JournalEntryLineItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JournalEntryLineItem.

        Debit entries are considered positive, and credit entries are considered negative.

        :param type: The type of this JournalEntryLineItem.
        :type type: str
        """
        allowed_values = ["debit", "credit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
