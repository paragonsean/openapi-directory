# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.currency import Currency
from openapi_server.models.email import Email
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.tax_rate import TaxRate
from openapi_server import util


class CompanyInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[Address]=None, automated_sales_tax: bool=None, company_name: str=None, company_start_date: date=None, country: str=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, custom_mappings: object=None, default_sales_tax: TaxRate=None, emails: List[Email]=None, fiscal_year_start_month: str=None, id: str=None, language: str=None, legal_name: str=None, phone_numbers: List[PhoneNumber]=None, row_version: str=None, sales_tax_enabled: bool=None, sales_tax_number: str=None, status: str=None, updated_at: datetime=None, updated_by: str=None):
        """CompanyInfo - a model defined in OpenAPI

        :param addresses: The addresses of this CompanyInfo.
        :param automated_sales_tax: The automated_sales_tax of this CompanyInfo.
        :param company_name: The company_name of this CompanyInfo.
        :param company_start_date: The company_start_date of this CompanyInfo.
        :param country: The country of this CompanyInfo.
        :param created_at: The created_at of this CompanyInfo.
        :param created_by: The created_by of this CompanyInfo.
        :param currency: The currency of this CompanyInfo.
        :param custom_mappings: The custom_mappings of this CompanyInfo.
        :param default_sales_tax: The default_sales_tax of this CompanyInfo.
        :param emails: The emails of this CompanyInfo.
        :param fiscal_year_start_month: The fiscal_year_start_month of this CompanyInfo.
        :param id: The id of this CompanyInfo.
        :param language: The language of this CompanyInfo.
        :param legal_name: The legal_name of this CompanyInfo.
        :param phone_numbers: The phone_numbers of this CompanyInfo.
        :param row_version: The row_version of this CompanyInfo.
        :param sales_tax_enabled: The sales_tax_enabled of this CompanyInfo.
        :param sales_tax_number: The sales_tax_number of this CompanyInfo.
        :param status: The status of this CompanyInfo.
        :param updated_at: The updated_at of this CompanyInfo.
        :param updated_by: The updated_by of this CompanyInfo.
        """
        self.openapi_types = {
            'addresses': List[Address],
            'automated_sales_tax': bool,
            'company_name': str,
            'company_start_date': date,
            'country': str,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'custom_mappings': object,
            'default_sales_tax': TaxRate,
            'emails': List[Email],
            'fiscal_year_start_month': str,
            'id': str,
            'language': str,
            'legal_name': str,
            'phone_numbers': List[PhoneNumber],
            'row_version': str,
            'sales_tax_enabled': bool,
            'sales_tax_number': str,
            'status': str,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'automated_sales_tax': 'automated_sales_tax',
            'company_name': 'company_name',
            'company_start_date': 'company_start_date',
            'country': 'country',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'default_sales_tax': 'default_sales_tax',
            'emails': 'emails',
            'fiscal_year_start_month': 'fiscal_year_start_month',
            'id': 'id',
            'language': 'language',
            'legal_name': 'legal_name',
            'phone_numbers': 'phone_numbers',
            'row_version': 'row_version',
            'sales_tax_enabled': 'sales_tax_enabled',
            'sales_tax_number': 'sales_tax_number',
            'status': 'status',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._addresses = addresses
        self._automated_sales_tax = automated_sales_tax
        self._company_name = company_name
        self._company_start_date = company_start_date
        self._country = country
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._custom_mappings = custom_mappings
        self._default_sales_tax = default_sales_tax
        self._emails = emails
        self._fiscal_year_start_month = fiscal_year_start_month
        self._id = id
        self._language = language
        self._legal_name = legal_name
        self._phone_numbers = phone_numbers
        self._row_version = row_version
        self._sales_tax_enabled = sales_tax_enabled
        self._sales_tax_number = sales_tax_number
        self._status = status
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanyInfo of this CompanyInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this CompanyInfo.


        :return: The addresses of this CompanyInfo.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this CompanyInfo.


        :param addresses: The addresses of this CompanyInfo.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def automated_sales_tax(self):
        """Gets the automated_sales_tax of this CompanyInfo.

        Whether sales tax is calculated automatically for the company

        :return: The automated_sales_tax of this CompanyInfo.
        :rtype: bool
        """
        return self._automated_sales_tax

    @automated_sales_tax.setter
    def automated_sales_tax(self, automated_sales_tax):
        """Sets the automated_sales_tax of this CompanyInfo.

        Whether sales tax is calculated automatically for the company

        :param automated_sales_tax: The automated_sales_tax of this CompanyInfo.
        :type automated_sales_tax: bool
        """

        self._automated_sales_tax = automated_sales_tax

    @property
    def company_name(self):
        """Gets the company_name of this CompanyInfo.

        The name of the company.

        :return: The company_name of this CompanyInfo.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CompanyInfo.

        The name of the company.

        :param company_name: The company_name of this CompanyInfo.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def company_start_date(self):
        """Gets the company_start_date of this CompanyInfo.

        Date when company file was created

        :return: The company_start_date of this CompanyInfo.
        :rtype: date
        """
        return self._company_start_date

    @company_start_date.setter
    def company_start_date(self, company_start_date):
        """Sets the company_start_date of this CompanyInfo.

        Date when company file was created

        :param company_start_date: The company_start_date of this CompanyInfo.
        :type company_start_date: date
        """

        self._company_start_date = company_start_date

    @property
    def country(self):
        """Gets the country of this CompanyInfo.

        country code according to ISO 3166-1 alpha-2.

        :return: The country of this CompanyInfo.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CompanyInfo.

        country code according to ISO 3166-1 alpha-2.

        :param country: The country of this CompanyInfo.
        :type country: str
        """

        self._country = country

    @property
    def created_at(self):
        """Gets the created_at of this CompanyInfo.

        The date and time when the object was created.

        :return: The created_at of this CompanyInfo.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CompanyInfo.

        The date and time when the object was created.

        :param created_at: The created_at of this CompanyInfo.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this CompanyInfo.

        The user who created the object.

        :return: The created_by of this CompanyInfo.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CompanyInfo.

        The user who created the object.

        :param created_by: The created_by of this CompanyInfo.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this CompanyInfo.


        :return: The currency of this CompanyInfo.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CompanyInfo.


        :param currency: The currency of this CompanyInfo.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this CompanyInfo.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this CompanyInfo.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this CompanyInfo.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this CompanyInfo.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def default_sales_tax(self):
        """Gets the default_sales_tax of this CompanyInfo.


        :return: The default_sales_tax of this CompanyInfo.
        :rtype: TaxRate
        """
        return self._default_sales_tax

    @default_sales_tax.setter
    def default_sales_tax(self, default_sales_tax):
        """Sets the default_sales_tax of this CompanyInfo.


        :param default_sales_tax: The default_sales_tax of this CompanyInfo.
        :type default_sales_tax: TaxRate
        """

        self._default_sales_tax = default_sales_tax

    @property
    def emails(self):
        """Gets the emails of this CompanyInfo.


        :return: The emails of this CompanyInfo.
        :rtype: List[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this CompanyInfo.


        :param emails: The emails of this CompanyInfo.
        :type emails: List[Email]
        """

        self._emails = emails

    @property
    def fiscal_year_start_month(self):
        """Gets the fiscal_year_start_month of this CompanyInfo.

        The start month of fiscal year.

        :return: The fiscal_year_start_month of this CompanyInfo.
        :rtype: str
        """
        return self._fiscal_year_start_month

    @fiscal_year_start_month.setter
    def fiscal_year_start_month(self, fiscal_year_start_month):
        """Sets the fiscal_year_start_month of this CompanyInfo.

        The start month of fiscal year.

        :param fiscal_year_start_month: The fiscal_year_start_month of this CompanyInfo.
        :type fiscal_year_start_month: str
        """
        allowed_values = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]  # noqa: E501
        if fiscal_year_start_month not in allowed_values:
            raise ValueError(
                "Invalid value for `fiscal_year_start_month` ({0}), must be one of {1}"
                .format(fiscal_year_start_month, allowed_values)
            )

        self._fiscal_year_start_month = fiscal_year_start_month

    @property
    def id(self):
        """Gets the id of this CompanyInfo.

        A unique identifier for an object.

        :return: The id of this CompanyInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyInfo.

        A unique identifier for an object.

        :param id: The id of this CompanyInfo.
        :type id: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this CompanyInfo.

        language code according to ISO 639-1. For the United States - EN

        :return: The language of this CompanyInfo.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CompanyInfo.

        language code according to ISO 639-1. For the United States - EN

        :param language: The language of this CompanyInfo.
        :type language: str
        """

        self._language = language

    @property
    def legal_name(self):
        """Gets the legal_name of this CompanyInfo.

        The legal name of the company

        :return: The legal_name of this CompanyInfo.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this CompanyInfo.

        The legal name of the company

        :param legal_name: The legal_name of this CompanyInfo.
        :type legal_name: str
        """

        self._legal_name = legal_name

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this CompanyInfo.


        :return: The phone_numbers of this CompanyInfo.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this CompanyInfo.


        :param phone_numbers: The phone_numbers of this CompanyInfo.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def row_version(self):
        """Gets the row_version of this CompanyInfo.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this CompanyInfo.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this CompanyInfo.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this CompanyInfo.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def sales_tax_enabled(self):
        """Gets the sales_tax_enabled of this CompanyInfo.

        Whether sales tax is enabled for the company

        :return: The sales_tax_enabled of this CompanyInfo.
        :rtype: bool
        """
        return self._sales_tax_enabled

    @sales_tax_enabled.setter
    def sales_tax_enabled(self, sales_tax_enabled):
        """Sets the sales_tax_enabled of this CompanyInfo.

        Whether sales tax is enabled for the company

        :param sales_tax_enabled: The sales_tax_enabled of this CompanyInfo.
        :type sales_tax_enabled: bool
        """

        self._sales_tax_enabled = sales_tax_enabled

    @property
    def sales_tax_number(self):
        """Gets the sales_tax_number of this CompanyInfo.


        :return: The sales_tax_number of this CompanyInfo.
        :rtype: str
        """
        return self._sales_tax_number

    @sales_tax_number.setter
    def sales_tax_number(self, sales_tax_number):
        """Sets the sales_tax_number of this CompanyInfo.


        :param sales_tax_number: The sales_tax_number of this CompanyInfo.
        :type sales_tax_number: str
        """

        self._sales_tax_number = sales_tax_number

    @property
    def status(self):
        """Gets the status of this CompanyInfo.

        Based on the status some functionality is enabled or disabled.

        :return: The status of this CompanyInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CompanyInfo.

        Based on the status some functionality is enabled or disabled.

        :param status: The status of this CompanyInfo.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this CompanyInfo.

        The date and time when the object was last updated.

        :return: The updated_at of this CompanyInfo.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CompanyInfo.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this CompanyInfo.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this CompanyInfo.

        The user who last updated the object.

        :return: The updated_by of this CompanyInfo.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this CompanyInfo.

        The user who last updated the object.

        :param updated_by: The updated_by of this CompanyInfo.
        :type updated_by: str
        """

        self._updated_by = updated_by
