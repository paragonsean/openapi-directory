# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credit_note_allocations_inner import CreditNoteAllocationsInner
from openapi_server.models.currency import Currency
from openapi_server.models.invoice_line_item import InvoiceLineItem
from openapi_server.models.linked_customer import LinkedCustomer
from openapi_server.models.linked_ledger_account import LinkedLedgerAccount
from openapi_server import util


class CreditNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: LinkedLedgerAccount=None, allocations: List[CreditNoteAllocationsInner]=None, balance: float=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, currency_rate: float=None, custom_mappings: object=None, customer: LinkedCustomer=None, date_issued: datetime=None, date_paid: datetime=None, id: str=None, line_items: List[InvoiceLineItem]=None, note: str=None, number: str=None, reference: str=None, remaining_credit: float=None, row_version: str=None, status: str=None, sub_total: float=None, tax_code: str=None, tax_inclusive: bool=None, terms: str=None, total_amount: float=None, total_tax: float=None, type: str=None, updated_at: datetime=None, updated_by: str=None):
        """CreditNote - a model defined in OpenAPI

        :param account: The account of this CreditNote.
        :param allocations: The allocations of this CreditNote.
        :param balance: The balance of this CreditNote.
        :param created_at: The created_at of this CreditNote.
        :param created_by: The created_by of this CreditNote.
        :param currency: The currency of this CreditNote.
        :param currency_rate: The currency_rate of this CreditNote.
        :param custom_mappings: The custom_mappings of this CreditNote.
        :param customer: The customer of this CreditNote.
        :param date_issued: The date_issued of this CreditNote.
        :param date_paid: The date_paid of this CreditNote.
        :param id: The id of this CreditNote.
        :param line_items: The line_items of this CreditNote.
        :param note: The note of this CreditNote.
        :param number: The number of this CreditNote.
        :param reference: The reference of this CreditNote.
        :param remaining_credit: The remaining_credit of this CreditNote.
        :param row_version: The row_version of this CreditNote.
        :param status: The status of this CreditNote.
        :param sub_total: The sub_total of this CreditNote.
        :param tax_code: The tax_code of this CreditNote.
        :param tax_inclusive: The tax_inclusive of this CreditNote.
        :param terms: The terms of this CreditNote.
        :param total_amount: The total_amount of this CreditNote.
        :param total_tax: The total_tax of this CreditNote.
        :param type: The type of this CreditNote.
        :param updated_at: The updated_at of this CreditNote.
        :param updated_by: The updated_by of this CreditNote.
        """
        self.openapi_types = {
            'account': LinkedLedgerAccount,
            'allocations': List[CreditNoteAllocationsInner],
            'balance': float,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'currency_rate': float,
            'custom_mappings': object,
            'customer': LinkedCustomer,
            'date_issued': datetime,
            'date_paid': datetime,
            'id': str,
            'line_items': List[InvoiceLineItem],
            'note': str,
            'number': str,
            'reference': str,
            'remaining_credit': float,
            'row_version': str,
            'status': str,
            'sub_total': float,
            'tax_code': str,
            'tax_inclusive': bool,
            'terms': str,
            'total_amount': float,
            'total_tax': float,
            'type': str,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'account': 'account',
            'allocations': 'allocations',
            'balance': 'balance',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'currency_rate': 'currency_rate',
            'custom_mappings': 'custom_mappings',
            'customer': 'customer',
            'date_issued': 'date_issued',
            'date_paid': 'date_paid',
            'id': 'id',
            'line_items': 'line_items',
            'note': 'note',
            'number': 'number',
            'reference': 'reference',
            'remaining_credit': 'remaining_credit',
            'row_version': 'row_version',
            'status': 'status',
            'sub_total': 'sub_total',
            'tax_code': 'tax_code',
            'tax_inclusive': 'tax_inclusive',
            'terms': 'terms',
            'total_amount': 'total_amount',
            'total_tax': 'total_tax',
            'type': 'type',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._account = account
        self._allocations = allocations
        self._balance = balance
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._currency_rate = currency_rate
        self._custom_mappings = custom_mappings
        self._customer = customer
        self._date_issued = date_issued
        self._date_paid = date_paid
        self._id = id
        self._line_items = line_items
        self._note = note
        self._number = number
        self._reference = reference
        self._remaining_credit = remaining_credit
        self._row_version = row_version
        self._status = status
        self._sub_total = sub_total
        self._tax_code = tax_code
        self._tax_inclusive = tax_inclusive
        self._terms = terms
        self._total_amount = total_amount
        self._total_tax = total_tax
        self._type = type
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreditNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreditNote of this CreditNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this CreditNote.


        :return: The account of this CreditNote.
        :rtype: LinkedLedgerAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CreditNote.


        :param account: The account of this CreditNote.
        :type account: LinkedLedgerAccount
        """

        self._account = account

    @property
    def allocations(self):
        """Gets the allocations of this CreditNote.


        :return: The allocations of this CreditNote.
        :rtype: List[CreditNoteAllocationsInner]
        """
        return self._allocations

    @allocations.setter
    def allocations(self, allocations):
        """Sets the allocations of this CreditNote.


        :param allocations: The allocations of this CreditNote.
        :type allocations: List[CreditNoteAllocationsInner]
        """

        self._allocations = allocations

    @property
    def balance(self):
        """Gets the balance of this CreditNote.

        The balance reflecting any payments made against the transaction.

        :return: The balance of this CreditNote.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CreditNote.

        The balance reflecting any payments made against the transaction.

        :param balance: The balance of this CreditNote.
        :type balance: float
        """

        self._balance = balance

    @property
    def created_at(self):
        """Gets the created_at of this CreditNote.

        The date and time when the object was created.

        :return: The created_at of this CreditNote.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreditNote.

        The date and time when the object was created.

        :param created_at: The created_at of this CreditNote.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this CreditNote.

        The user who created the object.

        :return: The created_by of this CreditNote.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CreditNote.

        The user who created the object.

        :param created_by: The created_by of this CreditNote.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this CreditNote.


        :return: The currency of this CreditNote.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreditNote.


        :param currency: The currency of this CreditNote.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def currency_rate(self):
        """Gets the currency_rate of this CreditNote.

        Currency Exchange Rate at the time entity was recorded/generated.

        :return: The currency_rate of this CreditNote.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this CreditNote.

        Currency Exchange Rate at the time entity was recorded/generated.

        :param currency_rate: The currency_rate of this CreditNote.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this CreditNote.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this CreditNote.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this CreditNote.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this CreditNote.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def customer(self):
        """Gets the customer of this CreditNote.


        :return: The customer of this CreditNote.
        :rtype: LinkedCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CreditNote.


        :param customer: The customer of this CreditNote.
        :type customer: LinkedCustomer
        """

        self._customer = customer

    @property
    def date_issued(self):
        """Gets the date_issued of this CreditNote.

        Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD

        :return: The date_issued of this CreditNote.
        :rtype: datetime
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this CreditNote.

        Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD

        :param date_issued: The date_issued of this CreditNote.
        :type date_issued: datetime
        """

        self._date_issued = date_issued

    @property
    def date_paid(self):
        """Gets the date_paid of this CreditNote.

        Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD

        :return: The date_paid of this CreditNote.
        :rtype: datetime
        """
        return self._date_paid

    @date_paid.setter
    def date_paid(self, date_paid):
        """Sets the date_paid of this CreditNote.

        Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD

        :param date_paid: The date_paid of this CreditNote.
        :type date_paid: datetime
        """

        self._date_paid = date_paid

    @property
    def id(self):
        """Gets the id of this CreditNote.

        Unique identifier representing the entity

        :return: The id of this CreditNote.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreditNote.

        Unique identifier representing the entity

        :param id: The id of this CreditNote.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def line_items(self):
        """Gets the line_items of this CreditNote.


        :return: The line_items of this CreditNote.
        :rtype: List[InvoiceLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this CreditNote.


        :param line_items: The line_items of this CreditNote.
        :type line_items: List[InvoiceLineItem]
        """

        self._line_items = line_items

    @property
    def note(self):
        """Gets the note of this CreditNote.

        Optional note to be associated with the credit note.

        :return: The note of this CreditNote.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CreditNote.

        Optional note to be associated with the credit note.

        :param note: The note of this CreditNote.
        :type note: str
        """

        self._note = note

    @property
    def number(self):
        """Gets the number of this CreditNote.

        Credit note number.

        :return: The number of this CreditNote.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreditNote.

        Credit note number.

        :param number: The number of this CreditNote.
        :type number: str
        """

        self._number = number

    @property
    def reference(self):
        """Gets the reference of this CreditNote.

        Optional reference message ie: Debit remittance detail.

        :return: The reference of this CreditNote.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CreditNote.

        Optional reference message ie: Debit remittance detail.

        :param reference: The reference of this CreditNote.
        :type reference: str
        """

        self._reference = reference

    @property
    def remaining_credit(self):
        """Gets the remaining_credit of this CreditNote.

        Indicates the total credit amount still available to apply towards the payment.

        :return: The remaining_credit of this CreditNote.
        :rtype: float
        """
        return self._remaining_credit

    @remaining_credit.setter
    def remaining_credit(self, remaining_credit):
        """Sets the remaining_credit of this CreditNote.

        Indicates the total credit amount still available to apply towards the payment.

        :param remaining_credit: The remaining_credit of this CreditNote.
        :type remaining_credit: float
        """

        self._remaining_credit = remaining_credit

    @property
    def row_version(self):
        """Gets the row_version of this CreditNote.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this CreditNote.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this CreditNote.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this CreditNote.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def status(self):
        """Gets the status of this CreditNote.

        Status of credit notes

        :return: The status of this CreditNote.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreditNote.

        Status of credit notes

        :param status: The status of this CreditNote.
        :type status: str
        """
        allowed_values = ["draft", "authorised", "paid", "voided", "deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_total(self):
        """Gets the sub_total of this CreditNote.

        Sub-total amount, normally before tax.

        :return: The sub_total of this CreditNote.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this CreditNote.

        Sub-total amount, normally before tax.

        :param sub_total: The sub_total of this CreditNote.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def tax_code(self):
        """Gets the tax_code of this CreditNote.

        Applicable tax id/code override if tax is not supplied on a line item basis.

        :return: The tax_code of this CreditNote.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this CreditNote.

        Applicable tax id/code override if tax is not supplied on a line item basis.

        :param tax_code: The tax_code of this CreditNote.
        :type tax_code: str
        """

        self._tax_code = tax_code

    @property
    def tax_inclusive(self):
        """Gets the tax_inclusive of this CreditNote.

        Amounts are including tax

        :return: The tax_inclusive of this CreditNote.
        :rtype: bool
        """
        return self._tax_inclusive

    @tax_inclusive.setter
    def tax_inclusive(self, tax_inclusive):
        """Sets the tax_inclusive of this CreditNote.

        Amounts are including tax

        :param tax_inclusive: The tax_inclusive of this CreditNote.
        :type tax_inclusive: bool
        """

        self._tax_inclusive = tax_inclusive

    @property
    def terms(self):
        """Gets the terms of this CreditNote.

        Optional terms to be associated with the credit note.

        :return: The terms of this CreditNote.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this CreditNote.

        Optional terms to be associated with the credit note.

        :param terms: The terms of this CreditNote.
        :type terms: str
        """

        self._terms = terms

    @property
    def total_amount(self):
        """Gets the total_amount of this CreditNote.

        Amount of transaction

        :return: The total_amount of this CreditNote.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this CreditNote.

        Amount of transaction

        :param total_amount: The total_amount of this CreditNote.
        :type total_amount: float
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")

        self._total_amount = total_amount

    @property
    def total_tax(self):
        """Gets the total_tax of this CreditNote.

        Total tax amount applied to this invoice.

        :return: The total_tax of this CreditNote.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this CreditNote.

        Total tax amount applied to this invoice.

        :param total_tax: The total_tax of this CreditNote.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def type(self):
        """Gets the type of this CreditNote.

        Type of payment

        :return: The type of this CreditNote.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreditNote.

        Type of payment

        :param type: The type of this CreditNote.
        :type type: str
        """
        allowed_values = ["accounts_receivable_credit", "accounts_payable_credit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this CreditNote.

        The date and time when the object was last updated.

        :return: The updated_at of this CreditNote.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CreditNote.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this CreditNote.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this CreditNote.

        The user who last updated the object.

        :return: The updated_by of this CreditNote.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this CreditNote.

        The user who last updated the object.

        :param updated_by: The updated_by of this CreditNote.
        :type updated_by: str
        """

        self._updated_by = updated_by
