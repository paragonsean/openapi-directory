# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profit_and_loss_expenses import ProfitAndLossExpenses
from openapi_server.models.profit_and_loss_gross_profit import ProfitAndLossGrossProfit
from openapi_server.models.profit_and_loss_income import ProfitAndLossIncome
from openapi_server.models.profit_and_loss_net_income import ProfitAndLossNetIncome
from openapi_server.models.profit_and_loss_net_operating_income import ProfitAndLossNetOperatingIncome
import re
from openapi_server import util


class ProfitAndLoss(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, custom_mappings: object=None, customer_id: str=None, end_date: str=None, expenses: ProfitAndLossExpenses=None, gross_profit: ProfitAndLossGrossProfit=None, id: str=None, income: ProfitAndLossIncome=None, net_income: ProfitAndLossNetIncome=None, net_operating_income: ProfitAndLossNetOperatingIncome=None, report_name: str=None, start_date: str=None):
        """ProfitAndLoss - a model defined in OpenAPI

        :param currency: The currency of this ProfitAndLoss.
        :param custom_mappings: The custom_mappings of this ProfitAndLoss.
        :param customer_id: The customer_id of this ProfitAndLoss.
        :param end_date: The end_date of this ProfitAndLoss.
        :param expenses: The expenses of this ProfitAndLoss.
        :param gross_profit: The gross_profit of this ProfitAndLoss.
        :param id: The id of this ProfitAndLoss.
        :param income: The income of this ProfitAndLoss.
        :param net_income: The net_income of this ProfitAndLoss.
        :param net_operating_income: The net_operating_income of this ProfitAndLoss.
        :param report_name: The report_name of this ProfitAndLoss.
        :param start_date: The start_date of this ProfitAndLoss.
        """
        self.openapi_types = {
            'currency': str,
            'custom_mappings': object,
            'customer_id': str,
            'end_date': str,
            'expenses': ProfitAndLossExpenses,
            'gross_profit': ProfitAndLossGrossProfit,
            'id': str,
            'income': ProfitAndLossIncome,
            'net_income': ProfitAndLossNetIncome,
            'net_operating_income': ProfitAndLossNetOperatingIncome,
            'report_name': str,
            'start_date': str
        }

        self.attribute_map = {
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'customer_id': 'customer_id',
            'end_date': 'end_date',
            'expenses': 'expenses',
            'gross_profit': 'gross_profit',
            'id': 'id',
            'income': 'income',
            'net_income': 'net_income',
            'net_operating_income': 'net_operating_income',
            'report_name': 'report_name',
            'start_date': 'start_date'
        }

        self._currency = currency
        self._custom_mappings = custom_mappings
        self._customer_id = customer_id
        self._end_date = end_date
        self._expenses = expenses
        self._gross_profit = gross_profit
        self._id = id
        self._income = income
        self._net_income = net_income
        self._net_operating_income = net_operating_income
        self._report_name = report_name
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfitAndLoss':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfitAndLoss of this ProfitAndLoss.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this ProfitAndLoss.


        :return: The currency of this ProfitAndLoss.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProfitAndLoss.


        :param currency: The currency of this ProfitAndLoss.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this ProfitAndLoss.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this ProfitAndLoss.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this ProfitAndLoss.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this ProfitAndLoss.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def customer_id(self):
        """Gets the customer_id of this ProfitAndLoss.

        Customer id

        :return: The customer_id of this ProfitAndLoss.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ProfitAndLoss.

        Customer id

        :param customer_id: The customer_id of this ProfitAndLoss.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def end_date(self):
        """Gets the end_date of this ProfitAndLoss.

        The start date of the report

        :return: The end_date of this ProfitAndLoss.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ProfitAndLoss.

        The start date of the report

        :param end_date: The end_date of this ProfitAndLoss.
        :type end_date: str
        """
        if end_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', end_date):
            raise ValueError("Invalid value for `end_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._end_date = end_date

    @property
    def expenses(self):
        """Gets the expenses of this ProfitAndLoss.


        :return: The expenses of this ProfitAndLoss.
        :rtype: ProfitAndLossExpenses
        """
        return self._expenses

    @expenses.setter
    def expenses(self, expenses):
        """Sets the expenses of this ProfitAndLoss.


        :param expenses: The expenses of this ProfitAndLoss.
        :type expenses: ProfitAndLossExpenses
        """
        if expenses is None:
            raise ValueError("Invalid value for `expenses`, must not be `None`")

        self._expenses = expenses

    @property
    def gross_profit(self):
        """Gets the gross_profit of this ProfitAndLoss.


        :return: The gross_profit of this ProfitAndLoss.
        :rtype: ProfitAndLossGrossProfit
        """
        return self._gross_profit

    @gross_profit.setter
    def gross_profit(self, gross_profit):
        """Sets the gross_profit of this ProfitAndLoss.


        :param gross_profit: The gross_profit of this ProfitAndLoss.
        :type gross_profit: ProfitAndLossGrossProfit
        """

        self._gross_profit = gross_profit

    @property
    def id(self):
        """Gets the id of this ProfitAndLoss.

        A unique identifier for an object.

        :return: The id of this ProfitAndLoss.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProfitAndLoss.

        A unique identifier for an object.

        :param id: The id of this ProfitAndLoss.
        :type id: str
        """

        self._id = id

    @property
    def income(self):
        """Gets the income of this ProfitAndLoss.


        :return: The income of this ProfitAndLoss.
        :rtype: ProfitAndLossIncome
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this ProfitAndLoss.


        :param income: The income of this ProfitAndLoss.
        :type income: ProfitAndLossIncome
        """
        if income is None:
            raise ValueError("Invalid value for `income`, must not be `None`")

        self._income = income

    @property
    def net_income(self):
        """Gets the net_income of this ProfitAndLoss.


        :return: The net_income of this ProfitAndLoss.
        :rtype: ProfitAndLossNetIncome
        """
        return self._net_income

    @net_income.setter
    def net_income(self, net_income):
        """Sets the net_income of this ProfitAndLoss.


        :param net_income: The net_income of this ProfitAndLoss.
        :type net_income: ProfitAndLossNetIncome
        """

        self._net_income = net_income

    @property
    def net_operating_income(self):
        """Gets the net_operating_income of this ProfitAndLoss.


        :return: The net_operating_income of this ProfitAndLoss.
        :rtype: ProfitAndLossNetOperatingIncome
        """
        return self._net_operating_income

    @net_operating_income.setter
    def net_operating_income(self, net_operating_income):
        """Sets the net_operating_income of this ProfitAndLoss.


        :param net_operating_income: The net_operating_income of this ProfitAndLoss.
        :type net_operating_income: ProfitAndLossNetOperatingIncome
        """

        self._net_operating_income = net_operating_income

    @property
    def report_name(self):
        """Gets the report_name of this ProfitAndLoss.

        The name of the report

        :return: The report_name of this ProfitAndLoss.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this ProfitAndLoss.

        The name of the report

        :param report_name: The report_name of this ProfitAndLoss.
        :type report_name: str
        """
        if report_name is None:
            raise ValueError("Invalid value for `report_name`, must not be `None`")

        self._report_name = report_name

    @property
    def start_date(self):
        """Gets the start_date of this ProfitAndLoss.

        The start date of the report

        :return: The start_date of this ProfitAndLoss.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ProfitAndLoss.

        The start date of the report

        :param start_date: The start_date of this ProfitAndLoss.
        :type start_date: str
        """
        if start_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}$', start_date):
            raise ValueError("Invalid value for `start_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}$/`")

        self._start_date = start_date
