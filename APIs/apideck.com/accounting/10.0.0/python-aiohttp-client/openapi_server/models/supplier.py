# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.currency import Currency
from openapi_server.models.email import Email
from openapi_server.models.linked_ledger_account import LinkedLedgerAccount
from openapi_server.models.linked_tax_rate import LinkedTaxRate
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.website import Website
from openapi_server import util


class Supplier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: LinkedLedgerAccount=None, addresses: List[Address]=None, bank_accounts: List[BankAccount]=None, channel: str=None, company_name: str=None, created_at: datetime=None, created_by: str=None, currency: Currency=None, custom_mappings: object=None, display_id: str=None, display_name: str=None, downstream_id: str=None, emails: List[Email]=None, first_name: str=None, id: str=None, individual: bool=None, last_name: str=None, middle_name: str=None, notes: str=None, payment_method: str=None, phone_numbers: List[PhoneNumber]=None, row_version: str=None, status: str=None, suffix: str=None, tax_number: str=None, tax_rate: LinkedTaxRate=None, title: str=None, updated_at: datetime=None, updated_by: str=None, websites: List[Website]=None):
        """Supplier - a model defined in OpenAPI

        :param account: The account of this Supplier.
        :param addresses: The addresses of this Supplier.
        :param bank_accounts: The bank_accounts of this Supplier.
        :param channel: The channel of this Supplier.
        :param company_name: The company_name of this Supplier.
        :param created_at: The created_at of this Supplier.
        :param created_by: The created_by of this Supplier.
        :param currency: The currency of this Supplier.
        :param custom_mappings: The custom_mappings of this Supplier.
        :param display_id: The display_id of this Supplier.
        :param display_name: The display_name of this Supplier.
        :param downstream_id: The downstream_id of this Supplier.
        :param emails: The emails of this Supplier.
        :param first_name: The first_name of this Supplier.
        :param id: The id of this Supplier.
        :param individual: The individual of this Supplier.
        :param last_name: The last_name of this Supplier.
        :param middle_name: The middle_name of this Supplier.
        :param notes: The notes of this Supplier.
        :param payment_method: The payment_method of this Supplier.
        :param phone_numbers: The phone_numbers of this Supplier.
        :param row_version: The row_version of this Supplier.
        :param status: The status of this Supplier.
        :param suffix: The suffix of this Supplier.
        :param tax_number: The tax_number of this Supplier.
        :param tax_rate: The tax_rate of this Supplier.
        :param title: The title of this Supplier.
        :param updated_at: The updated_at of this Supplier.
        :param updated_by: The updated_by of this Supplier.
        :param websites: The websites of this Supplier.
        """
        self.openapi_types = {
            'account': LinkedLedgerAccount,
            'addresses': List[Address],
            'bank_accounts': List[BankAccount],
            'channel': str,
            'company_name': str,
            'created_at': datetime,
            'created_by': str,
            'currency': Currency,
            'custom_mappings': object,
            'display_id': str,
            'display_name': str,
            'downstream_id': str,
            'emails': List[Email],
            'first_name': str,
            'id': str,
            'individual': bool,
            'last_name': str,
            'middle_name': str,
            'notes': str,
            'payment_method': str,
            'phone_numbers': List[PhoneNumber],
            'row_version': str,
            'status': str,
            'suffix': str,
            'tax_number': str,
            'tax_rate': LinkedTaxRate,
            'title': str,
            'updated_at': datetime,
            'updated_by': str,
            'websites': List[Website]
        }

        self.attribute_map = {
            'account': 'account',
            'addresses': 'addresses',
            'bank_accounts': 'bank_accounts',
            'channel': 'channel',
            'company_name': 'company_name',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'currency': 'currency',
            'custom_mappings': 'custom_mappings',
            'display_id': 'display_id',
            'display_name': 'display_name',
            'downstream_id': 'downstream_id',
            'emails': 'emails',
            'first_name': 'first_name',
            'id': 'id',
            'individual': 'individual',
            'last_name': 'last_name',
            'middle_name': 'middle_name',
            'notes': 'notes',
            'payment_method': 'payment_method',
            'phone_numbers': 'phone_numbers',
            'row_version': 'row_version',
            'status': 'status',
            'suffix': 'suffix',
            'tax_number': 'tax_number',
            'tax_rate': 'tax_rate',
            'title': 'title',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'websites': 'websites'
        }

        self._account = account
        self._addresses = addresses
        self._bank_accounts = bank_accounts
        self._channel = channel
        self._company_name = company_name
        self._created_at = created_at
        self._created_by = created_by
        self._currency = currency
        self._custom_mappings = custom_mappings
        self._display_id = display_id
        self._display_name = display_name
        self._downstream_id = downstream_id
        self._emails = emails
        self._first_name = first_name
        self._id = id
        self._individual = individual
        self._last_name = last_name
        self._middle_name = middle_name
        self._notes = notes
        self._payment_method = payment_method
        self._phone_numbers = phone_numbers
        self._row_version = row_version
        self._status = status
        self._suffix = suffix
        self._tax_number = tax_number
        self._tax_rate = tax_rate
        self._title = title
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._websites = websites

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Supplier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Supplier of this Supplier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Supplier.


        :return: The account of this Supplier.
        :rtype: LinkedLedgerAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Supplier.


        :param account: The account of this Supplier.
        :type account: LinkedLedgerAccount
        """

        self._account = account

    @property
    def addresses(self):
        """Gets the addresses of this Supplier.


        :return: The addresses of this Supplier.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Supplier.


        :param addresses: The addresses of this Supplier.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def bank_accounts(self):
        """Gets the bank_accounts of this Supplier.


        :return: The bank_accounts of this Supplier.
        :rtype: List[BankAccount]
        """
        return self._bank_accounts

    @bank_accounts.setter
    def bank_accounts(self, bank_accounts):
        """Sets the bank_accounts of this Supplier.


        :param bank_accounts: The bank_accounts of this Supplier.
        :type bank_accounts: List[BankAccount]
        """

        self._bank_accounts = bank_accounts

    @property
    def channel(self):
        """Gets the channel of this Supplier.

        The channel through which the transaction is processed.

        :return: The channel of this Supplier.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Supplier.

        The channel through which the transaction is processed.

        :param channel: The channel of this Supplier.
        :type channel: str
        """

        self._channel = channel

    @property
    def company_name(self):
        """Gets the company_name of this Supplier.

        The name of the company.

        :return: The company_name of this Supplier.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Supplier.

        The name of the company.

        :param company_name: The company_name of this Supplier.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def created_at(self):
        """Gets the created_at of this Supplier.

        The date and time when the object was created.

        :return: The created_at of this Supplier.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Supplier.

        The date and time when the object was created.

        :param created_at: The created_at of this Supplier.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Supplier.

        The user who created the object.

        :return: The created_by of this Supplier.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Supplier.

        The user who created the object.

        :param created_by: The created_by of this Supplier.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this Supplier.


        :return: The currency of this Supplier.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Supplier.


        :param currency: The currency of this Supplier.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Supplier.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Supplier.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Supplier.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Supplier.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def display_id(self):
        """Gets the display_id of this Supplier.

        Display ID

        :return: The display_id of this Supplier.
        :rtype: str
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this Supplier.

        Display ID

        :param display_id: The display_id of this Supplier.
        :type display_id: str
        """

        self._display_id = display_id

    @property
    def display_name(self):
        """Gets the display_name of this Supplier.

        Display name

        :return: The display_name of this Supplier.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Supplier.

        Display name

        :param display_name: The display_name of this Supplier.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def downstream_id(self):
        """Gets the downstream_id of this Supplier.

        The third-party API ID of original entity

        :return: The downstream_id of this Supplier.
        :rtype: str
        """
        return self._downstream_id

    @downstream_id.setter
    def downstream_id(self, downstream_id):
        """Sets the downstream_id of this Supplier.

        The third-party API ID of original entity

        :param downstream_id: The downstream_id of this Supplier.
        :type downstream_id: str
        """

        self._downstream_id = downstream_id

    @property
    def emails(self):
        """Gets the emails of this Supplier.


        :return: The emails of this Supplier.
        :rtype: List[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Supplier.


        :param emails: The emails of this Supplier.
        :type emails: List[Email]
        """

        self._emails = emails

    @property
    def first_name(self):
        """Gets the first_name of this Supplier.

        The first name of the person.

        :return: The first_name of this Supplier.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Supplier.

        The first name of the person.

        :param first_name: The first_name of this Supplier.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Supplier.

        A unique identifier for an object.

        :return: The id of this Supplier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Supplier.

        A unique identifier for an object.

        :param id: The id of this Supplier.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def individual(self):
        """Gets the individual of this Supplier.

        Is this an individual or business supplier

        :return: The individual of this Supplier.
        :rtype: bool
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this Supplier.

        Is this an individual or business supplier

        :param individual: The individual of this Supplier.
        :type individual: bool
        """

        self._individual = individual

    @property
    def last_name(self):
        """Gets the last_name of this Supplier.

        The last name of the person.

        :return: The last_name of this Supplier.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Supplier.

        The last name of the person.

        :param last_name: The last_name of this Supplier.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Supplier.

        Middle name of the person.

        :return: The middle_name of this Supplier.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Supplier.

        Middle name of the person.

        :param middle_name: The middle_name of this Supplier.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def notes(self):
        """Gets the notes of this Supplier.

        Some notes about this supplier

        :return: The notes of this Supplier.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Supplier.

        Some notes about this supplier

        :param notes: The notes of this Supplier.
        :type notes: str
        """

        self._notes = notes

    @property
    def payment_method(self):
        """Gets the payment_method of this Supplier.

        Payment method used for the transaction, such as cash, credit card, bank transfer, or check

        :return: The payment_method of this Supplier.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Supplier.

        Payment method used for the transaction, such as cash, credit card, bank transfer, or check

        :param payment_method: The payment_method of this Supplier.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Supplier.


        :return: The phone_numbers of this Supplier.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Supplier.


        :param phone_numbers: The phone_numbers of this Supplier.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def row_version(self):
        """Gets the row_version of this Supplier.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this Supplier.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this Supplier.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this Supplier.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def status(self):
        """Gets the status of this Supplier.

        Supplier status

        :return: The status of this Supplier.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Supplier.

        Supplier status

        :param status: The status of this Supplier.
        :type status: str
        """
        allowed_values = [None,"active", "inactive", "archived", "gdpr-erasure-request", "unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def suffix(self):
        """Gets the suffix of this Supplier.


        :return: The suffix of this Supplier.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Supplier.


        :param suffix: The suffix of this Supplier.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def tax_number(self):
        """Gets the tax_number of this Supplier.


        :return: The tax_number of this Supplier.
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this Supplier.


        :param tax_number: The tax_number of this Supplier.
        :type tax_number: str
        """

        self._tax_number = tax_number

    @property
    def tax_rate(self):
        """Gets the tax_rate of this Supplier.


        :return: The tax_rate of this Supplier.
        :rtype: LinkedTaxRate
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this Supplier.


        :param tax_rate: The tax_rate of this Supplier.
        :type tax_rate: LinkedTaxRate
        """

        self._tax_rate = tax_rate

    @property
    def title(self):
        """Gets the title of this Supplier.

        The job title of the person.

        :return: The title of this Supplier.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Supplier.

        The job title of the person.

        :param title: The title of this Supplier.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Supplier.

        The date and time when the object was last updated.

        :return: The updated_at of this Supplier.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Supplier.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Supplier.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Supplier.

        The user who last updated the object.

        :return: The updated_by of this Supplier.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Supplier.

        The user who last updated the object.

        :param updated_by: The updated_by of this Supplier.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def websites(self):
        """Gets the websites of this Supplier.


        :return: The websites of this Supplier.
        :rtype: List[Website]
        """
        return self._websites

    @websites.setter
    def websites(self, websites):
        """Sets the websites of this Supplier.


        :param websites: The websites of this Supplier.
        :type websites: List[Website]
        """

        self._websites = websites
