# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class LinkedSupplier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, company_name: str=None, display_id: str=None, display_name: str=None, id: str=None):
        """LinkedSupplier - a model defined in OpenAPI

        :param address: The address of this LinkedSupplier.
        :param company_name: The company_name of this LinkedSupplier.
        :param display_id: The display_id of this LinkedSupplier.
        :param display_name: The display_name of this LinkedSupplier.
        :param id: The id of this LinkedSupplier.
        """
        self.openapi_types = {
            'address': Address,
            'company_name': str,
            'display_id': str,
            'display_name': str,
            'id': str
        }

        self.attribute_map = {
            'address': 'address',
            'company_name': 'company_name',
            'display_id': 'display_id',
            'display_name': 'display_name',
            'id': 'id'
        }

        self._address = address
        self._company_name = company_name
        self._display_id = display_id
        self._display_name = display_name
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkedSupplier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkedSupplier of this LinkedSupplier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this LinkedSupplier.


        :return: The address of this LinkedSupplier.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LinkedSupplier.


        :param address: The address of this LinkedSupplier.
        :type address: Address
        """

        self._address = address

    @property
    def company_name(self):
        """Gets the company_name of this LinkedSupplier.

        The company name of the supplier.

        :return: The company_name of this LinkedSupplier.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this LinkedSupplier.

        The company name of the supplier.

        :param company_name: The company_name of this LinkedSupplier.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def display_id(self):
        """Gets the display_id of this LinkedSupplier.

        The display ID of the supplier.

        :return: The display_id of this LinkedSupplier.
        :rtype: str
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this LinkedSupplier.

        The display ID of the supplier.

        :param display_id: The display_id of this LinkedSupplier.
        :type display_id: str
        """

        self._display_id = display_id

    @property
    def display_name(self):
        """Gets the display_name of this LinkedSupplier.

        The display name of the supplier.

        :return: The display_name of this LinkedSupplier.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LinkedSupplier.

        The display name of the supplier.

        :param display_name: The display_name of this LinkedSupplier.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this LinkedSupplier.

        The ID of the supplier this entity is linked to.

        :return: The id of this LinkedSupplier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LinkedSupplier.

        The ID of the supplier this entity is linked to.

        :param id: The id of this LinkedSupplier.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
