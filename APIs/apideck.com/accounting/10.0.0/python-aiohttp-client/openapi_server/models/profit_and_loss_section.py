# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profit_and_loss_records_inner import ProfitAndLossRecordsInner
from openapi_server import util


class ProfitAndLossSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, records: List[ProfitAndLossRecordsInner]=None, title: str=None, total: float=None, type: str=None):
        """ProfitAndLossSection - a model defined in OpenAPI

        :param id: The id of this ProfitAndLossSection.
        :param records: The records of this ProfitAndLossSection.
        :param title: The title of this ProfitAndLossSection.
        :param total: The total of this ProfitAndLossSection.
        :param type: The type of this ProfitAndLossSection.
        """
        self.openapi_types = {
            'id': str,
            'records': List[ProfitAndLossRecordsInner],
            'title': str,
            'total': float,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'records': 'records',
            'title': 'title',
            'total': 'total',
            'type': 'type'
        }

        self._id = id
        self._records = records
        self._title = title
        self._total = total
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfitAndLossSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfitAndLossSection of this ProfitAndLossSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProfitAndLossSection.


        :return: The id of this ProfitAndLossSection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProfitAndLossSection.


        :param id: The id of this ProfitAndLossSection.
        :type id: str
        """

        self._id = id

    @property
    def records(self):
        """Gets the records of this ProfitAndLossSection.


        :return: The records of this ProfitAndLossSection.
        :rtype: List[ProfitAndLossRecordsInner]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this ProfitAndLossSection.


        :param records: The records of this ProfitAndLossSection.
        :type records: List[ProfitAndLossRecordsInner]
        """

        self._records = records

    @property
    def title(self):
        """Gets the title of this ProfitAndLossSection.


        :return: The title of this ProfitAndLossSection.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProfitAndLossSection.


        :param title: The title of this ProfitAndLossSection.
        :type title: str
        """

        self._title = title

    @property
    def total(self):
        """Gets the total of this ProfitAndLossSection.


        :return: The total of this ProfitAndLossSection.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ProfitAndLossSection.


        :param total: The total of this ProfitAndLossSection.
        :type total: float
        """

        self._total = total

    @property
    def type(self):
        """Gets the type of this ProfitAndLossSection.


        :return: The type of this ProfitAndLossSection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProfitAndLossSection.


        :param type: The type of this ProfitAndLossSection.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
