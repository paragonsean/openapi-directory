# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollectionUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, custom_mappings: object=None, email: str=None, first_name: str=None, id: str=None, last_name: str=None, name: str=None, photo_url: str=None, updated_at: datetime=None):
        """CollectionUser - a model defined in OpenAPI

        :param created_at: The created_at of this CollectionUser.
        :param custom_mappings: The custom_mappings of this CollectionUser.
        :param email: The email of this CollectionUser.
        :param first_name: The first_name of this CollectionUser.
        :param id: The id of this CollectionUser.
        :param last_name: The last_name of this CollectionUser.
        :param name: The name of this CollectionUser.
        :param photo_url: The photo_url of this CollectionUser.
        :param updated_at: The updated_at of this CollectionUser.
        """
        self.openapi_types = {
            'created_at': datetime,
            'custom_mappings': object,
            'email': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'name': str,
            'photo_url': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'custom_mappings': 'custom_mappings',
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'name': 'name',
            'photo_url': 'photo_url',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._custom_mappings = custom_mappings
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._name = name
        self._photo_url = photo_url
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionUser of this CollectionUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this CollectionUser.

        The date and time when the object was created.

        :return: The created_at of this CollectionUser.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CollectionUser.

        The date and time when the object was created.

        :param created_at: The created_at of this CollectionUser.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this CollectionUser.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this CollectionUser.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this CollectionUser.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this CollectionUser.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def email(self):
        """Gets the email of this CollectionUser.

        Email address of the user

        :return: The email of this CollectionUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CollectionUser.

        Email address of the user

        :param email: The email of this CollectionUser.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this CollectionUser.

        First name of the user

        :return: The first_name of this CollectionUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CollectionUser.

        First name of the user

        :param first_name: The first_name of this CollectionUser.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this CollectionUser.

        A unique identifier for an object.

        :return: The id of this CollectionUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionUser.

        A unique identifier for an object.

        :param id: The id of this CollectionUser.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this CollectionUser.

        Last name of the user

        :return: The last_name of this CollectionUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CollectionUser.

        Last name of the user

        :param last_name: The last_name of this CollectionUser.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this CollectionUser.

        Full name of the user

        :return: The name of this CollectionUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollectionUser.

        Full name of the user

        :param name: The name of this CollectionUser.
        :type name: str
        """

        self._name = name

    @property
    def photo_url(self):
        """Gets the photo_url of this CollectionUser.

        The URL of the photo of a person.

        :return: The photo_url of this CollectionUser.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this CollectionUser.

        The URL of the photo of a person.

        :param photo_url: The photo_url of this CollectionUser.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def updated_at(self):
        """Gets the updated_at of this CollectionUser.

        The date and time when the object was last updated.

        :return: The updated_at of this CollectionUser.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CollectionUser.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this CollectionUser.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
