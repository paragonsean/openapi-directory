# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignee import Assignee
from openapi_server.models.collection_tag import CollectionTag
from openapi_server import util


class Ticket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignees: List[Assignee]=None, collection_id: str=None, completed_at: datetime=None, created_at: datetime=None, created_by: str=None, custom_mappings: object=None, description: str=None, due_date: datetime=None, id: str=None, parent_id: str=None, priority: str=None, status: str=None, subject: str=None, tags: List[CollectionTag]=None, type: str=None, updated_at: datetime=None):
        """Ticket - a model defined in OpenAPI

        :param assignees: The assignees of this Ticket.
        :param collection_id: The collection_id of this Ticket.
        :param completed_at: The completed_at of this Ticket.
        :param created_at: The created_at of this Ticket.
        :param created_by: The created_by of this Ticket.
        :param custom_mappings: The custom_mappings of this Ticket.
        :param description: The description of this Ticket.
        :param due_date: The due_date of this Ticket.
        :param id: The id of this Ticket.
        :param parent_id: The parent_id of this Ticket.
        :param priority: The priority of this Ticket.
        :param status: The status of this Ticket.
        :param subject: The subject of this Ticket.
        :param tags: The tags of this Ticket.
        :param type: The type of this Ticket.
        :param updated_at: The updated_at of this Ticket.
        """
        self.openapi_types = {
            'assignees': List[Assignee],
            'collection_id': str,
            'completed_at': datetime,
            'created_at': datetime,
            'created_by': str,
            'custom_mappings': object,
            'description': str,
            'due_date': datetime,
            'id': str,
            'parent_id': str,
            'priority': str,
            'status': str,
            'subject': str,
            'tags': List[CollectionTag],
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'assignees': 'assignees',
            'collection_id': 'collection_id',
            'completed_at': 'completed_at',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_mappings': 'custom_mappings',
            'description': 'description',
            'due_date': 'due_date',
            'id': 'id',
            'parent_id': 'parent_id',
            'priority': 'priority',
            'status': 'status',
            'subject': 'subject',
            'tags': 'tags',
            'type': 'type',
            'updated_at': 'updated_at'
        }

        self._assignees = assignees
        self._collection_id = collection_id
        self._completed_at = completed_at
        self._created_at = created_at
        self._created_by = created_by
        self._custom_mappings = custom_mappings
        self._description = description
        self._due_date = due_date
        self._id = id
        self._parent_id = parent_id
        self._priority = priority
        self._status = status
        self._subject = subject
        self._tags = tags
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ticket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ticket of this Ticket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignees(self):
        """Gets the assignees of this Ticket.


        :return: The assignees of this Ticket.
        :rtype: List[Assignee]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this Ticket.


        :param assignees: The assignees of this Ticket.
        :type assignees: List[Assignee]
        """

        self._assignees = assignees

    @property
    def collection_id(self):
        """Gets the collection_id of this Ticket.

        The ticket's collection ID

        :return: The collection_id of this Ticket.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this Ticket.

        The ticket's collection ID

        :param collection_id: The collection_id of this Ticket.
        :type collection_id: str
        """

        self._collection_id = collection_id

    @property
    def completed_at(self):
        """Gets the completed_at of this Ticket.

        When the ticket was completed

        :return: The completed_at of this Ticket.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Ticket.

        When the ticket was completed

        :param completed_at: The completed_at of this Ticket.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this Ticket.

        The date and time when the object was created.

        :return: The created_at of this Ticket.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Ticket.

        The date and time when the object was created.

        :param created_at: The created_at of this Ticket.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Ticket.

        The user who created the object.

        :return: The created_by of this Ticket.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Ticket.

        The user who created the object.

        :param created_by: The created_by of this Ticket.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Ticket.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Ticket.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Ticket.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Ticket.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def description(self):
        """Gets the description of this Ticket.

        The ticket's description. HTML version of description is mapped if supported by the third-party platform

        :return: The description of this Ticket.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Ticket.

        The ticket's description. HTML version of description is mapped if supported by the third-party platform

        :param description: The description of this Ticket.
        :type description: str
        """

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this Ticket.

        Due date of the ticket

        :return: The due_date of this Ticket.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Ticket.

        Due date of the ticket

        :param due_date: The due_date of this Ticket.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this Ticket.

        A unique identifier for an object.

        :return: The id of this Ticket.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ticket.

        A unique identifier for an object.

        :param id: The id of this Ticket.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this Ticket.

        The ticket's parent ID

        :return: The parent_id of this Ticket.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Ticket.

        The ticket's parent ID

        :param parent_id: The parent_id of this Ticket.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def priority(self):
        """Gets the priority of this Ticket.

        Priority of the ticket

        :return: The priority of this Ticket.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Ticket.

        Priority of the ticket

        :param priority: The priority of this Ticket.
        :type priority: str
        """
        allowed_values = [None,"low", "normal", "high", "urgent"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this Ticket.

        The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.

        :return: The status of this Ticket.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Ticket.

        The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.

        :param status: The status of this Ticket.
        :type status: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this Ticket.

        Subject of the ticket

        :return: The subject of this Ticket.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Ticket.

        Subject of the ticket

        :param subject: The subject of this Ticket.
        :type subject: str
        """

        self._subject = subject

    @property
    def tags(self):
        """Gets the tags of this Ticket.


        :return: The tags of this Ticket.
        :rtype: List[CollectionTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Ticket.


        :param tags: The tags of this Ticket.
        :type tags: List[CollectionTag]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this Ticket.

        The ticket's type

        :return: The type of this Ticket.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ticket.

        The ticket's type

        :param type: The type of this Ticket.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Ticket.

        The date and time when the object was last updated.

        :return: The updated_at of this Ticket.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Ticket.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Ticket.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
