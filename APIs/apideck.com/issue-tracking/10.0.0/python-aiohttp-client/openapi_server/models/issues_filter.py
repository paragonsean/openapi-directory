# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuesFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee_id: str=None, since: datetime=None, status: list[str]=[]):
        """IssuesFilter - a model defined in OpenAPI

        :param assignee_id: The assignee_id of this IssuesFilter.
        :param since: The since of this IssuesFilter.
        :param status: The status of this IssuesFilter.
        """
        self.openapi_types = {
            'assignee_id': str,
            'since': datetime,
            'status': list[str]
        }

        self.attribute_map = {
            'assignee_id': 'assignee_id',
            'since': 'since',
            'status': 'status'
        }

        self._assignee_id = assignee_id
        self._since = since
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuesFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuesFilter of this IssuesFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee_id(self):
        """Gets the assignee_id of this IssuesFilter.

        Only return tickets assigned to a specific user

        :return: The assignee_id of this IssuesFilter.
        :rtype: str
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this IssuesFilter.

        Only return tickets assigned to a specific user

        :param assignee_id: The assignee_id of this IssuesFilter.
        :type assignee_id: str
        """

        self._assignee_id = assignee_id

    @property
    def since(self):
        """Gets the since of this IssuesFilter.

        Only return tickets since a specific date

        :return: The since of this IssuesFilter.
        :rtype: datetime
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this IssuesFilter.

        Only return tickets since a specific date

        :param since: The since of this IssuesFilter.
        :type since: datetime
        """

        self._since = since

    @property
    def status(self):
        """Gets the status of this IssuesFilter.

        Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match

        :return: The status of this IssuesFilter.
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IssuesFilter.

        Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match

        :param status: The status of this IssuesFilter.
        :type status: list[str]
        """

        self._status = status
