# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linked_folder import LinkedFolder
from openapi_server.models.owner import Owner
from openapi_server import util


class Folder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, created_by: str=None, custom_mappings: object=None, description: str=None, id: str=None, name: str=None, owner: Owner=None, parent_folders: List[LinkedFolder]=None, parent_folders_complete: bool=None, path: str=None, size: int=None, updated_at: datetime=None, updated_by: str=None):
        """Folder - a model defined in OpenAPI

        :param created_at: The created_at of this Folder.
        :param created_by: The created_by of this Folder.
        :param custom_mappings: The custom_mappings of this Folder.
        :param description: The description of this Folder.
        :param id: The id of this Folder.
        :param name: The name of this Folder.
        :param owner: The owner of this Folder.
        :param parent_folders: The parent_folders of this Folder.
        :param parent_folders_complete: The parent_folders_complete of this Folder.
        :param path: The path of this Folder.
        :param size: The size of this Folder.
        :param updated_at: The updated_at of this Folder.
        :param updated_by: The updated_by of this Folder.
        """
        self.openapi_types = {
            'created_at': datetime,
            'created_by': str,
            'custom_mappings': object,
            'description': str,
            'id': str,
            'name': str,
            'owner': Owner,
            'parent_folders': List[LinkedFolder],
            'parent_folders_complete': bool,
            'path': str,
            'size': int,
            'updated_at': datetime,
            'updated_by': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'created_by': 'created_by',
            'custom_mappings': 'custom_mappings',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'owner': 'owner',
            'parent_folders': 'parent_folders',
            'parent_folders_complete': 'parent_folders_complete',
            'path': 'path',
            'size': 'size',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by'
        }

        self._created_at = created_at
        self._created_by = created_by
        self._custom_mappings = custom_mappings
        self._description = description
        self._id = id
        self._name = name
        self._owner = owner
        self._parent_folders = parent_folders
        self._parent_folders_complete = parent_folders_complete
        self._path = path
        self._size = size
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Folder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Folder of this Folder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Folder.

        The date and time when the object was created.

        :return: The created_at of this Folder.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Folder.

        The date and time when the object was created.

        :param created_at: The created_at of this Folder.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Folder.

        The user who created the object.

        :return: The created_by of this Folder.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Folder.

        The user who created the object.

        :param created_by: The created_by of this Folder.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def custom_mappings(self):
        """Gets the custom_mappings of this Folder.

        When custom mappings are configured on the resource, the result is included here.

        :return: The custom_mappings of this Folder.
        :rtype: object
        """
        return self._custom_mappings

    @custom_mappings.setter
    def custom_mappings(self, custom_mappings):
        """Sets the custom_mappings of this Folder.

        When custom mappings are configured on the resource, the result is included here.

        :param custom_mappings: The custom_mappings of this Folder.
        :type custom_mappings: object
        """

        self._custom_mappings = custom_mappings

    @property
    def description(self):
        """Gets the description of this Folder.

        Optional description of the folder

        :return: The description of this Folder.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Folder.

        Optional description of the folder

        :param description: The description of this Folder.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Folder.

        A unique identifier for an object.

        :return: The id of this Folder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Folder.

        A unique identifier for an object.

        :param id: The id of this Folder.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Folder.

        The name of the folder

        :return: The name of this Folder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Folder.

        The name of the folder

        :param name: The name of this Folder.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Folder.


        :return: The owner of this Folder.
        :rtype: Owner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Folder.


        :param owner: The owner of this Folder.
        :type owner: Owner
        """

        self._owner = owner

    @property
    def parent_folders(self):
        """Gets the parent_folders of this Folder.

        The parent folders of the file, starting from the root

        :return: The parent_folders of this Folder.
        :rtype: List[LinkedFolder]
        """
        return self._parent_folders

    @parent_folders.setter
    def parent_folders(self, parent_folders):
        """Sets the parent_folders of this Folder.

        The parent folders of the file, starting from the root

        :param parent_folders: The parent_folders of this Folder.
        :type parent_folders: List[LinkedFolder]
        """
        if parent_folders is None:
            raise ValueError("Invalid value for `parent_folders`, must not be `None`")

        self._parent_folders = parent_folders

    @property
    def parent_folders_complete(self):
        """Gets the parent_folders_complete of this Folder.

        Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder

        :return: The parent_folders_complete of this Folder.
        :rtype: bool
        """
        return self._parent_folders_complete

    @parent_folders_complete.setter
    def parent_folders_complete(self, parent_folders_complete):
        """Sets the parent_folders_complete of this Folder.

        Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder

        :param parent_folders_complete: The parent_folders_complete of this Folder.
        :type parent_folders_complete: bool
        """

        self._parent_folders_complete = parent_folders_complete

    @property
    def path(self):
        """Gets the path of this Folder.

        The full path of the folder (includes the folder name)

        :return: The path of this Folder.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Folder.

        The full path of the folder (includes the folder name)

        :param path: The path of this Folder.
        :type path: str
        """

        self._path = path

    @property
    def size(self):
        """Gets the size of this Folder.

        The size of the folder in bytes

        :return: The size of this Folder.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Folder.

        The size of the folder in bytes

        :param size: The size of this Folder.
        :type size: int
        """

        self._size = size

    @property
    def updated_at(self):
        """Gets the updated_at of this Folder.

        The date and time when the object was last updated.

        :return: The updated_at of this Folder.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Folder.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this Folder.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Folder.

        The user who last updated the object.

        :return: The updated_by of this Folder.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Folder.

        The user who last updated the object.

        :param updated_by: The updated_by of this Folder.
        :type updated_by: str
        """

        self._updated_by = updated_by
