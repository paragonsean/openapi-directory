# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shared_link_target import SharedLinkTarget
from openapi_server import util


class SharedLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, download_url: str=None, expires_at: datetime=None, password: str=None, password_protected: bool=None, scope: str=None, target: SharedLinkTarget=None, target_id: str=None, updated_at: datetime=None, url: str=None):
        """SharedLink - a model defined in OpenAPI

        :param created_at: The created_at of this SharedLink.
        :param download_url: The download_url of this SharedLink.
        :param expires_at: The expires_at of this SharedLink.
        :param password: The password of this SharedLink.
        :param password_protected: The password_protected of this SharedLink.
        :param scope: The scope of this SharedLink.
        :param target: The target of this SharedLink.
        :param target_id: The target_id of this SharedLink.
        :param updated_at: The updated_at of this SharedLink.
        :param url: The url of this SharedLink.
        """
        self.openapi_types = {
            'created_at': datetime,
            'download_url': str,
            'expires_at': datetime,
            'password': str,
            'password_protected': bool,
            'scope': str,
            'target': SharedLinkTarget,
            'target_id': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'download_url': 'download_url',
            'expires_at': 'expires_at',
            'password': 'password',
            'password_protected': 'password_protected',
            'scope': 'scope',
            'target': 'target',
            'target_id': 'target_id',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._created_at = created_at
        self._download_url = download_url
        self._expires_at = expires_at
        self._password = password
        self._password_protected = password_protected
        self._scope = scope
        self._target = target
        self._target_id = target_id
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SharedLink of this SharedLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this SharedLink.

        The date and time when the object was created.

        :return: The created_at of this SharedLink.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SharedLink.

        The date and time when the object was created.

        :param created_at: The created_at of this SharedLink.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def download_url(self):
        """Gets the download_url of this SharedLink.

        The URL that can be used to download the file.

        :return: The download_url of this SharedLink.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this SharedLink.

        The URL that can be used to download the file.

        :param download_url: The download_url of this SharedLink.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def expires_at(self):
        """Gets the expires_at of this SharedLink.


        :return: The expires_at of this SharedLink.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this SharedLink.


        :param expires_at: The expires_at of this SharedLink.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def password(self):
        """Gets the password of this SharedLink.

        Optional password for the shared link.

        :return: The password of this SharedLink.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SharedLink.

        Optional password for the shared link.

        :param password: The password of this SharedLink.
        :type password: str
        """

        self._password = password

    @property
    def password_protected(self):
        """Gets the password_protected of this SharedLink.

        Indicated if the shared link is password protected.

        :return: The password_protected of this SharedLink.
        :rtype: bool
        """
        return self._password_protected

    @password_protected.setter
    def password_protected(self, password_protected):
        """Sets the password_protected of this SharedLink.

        Indicated if the shared link is password protected.

        :param password_protected: The password_protected of this SharedLink.
        :type password_protected: bool
        """

        self._password_protected = password_protected

    @property
    def scope(self):
        """Gets the scope of this SharedLink.

        The scope of the shared link.

        :return: The scope of this SharedLink.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this SharedLink.

        The scope of the shared link.

        :param scope: The scope of this SharedLink.
        :type scope: str
        """
        allowed_values = [None,"public", "company"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def target(self):
        """Gets the target of this SharedLink.


        :return: The target of this SharedLink.
        :rtype: SharedLinkTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this SharedLink.


        :param target: The target of this SharedLink.
        :type target: SharedLinkTarget
        """

        self._target = target

    @property
    def target_id(self):
        """Gets the target_id of this SharedLink.

        The ID of the file or folder to link.

        :return: The target_id of this SharedLink.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this SharedLink.

        The ID of the file or folder to link.

        :param target_id: The target_id of this SharedLink.
        :type target_id: str
        """
        if target_id is None:
            raise ValueError("Invalid value for `target_id`, must not be `None`")

        self._target_id = target_id

    @property
    def updated_at(self):
        """Gets the updated_at of this SharedLink.

        The date and time when the object was last updated.

        :return: The updated_at of this SharedLink.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SharedLink.

        The date and time when the object was last updated.

        :param updated_at: The updated_at of this SharedLink.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this SharedLink.

        The URL that can be used to view the file.

        :return: The url of this SharedLink.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SharedLink.

        The URL that can be used to view the file.

        :param url: The url of this SharedLink.
        :type url: str
        """

        self._url = url
