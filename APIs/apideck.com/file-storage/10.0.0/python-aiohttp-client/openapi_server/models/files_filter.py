# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FilesFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drive_id: str=None, folder_id: str=None, shared: bool=None):
        """FilesFilter - a model defined in OpenAPI

        :param drive_id: The drive_id of this FilesFilter.
        :param folder_id: The folder_id of this FilesFilter.
        :param shared: The shared of this FilesFilter.
        """
        self.openapi_types = {
            'drive_id': str,
            'folder_id': str,
            'shared': bool
        }

        self.attribute_map = {
            'drive_id': 'drive_id',
            'folder_id': 'folder_id',
            'shared': 'shared'
        }

        self._drive_id = drive_id
        self._folder_id = folder_id
        self._shared = shared

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilesFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilesFilter of this FilesFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drive_id(self):
        """Gets the drive_id of this FilesFilter.

        ID of the drive to filter on

        :return: The drive_id of this FilesFilter.
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this FilesFilter.

        ID of the drive to filter on

        :param drive_id: The drive_id of this FilesFilter.
        :type drive_id: str
        """

        self._drive_id = drive_id

    @property
    def folder_id(self):
        """Gets the folder_id of this FilesFilter.

        ID of the folder to filter on. The root folder has an alias \"root\"

        :return: The folder_id of this FilesFilter.
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this FilesFilter.

        ID of the folder to filter on. The root folder has an alias \"root\"

        :param folder_id: The folder_id of this FilesFilter.
        :type folder_id: str
        """

        self._folder_id = folder_id

    @property
    def shared(self):
        """Gets the shared of this FilesFilter.

        Only return files and folders that are shared

        :return: The shared of this FilesFilter.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this FilesFilter.

        Only return files and folders that are shared

        :param shared: The shared of this FilesFilter.
        :type shared: bool
        """

        self._shared = shared
