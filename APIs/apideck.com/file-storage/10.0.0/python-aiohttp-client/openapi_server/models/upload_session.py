# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_at: datetime=None, id: str=None, parallel_upload_supported: bool=None, part_size: float=None, success: bool=None, uploaded_byte_range: str=None):
        """UploadSession - a model defined in OpenAPI

        :param expires_at: The expires_at of this UploadSession.
        :param id: The id of this UploadSession.
        :param parallel_upload_supported: The parallel_upload_supported of this UploadSession.
        :param part_size: The part_size of this UploadSession.
        :param success: The success of this UploadSession.
        :param uploaded_byte_range: The uploaded_byte_range of this UploadSession.
        """
        self.openapi_types = {
            'expires_at': datetime,
            'id': str,
            'parallel_upload_supported': bool,
            'part_size': float,
            'success': bool,
            'uploaded_byte_range': str
        }

        self.attribute_map = {
            'expires_at': 'expires_at',
            'id': 'id',
            'parallel_upload_supported': 'parallel_upload_supported',
            'part_size': 'part_size',
            'success': 'success',
            'uploaded_byte_range': 'uploaded_byte_range'
        }

        self._expires_at = expires_at
        self._id = id
        self._parallel_upload_supported = parallel_upload_supported
        self._part_size = part_size
        self._success = success
        self._uploaded_byte_range = uploaded_byte_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadSession of this UploadSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_at(self):
        """Gets the expires_at of this UploadSession.


        :return: The expires_at of this UploadSession.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this UploadSession.


        :param expires_at: The expires_at of this UploadSession.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this UploadSession.

        A unique identifier for an object.

        :return: The id of this UploadSession.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UploadSession.

        A unique identifier for an object.

        :param id: The id of this UploadSession.
        :type id: str
        """

        self._id = id

    @property
    def parallel_upload_supported(self):
        """Gets the parallel_upload_supported of this UploadSession.

        Indicates if parts of the file can uploaded in parallel.

        :return: The parallel_upload_supported of this UploadSession.
        :rtype: bool
        """
        return self._parallel_upload_supported

    @parallel_upload_supported.setter
    def parallel_upload_supported(self, parallel_upload_supported):
        """Sets the parallel_upload_supported of this UploadSession.

        Indicates if parts of the file can uploaded in parallel.

        :param parallel_upload_supported: The parallel_upload_supported of this UploadSession.
        :type parallel_upload_supported: bool
        """

        self._parallel_upload_supported = parallel_upload_supported

    @property
    def part_size(self):
        """Gets the part_size of this UploadSession.

        Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.

        :return: The part_size of this UploadSession.
        :rtype: float
        """
        return self._part_size

    @part_size.setter
    def part_size(self, part_size):
        """Sets the part_size of this UploadSession.

        Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.

        :param part_size: The part_size of this UploadSession.
        :type part_size: float
        """

        self._part_size = part_size

    @property
    def success(self):
        """Gets the success of this UploadSession.

        Indicates if the upload session was completed successfully.

        :return: The success of this UploadSession.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this UploadSession.

        Indicates if the upload session was completed successfully.

        :param success: The success of this UploadSession.
        :type success: bool
        """

        self._success = success

    @property
    def uploaded_byte_range(self):
        """Gets the uploaded_byte_range of this UploadSession.

        The range of bytes that was successfully uploaded.

        :return: The uploaded_byte_range of this UploadSession.
        :rtype: str
        """
        return self._uploaded_byte_range

    @uploaded_byte_range.setter
    def uploaded_byte_range(self, uploaded_byte_range):
        """Sets the uploaded_byte_range of this UploadSession.

        The range of bytes that was successfully uploaded.

        :param uploaded_byte_range: The uploaded_byte_range of this UploadSession.
        :type uploaded_byte_range: str
        """

        self._uploaded_byte_range = uploaded_byte_range
