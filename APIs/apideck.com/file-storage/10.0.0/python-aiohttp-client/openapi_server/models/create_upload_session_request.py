# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateUploadSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drive_id: str=None, name: str=None, parent_folder_id: str=None, size: int=None):
        """CreateUploadSessionRequest - a model defined in OpenAPI

        :param drive_id: The drive_id of this CreateUploadSessionRequest.
        :param name: The name of this CreateUploadSessionRequest.
        :param parent_folder_id: The parent_folder_id of this CreateUploadSessionRequest.
        :param size: The size of this CreateUploadSessionRequest.
        """
        self.openapi_types = {
            'drive_id': str,
            'name': str,
            'parent_folder_id': str,
            'size': int
        }

        self.attribute_map = {
            'drive_id': 'drive_id',
            'name': 'name',
            'parent_folder_id': 'parent_folder_id',
            'size': 'size'
        }

        self._drive_id = drive_id
        self._name = name
        self._parent_folder_id = parent_folder_id
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUploadSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUploadSessionRequest of this CreateUploadSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drive_id(self):
        """Gets the drive_id of this CreateUploadSessionRequest.

        ID of the drive to upload to.

        :return: The drive_id of this CreateUploadSessionRequest.
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this CreateUploadSessionRequest.

        ID of the drive to upload to.

        :param drive_id: The drive_id of this CreateUploadSessionRequest.
        :type drive_id: str
        """

        self._drive_id = drive_id

    @property
    def name(self):
        """Gets the name of this CreateUploadSessionRequest.

        The name of the file.

        :return: The name of this CreateUploadSessionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUploadSessionRequest.

        The name of the file.

        :param name: The name of this CreateUploadSessionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this CreateUploadSessionRequest.

        The parent folder to create the new file within.

        :return: The parent_folder_id of this CreateUploadSessionRequest.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this CreateUploadSessionRequest.

        The parent folder to create the new file within.

        :param parent_folder_id: The parent_folder_id of this CreateUploadSessionRequest.
        :type parent_folder_id: str
        """
        if parent_folder_id is None:
            raise ValueError("Invalid value for `parent_folder_id`, must not be `None`")

        self._parent_folder_id = parent_folder_id

    @property
    def size(self):
        """Gets the size of this CreateUploadSessionRequest.

        The size of the file in bytes

        :return: The size of this CreateUploadSessionRequest.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreateUploadSessionRequest.

        The size of the file in bytes

        :param size: The size of this CreateUploadSessionRequest.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
