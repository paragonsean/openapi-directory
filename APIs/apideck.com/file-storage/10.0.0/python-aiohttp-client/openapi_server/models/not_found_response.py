# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.not_found_response_detail import NotFoundResponseDetail
from openapi_server import util


class NotFoundResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: NotFoundResponseDetail=None, error: str=None, message: str=None, ref: str=None, status_code: float=None, type_name: str=None):
        """NotFoundResponse - a model defined in OpenAPI

        :param detail: The detail of this NotFoundResponse.
        :param error: The error of this NotFoundResponse.
        :param message: The message of this NotFoundResponse.
        :param ref: The ref of this NotFoundResponse.
        :param status_code: The status_code of this NotFoundResponse.
        :param type_name: The type_name of this NotFoundResponse.
        """
        self.openapi_types = {
            'detail': NotFoundResponseDetail,
            'error': str,
            'message': str,
            'ref': str,
            'status_code': float,
            'type_name': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'error': 'error',
            'message': 'message',
            'ref': 'ref',
            'status_code': 'status_code',
            'type_name': 'type_name'
        }

        self._detail = detail
        self._error = error
        self._message = message
        self._ref = ref
        self._status_code = status_code
        self._type_name = type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotFoundResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotFoundResponse of this NotFoundResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this NotFoundResponse.


        :return: The detail of this NotFoundResponse.
        :rtype: NotFoundResponseDetail
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this NotFoundResponse.


        :param detail: The detail of this NotFoundResponse.
        :type detail: NotFoundResponseDetail
        """

        self._detail = detail

    @property
    def error(self):
        """Gets the error of this NotFoundResponse.

        Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)

        :return: The error of this NotFoundResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this NotFoundResponse.

        Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)

        :param error: The error of this NotFoundResponse.
        :type error: str
        """

        self._error = error

    @property
    def message(self):
        """Gets the message of this NotFoundResponse.

        A human-readable message providing more details about the error.

        :return: The message of this NotFoundResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NotFoundResponse.

        A human-readable message providing more details about the error.

        :param message: The message of this NotFoundResponse.
        :type message: str
        """

        self._message = message

    @property
    def ref(self):
        """Gets the ref of this NotFoundResponse.

        Link to documentation of error type

        :return: The ref of this NotFoundResponse.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this NotFoundResponse.

        Link to documentation of error type

        :param ref: The ref of this NotFoundResponse.
        :type ref: str
        """

        self._ref = ref

    @property
    def status_code(self):
        """Gets the status_code of this NotFoundResponse.

        HTTP status code

        :return: The status_code of this NotFoundResponse.
        :rtype: float
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this NotFoundResponse.

        HTTP status code

        :param status_code: The status_code of this NotFoundResponse.
        :type status_code: float
        """

        self._status_code = status_code

    @property
    def type_name(self):
        """Gets the type_name of this NotFoundResponse.

        The type of error returned

        :return: The type_name of this NotFoundResponse.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this NotFoundResponse.

        The type of error returned

        :param type_name: The type_name of this NotFoundResponse.
        :type type_name: str
        """

        self._type_name = type_name
