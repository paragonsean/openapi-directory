# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class BankAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, account_type: str=None, bank_code: str=None, bic: str=None, branch_identifier: str=None, bsb_number: str=None, currency: Currency=None, iban: str=None):
        """BankAccount - a model defined in OpenAPI

        :param account_name: The account_name of this BankAccount.
        :param account_number: The account_number of this BankAccount.
        :param account_type: The account_type of this BankAccount.
        :param bank_code: The bank_code of this BankAccount.
        :param bic: The bic of this BankAccount.
        :param branch_identifier: The branch_identifier of this BankAccount.
        :param bsb_number: The bsb_number of this BankAccount.
        :param currency: The currency of this BankAccount.
        :param iban: The iban of this BankAccount.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'account_type': str,
            'bank_code': str,
            'bic': str,
            'branch_identifier': str,
            'bsb_number': str,
            'currency': Currency,
            'iban': str
        }

        self.attribute_map = {
            'account_name': 'account_name',
            'account_number': 'account_number',
            'account_type': 'account_type',
            'bank_code': 'bank_code',
            'bic': 'bic',
            'branch_identifier': 'branch_identifier',
            'bsb_number': 'bsb_number',
            'currency': 'currency',
            'iban': 'iban'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._account_type = account_type
        self._bank_code = bank_code
        self._bic = bic
        self._branch_identifier = branch_identifier
        self._bsb_number = bsb_number
        self._currency = currency
        self._iban = iban

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccount of this BankAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this BankAccount.

        The name which you used in opening your bank account.

        :return: The account_name of this BankAccount.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this BankAccount.

        The name which you used in opening your bank account.

        :param account_name: The account_name of this BankAccount.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this BankAccount.

        A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.

        :return: The account_number of this BankAccount.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccount.

        A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.

        :param account_number: The account_number of this BankAccount.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def account_type(self):
        """Gets the account_type of this BankAccount.

        The type of bank account.

        :return: The account_type of this BankAccount.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this BankAccount.

        The type of bank account.

        :param account_type: The account_type of this BankAccount.
        :type account_type: str
        """
        allowed_values = [None,"bank_account", "credit_card", "other"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def bank_code(self):
        """Gets the bank_code of this BankAccount.

        A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.

        :return: The bank_code of this BankAccount.
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this BankAccount.

        A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.

        :param bank_code: The bank_code of this BankAccount.
        :type bank_code: str
        """

        self._bank_code = bank_code

    @property
    def bic(self):
        """Gets the bic of this BankAccount.


        :return: The bic of this BankAccount.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this BankAccount.


        :param bic: The bic of this BankAccount.
        :type bic: str
        """

        self._bic = bic

    @property
    def branch_identifier(self):
        """Gets the branch_identifier of this BankAccount.

        A branch identifier is a unique identifier for a branch of a bank or financial institution.

        :return: The branch_identifier of this BankAccount.
        :rtype: str
        """
        return self._branch_identifier

    @branch_identifier.setter
    def branch_identifier(self, branch_identifier):
        """Sets the branch_identifier of this BankAccount.

        A branch identifier is a unique identifier for a branch of a bank or financial institution.

        :param branch_identifier: The branch_identifier of this BankAccount.
        :type branch_identifier: str
        """

        self._branch_identifier = branch_identifier

    @property
    def bsb_number(self):
        """Gets the bsb_number of this BankAccount.

        A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.

        :return: The bsb_number of this BankAccount.
        :rtype: str
        """
        return self._bsb_number

    @bsb_number.setter
    def bsb_number(self, bsb_number):
        """Sets the bsb_number of this BankAccount.

        A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.

        :param bsb_number: The bsb_number of this BankAccount.
        :type bsb_number: str
        """

        self._bsb_number = bsb_number

    @property
    def currency(self):
        """Gets the currency of this BankAccount.


        :return: The currency of this BankAccount.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankAccount.


        :param currency: The currency of this BankAccount.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def iban(self):
        """Gets the iban of this BankAccount.


        :return: The iban of this BankAccount.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this BankAccount.


        :param iban: The iban of this BankAccount.
        :type iban: str
        """

        self._iban = iban
