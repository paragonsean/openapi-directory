# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, contact_name: str=None, country: str=None, county: str=None, email: str=None, fax: str=None, id: str=None, latitude: str=None, line1: str=None, line2: str=None, line3: str=None, line4: str=None, longitude: str=None, name: str=None, phone_number: str=None, postal_code: str=None, row_version: str=None, salutation: str=None, state: str=None, street_number: str=None, string: str=None, type: str=None, website: str=None):
        """Address - a model defined in OpenAPI

        :param city: The city of this Address.
        :param contact_name: The contact_name of this Address.
        :param country: The country of this Address.
        :param county: The county of this Address.
        :param email: The email of this Address.
        :param fax: The fax of this Address.
        :param id: The id of this Address.
        :param latitude: The latitude of this Address.
        :param line1: The line1 of this Address.
        :param line2: The line2 of this Address.
        :param line3: The line3 of this Address.
        :param line4: The line4 of this Address.
        :param longitude: The longitude of this Address.
        :param name: The name of this Address.
        :param phone_number: The phone_number of this Address.
        :param postal_code: The postal_code of this Address.
        :param row_version: The row_version of this Address.
        :param salutation: The salutation of this Address.
        :param state: The state of this Address.
        :param street_number: The street_number of this Address.
        :param string: The string of this Address.
        :param type: The type of this Address.
        :param website: The website of this Address.
        """
        self.openapi_types = {
            'city': str,
            'contact_name': str,
            'country': str,
            'county': str,
            'email': str,
            'fax': str,
            'id': str,
            'latitude': str,
            'line1': str,
            'line2': str,
            'line3': str,
            'line4': str,
            'longitude': str,
            'name': str,
            'phone_number': str,
            'postal_code': str,
            'row_version': str,
            'salutation': str,
            'state': str,
            'street_number': str,
            'string': str,
            'type': str,
            'website': str
        }

        self.attribute_map = {
            'city': 'city',
            'contact_name': 'contact_name',
            'country': 'country',
            'county': 'county',
            'email': 'email',
            'fax': 'fax',
            'id': 'id',
            'latitude': 'latitude',
            'line1': 'line1',
            'line2': 'line2',
            'line3': 'line3',
            'line4': 'line4',
            'longitude': 'longitude',
            'name': 'name',
            'phone_number': 'phone_number',
            'postal_code': 'postal_code',
            'row_version': 'row_version',
            'salutation': 'salutation',
            'state': 'state',
            'street_number': 'street_number',
            'string': 'string',
            'type': 'type',
            'website': 'website'
        }

        self._city = city
        self._contact_name = contact_name
        self._country = country
        self._county = county
        self._email = email
        self._fax = fax
        self._id = id
        self._latitude = latitude
        self._line1 = line1
        self._line2 = line2
        self._line3 = line3
        self._line4 = line4
        self._longitude = longitude
        self._name = name
        self._phone_number = phone_number
        self._postal_code = postal_code
        self._row_version = row_version
        self._salutation = salutation
        self._state = state
        self._street_number = street_number
        self._string = string
        self._type = type
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address.

        Name of city.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        Name of city.

        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def contact_name(self):
        """Gets the contact_name of this Address.


        :return: The contact_name of this Address.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this Address.


        :param contact_name: The contact_name of this Address.
        :type contact_name: str
        """

        self._contact_name = contact_name

    @property
    def country(self):
        """Gets the country of this Address.

        country code according to ISO 3166-1 alpha-2.

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        country code according to ISO 3166-1 alpha-2.

        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this Address.

        Address field that holds a sublocality, such as a county

        :return: The county of this Address.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Address.

        Address field that holds a sublocality, such as a county

        :param county: The county of this Address.
        :type county: str
        """

        self._county = county

    @property
    def email(self):
        """Gets the email of this Address.


        :return: The email of this Address.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Address.


        :param email: The email of this Address.
        :type email: str
        """

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this Address.


        :return: The fax of this Address.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Address.


        :param fax: The fax of this Address.
        :type fax: str
        """

        self._fax = fax

    @property
    def id(self):
        """Gets the id of this Address.


        :return: The id of this Address.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.


        :param id: The id of this Address.
        :type id: str
        """

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this Address.


        :return: The latitude of this Address.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Address.


        :param latitude: The latitude of this Address.
        :type latitude: str
        """

        self._latitude = latitude

    @property
    def line1(self):
        """Gets the line1 of this Address.

        Line 1 of the address e.g. number, street, suite, apt #, etc.

        :return: The line1 of this Address.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this Address.

        Line 1 of the address e.g. number, street, suite, apt #, etc.

        :param line1: The line1 of this Address.
        :type line1: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this Address.

        Line 2 of the address

        :return: The line2 of this Address.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this Address.

        Line 2 of the address

        :param line2: The line2 of this Address.
        :type line2: str
        """

        self._line2 = line2

    @property
    def line3(self):
        """Gets the line3 of this Address.

        Line 3 of the address

        :return: The line3 of this Address.
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """Sets the line3 of this Address.

        Line 3 of the address

        :param line3: The line3 of this Address.
        :type line3: str
        """

        self._line3 = line3

    @property
    def line4(self):
        """Gets the line4 of this Address.

        Line 4 of the address

        :return: The line4 of this Address.
        :rtype: str
        """
        return self._line4

    @line4.setter
    def line4(self, line4):
        """Sets the line4 of this Address.

        Line 4 of the address

        :param line4: The line4 of this Address.
        :type line4: str
        """

        self._line4 = line4

    @property
    def longitude(self):
        """Gets the longitude of this Address.


        :return: The longitude of this Address.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Address.


        :param longitude: The longitude of this Address.
        :type longitude: str
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this Address.


        :return: The name of this Address.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.


        :param name: The name of this Address.
        :type name: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this Address.


        :return: The phone_number of this Address.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Address.


        :param phone_number: The phone_number of this Address.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        Zip code or equivalent.

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Zip code or equivalent.

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def row_version(self):
        """Gets the row_version of this Address.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :return: The row_version of this Address.
        :rtype: str
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this Address.

        A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.

        :param row_version: The row_version of this Address.
        :type row_version: str
        """

        self._row_version = row_version

    @property
    def salutation(self):
        """Gets the salutation of this Address.


        :return: The salutation of this Address.
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this Address.


        :param salutation: The salutation of this Address.
        :type salutation: str
        """

        self._salutation = salutation

    @property
    def state(self):
        """Gets the state of this Address.

        Name of state

        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.

        Name of state

        :param state: The state of this Address.
        :type state: str
        """

        self._state = state

    @property
    def street_number(self):
        """Gets the street_number of this Address.

        Street number

        :return: The street_number of this Address.
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this Address.

        Street number

        :param street_number: The street_number of this Address.
        :type street_number: str
        """

        self._street_number = street_number

    @property
    def string(self):
        """Gets the string of this Address.


        :return: The string of this Address.
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this Address.


        :param string: The string of this Address.
        :type string: str
        """

        self._string = string

    @property
    def type(self):
        """Gets the type of this Address.


        :return: The type of this Address.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Address.


        :param type: The type of this Address.
        :type type: str
        """
        allowed_values = ["primary", "secondary", "home", "office", "shipping", "billing", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def website(self):
        """Gets the website of this Address.


        :return: The website of this Address.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Address.


        :param website: The website of this Address.
        :type website: str
        """

        self._website = website
