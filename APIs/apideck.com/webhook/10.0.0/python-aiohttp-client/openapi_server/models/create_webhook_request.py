# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server.models.unified_api_id import UnifiedApiId
from openapi_server.models.webhook_event_type import WebhookEventType
import re
from openapi_server import util


class CreateWebhookRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_url: str=None, description: str=None, events: List[WebhookEventType]=None, status: Status=None, unified_api: UnifiedApiId=None):
        """CreateWebhookRequest - a model defined in OpenAPI

        :param delivery_url: The delivery_url of this CreateWebhookRequest.
        :param description: The description of this CreateWebhookRequest.
        :param events: The events of this CreateWebhookRequest.
        :param status: The status of this CreateWebhookRequest.
        :param unified_api: The unified_api of this CreateWebhookRequest.
        """
        self.openapi_types = {
            'delivery_url': str,
            'description': str,
            'events': List[WebhookEventType],
            'status': Status,
            'unified_api': UnifiedApiId
        }

        self.attribute_map = {
            'delivery_url': 'delivery_url',
            'description': 'description',
            'events': 'events',
            'status': 'status',
            'unified_api': 'unified_api'
        }

        self._delivery_url = delivery_url
        self._description = description
        self._events = events
        self._status = status
        self._unified_api = unified_api

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWebhookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWebhookRequest of this CreateWebhookRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_url(self):
        """Gets the delivery_url of this CreateWebhookRequest.

        The delivery url of the webhook endpoint.

        :return: The delivery_url of this CreateWebhookRequest.
        :rtype: str
        """
        return self._delivery_url

    @delivery_url.setter
    def delivery_url(self, delivery_url):
        """Sets the delivery_url of this CreateWebhookRequest.

        The delivery url of the webhook endpoint.

        :param delivery_url: The delivery_url of this CreateWebhookRequest.
        :type delivery_url: str
        """
        if delivery_url is None:
            raise ValueError("Invalid value for `delivery_url`, must not be `None`")
        if delivery_url is not None and not re.search(r'^(https?):\/\/', delivery_url):
            raise ValueError("Invalid value for `delivery_url`, must be a follow pattern or equal to `/^(https?):\/\//`")

        self._delivery_url = delivery_url

    @property
    def description(self):
        """Gets the description of this CreateWebhookRequest.

        A description of the object.

        :return: The description of this CreateWebhookRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateWebhookRequest.

        A description of the object.

        :param description: The description of this CreateWebhookRequest.
        :type description: str
        """

        self._description = description

    @property
    def events(self):
        """Gets the events of this CreateWebhookRequest.

        The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.

        :return: The events of this CreateWebhookRequest.
        :rtype: List[WebhookEventType]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this CreateWebhookRequest.

        The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.

        :param events: The events of this CreateWebhookRequest.
        :type events: List[WebhookEventType]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def status(self):
        """Gets the status of this CreateWebhookRequest.


        :return: The status of this CreateWebhookRequest.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateWebhookRequest.


        :param status: The status of this CreateWebhookRequest.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def unified_api(self):
        """Gets the unified_api of this CreateWebhookRequest.


        :return: The unified_api of this CreateWebhookRequest.
        :rtype: UnifiedApiId
        """
        return self._unified_api

    @unified_api.setter
    def unified_api(self, unified_api):
        """Sets the unified_api of this CreateWebhookRequest.


        :param unified_api: The unified_api of this CreateWebhookRequest.
        :type unified_api: UnifiedApiId
        """
        if unified_api is None:
            raise ValueError("Invalid value for `unified_api`, must not be `None`")

        self._unified_api = unified_api
