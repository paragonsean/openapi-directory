# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook_event_logs_filter_service import WebhookEventLogsFilterService
from openapi_server import util


class WebhookEventLogsFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_id: str=None, entity_type: str=None, event_type: str=None, exclude_apis: str=None, service: WebhookEventLogsFilterService=None):
        """WebhookEventLogsFilter - a model defined in OpenAPI

        :param consumer_id: The consumer_id of this WebhookEventLogsFilter.
        :param entity_type: The entity_type of this WebhookEventLogsFilter.
        :param event_type: The event_type of this WebhookEventLogsFilter.
        :param exclude_apis: The exclude_apis of this WebhookEventLogsFilter.
        :param service: The service of this WebhookEventLogsFilter.
        """
        self.openapi_types = {
            'consumer_id': str,
            'entity_type': str,
            'event_type': str,
            'exclude_apis': str,
            'service': WebhookEventLogsFilterService
        }

        self.attribute_map = {
            'consumer_id': 'consumer_id',
            'entity_type': 'entity_type',
            'event_type': 'event_type',
            'exclude_apis': 'exclude_apis',
            'service': 'service'
        }

        self._consumer_id = consumer_id
        self._entity_type = entity_type
        self._event_type = event_type
        self._exclude_apis = exclude_apis
        self._service = service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookEventLogsFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookEventLogsFilter of this WebhookEventLogsFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_id(self):
        """Gets the consumer_id of this WebhookEventLogsFilter.


        :return: The consumer_id of this WebhookEventLogsFilter.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this WebhookEventLogsFilter.


        :param consumer_id: The consumer_id of this WebhookEventLogsFilter.
        :type consumer_id: str
        """

        self._consumer_id = consumer_id

    @property
    def entity_type(self):
        """Gets the entity_type of this WebhookEventLogsFilter.


        :return: The entity_type of this WebhookEventLogsFilter.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this WebhookEventLogsFilter.


        :param entity_type: The entity_type of this WebhookEventLogsFilter.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def event_type(self):
        """Gets the event_type of this WebhookEventLogsFilter.


        :return: The event_type of this WebhookEventLogsFilter.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this WebhookEventLogsFilter.


        :param event_type: The event_type of this WebhookEventLogsFilter.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def exclude_apis(self):
        """Gets the exclude_apis of this WebhookEventLogsFilter.


        :return: The exclude_apis of this WebhookEventLogsFilter.
        :rtype: str
        """
        return self._exclude_apis

    @exclude_apis.setter
    def exclude_apis(self, exclude_apis):
        """Sets the exclude_apis of this WebhookEventLogsFilter.


        :param exclude_apis: The exclude_apis of this WebhookEventLogsFilter.
        :type exclude_apis: str
        """

        self._exclude_apis = exclude_apis

    @property
    def service(self):
        """Gets the service of this WebhookEventLogsFilter.


        :return: The service of this WebhookEventLogsFilter.
        :rtype: WebhookEventLogsFilterService
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this WebhookEventLogsFilter.


        :param service: The service of this WebhookEventLogsFilter.
        :type service: WebhookEventLogsFilterService
        """

        self._service = service
