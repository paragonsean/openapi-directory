# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unified_api_id import UnifiedApiId
from openapi_server.models.webhook_event_log_attempts_inner import WebhookEventLogAttemptsInner
from openapi_server.models.webhook_event_log_service import WebhookEventLogService
import re
from openapi_server import util


class WebhookEventLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, attempts: List[WebhookEventLogAttemptsInner]=None, consumer_id: str=None, endpoint: str=None, entity_type: str=None, event_type: str=None, execution_attempt: float=None, http_method: str=None, id: str=None, request_body: str=None, response_body: str=None, retry_scheduled: bool=None, service: WebhookEventLogService=None, status_code: int=None, success: bool=None, timestamp: str=None, unified_api: UnifiedApiId=None):
        """WebhookEventLog - a model defined in OpenAPI

        :param application_id: The application_id of this WebhookEventLog.
        :param attempts: The attempts of this WebhookEventLog.
        :param consumer_id: The consumer_id of this WebhookEventLog.
        :param endpoint: The endpoint of this WebhookEventLog.
        :param entity_type: The entity_type of this WebhookEventLog.
        :param event_type: The event_type of this WebhookEventLog.
        :param execution_attempt: The execution_attempt of this WebhookEventLog.
        :param http_method: The http_method of this WebhookEventLog.
        :param id: The id of this WebhookEventLog.
        :param request_body: The request_body of this WebhookEventLog.
        :param response_body: The response_body of this WebhookEventLog.
        :param retry_scheduled: The retry_scheduled of this WebhookEventLog.
        :param service: The service of this WebhookEventLog.
        :param status_code: The status_code of this WebhookEventLog.
        :param success: The success of this WebhookEventLog.
        :param timestamp: The timestamp of this WebhookEventLog.
        :param unified_api: The unified_api of this WebhookEventLog.
        """
        self.openapi_types = {
            'application_id': str,
            'attempts': List[WebhookEventLogAttemptsInner],
            'consumer_id': str,
            'endpoint': str,
            'entity_type': str,
            'event_type': str,
            'execution_attempt': float,
            'http_method': str,
            'id': str,
            'request_body': str,
            'response_body': str,
            'retry_scheduled': bool,
            'service': WebhookEventLogService,
            'status_code': int,
            'success': bool,
            'timestamp': str,
            'unified_api': UnifiedApiId
        }

        self.attribute_map = {
            'application_id': 'application_id',
            'attempts': 'attempts',
            'consumer_id': 'consumer_id',
            'endpoint': 'endpoint',
            'entity_type': 'entity_type',
            'event_type': 'event_type',
            'execution_attempt': 'execution_attempt',
            'http_method': 'http_method',
            'id': 'id',
            'request_body': 'request_body',
            'response_body': 'response_body',
            'retry_scheduled': 'retry_scheduled',
            'service': 'service',
            'status_code': 'status_code',
            'success': 'success',
            'timestamp': 'timestamp',
            'unified_api': 'unified_api'
        }

        self._application_id = application_id
        self._attempts = attempts
        self._consumer_id = consumer_id
        self._endpoint = endpoint
        self._entity_type = entity_type
        self._event_type = event_type
        self._execution_attempt = execution_attempt
        self._http_method = http_method
        self._id = id
        self._request_body = request_body
        self._response_body = response_body
        self._retry_scheduled = retry_scheduled
        self._service = service
        self._status_code = status_code
        self._success = success
        self._timestamp = timestamp
        self._unified_api = unified_api

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookEventLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookEventLog of this WebhookEventLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this WebhookEventLog.

        ID of your Apideck Application

        :return: The application_id of this WebhookEventLog.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this WebhookEventLog.

        ID of your Apideck Application

        :param application_id: The application_id of this WebhookEventLog.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def attempts(self):
        """Gets the attempts of this WebhookEventLog.

        record of each attempt to call webhook endpoint

        :return: The attempts of this WebhookEventLog.
        :rtype: List[WebhookEventLogAttemptsInner]
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this WebhookEventLog.

        record of each attempt to call webhook endpoint

        :param attempts: The attempts of this WebhookEventLog.
        :type attempts: List[WebhookEventLogAttemptsInner]
        """

        self._attempts = attempts

    @property
    def consumer_id(self):
        """Gets the consumer_id of this WebhookEventLog.

        Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.

        :return: The consumer_id of this WebhookEventLog.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this WebhookEventLog.

        Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.

        :param consumer_id: The consumer_id of this WebhookEventLog.
        :type consumer_id: str
        """

        self._consumer_id = consumer_id

    @property
    def endpoint(self):
        """Gets the endpoint of this WebhookEventLog.

        The URL of the webhook endpoint.

        :return: The endpoint of this WebhookEventLog.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this WebhookEventLog.

        The URL of the webhook endpoint.

        :param endpoint: The endpoint of this WebhookEventLog.
        :type endpoint: str
        """
        if endpoint is not None and not re.search(r'^(https?):\/\/', endpoint):
            raise ValueError("Invalid value for `endpoint`, must be a follow pattern or equal to `/^(https?):\/\//`")

        self._endpoint = endpoint

    @property
    def entity_type(self):
        """Gets the entity_type of this WebhookEventLog.

        Name of the Entity described by the attributes delivered within payload

        :return: The entity_type of this WebhookEventLog.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this WebhookEventLog.

        Name of the Entity described by the attributes delivered within payload

        :param entity_type: The entity_type of this WebhookEventLog.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def event_type(self):
        """Gets the event_type of this WebhookEventLog.

        Name of source event that webhook is subscribed to.

        :return: The event_type of this WebhookEventLog.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this WebhookEventLog.

        Name of source event that webhook is subscribed to.

        :param event_type: The event_type of this WebhookEventLog.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def execution_attempt(self):
        """Gets the execution_attempt of this WebhookEventLog.

        Number of attempts webhook endpoint was called before a success was returned or eventually failed

        :return: The execution_attempt of this WebhookEventLog.
        :rtype: float
        """
        return self._execution_attempt

    @execution_attempt.setter
    def execution_attempt(self, execution_attempt):
        """Sets the execution_attempt of this WebhookEventLog.

        Number of attempts webhook endpoint was called before a success was returned or eventually failed

        :param execution_attempt: The execution_attempt of this WebhookEventLog.
        :type execution_attempt: float
        """

        self._execution_attempt = execution_attempt

    @property
    def http_method(self):
        """Gets the http_method of this WebhookEventLog.

        HTTP Method of request to endpoint.

        :return: The http_method of this WebhookEventLog.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this WebhookEventLog.

        HTTP Method of request to endpoint.

        :param http_method: The http_method of this WebhookEventLog.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def id(self):
        """Gets the id of this WebhookEventLog.


        :return: The id of this WebhookEventLog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookEventLog.


        :param id: The id of this WebhookEventLog.
        :type id: str
        """

        self._id = id

    @property
    def request_body(self):
        """Gets the request_body of this WebhookEventLog.

        The JSON stringified payload that was delivered to the webhook endpoint.

        :return: The request_body of this WebhookEventLog.
        :rtype: str
        """
        return self._request_body

    @request_body.setter
    def request_body(self, request_body):
        """Sets the request_body of this WebhookEventLog.

        The JSON stringified payload that was delivered to the webhook endpoint.

        :param request_body: The request_body of this WebhookEventLog.
        :type request_body: str
        """

        self._request_body = request_body

    @property
    def response_body(self):
        """Gets the response_body of this WebhookEventLog.

        The JSON stringified response that was returned from the webhook endpoint.

        :return: The response_body of this WebhookEventLog.
        :rtype: str
        """
        return self._response_body

    @response_body.setter
    def response_body(self, response_body):
        """Sets the response_body of this WebhookEventLog.

        The JSON stringified response that was returned from the webhook endpoint.

        :param response_body: The response_body of this WebhookEventLog.
        :type response_body: str
        """

        self._response_body = response_body

    @property
    def retry_scheduled(self):
        """Gets the retry_scheduled of this WebhookEventLog.

        If the request has not hit the max retry limit and will be retried.

        :return: The retry_scheduled of this WebhookEventLog.
        :rtype: bool
        """
        return self._retry_scheduled

    @retry_scheduled.setter
    def retry_scheduled(self, retry_scheduled):
        """Sets the retry_scheduled of this WebhookEventLog.

        If the request has not hit the max retry limit and will be retried.

        :param retry_scheduled: The retry_scheduled of this WebhookEventLog.
        :type retry_scheduled: bool
        """

        self._retry_scheduled = retry_scheduled

    @property
    def service(self):
        """Gets the service of this WebhookEventLog.


        :return: The service of this WebhookEventLog.
        :rtype: WebhookEventLogService
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this WebhookEventLog.


        :param service: The service of this WebhookEventLog.
        :type service: WebhookEventLogService
        """

        self._service = service

    @property
    def status_code(self):
        """Gets the status_code of this WebhookEventLog.

        HTTP Status code that was returned.

        :return: The status_code of this WebhookEventLog.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this WebhookEventLog.

        HTTP Status code that was returned.

        :param status_code: The status_code of this WebhookEventLog.
        :type status_code: int
        """

        self._status_code = status_code

    @property
    def success(self):
        """Gets the success of this WebhookEventLog.

        Whether or not the request was successful.

        :return: The success of this WebhookEventLog.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this WebhookEventLog.

        Whether or not the request was successful.

        :param success: The success of this WebhookEventLog.
        :type success: bool
        """

        self._success = success

    @property
    def timestamp(self):
        """Gets the timestamp of this WebhookEventLog.

        ISO Date and time when the request was made.

        :return: The timestamp of this WebhookEventLog.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this WebhookEventLog.

        ISO Date and time when the request was made.

        :param timestamp: The timestamp of this WebhookEventLog.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def unified_api(self):
        """Gets the unified_api of this WebhookEventLog.


        :return: The unified_api of this WebhookEventLog.
        :rtype: UnifiedApiId
        """
        return self._unified_api

    @unified_api.setter
    def unified_api(self, unified_api):
        """Sets the unified_api of this WebhookEventLog.


        :param unified_api: The unified_api of this WebhookEventLog.
        :type unified_api: UnifiedApiId
        """

        self._unified_api = unified_api
