# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecuteWebhookResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None, status: str=None, status_code: int=None, timestamp: str=None):
        """ExecuteWebhookResponse - a model defined in OpenAPI

        :param request_id: The request_id of this ExecuteWebhookResponse.
        :param status: The status of this ExecuteWebhookResponse.
        :param status_code: The status_code of this ExecuteWebhookResponse.
        :param timestamp: The timestamp of this ExecuteWebhookResponse.
        """
        self.openapi_types = {
            'request_id': str,
            'status': str,
            'status_code': int,
            'timestamp': str
        }

        self.attribute_map = {
            'request_id': 'request_id',
            'status': 'status',
            'status_code': 'status_code',
            'timestamp': 'timestamp'
        }

        self._request_id = request_id
        self._status = status
        self._status_code = status_code
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteWebhookResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteWebhookResponse of this ExecuteWebhookResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this ExecuteWebhookResponse.

        UUID of the request received

        :return: The request_id of this ExecuteWebhookResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ExecuteWebhookResponse.

        UUID of the request received

        :param request_id: The request_id of this ExecuteWebhookResponse.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this ExecuteWebhookResponse.

        HTTP Response Status

        :return: The status of this ExecuteWebhookResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExecuteWebhookResponse.

        HTTP Response Status

        :param status: The status of this ExecuteWebhookResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_code(self):
        """Gets the status_code of this ExecuteWebhookResponse.

        HTTP Response Status Code

        :return: The status_code of this ExecuteWebhookResponse.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ExecuteWebhookResponse.

        HTTP Response Status Code

        :param status_code: The status_code of this ExecuteWebhookResponse.
        :type status_code: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def timestamp(self):
        """Gets the timestamp of this ExecuteWebhookResponse.

        ISO Datetime webhook event was received

        :return: The timestamp of this ExecuteWebhookResponse.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ExecuteWebhookResponse.

        ISO Datetime webhook event was received

        :param timestamp: The timestamp of this ExecuteWebhookResponse.
        :type timestamp: str
        """

        self._timestamp = timestamp
