/**
 * CarbonDoomsDay
 * A real-time RESTish web API for worldwide carbon dioxide levels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CO2 from '../model/CO2';
import Co2List200Response from '../model/Co2List200Response';

/**
* Co2 service.
* @module api/Co2Api
* @version v1
*/
export default class Co2Api {

    /**
    * Constructs a new Co2Api. 
    * @alias module:api/Co2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the co2List operation.
     * @callback module:api/Co2Api~co2ListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Co2List200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CO2 measurements from the Mauna Loa observatory.  This data is made available through the good work of the people at the Mauna Loa observatory. Their release notes say:      These data are made freely available to the public and the scientific     community in the belief that their wide dissemination will lead to greater     understanding and new scientific insights.  We currently scrape the following sources:    * [co2_mlo_weekly.csv]   * [co2_mlo_surface-insitu_1_ccgg_DailyData.txt]   * [weekly_mlo.csv]  We have daily CO2 measurements as far back as 1958.  Learn about using pagination via [the 3rd party documentation].  [co2_mlo_weekly.csv]: https://www.esrl.noaa.gov/gmd/webdata/ccgg/trends/co2_mlo_weekly.csv [co2_mlo_surface-insitu_1_ccgg_DailyData.txt]: ftp://aftp.cmdl.noaa.gov/data/trace_gases/co2/in-situ/surface/mlo/co2_mlo_surface-insitu_1_ccgg_DailyData.txt [weekly_mlo.csv]: http://scrippsco2.ucsd.edu/sites/default/files/data/in_situ_co2/weekly_mlo.csv [the 3rd party documentation]: http://www.django-rest-framework.org/api-guide/pagination/#pagenumberpagination
     * @param {Object} opts Optional parameters
     * @param {Number} [ppm] 
     * @param {String} [date] 
     * @param {String} [dateRange] Multiple values may be separated by commas.
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [limit] Number of results to return per page.
     * @param {module:api/Co2Api~co2ListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Co2List200Response}
     */
    co2List(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ppm': opts['ppm'],
        'date': opts['date'],
        'date__range': opts['dateRange'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Co2List200Response;
      return this.apiClient.callApi(
        '/co2/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the co2Read operation.
     * @callback module:api/Co2Api~co2ReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CO2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CO2 measurements from the Mauna Loa observatory.  This data is made available through the good work of the people at the Mauna Loa observatory. Their release notes say:      These data are made freely available to the public and the scientific     community in the belief that their wide dissemination will lead to greater     understanding and new scientific insights.  We currently scrape the following sources:    * [co2_mlo_weekly.csv]   * [co2_mlo_surface-insitu_1_ccgg_DailyData.txt]   * [weekly_mlo.csv]  We have daily CO2 measurements as far back as 1958.  Learn about using pagination via [the 3rd party documentation].  [co2_mlo_weekly.csv]: https://www.esrl.noaa.gov/gmd/webdata/ccgg/trends/co2_mlo_weekly.csv [co2_mlo_surface-insitu_1_ccgg_DailyData.txt]: ftp://aftp.cmdl.noaa.gov/data/trace_gases/co2/in-situ/surface/mlo/co2_mlo_surface-insitu_1_ccgg_DailyData.txt [weekly_mlo.csv]: http://scrippsco2.ucsd.edu/sites/default/files/data/in_situ_co2/weekly_mlo.csv [the 3rd party documentation]: http://www.django-rest-framework.org/api-guide/pagination/#pagenumberpagination
     * @param {Date} date 
     * @param {module:api/Co2Api~co2ReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CO2}
     */
    co2Read(date, callback) {
      let postBody = null;
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling co2Read");
      }

      let pathParams = {
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = CO2;
      return this.apiClient.callApi(
        '/co2/{date}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
