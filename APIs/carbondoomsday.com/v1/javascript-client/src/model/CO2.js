/**
 * CarbonDoomsDay
 * A real-time RESTish web API for worldwide carbon dioxide levels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CO2 model module.
 * @module model/CO2
 * @version v1
 */
class CO2 {
    /**
     * Constructs a new <code>CO2</code>.
     * @alias module:model/CO2
     * @param date {Date} 
     * @param ppm {Number} 
     */
    constructor(date, ppm) { 
        
        CO2.initialize(this, date, ppm);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, date, ppm) { 
        obj['date'] = date;
        obj['ppm'] = ppm;
    }

    /**
     * Constructs a <code>CO2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CO2} obj Optional instance to populate.
     * @return {module:model/CO2} The populated <code>CO2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CO2();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('ppm')) {
                obj['ppm'] = ApiClient.convertToType(data['ppm'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CO2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CO2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CO2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ppm'] && !(typeof data['ppm'] === 'string' || data['ppm'] instanceof String)) {
            throw new Error("Expected the field `ppm` to be a primitive type in the JSON string but got " + data['ppm']);
        }

        return true;
    }


}

CO2.RequiredProperties = ["date", "ppm"];

/**
 * @member {Date} date
 */
CO2.prototype['date'] = undefined;

/**
 * @member {Number} ppm
 */
CO2.prototype['ppm'] = undefined;






export default CO2;

