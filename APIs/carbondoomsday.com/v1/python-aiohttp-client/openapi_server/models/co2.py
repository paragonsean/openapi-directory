# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CO2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: date=None, ppm: str=None):
        """CO2 - a model defined in OpenAPI

        :param _date: The _date of this CO2.
        :param ppm: The ppm of this CO2.
        """
        self.openapi_types = {
            '_date': date,
            'ppm': str
        }

        self.attribute_map = {
            '_date': 'date',
            'ppm': 'ppm'
        }

        self.__date = _date
        self._ppm = ppm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CO2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CO2 of this CO2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this CO2.


        :return: The _date of this CO2.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CO2.


        :param _date: The _date of this CO2.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def ppm(self):
        """Gets the ppm of this CO2.


        :return: The ppm of this CO2.
        :rtype: str
        """
        return self._ppm

    @ppm.setter
    def ppm(self, ppm):
        """Sets the ppm of this CO2.


        :param ppm: The ppm of this CO2.
        :type ppm: str
        """
        if ppm is None:
            raise ValueError("Invalid value for `ppm`, must not be `None`")

        self._ppm = ppm
