/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BodyDeleteTokenV1OriginTokenDelete from '../model/BodyDeleteTokenV1OriginTokenDelete';
import BodyDisableOriginTokenV1OriginTokenDisablePut from '../model/BodyDisableOriginTokenV1OriginTokenDisablePut';
import BodyEnableOriginTokenV1OriginTokenEnablePut from '../model/BodyEnableOriginTokenV1OriginTokenEnablePut';
import BodyQueryOriginTokenInfoV1OriginTokenPost from '../model/BodyQueryOriginTokenInfoV1OriginTokenPost';
import HTTPValidationError from '../model/HTTPValidationError';
import OriginTokenCollectionOutput from '../model/OriginTokenCollectionOutput';
import OriginTokenInput from '../model/OriginTokenInput';
import OriginTokenOutput from '../model/OriginTokenOutput';

/**
* OriginTokenManagementInThisRegion service.
* @module api/OriginTokenManagementInThisRegionApi
* @version 1.2.27
*/
export default class OriginTokenManagementInThisRegionApi {

    /**
    * Constructs a new OriginTokenManagementInThisRegionApi. 
    * @alias module:api/OriginTokenManagementInThisRegionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createANewOriginTokenV1OriginTokenNewPost operation.
     * @callback module:api/OriginTokenManagementInThisRegionApi~createANewOriginTokenV1OriginTokenNewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OriginTokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an origin token of the user in the region.
     * ### What Creates a new origin token for the user passing as argument the origin. The origin parameter is the protocol and the domain where the origin token is valid.  The origin token is a special key used in conjunction with javascript library used for abuse detection. This key is owned by the user and is used to identify the origin of the request.  Hence, the protocol and domain of the origin must be the one where the javascript is loaded.  ### Parameters The origin with the protocol and domain is required in the body of the request in the parameter ``origin``. The allowed protocols are ``https://``, and ``http://``.  ### Result The result is a JSON object with the new origin token and the following fields: - ``self``: the URI to individual origin token information. - ``region_id``: the name of the region where the origin token is valid. - ``origin``: the protocol and the domain where the origin token is valid. - ``status``: the status of the origin token. The only allowed values are ``ENABLED`` and ``DISABLED``. - ``created_at``: the date and time when the origin token was created in UNIX timestamp in milliseconds. - ``updated_at``: the date and time when the origin token was last updated in UNIX timestamp in milliseconds.  ### Errors It will return the API Global errors described in the API description.  It will also return the following errors: - a `400 Bad Request` error if the origin does not have the correct format. - a `409 Conflict` error if the origin token already exists.
     * @param {module:model/OriginTokenInput} originTokenInput 
     * @param {module:api/OriginTokenManagementInThisRegionApi~createANewOriginTokenV1OriginTokenNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OriginTokenOutput}
     */
    createANewOriginTokenV1OriginTokenNewPost(originTokenInput, callback) {
      let postBody = originTokenInput;
      // verify the required parameter 'originTokenInput' is set
      if (originTokenInput === undefined || originTokenInput === null) {
        throw new Error("Missing the required parameter 'originTokenInput' when calling createANewOriginTokenV1OriginTokenNewPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OriginTokenOutput;
      return this.apiClient.callApi(
        '/v1/origin_token/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTokenV1OriginTokenDelete operation.
     * @callback module:api/OriginTokenManagementInThisRegionApi~deleteTokenV1OriginTokenDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an origin token of the user in the region.
     * ### What Deletes the origin token passed as argument of the user in the selected region. Once the token is deleted, it will no longer be valid and the protocol and domain of the origin will no longer be under protection.  To delete an origin token, the user must be the owner and the token must be ``DISABLED`` first.  ### Parameters The Origin Token is required in the body of the request in the parameter `origin_token_id`.  ### Result If successful, the result will be an empty response with a status code of `204 No Content`.  ### Errors It will return the API Global errors described in the API description.  It will also return the following errors: - a `404 Not Found` error if the origin token is not found. - a `409 Conflict` error if the origin token is not disabled.
     * @param {module:model/BodyDeleteTokenV1OriginTokenDelete} bodyDeleteTokenV1OriginTokenDelete 
     * @param {module:api/OriginTokenManagementInThisRegionApi~deleteTokenV1OriginTokenDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTokenV1OriginTokenDelete(bodyDeleteTokenV1OriginTokenDelete, callback) {
      let postBody = bodyDeleteTokenV1OriginTokenDelete;
      // verify the required parameter 'bodyDeleteTokenV1OriginTokenDelete' is set
      if (bodyDeleteTokenV1OriginTokenDelete === undefined || bodyDeleteTokenV1OriginTokenDelete === null) {
        throw new Error("Missing the required parameter 'bodyDeleteTokenV1OriginTokenDelete' when calling deleteTokenV1OriginTokenDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/origin_token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableOriginTokenV1OriginTokenDisablePut operation.
     * @callback module:api/OriginTokenManagementInThisRegionApi~disableOriginTokenV1OriginTokenDisablePutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a enabled origin token of the user in the region.
     * ### What Disable an enabled origin token passed as argument of the user in the selected region. When a token is enabled, it will participate in the protection of the origin protocol and domain. If the token is disabled, it will not participate in the protection of the origin protocol and domain.  To disable an origin token, the user must be the owner. If the token is already disabled, the function will not perform any action. If the token is enabled, it will be disabled.  ### Parameters The Origin Token is required in the body of the request in the parameter `origin_token_id`.  ### Result If successful, the result will be an empty response with a status code of `204 No Content`.  ### Errors It will return the API Global errors described in the API description.  It will also return the following errors: - a `404 Not Found` error if the origin token is not found.
     * @param {module:model/BodyDisableOriginTokenV1OriginTokenDisablePut} bodyDisableOriginTokenV1OriginTokenDisablePut 
     * @param {module:api/OriginTokenManagementInThisRegionApi~disableOriginTokenV1OriginTokenDisablePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disableOriginTokenV1OriginTokenDisablePut(bodyDisableOriginTokenV1OriginTokenDisablePut, callback) {
      let postBody = bodyDisableOriginTokenV1OriginTokenDisablePut;
      // verify the required parameter 'bodyDisableOriginTokenV1OriginTokenDisablePut' is set
      if (bodyDisableOriginTokenV1OriginTokenDisablePut === undefined || bodyDisableOriginTokenV1OriginTokenDisablePut === null) {
        throw new Error("Missing the required parameter 'bodyDisableOriginTokenV1OriginTokenDisablePut' when calling disableOriginTokenV1OriginTokenDisablePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/origin_token/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableOriginTokenV1OriginTokenEnablePut operation.
     * @callback module:api/OriginTokenManagementInThisRegionApi~enableOriginTokenV1OriginTokenEnablePutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a disabled origin token of the user in the region.
     * ### What Enable a disabled origin token passed as argument of the user in the selected region. When a token is enabled, it will participate in the protection of the origin protocol and domain. If the token is disabled, it will not participate in the protection of the origin protocol and domain.  To enable an origin token, the user must be the owner. If the token is already enabled, the function will not perform any action. If the token is disabled, it will be enabled.  ### Parameters The Origin Token is required in the body of the request in the parameter `origin_token_id`.  ### Result If successful, the result will be an empty response with a status code of `204 No Content`.  ### Errors It will return the API Global errors described in the API description.  It will also return the following errors: - a `404 Not Found` error if the origin token is not found.
     * @param {module:model/BodyEnableOriginTokenV1OriginTokenEnablePut} bodyEnableOriginTokenV1OriginTokenEnablePut 
     * @param {module:api/OriginTokenManagementInThisRegionApi~enableOriginTokenV1OriginTokenEnablePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    enableOriginTokenV1OriginTokenEnablePut(bodyEnableOriginTokenV1OriginTokenEnablePut, callback) {
      let postBody = bodyEnableOriginTokenV1OriginTokenEnablePut;
      // verify the required parameter 'bodyEnableOriginTokenV1OriginTokenEnablePut' is set
      if (bodyEnableOriginTokenV1OriginTokenEnablePut === undefined || bodyEnableOriginTokenV1OriginTokenEnablePut === null) {
        throw new Error("Missing the required parameter 'bodyEnableOriginTokenV1OriginTokenEnablePut' when calling enableOriginTokenV1OriginTokenEnablePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/origin_token/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryAllOriginTokensInTheRegionV1OriginTokenAllGet operation.
     * @callback module:api/OriginTokenManagementInThisRegionApi~queryAllOriginTokensInTheRegionV1OriginTokenAllGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OriginTokenCollectionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information of the origin tokens of the user in the region.
     * ### What Obtain the attributes of all the origin tokens of the user in the selected region. The purpose of this function is to show what protocol and domain is linked to all the tokens.  The origin token is a special key used in conjunction with javascript library used for abuse detection. This key is owned by the user and is used to identify the origin of the request.  Hence, the protocol and domain of the origin must be the one where the javascript is loaded.  ### Parameters No parameters are required.  ### Result The result is a list of JSON objects with the following fields: - ``self``: the URI to individual origin token information. - ``region_id``: the name of the region where the origin token is valid. - ``origin``: the protocol and the domain where the origin token is valid. - ``status``: the status of the origin token. The only allowed values are ``ENABLED`` and ``DISABLED``. - ``created_at``: the date and time when the origin token was created in UNIX timestamp in milliseconds. - ``updated_at``: the date and time when the origin token was last updated in UNIX timestamp in milliseconds.  ### Errors It will return the API Global errors described in the API description.
     * @param {module:api/OriginTokenManagementInThisRegionApi~queryAllOriginTokensInTheRegionV1OriginTokenAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OriginTokenCollectionOutput}
     */
    queryAllOriginTokensInTheRegionV1OriginTokenAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OriginTokenCollectionOutput;
      return this.apiClient.callApi(
        '/v1/origin_token/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryOriginTokenInfoV1OriginTokenPost operation.
     * @callback module:api/OriginTokenManagementInThisRegionApi~queryOriginTokenInfoV1OriginTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OriginTokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information of an origin token of the user in the region.
     * ### What Obtain the attributes of the given origin token of the user in the selected region. The purpose of this function is to show what protocol and domain is linked to the token.  The origin token is a special key used in conjunction with javascript library used for abuse detection. This key is owned by the user and is used to identify the origin of the request.  Hence, the protocol and domain of the origin must be the one where the javascript is loaded.  ### Parameters The Origin Token is required in the body of the request in the parameter `origin_token_id`.  ### Result The result is a JSON object with the following fields: - ``self``: the URI to individual origin token information. - ``region_id``: the name of the region where the origin token is valid. - ``origin``: the protocol and the domain where the origin token is valid. - ``status``: the status of the origin token. The only allowed values are ``ENABLED`` and ``DISABLED``. - ``created_at``: the date and time when the origin token was created in UNIX timestamp in milliseconds. - ``updated_at``: the date and time when the origin token was last updated in UNIX timestamp in milliseconds.  ### Errors It will return the API Global errors described in the API description.
     * @param {module:model/BodyQueryOriginTokenInfoV1OriginTokenPost} bodyQueryOriginTokenInfoV1OriginTokenPost 
     * @param {module:api/OriginTokenManagementInThisRegionApi~queryOriginTokenInfoV1OriginTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OriginTokenOutput}
     */
    queryOriginTokenInfoV1OriginTokenPost(bodyQueryOriginTokenInfoV1OriginTokenPost, callback) {
      let postBody = bodyQueryOriginTokenInfoV1OriginTokenPost;
      // verify the required parameter 'bodyQueryOriginTokenInfoV1OriginTokenPost' is set
      if (bodyQueryOriginTokenInfoV1OriginTokenPost === undefined || bodyQueryOriginTokenInfoV1OriginTokenPost === null) {
        throw new Error("Missing the required parameter 'bodyQueryOriginTokenInfoV1OriginTokenPost' when calling queryOriginTokenInfoV1OriginTokenPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OriginTokenOutput;
      return this.apiClient.callApi(
        '/v1/origin_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
