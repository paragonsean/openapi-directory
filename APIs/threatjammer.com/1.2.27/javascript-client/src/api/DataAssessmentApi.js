/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import IPAssessmentCollectionOutput from '../model/IPAssessmentCollectionOutput';
import IPAssessmentOutput from '../model/IPAssessmentOutput';

/**
* DataAssessment service.
* @module api/DataAssessmentApi
* @version 1.2.27
*/
export default class DataAssessmentApi {

    /**
    * Constructs a new DataAssessmentApi. 
    * @alias module:api/DataAssessmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assessIpSetCsvV1AssessIpCsvPost operation.
     * @callback module:api/DataAssessmentApi~assessIpSetCsvV1AssessIpCsvPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAssessmentCollectionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the risk score of all IP address uploaded and other data signals.
     * ### What Obtain a numerical score and a risk assessment of all the IP addresses uploaded with a text file.  ### Parameters - A text file with a list of public IPv4 or IPv6 addresses. - A header `Content-Type: multipart/form-data` is required. - (optional) in the query string the parameeter `strict_parse`: If set to `true`, no malformed IP addresses allowed, returning an error. If set to `false`, malformed IP addresses will be ignored.  Example: ``` curl -X 'POST' \\   'https://dublin.api.threatjammer.com/v1/asses/ip/csv[?strict_parse=true|false]' \\   -H 'accept: application/json' \\   -H 'Authorization: Bearer YOUR_API_KEY' \\   -H 'Content-Type: multipart/form-data' \\   -F 'csv_file=@YOUR_TEXT_FILE;type=text/csv' ```  ### Result The result contains a list of the result for each IP address, with two main sets of data: - The score is a number **between 0 and 99** describing the probability of the IP address being a malicious one, being **0** means that the IP address is not malicious and is not a threat. Being **99** means that the service behind the IP address is probably malicious an certainly a threat.  - The list of information gathered from the IP address to obtain the score.  The result is a JSON object with the following structure: - ``self``: the URI of the API call - ``score``: The score of the IP address. It ranges from 0 to 99. - ``risk``: The risk of the IP address. The allowed values are: LOW, MEDIUM, HIGH. It's a human readable representation of the score. - ``reason``: It's a human readable representation of the reason of the risk. - ``datasets``: The IP address was found in the these lists of datasets used to obtain the risk score. Datasets are described as a list of URIs. - ``sources``: The IP address was found in the these source lists at an specific time with a specific risk score. Sources are described as a list of URIs. - ``log``: The activity of the IP address in the different datasets used to obtain the risk score. The log is a URI reference. - ``asn``: The information about the Autonomous System (AS) of the IP address. The AS is described as an URI. - ``asn_prefix``: The information about the Autonomous System (AS) network prefix of the IP address. The prefix is described as an URI. - ``datacenter``: If the IP address is part of a datacenter pool, the information about the datacenter is described as an URI. - ``datacenter_prefix``: The information about the Datacenter network prefix of the IP address. The `asn_prefix` and `datacenter_prefix` can be the same, but it is not mandatory. The prefix is described as an URI. - ``denylisted``: If the IP address was denylisted by the user, the information about the denylisted IP address is described as an URI. - ``first_appearence``: URI to the first appearance of the IP address in the different datasets used to obtain the risk score. - ``last_appearence``: URI to the last appearance of the IP address in the different datasets used to obtain the risk score.  ### Errors The endpoint will return the following errors: - a `422 Unprocessable Entity` error if the IP address is malformed.  The private IP addresses will be ignored, if any.  When the `strict_parse` parameter is set to `true`, the endpoint will return the following errors: - a `400 Bad Request`.  It will also return the API Global errors described in the API description.
     * @param {File} csvFile The CSV file with the IP addresses
     * @param {Object} opts Optional parameters
     * @param {Boolean} [strictParse = false)] When `true`, if any IP address entry in the file is malformed, the assessment is canceled. If `false`, the malformed IP addresses are ignored. Default is `false`.
     * @param {module:api/DataAssessmentApi~assessIpSetCsvV1AssessIpCsvPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAssessmentCollectionOutput}
     */
    assessIpSetCsvV1AssessIpCsvPost(csvFile, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'csvFile' is set
      if (csvFile === undefined || csvFile === null) {
        throw new Error("Missing the required parameter 'csvFile' when calling assessIpSetCsvV1AssessIpCsvPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'strict_parse': opts['strictParse']
      };
      let headerParams = {
      };
      let formParams = {
        'csv_file': csvFile
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = IPAssessmentCollectionOutput;
      return this.apiClient.callApi(
        '/v1/assess/ip/csv', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assessIpSetV1AssessIpPost operation.
     * @callback module:api/DataAssessmentApi~assessIpSetV1AssessIpPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAssessmentCollectionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the risk score of all IP address passed in the body and other data signals.
     * ### What Obtain a numerical score and a risk assessment of all the IP addresses passed as argument.  ### Parameters A list of public IPv4 or IPv6 addresses is required in the body of the request.  ### Result The result contains a list of the result for each IP address, with two main sets of data: - The score is a number **between 0 and 99** describing the probability of the IP address being a malicious one, being **0** means that the IP address is not malicious and is not a threat. Being **99** means that the service behind the IP address is probably malicious an certainly a threat.  - The list of information gathered from the IP address to obtain the score.  The result is a JSON object with the following structure: - ``self``: the URI of the API call - ``score``: The score of the IP address. It ranges from 0 to 99. - ``risk``: The risk of the IP address. The allowed values are: LOW, MEDIUM, HIGH. It's a human readable representation of the score. - ``reason``: It's a human readable representation of the reason of the risk. - ``datasets``: The IP address was found in the these lists of datasets used to obtain the risk score. Datasets are described as a list of URIs. - ``sources``: The IP address was found in the these source lists at an specific time with a specific risk score. Sources are described as a list of URIs. - ``log``: The activity of the IP address in the different datasets used to obtain the risk score. The log is a URI reference. - ``asn``: The information about the Autonomous System (AS) of the IP address. The AS is described as an URI. - ``asn_prefix``: The information about the Autonomous System (AS) network prefix of the IP address. The prefix is described as an URI. - ``datacenter``: If the IP address is part of a datacenter pool, the information about the datacenter is described as an URI. - ``datacenter_prefix``: The information about the Datacenter network prefix of the IP address. The `asn_prefix` and `datacenter_prefix` can be the same, but it is not mandatory. The prefix is described as an URI. - ``denylisted``: If the IP address was denylisted by the user, the information about the denylisted IP address is described as an URI. - ``first_appearence``: URI to the first appearance of the IP address in the different datasets used to obtain the risk score. - ``last_appearence``: URI to the last appearance of the IP address in the different datasets used to obtain the risk score.  ### Errors The endpoint will return the following errors: - a `422 Unprocessable Entity` error if the IP address is malformed.  The private IP addresses will be ignored, if any.  It will also return the API Global errors described in the API description.
     * @param {Array.<String>} requestBody 
     * @param {module:api/DataAssessmentApi~assessIpSetV1AssessIpPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAssessmentCollectionOutput}
     */
    assessIpSetV1AssessIpPost(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling assessIpSetV1AssessIpPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPAssessmentCollectionOutput;
      return this.apiClient.callApi(
        '/v1/assess/ip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assessIpV1AssessIpIpAddressGet operation.
     * @callback module:api/DataAssessmentApi~assessIpV1AssessIpIpAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAssessmentOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a risk score of the IP address and different data signals.
     * ### What Obtain a numerical score and a risk assessment of the IP address passed as argument.  ### Parameters The only argument accepted in the query string is a public IPv4 or IPv6 addresses.  ### Result The result contains two main sets of data: - The score is a number **between 0 and 99** describing the probability of the IP address being a malicious one, being **0** means that the IP address is not malicious and is not a threat. Being **99** means that the service behind the IP address is probably malicious an certainly a threat.  - The list of information gathered from the IP address to obtain the score.  The result is a JSON object with the following structure: - ``self``: the URI of the API call - ``score``: The score of the IP address. It ranges from 0 to 99. - ``risk``: The risk of the IP address. The allowed values are: LOW, MEDIUM, HIGH. It's a human readable representation of the score. - ``reason``: It's a human readable representation of the reason of the risk. - ``datasets``: The IP address was found in the these lists of datasets used to obtain the risk score. Datasets are described as a list of URIs. - ``sources``: The IP address was found in the these source lists at an specific time with a specific risk score. Sources are described as a list of URIs. - ``log``: The activity of the IP address in the different datasets used to obtain the risk score. The log is a URI reference. - ``asn``: The information about the Autonomous System (AS) of the IP address. The AS is described as an URI. - ``asn_prefix``: The information about the Autonomous System (AS) network prefix of the IP address. The prefix is described as an URI. - ``datacenter``: If the IP address is part of a datacenter pool, the information about the datacenter is described as an URI. - ``datacenter_prefix``: The information about the Datacenter network prefix of the IP address. The `asn_prefix` and `datacenter_prefix` can be the same, but it is not mandatory. The prefix is described as an URI. - ``denylisted``: If the IP address was denylisted by the user, the information about the denylisted IP address is described as an URI. - ``first_appearence``: URI to the first appearance of the IP address in the different datasets used to obtain the risk score. - ``last_appearence``: URI to the last appearance of the IP address in the different datasets used to obtain the risk score.  ### Errors The endpoint will return the following errors: - a `400 Bad Request` error if the IP address is not public. - a `422 Unprocessable Entity` error if the IP address is malformed.  It will also return the API Global errors described in the API description.
     * @param {String} ipAddress 
     * @param {module:api/DataAssessmentApi~assessIpV1AssessIpIpAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAssessmentOutput}
     */
    assessIpV1AssessIpIpAddressGet(ipAddress, callback) {
      let postBody = null;
      // verify the required parameter 'ipAddress' is set
      if (ipAddress === undefined || ipAddress === null) {
        throw new Error("Missing the required parameter 'ipAddress' when calling assessIpV1AssessIpIpAddressGet");
      }

      let pathParams = {
        'ip_address': ipAddress
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IPAssessmentOutput;
      return this.apiClient.callApi(
        '/v1/assess/ip/{ip_address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
