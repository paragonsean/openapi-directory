/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost from '../model/BodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost';
import DatacenterOutput from '../model/DatacenterOutput';
import DatacenterPrefixOutput from '../model/DatacenterPrefixOutput';
import DatacenterPrefixesOutput from '../model/DatacenterPrefixesOutput';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* DatacenterInformation service.
* @module api/DatacenterInformationApi
* @version 1.2.27
*/
export default class DatacenterInformationApi {

    /**
    * Constructs a new DatacenterInformationApi. 
    * @alias module:api/DatacenterInformationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryDatacenterPrefixInformationV1DatacenterPrefixPost operation.
     * @callback module:api/DatacenterInformationApi~queryDatacenterPrefixInformationV1DatacenterPrefixPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatacenterPrefixOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the IPv4 or IPv6 prefix of the CIDR given.
     * ### What Obtain the IPv4 or IPv6 prefix and the Datacenter information of the CIDR passed in the body as a POST method. This endpoint works around the problem of passing '/' addresses in the URI.  ### Parameters The endpoint accepts only the following parameter in the body as a JSON object: - ``prefix``: (Mandatory) The CIDR v4 or v6 to be queried.  ### Result - The result is a JSON object with the following structure:     - ``self``: the URI to individual IPv4 prefix.     - ``datacenter_id``: the URI to query the full details of the Datacenter.     - ``score``: The risk score of the prefix. It ranges from 0 to 99.     - ``risk``: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It's a human readable representation of the score.     - ``min_score``: The minimum risk score of the prefix. It ranges from 0 to 99.     - ``max_score``: The maximum risk score of the prefix. It ranges from 0 to 99.     - ``ip_abuse_total``: The total number of IPs that have been reported as abuse in the range.   ### Errors The endpoint will return the following errors: - a `404 Not Found` error if the prefix information was not found. - a `422 Unprocessable Entity` error if the CIDR is malformed.  It will also return the API Global errors described in the API description.
     * @param {module:model/BodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost} bodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost 
     * @param {module:api/DatacenterInformationApi~queryDatacenterPrefixInformationV1DatacenterPrefixPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatacenterPrefixOutput}
     */
    queryDatacenterPrefixInformationV1DatacenterPrefixPost(bodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost, callback) {
      let postBody = bodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost;
      // verify the required parameter 'bodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost' is set
      if (bodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost === undefined || bodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost === null) {
        throw new Error("Missing the required parameter 'bodyQueryDatacenterPrefixInformationV1DatacenterPrefixPost' when calling queryDatacenterPrefixInformationV1DatacenterPrefixPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatacenterPrefixOutput;
      return this.apiClient.callApi(
        '/v1/datacenter/prefix', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGet operation.
     * @callback module:api/DatacenterInformationApi~queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatacenterPrefixesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of IPv4 and IPv6 prefixes of the Datacenter given.
     * ### What Obtain the full list of IPv4 and IPv6 prefixes of the Datacenter passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - ``datacenter_id``: (Mandatory) The internal Datacenter ID to be queried.  ### Result The result is a JSON object with the following structure: - ``self``: the URI of the API call - ``datacenter_id``: the URI to query the full details of the Datacenter. - ``prefixes_v4``: the list of IPv4 prefixes that belong to the Datacenter. Each element of the list is a JSON object with the following structure:      - ``self``: the URI to individual IPv4 prefix.     - ``datacenter_id``: the URI to query the full details of the Datacenter.     - ``score``: The risk score of the prefix. It ranges from 0 to 99.     - ``risk``: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It's a human readable representation of the score.     - ``min_score``: The minimum risk score of the prefix. It ranges from 0 to 99.     - ``max_score``: The maximum risk score of the prefix. It ranges from 0 to 99.     - ``ip_abuse_total``: The total number of IPs that have been reported as abuse in the range.  - ``prefixes_v6``: the list of IPv6 prefixes that belong to the Datacenter. Each element of the list is a JSON object with the following structure:      - ``self``: the URI to individual IPv4 prefix.     - ``datacenter_id``: the URI to query the full details of the Datacenter.     - ``score``: The risk score of the prefix. It ranges from 0 to 99.     - ``risk``: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It's a human readable representation of the score.     - ``min_score``: The minimum risk score of the prefix. It ranges from 0 to 99.     - ``max_score``: The maximum risk score of the prefix. It ranges from 0 to 99.     - ``ip_abuse_total``: The total number of IPs that have been reported as abuse in the range.   ### Errors The endpoint will return the following errors: - a `404 Not Found` error if the Datacenter was not found. - a `422 Unprocessable Entity` error if the Datacenter number is malformed.  It will also return the API Global errors described in the API description.
     * @param {String} datacenterId 
     * @param {module:api/DatacenterInformationApi~queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatacenterPrefixesOutput}
     */
    queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGet(datacenterId, callback) {
      let postBody = null;
      // verify the required parameter 'datacenterId' is set
      if (datacenterId === undefined || datacenterId === null) {
        throw new Error("Missing the required parameter 'datacenterId' when calling queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGet");
      }

      let pathParams = {
        'datacenter_id': datacenterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatacenterPrefixesOutput;
      return this.apiClient.callApi(
        '/v1/datacenter/{datacenter_id}/prefixes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryDatacenterV1DatacenterDatacenterIdGet operation.
     * @callback module:api/DatacenterInformationApi~queryDatacenterV1DatacenterDatacenterIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatacenterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Datacenter details of datacente given.
     * ### What Obtain the details of the Datacenter ID passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - ``datacenter_id``: (Mandatory) The internal Datacenter ID to be queried.  ### Result The result is a JSON object with the following structure: - ``self``: the URI of the API call - ``name``: the generic name of the Datacenter. The database takes the name from different sources, so it may be different from the real name. - ``description``: a full name of the Datacenter. It contains more details about the Datacenter. - ``source``: website of the company that owns the Datacenter. - ``asn``: the URI to the ASN of the Datacenter. - ``status``: the status of the Datacenter. It can be: `enabled` or `disabled`. - ``prefixes``: the URI to the list of prefixes that belong to the Datacenter. - ``score``: The risk score of the Datacenter. It ranges from 0 to 99. - ``risk``: The risk of the Datacenter. The allowed values are: LOW, MEDIUM, HIGH. It's a human readable representation of the score.   ### Errors The endpoint will return the following errors: - a `404 Not Found` error if the Datacenter was not found. - a `422 Unprocessable Entity` error if the Datacenter is malformed.  It will also return the API Global errors described in the API description.
     * @param {String} datacenterId 
     * @param {module:api/DatacenterInformationApi~queryDatacenterV1DatacenterDatacenterIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatacenterOutput}
     */
    queryDatacenterV1DatacenterDatacenterIdGet(datacenterId, callback) {
      let postBody = null;
      // verify the required parameter 'datacenterId' is set
      if (datacenterId === undefined || datacenterId === null) {
        throw new Error("Missing the required parameter 'datacenterId' when calling queryDatacenterV1DatacenterDatacenterIdGet");
      }

      let pathParams = {
        'datacenter_id': datacenterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatacenterOutput;
      return this.apiClient.callApi(
        '/v1/datacenter/{datacenter_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryIPAddressNetworkInformationV1DatacenterIpIpAddressGet operation.
     * @callback module:api/DatacenterInformationApi~queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatacenterPrefixOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the IPv4 or IPv6 prefix of the IP address given.
     * ### What Obtain the IPv4 or IPv6 prefix and the Datacenter information of the IP address passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - ``ip_address``: (Mandatory) The IPv4 or IPv6 address to be queried.  ### Result - The result is a JSON object with the following structure:     - ``self``: the URI to individual IPv4 prefix.     - ``datacenter_id``: the URI to query the full details of the Datacenter.     - ``score``: The risk score of the prefix. It ranges from 0 to 99.     - ``risk``: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It's a human readable representation of the score.     - ``min_score``: The minimum risk score of the prefix. It ranges from 0 to 99.     - ``max_score``: The maximum risk score of the prefix. It ranges from 0 to 99.     - ``ip_abuse_total``: The total number of IPs that have been reported as abuse in the range.   ### Errors The endpoint will return the following errors: - a `404 Not Found` error if the prefix information was not found. - a `422 Unprocessable Entity` error if the IP address is malformed.  It will also return the API Global errors described in the API description.
     * @param {String} ipAddress 
     * @param {module:api/DatacenterInformationApi~queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatacenterPrefixOutput}
     */
    queryIPAddressNetworkInformationV1DatacenterIpIpAddressGet(ipAddress, callback) {
      let postBody = null;
      // verify the required parameter 'ipAddress' is set
      if (ipAddress === undefined || ipAddress === null) {
        throw new Error("Missing the required parameter 'ipAddress' when calling queryIPAddressNetworkInformationV1DatacenterIpIpAddressGet");
      }

      let pathParams = {
        'ip_address': ipAddress
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatacenterPrefixOutput;
      return this.apiClient.callApi(
        '/v1/datacenter/ip/{ip_address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
