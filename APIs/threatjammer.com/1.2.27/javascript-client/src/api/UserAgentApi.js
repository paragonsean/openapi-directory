/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceOutput from '../model/DeviceOutput';
import FamilyOutput from '../model/FamilyOutput';
import HTTPValidationError from '../model/HTTPValidationError';
import OSOutput from '../model/OSOutput';
import TypeOutput from '../model/TypeOutput';
import UACollectionOutput from '../model/UACollectionOutput';
import UAOutput from '../model/UAOutput';
import VendorOutput from '../model/VendorOutput';

/**
* UserAgent service.
* @module api/UserAgentApi
* @version 1.2.27
*/
export default class UserAgentApi {

    /**
    * Constructs a new UserAgentApi. 
    * @alias module:api/UserAgentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the parseUserAgentV1UaUserAgentUrlencodedGet operation.
     * @callback module:api/UserAgentApi~parseUserAgentV1UaUserAgentUrlencodedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UAOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information found in an User Agent.
     * ### What Get the information found in the User Agent passed as argument. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide   ### Parameters The only argument accepted in the query string is an URL encoded User Agent string.  ### Result The result contains the following set of data:  The result is a JSON object with the following structure: - ``self``: the URI of the API call - ``string``:  The full user agent string passed as argument. - ``classification``: The classification of the user agent. It can be one of the following: ``CRAWLER``, ``CLIENT``, ``UNKNOWN``. - ``type``: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - ``agent``: Name of the agent and the version, if any. - ``engine``: Agent render engine. - ``version``: Version of the agent. - ``latest``: Latests known version of the agent. - ``family``: URI to the family of the agent. - ``vendor``: URI to the vendor or company that produces the agent. - ``os``: URI to the operating system used by the agent. - ``device``: URI to the device used by the agent. - ``frequent``: If the agent is frequently used worlwide or not. The values are ``COMMON``, ``RARE``, and ``UNKNOWN``.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param {String} userAgentUrlencoded 
     * @param {module:api/UserAgentApi~parseUserAgentV1UaUserAgentUrlencodedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UAOutput}
     */
    parseUserAgentV1UaUserAgentUrlencodedGet(userAgentUrlencoded, callback) {
      let postBody = null;
      // verify the required parameter 'userAgentUrlencoded' is set
      if (userAgentUrlencoded === undefined || userAgentUrlencoded === null) {
        throw new Error("Missing the required parameter 'userAgentUrlencoded' when calling parseUserAgentV1UaUserAgentUrlencodedGet");
      }

      let pathParams = {
        'user_agent_urlencoded': userAgentUrlencoded
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UAOutput;
      return this.apiClient.callApi(
        '/v1/ua/{user_agent_urlencoded}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseUserAgentsCsvV1UaCsvPost operation.
     * @callback module:api/UserAgentApi~parseUserAgentsCsvV1UaCsvPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UACollectionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information found in the set of User Agents uploaded.
     * ### What Get the information found in the list of User Agents uploaded as a CSV file. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide  ### Parameters - A text file with a list of User Agents. - A header `Content-Type: multipart/form-data` is required.  Example: ``` curl -X 'POST' \\   'https://dublin.api.threatjammer.com/v1/ua/csv' \\   -H 'accept: application/json' \\   -H 'Authorization: Bearer YOUR_API_KEY' \\   -H 'Content-Type: multipart/form-data' \\   -F 'csv_file=@YOUR_TEXT_FILE;type=text/csv' ```  ### Result The result contains a list of the result for each User Agent, with the following data set:  The result is a JSON object with the following structure: - ``self``: the URI of the API call - ``string``:  The full user agent string passed as argument. - ``classification``: The classification of the user agent. It can be one of the following: ``CRAWLER``, ``CLIENT``, ``UNKNOWN``. - ``type``: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - ``agent``: Name of the agent and the version, if any. - ``engine``: Agent render engine. - ``version``: Version of the agent. - ``latest``: Latests known version of the agent. - ``family``: URI to the family of the agent. - ``vendor``: URI to the vendor or company that produces the agent. - ``os``: URI to the operating system used by the agent. - ``device``: URI to the device used by the agent. - ``frequent``: If the agent is frequently used worlwide or not. The values are ``COMMON``, ``RARE``, and ``UNKNOWN``.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param {File} csvFile The CSV file with the User Agents to parse
     * @param {module:api/UserAgentApi~parseUserAgentsCsvV1UaCsvPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UACollectionOutput}
     */
    parseUserAgentsCsvV1UaCsvPost(csvFile, callback) {
      let postBody = null;
      // verify the required parameter 'csvFile' is set
      if (csvFile === undefined || csvFile === null) {
        throw new Error("Missing the required parameter 'csvFile' when calling parseUserAgentsCsvV1UaCsvPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'csv_file': csvFile
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UACollectionOutput;
      return this.apiClient.callApi(
        '/v1/ua/csv', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseUserAgentsV1UaPost operation.
     * @callback module:api/UserAgentApi~parseUserAgentsV1UaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UACollectionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information found in a set of User Agents.
     * ### What Get the information found in the list of User Agents passed as argument. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide  ### Parameters A list of User Agents are required in the body of the request.  ### Result The result contains a list of the result for each User Agent, with the following data set:  The result is a JSON object with the following structure: - ``self``: the URI of the API call - ``string``:  The full user agent string passed as argument. - ``classification``: The classification of the user agent. It can be one of the following: ``CRAWLER``, ``CLIENT``, ``UNKNOWN``. - ``type``: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - ``agent``: Name of the agent and the version, if any. - ``engine``: Agent render engine. - ``version``: Version of the agent. - ``latest``: Latests known version of the agent. - ``family``: URI to the family of the agent. - ``vendor``: URI to the vendor or company that produces the agent. - ``os``: URI to the operating system used by the agent. - ``device``: URI to the device used by the agent. - ``frequent``: If the agent is frequently used worlwide or not. The values are ``COMMON``, ``RARE``, and ``UNKNOWN``.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param {Array.<String>} requestBody 
     * @param {module:api/UserAgentApi~parseUserAgentsV1UaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UACollectionOutput}
     */
    parseUserAgentsV1UaPost(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling parseUserAgentsV1UaPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UACollectionOutput;
      return this.apiClient.callApi(
        '/v1/ua', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryDeviceByCodeV1UaDeviceCodeGet operation.
     * @callback module:api/UserAgentApi~queryDeviceByCodeV1UaDeviceCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information of the device of a user agent.
     * ### What Obtain the details of a device of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - ``code``: (Mandatory) The code that identifies uniquely the device origin of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - ``self``: the URI to the device. - ``description``: the human readable description of the device. - ``code``: the internal code of the device in the system.  ### Errors - a `422 Unprocessable Entity` error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param {String} code 
     * @param {module:api/UserAgentApi~queryDeviceByCodeV1UaDeviceCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceOutput}
     */
    queryDeviceByCodeV1UaDeviceCodeGet(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling queryDeviceByCodeV1UaDeviceCodeGet");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceOutput;
      return this.apiClient.callApi(
        '/v1/ua/device/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryFamilyByCodeV1UaFamilyCodeGet operation.
     * @callback module:api/UserAgentApi~queryFamilyByCodeV1UaFamilyCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FamilyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information of the family of a user agent.
     * ### What Obtain the details of a family of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - ``code``: (Mandatory) The code that identifies uniquely the family of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - ``self``: the URI to the family. - ``description``: the human readable description of the famly. - ``code``: the internal code of the family in the system.  ### Errors - a `422 Unprocessable Entity` error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param {String} code 
     * @param {module:api/UserAgentApi~queryFamilyByCodeV1UaFamilyCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FamilyOutput}
     */
    queryFamilyByCodeV1UaFamilyCodeGet(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling queryFamilyByCodeV1UaFamilyCodeGet");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FamilyOutput;
      return this.apiClient.callApi(
        '/v1/ua/family/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryOsByCodeV1UaOsCodeGet operation.
     * @callback module:api/UserAgentApi~queryOsByCodeV1UaOsCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OSOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information of the Operating System of a user agent.
     * ### What Obtain the details of the Operating System of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - ``code``: (Mandatory) The code that identifies uniquely the Operating System at the origin of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - ``self``: the URI to the OS. - ``description``: the human readable description of the OS. - ``code``: the internal code of the OS in the system. - ``family``: the family of the OS. - ``vendor``: the vendor or manufacturer of the OS.  ### Errors - a `422 Unprocessable Entity` error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param {String} code 
     * @param {module:api/UserAgentApi~queryOsByCodeV1UaOsCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OSOutput}
     */
    queryOsByCodeV1UaOsCodeGet(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling queryOsByCodeV1UaOsCodeGet");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OSOutput;
      return this.apiClient.callApi(
        '/v1/ua/os/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryTypeByCodeV1UaTypeCodeGet operation.
     * @callback module:api/UserAgentApi~queryTypeByCodeV1UaTypeCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TypeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information of the type of a user agent.
     * ### What Obtain the details of a type of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - ``code``: (Mandatory) The code that identifies uniquely the type of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - ``self``: the URI to the type. - ``description``: the human readable description of the type. - ``code``: the internal code of the type in the system. - ``type``: the type of the User Agent. Can be ``INTERACTIVE``, ``CRAWLER`` or ``UNKNOWN`` if the type is not known.  ### Errors - a `422 Unprocessable Entity` error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param {String} code 
     * @param {module:api/UserAgentApi~queryTypeByCodeV1UaTypeCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TypeOutput}
     */
    queryTypeByCodeV1UaTypeCodeGet(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling queryTypeByCodeV1UaTypeCodeGet");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TypeOutput;
      return this.apiClient.callApi(
        '/v1/ua/type/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryVendorByCodeV1UaVendorCodeGet operation.
     * @callback module:api/UserAgentApi~queryVendorByCodeV1UaVendorCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VendorOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information of the vendor of a user agent.
     * ### What Obtain the details of a vendor of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - ``code``: (Mandatory) The code that identifies uniquely the vendor or manufacurer of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - ``self``: the URI to the vendor. - ``description``: the human readable description of the vendor. - ``code``: the internal code of the vendor in the system.  ### Errors - a `422 Unprocessable Entity` error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param {String} code 
     * @param {module:api/UserAgentApi~queryVendorByCodeV1UaVendorCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VendorOutput}
     */
    queryVendorByCodeV1UaVendorCodeGet(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling queryVendorByCodeV1UaVendorCodeGet");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VendorOutput;
      return this.apiClient.callApi(
        '/v1/ua/vendor/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
