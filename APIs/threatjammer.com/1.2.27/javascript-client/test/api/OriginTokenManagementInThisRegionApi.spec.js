/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ThreatJammerComUserApi);
  }
}(this, function(expect, ThreatJammerComUserApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ThreatJammerComUserApi.OriginTokenManagementInThisRegionApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OriginTokenManagementInThisRegionApi', function() {
    describe('createANewOriginTokenV1OriginTokenNewPost', function() {
      it('should call createANewOriginTokenV1OriginTokenNewPost successfully', function(done) {
        //uncomment below and update the code to test createANewOriginTokenV1OriginTokenNewPost
        //instance.createANewOriginTokenV1OriginTokenNewPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTokenV1OriginTokenDelete', function() {
      it('should call deleteTokenV1OriginTokenDelete successfully', function(done) {
        //uncomment below and update the code to test deleteTokenV1OriginTokenDelete
        //instance.deleteTokenV1OriginTokenDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableOriginTokenV1OriginTokenDisablePut', function() {
      it('should call disableOriginTokenV1OriginTokenDisablePut successfully', function(done) {
        //uncomment below and update the code to test disableOriginTokenV1OriginTokenDisablePut
        //instance.disableOriginTokenV1OriginTokenDisablePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableOriginTokenV1OriginTokenEnablePut', function() {
      it('should call enableOriginTokenV1OriginTokenEnablePut successfully', function(done) {
        //uncomment below and update the code to test enableOriginTokenV1OriginTokenEnablePut
        //instance.enableOriginTokenV1OriginTokenEnablePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryAllOriginTokensInTheRegionV1OriginTokenAllGet', function() {
      it('should call queryAllOriginTokensInTheRegionV1OriginTokenAllGet successfully', function(done) {
        //uncomment below and update the code to test queryAllOriginTokensInTheRegionV1OriginTokenAllGet
        //instance.queryAllOriginTokensInTheRegionV1OriginTokenAllGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryOriginTokenInfoV1OriginTokenPost', function() {
      it('should call queryOriginTokenInfoV1OriginTokenPost successfully', function(done) {
        //uncomment below and update the code to test queryOriginTokenInfoV1OriginTokenPost
        //instance.queryOriginTokenInfoV1OriginTokenPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
