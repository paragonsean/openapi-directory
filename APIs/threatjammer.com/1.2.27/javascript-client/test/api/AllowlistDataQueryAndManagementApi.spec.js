/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ThreatJammerComUserApi);
  }
}(this, function(expect, ThreatJammerComUserApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ThreatJammerComUserApi.AllowlistDataQueryAndManagementApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AllowlistDataQueryAndManagementApi', function() {
    describe('changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPut', function() {
      it('should call changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPut successfully', function(done) {
        //uncomment below and update the code to test changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPut
        //instance.changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPut', function() {
      it('should call changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPut successfully', function(done) {
        //uncomment below and update the code to test changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPut
        //instance.changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPut', function() {
      it('should call changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPut successfully', function(done) {
        //uncomment below and update the code to test changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPut
        //instance.changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPrivateAllowlistOfTheUserV1AllowlistPrivatePost', function() {
      it('should call createPrivateAllowlistOfTheUserV1AllowlistPrivatePost successfully', function(done) {
        //uncomment below and update the code to test createPrivateAllowlistOfTheUserV1AllowlistPrivatePost
        //instance.createPrivateAllowlistOfTheUserV1AllowlistPrivatePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDelete', function() {
      it('should call deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDelete successfully', function(done) {
        //uncomment below and update the code to test deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDelete
        //instance.deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTheAllowlistV1AllowlistPrivateAllowlistIdDelete', function() {
      it('should call deleteTheAllowlistV1AllowlistPrivateAllowlistIdDelete successfully', function(done) {
        //uncomment below and update the code to test deleteTheAllowlistV1AllowlistPrivateAllowlistIdDelete
        //instance.deleteTheAllowlistV1AllowlistPrivateAllowlistIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTheAllowlistV1AllowlistPublicAllowlistIdDelete', function() {
      it('should call deleteTheAllowlistV1AllowlistPublicAllowlistIdDelete successfully', function(done) {
        //uncomment below and update the code to test deleteTheAllowlistV1AllowlistPublicAllowlistIdDelete
        //instance.deleteTheAllowlistV1AllowlistPublicAllowlistIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGet', function() {
      it('should call getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGet successfully', function(done) {
        //uncomment below and update the code to test getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGet
        //instance.getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGet', function() {
      it('should call getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGet successfully', function(done) {
        //uncomment below and update the code to test getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGet
        //instance.getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPrivateAllowlistsV1AllowlistPrivateAllGet', function() {
      it('should call getAllPrivateAllowlistsV1AllowlistPrivateAllGet successfully', function(done) {
        //uncomment below and update the code to test getAllPrivateAllowlistsV1AllowlistPrivateAllGet
        //instance.getAllPrivateAllowlistsV1AllowlistPrivateAllGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGet', function() {
      it('should call getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGet successfully', function(done) {
        //uncomment below and update the code to test getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGet
        //instance.getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPublicAllowlistsV1AllowlistPublicAllGet', function() {
      it('should call getAllPublicAllowlistsV1AllowlistPublicAllGet successfully', function(done) {
        //uncomment below and update the code to test getAllPublicAllowlistsV1AllowlistPublicAllGet
        //instance.getAllPublicAllowlistsV1AllowlistPublicAllGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllowlistContentV1AllowlistPrivateAllowlistIdContentGet', function() {
      it('should call getAllowlistContentV1AllowlistPrivateAllowlistIdContentGet successfully', function(done) {
        //uncomment below and update the code to test getAllowlistContentV1AllowlistPrivateAllowlistIdContentGet
        //instance.getAllowlistContentV1AllowlistPrivateAllowlistIdContentGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGet', function() {
      it('should call getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGet successfully', function(done) {
        //uncomment below and update the code to test getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGet
        //instance.getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSingleAllowlistV1AllowlistPrivateAllowlistIdGet', function() {
      it('should call getSingleAllowlistV1AllowlistPrivateAllowlistIdGet successfully', function(done) {
        //uncomment below and update the code to test getSingleAllowlistV1AllowlistPrivateAllowlistIdGet
        //instance.getSingleAllowlistV1AllowlistPrivateAllowlistIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSingleAllowlistV1AllowlistPublicAllowlistIdGet', function() {
      it('should call getSingleAllowlistV1AllowlistPublicAllowlistIdGet successfully', function(done) {
        //uncomment below and update the code to test getSingleAllowlistV1AllowlistPublicAllowlistIdGet
        //instance.getSingleAllowlistV1AllowlistPublicAllowlistIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryResourceAllowlistsV1AllowlistPublicIpAddressGet', function() {
      it('should call queryResourceAllowlistsV1AllowlistPublicIpAddressGet successfully', function(done) {
        //uncomment below and update the code to test queryResourceAllowlistsV1AllowlistPublicIpAddressGet
        //instance.queryResourceAllowlistsV1AllowlistPublicIpAddressGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryResourceDenylistsV1AllowlistPrivateIpAddressGet', function() {
      it('should call queryResourceDenylistsV1AllowlistPrivateIpAddressGet successfully', function(done) {
        //uncomment below and update the code to test queryResourceDenylistsV1AllowlistPrivateIpAddressGet
        //instance.queryResourceDenylistsV1AllowlistPrivateIpAddressGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPut', function() {
      it('should call updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPut successfully', function(done) {
        //uncomment below and update the code to test updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPut
        //instance.updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPut', function() {
      it('should call updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPut successfully', function(done) {
        //uncomment below and update the code to test updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPut
        //instance.updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
