/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ThreatJammerComUserApi);
  }
}(this, function(expect, ThreatJammerComUserApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ThreatJammerComUserApi.DenylistDataQueryAndManagementApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DenylistDataQueryAndManagementApi', function() {
    describe('changeStatusOfTheDenylistV1DenylistPublicDenylistIdPut', function() {
      it('should call changeStatusOfTheDenylistV1DenylistPublicDenylistIdPut successfully', function(done) {
        //uncomment below and update the code to test changeStatusOfTheDenylistV1DenylistPublicDenylistIdPut
        //instance.changeStatusOfTheDenylistV1DenylistPublicDenylistIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPut', function() {
      it('should call changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPut successfully', function(done) {
        //uncomment below and update the code to test changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPut
        //instance.changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPut', function() {
      it('should call changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPut successfully', function(done) {
        //uncomment below and update the code to test changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPut
        //instance.changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPrivateDenylistOfTheUserV1DenylistPrivatePost', function() {
      it('should call createPrivateDenylistOfTheUserV1DenylistPrivatePost successfully', function(done) {
        //uncomment below and update the code to test createPrivateDenylistOfTheUserV1DenylistPrivatePost
        //instance.createPrivateDenylistOfTheUserV1DenylistPrivatePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDelete', function() {
      it('should call deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDelete successfully', function(done) {
        //uncomment below and update the code to test deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDelete
        //instance.deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDelete', function() {
      it('should call deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDelete successfully', function(done) {
        //uncomment below and update the code to test deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDelete
        //instance.deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDelete', function() {
      it('should call deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDelete successfully', function(done) {
        //uncomment below and update the code to test deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDelete
        //instance.deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTheDenylistV1DenylistPrivateDenylistIdDelete', function() {
      it('should call deleteTheDenylistV1DenylistPrivateDenylistIdDelete successfully', function(done) {
        //uncomment below and update the code to test deleteTheDenylistV1DenylistPrivateDenylistIdDelete
        //instance.deleteTheDenylistV1DenylistPrivateDenylistIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTheDenylistV1DenylistPublicDenylistIdDelete', function() {
      it('should call deleteTheDenylistV1DenylistPublicDenylistIdDelete successfully', function(done) {
        //uncomment below and update the code to test deleteTheDenylistV1DenylistPublicDenylistIdDelete
        //instance.deleteTheDenylistV1DenylistPublicDenylistIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGet', function() {
      it('should call getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGet successfully', function(done) {
        //uncomment below and update the code to test getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGet
        //instance.getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGet', function() {
      it('should call getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGet successfully', function(done) {
        //uncomment below and update the code to test getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGet
        //instance.getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPrivateDenylistsV1DenylistPrivateAllGet', function() {
      it('should call getAllPrivateDenylistsV1DenylistPrivateAllGet successfully', function(done) {
        //uncomment below and update the code to test getAllPrivateDenylistsV1DenylistPrivateAllGet
        //instance.getAllPrivateDenylistsV1DenylistPrivateAllGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGet', function() {
      it('should call getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGet successfully', function(done) {
        //uncomment below and update the code to test getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGet
        //instance.getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPublicDenylistsV1DenylistPublicAllGet', function() {
      it('should call getAllPublicDenylistsV1DenylistPublicAllGet successfully', function(done) {
        //uncomment below and update the code to test getAllPublicDenylistsV1DenylistPublicAllGet
        //instance.getAllPublicDenylistsV1DenylistPublicAllGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDenylistContentV1DenylistPrivateDenylistIdContentGet', function() {
      it('should call getDenylistContentV1DenylistPrivateDenylistIdContentGet successfully', function(done) {
        //uncomment below and update the code to test getDenylistContentV1DenylistPrivateDenylistIdContentGet
        //instance.getDenylistContentV1DenylistPrivateDenylistIdContentGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGet', function() {
      it('should call getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGet successfully', function(done) {
        //uncomment below and update the code to test getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGet
        //instance.getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSingleDenylistV1DenylistPrivateDenylistIdGet', function() {
      it('should call getSingleDenylistV1DenylistPrivateDenylistIdGet successfully', function(done) {
        //uncomment below and update the code to test getSingleDenylistV1DenylistPrivateDenylistIdGet
        //instance.getSingleDenylistV1DenylistPrivateDenylistIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSingleDenylistV1DenylistPublicDenylistIdGet', function() {
      it('should call getSingleDenylistV1DenylistPublicDenylistIdGet successfully', function(done) {
        //uncomment below and update the code to test getSingleDenylistV1DenylistPublicDenylistIdGet
        //instance.getSingleDenylistV1DenylistPublicDenylistIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGet', function() {
      it('should call queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGet successfully', function(done) {
        //uncomment below and update the code to test queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGet
        //instance.queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGet', function() {
      it('should call queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGet successfully', function(done) {
        //uncomment below and update the code to test queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGet
        //instance.queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryResourceDenylistsV1DenylistPrivateIpAddressGet', function() {
      it('should call queryResourceDenylistsV1DenylistPrivateIpAddressGet successfully', function(done) {
        //uncomment below and update the code to test queryResourceDenylistsV1DenylistPrivateIpAddressGet
        //instance.queryResourceDenylistsV1DenylistPrivateIpAddressGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryResourceDenylistsV1DenylistPublicIpAddressGet', function() {
      it('should call queryResourceDenylistsV1DenylistPublicIpAddressGet successfully', function(done) {
        //uncomment below and update the code to test queryResourceDenylistsV1DenylistPublicIpAddressGet
        //instance.queryResourceDenylistsV1DenylistPublicIpAddressGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPut', function() {
      it('should call updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPut successfully', function(done) {
        //uncomment below and update the code to test updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPut
        //instance.updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPut', function() {
      it('should call updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPut successfully', function(done) {
        //uncomment below and update the code to test updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPut
        //instance.updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
