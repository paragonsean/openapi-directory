/*
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1ModelsSourceSourceOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:58.480875-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1ModelsSourceSourceOutput {
  public static final String SERIALIZED_NAME_DATASET = "dataset";
  @SerializedName(SERIALIZED_NAME_DATASET)
  private String dataset;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets maximumRisk
   */
  @JsonAdapter(MaximumRiskEnum.Adapter.class)
  public enum MaximumRiskEnum {
    UNKNOWN("UNKNOWN"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH");

    private String value;

    MaximumRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaximumRiskEnum fromValue(String value) {
      for (MaximumRiskEnum b : MaximumRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaximumRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaximumRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaximumRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaximumRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaximumRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAXIMUM_RISK = "maximum_risk";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RISK)
  private MaximumRiskEnum maximumRisk;

  public static final String SERIALIZED_NAME_MAXIMUM_SCORE = "maximum_score";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_SCORE)
  private Integer maximumScore;

  /**
   * Gets or Sets minimumRisk
   */
  @JsonAdapter(MinimumRiskEnum.Adapter.class)
  public enum MinimumRiskEnum {
    UNKNOWN("UNKNOWN"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH");

    private String value;

    MinimumRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumRiskEnum fromValue(String value) {
      for (MinimumRiskEnum b : MinimumRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinimumRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_RISK = "minimum_risk";
  @SerializedName(SERIALIZED_NAME_MINIMUM_RISK)
  private MinimumRiskEnum minimumRisk;

  public static final String SERIALIZED_NAME_MINIMUM_SCORE = "minimum_score";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SCORE)
  private Integer minimumScore;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets refresh
   */
  @JsonAdapter(RefreshEnum.Adapter.class)
  public enum RefreshEnum {
    _1_H("1H"),
    
    _6_H("6H"),
    
    _12_H("12H"),
    
    _1_D("1D"),
    
    _7_D("7D"),
    
    _30_D("30D"),
    
    _90_D("90D"),
    
    _180_D("180D"),
    
    _365_D("365D");

    private String value;

    RefreshEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefreshEnum fromValue(String value) {
      for (RefreshEnum b : RefreshEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RefreshEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefreshEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefreshEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RefreshEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RefreshEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFRESH = "refresh";
  @SerializedName(SERIALIZED_NAME_REFRESH)
  private RefreshEnum refresh;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  /**
   * Gets or Sets subscriptions
   */
  @JsonAdapter(SubscriptionsEnum.Adapter.class)
  public enum SubscriptionsEnum {
    FREE("FREE"),
    
    BASIC("BASIC"),
    
    PRO("PRO"),
    
    ENTERPRISE("ENTERPRISE");

    private String value;

    SubscriptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubscriptionsEnum fromValue(String value) {
      for (SubscriptionsEnum b : SubscriptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubscriptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubscriptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubscriptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubscriptionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubscriptionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS = "subscriptions";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS)
  private List<SubscriptionsEnum> subscriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_RANGES = "time_ranges";
  @SerializedName(SERIALIZED_NAME_TIME_RANGES)
  private List<String> timeRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Integer updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public V1ModelsSourceSourceOutput() {
  }

  public V1ModelsSourceSourceOutput dataset(String dataset) {
    this.dataset = dataset;
    return this;
  }

  /**
   * Get dataset
   * @return dataset
   */
  @javax.annotation.Nonnull
  public String getDataset() {
    return dataset;
  }

  public void setDataset(String dataset) {
    this.dataset = dataset;
  }


  public V1ModelsSourceSourceOutput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public V1ModelsSourceSourceOutput maximumRisk(MaximumRiskEnum maximumRisk) {
    this.maximumRisk = maximumRisk;
    return this;
  }

  /**
   * Get maximumRisk
   * @return maximumRisk
   */
  @javax.annotation.Nonnull
  public MaximumRiskEnum getMaximumRisk() {
    return maximumRisk;
  }

  public void setMaximumRisk(MaximumRiskEnum maximumRisk) {
    this.maximumRisk = maximumRisk;
  }


  public V1ModelsSourceSourceOutput maximumScore(Integer maximumScore) {
    this.maximumScore = maximumScore;
    return this;
  }

  /**
   * Get maximumScore
   * @return maximumScore
   */
  @javax.annotation.Nonnull
  public Integer getMaximumScore() {
    return maximumScore;
  }

  public void setMaximumScore(Integer maximumScore) {
    this.maximumScore = maximumScore;
  }


  public V1ModelsSourceSourceOutput minimumRisk(MinimumRiskEnum minimumRisk) {
    this.minimumRisk = minimumRisk;
    return this;
  }

  /**
   * Get minimumRisk
   * @return minimumRisk
   */
  @javax.annotation.Nonnull
  public MinimumRiskEnum getMinimumRisk() {
    return minimumRisk;
  }

  public void setMinimumRisk(MinimumRiskEnum minimumRisk) {
    this.minimumRisk = minimumRisk;
  }


  public V1ModelsSourceSourceOutput minimumScore(Integer minimumScore) {
    this.minimumScore = minimumScore;
    return this;
  }

  /**
   * Get minimumScore
   * @return minimumScore
   */
  @javax.annotation.Nonnull
  public Integer getMinimumScore() {
    return minimumScore;
  }

  public void setMinimumScore(Integer minimumScore) {
    this.minimumScore = minimumScore;
  }


  public V1ModelsSourceSourceOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public V1ModelsSourceSourceOutput refresh(RefreshEnum refresh) {
    this.refresh = refresh;
    return this;
  }

  /**
   * Get refresh
   * @return refresh
   */
  @javax.annotation.Nonnull
  public RefreshEnum getRefresh() {
    return refresh;
  }

  public void setRefresh(RefreshEnum refresh) {
    this.refresh = refresh;
  }


  public V1ModelsSourceSourceOutput self(String self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nonnull
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }


  public V1ModelsSourceSourceOutput source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public V1ModelsSourceSourceOutput subscriptions(List<SubscriptionsEnum> subscriptions) {
    this.subscriptions = subscriptions;
    return this;
  }

  public V1ModelsSourceSourceOutput addSubscriptionsItem(SubscriptionsEnum subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

  /**
   * Get subscriptions
   * @return subscriptions
   */
  @javax.annotation.Nonnull
  public List<SubscriptionsEnum> getSubscriptions() {
    return subscriptions;
  }

  public void setSubscriptions(List<SubscriptionsEnum> subscriptions) {
    this.subscriptions = subscriptions;
  }


  public V1ModelsSourceSourceOutput timeRanges(List<String> timeRanges) {
    this.timeRanges = timeRanges;
    return this;
  }

  public V1ModelsSourceSourceOutput addTimeRangesItem(String timeRangesItem) {
    if (this.timeRanges == null) {
      this.timeRanges = new ArrayList<>();
    }
    this.timeRanges.add(timeRangesItem);
    return this;
  }

  /**
   * Get timeRanges
   * @return timeRanges
   */
  @javax.annotation.Nonnull
  public List<String> getTimeRanges() {
    return timeRanges;
  }

  public void setTimeRanges(List<String> timeRanges) {
    this.timeRanges = timeRanges;
  }


  public V1ModelsSourceSourceOutput updatedAt(Integer updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public Integer getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Integer updatedAt) {
    this.updatedAt = updatedAt;
  }


  public V1ModelsSourceSourceOutput url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ModelsSourceSourceOutput v1ModelsSourceSourceOutput = (V1ModelsSourceSourceOutput) o;
    return Objects.equals(this.dataset, v1ModelsSourceSourceOutput.dataset) &&
        Objects.equals(this.description, v1ModelsSourceSourceOutput.description) &&
        Objects.equals(this.maximumRisk, v1ModelsSourceSourceOutput.maximumRisk) &&
        Objects.equals(this.maximumScore, v1ModelsSourceSourceOutput.maximumScore) &&
        Objects.equals(this.minimumRisk, v1ModelsSourceSourceOutput.minimumRisk) &&
        Objects.equals(this.minimumScore, v1ModelsSourceSourceOutput.minimumScore) &&
        Objects.equals(this.name, v1ModelsSourceSourceOutput.name) &&
        Objects.equals(this.refresh, v1ModelsSourceSourceOutput.refresh) &&
        Objects.equals(this.self, v1ModelsSourceSourceOutput.self) &&
        Objects.equals(this.source, v1ModelsSourceSourceOutput.source) &&
        Objects.equals(this.subscriptions, v1ModelsSourceSourceOutput.subscriptions) &&
        Objects.equals(this.timeRanges, v1ModelsSourceSourceOutput.timeRanges) &&
        Objects.equals(this.updatedAt, v1ModelsSourceSourceOutput.updatedAt) &&
        Objects.equals(this.url, v1ModelsSourceSourceOutput.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataset, description, maximumRisk, maximumScore, minimumRisk, minimumScore, name, refresh, self, source, subscriptions, timeRanges, updatedAt, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ModelsSourceSourceOutput {\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    maximumRisk: ").append(toIndentedString(maximumRisk)).append("\n");
    sb.append("    maximumScore: ").append(toIndentedString(maximumScore)).append("\n");
    sb.append("    minimumRisk: ").append(toIndentedString(minimumRisk)).append("\n");
    sb.append("    minimumScore: ").append(toIndentedString(minimumScore)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    refresh: ").append(toIndentedString(refresh)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("    timeRanges: ").append(toIndentedString(timeRanges)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataset");
    openapiFields.add("description");
    openapiFields.add("maximum_risk");
    openapiFields.add("maximum_score");
    openapiFields.add("minimum_risk");
    openapiFields.add("minimum_score");
    openapiFields.add("name");
    openapiFields.add("refresh");
    openapiFields.add("self");
    openapiFields.add("source");
    openapiFields.add("subscriptions");
    openapiFields.add("time_ranges");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataset");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("maximum_risk");
    openapiRequiredFields.add("maximum_score");
    openapiRequiredFields.add("minimum_risk");
    openapiRequiredFields.add("minimum_score");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("refresh");
    openapiRequiredFields.add("self");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("subscriptions");
    openapiRequiredFields.add("time_ranges");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1ModelsSourceSourceOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1ModelsSourceSourceOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1ModelsSourceSourceOutput is not found in the empty JSON string", V1ModelsSourceSourceOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1ModelsSourceSourceOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1ModelsSourceSourceOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1ModelsSourceSourceOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataset").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("maximum_risk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximum_risk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximum_risk").toString()));
      }
      // validate the required field `maximum_risk`
      MaximumRiskEnum.validateJsonElement(jsonObj.get("maximum_risk"));
      if (!jsonObj.get("minimum_risk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_risk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_risk").toString()));
      }
      // validate the required field `minimum_risk`
      MinimumRiskEnum.validateJsonElement(jsonObj.get("minimum_risk"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("refresh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh").toString()));
      }
      // validate the required field `refresh`
      RefreshEnum.validateJsonElement(jsonObj.get("refresh"));
      if (!jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("subscriptions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("subscriptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptions` to be an array in the JSON string but got `%s`", jsonObj.get("subscriptions").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("time_ranges") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("time_ranges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_ranges` to be an array in the JSON string but got `%s`", jsonObj.get("time_ranges").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1ModelsSourceSourceOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1ModelsSourceSourceOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1ModelsSourceSourceOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1ModelsSourceSourceOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<V1ModelsSourceSourceOutput>() {
           @Override
           public void write(JsonWriter out, V1ModelsSourceSourceOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1ModelsSourceSourceOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1ModelsSourceSourceOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1ModelsSourceSourceOutput
   * @throws IOException if the JSON string is invalid with respect to V1ModelsSourceSourceOutput
   */
  public static V1ModelsSourceSourceOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1ModelsSourceSourceOutput.class);
  }

  /**
   * Convert an instance of V1ModelsSourceSourceOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

