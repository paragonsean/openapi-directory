/*
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeoIPOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:58.480875-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeoIPOutput {
  public static final String SERIALIZED_NAME_ACCURACY_RADIUS = "accuracy_radius";
  @SerializedName(SERIALIZED_NAME_ACCURACY_RADIUS)
  private BigDecimal accuracyRadius;

  public static final String SERIALIZED_NAME_ASN_COUNTRY_ISO_CODE = "asn_country_iso_code";
  @SerializedName(SERIALIZED_NAME_ASN_COUNTRY_ISO_CODE)
  private String asnCountryIsoCode;

  public static final String SERIALIZED_NAME_CITY_GEONAME_CODE = "city_geoname_code";
  @SerializedName(SERIALIZED_NAME_CITY_GEONAME_CODE)
  private Integer cityGeonameCode;

  public static final String SERIALIZED_NAME_CITY_NAME = "city_name";
  @SerializedName(SERIALIZED_NAME_CITY_NAME)
  private String cityName;

  public static final String SERIALIZED_NAME_CONTINENT_CODE = "continent_code";
  @SerializedName(SERIALIZED_NAME_CONTINENT_CODE)
  private String continentCode;

  public static final String SERIALIZED_NAME_COUNTRY_ISO_CODE = "country_iso_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO_CODE)
  private String countryIsoCode;

  public static final String SERIALIZED_NAME_HOSTNAMES = "hostnames";
  @SerializedName(SERIALIZED_NAME_HOSTNAMES)
  private List<String> hostnames = new ArrayList<>();

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REGION_GEONAME_CODE = "region_geoname_code";
  @SerializedName(SERIALIZED_NAME_REGION_GEONAME_CODE)
  private Integer regionGeonameCode;

  public static final String SERIALIZED_NAME_REGION_NAME = "region_name";
  @SerializedName(SERIALIZED_NAME_REGION_NAME)
  private String regionName;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public GeoIPOutput() {
  }

  public GeoIPOutput accuracyRadius(BigDecimal accuracyRadius) {
    this.accuracyRadius = accuracyRadius;
    return this;
  }

  /**
   * Get accuracyRadius
   * @return accuracyRadius
   */
  @javax.annotation.Nonnull
  public BigDecimal getAccuracyRadius() {
    return accuracyRadius;
  }

  public void setAccuracyRadius(BigDecimal accuracyRadius) {
    this.accuracyRadius = accuracyRadius;
  }


  public GeoIPOutput asnCountryIsoCode(String asnCountryIsoCode) {
    this.asnCountryIsoCode = asnCountryIsoCode;
    return this;
  }

  /**
   * Get asnCountryIsoCode
   * @return asnCountryIsoCode
   */
  @javax.annotation.Nonnull
  public String getAsnCountryIsoCode() {
    return asnCountryIsoCode;
  }

  public void setAsnCountryIsoCode(String asnCountryIsoCode) {
    this.asnCountryIsoCode = asnCountryIsoCode;
  }


  public GeoIPOutput cityGeonameCode(Integer cityGeonameCode) {
    this.cityGeonameCode = cityGeonameCode;
    return this;
  }

  /**
   * Get cityGeonameCode
   * @return cityGeonameCode
   */
  @javax.annotation.Nonnull
  public Integer getCityGeonameCode() {
    return cityGeonameCode;
  }

  public void setCityGeonameCode(Integer cityGeonameCode) {
    this.cityGeonameCode = cityGeonameCode;
  }


  public GeoIPOutput cityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  /**
   * Get cityName
   * @return cityName
   */
  @javax.annotation.Nonnull
  public String getCityName() {
    return cityName;
  }

  public void setCityName(String cityName) {
    this.cityName = cityName;
  }


  public GeoIPOutput continentCode(String continentCode) {
    this.continentCode = continentCode;
    return this;
  }

  /**
   * Get continentCode
   * @return continentCode
   */
  @javax.annotation.Nonnull
  public String getContinentCode() {
    return continentCode;
  }

  public void setContinentCode(String continentCode) {
    this.continentCode = continentCode;
  }


  public GeoIPOutput countryIsoCode(String countryIsoCode) {
    this.countryIsoCode = countryIsoCode;
    return this;
  }

  /**
   * Get countryIsoCode
   * @return countryIsoCode
   */
  @javax.annotation.Nonnull
  public String getCountryIsoCode() {
    return countryIsoCode;
  }

  public void setCountryIsoCode(String countryIsoCode) {
    this.countryIsoCode = countryIsoCode;
  }


  public GeoIPOutput hostnames(List<String> hostnames) {
    this.hostnames = hostnames;
    return this;
  }

  public GeoIPOutput addHostnamesItem(String hostnamesItem) {
    if (this.hostnames == null) {
      this.hostnames = new ArrayList<>();
    }
    this.hostnames.add(hostnamesItem);
    return this;
  }

  /**
   * Get hostnames
   * @return hostnames
   */
  @javax.annotation.Nonnull
  public List<String> getHostnames() {
    return hostnames;
  }

  public void setHostnames(List<String> hostnames) {
    this.hostnames = hostnames;
  }


  public GeoIPOutput latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public GeoIPOutput longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public GeoIPOutput postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public GeoIPOutput regionGeonameCode(Integer regionGeonameCode) {
    this.regionGeonameCode = regionGeonameCode;
    return this;
  }

  /**
   * Get regionGeonameCode
   * @return regionGeonameCode
   */
  @javax.annotation.Nonnull
  public Integer getRegionGeonameCode() {
    return regionGeonameCode;
  }

  public void setRegionGeonameCode(Integer regionGeonameCode) {
    this.regionGeonameCode = regionGeonameCode;
  }


  public GeoIPOutput regionName(String regionName) {
    this.regionName = regionName;
    return this;
  }

  /**
   * Get regionName
   * @return regionName
   */
  @javax.annotation.Nonnull
  public String getRegionName() {
    return regionName;
  }

  public void setRegionName(String regionName) {
    this.regionName = regionName;
  }


  public GeoIPOutput self(String self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }


  public GeoIPOutput timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nonnull
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoIPOutput geoIPOutput = (GeoIPOutput) o;
    return Objects.equals(this.accuracyRadius, geoIPOutput.accuracyRadius) &&
        Objects.equals(this.asnCountryIsoCode, geoIPOutput.asnCountryIsoCode) &&
        Objects.equals(this.cityGeonameCode, geoIPOutput.cityGeonameCode) &&
        Objects.equals(this.cityName, geoIPOutput.cityName) &&
        Objects.equals(this.continentCode, geoIPOutput.continentCode) &&
        Objects.equals(this.countryIsoCode, geoIPOutput.countryIsoCode) &&
        Objects.equals(this.hostnames, geoIPOutput.hostnames) &&
        Objects.equals(this.latitude, geoIPOutput.latitude) &&
        Objects.equals(this.longitude, geoIPOutput.longitude) &&
        Objects.equals(this.postalCode, geoIPOutput.postalCode) &&
        Objects.equals(this.regionGeonameCode, geoIPOutput.regionGeonameCode) &&
        Objects.equals(this.regionName, geoIPOutput.regionName) &&
        Objects.equals(this.self, geoIPOutput.self) &&
        Objects.equals(this.timeZone, geoIPOutput.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accuracyRadius, asnCountryIsoCode, cityGeonameCode, cityName, continentCode, countryIsoCode, hostnames, latitude, longitude, postalCode, regionGeonameCode, regionName, self, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoIPOutput {\n");
    sb.append("    accuracyRadius: ").append(toIndentedString(accuracyRadius)).append("\n");
    sb.append("    asnCountryIsoCode: ").append(toIndentedString(asnCountryIsoCode)).append("\n");
    sb.append("    cityGeonameCode: ").append(toIndentedString(cityGeonameCode)).append("\n");
    sb.append("    cityName: ").append(toIndentedString(cityName)).append("\n");
    sb.append("    continentCode: ").append(toIndentedString(continentCode)).append("\n");
    sb.append("    countryIsoCode: ").append(toIndentedString(countryIsoCode)).append("\n");
    sb.append("    hostnames: ").append(toIndentedString(hostnames)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    regionGeonameCode: ").append(toIndentedString(regionGeonameCode)).append("\n");
    sb.append("    regionName: ").append(toIndentedString(regionName)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accuracy_radius");
    openapiFields.add("asn_country_iso_code");
    openapiFields.add("city_geoname_code");
    openapiFields.add("city_name");
    openapiFields.add("continent_code");
    openapiFields.add("country_iso_code");
    openapiFields.add("hostnames");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("postal_code");
    openapiFields.add("region_geoname_code");
    openapiFields.add("region_name");
    openapiFields.add("self");
    openapiFields.add("time_zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accuracy_radius");
    openapiRequiredFields.add("asn_country_iso_code");
    openapiRequiredFields.add("city_geoname_code");
    openapiRequiredFields.add("city_name");
    openapiRequiredFields.add("continent_code");
    openapiRequiredFields.add("country_iso_code");
    openapiRequiredFields.add("hostnames");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
    openapiRequiredFields.add("postal_code");
    openapiRequiredFields.add("region_geoname_code");
    openapiRequiredFields.add("region_name");
    openapiRequiredFields.add("time_zone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeoIPOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeoIPOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeoIPOutput is not found in the empty JSON string", GeoIPOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeoIPOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeoIPOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GeoIPOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("asn_country_iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn_country_iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn_country_iso_code").toString()));
      }
      if (!jsonObj.get("city_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city_name").toString()));
      }
      if (!jsonObj.get("continent_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continent_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continent_code").toString()));
      }
      if (!jsonObj.get("country_iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_iso_code").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("hostnames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("hostnames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostnames` to be an array in the JSON string but got `%s`", jsonObj.get("hostnames").toString()));
      }
      if (!jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if (!jsonObj.get("region_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_name").toString()));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      if (!jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeoIPOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeoIPOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeoIPOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeoIPOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GeoIPOutput>() {
           @Override
           public void write(JsonWriter out, GeoIPOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeoIPOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeoIPOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeoIPOutput
   * @throws IOException if the JSON string is invalid with respect to GeoIPOutput
   */
  public static GeoIPOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeoIPOutput.class);
  }

  /**
   * Convert an instance of GeoIPOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

