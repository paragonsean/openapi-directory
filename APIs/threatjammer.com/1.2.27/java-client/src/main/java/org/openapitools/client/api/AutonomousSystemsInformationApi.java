/*
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutonomousSystemOutput;
import org.openapitools.client.model.AutonomousSystemPrefixOutput;
import org.openapitools.client.model.AutonomousSystemPrefixesOutput;
import org.openapitools.client.model.AutonomousSystemRegistryOutput;
import org.openapitools.client.model.AutonomousSystemStatusOutput;
import org.openapitools.client.model.BodyQueryAsnPrefixInformationV1AsnPrefixPost;
import org.openapitools.client.model.HTTPValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutonomousSystemsInformationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutonomousSystemsInformationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutonomousSystemsInformationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queryAsnPrefixInformationV1AsnPrefixPost
     * @param bodyQueryAsnPrefixInformationV1AsnPrefixPost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsnPrefixInformationV1AsnPrefixPostCall(BodyQueryAsnPrefixInformationV1AsnPrefixPost bodyQueryAsnPrefixInformationV1AsnPrefixPost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyQueryAsnPrefixInformationV1AsnPrefixPost;

        // create path and map variables
        String localVarPath = "/v1/asn/prefix";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryAsnPrefixInformationV1AsnPrefixPostValidateBeforeCall(BodyQueryAsnPrefixInformationV1AsnPrefixPost bodyQueryAsnPrefixInformationV1AsnPrefixPost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bodyQueryAsnPrefixInformationV1AsnPrefixPost' is set
        if (bodyQueryAsnPrefixInformationV1AsnPrefixPost == null) {
            throw new ApiException("Missing the required parameter 'bodyQueryAsnPrefixInformationV1AsnPrefixPost' when calling queryAsnPrefixInformationV1AsnPrefixPost(Async)");
        }

        return queryAsnPrefixInformationV1AsnPrefixPostCall(bodyQueryAsnPrefixInformationV1AsnPrefixPost, _callback);

    }

    /**
     * Get the IPv4 or IPv6 prefix of the CIDR given.
     * ### What Obtain the IPv4 or IPv6 prefix and the Autonomous System information of the CIDR passed in the body as a POST method. This endpoint works around the problem of passing &#39;/&#39; addresses in the URI.  ### Parameters The endpoint accepts only the following parameter in the body as a JSON object: - &#x60;&#x60;prefix&#x60;&#x60;: (Mandatory) The CIDR v4 or v6 to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv4 prefix. - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN. - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv4 or IPv6. - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry. - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry. - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD. - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry. - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99. - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.  ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the prefix information was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the CIDR is malformed.  It will also return the API Global errors described in the API description.
     * @param bodyQueryAsnPrefixInformationV1AsnPrefixPost  (required)
     * @return AutonomousSystemPrefixOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AutonomousSystemPrefixOutput queryAsnPrefixInformationV1AsnPrefixPost(BodyQueryAsnPrefixInformationV1AsnPrefixPost bodyQueryAsnPrefixInformationV1AsnPrefixPost) throws ApiException {
        ApiResponse<AutonomousSystemPrefixOutput> localVarResp = queryAsnPrefixInformationV1AsnPrefixPostWithHttpInfo(bodyQueryAsnPrefixInformationV1AsnPrefixPost);
        return localVarResp.getData();
    }

    /**
     * Get the IPv4 or IPv6 prefix of the CIDR given.
     * ### What Obtain the IPv4 or IPv6 prefix and the Autonomous System information of the CIDR passed in the body as a POST method. This endpoint works around the problem of passing &#39;/&#39; addresses in the URI.  ### Parameters The endpoint accepts only the following parameter in the body as a JSON object: - &#x60;&#x60;prefix&#x60;&#x60;: (Mandatory) The CIDR v4 or v6 to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv4 prefix. - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN. - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv4 or IPv6. - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry. - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry. - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD. - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry. - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99. - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.  ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the prefix information was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the CIDR is malformed.  It will also return the API Global errors described in the API description.
     * @param bodyQueryAsnPrefixInformationV1AsnPrefixPost  (required)
     * @return ApiResponse&lt;AutonomousSystemPrefixOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutonomousSystemPrefixOutput> queryAsnPrefixInformationV1AsnPrefixPostWithHttpInfo(BodyQueryAsnPrefixInformationV1AsnPrefixPost bodyQueryAsnPrefixInformationV1AsnPrefixPost) throws ApiException {
        okhttp3.Call localVarCall = queryAsnPrefixInformationV1AsnPrefixPostValidateBeforeCall(bodyQueryAsnPrefixInformationV1AsnPrefixPost, null);
        Type localVarReturnType = new TypeToken<AutonomousSystemPrefixOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the IPv4 or IPv6 prefix of the CIDR given. (asynchronously)
     * ### What Obtain the IPv4 or IPv6 prefix and the Autonomous System information of the CIDR passed in the body as a POST method. This endpoint works around the problem of passing &#39;/&#39; addresses in the URI.  ### Parameters The endpoint accepts only the following parameter in the body as a JSON object: - &#x60;&#x60;prefix&#x60;&#x60;: (Mandatory) The CIDR v4 or v6 to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv4 prefix. - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN. - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv4 or IPv6. - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry. - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry. - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD. - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry. - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99. - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.  ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the prefix information was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the CIDR is malformed.  It will also return the API Global errors described in the API description.
     * @param bodyQueryAsnPrefixInformationV1AsnPrefixPost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsnPrefixInformationV1AsnPrefixPostAsync(BodyQueryAsnPrefixInformationV1AsnPrefixPost bodyQueryAsnPrefixInformationV1AsnPrefixPost, final ApiCallback<AutonomousSystemPrefixOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryAsnPrefixInformationV1AsnPrefixPostValidateBeforeCall(bodyQueryAsnPrefixInformationV1AsnPrefixPost, _callback);
        Type localVarReturnType = new TypeToken<AutonomousSystemPrefixOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryAsnPrefixesListV1AsnNumberPrefixesGet
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsnPrefixesListV1AsnNumberPrefixesGetCall(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/asn/{number}/prefixes"
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryAsnPrefixesListV1AsnNumberPrefixesGetValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling queryAsnPrefixesListV1AsnNumberPrefixesGet(Async)");
        }

        return queryAsnPrefixesListV1AsnNumberPrefixesGetCall(number, _callback);

    }

    /**
     * Get the list of IPv4 and IPv6 prefixes of the AS number given.
     * ### What Obtain the full list of IPv4 and IPv6 prefixes of the Autonomous System Number (ASN) passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;number&#x60;&#x60;: (Mandatory) The ASN number to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN. - &#x60;&#x60;prefixes_v4&#x60;&#x60;: the list of IPv4 prefixes that belong to the ASN. Each element of the list is a JSON object with the following structure:     - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv4 prefix.     - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN.     - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv4.     - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry.     - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry.     - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD.     - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry.     - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99.     - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score. - &#x60;&#x60;prefixes_v6&#x60;&#x60;: the list of IPv6 prefixes that belong to the ASN. Each element of the list is a JSON object with the following structure:     - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv6 prefix.     - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN.     - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv6.     - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry.     - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry.     - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD.     - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry.     - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99.     - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.  ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the AS was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the AS number is malformed.  It will also return the API Global errors described in the API description.
     * @param number  (required)
     * @return AutonomousSystemPrefixesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AutonomousSystemPrefixesOutput queryAsnPrefixesListV1AsnNumberPrefixesGet(Integer number) throws ApiException {
        ApiResponse<AutonomousSystemPrefixesOutput> localVarResp = queryAsnPrefixesListV1AsnNumberPrefixesGetWithHttpInfo(number);
        return localVarResp.getData();
    }

    /**
     * Get the list of IPv4 and IPv6 prefixes of the AS number given.
     * ### What Obtain the full list of IPv4 and IPv6 prefixes of the Autonomous System Number (ASN) passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;number&#x60;&#x60;: (Mandatory) The ASN number to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN. - &#x60;&#x60;prefixes_v4&#x60;&#x60;: the list of IPv4 prefixes that belong to the ASN. Each element of the list is a JSON object with the following structure:     - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv4 prefix.     - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN.     - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv4.     - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry.     - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry.     - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD.     - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry.     - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99.     - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score. - &#x60;&#x60;prefixes_v6&#x60;&#x60;: the list of IPv6 prefixes that belong to the ASN. Each element of the list is a JSON object with the following structure:     - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv6 prefix.     - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN.     - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv6.     - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry.     - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry.     - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD.     - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry.     - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99.     - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.  ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the AS was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the AS number is malformed.  It will also return the API Global errors described in the API description.
     * @param number  (required)
     * @return ApiResponse&lt;AutonomousSystemPrefixesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutonomousSystemPrefixesOutput> queryAsnPrefixesListV1AsnNumberPrefixesGetWithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = queryAsnPrefixesListV1AsnNumberPrefixesGetValidateBeforeCall(number, null);
        Type localVarReturnType = new TypeToken<AutonomousSystemPrefixesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of IPv4 and IPv6 prefixes of the AS number given. (asynchronously)
     * ### What Obtain the full list of IPv4 and IPv6 prefixes of the Autonomous System Number (ASN) passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;number&#x60;&#x60;: (Mandatory) The ASN number to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN. - &#x60;&#x60;prefixes_v4&#x60;&#x60;: the list of IPv4 prefixes that belong to the ASN. Each element of the list is a JSON object with the following structure:     - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv4 prefix.     - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN.     - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv4.     - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry.     - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry.     - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD.     - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry.     - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99.     - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score. - &#x60;&#x60;prefixes_v6&#x60;&#x60;: the list of IPv6 prefixes that belong to the ASN. Each element of the list is a JSON object with the following structure:     - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv6 prefix.     - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN.     - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv6.     - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry.     - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry.     - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD.     - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry.     - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99.     - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.  ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the AS was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the AS number is malformed.  It will also return the API Global errors described in the API description.
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsnPrefixesListV1AsnNumberPrefixesGetAsync(Integer number, final ApiCallback<AutonomousSystemPrefixesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryAsnPrefixesListV1AsnNumberPrefixesGetValidateBeforeCall(number, _callback);
        Type localVarReturnType = new TypeToken<AutonomousSystemPrefixesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryAsnV1AsnNumberGet
     * @param number  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsnV1AsnNumberGetCall(Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/asn/{number}"
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryAsnV1AsnNumberGetValidateBeforeCall(Integer number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling queryAsnV1AsnNumberGet(Async)");
        }

        return queryAsnV1AsnNumberGetCall(number, _callback);

    }

    /**
     * Get the Autonomous System details of the AS number given.
     * ### What Obtain the full details of the Autonomous System Number (ASN) passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;number&#x60;&#x60;: (Mandatory) The ASN number to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;name&#x60;&#x60;: the name of the Autonomous System as registered in the registries databases. - &#x60;&#x60;description&#x60;&#x60;: the description of the Autonomous System as registered in the registries databases. - &#x60;&#x60;country_code&#x60;&#x60;: the ISO 3166-1 alpha-2 country code of the Autonomous System. - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the Autonomous System in the registry. The format is YYYY-MM-DD. - &#x60;&#x60;registry&#x60;&#x60;: the URI of the registry where the Autonomous System is registered. - &#x60;&#x60;status&#x60;&#x60;: the status of the Autonomous System as stored in the registry. - &#x60;&#x60;prefixes&#x60;&#x60;: the URI to the list of prefixes that belong to the Autonomous System. - &#x60;&#x60;score&#x60;&#x60;: The risk score of the Autonomous System. It ranges from 0 to 99. - &#x60;&#x60;risk&#x60;&#x60;: The risk of the Autonomous System. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.   ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the AS was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the AS number is malformed.  It will also return the API Global errors described in the API description.
     * @param number  (required)
     * @return AutonomousSystemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AutonomousSystemOutput queryAsnV1AsnNumberGet(Integer number) throws ApiException {
        ApiResponse<AutonomousSystemOutput> localVarResp = queryAsnV1AsnNumberGetWithHttpInfo(number);
        return localVarResp.getData();
    }

    /**
     * Get the Autonomous System details of the AS number given.
     * ### What Obtain the full details of the Autonomous System Number (ASN) passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;number&#x60;&#x60;: (Mandatory) The ASN number to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;name&#x60;&#x60;: the name of the Autonomous System as registered in the registries databases. - &#x60;&#x60;description&#x60;&#x60;: the description of the Autonomous System as registered in the registries databases. - &#x60;&#x60;country_code&#x60;&#x60;: the ISO 3166-1 alpha-2 country code of the Autonomous System. - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the Autonomous System in the registry. The format is YYYY-MM-DD. - &#x60;&#x60;registry&#x60;&#x60;: the URI of the registry where the Autonomous System is registered. - &#x60;&#x60;status&#x60;&#x60;: the status of the Autonomous System as stored in the registry. - &#x60;&#x60;prefixes&#x60;&#x60;: the URI to the list of prefixes that belong to the Autonomous System. - &#x60;&#x60;score&#x60;&#x60;: The risk score of the Autonomous System. It ranges from 0 to 99. - &#x60;&#x60;risk&#x60;&#x60;: The risk of the Autonomous System. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.   ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the AS was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the AS number is malformed.  It will also return the API Global errors described in the API description.
     * @param number  (required)
     * @return ApiResponse&lt;AutonomousSystemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutonomousSystemOutput> queryAsnV1AsnNumberGetWithHttpInfo(Integer number) throws ApiException {
        okhttp3.Call localVarCall = queryAsnV1AsnNumberGetValidateBeforeCall(number, null);
        Type localVarReturnType = new TypeToken<AutonomousSystemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Autonomous System details of the AS number given. (asynchronously)
     * ### What Obtain the full details of the Autonomous System Number (ASN) passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;number&#x60;&#x60;: (Mandatory) The ASN number to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;name&#x60;&#x60;: the name of the Autonomous System as registered in the registries databases. - &#x60;&#x60;description&#x60;&#x60;: the description of the Autonomous System as registered in the registries databases. - &#x60;&#x60;country_code&#x60;&#x60;: the ISO 3166-1 alpha-2 country code of the Autonomous System. - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the Autonomous System in the registry. The format is YYYY-MM-DD. - &#x60;&#x60;registry&#x60;&#x60;: the URI of the registry where the Autonomous System is registered. - &#x60;&#x60;status&#x60;&#x60;: the status of the Autonomous System as stored in the registry. - &#x60;&#x60;prefixes&#x60;&#x60;: the URI to the list of prefixes that belong to the Autonomous System. - &#x60;&#x60;score&#x60;&#x60;: The risk score of the Autonomous System. It ranges from 0 to 99. - &#x60;&#x60;risk&#x60;&#x60;: The risk of the Autonomous System. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.   ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the AS was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the AS number is malformed.  It will also return the API Global errors described in the API description.
     * @param number  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsnV1AsnNumberGetAsync(Integer number, final ApiCallback<AutonomousSystemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryAsnV1AsnNumberGetValidateBeforeCall(number, _callback);
        Type localVarReturnType = new TypeToken<AutonomousSystemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryIPAddressNetworkInformationV1AsnIpIpAddressGet
     * @param ipAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryIPAddressNetworkInformationV1AsnIpIpAddressGetCall(String ipAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/asn/ip/{ip_address}"
            .replace("{" + "ip_address" + "}", localVarApiClient.escapeString(ipAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryIPAddressNetworkInformationV1AsnIpIpAddressGetValidateBeforeCall(String ipAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling queryIPAddressNetworkInformationV1AsnIpIpAddressGet(Async)");
        }

        return queryIPAddressNetworkInformationV1AsnIpIpAddressGetCall(ipAddress, _callback);

    }

    /**
     * Get the IPv4 or IPv6 prefix of the IP address given.
     * ### What Obtain the IPv4 or IPv6 prefix and the Autonomous System information of the IP address passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;ip_address&#x60;&#x60;: (Mandatory) The IPv4 or IPv6 address to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv4 prefix. - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN. - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv4 or IPv6. - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry. - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry. - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD. - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry. - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99. - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.  ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the prefix information was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  It will also return the API Global errors described in the API description.
     * @param ipAddress  (required)
     * @return AutonomousSystemPrefixOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AutonomousSystemPrefixOutput queryIPAddressNetworkInformationV1AsnIpIpAddressGet(String ipAddress) throws ApiException {
        ApiResponse<AutonomousSystemPrefixOutput> localVarResp = queryIPAddressNetworkInformationV1AsnIpIpAddressGetWithHttpInfo(ipAddress);
        return localVarResp.getData();
    }

    /**
     * Get the IPv4 or IPv6 prefix of the IP address given.
     * ### What Obtain the IPv4 or IPv6 prefix and the Autonomous System information of the IP address passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;ip_address&#x60;&#x60;: (Mandatory) The IPv4 or IPv6 address to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv4 prefix. - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN. - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv4 or IPv6. - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry. - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry. - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD. - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry. - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99. - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.  ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the prefix information was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  It will also return the API Global errors described in the API description.
     * @param ipAddress  (required)
     * @return ApiResponse&lt;AutonomousSystemPrefixOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutonomousSystemPrefixOutput> queryIPAddressNetworkInformationV1AsnIpIpAddressGetWithHttpInfo(String ipAddress) throws ApiException {
        okhttp3.Call localVarCall = queryIPAddressNetworkInformationV1AsnIpIpAddressGetValidateBeforeCall(ipAddress, null);
        Type localVarReturnType = new TypeToken<AutonomousSystemPrefixOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the IPv4 or IPv6 prefix of the IP address given. (asynchronously)
     * ### What Obtain the IPv4 or IPv6 prefix and the Autonomous System information of the IP address passed as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;ip_address&#x60;&#x60;: (Mandatory) The IPv4 or IPv6 address to be queried.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual IPv4 prefix. - &#x60;&#x60;asn&#x60;&#x60;: the URI to query the full details of the ASN. - &#x60;&#x60;object_type&#x60;&#x60;: the type of the prefix. The allowed values are: IPv4 or IPv6. - &#x60;&#x60;maintainer&#x60;&#x60;: the information about the maintainer of this prefix in the registry. - &#x60;&#x60;description&#x60;&#x60;: the description of the prefix as registered in the registry. - &#x60;&#x60;registry_date&#x60;&#x60;: the date of registration of the prefix in the registry. The format is YYYY-MM-DD. - &#x60;&#x60;registry_status&#x60;&#x60;: the URI of the status of the prefix as stored in the registry. - &#x60;&#x60;score&#x60;&#x60;: The risk score of the prefix. It ranges from 0 to 99. - &#x60;&#x60;risk&#x60;&#x60;: The risk of the prefix. The allowed values are: LOW, MEDIUM, HIGH. It&#39;s a human readable representation of the score.  ### Errors The endpoint will return the following errors: - a &#x60;404 Not Found&#x60; error if the prefix information was not found. - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  It will also return the API Global errors described in the API description.
     * @param ipAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryIPAddressNetworkInformationV1AsnIpIpAddressGetAsync(String ipAddress, final ApiCallback<AutonomousSystemPrefixOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryIPAddressNetworkInformationV1AsnIpIpAddressGetValidateBeforeCall(ipAddress, _callback);
        Type localVarReturnType = new TypeToken<AutonomousSystemPrefixOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryRegistryByTheNameV1AsnRegistryCodeGet
     * @param code  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryRegistryByTheNameV1AsnRegistryCodeGetCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/asn/registry/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryRegistryByTheNameV1AsnRegistryCodeGetValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling queryRegistryByTheNameV1AsnRegistryCodeGet(Async)");
        }

        return queryRegistryByTheNameV1AsnRegistryCodeGetCall(code, _callback);

    }

    /**
     * Get the information of a Regional Internet Registries (RIRs) given.
     * ### What Obtain the information about the Regional Internet Registries (RIRs) given as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the RIR. Possible values are: iana, arin, ripencc, afrinic, apnic, lacnic.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual RIR. - &#x60;&#x60;name&#x60;&#x60;: the RIR name. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the RIR in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return AutonomousSystemRegistryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AutonomousSystemRegistryOutput queryRegistryByTheNameV1AsnRegistryCodeGet(String code) throws ApiException {
        ApiResponse<AutonomousSystemRegistryOutput> localVarResp = queryRegistryByTheNameV1AsnRegistryCodeGetWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get the information of a Regional Internet Registries (RIRs) given.
     * ### What Obtain the information about the Regional Internet Registries (RIRs) given as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the RIR. Possible values are: iana, arin, ripencc, afrinic, apnic, lacnic.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual RIR. - &#x60;&#x60;name&#x60;&#x60;: the RIR name. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the RIR in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return ApiResponse&lt;AutonomousSystemRegistryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutonomousSystemRegistryOutput> queryRegistryByTheNameV1AsnRegistryCodeGetWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = queryRegistryByTheNameV1AsnRegistryCodeGetValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<AutonomousSystemRegistryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information of a Regional Internet Registries (RIRs) given. (asynchronously)
     * ### What Obtain the information about the Regional Internet Registries (RIRs) given as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the RIR. Possible values are: iana, arin, ripencc, afrinic, apnic, lacnic.  ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual RIR. - &#x60;&#x60;name&#x60;&#x60;: the RIR name. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the RIR in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryRegistryByTheNameV1AsnRegistryCodeGetAsync(String code, final ApiCallback<AutonomousSystemRegistryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryRegistryByTheNameV1AsnRegistryCodeGetValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<AutonomousSystemRegistryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryRegistryNamesV1AsnRegistryAllGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryRegistryNamesV1AsnRegistryAllGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/asn/registry/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryRegistryNamesV1AsnRegistryAllGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return queryRegistryNamesV1AsnRegistryAllGetCall(_callback);

    }

    /**
     * Get the list of the Regional Internet Registries (RIRs) entities worldwide.
     * ### What Obtain the list of Regional Internet Registries (RIRs) entities worldwide.  ### Parameters No parameters are required.  ### Result The result is a JSON object with a list of the following JSON objects: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual RIR. - &#x60;&#x60;name&#x60;&#x60;: the RIR name. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the RIR in the system. Possible values are: iana, arin, ripencc, afrinic, apnic, lacnic.  ### Errors It will return the API Global errors described in the API description.
     * @return List&lt;AutonomousSystemRegistryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public List<AutonomousSystemRegistryOutput> queryRegistryNamesV1AsnRegistryAllGet() throws ApiException {
        ApiResponse<List<AutonomousSystemRegistryOutput>> localVarResp = queryRegistryNamesV1AsnRegistryAllGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of the Regional Internet Registries (RIRs) entities worldwide.
     * ### What Obtain the list of Regional Internet Registries (RIRs) entities worldwide.  ### Parameters No parameters are required.  ### Result The result is a JSON object with a list of the following JSON objects: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual RIR. - &#x60;&#x60;name&#x60;&#x60;: the RIR name. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the RIR in the system. Possible values are: iana, arin, ripencc, afrinic, apnic, lacnic.  ### Errors It will return the API Global errors described in the API description.
     * @return ApiResponse&lt;List&lt;AutonomousSystemRegistryOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AutonomousSystemRegistryOutput>> queryRegistryNamesV1AsnRegistryAllGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = queryRegistryNamesV1AsnRegistryAllGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AutonomousSystemRegistryOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of the Regional Internet Registries (RIRs) entities worldwide. (asynchronously)
     * ### What Obtain the list of Regional Internet Registries (RIRs) entities worldwide.  ### Parameters No parameters are required.  ### Result The result is a JSON object with a list of the following JSON objects: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual RIR. - &#x60;&#x60;name&#x60;&#x60;: the RIR name. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the RIR in the system. Possible values are: iana, arin, ripencc, afrinic, apnic, lacnic.  ### Errors It will return the API Global errors described in the API description.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryRegistryNamesV1AsnRegistryAllGetAsync(final ApiCallback<List<AutonomousSystemRegistryOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryRegistryNamesV1AsnRegistryAllGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AutonomousSystemRegistryOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryStatusByTheNameV1AsnStatusCodeGet
     * @param code  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryStatusByTheNameV1AsnStatusCodeGetCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/asn/status/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryStatusByTheNameV1AsnStatusCodeGetValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling queryStatusByTheNameV1AsnStatusCodeGet(Async)");
        }

        return queryStatusByTheNameV1AsnStatusCodeGetCall(code, _callback);

    }

    /**
     * Get the information of a status given.
     * ### What Obtain the information about the status of an object in the registry as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the status in the registry. Possible values are: assigned, reserved, allocated, available.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual status. - &#x60;&#x60;name&#x60;&#x60;: the human readable name of the status. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the status in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return AutonomousSystemStatusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AutonomousSystemStatusOutput queryStatusByTheNameV1AsnStatusCodeGet(String code) throws ApiException {
        ApiResponse<AutonomousSystemStatusOutput> localVarResp = queryStatusByTheNameV1AsnStatusCodeGetWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get the information of a status given.
     * ### What Obtain the information about the status of an object in the registry as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the status in the registry. Possible values are: assigned, reserved, allocated, available.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual status. - &#x60;&#x60;name&#x60;&#x60;: the human readable name of the status. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the status in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return ApiResponse&lt;AutonomousSystemStatusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutonomousSystemStatusOutput> queryStatusByTheNameV1AsnStatusCodeGetWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = queryStatusByTheNameV1AsnStatusCodeGetValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<AutonomousSystemStatusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information of a status given. (asynchronously)
     * ### What Obtain the information about the status of an object in the registry as a parameter.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the status in the registry. Possible values are: assigned, reserved, allocated, available.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual status. - &#x60;&#x60;name&#x60;&#x60;: the human readable name of the status. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the status in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryStatusByTheNameV1AsnStatusCodeGetAsync(String code, final ApiCallback<AutonomousSystemStatusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryStatusByTheNameV1AsnStatusCodeGetValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<AutonomousSystemStatusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryStatusNamesV1AsnStatusAllGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryStatusNamesV1AsnStatusAllGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/asn/status/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryStatusNamesV1AsnStatusAllGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return queryStatusNamesV1AsnStatusAllGetCall(_callback);

    }

    /**
     * Get the list of status of an object in a registry.
     * ### What Obtain the list of status of an object can be in a registry.  ### Parameters No parameters are required.  ### Result The result is a JSON object with a list of the following JSON objects: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual status. - &#x60;&#x60;name&#x60;&#x60;: the code name. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the status in the system. Possible values are: assigned, reserved, allocated, available.  ### Errors It will return the API Global errors described in the API description.
     * @return List&lt;AutonomousSystemStatusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public List<AutonomousSystemStatusOutput> queryStatusNamesV1AsnStatusAllGet() throws ApiException {
        ApiResponse<List<AutonomousSystemStatusOutput>> localVarResp = queryStatusNamesV1AsnStatusAllGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of status of an object in a registry.
     * ### What Obtain the list of status of an object can be in a registry.  ### Parameters No parameters are required.  ### Result The result is a JSON object with a list of the following JSON objects: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual status. - &#x60;&#x60;name&#x60;&#x60;: the code name. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the status in the system. Possible values are: assigned, reserved, allocated, available.  ### Errors It will return the API Global errors described in the API description.
     * @return ApiResponse&lt;List&lt;AutonomousSystemStatusOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AutonomousSystemStatusOutput>> queryStatusNamesV1AsnStatusAllGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = queryStatusNamesV1AsnStatusAllGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AutonomousSystemStatusOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of status of an object in a registry. (asynchronously)
     * ### What Obtain the list of status of an object can be in a registry.  ### Parameters No parameters are required.  ### Result The result is a JSON object with a list of the following JSON objects: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual status. - &#x60;&#x60;name&#x60;&#x60;: the code name. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the status in the system. Possible values are: assigned, reserved, allocated, available.  ### Errors It will return the API Global errors described in the API description.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryStatusNamesV1AsnStatusAllGetAsync(final ApiCallback<List<AutonomousSystemStatusOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryStatusNamesV1AsnStatusAllGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AutonomousSystemStatusOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
