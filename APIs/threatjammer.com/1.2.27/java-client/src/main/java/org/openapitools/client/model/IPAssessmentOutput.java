/*
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPAssessmentOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:58.480875-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPAssessmentOutput {
  public static final String SERIALIZED_NAME_ALLOWLISTED = "allowlisted";
  @SerializedName(SERIALIZED_NAME_ALLOWLISTED)
  private String allowlisted;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private String asn;

  public static final String SERIALIZED_NAME_ASN_PREFIX = "asn_prefix";
  @SerializedName(SERIALIZED_NAME_ASN_PREFIX)
  private String asnPrefix;

  public static final String SERIALIZED_NAME_DATACENTER = "datacenter";
  @SerializedName(SERIALIZED_NAME_DATACENTER)
  private String datacenter;

  public static final String SERIALIZED_NAME_DATACENTER_PREFIX = "datacenter_prefix";
  @SerializedName(SERIALIZED_NAME_DATACENTER_PREFIX)
  private String datacenterPrefix;

  public static final String SERIALIZED_NAME_DATASETS = "datasets";
  @SerializedName(SERIALIZED_NAME_DATASETS)
  private List<String> datasets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DENYLISTED = "denylisted";
  @SerializedName(SERIALIZED_NAME_DENYLISTED)
  private String denylisted;

  public static final String SERIALIZED_NAME_FIRST_APPEARANCE = "first_appearance";
  @SerializedName(SERIALIZED_NAME_FIRST_APPEARANCE)
  private List<String> firstAppearance = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_APPEARANCE = "last_appearance";
  @SerializedName(SERIALIZED_NAME_LAST_APPEARANCE)
  private List<String> lastAppearance = new ArrayList<>();

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  /**
   * Gets or Sets risk
   */
  @JsonAdapter(RiskEnum.Adapter.class)
  public enum RiskEnum {
    UNKNOWN("UNKNOWN"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH");

    private String value;

    RiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RiskEnum fromValue(String value) {
      for (RiskEnum b : RiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RISK = "risk";
  @SerializedName(SERIALIZED_NAME_RISK)
  private RiskEnum risk;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<String> sources = new ArrayList<>();

  public IPAssessmentOutput() {
  }

  public IPAssessmentOutput allowlisted(String allowlisted) {
    this.allowlisted = allowlisted;
    return this;
  }

  /**
   * Get allowlisted
   * @return allowlisted
   */
  @javax.annotation.Nonnull
  public String getAllowlisted() {
    return allowlisted;
  }

  public void setAllowlisted(String allowlisted) {
    this.allowlisted = allowlisted;
  }


  public IPAssessmentOutput asn(String asn) {
    this.asn = asn;
    return this;
  }

  /**
   * Get asn
   * @return asn
   */
  @javax.annotation.Nonnull
  public String getAsn() {
    return asn;
  }

  public void setAsn(String asn) {
    this.asn = asn;
  }


  public IPAssessmentOutput asnPrefix(String asnPrefix) {
    this.asnPrefix = asnPrefix;
    return this;
  }

  /**
   * Get asnPrefix
   * @return asnPrefix
   */
  @javax.annotation.Nonnull
  public String getAsnPrefix() {
    return asnPrefix;
  }

  public void setAsnPrefix(String asnPrefix) {
    this.asnPrefix = asnPrefix;
  }


  public IPAssessmentOutput datacenter(String datacenter) {
    this.datacenter = datacenter;
    return this;
  }

  /**
   * Get datacenter
   * @return datacenter
   */
  @javax.annotation.Nonnull
  public String getDatacenter() {
    return datacenter;
  }

  public void setDatacenter(String datacenter) {
    this.datacenter = datacenter;
  }


  public IPAssessmentOutput datacenterPrefix(String datacenterPrefix) {
    this.datacenterPrefix = datacenterPrefix;
    return this;
  }

  /**
   * Get datacenterPrefix
   * @return datacenterPrefix
   */
  @javax.annotation.Nonnull
  public String getDatacenterPrefix() {
    return datacenterPrefix;
  }

  public void setDatacenterPrefix(String datacenterPrefix) {
    this.datacenterPrefix = datacenterPrefix;
  }


  public IPAssessmentOutput datasets(List<String> datasets) {
    this.datasets = datasets;
    return this;
  }

  public IPAssessmentOutput addDatasetsItem(String datasetsItem) {
    if (this.datasets == null) {
      this.datasets = new ArrayList<>();
    }
    this.datasets.add(datasetsItem);
    return this;
  }

  /**
   * Get datasets
   * @return datasets
   */
  @javax.annotation.Nonnull
  public List<String> getDatasets() {
    return datasets;
  }

  public void setDatasets(List<String> datasets) {
    this.datasets = datasets;
  }


  public IPAssessmentOutput denylisted(String denylisted) {
    this.denylisted = denylisted;
    return this;
  }

  /**
   * Get denylisted
   * @return denylisted
   */
  @javax.annotation.Nonnull
  public String getDenylisted() {
    return denylisted;
  }

  public void setDenylisted(String denylisted) {
    this.denylisted = denylisted;
  }


  public IPAssessmentOutput firstAppearance(List<String> firstAppearance) {
    this.firstAppearance = firstAppearance;
    return this;
  }

  public IPAssessmentOutput addFirstAppearanceItem(String firstAppearanceItem) {
    if (this.firstAppearance == null) {
      this.firstAppearance = new ArrayList<>();
    }
    this.firstAppearance.add(firstAppearanceItem);
    return this;
  }

  /**
   * Get firstAppearance
   * @return firstAppearance
   */
  @javax.annotation.Nonnull
  public List<String> getFirstAppearance() {
    return firstAppearance;
  }

  public void setFirstAppearance(List<String> firstAppearance) {
    this.firstAppearance = firstAppearance;
  }


  public IPAssessmentOutput lastAppearance(List<String> lastAppearance) {
    this.lastAppearance = lastAppearance;
    return this;
  }

  public IPAssessmentOutput addLastAppearanceItem(String lastAppearanceItem) {
    if (this.lastAppearance == null) {
      this.lastAppearance = new ArrayList<>();
    }
    this.lastAppearance.add(lastAppearanceItem);
    return this;
  }

  /**
   * Get lastAppearance
   * @return lastAppearance
   */
  @javax.annotation.Nonnull
  public List<String> getLastAppearance() {
    return lastAppearance;
  }

  public void setLastAppearance(List<String> lastAppearance) {
    this.lastAppearance = lastAppearance;
  }


  public IPAssessmentOutput reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nonnull
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public IPAssessmentOutput risk(RiskEnum risk) {
    this.risk = risk;
    return this;
  }

  /**
   * Get risk
   * @return risk
   */
  @javax.annotation.Nonnull
  public RiskEnum getRisk() {
    return risk;
  }

  public void setRisk(RiskEnum risk) {
    this.risk = risk;
  }


  public IPAssessmentOutput score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public IPAssessmentOutput self(String self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }


  public IPAssessmentOutput sources(List<String> sources) {
    this.sources = sources;
    return this;
  }

  public IPAssessmentOutput addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nonnull
  public List<String> getSources() {
    return sources;
  }

  public void setSources(List<String> sources) {
    this.sources = sources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPAssessmentOutput ipAssessmentOutput = (IPAssessmentOutput) o;
    return Objects.equals(this.allowlisted, ipAssessmentOutput.allowlisted) &&
        Objects.equals(this.asn, ipAssessmentOutput.asn) &&
        Objects.equals(this.asnPrefix, ipAssessmentOutput.asnPrefix) &&
        Objects.equals(this.datacenter, ipAssessmentOutput.datacenter) &&
        Objects.equals(this.datacenterPrefix, ipAssessmentOutput.datacenterPrefix) &&
        Objects.equals(this.datasets, ipAssessmentOutput.datasets) &&
        Objects.equals(this.denylisted, ipAssessmentOutput.denylisted) &&
        Objects.equals(this.firstAppearance, ipAssessmentOutput.firstAppearance) &&
        Objects.equals(this.lastAppearance, ipAssessmentOutput.lastAppearance) &&
        Objects.equals(this.reason, ipAssessmentOutput.reason) &&
        Objects.equals(this.risk, ipAssessmentOutput.risk) &&
        Objects.equals(this.score, ipAssessmentOutput.score) &&
        Objects.equals(this.self, ipAssessmentOutput.self) &&
        Objects.equals(this.sources, ipAssessmentOutput.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowlisted, asn, asnPrefix, datacenter, datacenterPrefix, datasets, denylisted, firstAppearance, lastAppearance, reason, risk, score, self, sources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPAssessmentOutput {\n");
    sb.append("    allowlisted: ").append(toIndentedString(allowlisted)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    asnPrefix: ").append(toIndentedString(asnPrefix)).append("\n");
    sb.append("    datacenter: ").append(toIndentedString(datacenter)).append("\n");
    sb.append("    datacenterPrefix: ").append(toIndentedString(datacenterPrefix)).append("\n");
    sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
    sb.append("    denylisted: ").append(toIndentedString(denylisted)).append("\n");
    sb.append("    firstAppearance: ").append(toIndentedString(firstAppearance)).append("\n");
    sb.append("    lastAppearance: ").append(toIndentedString(lastAppearance)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    risk: ").append(toIndentedString(risk)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowlisted");
    openapiFields.add("asn");
    openapiFields.add("asn_prefix");
    openapiFields.add("datacenter");
    openapiFields.add("datacenter_prefix");
    openapiFields.add("datasets");
    openapiFields.add("denylisted");
    openapiFields.add("first_appearance");
    openapiFields.add("last_appearance");
    openapiFields.add("reason");
    openapiFields.add("risk");
    openapiFields.add("score");
    openapiFields.add("self");
    openapiFields.add("sources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowlisted");
    openapiRequiredFields.add("asn");
    openapiRequiredFields.add("asn_prefix");
    openapiRequiredFields.add("datacenter");
    openapiRequiredFields.add("datacenter_prefix");
    openapiRequiredFields.add("datasets");
    openapiRequiredFields.add("denylisted");
    openapiRequiredFields.add("first_appearance");
    openapiRequiredFields.add("last_appearance");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("risk");
    openapiRequiredFields.add("sources");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPAssessmentOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPAssessmentOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPAssessmentOutput is not found in the empty JSON string", IPAssessmentOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPAssessmentOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPAssessmentOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IPAssessmentOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("allowlisted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowlisted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowlisted").toString()));
      }
      if (!jsonObj.get("asn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn").toString()));
      }
      if (!jsonObj.get("asn_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn_prefix").toString()));
      }
      if (!jsonObj.get("datacenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenter").toString()));
      }
      if (!jsonObj.get("datacenter_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenter_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenter_prefix").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("datasets") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("datasets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasets` to be an array in the JSON string but got `%s`", jsonObj.get("datasets").toString()));
      }
      if (!jsonObj.get("denylisted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `denylisted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("denylisted").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("first_appearance") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("first_appearance").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_appearance` to be an array in the JSON string but got `%s`", jsonObj.get("first_appearance").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("last_appearance") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("last_appearance").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_appearance` to be an array in the JSON string but got `%s`", jsonObj.get("last_appearance").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (!jsonObj.get("risk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risk").toString()));
      }
      // validate the required field `risk`
      RiskEnum.validateJsonElement(jsonObj.get("risk"));
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sources") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPAssessmentOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPAssessmentOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPAssessmentOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPAssessmentOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<IPAssessmentOutput>() {
           @Override
           public void write(JsonWriter out, IPAssessmentOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPAssessmentOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPAssessmentOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPAssessmentOutput
   * @throws IOException if the JSON string is invalid with respect to IPAssessmentOutput
   */
  public static IPAssessmentOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPAssessmentOutput.class);
  }

  /**
   * Convert an instance of IPAssessmentOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

