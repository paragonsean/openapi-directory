/*
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeviceOutput;
import org.openapitools.client.model.FamilyOutput;
import java.io.File;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.OSOutput;
import java.util.Set;
import org.openapitools.client.model.TypeOutput;
import org.openapitools.client.model.UACollectionOutput;
import org.openapitools.client.model.UAOutput;
import org.openapitools.client.model.VendorOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserAgentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserAgentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserAgentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for parseUserAgentV1UaUserAgentUrlencodedGet
     * @param userAgentUrlencoded  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseUserAgentV1UaUserAgentUrlencodedGetCall(String userAgentUrlencoded, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ua/{user_agent_urlencoded}"
            .replace("{" + "user_agent_urlencoded" + "}", localVarApiClient.escapeString(userAgentUrlencoded.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseUserAgentV1UaUserAgentUrlencodedGetValidateBeforeCall(String userAgentUrlencoded, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAgentUrlencoded' is set
        if (userAgentUrlencoded == null) {
            throw new ApiException("Missing the required parameter 'userAgentUrlencoded' when calling parseUserAgentV1UaUserAgentUrlencodedGet(Async)");
        }

        return parseUserAgentV1UaUserAgentUrlencodedGetCall(userAgentUrlencoded, _callback);

    }

    /**
     * Get the information found in an User Agent.
     * ### What Get the information found in the User Agent passed as argument. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide   ### Parameters The only argument accepted in the query string is an URL encoded User Agent string.  ### Result The result contains the following set of data:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;string&#x60;&#x60;:  The full user agent string passed as argument. - &#x60;&#x60;classification&#x60;&#x60;: The classification of the user agent. It can be one of the following: &#x60;&#x60;CRAWLER&#x60;&#x60;, &#x60;&#x60;CLIENT&#x60;&#x60;, &#x60;&#x60;UNKNOWN&#x60;&#x60;. - &#x60;&#x60;type&#x60;&#x60;: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - &#x60;&#x60;agent&#x60;&#x60;: Name of the agent and the version, if any. - &#x60;&#x60;engine&#x60;&#x60;: Agent render engine. - &#x60;&#x60;version&#x60;&#x60;: Version of the agent. - &#x60;&#x60;latest&#x60;&#x60;: Latests known version of the agent. - &#x60;&#x60;family&#x60;&#x60;: URI to the family of the agent. - &#x60;&#x60;vendor&#x60;&#x60;: URI to the vendor or company that produces the agent. - &#x60;&#x60;os&#x60;&#x60;: URI to the operating system used by the agent. - &#x60;&#x60;device&#x60;&#x60;: URI to the device used by the agent. - &#x60;&#x60;frequent&#x60;&#x60;: If the agent is frequently used worlwide or not. The values are &#x60;&#x60;COMMON&#x60;&#x60;, &#x60;&#x60;RARE&#x60;&#x60;, and &#x60;&#x60;UNKNOWN&#x60;&#x60;.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param userAgentUrlencoded  (required)
     * @return UAOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public UAOutput parseUserAgentV1UaUserAgentUrlencodedGet(String userAgentUrlencoded) throws ApiException {
        ApiResponse<UAOutput> localVarResp = parseUserAgentV1UaUserAgentUrlencodedGetWithHttpInfo(userAgentUrlencoded);
        return localVarResp.getData();
    }

    /**
     * Get the information found in an User Agent.
     * ### What Get the information found in the User Agent passed as argument. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide   ### Parameters The only argument accepted in the query string is an URL encoded User Agent string.  ### Result The result contains the following set of data:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;string&#x60;&#x60;:  The full user agent string passed as argument. - &#x60;&#x60;classification&#x60;&#x60;: The classification of the user agent. It can be one of the following: &#x60;&#x60;CRAWLER&#x60;&#x60;, &#x60;&#x60;CLIENT&#x60;&#x60;, &#x60;&#x60;UNKNOWN&#x60;&#x60;. - &#x60;&#x60;type&#x60;&#x60;: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - &#x60;&#x60;agent&#x60;&#x60;: Name of the agent and the version, if any. - &#x60;&#x60;engine&#x60;&#x60;: Agent render engine. - &#x60;&#x60;version&#x60;&#x60;: Version of the agent. - &#x60;&#x60;latest&#x60;&#x60;: Latests known version of the agent. - &#x60;&#x60;family&#x60;&#x60;: URI to the family of the agent. - &#x60;&#x60;vendor&#x60;&#x60;: URI to the vendor or company that produces the agent. - &#x60;&#x60;os&#x60;&#x60;: URI to the operating system used by the agent. - &#x60;&#x60;device&#x60;&#x60;: URI to the device used by the agent. - &#x60;&#x60;frequent&#x60;&#x60;: If the agent is frequently used worlwide or not. The values are &#x60;&#x60;COMMON&#x60;&#x60;, &#x60;&#x60;RARE&#x60;&#x60;, and &#x60;&#x60;UNKNOWN&#x60;&#x60;.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param userAgentUrlencoded  (required)
     * @return ApiResponse&lt;UAOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UAOutput> parseUserAgentV1UaUserAgentUrlencodedGetWithHttpInfo(String userAgentUrlencoded) throws ApiException {
        okhttp3.Call localVarCall = parseUserAgentV1UaUserAgentUrlencodedGetValidateBeforeCall(userAgentUrlencoded, null);
        Type localVarReturnType = new TypeToken<UAOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information found in an User Agent. (asynchronously)
     * ### What Get the information found in the User Agent passed as argument. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide   ### Parameters The only argument accepted in the query string is an URL encoded User Agent string.  ### Result The result contains the following set of data:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;string&#x60;&#x60;:  The full user agent string passed as argument. - &#x60;&#x60;classification&#x60;&#x60;: The classification of the user agent. It can be one of the following: &#x60;&#x60;CRAWLER&#x60;&#x60;, &#x60;&#x60;CLIENT&#x60;&#x60;, &#x60;&#x60;UNKNOWN&#x60;&#x60;. - &#x60;&#x60;type&#x60;&#x60;: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - &#x60;&#x60;agent&#x60;&#x60;: Name of the agent and the version, if any. - &#x60;&#x60;engine&#x60;&#x60;: Agent render engine. - &#x60;&#x60;version&#x60;&#x60;: Version of the agent. - &#x60;&#x60;latest&#x60;&#x60;: Latests known version of the agent. - &#x60;&#x60;family&#x60;&#x60;: URI to the family of the agent. - &#x60;&#x60;vendor&#x60;&#x60;: URI to the vendor or company that produces the agent. - &#x60;&#x60;os&#x60;&#x60;: URI to the operating system used by the agent. - &#x60;&#x60;device&#x60;&#x60;: URI to the device used by the agent. - &#x60;&#x60;frequent&#x60;&#x60;: If the agent is frequently used worlwide or not. The values are &#x60;&#x60;COMMON&#x60;&#x60;, &#x60;&#x60;RARE&#x60;&#x60;, and &#x60;&#x60;UNKNOWN&#x60;&#x60;.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param userAgentUrlencoded  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseUserAgentV1UaUserAgentUrlencodedGetAsync(String userAgentUrlencoded, final ApiCallback<UAOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseUserAgentV1UaUserAgentUrlencodedGetValidateBeforeCall(userAgentUrlencoded, _callback);
        Type localVarReturnType = new TypeToken<UAOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parseUserAgentsCsvV1UaCsvPost
     * @param csvFile The CSV file with the User Agents to parse (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseUserAgentsCsvV1UaCsvPostCall(File csvFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ua/csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (csvFile != null) {
            localVarFormParams.put("csv_file", csvFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseUserAgentsCsvV1UaCsvPostValidateBeforeCall(File csvFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'csvFile' is set
        if (csvFile == null) {
            throw new ApiException("Missing the required parameter 'csvFile' when calling parseUserAgentsCsvV1UaCsvPost(Async)");
        }

        return parseUserAgentsCsvV1UaCsvPostCall(csvFile, _callback);

    }

    /**
     * Get the information found in the set of User Agents uploaded.
     * ### What Get the information found in the list of User Agents uploaded as a CSV file. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide  ### Parameters - A text file with a list of User Agents. - A header &#x60;Content-Type: multipart/form-data&#x60; is required.  Example: &#x60;&#x60;&#x60; curl -X &#39;POST&#39; \\   &#39;https://dublin.api.threatjammer.com/v1/ua/csv&#39; \\   -H &#39;accept: application/json&#39; \\   -H &#39;Authorization: Bearer YOUR_API_KEY&#39; \\   -H &#39;Content-Type: multipart/form-data&#39; \\   -F &#39;csv_file&#x3D;@YOUR_TEXT_FILE;type&#x3D;text/csv&#39; &#x60;&#x60;&#x60;  ### Result The result contains a list of the result for each User Agent, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;string&#x60;&#x60;:  The full user agent string passed as argument. - &#x60;&#x60;classification&#x60;&#x60;: The classification of the user agent. It can be one of the following: &#x60;&#x60;CRAWLER&#x60;&#x60;, &#x60;&#x60;CLIENT&#x60;&#x60;, &#x60;&#x60;UNKNOWN&#x60;&#x60;. - &#x60;&#x60;type&#x60;&#x60;: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - &#x60;&#x60;agent&#x60;&#x60;: Name of the agent and the version, if any. - &#x60;&#x60;engine&#x60;&#x60;: Agent render engine. - &#x60;&#x60;version&#x60;&#x60;: Version of the agent. - &#x60;&#x60;latest&#x60;&#x60;: Latests known version of the agent. - &#x60;&#x60;family&#x60;&#x60;: URI to the family of the agent. - &#x60;&#x60;vendor&#x60;&#x60;: URI to the vendor or company that produces the agent. - &#x60;&#x60;os&#x60;&#x60;: URI to the operating system used by the agent. - &#x60;&#x60;device&#x60;&#x60;: URI to the device used by the agent. - &#x60;&#x60;frequent&#x60;&#x60;: If the agent is frequently used worlwide or not. The values are &#x60;&#x60;COMMON&#x60;&#x60;, &#x60;&#x60;RARE&#x60;&#x60;, and &#x60;&#x60;UNKNOWN&#x60;&#x60;.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param csvFile The CSV file with the User Agents to parse (required)
     * @return UACollectionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public UACollectionOutput parseUserAgentsCsvV1UaCsvPost(File csvFile) throws ApiException {
        ApiResponse<UACollectionOutput> localVarResp = parseUserAgentsCsvV1UaCsvPostWithHttpInfo(csvFile);
        return localVarResp.getData();
    }

    /**
     * Get the information found in the set of User Agents uploaded.
     * ### What Get the information found in the list of User Agents uploaded as a CSV file. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide  ### Parameters - A text file with a list of User Agents. - A header &#x60;Content-Type: multipart/form-data&#x60; is required.  Example: &#x60;&#x60;&#x60; curl -X &#39;POST&#39; \\   &#39;https://dublin.api.threatjammer.com/v1/ua/csv&#39; \\   -H &#39;accept: application/json&#39; \\   -H &#39;Authorization: Bearer YOUR_API_KEY&#39; \\   -H &#39;Content-Type: multipart/form-data&#39; \\   -F &#39;csv_file&#x3D;@YOUR_TEXT_FILE;type&#x3D;text/csv&#39; &#x60;&#x60;&#x60;  ### Result The result contains a list of the result for each User Agent, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;string&#x60;&#x60;:  The full user agent string passed as argument. - &#x60;&#x60;classification&#x60;&#x60;: The classification of the user agent. It can be one of the following: &#x60;&#x60;CRAWLER&#x60;&#x60;, &#x60;&#x60;CLIENT&#x60;&#x60;, &#x60;&#x60;UNKNOWN&#x60;&#x60;. - &#x60;&#x60;type&#x60;&#x60;: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - &#x60;&#x60;agent&#x60;&#x60;: Name of the agent and the version, if any. - &#x60;&#x60;engine&#x60;&#x60;: Agent render engine. - &#x60;&#x60;version&#x60;&#x60;: Version of the agent. - &#x60;&#x60;latest&#x60;&#x60;: Latests known version of the agent. - &#x60;&#x60;family&#x60;&#x60;: URI to the family of the agent. - &#x60;&#x60;vendor&#x60;&#x60;: URI to the vendor or company that produces the agent. - &#x60;&#x60;os&#x60;&#x60;: URI to the operating system used by the agent. - &#x60;&#x60;device&#x60;&#x60;: URI to the device used by the agent. - &#x60;&#x60;frequent&#x60;&#x60;: If the agent is frequently used worlwide or not. The values are &#x60;&#x60;COMMON&#x60;&#x60;, &#x60;&#x60;RARE&#x60;&#x60;, and &#x60;&#x60;UNKNOWN&#x60;&#x60;.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param csvFile The CSV file with the User Agents to parse (required)
     * @return ApiResponse&lt;UACollectionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UACollectionOutput> parseUserAgentsCsvV1UaCsvPostWithHttpInfo(File csvFile) throws ApiException {
        okhttp3.Call localVarCall = parseUserAgentsCsvV1UaCsvPostValidateBeforeCall(csvFile, null);
        Type localVarReturnType = new TypeToken<UACollectionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information found in the set of User Agents uploaded. (asynchronously)
     * ### What Get the information found in the list of User Agents uploaded as a CSV file. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide  ### Parameters - A text file with a list of User Agents. - A header &#x60;Content-Type: multipart/form-data&#x60; is required.  Example: &#x60;&#x60;&#x60; curl -X &#39;POST&#39; \\   &#39;https://dublin.api.threatjammer.com/v1/ua/csv&#39; \\   -H &#39;accept: application/json&#39; \\   -H &#39;Authorization: Bearer YOUR_API_KEY&#39; \\   -H &#39;Content-Type: multipart/form-data&#39; \\   -F &#39;csv_file&#x3D;@YOUR_TEXT_FILE;type&#x3D;text/csv&#39; &#x60;&#x60;&#x60;  ### Result The result contains a list of the result for each User Agent, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;string&#x60;&#x60;:  The full user agent string passed as argument. - &#x60;&#x60;classification&#x60;&#x60;: The classification of the user agent. It can be one of the following: &#x60;&#x60;CRAWLER&#x60;&#x60;, &#x60;&#x60;CLIENT&#x60;&#x60;, &#x60;&#x60;UNKNOWN&#x60;&#x60;. - &#x60;&#x60;type&#x60;&#x60;: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - &#x60;&#x60;agent&#x60;&#x60;: Name of the agent and the version, if any. - &#x60;&#x60;engine&#x60;&#x60;: Agent render engine. - &#x60;&#x60;version&#x60;&#x60;: Version of the agent. - &#x60;&#x60;latest&#x60;&#x60;: Latests known version of the agent. - &#x60;&#x60;family&#x60;&#x60;: URI to the family of the agent. - &#x60;&#x60;vendor&#x60;&#x60;: URI to the vendor or company that produces the agent. - &#x60;&#x60;os&#x60;&#x60;: URI to the operating system used by the agent. - &#x60;&#x60;device&#x60;&#x60;: URI to the device used by the agent. - &#x60;&#x60;frequent&#x60;&#x60;: If the agent is frequently used worlwide or not. The values are &#x60;&#x60;COMMON&#x60;&#x60;, &#x60;&#x60;RARE&#x60;&#x60;, and &#x60;&#x60;UNKNOWN&#x60;&#x60;.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param csvFile The CSV file with the User Agents to parse (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseUserAgentsCsvV1UaCsvPostAsync(File csvFile, final ApiCallback<UACollectionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseUserAgentsCsvV1UaCsvPostValidateBeforeCall(csvFile, _callback);
        Type localVarReturnType = new TypeToken<UACollectionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parseUserAgentsV1UaPost
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseUserAgentsV1UaPostCall(Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/ua";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseUserAgentsV1UaPostValidateBeforeCall(Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling parseUserAgentsV1UaPost(Async)");
        }

        return parseUserAgentsV1UaPostCall(requestBody, _callback);

    }

    /**
     * Get the information found in a set of User Agents.
     * ### What Get the information found in the list of User Agents passed as argument. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide  ### Parameters A list of User Agents are required in the body of the request.  ### Result The result contains a list of the result for each User Agent, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;string&#x60;&#x60;:  The full user agent string passed as argument. - &#x60;&#x60;classification&#x60;&#x60;: The classification of the user agent. It can be one of the following: &#x60;&#x60;CRAWLER&#x60;&#x60;, &#x60;&#x60;CLIENT&#x60;&#x60;, &#x60;&#x60;UNKNOWN&#x60;&#x60;. - &#x60;&#x60;type&#x60;&#x60;: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - &#x60;&#x60;agent&#x60;&#x60;: Name of the agent and the version, if any. - &#x60;&#x60;engine&#x60;&#x60;: Agent render engine. - &#x60;&#x60;version&#x60;&#x60;: Version of the agent. - &#x60;&#x60;latest&#x60;&#x60;: Latests known version of the agent. - &#x60;&#x60;family&#x60;&#x60;: URI to the family of the agent. - &#x60;&#x60;vendor&#x60;&#x60;: URI to the vendor or company that produces the agent. - &#x60;&#x60;os&#x60;&#x60;: URI to the operating system used by the agent. - &#x60;&#x60;device&#x60;&#x60;: URI to the device used by the agent. - &#x60;&#x60;frequent&#x60;&#x60;: If the agent is frequently used worlwide or not. The values are &#x60;&#x60;COMMON&#x60;&#x60;, &#x60;&#x60;RARE&#x60;&#x60;, and &#x60;&#x60;UNKNOWN&#x60;&#x60;.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param requestBody  (required)
     * @return UACollectionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public UACollectionOutput parseUserAgentsV1UaPost(Set<String> requestBody) throws ApiException {
        ApiResponse<UACollectionOutput> localVarResp = parseUserAgentsV1UaPostWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * Get the information found in a set of User Agents.
     * ### What Get the information found in the list of User Agents passed as argument. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide  ### Parameters A list of User Agents are required in the body of the request.  ### Result The result contains a list of the result for each User Agent, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;string&#x60;&#x60;:  The full user agent string passed as argument. - &#x60;&#x60;classification&#x60;&#x60;: The classification of the user agent. It can be one of the following: &#x60;&#x60;CRAWLER&#x60;&#x60;, &#x60;&#x60;CLIENT&#x60;&#x60;, &#x60;&#x60;UNKNOWN&#x60;&#x60;. - &#x60;&#x60;type&#x60;&#x60;: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - &#x60;&#x60;agent&#x60;&#x60;: Name of the agent and the version, if any. - &#x60;&#x60;engine&#x60;&#x60;: Agent render engine. - &#x60;&#x60;version&#x60;&#x60;: Version of the agent. - &#x60;&#x60;latest&#x60;&#x60;: Latests known version of the agent. - &#x60;&#x60;family&#x60;&#x60;: URI to the family of the agent. - &#x60;&#x60;vendor&#x60;&#x60;: URI to the vendor or company that produces the agent. - &#x60;&#x60;os&#x60;&#x60;: URI to the operating system used by the agent. - &#x60;&#x60;device&#x60;&#x60;: URI to the device used by the agent. - &#x60;&#x60;frequent&#x60;&#x60;: If the agent is frequently used worlwide or not. The values are &#x60;&#x60;COMMON&#x60;&#x60;, &#x60;&#x60;RARE&#x60;&#x60;, and &#x60;&#x60;UNKNOWN&#x60;&#x60;.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param requestBody  (required)
     * @return ApiResponse&lt;UACollectionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UACollectionOutput> parseUserAgentsV1UaPostWithHttpInfo(Set<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = parseUserAgentsV1UaPostValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<UACollectionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information found in a set of User Agents. (asynchronously)
     * ### What Get the information found in the list of User Agents passed as argument. This information includes: - Type - Render Engine - Version - Vendor - Operating System - Device - How common is the agent worldwide  ### Parameters A list of User Agents are required in the body of the request.  ### Result The result contains a list of the result for each User Agent, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;string&#x60;&#x60;:  The full user agent string passed as argument. - &#x60;&#x60;classification&#x60;&#x60;: The classification of the user agent. It can be one of the following: &#x60;&#x60;CRAWLER&#x60;&#x60;, &#x60;&#x60;CLIENT&#x60;&#x60;, &#x60;&#x60;UNKNOWN&#x60;&#x60;. - &#x60;&#x60;type&#x60;&#x60;: An URI to the type of user agent used to identify the client (browser, bot, crawler, etc.). - &#x60;&#x60;agent&#x60;&#x60;: Name of the agent and the version, if any. - &#x60;&#x60;engine&#x60;&#x60;: Agent render engine. - &#x60;&#x60;version&#x60;&#x60;: Version of the agent. - &#x60;&#x60;latest&#x60;&#x60;: Latests known version of the agent. - &#x60;&#x60;family&#x60;&#x60;: URI to the family of the agent. - &#x60;&#x60;vendor&#x60;&#x60;: URI to the vendor or company that produces the agent. - &#x60;&#x60;os&#x60;&#x60;: URI to the operating system used by the agent. - &#x60;&#x60;device&#x60;&#x60;: URI to the device used by the agent. - &#x60;&#x60;frequent&#x60;&#x60;: If the agent is frequently used worlwide or not. The values are &#x60;&#x60;COMMON&#x60;&#x60;, &#x60;&#x60;RARE&#x60;&#x60;, and &#x60;&#x60;UNKNOWN&#x60;&#x60;.   ### Errors The endpoint will return the API Global errors described in the API description.
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseUserAgentsV1UaPostAsync(Set<String> requestBody, final ApiCallback<UACollectionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseUserAgentsV1UaPostValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<UACollectionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryDeviceByCodeV1UaDeviceCodeGet
     * @param code  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDeviceByCodeV1UaDeviceCodeGetCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ua/device/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryDeviceByCodeV1UaDeviceCodeGetValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling queryDeviceByCodeV1UaDeviceCodeGet(Async)");
        }

        return queryDeviceByCodeV1UaDeviceCodeGetCall(code, _callback);

    }

    /**
     * Get the information of the device of a user agent.
     * ### What Obtain the details of a device of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the device origin of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the device. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the device. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the device in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return DeviceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public DeviceOutput queryDeviceByCodeV1UaDeviceCodeGet(String code) throws ApiException {
        ApiResponse<DeviceOutput> localVarResp = queryDeviceByCodeV1UaDeviceCodeGetWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get the information of the device of a user agent.
     * ### What Obtain the details of a device of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the device origin of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the device. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the device. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the device in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return ApiResponse&lt;DeviceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceOutput> queryDeviceByCodeV1UaDeviceCodeGetWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = queryDeviceByCodeV1UaDeviceCodeGetValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<DeviceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information of the device of a user agent. (asynchronously)
     * ### What Obtain the details of a device of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the device origin of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the device. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the device. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the device in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDeviceByCodeV1UaDeviceCodeGetAsync(String code, final ApiCallback<DeviceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryDeviceByCodeV1UaDeviceCodeGetValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<DeviceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryFamilyByCodeV1UaFamilyCodeGet
     * @param code  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryFamilyByCodeV1UaFamilyCodeGetCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ua/family/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryFamilyByCodeV1UaFamilyCodeGetValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling queryFamilyByCodeV1UaFamilyCodeGet(Async)");
        }

        return queryFamilyByCodeV1UaFamilyCodeGetCall(code, _callback);

    }

    /**
     * Get the information of the family of a user agent.
     * ### What Obtain the details of a family of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the family of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the family. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the famly. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the family in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return FamilyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public FamilyOutput queryFamilyByCodeV1UaFamilyCodeGet(String code) throws ApiException {
        ApiResponse<FamilyOutput> localVarResp = queryFamilyByCodeV1UaFamilyCodeGetWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get the information of the family of a user agent.
     * ### What Obtain the details of a family of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the family of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the family. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the famly. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the family in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return ApiResponse&lt;FamilyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FamilyOutput> queryFamilyByCodeV1UaFamilyCodeGetWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = queryFamilyByCodeV1UaFamilyCodeGetValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<FamilyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information of the family of a user agent. (asynchronously)
     * ### What Obtain the details of a family of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the family of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the family. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the famly. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the family in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryFamilyByCodeV1UaFamilyCodeGetAsync(String code, final ApiCallback<FamilyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryFamilyByCodeV1UaFamilyCodeGetValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<FamilyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryOsByCodeV1UaOsCodeGet
     * @param code  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryOsByCodeV1UaOsCodeGetCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ua/os/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryOsByCodeV1UaOsCodeGetValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling queryOsByCodeV1UaOsCodeGet(Async)");
        }

        return queryOsByCodeV1UaOsCodeGetCall(code, _callback);

    }

    /**
     * Get the information of the Operating System of a user agent.
     * ### What Obtain the details of the Operating System of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the Operating System at the origin of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the OS. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the OS. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the OS in the system. - &#x60;&#x60;family&#x60;&#x60;: the family of the OS. - &#x60;&#x60;vendor&#x60;&#x60;: the vendor or manufacturer of the OS.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return OSOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OSOutput queryOsByCodeV1UaOsCodeGet(String code) throws ApiException {
        ApiResponse<OSOutput> localVarResp = queryOsByCodeV1UaOsCodeGetWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get the information of the Operating System of a user agent.
     * ### What Obtain the details of the Operating System of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the Operating System at the origin of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the OS. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the OS. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the OS in the system. - &#x60;&#x60;family&#x60;&#x60;: the family of the OS. - &#x60;&#x60;vendor&#x60;&#x60;: the vendor or manufacturer of the OS.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return ApiResponse&lt;OSOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OSOutput> queryOsByCodeV1UaOsCodeGetWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = queryOsByCodeV1UaOsCodeGetValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<OSOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information of the Operating System of a user agent. (asynchronously)
     * ### What Obtain the details of the Operating System of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the Operating System at the origin of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the OS. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the OS. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the OS in the system. - &#x60;&#x60;family&#x60;&#x60;: the family of the OS. - &#x60;&#x60;vendor&#x60;&#x60;: the vendor or manufacturer of the OS.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryOsByCodeV1UaOsCodeGetAsync(String code, final ApiCallback<OSOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryOsByCodeV1UaOsCodeGetValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<OSOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryTypeByCodeV1UaTypeCodeGet
     * @param code  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryTypeByCodeV1UaTypeCodeGetCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ua/type/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryTypeByCodeV1UaTypeCodeGetValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling queryTypeByCodeV1UaTypeCodeGet(Async)");
        }

        return queryTypeByCodeV1UaTypeCodeGetCall(code, _callback);

    }

    /**
     * Get the information of the type of a user agent.
     * ### What Obtain the details of a type of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the type of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the type. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the type. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the type in the system. - &#x60;&#x60;type&#x60;&#x60;: the type of the User Agent. Can be &#x60;&#x60;INTERACTIVE&#x60;&#x60;, &#x60;&#x60;CRAWLER&#x60;&#x60; or &#x60;&#x60;UNKNOWN&#x60;&#x60; if the type is not known.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return TypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public TypeOutput queryTypeByCodeV1UaTypeCodeGet(String code) throws ApiException {
        ApiResponse<TypeOutput> localVarResp = queryTypeByCodeV1UaTypeCodeGetWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get the information of the type of a user agent.
     * ### What Obtain the details of a type of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the type of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the type. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the type. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the type in the system. - &#x60;&#x60;type&#x60;&#x60;: the type of the User Agent. Can be &#x60;&#x60;INTERACTIVE&#x60;&#x60;, &#x60;&#x60;CRAWLER&#x60;&#x60; or &#x60;&#x60;UNKNOWN&#x60;&#x60; if the type is not known.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return ApiResponse&lt;TypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TypeOutput> queryTypeByCodeV1UaTypeCodeGetWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = queryTypeByCodeV1UaTypeCodeGetValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<TypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information of the type of a user agent. (asynchronously)
     * ### What Obtain the details of a type of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the type of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the type. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the type. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the type in the system. - &#x60;&#x60;type&#x60;&#x60;: the type of the User Agent. Can be &#x60;&#x60;INTERACTIVE&#x60;&#x60;, &#x60;&#x60;CRAWLER&#x60;&#x60; or &#x60;&#x60;UNKNOWN&#x60;&#x60; if the type is not known.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryTypeByCodeV1UaTypeCodeGetAsync(String code, final ApiCallback<TypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryTypeByCodeV1UaTypeCodeGetValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<TypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryVendorByCodeV1UaVendorCodeGet
     * @param code  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryVendorByCodeV1UaVendorCodeGetCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ua/vendor/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryVendorByCodeV1UaVendorCodeGetValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling queryVendorByCodeV1UaVendorCodeGet(Async)");
        }

        return queryVendorByCodeV1UaVendorCodeGetCall(code, _callback);

    }

    /**
     * Get the information of the vendor of a user agent.
     * ### What Obtain the details of a vendor of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the vendor or manufacurer of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the vendor. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the vendor. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the vendor in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return VendorOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public VendorOutput queryVendorByCodeV1UaVendorCodeGet(String code) throws ApiException {
        ApiResponse<VendorOutput> localVarResp = queryVendorByCodeV1UaVendorCodeGetWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get the information of the vendor of a user agent.
     * ### What Obtain the details of a vendor of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the vendor or manufacurer of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the vendor. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the vendor. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the vendor in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @return ApiResponse&lt;VendorOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VendorOutput> queryVendorByCodeV1UaVendorCodeGetWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = queryVendorByCodeV1UaVendorCodeGetValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<VendorOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the information of the vendor of a user agent. (asynchronously)
     * ### What Obtain the details of a vendor of a User Agent.  ### Parameters The endpoint accepts only the following parameter in the path: - &#x60;&#x60;code&#x60;&#x60;: (Mandatory) The code that identifies uniquely the vendor or manufacurer of a User Agent. The value must be an alphanumeric upper case string.   ### Result The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI to the vendor. - &#x60;&#x60;description&#x60;&#x60;: the human readable description of the vendor. - &#x60;&#x60;code&#x60;&#x60;: the internal code of the vendor in the system.  ### Errors - a &#x60;422 Unprocessable Entity&#x60; error if the code is not one of the available.  It will also return the API Global errors described in the API description.
     * @param code  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryVendorByCodeV1UaVendorCodeGetAsync(String code, final ApiCallback<VendorOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryVendorByCodeV1UaVendorCodeGetValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<VendorOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
