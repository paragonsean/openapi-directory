/*
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.GeoIPCollectionOutput;
import org.openapitools.client.model.GeoIPOutput;
import org.openapitools.client.model.HTTPValidationError;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeolocationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GeolocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeolocationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assessIpSetCsvV1GeoCsvPost
     * @param csvFile The CSV file with the IP addresses (required)
     * @param strictParse When &#x60;true&#x60;, if any IP address entry in the file is malformed, the assessment is canceled. If &#x60;false&#x60;, the malformed IP addresses are ignored. Default is &#x60;false&#x60;. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessIpSetCsvV1GeoCsvPostCall(File csvFile, Boolean strictParse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/geo/csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (csvFile != null) {
            localVarFormParams.put("csv_file", csvFile);
        }

        if (strictParse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("strict_parse", strictParse));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessIpSetCsvV1GeoCsvPostValidateBeforeCall(File csvFile, Boolean strictParse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'csvFile' is set
        if (csvFile == null) {
            throw new ApiException("Missing the required parameter 'csvFile' when calling assessIpSetCsvV1GeoCsvPost(Async)");
        }

        return assessIpSetCsvV1GeoCsvPostCall(csvFile, strictParse, _callback);

    }

    /**
     * Get the geolocation data of all the IP addresses uploaded.
     * ### What Get the geo location data of all the IP addresses uploaded in a text file. This information includes: - Latitude and longitude - Time zone - Accuracy radius - Postal code - City name - Region - Country - Country of the service provider - Continent - Reverse PTR hostnames  ### Parameters - A text file with a list of public IPv4 or IPv6 addresses. - A header &#x60;Content-Type: multipart/form-data&#x60; is required. - (optional) in the query string the parameeter &#x60;strict_parse&#x60;: If set to &#x60;true&#x60;, no malformed IP addresses allowed, returning an error. If set to &#x60;false&#x60;, malformed IP addresses will be ignored.  Example: &#x60;&#x60;&#x60; curl -X &#39;POST&#39; \\   &#39;https://dublin.api.threatjammer.com/v1/geo/csv[?strict_parse&#x3D;true|false]&#39; \\   -H &#39;accept: application/json&#39; \\   -H &#39;Authorization: Bearer YOUR_API_KEY&#39; \\   -H &#39;Content-Type: multipart/form-data&#39; \\   -F &#39;csv_file&#x3D;@YOUR_TEXT_FILE;type&#x3D;text/csv&#39; &#x60;&#x60;&#x60;  ### Result The result contains a list of the result for each IP address, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;accuracy_radius&#x60;&#x60;:  The radius in kilometers around the specified location where the IP address is likely to be. - &#x60;&#x60;asn_country_iso_code&#x60;&#x60;: The ISO code of the country of the Autonomous System (AS) owner of the IP address. - &#x60;&#x60;city_geoname_code&#x60;&#x60;:&#x60;&#x60;: City geoname code. The geoname code by [GeoNames](https://en.wikipedia.org/wiki/GeoNames) is a unique identifier assigned to each geographical point on the globe. - &#x60;&#x60;city_name&#x60;&#x60;:&#x60;&#x60;: City name, in english. The developer can use the geoname code to localize the name of the city. - &#x60;&#x60;continent_code&#x60;&#x60;: The continent code. It can be any of the following: AF, AN, AS, EU, NA, OC, SA. - &#x60;&#x60;country_iso_code&#x60;&#x60;: The country ISO 3166-1 alpha-2 code. - &#x60;&#x60;hostnames&#x60;&#x60;: The list of hostnames associated with the IP address obtained from the reverse DNS lookup. - &#x60;&#x60;latitude&#x60;&#x60;: The latitude of the geolocation. - &#x60;&#x60;longitude&#x60;&#x60;: The longitude of the geolocation. - &#x60;&#x60;postal_code&#x60;&#x60;:&#x60;&#x60;: The postal code of the city. - &#x60;&#x60;region_geoname_code&#x60;&#x60;:&#x60;&#x60;: The geoname code of the region. - &#x60;&#x60;region_name&#x60;&#x60;:&#x60;&#x60;: The region name, in english. The developer can use the geoname code to localize the name of the region. - &#x60;&#x60;time_zone&#x60;&#x60;: The name of the time zone.   ### Errors The endpoint will return the following errors: - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  The private IP addresses will be ignored, if any.  When the &#x60;strict_parse&#x60; parameter is set to &#x60;true&#x60;, the endpoint will return the following errors: - a &#x60;400 Bad Request&#x60;.  It will also return the API Global errors described in the API description.
     * @param csvFile The CSV file with the IP addresses (required)
     * @param strictParse When &#x60;true&#x60;, if any IP address entry in the file is malformed, the assessment is canceled. If &#x60;false&#x60;, the malformed IP addresses are ignored. Default is &#x60;false&#x60;. (optional, default to false)
     * @return GeoIPCollectionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public GeoIPCollectionOutput assessIpSetCsvV1GeoCsvPost(File csvFile, Boolean strictParse) throws ApiException {
        ApiResponse<GeoIPCollectionOutput> localVarResp = assessIpSetCsvV1GeoCsvPostWithHttpInfo(csvFile, strictParse);
        return localVarResp.getData();
    }

    /**
     * Get the geolocation data of all the IP addresses uploaded.
     * ### What Get the geo location data of all the IP addresses uploaded in a text file. This information includes: - Latitude and longitude - Time zone - Accuracy radius - Postal code - City name - Region - Country - Country of the service provider - Continent - Reverse PTR hostnames  ### Parameters - A text file with a list of public IPv4 or IPv6 addresses. - A header &#x60;Content-Type: multipart/form-data&#x60; is required. - (optional) in the query string the parameeter &#x60;strict_parse&#x60;: If set to &#x60;true&#x60;, no malformed IP addresses allowed, returning an error. If set to &#x60;false&#x60;, malformed IP addresses will be ignored.  Example: &#x60;&#x60;&#x60; curl -X &#39;POST&#39; \\   &#39;https://dublin.api.threatjammer.com/v1/geo/csv[?strict_parse&#x3D;true|false]&#39; \\   -H &#39;accept: application/json&#39; \\   -H &#39;Authorization: Bearer YOUR_API_KEY&#39; \\   -H &#39;Content-Type: multipart/form-data&#39; \\   -F &#39;csv_file&#x3D;@YOUR_TEXT_FILE;type&#x3D;text/csv&#39; &#x60;&#x60;&#x60;  ### Result The result contains a list of the result for each IP address, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;accuracy_radius&#x60;&#x60;:  The radius in kilometers around the specified location where the IP address is likely to be. - &#x60;&#x60;asn_country_iso_code&#x60;&#x60;: The ISO code of the country of the Autonomous System (AS) owner of the IP address. - &#x60;&#x60;city_geoname_code&#x60;&#x60;:&#x60;&#x60;: City geoname code. The geoname code by [GeoNames](https://en.wikipedia.org/wiki/GeoNames) is a unique identifier assigned to each geographical point on the globe. - &#x60;&#x60;city_name&#x60;&#x60;:&#x60;&#x60;: City name, in english. The developer can use the geoname code to localize the name of the city. - &#x60;&#x60;continent_code&#x60;&#x60;: The continent code. It can be any of the following: AF, AN, AS, EU, NA, OC, SA. - &#x60;&#x60;country_iso_code&#x60;&#x60;: The country ISO 3166-1 alpha-2 code. - &#x60;&#x60;hostnames&#x60;&#x60;: The list of hostnames associated with the IP address obtained from the reverse DNS lookup. - &#x60;&#x60;latitude&#x60;&#x60;: The latitude of the geolocation. - &#x60;&#x60;longitude&#x60;&#x60;: The longitude of the geolocation. - &#x60;&#x60;postal_code&#x60;&#x60;:&#x60;&#x60;: The postal code of the city. - &#x60;&#x60;region_geoname_code&#x60;&#x60;:&#x60;&#x60;: The geoname code of the region. - &#x60;&#x60;region_name&#x60;&#x60;:&#x60;&#x60;: The region name, in english. The developer can use the geoname code to localize the name of the region. - &#x60;&#x60;time_zone&#x60;&#x60;: The name of the time zone.   ### Errors The endpoint will return the following errors: - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  The private IP addresses will be ignored, if any.  When the &#x60;strict_parse&#x60; parameter is set to &#x60;true&#x60;, the endpoint will return the following errors: - a &#x60;400 Bad Request&#x60;.  It will also return the API Global errors described in the API description.
     * @param csvFile The CSV file with the IP addresses (required)
     * @param strictParse When &#x60;true&#x60;, if any IP address entry in the file is malformed, the assessment is canceled. If &#x60;false&#x60;, the malformed IP addresses are ignored. Default is &#x60;false&#x60;. (optional, default to false)
     * @return ApiResponse&lt;GeoIPCollectionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoIPCollectionOutput> assessIpSetCsvV1GeoCsvPostWithHttpInfo(File csvFile, Boolean strictParse) throws ApiException {
        okhttp3.Call localVarCall = assessIpSetCsvV1GeoCsvPostValidateBeforeCall(csvFile, strictParse, null);
        Type localVarReturnType = new TypeToken<GeoIPCollectionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the geolocation data of all the IP addresses uploaded. (asynchronously)
     * ### What Get the geo location data of all the IP addresses uploaded in a text file. This information includes: - Latitude and longitude - Time zone - Accuracy radius - Postal code - City name - Region - Country - Country of the service provider - Continent - Reverse PTR hostnames  ### Parameters - A text file with a list of public IPv4 or IPv6 addresses. - A header &#x60;Content-Type: multipart/form-data&#x60; is required. - (optional) in the query string the parameeter &#x60;strict_parse&#x60;: If set to &#x60;true&#x60;, no malformed IP addresses allowed, returning an error. If set to &#x60;false&#x60;, malformed IP addresses will be ignored.  Example: &#x60;&#x60;&#x60; curl -X &#39;POST&#39; \\   &#39;https://dublin.api.threatjammer.com/v1/geo/csv[?strict_parse&#x3D;true|false]&#39; \\   -H &#39;accept: application/json&#39; \\   -H &#39;Authorization: Bearer YOUR_API_KEY&#39; \\   -H &#39;Content-Type: multipart/form-data&#39; \\   -F &#39;csv_file&#x3D;@YOUR_TEXT_FILE;type&#x3D;text/csv&#39; &#x60;&#x60;&#x60;  ### Result The result contains a list of the result for each IP address, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;accuracy_radius&#x60;&#x60;:  The radius in kilometers around the specified location where the IP address is likely to be. - &#x60;&#x60;asn_country_iso_code&#x60;&#x60;: The ISO code of the country of the Autonomous System (AS) owner of the IP address. - &#x60;&#x60;city_geoname_code&#x60;&#x60;:&#x60;&#x60;: City geoname code. The geoname code by [GeoNames](https://en.wikipedia.org/wiki/GeoNames) is a unique identifier assigned to each geographical point on the globe. - &#x60;&#x60;city_name&#x60;&#x60;:&#x60;&#x60;: City name, in english. The developer can use the geoname code to localize the name of the city. - &#x60;&#x60;continent_code&#x60;&#x60;: The continent code. It can be any of the following: AF, AN, AS, EU, NA, OC, SA. - &#x60;&#x60;country_iso_code&#x60;&#x60;: The country ISO 3166-1 alpha-2 code. - &#x60;&#x60;hostnames&#x60;&#x60;: The list of hostnames associated with the IP address obtained from the reverse DNS lookup. - &#x60;&#x60;latitude&#x60;&#x60;: The latitude of the geolocation. - &#x60;&#x60;longitude&#x60;&#x60;: The longitude of the geolocation. - &#x60;&#x60;postal_code&#x60;&#x60;:&#x60;&#x60;: The postal code of the city. - &#x60;&#x60;region_geoname_code&#x60;&#x60;:&#x60;&#x60;: The geoname code of the region. - &#x60;&#x60;region_name&#x60;&#x60;:&#x60;&#x60;: The region name, in english. The developer can use the geoname code to localize the name of the region. - &#x60;&#x60;time_zone&#x60;&#x60;: The name of the time zone.   ### Errors The endpoint will return the following errors: - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  The private IP addresses will be ignored, if any.  When the &#x60;strict_parse&#x60; parameter is set to &#x60;true&#x60;, the endpoint will return the following errors: - a &#x60;400 Bad Request&#x60;.  It will also return the API Global errors described in the API description.
     * @param csvFile The CSV file with the IP addresses (required)
     * @param strictParse When &#x60;true&#x60;, if any IP address entry in the file is malformed, the assessment is canceled. If &#x60;false&#x60;, the malformed IP addresses are ignored. Default is &#x60;false&#x60;. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessIpSetCsvV1GeoCsvPostAsync(File csvFile, Boolean strictParse, final ApiCallback<GeoIPCollectionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessIpSetCsvV1GeoCsvPostValidateBeforeCall(csvFile, strictParse, _callback);
        Type localVarReturnType = new TypeToken<GeoIPCollectionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for geolocateIpSetV1GeoPost
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geolocateIpSetV1GeoPostCall(Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/geo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geolocateIpSetV1GeoPostValidateBeforeCall(Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling geolocateIpSetV1GeoPost(Async)");
        }

        return geolocateIpSetV1GeoPostCall(requestBody, _callback);

    }

    /**
     * Get the geolocation data of the IP addresses set.
     * ### What Get the geo location data of all the IP addresses passed as argument. This information includes: - Latitude and longitude - Time zone - Accuracy radius - Postal code - City name - Region - Country - Country of the service provider - Continent - Reverse PTR hostnames  ### Parameters A list of public IPv4 or IPv6 addresses is required in the body of the request.  ### Result The result contains a list of the result for each IP address, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;accuracy_radius&#x60;&#x60;:  The radius in kilometers around the specified location where the IP address is likely to be. - &#x60;&#x60;asn_country_iso_code&#x60;&#x60;: The ISO code of the country of the Autonomous System (AS) owner of the IP address. - &#x60;&#x60;city_geoname_code&#x60;&#x60;:&#x60;&#x60;: City geoname code. The geoname code by [GeoNames](https://en.wikipedia.org/wiki/GeoNames) is a unique identifier assigned to each geographical point on the globe. - &#x60;&#x60;city_name&#x60;&#x60;:&#x60;&#x60;: City name, in english. The developer can use the geoname code to localize the name of the city. - &#x60;&#x60;continent_code&#x60;&#x60;: The continent code. It can be any of the following: AF, AN, AS, EU, NA, OC, SA. - &#x60;&#x60;country_iso_code&#x60;&#x60;: The country ISO 3166-1 alpha-2 code. - &#x60;&#x60;hostnames&#x60;&#x60;: The list of hostnames associated with the IP address obtained from the reverse DNS lookup. - &#x60;&#x60;latitude&#x60;&#x60;: The latitude of the geolocation. - &#x60;&#x60;longitude&#x60;&#x60;: The longitude of the geolocation. - &#x60;&#x60;postal_code&#x60;&#x60;:&#x60;&#x60;: The postal code of the city. - &#x60;&#x60;region_geoname_code&#x60;&#x60;:&#x60;&#x60;: The geoname code of the region. - &#x60;&#x60;region_name&#x60;&#x60;:&#x60;&#x60;: The region name, in english. The developer can use the geoname code to localize the name of the region. - &#x60;&#x60;time_zone&#x60;&#x60;: The name of the time zone.   ### Errors The endpoint will return the following errors: - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  The private IP addresses will be ignored, if any.  It will also return the API Global errors described in the API description.
     * @param requestBody  (required)
     * @return GeoIPCollectionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public GeoIPCollectionOutput geolocateIpSetV1GeoPost(Set<String> requestBody) throws ApiException {
        ApiResponse<GeoIPCollectionOutput> localVarResp = geolocateIpSetV1GeoPostWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * Get the geolocation data of the IP addresses set.
     * ### What Get the geo location data of all the IP addresses passed as argument. This information includes: - Latitude and longitude - Time zone - Accuracy radius - Postal code - City name - Region - Country - Country of the service provider - Continent - Reverse PTR hostnames  ### Parameters A list of public IPv4 or IPv6 addresses is required in the body of the request.  ### Result The result contains a list of the result for each IP address, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;accuracy_radius&#x60;&#x60;:  The radius in kilometers around the specified location where the IP address is likely to be. - &#x60;&#x60;asn_country_iso_code&#x60;&#x60;: The ISO code of the country of the Autonomous System (AS) owner of the IP address. - &#x60;&#x60;city_geoname_code&#x60;&#x60;:&#x60;&#x60;: City geoname code. The geoname code by [GeoNames](https://en.wikipedia.org/wiki/GeoNames) is a unique identifier assigned to each geographical point on the globe. - &#x60;&#x60;city_name&#x60;&#x60;:&#x60;&#x60;: City name, in english. The developer can use the geoname code to localize the name of the city. - &#x60;&#x60;continent_code&#x60;&#x60;: The continent code. It can be any of the following: AF, AN, AS, EU, NA, OC, SA. - &#x60;&#x60;country_iso_code&#x60;&#x60;: The country ISO 3166-1 alpha-2 code. - &#x60;&#x60;hostnames&#x60;&#x60;: The list of hostnames associated with the IP address obtained from the reverse DNS lookup. - &#x60;&#x60;latitude&#x60;&#x60;: The latitude of the geolocation. - &#x60;&#x60;longitude&#x60;&#x60;: The longitude of the geolocation. - &#x60;&#x60;postal_code&#x60;&#x60;:&#x60;&#x60;: The postal code of the city. - &#x60;&#x60;region_geoname_code&#x60;&#x60;:&#x60;&#x60;: The geoname code of the region. - &#x60;&#x60;region_name&#x60;&#x60;:&#x60;&#x60;: The region name, in english. The developer can use the geoname code to localize the name of the region. - &#x60;&#x60;time_zone&#x60;&#x60;: The name of the time zone.   ### Errors The endpoint will return the following errors: - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  The private IP addresses will be ignored, if any.  It will also return the API Global errors described in the API description.
     * @param requestBody  (required)
     * @return ApiResponse&lt;GeoIPCollectionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoIPCollectionOutput> geolocateIpSetV1GeoPostWithHttpInfo(Set<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = geolocateIpSetV1GeoPostValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<GeoIPCollectionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the geolocation data of the IP addresses set. (asynchronously)
     * ### What Get the geo location data of all the IP addresses passed as argument. This information includes: - Latitude and longitude - Time zone - Accuracy radius - Postal code - City name - Region - Country - Country of the service provider - Continent - Reverse PTR hostnames  ### Parameters A list of public IPv4 or IPv6 addresses is required in the body of the request.  ### Result The result contains a list of the result for each IP address, with the following data set:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;accuracy_radius&#x60;&#x60;:  The radius in kilometers around the specified location where the IP address is likely to be. - &#x60;&#x60;asn_country_iso_code&#x60;&#x60;: The ISO code of the country of the Autonomous System (AS) owner of the IP address. - &#x60;&#x60;city_geoname_code&#x60;&#x60;:&#x60;&#x60;: City geoname code. The geoname code by [GeoNames](https://en.wikipedia.org/wiki/GeoNames) is a unique identifier assigned to each geographical point on the globe. - &#x60;&#x60;city_name&#x60;&#x60;:&#x60;&#x60;: City name, in english. The developer can use the geoname code to localize the name of the city. - &#x60;&#x60;continent_code&#x60;&#x60;: The continent code. It can be any of the following: AF, AN, AS, EU, NA, OC, SA. - &#x60;&#x60;country_iso_code&#x60;&#x60;: The country ISO 3166-1 alpha-2 code. - &#x60;&#x60;hostnames&#x60;&#x60;: The list of hostnames associated with the IP address obtained from the reverse DNS lookup. - &#x60;&#x60;latitude&#x60;&#x60;: The latitude of the geolocation. - &#x60;&#x60;longitude&#x60;&#x60;: The longitude of the geolocation. - &#x60;&#x60;postal_code&#x60;&#x60;:&#x60;&#x60;: The postal code of the city. - &#x60;&#x60;region_geoname_code&#x60;&#x60;:&#x60;&#x60;: The geoname code of the region. - &#x60;&#x60;region_name&#x60;&#x60;:&#x60;&#x60;: The region name, in english. The developer can use the geoname code to localize the name of the region. - &#x60;&#x60;time_zone&#x60;&#x60;: The name of the time zone.   ### Errors The endpoint will return the following errors: - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  The private IP addresses will be ignored, if any.  It will also return the API Global errors described in the API description.
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geolocateIpSetV1GeoPostAsync(Set<String> requestBody, final ApiCallback<GeoIPCollectionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = geolocateIpSetV1GeoPostValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<GeoIPCollectionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for geolocateIpV1GeoIpAddressGet
     * @param ipAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geolocateIpV1GeoIpAddressGetCall(String ipAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/geo/{ip_address}"
            .replace("{" + "ip_address" + "}", localVarApiClient.escapeString(ipAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geolocateIpV1GeoIpAddressGetValidateBeforeCall(String ipAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling geolocateIpV1GeoIpAddressGet(Async)");
        }

        return geolocateIpV1GeoIpAddressGetCall(ipAddress, _callback);

    }

    /**
     * Get the geo location data of the IP address.
     * ### What Get the geo location data of the IP address passed as argument. This information includes: - Latitude and longitude - Time zone - Accuracy radius - Postal code - City name - Region - Country - Country of the service provider - Continent - Reverse PTR hostnames   ### Parameters The only argument accepted in the query string is a public IPv4 or IPv6 addresses.  ### Result The result contains the following set of data:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;accuracy_radius&#x60;&#x60;:  The radius in kilometers around the specified location where the IP address is likely to be. - &#x60;&#x60;asn_country_iso_code&#x60;&#x60;: The ISO code of the country of the Autonomous System (AS) owner of the IP address. - &#x60;&#x60;city_geoname_code&#x60;&#x60;:&#x60;&#x60;: City geoname code. The geoname code by [GeoNames](https://en.wikipedia.org/wiki/GeoNames) is a unique identifier assigned to each geographical point on the globe. - &#x60;&#x60;city_name&#x60;&#x60;:&#x60;&#x60;: City name, in english. The developer can use the geoname code to localize the name of the city. - &#x60;&#x60;continent_code&#x60;&#x60;: The continent code. It can be any of the following: AF, AN, AS, EU, NA, OC, SA. - &#x60;&#x60;country_iso_code&#x60;&#x60;: The country ISO 3166-1 alpha-2 code. - &#x60;&#x60;hostnames&#x60;&#x60;: The list of hostnames associated with the IP address obtained from the reverse DNS lookup. - &#x60;&#x60;latitude&#x60;&#x60;: The latitude of the geolocation. - &#x60;&#x60;longitude&#x60;&#x60;: The longitude of the geolocation. - &#x60;&#x60;postal_code&#x60;&#x60;:&#x60;&#x60;: The postal code of the city. - &#x60;&#x60;region_geoname_code&#x60;&#x60;:&#x60;&#x60;: The geoname code of the region. - &#x60;&#x60;region_name&#x60;&#x60;:&#x60;&#x60;: The region name, in english. The developer can use the geoname code to localize the name of the region. - &#x60;&#x60;time_zone&#x60;&#x60;: The name of the time zone.   ### Errors The endpoint will return the following errors: - a &#x60;400 Bad Request&#x60; error if the IP address is not public. - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  It will also return the API Global errors described in the API description.
     * @param ipAddress  (required)
     * @return GeoIPOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public GeoIPOutput geolocateIpV1GeoIpAddressGet(String ipAddress) throws ApiException {
        ApiResponse<GeoIPOutput> localVarResp = geolocateIpV1GeoIpAddressGetWithHttpInfo(ipAddress);
        return localVarResp.getData();
    }

    /**
     * Get the geo location data of the IP address.
     * ### What Get the geo location data of the IP address passed as argument. This information includes: - Latitude and longitude - Time zone - Accuracy radius - Postal code - City name - Region - Country - Country of the service provider - Continent - Reverse PTR hostnames   ### Parameters The only argument accepted in the query string is a public IPv4 or IPv6 addresses.  ### Result The result contains the following set of data:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;accuracy_radius&#x60;&#x60;:  The radius in kilometers around the specified location where the IP address is likely to be. - &#x60;&#x60;asn_country_iso_code&#x60;&#x60;: The ISO code of the country of the Autonomous System (AS) owner of the IP address. - &#x60;&#x60;city_geoname_code&#x60;&#x60;:&#x60;&#x60;: City geoname code. The geoname code by [GeoNames](https://en.wikipedia.org/wiki/GeoNames) is a unique identifier assigned to each geographical point on the globe. - &#x60;&#x60;city_name&#x60;&#x60;:&#x60;&#x60;: City name, in english. The developer can use the geoname code to localize the name of the city. - &#x60;&#x60;continent_code&#x60;&#x60;: The continent code. It can be any of the following: AF, AN, AS, EU, NA, OC, SA. - &#x60;&#x60;country_iso_code&#x60;&#x60;: The country ISO 3166-1 alpha-2 code. - &#x60;&#x60;hostnames&#x60;&#x60;: The list of hostnames associated with the IP address obtained from the reverse DNS lookup. - &#x60;&#x60;latitude&#x60;&#x60;: The latitude of the geolocation. - &#x60;&#x60;longitude&#x60;&#x60;: The longitude of the geolocation. - &#x60;&#x60;postal_code&#x60;&#x60;:&#x60;&#x60;: The postal code of the city. - &#x60;&#x60;region_geoname_code&#x60;&#x60;:&#x60;&#x60;: The geoname code of the region. - &#x60;&#x60;region_name&#x60;&#x60;:&#x60;&#x60;: The region name, in english. The developer can use the geoname code to localize the name of the region. - &#x60;&#x60;time_zone&#x60;&#x60;: The name of the time zone.   ### Errors The endpoint will return the following errors: - a &#x60;400 Bad Request&#x60; error if the IP address is not public. - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  It will also return the API Global errors described in the API description.
     * @param ipAddress  (required)
     * @return ApiResponse&lt;GeoIPOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoIPOutput> geolocateIpV1GeoIpAddressGetWithHttpInfo(String ipAddress) throws ApiException {
        okhttp3.Call localVarCall = geolocateIpV1GeoIpAddressGetValidateBeforeCall(ipAddress, null);
        Type localVarReturnType = new TypeToken<GeoIPOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the geo location data of the IP address. (asynchronously)
     * ### What Get the geo location data of the IP address passed as argument. This information includes: - Latitude and longitude - Time zone - Accuracy radius - Postal code - City name - Region - Country - Country of the service provider - Continent - Reverse PTR hostnames   ### Parameters The only argument accepted in the query string is a public IPv4 or IPv6 addresses.  ### Result The result contains the following set of data:  The result is a JSON object with the following structure: - &#x60;&#x60;self&#x60;&#x60;: the URI of the API call - &#x60;&#x60;accuracy_radius&#x60;&#x60;:  The radius in kilometers around the specified location where the IP address is likely to be. - &#x60;&#x60;asn_country_iso_code&#x60;&#x60;: The ISO code of the country of the Autonomous System (AS) owner of the IP address. - &#x60;&#x60;city_geoname_code&#x60;&#x60;:&#x60;&#x60;: City geoname code. The geoname code by [GeoNames](https://en.wikipedia.org/wiki/GeoNames) is a unique identifier assigned to each geographical point on the globe. - &#x60;&#x60;city_name&#x60;&#x60;:&#x60;&#x60;: City name, in english. The developer can use the geoname code to localize the name of the city. - &#x60;&#x60;continent_code&#x60;&#x60;: The continent code. It can be any of the following: AF, AN, AS, EU, NA, OC, SA. - &#x60;&#x60;country_iso_code&#x60;&#x60;: The country ISO 3166-1 alpha-2 code. - &#x60;&#x60;hostnames&#x60;&#x60;: The list of hostnames associated with the IP address obtained from the reverse DNS lookup. - &#x60;&#x60;latitude&#x60;&#x60;: The latitude of the geolocation. - &#x60;&#x60;longitude&#x60;&#x60;: The longitude of the geolocation. - &#x60;&#x60;postal_code&#x60;&#x60;:&#x60;&#x60;: The postal code of the city. - &#x60;&#x60;region_geoname_code&#x60;&#x60;:&#x60;&#x60;: The geoname code of the region. - &#x60;&#x60;region_name&#x60;&#x60;:&#x60;&#x60;: The region name, in english. The developer can use the geoname code to localize the name of the region. - &#x60;&#x60;time_zone&#x60;&#x60;: The name of the time zone.   ### Errors The endpoint will return the following errors: - a &#x60;400 Bad Request&#x60; error if the IP address is not public. - a &#x60;422 Unprocessable Entity&#x60; error if the IP address is malformed.  It will also return the API Global errors described in the API description.
     * @param ipAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The server will return a valid answer in the following cases: </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geolocateIpV1GeoIpAddressGetAsync(String ipAddress, final ApiCallback<GeoIPOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = geolocateIpV1GeoIpAddressGetValidateBeforeCall(ipAddress, _callback);
        Type localVarReturnType = new TypeToken<GeoIPOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
