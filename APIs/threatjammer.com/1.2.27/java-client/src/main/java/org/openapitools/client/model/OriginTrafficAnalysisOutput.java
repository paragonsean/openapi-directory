/*
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OriginTrafficAnalysisOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:58.480875-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OriginTrafficAnalysisOutput {
  public static final String SERIALIZED_NAME_ASN_RISKY = "asn_risky";
  @SerializedName(SERIALIZED_NAME_ASN_RISKY)
  private Integer asnRisky;

  public static final String SERIALIZED_NAME_BOTS = "bots";
  @SerializedName(SERIALIZED_NAME_BOTS)
  private Integer bots;

  public static final String SERIALIZED_NAME_DATACENTERS = "datacenters";
  @SerializedName(SERIALIZED_NAME_DATACENTERS)
  private Integer datacenters;

  public static final String SERIALIZED_NAME_DENYLISTS = "denylists";
  @SerializedName(SERIALIZED_NAME_DENYLISTS)
  private Integer denylists;

  public static final String SERIALIZED_NAME_NETWORK_COUNTRY_MISMATCHES = "network_country_mismatches";
  @SerializedName(SERIALIZED_NAME_NETWORK_COUNTRY_MISMATCHES)
  private Integer networkCountryMismatches;

  public static final String SERIALIZED_NAME_SCORE_HIGH = "score_high";
  @SerializedName(SERIALIZED_NAME_SCORE_HIGH)
  private Integer scoreHigh;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_WEBDRIVERS = "webdrivers";
  @SerializedName(SERIALIZED_NAME_WEBDRIVERS)
  private Integer webdrivers;

  public OriginTrafficAnalysisOutput() {
  }

  public OriginTrafficAnalysisOutput asnRisky(Integer asnRisky) {
    this.asnRisky = asnRisky;
    return this;
  }

  /**
   * Get asnRisky
   * @return asnRisky
   */
  @javax.annotation.Nonnull
  public Integer getAsnRisky() {
    return asnRisky;
  }

  public void setAsnRisky(Integer asnRisky) {
    this.asnRisky = asnRisky;
  }


  public OriginTrafficAnalysisOutput bots(Integer bots) {
    this.bots = bots;
    return this;
  }

  /**
   * Get bots
   * @return bots
   */
  @javax.annotation.Nonnull
  public Integer getBots() {
    return bots;
  }

  public void setBots(Integer bots) {
    this.bots = bots;
  }


  public OriginTrafficAnalysisOutput datacenters(Integer datacenters) {
    this.datacenters = datacenters;
    return this;
  }

  /**
   * Get datacenters
   * @return datacenters
   */
  @javax.annotation.Nonnull
  public Integer getDatacenters() {
    return datacenters;
  }

  public void setDatacenters(Integer datacenters) {
    this.datacenters = datacenters;
  }


  public OriginTrafficAnalysisOutput denylists(Integer denylists) {
    this.denylists = denylists;
    return this;
  }

  /**
   * Get denylists
   * @return denylists
   */
  @javax.annotation.Nonnull
  public Integer getDenylists() {
    return denylists;
  }

  public void setDenylists(Integer denylists) {
    this.denylists = denylists;
  }


  public OriginTrafficAnalysisOutput networkCountryMismatches(Integer networkCountryMismatches) {
    this.networkCountryMismatches = networkCountryMismatches;
    return this;
  }

  /**
   * Get networkCountryMismatches
   * @return networkCountryMismatches
   */
  @javax.annotation.Nonnull
  public Integer getNetworkCountryMismatches() {
    return networkCountryMismatches;
  }

  public void setNetworkCountryMismatches(Integer networkCountryMismatches) {
    this.networkCountryMismatches = networkCountryMismatches;
  }


  public OriginTrafficAnalysisOutput scoreHigh(Integer scoreHigh) {
    this.scoreHigh = scoreHigh;
    return this;
  }

  /**
   * Get scoreHigh
   * @return scoreHigh
   */
  @javax.annotation.Nonnull
  public Integer getScoreHigh() {
    return scoreHigh;
  }

  public void setScoreHigh(Integer scoreHigh) {
    this.scoreHigh = scoreHigh;
  }


  public OriginTrafficAnalysisOutput timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }


  public OriginTrafficAnalysisOutput total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public OriginTrafficAnalysisOutput webdrivers(Integer webdrivers) {
    this.webdrivers = webdrivers;
    return this;
  }

  /**
   * Get webdrivers
   * @return webdrivers
   */
  @javax.annotation.Nonnull
  public Integer getWebdrivers() {
    return webdrivers;
  }

  public void setWebdrivers(Integer webdrivers) {
    this.webdrivers = webdrivers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginTrafficAnalysisOutput originTrafficAnalysisOutput = (OriginTrafficAnalysisOutput) o;
    return Objects.equals(this.asnRisky, originTrafficAnalysisOutput.asnRisky) &&
        Objects.equals(this.bots, originTrafficAnalysisOutput.bots) &&
        Objects.equals(this.datacenters, originTrafficAnalysisOutput.datacenters) &&
        Objects.equals(this.denylists, originTrafficAnalysisOutput.denylists) &&
        Objects.equals(this.networkCountryMismatches, originTrafficAnalysisOutput.networkCountryMismatches) &&
        Objects.equals(this.scoreHigh, originTrafficAnalysisOutput.scoreHigh) &&
        Objects.equals(this.timestamp, originTrafficAnalysisOutput.timestamp) &&
        Objects.equals(this.total, originTrafficAnalysisOutput.total) &&
        Objects.equals(this.webdrivers, originTrafficAnalysisOutput.webdrivers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asnRisky, bots, datacenters, denylists, networkCountryMismatches, scoreHigh, timestamp, total, webdrivers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginTrafficAnalysisOutput {\n");
    sb.append("    asnRisky: ").append(toIndentedString(asnRisky)).append("\n");
    sb.append("    bots: ").append(toIndentedString(bots)).append("\n");
    sb.append("    datacenters: ").append(toIndentedString(datacenters)).append("\n");
    sb.append("    denylists: ").append(toIndentedString(denylists)).append("\n");
    sb.append("    networkCountryMismatches: ").append(toIndentedString(networkCountryMismatches)).append("\n");
    sb.append("    scoreHigh: ").append(toIndentedString(scoreHigh)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    webdrivers: ").append(toIndentedString(webdrivers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asn_risky");
    openapiFields.add("bots");
    openapiFields.add("datacenters");
    openapiFields.add("denylists");
    openapiFields.add("network_country_mismatches");
    openapiFields.add("score_high");
    openapiFields.add("timestamp");
    openapiFields.add("total");
    openapiFields.add("webdrivers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asn_risky");
    openapiRequiredFields.add("bots");
    openapiRequiredFields.add("datacenters");
    openapiRequiredFields.add("denylists");
    openapiRequiredFields.add("network_country_mismatches");
    openapiRequiredFields.add("score_high");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("webdrivers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OriginTrafficAnalysisOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OriginTrafficAnalysisOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OriginTrafficAnalysisOutput is not found in the empty JSON string", OriginTrafficAnalysisOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OriginTrafficAnalysisOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OriginTrafficAnalysisOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OriginTrafficAnalysisOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OriginTrafficAnalysisOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OriginTrafficAnalysisOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OriginTrafficAnalysisOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OriginTrafficAnalysisOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<OriginTrafficAnalysisOutput>() {
           @Override
           public void write(JsonWriter out, OriginTrafficAnalysisOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OriginTrafficAnalysisOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OriginTrafficAnalysisOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OriginTrafficAnalysisOutput
   * @throws IOException if the JSON string is invalid with respect to OriginTrafficAnalysisOutput
   */
  public static OriginTrafficAnalysisOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OriginTrafficAnalysisOutput.class);
  }

  /**
   * Convert an instance of OriginTrafficAnalysisOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

