/*
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for OriginClientAnalysisOutput
 */
public class OriginClientAnalysisOutputTest {
    private final OriginClientAnalysisOutput model = new OriginClientAnalysisOutput();

    /**
     * Model tests for OriginClientAnalysisOutput
     */
    @Test
    public void testOriginClientAnalysisOutput() {
        // TODO: test OriginClientAnalysisOutput
    }

    /**
     * Test the property 'clientBrowser'
     */
    @Test
    public void clientBrowserTest() {
        // TODO: test clientBrowser
    }

    /**
     * Test the property 'clientCrawler'
     */
    @Test
    public void clientCrawlerTest() {
        // TODO: test clientCrawler
    }

    /**
     * Test the property 'clientEmail'
     */
    @Test
    public void clientEmailTest() {
        // TODO: test clientEmail
    }

    /**
     * Test the property 'clientLibrary'
     */
    @Test
    public void clientLibraryTest() {
        // TODO: test clientLibrary
    }

    /**
     * Test the property 'clientMobileBrowser'
     */
    @Test
    public void clientMobileBrowserTest() {
        // TODO: test clientMobileBrowser
    }

    /**
     * Test the property 'clientMultimediaPlayer'
     */
    @Test
    public void clientMultimediaPlayerTest() {
        // TODO: test clientMultimediaPlayer
    }

    /**
     * Test the property 'clientOfflineBrowser'
     */
    @Test
    public void clientOfflineBrowserTest() {
        // TODO: test clientOfflineBrowser
    }

    /**
     * Test the property 'clientTotal'
     */
    @Test
    public void clientTotalTest() {
        // TODO: test clientTotal
    }

    /**
     * Test the property 'clientUaAnonymizer'
     */
    @Test
    public void clientUaAnonymizerTest() {
        // TODO: test clientUaAnonymizer
    }

    /**
     * Test the property 'clientUnrecognized'
     */
    @Test
    public void clientUnrecognizedTest() {
        // TODO: test clientUnrecognized
    }

    /**
     * Test the property 'clientValidator'
     */
    @Test
    public void clientValidatorTest() {
        // TODO: test clientValidator
    }

    /**
     * Test the property 'clientWapBrowser'
     */
    @Test
    public void clientWapBrowserTest() {
        // TODO: test clientWapBrowser
    }

    /**
     * Test the property 'crawlerFeedFetcher'
     */
    @Test
    public void crawlerFeedFetcherTest() {
        // TODO: test crawlerFeedFetcher
    }

    /**
     * Test the property 'crawlerLinkChecker'
     */
    @Test
    public void crawlerLinkCheckerTest() {
        // TODO: test crawlerLinkChecker
    }

    /**
     * Test the property 'crawlerMarketing'
     */
    @Test
    public void crawlerMarketingTest() {
        // TODO: test crawlerMarketing
    }

    /**
     * Test the property 'crawlerScreenshotCreator'
     */
    @Test
    public void crawlerScreenshotCreatorTest() {
        // TODO: test crawlerScreenshotCreator
    }

    /**
     * Test the property 'crawlerSearchEngineBot'
     */
    @Test
    public void crawlerSearchEngineBotTest() {
        // TODO: test crawlerSearchEngineBot
    }

    /**
     * Test the property 'crawlerSiteMonitor'
     */
    @Test
    public void crawlerSiteMonitorTest() {
        // TODO: test crawlerSiteMonitor
    }

    /**
     * Test the property 'crawlerSpeedTester'
     */
    @Test
    public void crawlerSpeedTesterTest() {
        // TODO: test crawlerSpeedTester
    }

    /**
     * Test the property 'crawlerTool'
     */
    @Test
    public void crawlerToolTest() {
        // TODO: test crawlerTool
    }

    /**
     * Test the property 'crawlerTotal'
     */
    @Test
    public void crawlerTotalTest() {
        // TODO: test crawlerTotal
    }

    /**
     * Test the property 'crawlerUncategorised'
     */
    @Test
    public void crawlerUncategorisedTest() {
        // TODO: test crawlerUncategorised
    }

    /**
     * Test the property 'crawlerUnrecognized'
     */
    @Test
    public void crawlerUnrecognizedTest() {
        // TODO: test crawlerUnrecognized
    }

    /**
     * Test the property 'crawlerVirusScanner'
     */
    @Test
    public void crawlerVirusScannerTest() {
        // TODO: test crawlerVirusScanner
    }

    /**
     * Test the property 'crawlerVulnerabilityScanner'
     */
    @Test
    public void crawlerVulnerabilityScannerTest() {
        // TODO: test crawlerVulnerabilityScanner
    }

    /**
     * Test the property 'crawlerWebScraper'
     */
    @Test
    public void crawlerWebScraperTest() {
        // TODO: test crawlerWebScraper
    }

    /**
     * Test the property 'timestamp'
     */
    @Test
    public void timestampTest() {
        // TODO: test timestamp
    }

    /**
     * Test the property 'total'
     */
    @Test
    public void totalTest() {
        // TODO: test total
    }

}
