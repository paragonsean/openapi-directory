/*
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BodyDeleteTokenV1OriginTokenDelete;
import org.openapitools.client.model.BodyDisableOriginTokenV1OriginTokenDisablePut;
import org.openapitools.client.model.BodyEnableOriginTokenV1OriginTokenEnablePut;
import org.openapitools.client.model.BodyQueryOriginTokenInfoV1OriginTokenPost;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.OriginTokenCollectionOutput;
import org.openapitools.client.model.OriginTokenInput;
import org.openapitools.client.model.OriginTokenOutput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OriginTokenManagementInThisRegionApi
 */
@Disabled
public class OriginTokenManagementInThisRegionApiTest {

    private final OriginTokenManagementInThisRegionApi api = new OriginTokenManagementInThisRegionApi();

    /**
     * Create an origin token of the user in the region.
     *
     * ### What Creates a new origin token for the user passing as argument the origin. The origin parameter is the protocol and the domain where the origin token is valid.  The origin token is a special key used in conjunction with javascript library used for abuse detection. This key is owned by the user and is used to identify the origin of the request.  Hence, the protocol and domain of the origin must be the one where the javascript is loaded.  ### Parameters The origin with the protocol and domain is required in the body of the request in the parameter &#x60;&#x60;origin&#x60;&#x60;. The allowed protocols are &#x60;&#x60;https://&#x60;&#x60;, and &#x60;&#x60;http://&#x60;&#x60;.  ### Result The result is a JSON object with the new origin token and the following fields: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual origin token information. - &#x60;&#x60;region_id&#x60;&#x60;: the name of the region where the origin token is valid. - &#x60;&#x60;origin&#x60;&#x60;: the protocol and the domain where the origin token is valid. - &#x60;&#x60;status&#x60;&#x60;: the status of the origin token. The only allowed values are &#x60;&#x60;ENABLED&#x60;&#x60; and &#x60;&#x60;DISABLED&#x60;&#x60;. - &#x60;&#x60;created_at&#x60;&#x60;: the date and time when the origin token was created in UNIX timestamp in milliseconds. - &#x60;&#x60;updated_at&#x60;&#x60;: the date and time when the origin token was last updated in UNIX timestamp in milliseconds.  ### Errors It will return the API Global errors described in the API description.  It will also return the following errors: - a &#x60;400 Bad Request&#x60; error if the origin does not have the correct format. - a &#x60;409 Conflict&#x60; error if the origin token already exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createANewOriginTokenV1OriginTokenNewPostTest() throws ApiException {
        OriginTokenInput originTokenInput = null;
        OriginTokenOutput response = api.createANewOriginTokenV1OriginTokenNewPost(originTokenInput);
        // TODO: test validations
    }

    /**
     * Delete an origin token of the user in the region.
     *
     * ### What Deletes the origin token passed as argument of the user in the selected region. Once the token is deleted, it will no longer be valid and the protocol and domain of the origin will no longer be under protection.  To delete an origin token, the user must be the owner and the token must be &#x60;&#x60;DISABLED&#x60;&#x60; first.  ### Parameters The Origin Token is required in the body of the request in the parameter &#x60;origin_token_id&#x60;.  ### Result If successful, the result will be an empty response with a status code of &#x60;204 No Content&#x60;.  ### Errors It will return the API Global errors described in the API description.  It will also return the following errors: - a &#x60;404 Not Found&#x60; error if the origin token is not found. - a &#x60;409 Conflict&#x60; error if the origin token is not disabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTokenV1OriginTokenDeleteTest() throws ApiException {
        BodyDeleteTokenV1OriginTokenDelete bodyDeleteTokenV1OriginTokenDelete = null;
        Object response = api.deleteTokenV1OriginTokenDelete(bodyDeleteTokenV1OriginTokenDelete);
        // TODO: test validations
    }

    /**
     * Disable a enabled origin token of the user in the region.
     *
     * ### What Disable an enabled origin token passed as argument of the user in the selected region. When a token is enabled, it will participate in the protection of the origin protocol and domain. If the token is disabled, it will not participate in the protection of the origin protocol and domain.  To disable an origin token, the user must be the owner. If the token is already disabled, the function will not perform any action. If the token is enabled, it will be disabled.  ### Parameters The Origin Token is required in the body of the request in the parameter &#x60;origin_token_id&#x60;.  ### Result If successful, the result will be an empty response with a status code of &#x60;204 No Content&#x60;.  ### Errors It will return the API Global errors described in the API description.  It will also return the following errors: - a &#x60;404 Not Found&#x60; error if the origin token is not found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableOriginTokenV1OriginTokenDisablePutTest() throws ApiException {
        BodyDisableOriginTokenV1OriginTokenDisablePut bodyDisableOriginTokenV1OriginTokenDisablePut = null;
        Object response = api.disableOriginTokenV1OriginTokenDisablePut(bodyDisableOriginTokenV1OriginTokenDisablePut);
        // TODO: test validations
    }

    /**
     * Enable a disabled origin token of the user in the region.
     *
     * ### What Enable a disabled origin token passed as argument of the user in the selected region. When a token is enabled, it will participate in the protection of the origin protocol and domain. If the token is disabled, it will not participate in the protection of the origin protocol and domain.  To enable an origin token, the user must be the owner. If the token is already enabled, the function will not perform any action. If the token is disabled, it will be enabled.  ### Parameters The Origin Token is required in the body of the request in the parameter &#x60;origin_token_id&#x60;.  ### Result If successful, the result will be an empty response with a status code of &#x60;204 No Content&#x60;.  ### Errors It will return the API Global errors described in the API description.  It will also return the following errors: - a &#x60;404 Not Found&#x60; error if the origin token is not found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableOriginTokenV1OriginTokenEnablePutTest() throws ApiException {
        BodyEnableOriginTokenV1OriginTokenEnablePut bodyEnableOriginTokenV1OriginTokenEnablePut = null;
        Object response = api.enableOriginTokenV1OriginTokenEnablePut(bodyEnableOriginTokenV1OriginTokenEnablePut);
        // TODO: test validations
    }

    /**
     * Get the information of the origin tokens of the user in the region.
     *
     * ### What Obtain the attributes of all the origin tokens of the user in the selected region. The purpose of this function is to show what protocol and domain is linked to all the tokens.  The origin token is a special key used in conjunction with javascript library used for abuse detection. This key is owned by the user and is used to identify the origin of the request.  Hence, the protocol and domain of the origin must be the one where the javascript is loaded.  ### Parameters No parameters are required.  ### Result The result is a list of JSON objects with the following fields: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual origin token information. - &#x60;&#x60;region_id&#x60;&#x60;: the name of the region where the origin token is valid. - &#x60;&#x60;origin&#x60;&#x60;: the protocol and the domain where the origin token is valid. - &#x60;&#x60;status&#x60;&#x60;: the status of the origin token. The only allowed values are &#x60;&#x60;ENABLED&#x60;&#x60; and &#x60;&#x60;DISABLED&#x60;&#x60;. - &#x60;&#x60;created_at&#x60;&#x60;: the date and time when the origin token was created in UNIX timestamp in milliseconds. - &#x60;&#x60;updated_at&#x60;&#x60;: the date and time when the origin token was last updated in UNIX timestamp in milliseconds.  ### Errors It will return the API Global errors described in the API description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryAllOriginTokensInTheRegionV1OriginTokenAllGetTest() throws ApiException {
        OriginTokenCollectionOutput response = api.queryAllOriginTokensInTheRegionV1OriginTokenAllGet();
        // TODO: test validations
    }

    /**
     * Get the information of an origin token of the user in the region.
     *
     * ### What Obtain the attributes of the given origin token of the user in the selected region. The purpose of this function is to show what protocol and domain is linked to the token.  The origin token is a special key used in conjunction with javascript library used for abuse detection. This key is owned by the user and is used to identify the origin of the request.  Hence, the protocol and domain of the origin must be the one where the javascript is loaded.  ### Parameters The Origin Token is required in the body of the request in the parameter &#x60;origin_token_id&#x60;.  ### Result The result is a JSON object with the following fields: - &#x60;&#x60;self&#x60;&#x60;: the URI to individual origin token information. - &#x60;&#x60;region_id&#x60;&#x60;: the name of the region where the origin token is valid. - &#x60;&#x60;origin&#x60;&#x60;: the protocol and the domain where the origin token is valid. - &#x60;&#x60;status&#x60;&#x60;: the status of the origin token. The only allowed values are &#x60;&#x60;ENABLED&#x60;&#x60; and &#x60;&#x60;DISABLED&#x60;&#x60;. - &#x60;&#x60;created_at&#x60;&#x60;: the date and time when the origin token was created in UNIX timestamp in milliseconds. - &#x60;&#x60;updated_at&#x60;&#x60;: the date and time when the origin token was last updated in UNIX timestamp in milliseconds.  ### Errors It will return the API Global errors described in the API description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryOriginTokenInfoV1OriginTokenPostTest() throws ApiException {
        BodyQueryOriginTokenInfoV1OriginTokenPost bodyQueryOriginTokenInfoV1OriginTokenPost = null;
        OriginTokenOutput response = api.queryOriginTokenInfoV1OriginTokenPost(bodyQueryOriginTokenInfoV1OriginTokenPost);
        // TODO: test validations
    }

}
