/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserAgentApi_H
#define OAI_OAIUserAgentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeviceOutput.h"
#include "OAIFamilyOutput.h"
#include "OAIHTTPValidationError.h"
#include "OAIHttpFileElement.h"
#include "OAIOSOutput.h"
#include "OAITypeOutput.h"
#include "OAIUACollectionOutput.h"
#include "OAIUAOutput.h"
#include "OAIVendorOutput.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserAgentApi : public QObject {
    Q_OBJECT

public:
    OAIUserAgentApi(const int timeOut = 0);
    ~OAIUserAgentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_agent_urlencoded QString [required]
    */
    virtual void parseUserAgentV1UaUserAgentUrlencodedGet(const QString &user_agent_urlencoded);

    /**
    * @param[in]  csv_file OAIHttpFileElement [required]
    */
    virtual void parseUserAgentsCsvV1UaCsvPost(const OAIHttpFileElement &csv_file);

    /**
    * @param[in]  request_body QSet<QString> [required]
    */
    virtual void parseUserAgentsV1UaPost(const QSet<QString> &request_body);

    /**
    * @param[in]  code QString [required]
    */
    virtual void queryDeviceByCodeV1UaDeviceCodeGet(const QString &code);

    /**
    * @param[in]  code QString [required]
    */
    virtual void queryFamilyByCodeV1UaFamilyCodeGet(const QString &code);

    /**
    * @param[in]  code QString [required]
    */
    virtual void queryOsByCodeV1UaOsCodeGet(const QString &code);

    /**
    * @param[in]  code QString [required]
    */
    virtual void queryTypeByCodeV1UaTypeCodeGet(const QString &code);

    /**
    * @param[in]  code QString [required]
    */
    virtual void queryVendorByCodeV1UaVendorCodeGet(const QString &code);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void parseUserAgentV1UaUserAgentUrlencodedGetCallback(OAIHttpRequestWorker *worker);
    void parseUserAgentsCsvV1UaCsvPostCallback(OAIHttpRequestWorker *worker);
    void parseUserAgentsV1UaPostCallback(OAIHttpRequestWorker *worker);
    void queryDeviceByCodeV1UaDeviceCodeGetCallback(OAIHttpRequestWorker *worker);
    void queryFamilyByCodeV1UaFamilyCodeGetCallback(OAIHttpRequestWorker *worker);
    void queryOsByCodeV1UaOsCodeGetCallback(OAIHttpRequestWorker *worker);
    void queryTypeByCodeV1UaTypeCodeGetCallback(OAIHttpRequestWorker *worker);
    void queryVendorByCodeV1UaVendorCodeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void parseUserAgentV1UaUserAgentUrlencodedGetSignal(OAIUAOutput summary);
    void parseUserAgentsCsvV1UaCsvPostSignal(OAIUACollectionOutput summary);
    void parseUserAgentsV1UaPostSignal(OAIUACollectionOutput summary);
    void queryDeviceByCodeV1UaDeviceCodeGetSignal(OAIDeviceOutput summary);
    void queryFamilyByCodeV1UaFamilyCodeGetSignal(OAIFamilyOutput summary);
    void queryOsByCodeV1UaOsCodeGetSignal(OAIOSOutput summary);
    void queryTypeByCodeV1UaTypeCodeGetSignal(OAITypeOutput summary);
    void queryVendorByCodeV1UaVendorCodeGetSignal(OAIVendorOutput summary);


    void parseUserAgentV1UaUserAgentUrlencodedGetSignalFull(OAIHttpRequestWorker *worker, OAIUAOutput summary);
    void parseUserAgentsCsvV1UaCsvPostSignalFull(OAIHttpRequestWorker *worker, OAIUACollectionOutput summary);
    void parseUserAgentsV1UaPostSignalFull(OAIHttpRequestWorker *worker, OAIUACollectionOutput summary);
    void queryDeviceByCodeV1UaDeviceCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIDeviceOutput summary);
    void queryFamilyByCodeV1UaFamilyCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIFamilyOutput summary);
    void queryOsByCodeV1UaOsCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIOSOutput summary);
    void queryTypeByCodeV1UaTypeCodeGetSignalFull(OAIHttpRequestWorker *worker, OAITypeOutput summary);
    void queryVendorByCodeV1UaVendorCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIVendorOutput summary);

    Q_DECL_DEPRECATED_X("Use parseUserAgentV1UaUserAgentUrlencodedGetSignalError() instead")
    void parseUserAgentV1UaUserAgentUrlencodedGetSignalE(OAIUAOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseUserAgentV1UaUserAgentUrlencodedGetSignalError(OAIUAOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseUserAgentsCsvV1UaCsvPostSignalError() instead")
    void parseUserAgentsCsvV1UaCsvPostSignalE(OAIUACollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseUserAgentsCsvV1UaCsvPostSignalError(OAIUACollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseUserAgentsV1UaPostSignalError() instead")
    void parseUserAgentsV1UaPostSignalE(OAIUACollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseUserAgentsV1UaPostSignalError(OAIUACollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDeviceByCodeV1UaDeviceCodeGetSignalError() instead")
    void queryDeviceByCodeV1UaDeviceCodeGetSignalE(OAIDeviceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDeviceByCodeV1UaDeviceCodeGetSignalError(OAIDeviceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryFamilyByCodeV1UaFamilyCodeGetSignalError() instead")
    void queryFamilyByCodeV1UaFamilyCodeGetSignalE(OAIFamilyOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryFamilyByCodeV1UaFamilyCodeGetSignalError(OAIFamilyOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOsByCodeV1UaOsCodeGetSignalError() instead")
    void queryOsByCodeV1UaOsCodeGetSignalE(OAIOSOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOsByCodeV1UaOsCodeGetSignalError(OAIOSOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryTypeByCodeV1UaTypeCodeGetSignalError() instead")
    void queryTypeByCodeV1UaTypeCodeGetSignalE(OAITypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryTypeByCodeV1UaTypeCodeGetSignalError(OAITypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryVendorByCodeV1UaVendorCodeGetSignalError() instead")
    void queryVendorByCodeV1UaVendorCodeGetSignalE(OAIVendorOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryVendorByCodeV1UaVendorCodeGetSignalError(OAIVendorOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use parseUserAgentV1UaUserAgentUrlencodedGetSignalErrorFull() instead")
    void parseUserAgentV1UaUserAgentUrlencodedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseUserAgentV1UaUserAgentUrlencodedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseUserAgentsCsvV1UaCsvPostSignalErrorFull() instead")
    void parseUserAgentsCsvV1UaCsvPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseUserAgentsCsvV1UaCsvPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseUserAgentsV1UaPostSignalErrorFull() instead")
    void parseUserAgentsV1UaPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseUserAgentsV1UaPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDeviceByCodeV1UaDeviceCodeGetSignalErrorFull() instead")
    void queryDeviceByCodeV1UaDeviceCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDeviceByCodeV1UaDeviceCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryFamilyByCodeV1UaFamilyCodeGetSignalErrorFull() instead")
    void queryFamilyByCodeV1UaFamilyCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryFamilyByCodeV1UaFamilyCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOsByCodeV1UaOsCodeGetSignalErrorFull() instead")
    void queryOsByCodeV1UaOsCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOsByCodeV1UaOsCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryTypeByCodeV1UaTypeCodeGetSignalErrorFull() instead")
    void queryTypeByCodeV1UaTypeCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryTypeByCodeV1UaTypeCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryVendorByCodeV1UaVendorCodeGetSignalErrorFull() instead")
    void queryVendorByCodeV1UaVendorCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryVendorByCodeV1UaVendorCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
