/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAutonomousSystemsInformationApi_H
#define OAI_OAIAutonomousSystemsInformationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutonomousSystemOutput.h"
#include "OAIAutonomousSystemPrefixOutput.h"
#include "OAIAutonomousSystemPrefixesOutput.h"
#include "OAIAutonomousSystemRegistryOutput.h"
#include "OAIAutonomousSystemStatusOutput.h"
#include "OAIBody_query_asn_prefix_information_v1_asn_prefix_post.h"
#include "OAIHTTPValidationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAutonomousSystemsInformationApi : public QObject {
    Q_OBJECT

public:
    OAIAutonomousSystemsInformationApi(const int timeOut = 0);
    ~OAIAutonomousSystemsInformationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_body_query_asn_prefix_information_v1_asn_prefix_post OAIBody_query_asn_prefix_information_v1_asn_prefix_post [required]
    */
    virtual void queryAsnPrefixInformationV1AsnPrefixPost(const OAIBody_query_asn_prefix_information_v1_asn_prefix_post &oai_body_query_asn_prefix_information_v1_asn_prefix_post);

    /**
    * @param[in]  number qint32 [required]
    */
    virtual void queryAsnPrefixesListV1AsnNumberPrefixesGet(const qint32 &number);

    /**
    * @param[in]  number qint32 [required]
    */
    virtual void queryAsnV1AsnNumberGet(const qint32 &number);

    /**
    * @param[in]  ip_address QString [required]
    */
    virtual void queryIPAddressNetworkInformationV1AsnIpIpAddressGet(const QString &ip_address);

    /**
    * @param[in]  code QString [required]
    */
    virtual void queryRegistryByTheNameV1AsnRegistryCodeGet(const QString &code);


    virtual void queryRegistryNamesV1AsnRegistryAllGet();

    /**
    * @param[in]  code QString [required]
    */
    virtual void queryStatusByTheNameV1AsnStatusCodeGet(const QString &code);


    virtual void queryStatusNamesV1AsnStatusAllGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queryAsnPrefixInformationV1AsnPrefixPostCallback(OAIHttpRequestWorker *worker);
    void queryAsnPrefixesListV1AsnNumberPrefixesGetCallback(OAIHttpRequestWorker *worker);
    void queryAsnV1AsnNumberGetCallback(OAIHttpRequestWorker *worker);
    void queryIPAddressNetworkInformationV1AsnIpIpAddressGetCallback(OAIHttpRequestWorker *worker);
    void queryRegistryByTheNameV1AsnRegistryCodeGetCallback(OAIHttpRequestWorker *worker);
    void queryRegistryNamesV1AsnRegistryAllGetCallback(OAIHttpRequestWorker *worker);
    void queryStatusByTheNameV1AsnStatusCodeGetCallback(OAIHttpRequestWorker *worker);
    void queryStatusNamesV1AsnStatusAllGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queryAsnPrefixInformationV1AsnPrefixPostSignal(OAIAutonomousSystemPrefixOutput summary);
    void queryAsnPrefixesListV1AsnNumberPrefixesGetSignal(OAIAutonomousSystemPrefixesOutput summary);
    void queryAsnV1AsnNumberGetSignal(OAIAutonomousSystemOutput summary);
    void queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignal(OAIAutonomousSystemPrefixOutput summary);
    void queryRegistryByTheNameV1AsnRegistryCodeGetSignal(OAIAutonomousSystemRegistryOutput summary);
    void queryRegistryNamesV1AsnRegistryAllGetSignal(QList<OAIAutonomousSystemRegistryOutput> summary);
    void queryStatusByTheNameV1AsnStatusCodeGetSignal(OAIAutonomousSystemStatusOutput summary);
    void queryStatusNamesV1AsnStatusAllGetSignal(QList<OAIAutonomousSystemStatusOutput> summary);


    void queryAsnPrefixInformationV1AsnPrefixPostSignalFull(OAIHttpRequestWorker *worker, OAIAutonomousSystemPrefixOutput summary);
    void queryAsnPrefixesListV1AsnNumberPrefixesGetSignalFull(OAIHttpRequestWorker *worker, OAIAutonomousSystemPrefixesOutput summary);
    void queryAsnV1AsnNumberGetSignalFull(OAIHttpRequestWorker *worker, OAIAutonomousSystemOutput summary);
    void queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalFull(OAIHttpRequestWorker *worker, OAIAutonomousSystemPrefixOutput summary);
    void queryRegistryByTheNameV1AsnRegistryCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIAutonomousSystemRegistryOutput summary);
    void queryRegistryNamesV1AsnRegistryAllGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAutonomousSystemRegistryOutput> summary);
    void queryStatusByTheNameV1AsnStatusCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIAutonomousSystemStatusOutput summary);
    void queryStatusNamesV1AsnStatusAllGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAutonomousSystemStatusOutput> summary);

    Q_DECL_DEPRECATED_X("Use queryAsnPrefixInformationV1AsnPrefixPostSignalError() instead")
    void queryAsnPrefixInformationV1AsnPrefixPostSignalE(OAIAutonomousSystemPrefixOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAsnPrefixInformationV1AsnPrefixPostSignalError(OAIAutonomousSystemPrefixOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryAsnPrefixesListV1AsnNumberPrefixesGetSignalError() instead")
    void queryAsnPrefixesListV1AsnNumberPrefixesGetSignalE(OAIAutonomousSystemPrefixesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAsnPrefixesListV1AsnNumberPrefixesGetSignalError(OAIAutonomousSystemPrefixesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryAsnV1AsnNumberGetSignalError() instead")
    void queryAsnV1AsnNumberGetSignalE(OAIAutonomousSystemOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAsnV1AsnNumberGetSignalError(OAIAutonomousSystemOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalError() instead")
    void queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalE(OAIAutonomousSystemPrefixOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalError(OAIAutonomousSystemPrefixOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryRegistryByTheNameV1AsnRegistryCodeGetSignalError() instead")
    void queryRegistryByTheNameV1AsnRegistryCodeGetSignalE(OAIAutonomousSystemRegistryOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryRegistryByTheNameV1AsnRegistryCodeGetSignalError(OAIAutonomousSystemRegistryOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryRegistryNamesV1AsnRegistryAllGetSignalError() instead")
    void queryRegistryNamesV1AsnRegistryAllGetSignalE(QList<OAIAutonomousSystemRegistryOutput> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryRegistryNamesV1AsnRegistryAllGetSignalError(QList<OAIAutonomousSystemRegistryOutput> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryStatusByTheNameV1AsnStatusCodeGetSignalError() instead")
    void queryStatusByTheNameV1AsnStatusCodeGetSignalE(OAIAutonomousSystemStatusOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryStatusByTheNameV1AsnStatusCodeGetSignalError(OAIAutonomousSystemStatusOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryStatusNamesV1AsnStatusAllGetSignalError() instead")
    void queryStatusNamesV1AsnStatusAllGetSignalE(QList<OAIAutonomousSystemStatusOutput> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryStatusNamesV1AsnStatusAllGetSignalError(QList<OAIAutonomousSystemStatusOutput> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queryAsnPrefixInformationV1AsnPrefixPostSignalErrorFull() instead")
    void queryAsnPrefixInformationV1AsnPrefixPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAsnPrefixInformationV1AsnPrefixPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryAsnPrefixesListV1AsnNumberPrefixesGetSignalErrorFull() instead")
    void queryAsnPrefixesListV1AsnNumberPrefixesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAsnPrefixesListV1AsnNumberPrefixesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryAsnV1AsnNumberGetSignalErrorFull() instead")
    void queryAsnV1AsnNumberGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAsnV1AsnNumberGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalErrorFull() instead")
    void queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryRegistryByTheNameV1AsnRegistryCodeGetSignalErrorFull() instead")
    void queryRegistryByTheNameV1AsnRegistryCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryRegistryByTheNameV1AsnRegistryCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryRegistryNamesV1AsnRegistryAllGetSignalErrorFull() instead")
    void queryRegistryNamesV1AsnRegistryAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryRegistryNamesV1AsnRegistryAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryStatusByTheNameV1AsnStatusCodeGetSignalErrorFull() instead")
    void queryStatusByTheNameV1AsnStatusCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryStatusByTheNameV1AsnStatusCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryStatusNamesV1AsnStatusAllGetSignalErrorFull() instead")
    void queryStatusNamesV1AsnStatusAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryStatusNamesV1AsnStatusAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
