/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAclListCollectionOutput.h
 *
 * 
 */

#ifndef OAIAclListCollectionOutput_H
#define OAIAclListCollectionOutput_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAclListCollectionOutput : public OAIObject {
public:
    OAIAclListCollectionOutput();
    OAIAclListCollectionOutput(QString json);
    ~OAIAclListCollectionOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAsns() const;
    void setAsns(const QList<QString> &asns);
    bool is_asns_Set() const;
    bool is_asns_Valid() const;

    QList<QString> getCidrs() const;
    void setCidrs(const QList<QString> &cidrs);
    bool is_cidrs_Set() const;
    bool is_cidrs_Valid() const;

    QList<QString> getContinents() const;
    void setContinents(const QList<QString> &continents);
    bool is_continents_Set() const;
    bool is_continents_Valid() const;

    QList<QString> getCountries() const;
    void setCountries(const QList<QString> &countries);
    bool is_countries_Set() const;
    bool is_countries_Valid() const;

    QList<QString> getDatacenters() const;
    void setDatacenters(const QList<QString> &datacenters);
    bool is_datacenters_Set() const;
    bool is_datacenters_Valid() const;

    QList<QString> getReported() const;
    void setReported(const QList<QString> &reported);
    bool is_reported_Set() const;
    bool is_reported_Valid() const;

    QString getSelf() const;
    void setSelf(const QString &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_asns;
    bool m_asns_isSet;
    bool m_asns_isValid;

    QList<QString> m_cidrs;
    bool m_cidrs_isSet;
    bool m_cidrs_isValid;

    QList<QString> m_continents;
    bool m_continents_isSet;
    bool m_continents_isValid;

    QList<QString> m_countries;
    bool m_countries_isSet;
    bool m_countries_isValid;

    QList<QString> m_datacenters;
    bool m_datacenters_isSet;
    bool m_datacenters_isValid;

    QList<QString> m_reported;
    bool m_reported_isSet;
    bool m_reported_isValid;

    QString m_self;
    bool m_self_isSet;
    bool m_self_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAclListCollectionOutput)

#endif // OAIAclListCollectionOutput_H
