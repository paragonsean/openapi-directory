/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV1__models__source__SourceOutput.h
 *
 * 
 */

#ifndef OAIV1__models__source__SourceOutput_H
#define OAIV1__models__source__SourceOutput_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIV1__models__source__SourceOutput : public OAIObject {
public:
    OAIV1__models__source__SourceOutput();
    OAIV1__models__source__SourceOutput(QString json);
    ~OAIV1__models__source__SourceOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataset() const;
    void setDataset(const QString &dataset);
    bool is_dataset_Set() const;
    bool is_dataset_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getMaximumRisk() const;
    void setMaximumRisk(const QString &maximum_risk);
    bool is_maximum_risk_Set() const;
    bool is_maximum_risk_Valid() const;

    qint32 getMaximumScore() const;
    void setMaximumScore(const qint32 &maximum_score);
    bool is_maximum_score_Set() const;
    bool is_maximum_score_Valid() const;

    QString getMinimumRisk() const;
    void setMinimumRisk(const QString &minimum_risk);
    bool is_minimum_risk_Set() const;
    bool is_minimum_risk_Valid() const;

    qint32 getMinimumScore() const;
    void setMinimumScore(const qint32 &minimum_score);
    bool is_minimum_score_Set() const;
    bool is_minimum_score_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRefresh() const;
    void setRefresh(const QString &refresh);
    bool is_refresh_Set() const;
    bool is_refresh_Valid() const;

    QString getSelf() const;
    void setSelf(const QString &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QList<QString> getSubscriptions() const;
    void setSubscriptions(const QList<QString> &subscriptions);
    bool is_subscriptions_Set() const;
    bool is_subscriptions_Valid() const;

    QList<QString> getTimeRanges() const;
    void setTimeRanges(const QList<QString> &time_ranges);
    bool is_time_ranges_Set() const;
    bool is_time_ranges_Valid() const;

    qint32 getUpdatedAt() const;
    void setUpdatedAt(const qint32 &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dataset;
    bool m_dataset_isSet;
    bool m_dataset_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_maximum_risk;
    bool m_maximum_risk_isSet;
    bool m_maximum_risk_isValid;

    qint32 m_maximum_score;
    bool m_maximum_score_isSet;
    bool m_maximum_score_isValid;

    QString m_minimum_risk;
    bool m_minimum_risk_isSet;
    bool m_minimum_risk_isValid;

    qint32 m_minimum_score;
    bool m_minimum_score_isSet;
    bool m_minimum_score_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_refresh;
    bool m_refresh_isSet;
    bool m_refresh_isValid;

    QString m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QList<QString> m_subscriptions;
    bool m_subscriptions_isSet;
    bool m_subscriptions_isValid;

    QList<QString> m_time_ranges;
    bool m_time_ranges_isSet;
    bool m_time_ranges_isValid;

    qint32 m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV1__models__source__SourceOutput)

#endif // OAIV1__models__source__SourceOutput_H
