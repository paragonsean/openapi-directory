/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOriginTokenManagementInThisRegionApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIOriginTokenManagementInThisRegionApi::OAIOriginTokenManagementInThisRegionApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIOriginTokenManagementInThisRegionApi::~OAIOriginTokenManagementInThisRegionApi() {
}

void OAIOriginTokenManagementInThisRegionApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createANewOriginTokenV1OriginTokenNewPost", defaultConf);
    _serverIndices.insert("createANewOriginTokenV1OriginTokenNewPost", 0);
    _serverConfigs.insert("deleteTokenV1OriginTokenDelete", defaultConf);
    _serverIndices.insert("deleteTokenV1OriginTokenDelete", 0);
    _serverConfigs.insert("disableOriginTokenV1OriginTokenDisablePut", defaultConf);
    _serverIndices.insert("disableOriginTokenV1OriginTokenDisablePut", 0);
    _serverConfigs.insert("enableOriginTokenV1OriginTokenEnablePut", defaultConf);
    _serverIndices.insert("enableOriginTokenV1OriginTokenEnablePut", 0);
    _serverConfigs.insert("queryAllOriginTokensInTheRegionV1OriginTokenAllGet", defaultConf);
    _serverIndices.insert("queryAllOriginTokensInTheRegionV1OriginTokenAllGet", 0);
    _serverConfigs.insert("queryOriginTokenInfoV1OriginTokenPost", defaultConf);
    _serverIndices.insert("queryOriginTokenInfoV1OriginTokenPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIOriginTokenManagementInThisRegionApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIOriginTokenManagementInThisRegionApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIOriginTokenManagementInThisRegionApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIOriginTokenManagementInThisRegionApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIOriginTokenManagementInThisRegionApi::setUsername(const QString &username) {
    _username = username;
}

void OAIOriginTokenManagementInThisRegionApi::setPassword(const QString &password) {
    _password = password;
}


void OAIOriginTokenManagementInThisRegionApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIOriginTokenManagementInThisRegionApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIOriginTokenManagementInThisRegionApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIOriginTokenManagementInThisRegionApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOriginTokenManagementInThisRegionApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOriginTokenManagementInThisRegionApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIOriginTokenManagementInThisRegionApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIOriginTokenManagementInThisRegionApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIOriginTokenManagementInThisRegionApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIOriginTokenManagementInThisRegionApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIOriginTokenManagementInThisRegionApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIOriginTokenManagementInThisRegionApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIOriginTokenManagementInThisRegionApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIOriginTokenManagementInThisRegionApi::createANewOriginTokenV1OriginTokenNewPost(const OAIOriginTokenInput &oai_origin_token_input) {
    QString fullPath = QString(_serverConfigs["createANewOriginTokenV1OriginTokenNewPost"][_serverIndices.value("createANewOriginTokenV1OriginTokenNewPost")].URL()+"/v1/origin_token/new");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_origin_token_input.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOriginTokenManagementInThisRegionApi::createANewOriginTokenV1OriginTokenNewPostCallback);
    connect(this, &OAIOriginTokenManagementInThisRegionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOriginTokenManagementInThisRegionApi::createANewOriginTokenV1OriginTokenNewPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOriginTokenOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createANewOriginTokenV1OriginTokenNewPostSignal(output);
        Q_EMIT createANewOriginTokenV1OriginTokenNewPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createANewOriginTokenV1OriginTokenNewPostSignalE(output, error_type, error_str);
        Q_EMIT createANewOriginTokenV1OriginTokenNewPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createANewOriginTokenV1OriginTokenNewPostSignalError(output, error_type, error_str);
        Q_EMIT createANewOriginTokenV1OriginTokenNewPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOriginTokenManagementInThisRegionApi::deleteTokenV1OriginTokenDelete(const OAIBody_delete_token_v1_origin_token_delete &oai_body_delete_token_v1_origin_token_delete) {
    QString fullPath = QString(_serverConfigs["deleteTokenV1OriginTokenDelete"][_serverIndices.value("deleteTokenV1OriginTokenDelete")].URL()+"/v1/origin_token");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {

        
        QByteArray output = oai_body_delete_token_v1_origin_token_delete.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOriginTokenManagementInThisRegionApi::deleteTokenV1OriginTokenDeleteCallback);
    connect(this, &OAIOriginTokenManagementInThisRegionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOriginTokenManagementInThisRegionApi::deleteTokenV1OriginTokenDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteTokenV1OriginTokenDeleteSignal(output);
        Q_EMIT deleteTokenV1OriginTokenDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteTokenV1OriginTokenDeleteSignalE(output, error_type, error_str);
        Q_EMIT deleteTokenV1OriginTokenDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteTokenV1OriginTokenDeleteSignalError(output, error_type, error_str);
        Q_EMIT deleteTokenV1OriginTokenDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOriginTokenManagementInThisRegionApi::disableOriginTokenV1OriginTokenDisablePut(const OAIBody_disable_origin_token_v1_origin_token_disable_put &oai_body_disable_origin_token_v1_origin_token_disable_put) {
    QString fullPath = QString(_serverConfigs["disableOriginTokenV1OriginTokenDisablePut"][_serverIndices.value("disableOriginTokenV1OriginTokenDisablePut")].URL()+"/v1/origin_token/disable");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_body_disable_origin_token_v1_origin_token_disable_put.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOriginTokenManagementInThisRegionApi::disableOriginTokenV1OriginTokenDisablePutCallback);
    connect(this, &OAIOriginTokenManagementInThisRegionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOriginTokenManagementInThisRegionApi::disableOriginTokenV1OriginTokenDisablePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT disableOriginTokenV1OriginTokenDisablePutSignal(output);
        Q_EMIT disableOriginTokenV1OriginTokenDisablePutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT disableOriginTokenV1OriginTokenDisablePutSignalE(output, error_type, error_str);
        Q_EMIT disableOriginTokenV1OriginTokenDisablePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT disableOriginTokenV1OriginTokenDisablePutSignalError(output, error_type, error_str);
        Q_EMIT disableOriginTokenV1OriginTokenDisablePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOriginTokenManagementInThisRegionApi::enableOriginTokenV1OriginTokenEnablePut(const OAIBody_enable_origin_token_v1_origin_token_enable_put &oai_body_enable_origin_token_v1_origin_token_enable_put) {
    QString fullPath = QString(_serverConfigs["enableOriginTokenV1OriginTokenEnablePut"][_serverIndices.value("enableOriginTokenV1OriginTokenEnablePut")].URL()+"/v1/origin_token/enable");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_body_enable_origin_token_v1_origin_token_enable_put.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOriginTokenManagementInThisRegionApi::enableOriginTokenV1OriginTokenEnablePutCallback);
    connect(this, &OAIOriginTokenManagementInThisRegionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOriginTokenManagementInThisRegionApi::enableOriginTokenV1OriginTokenEnablePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enableOriginTokenV1OriginTokenEnablePutSignal(output);
        Q_EMIT enableOriginTokenV1OriginTokenEnablePutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enableOriginTokenV1OriginTokenEnablePutSignalE(output, error_type, error_str);
        Q_EMIT enableOriginTokenV1OriginTokenEnablePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enableOriginTokenV1OriginTokenEnablePutSignalError(output, error_type, error_str);
        Q_EMIT enableOriginTokenV1OriginTokenEnablePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOriginTokenManagementInThisRegionApi::queryAllOriginTokensInTheRegionV1OriginTokenAllGet() {
    QString fullPath = QString(_serverConfigs["queryAllOriginTokensInTheRegionV1OriginTokenAllGet"][_serverIndices.value("queryAllOriginTokensInTheRegionV1OriginTokenAllGet")].URL()+"/v1/origin_token/all");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOriginTokenManagementInThisRegionApi::queryAllOriginTokensInTheRegionV1OriginTokenAllGetCallback);
    connect(this, &OAIOriginTokenManagementInThisRegionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOriginTokenManagementInThisRegionApi::queryAllOriginTokensInTheRegionV1OriginTokenAllGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOriginTokenCollectionOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryAllOriginTokensInTheRegionV1OriginTokenAllGetSignal(output);
        Q_EMIT queryAllOriginTokensInTheRegionV1OriginTokenAllGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryAllOriginTokensInTheRegionV1OriginTokenAllGetSignalE(output, error_type, error_str);
        Q_EMIT queryAllOriginTokensInTheRegionV1OriginTokenAllGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryAllOriginTokensInTheRegionV1OriginTokenAllGetSignalError(output, error_type, error_str);
        Q_EMIT queryAllOriginTokensInTheRegionV1OriginTokenAllGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOriginTokenManagementInThisRegionApi::queryOriginTokenInfoV1OriginTokenPost(const OAIBody_query_origin_token_info_v1_origin_token_post &oai_body_query_origin_token_info_v1_origin_token_post) {
    QString fullPath = QString(_serverConfigs["queryOriginTokenInfoV1OriginTokenPost"][_serverIndices.value("queryOriginTokenInfoV1OriginTokenPost")].URL()+"/v1/origin_token");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_body_query_origin_token_info_v1_origin_token_post.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOriginTokenManagementInThisRegionApi::queryOriginTokenInfoV1OriginTokenPostCallback);
    connect(this, &OAIOriginTokenManagementInThisRegionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOriginTokenManagementInThisRegionApi::queryOriginTokenInfoV1OriginTokenPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOriginTokenOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryOriginTokenInfoV1OriginTokenPostSignal(output);
        Q_EMIT queryOriginTokenInfoV1OriginTokenPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryOriginTokenInfoV1OriginTokenPostSignalE(output, error_type, error_str);
        Q_EMIT queryOriginTokenInfoV1OriginTokenPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryOriginTokenInfoV1OriginTokenPostSignalError(output, error_type, error_str);
        Q_EMIT queryOriginTokenInfoV1OriginTokenPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOriginTokenManagementInThisRegionApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
