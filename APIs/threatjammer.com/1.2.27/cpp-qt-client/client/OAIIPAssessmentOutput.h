/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIPAssessmentOutput.h
 *
 * 
 */

#ifndef OAIIPAssessmentOutput_H
#define OAIIPAssessmentOutput_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIPAssessmentOutput : public OAIObject {
public:
    OAIIPAssessmentOutput();
    OAIIPAssessmentOutput(QString json);
    ~OAIIPAssessmentOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAllowlisted() const;
    void setAllowlisted(const QString &allowlisted);
    bool is_allowlisted_Set() const;
    bool is_allowlisted_Valid() const;

    QString getAsn() const;
    void setAsn(const QString &asn);
    bool is_asn_Set() const;
    bool is_asn_Valid() const;

    QString getAsnPrefix() const;
    void setAsnPrefix(const QString &asn_prefix);
    bool is_asn_prefix_Set() const;
    bool is_asn_prefix_Valid() const;

    QString getDatacenter() const;
    void setDatacenter(const QString &datacenter);
    bool is_datacenter_Set() const;
    bool is_datacenter_Valid() const;

    QString getDatacenterPrefix() const;
    void setDatacenterPrefix(const QString &datacenter_prefix);
    bool is_datacenter_prefix_Set() const;
    bool is_datacenter_prefix_Valid() const;

    QList<QString> getDatasets() const;
    void setDatasets(const QList<QString> &datasets);
    bool is_datasets_Set() const;
    bool is_datasets_Valid() const;

    QString getDenylisted() const;
    void setDenylisted(const QString &denylisted);
    bool is_denylisted_Set() const;
    bool is_denylisted_Valid() const;

    QList<QString> getFirstAppearance() const;
    void setFirstAppearance(const QList<QString> &first_appearance);
    bool is_first_appearance_Set() const;
    bool is_first_appearance_Valid() const;

    QList<QString> getLastAppearance() const;
    void setLastAppearance(const QList<QString> &last_appearance);
    bool is_last_appearance_Set() const;
    bool is_last_appearance_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    QString getRisk() const;
    void setRisk(const QString &risk);
    bool is_risk_Set() const;
    bool is_risk_Valid() const;

    qint32 getScore() const;
    void setScore(const qint32 &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getSelf() const;
    void setSelf(const QString &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    QList<QString> getSources() const;
    void setSources(const QList<QString> &sources);
    bool is_sources_Set() const;
    bool is_sources_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_allowlisted;
    bool m_allowlisted_isSet;
    bool m_allowlisted_isValid;

    QString m_asn;
    bool m_asn_isSet;
    bool m_asn_isValid;

    QString m_asn_prefix;
    bool m_asn_prefix_isSet;
    bool m_asn_prefix_isValid;

    QString m_datacenter;
    bool m_datacenter_isSet;
    bool m_datacenter_isValid;

    QString m_datacenter_prefix;
    bool m_datacenter_prefix_isSet;
    bool m_datacenter_prefix_isValid;

    QList<QString> m_datasets;
    bool m_datasets_isSet;
    bool m_datasets_isValid;

    QString m_denylisted;
    bool m_denylisted_isSet;
    bool m_denylisted_isValid;

    QList<QString> m_first_appearance;
    bool m_first_appearance_isSet;
    bool m_first_appearance_isValid;

    QList<QString> m_last_appearance;
    bool m_last_appearance_isSet;
    bool m_last_appearance_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    QString m_risk;
    bool m_risk_isSet;
    bool m_risk_isValid;

    qint32 m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    QList<QString> m_sources;
    bool m_sources_isSet;
    bool m_sources_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIPAssessmentOutput)

#endif // OAIIPAssessmentOutput_H
