/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOriginTrafficAnalysisOutput.h
 *
 * 
 */

#ifndef OAIOriginTrafficAnalysisOutput_H
#define OAIOriginTrafficAnalysisOutput_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOriginTrafficAnalysisOutput : public OAIObject {
public:
    OAIOriginTrafficAnalysisOutput();
    OAIOriginTrafficAnalysisOutput(QString json);
    ~OAIOriginTrafficAnalysisOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAsnRisky() const;
    void setAsnRisky(const qint32 &asn_risky);
    bool is_asn_risky_Set() const;
    bool is_asn_risky_Valid() const;

    qint32 getBots() const;
    void setBots(const qint32 &bots);
    bool is_bots_Set() const;
    bool is_bots_Valid() const;

    qint32 getDatacenters() const;
    void setDatacenters(const qint32 &datacenters);
    bool is_datacenters_Set() const;
    bool is_datacenters_Valid() const;

    qint32 getDenylists() const;
    void setDenylists(const qint32 &denylists);
    bool is_denylists_Set() const;
    bool is_denylists_Valid() const;

    qint32 getNetworkCountryMismatches() const;
    void setNetworkCountryMismatches(const qint32 &network_country_mismatches);
    bool is_network_country_mismatches_Set() const;
    bool is_network_country_mismatches_Valid() const;

    qint32 getScoreHigh() const;
    void setScoreHigh(const qint32 &score_high);
    bool is_score_high_Set() const;
    bool is_score_high_Valid() const;

    qint32 getTimestamp() const;
    void setTimestamp(const qint32 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    qint32 getWebdrivers() const;
    void setWebdrivers(const qint32 &webdrivers);
    bool is_webdrivers_Set() const;
    bool is_webdrivers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_asn_risky;
    bool m_asn_risky_isSet;
    bool m_asn_risky_isValid;

    qint32 m_bots;
    bool m_bots_isSet;
    bool m_bots_isValid;

    qint32 m_datacenters;
    bool m_datacenters_isSet;
    bool m_datacenters_isValid;

    qint32 m_denylists;
    bool m_denylists_isSet;
    bool m_denylists_isValid;

    qint32 m_network_country_mismatches;
    bool m_network_country_mismatches_isSet;
    bool m_network_country_mismatches_isValid;

    qint32 m_score_high;
    bool m_score_high_isSet;
    bool m_score_high_isValid;

    qint32 m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;

    qint32 m_webdrivers;
    bool m_webdrivers_isSet;
    bool m_webdrivers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOriginTrafficAnalysisOutput)

#endif // OAIOriginTrafficAnalysisOutput_H
