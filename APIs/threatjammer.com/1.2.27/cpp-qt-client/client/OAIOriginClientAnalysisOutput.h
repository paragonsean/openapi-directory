/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOriginClientAnalysisOutput.h
 *
 * 
 */

#ifndef OAIOriginClientAnalysisOutput_H
#define OAIOriginClientAnalysisOutput_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOriginClientAnalysisOutput : public OAIObject {
public:
    OAIOriginClientAnalysisOutput();
    OAIOriginClientAnalysisOutput(QString json);
    ~OAIOriginClientAnalysisOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getClientBrowser() const;
    void setClientBrowser(const qint32 &client_browser);
    bool is_client_browser_Set() const;
    bool is_client_browser_Valid() const;

    qint32 getClientCrawler() const;
    void setClientCrawler(const qint32 &client_crawler);
    bool is_client_crawler_Set() const;
    bool is_client_crawler_Valid() const;

    qint32 getClientEmail() const;
    void setClientEmail(const qint32 &client_email);
    bool is_client_email_Set() const;
    bool is_client_email_Valid() const;

    qint32 getClientLibrary() const;
    void setClientLibrary(const qint32 &client_library);
    bool is_client_library_Set() const;
    bool is_client_library_Valid() const;

    qint32 getClientMobileBrowser() const;
    void setClientMobileBrowser(const qint32 &client_mobile_browser);
    bool is_client_mobile_browser_Set() const;
    bool is_client_mobile_browser_Valid() const;

    qint32 getClientMultimediaPlayer() const;
    void setClientMultimediaPlayer(const qint32 &client_multimedia_player);
    bool is_client_multimedia_player_Set() const;
    bool is_client_multimedia_player_Valid() const;

    qint32 getClientOfflineBrowser() const;
    void setClientOfflineBrowser(const qint32 &client_offline_browser);
    bool is_client_offline_browser_Set() const;
    bool is_client_offline_browser_Valid() const;

    qint32 getClientTotal() const;
    void setClientTotal(const qint32 &client_total);
    bool is_client_total_Set() const;
    bool is_client_total_Valid() const;

    qint32 getClientUaAnonymizer() const;
    void setClientUaAnonymizer(const qint32 &client_ua_anonymizer);
    bool is_client_ua_anonymizer_Set() const;
    bool is_client_ua_anonymizer_Valid() const;

    qint32 getClientUnrecognized() const;
    void setClientUnrecognized(const qint32 &client_unrecognized);
    bool is_client_unrecognized_Set() const;
    bool is_client_unrecognized_Valid() const;

    qint32 getClientValidator() const;
    void setClientValidator(const qint32 &client_validator);
    bool is_client_validator_Set() const;
    bool is_client_validator_Valid() const;

    qint32 getClientWapBrowser() const;
    void setClientWapBrowser(const qint32 &client_wap_browser);
    bool is_client_wap_browser_Set() const;
    bool is_client_wap_browser_Valid() const;

    qint32 getCrawlerFeedFetcher() const;
    void setCrawlerFeedFetcher(const qint32 &crawler_feed_fetcher);
    bool is_crawler_feed_fetcher_Set() const;
    bool is_crawler_feed_fetcher_Valid() const;

    qint32 getCrawlerLinkChecker() const;
    void setCrawlerLinkChecker(const qint32 &crawler_link_checker);
    bool is_crawler_link_checker_Set() const;
    bool is_crawler_link_checker_Valid() const;

    qint32 getCrawlerMarketing() const;
    void setCrawlerMarketing(const qint32 &crawler_marketing);
    bool is_crawler_marketing_Set() const;
    bool is_crawler_marketing_Valid() const;

    qint32 getCrawlerScreenshotCreator() const;
    void setCrawlerScreenshotCreator(const qint32 &crawler_screenshot_creator);
    bool is_crawler_screenshot_creator_Set() const;
    bool is_crawler_screenshot_creator_Valid() const;

    qint32 getCrawlerSearchEngineBot() const;
    void setCrawlerSearchEngineBot(const qint32 &crawler_search_engine_bot);
    bool is_crawler_search_engine_bot_Set() const;
    bool is_crawler_search_engine_bot_Valid() const;

    qint32 getCrawlerSiteMonitor() const;
    void setCrawlerSiteMonitor(const qint32 &crawler_site_monitor);
    bool is_crawler_site_monitor_Set() const;
    bool is_crawler_site_monitor_Valid() const;

    qint32 getCrawlerSpeedTester() const;
    void setCrawlerSpeedTester(const qint32 &crawler_speed_tester);
    bool is_crawler_speed_tester_Set() const;
    bool is_crawler_speed_tester_Valid() const;

    qint32 getCrawlerTool() const;
    void setCrawlerTool(const qint32 &crawler_tool);
    bool is_crawler_tool_Set() const;
    bool is_crawler_tool_Valid() const;

    qint32 getCrawlerTotal() const;
    void setCrawlerTotal(const qint32 &crawler_total);
    bool is_crawler_total_Set() const;
    bool is_crawler_total_Valid() const;

    qint32 getCrawlerUncategorised() const;
    void setCrawlerUncategorised(const qint32 &crawler_uncategorised);
    bool is_crawler_uncategorised_Set() const;
    bool is_crawler_uncategorised_Valid() const;

    qint32 getCrawlerUnrecognized() const;
    void setCrawlerUnrecognized(const qint32 &crawler_unrecognized);
    bool is_crawler_unrecognized_Set() const;
    bool is_crawler_unrecognized_Valid() const;

    qint32 getCrawlerVirusScanner() const;
    void setCrawlerVirusScanner(const qint32 &crawler_virus_scanner);
    bool is_crawler_virus_scanner_Set() const;
    bool is_crawler_virus_scanner_Valid() const;

    qint32 getCrawlerVulnerabilityScanner() const;
    void setCrawlerVulnerabilityScanner(const qint32 &crawler_vulnerability_scanner);
    bool is_crawler_vulnerability_scanner_Set() const;
    bool is_crawler_vulnerability_scanner_Valid() const;

    qint32 getCrawlerWebScraper() const;
    void setCrawlerWebScraper(const qint32 &crawler_web_scraper);
    bool is_crawler_web_scraper_Set() const;
    bool is_crawler_web_scraper_Valid() const;

    qint32 getTimestamp() const;
    void setTimestamp(const qint32 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_client_browser;
    bool m_client_browser_isSet;
    bool m_client_browser_isValid;

    qint32 m_client_crawler;
    bool m_client_crawler_isSet;
    bool m_client_crawler_isValid;

    qint32 m_client_email;
    bool m_client_email_isSet;
    bool m_client_email_isValid;

    qint32 m_client_library;
    bool m_client_library_isSet;
    bool m_client_library_isValid;

    qint32 m_client_mobile_browser;
    bool m_client_mobile_browser_isSet;
    bool m_client_mobile_browser_isValid;

    qint32 m_client_multimedia_player;
    bool m_client_multimedia_player_isSet;
    bool m_client_multimedia_player_isValid;

    qint32 m_client_offline_browser;
    bool m_client_offline_browser_isSet;
    bool m_client_offline_browser_isValid;

    qint32 m_client_total;
    bool m_client_total_isSet;
    bool m_client_total_isValid;

    qint32 m_client_ua_anonymizer;
    bool m_client_ua_anonymizer_isSet;
    bool m_client_ua_anonymizer_isValid;

    qint32 m_client_unrecognized;
    bool m_client_unrecognized_isSet;
    bool m_client_unrecognized_isValid;

    qint32 m_client_validator;
    bool m_client_validator_isSet;
    bool m_client_validator_isValid;

    qint32 m_client_wap_browser;
    bool m_client_wap_browser_isSet;
    bool m_client_wap_browser_isValid;

    qint32 m_crawler_feed_fetcher;
    bool m_crawler_feed_fetcher_isSet;
    bool m_crawler_feed_fetcher_isValid;

    qint32 m_crawler_link_checker;
    bool m_crawler_link_checker_isSet;
    bool m_crawler_link_checker_isValid;

    qint32 m_crawler_marketing;
    bool m_crawler_marketing_isSet;
    bool m_crawler_marketing_isValid;

    qint32 m_crawler_screenshot_creator;
    bool m_crawler_screenshot_creator_isSet;
    bool m_crawler_screenshot_creator_isValid;

    qint32 m_crawler_search_engine_bot;
    bool m_crawler_search_engine_bot_isSet;
    bool m_crawler_search_engine_bot_isValid;

    qint32 m_crawler_site_monitor;
    bool m_crawler_site_monitor_isSet;
    bool m_crawler_site_monitor_isValid;

    qint32 m_crawler_speed_tester;
    bool m_crawler_speed_tester_isSet;
    bool m_crawler_speed_tester_isValid;

    qint32 m_crawler_tool;
    bool m_crawler_tool_isSet;
    bool m_crawler_tool_isValid;

    qint32 m_crawler_total;
    bool m_crawler_total_isSet;
    bool m_crawler_total_isValid;

    qint32 m_crawler_uncategorised;
    bool m_crawler_uncategorised_isSet;
    bool m_crawler_uncategorised_isValid;

    qint32 m_crawler_unrecognized;
    bool m_crawler_unrecognized_isSet;
    bool m_crawler_unrecognized_isValid;

    qint32 m_crawler_virus_scanner;
    bool m_crawler_virus_scanner_isSet;
    bool m_crawler_virus_scanner_isValid;

    qint32 m_crawler_vulnerability_scanner;
    bool m_crawler_vulnerability_scanner_isSet;
    bool m_crawler_vulnerability_scanner_isValid;

    qint32 m_crawler_web_scraper;
    bool m_crawler_web_scraper_isSet;
    bool m_crawler_web_scraper_isValid;

    qint32 m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOriginClientAnalysisOutput)

#endif // OAIOriginClientAnalysisOutput_H
