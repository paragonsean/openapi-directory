/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDenylistDataQueryAndManagementApi_H
#define OAI_OAIDenylistDataQueryAndManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAclListCollectionOutput.h"
#include "OAIAddress.h"
#include "OAIBody_change_status_of_the_denylist_v1_denylist_public__denylist_id__put.h"
#include "OAIBody_change_status_of_the_origin_denylist_v1_denylist_private__denylist_id__origin_put.h"
#include "OAIBody_change_status_of_the_origin_denylist_v1_denylist_public__denylist_id__origin_put.h"
#include "OAIBody_create_private_denylist_of_the_user_v1_denylist_private_post.h"
#include "OAIBody_update_private_content_of_the_denylist_of_the_user_v1_denylist_private__denylist_id__content_put.h"
#include "OAIBody_update_private_denylist_of_the_user_v1_denylist_private__denylist_id__put.h"
#include "OAIHTTPValidationError.h"
#include "OAIIPListCollectionOutput.h"
#include "OAIIPListOutput.h"
#include "OAIPrivateAclGroupListCollectionOutput.h"
#include "OAIPrivateAclGroupListOutput.h"
#include "OAIPrivateAclListCollectionOutput.h"
#include "OAIPublicAclGroupListCollectionOutput.h"
#include "OAIPublicAclGroupListOutput.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDenylistDataQueryAndManagementApi : public QObject {
    Q_OBJECT

public:
    OAIDenylistDataQueryAndManagementApi(const int timeOut = 0);
    ~OAIDenylistDataQueryAndManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  denylist_id QString [required]
    * @param[in]  oai_body_change_status_of_the_denylist_v1_denylist_public__denylist_id__put OAIBody_change_status_of_the_denylist_v1_denylist_public__denylist_id__put [required]
    */
    virtual void changeStatusOfTheDenylistV1DenylistPublicDenylistIdPut(const QString &denylist_id, const OAIBody_change_status_of_the_denylist_v1_denylist_public__denylist_id__put &oai_body_change_status_of_the_denylist_v1_denylist_public__denylist_id__put);

    /**
    * @param[in]  denylist_id QString [required]
    * @param[in]  oai_body_change_status_of_the_origin_denylist_v1_denylist_private__denylist_id__origin_put OAIBody_change_status_of_the_origin_denylist_v1_denylist_private__denylist_id__origin_put [required]
    */
    virtual void changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPut(const QString &denylist_id, const OAIBody_change_status_of_the_origin_denylist_v1_denylist_private__denylist_id__origin_put &oai_body_change_status_of_the_origin_denylist_v1_denylist_private__denylist_id__origin_put);

    /**
    * @param[in]  denylist_id QString [required]
    * @param[in]  oai_body_change_status_of_the_origin_denylist_v1_denylist_public__denylist_id__origin_put OAIBody_change_status_of_the_origin_denylist_v1_denylist_public__denylist_id__origin_put [required]
    */
    virtual void changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPut(const QString &denylist_id, const OAIBody_change_status_of_the_origin_denylist_v1_denylist_public__denylist_id__origin_put &oai_body_change_status_of_the_origin_denylist_v1_denylist_public__denylist_id__origin_put);

    /**
    * @param[in]  oai_body_create_private_denylist_of_the_user_v1_denylist_private_post OAIBody_create_private_denylist_of_the_user_v1_denylist_private_post [required]
    */
    virtual void createPrivateDenylistOfTheUserV1DenylistPrivatePost(const OAIBody_create_private_denylist_of_the_user_v1_denylist_private_post &oai_body_create_private_denylist_of_the_user_v1_denylist_private_post);


    virtual void deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDelete();

    /**
    * @param[in]  ip_address QString [required]
    */
    virtual void deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDelete(const QString &ip_address);

    /**
    * @param[in]  denylist_id QString [required]
    */
    virtual void deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDelete(const QString &denylist_id);

    /**
    * @param[in]  denylist_id QString [required]
    */
    virtual void deleteTheDenylistV1DenylistPrivateDenylistIdDelete(const QString &denylist_id);

    /**
    * @param[in]  denylist_id QString [required]
    */
    virtual void deleteTheDenylistV1DenylistPublicDenylistIdDelete(const QString &denylist_id);

    /**
    * @param[in]  resource_type QString [required]
    */
    virtual void getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGet(const QString &resource_type);

    /**
    * @param[in]  resource_type QString [required]
    */
    virtual void getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGet(const QString &resource_type);


    virtual void getAllPrivateDenylistsV1DenylistPrivateAllGet();

    /**
    * @param[in]  resource_type QString [required]
    */
    virtual void getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGet(const QString &resource_type);


    virtual void getAllPublicDenylistsV1DenylistPublicAllGet();

    /**
    * @param[in]  denylist_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getDenylistContentV1DenylistPrivateDenylistIdContentGet(const QString &denylist_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());


    virtual void getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGet();

    /**
    * @param[in]  denylist_id QString [required]
    */
    virtual void getSingleDenylistV1DenylistPrivateDenylistIdGet(const QString &denylist_id);

    /**
    * @param[in]  denylist_id QString [required]
    */
    virtual void getSingleDenylistV1DenylistPublicDenylistIdGet(const QString &denylist_id);

    /**
    * @param[in]  dataset QString [optional]
    * @param[in]  reported_before qint32 [optional]
    * @param[in]  reported_after qint32 [optional]
    * @param[in]  expires_before qint32 [optional]
    * @param[in]  expires_after qint32 [optional]
    * @param[in]  greater_than qint32 [optional]
    * @param[in]  less_than qint32 [optional]
    * @param[in]  ip_protocol_version QString [optional]
    * @param[in]  output_format QString [optional]
    */
    virtual void queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGet(const ::OpenAPI::OptionalParam<QString> &dataset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &reported_before = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &reported_after = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &expires_before = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &expires_after = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &greater_than = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &less_than = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ip_protocol_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ip_address QString [required]
    */
    virtual void queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGet(const QString &ip_address);

    /**
    * @param[in]  address OAIAddress [required]
    */
    virtual void queryResourceDenylistsV1DenylistPrivateIpAddressGet(const OAIAddress &address);

    /**
    * @param[in]  address OAIAddress [required]
    */
    virtual void queryResourceDenylistsV1DenylistPublicIpAddressGet(const OAIAddress &address);

    /**
    * @param[in]  denylist_id QString [required]
    * @param[in]  oai_body_update_private_content_of_the_denylist_of_the_user_v1_denylist_private__denylist_id__content_put OAIBody_update_private_content_of_the_denylist_of_the_user_v1_denylist_private__denylist_id__content_put [optional]
    */
    virtual void updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPut(const QString &denylist_id, const ::OpenAPI::OptionalParam<OAIBody_update_private_content_of_the_denylist_of_the_user_v1_denylist_private__denylist_id__content_put> &oai_body_update_private_content_of_the_denylist_of_the_user_v1_denylist_private__denylist_id__content_put = ::OpenAPI::OptionalParam<OAIBody_update_private_content_of_the_denylist_of_the_user_v1_denylist_private__denylist_id__content_put>());

    /**
    * @param[in]  denylist_id QString [required]
    * @param[in]  oai_body_update_private_denylist_of_the_user_v1_denylist_private__denylist_id__put OAIBody_update_private_denylist_of_the_user_v1_denylist_private__denylist_id__put [optional]
    */
    virtual void updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPut(const QString &denylist_id, const ::OpenAPI::OptionalParam<OAIBody_update_private_denylist_of_the_user_v1_denylist_private__denylist_id__put> &oai_body_update_private_denylist_of_the_user_v1_denylist_private__denylist_id__put = ::OpenAPI::OptionalParam<OAIBody_update_private_denylist_of_the_user_v1_denylist_private__denylist_id__put>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changeStatusOfTheDenylistV1DenylistPublicDenylistIdPutCallback(OAIHttpRequestWorker *worker);
    void changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPutCallback(OAIHttpRequestWorker *worker);
    void changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPutCallback(OAIHttpRequestWorker *worker);
    void createPrivateDenylistOfTheUserV1DenylistPrivatePostCallback(OAIHttpRequestWorker *worker);
    void deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDeleteCallback(OAIHttpRequestWorker *worker);
    void deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDeleteCallback(OAIHttpRequestWorker *worker);
    void deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDeleteCallback(OAIHttpRequestWorker *worker);
    void deleteTheDenylistV1DenylistPrivateDenylistIdDeleteCallback(OAIHttpRequestWorker *worker);
    void deleteTheDenylistV1DenylistPublicDenylistIdDeleteCallback(OAIHttpRequestWorker *worker);
    void getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGetCallback(OAIHttpRequestWorker *worker);
    void getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGetCallback(OAIHttpRequestWorker *worker);
    void getAllPrivateDenylistsV1DenylistPrivateAllGetCallback(OAIHttpRequestWorker *worker);
    void getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGetCallback(OAIHttpRequestWorker *worker);
    void getAllPublicDenylistsV1DenylistPublicAllGetCallback(OAIHttpRequestWorker *worker);
    void getDenylistContentV1DenylistPrivateDenylistIdContentGetCallback(OAIHttpRequestWorker *worker);
    void getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGetCallback(OAIHttpRequestWorker *worker);
    void getSingleDenylistV1DenylistPrivateDenylistIdGetCallback(OAIHttpRequestWorker *worker);
    void getSingleDenylistV1DenylistPublicDenylistIdGetCallback(OAIHttpRequestWorker *worker);
    void queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGetCallback(OAIHttpRequestWorker *worker);
    void queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGetCallback(OAIHttpRequestWorker *worker);
    void queryResourceDenylistsV1DenylistPrivateIpAddressGetCallback(OAIHttpRequestWorker *worker);
    void queryResourceDenylistsV1DenylistPublicIpAddressGetCallback(OAIHttpRequestWorker *worker);
    void updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPutCallback(OAIHttpRequestWorker *worker);
    void updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changeStatusOfTheDenylistV1DenylistPublicDenylistIdPutSignal(QJsonValue summary);
    void changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPutSignal(QJsonValue summary);
    void changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPutSignal(QJsonValue summary);
    void createPrivateDenylistOfTheUserV1DenylistPrivatePostSignal(QString summary);
    void deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDeleteSignal(QJsonValue summary);
    void deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDeleteSignal(QJsonValue summary);
    void deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDeleteSignal(QJsonValue summary);
    void deleteTheDenylistV1DenylistPrivateDenylistIdDeleteSignal(QJsonValue summary);
    void deleteTheDenylistV1DenylistPublicDenylistIdDeleteSignal(QJsonValue summary);
    void getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGetSignal(OAIPublicAclGroupListCollectionOutput summary);
    void getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGetSignal(OAIPrivateAclGroupListCollectionOutput summary);
    void getAllPrivateDenylistsV1DenylistPrivateAllGetSignal(OAIPrivateAclGroupListCollectionOutput summary);
    void getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGetSignal(OAIPublicAclGroupListCollectionOutput summary);
    void getAllPublicDenylistsV1DenylistPublicAllGetSignal(OAIPublicAclGroupListCollectionOutput summary);
    void getDenylistContentV1DenylistPrivateDenylistIdContentGetSignal(OAIPrivateAclListCollectionOutput summary);
    void getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGetSignal(OAIPublicAclGroupListCollectionOutput summary);
    void getSingleDenylistV1DenylistPrivateDenylistIdGetSignal(OAIPrivateAclGroupListOutput summary);
    void getSingleDenylistV1DenylistPublicDenylistIdGetSignal(OAIPublicAclGroupListOutput summary);
    void queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGetSignal(OAIIPListCollectionOutput summary);
    void queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGetSignal(OAIIPListOutput summary);
    void queryResourceDenylistsV1DenylistPrivateIpAddressGetSignal(OAIAclListCollectionOutput summary);
    void queryResourceDenylistsV1DenylistPublicIpAddressGetSignal(OAIAclListCollectionOutput summary);
    void updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPutSignal(QJsonValue summary);
    void updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPutSignal(QJsonValue summary);


    void changeStatusOfTheDenylistV1DenylistPublicDenylistIdPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createPrivateDenylistOfTheUserV1DenylistPrivatePostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDeleteSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDeleteSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDeleteSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteTheDenylistV1DenylistPrivateDenylistIdDeleteSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteTheDenylistV1DenylistPublicDenylistIdDeleteSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListCollectionOutput summary);
    void getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAclGroupListCollectionOutput summary);
    void getAllPrivateDenylistsV1DenylistPrivateAllGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAclGroupListCollectionOutput summary);
    void getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListCollectionOutput summary);
    void getAllPublicDenylistsV1DenylistPublicAllGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListCollectionOutput summary);
    void getDenylistContentV1DenylistPrivateDenylistIdContentGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAclListCollectionOutput summary);
    void getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListCollectionOutput summary);
    void getSingleDenylistV1DenylistPrivateDenylistIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAclGroupListOutput summary);
    void getSingleDenylistV1DenylistPublicDenylistIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListOutput summary);
    void queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGetSignalFull(OAIHttpRequestWorker *worker, OAIIPListCollectionOutput summary);
    void queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGetSignalFull(OAIHttpRequestWorker *worker, OAIIPListOutput summary);
    void queryResourceDenylistsV1DenylistPrivateIpAddressGetSignalFull(OAIHttpRequestWorker *worker, OAIAclListCollectionOutput summary);
    void queryResourceDenylistsV1DenylistPublicIpAddressGetSignalFull(OAIHttpRequestWorker *worker, OAIAclListCollectionOutput summary);
    void updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use changeStatusOfTheDenylistV1DenylistPublicDenylistIdPutSignalError() instead")
    void changeStatusOfTheDenylistV1DenylistPublicDenylistIdPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheDenylistV1DenylistPublicDenylistIdPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPutSignalError() instead")
    void changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPutSignalError() instead")
    void changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPrivateDenylistOfTheUserV1DenylistPrivatePostSignalError() instead")
    void createPrivateDenylistOfTheUserV1DenylistPrivatePostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrivateDenylistOfTheUserV1DenylistPrivatePostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDeleteSignalError() instead")
    void deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDeleteSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDeleteSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDeleteSignalError() instead")
    void deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDeleteSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDeleteSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDeleteSignalError() instead")
    void deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDeleteSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDeleteSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheDenylistV1DenylistPrivateDenylistIdDeleteSignalError() instead")
    void deleteTheDenylistV1DenylistPrivateDenylistIdDeleteSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheDenylistV1DenylistPrivateDenylistIdDeleteSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheDenylistV1DenylistPublicDenylistIdDeleteSignalError() instead")
    void deleteTheDenylistV1DenylistPublicDenylistIdDeleteSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheDenylistV1DenylistPublicDenylistIdDeleteSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGetSignalError() instead")
    void getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGetSignalE(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGetSignalError(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGetSignalError() instead")
    void getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGetSignalE(OAIPrivateAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGetSignalError(OAIPrivateAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPrivateDenylistsV1DenylistPrivateAllGetSignalError() instead")
    void getAllPrivateDenylistsV1DenylistPrivateAllGetSignalE(OAIPrivateAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPrivateDenylistsV1DenylistPrivateAllGetSignalError(OAIPrivateAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGetSignalError() instead")
    void getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGetSignalE(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGetSignalError(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPublicDenylistsV1DenylistPublicAllGetSignalError() instead")
    void getAllPublicDenylistsV1DenylistPublicAllGetSignalE(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPublicDenylistsV1DenylistPublicAllGetSignalError(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDenylistContentV1DenylistPrivateDenylistIdContentGetSignalError() instead")
    void getDenylistContentV1DenylistPrivateDenylistIdContentGetSignalE(OAIPrivateAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDenylistContentV1DenylistPrivateDenylistIdContentGetSignalError(OAIPrivateAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGetSignalError() instead")
    void getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGetSignalE(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGetSignalError(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleDenylistV1DenylistPrivateDenylistIdGetSignalError() instead")
    void getSingleDenylistV1DenylistPrivateDenylistIdGetSignalE(OAIPrivateAclGroupListOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleDenylistV1DenylistPrivateDenylistIdGetSignalError(OAIPrivateAclGroupListOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleDenylistV1DenylistPublicDenylistIdGetSignalError() instead")
    void getSingleDenylistV1DenylistPublicDenylistIdGetSignalE(OAIPublicAclGroupListOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleDenylistV1DenylistPublicDenylistIdGetSignalError(OAIPublicAclGroupListOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGetSignalError() instead")
    void queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGetSignalE(OAIIPListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGetSignalError(OAIIPListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGetSignalError() instead")
    void queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGetSignalE(OAIIPListOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGetSignalError(OAIIPListOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryResourceDenylistsV1DenylistPrivateIpAddressGetSignalError() instead")
    void queryResourceDenylistsV1DenylistPrivateIpAddressGetSignalE(OAIAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryResourceDenylistsV1DenylistPrivateIpAddressGetSignalError(OAIAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryResourceDenylistsV1DenylistPublicIpAddressGetSignalError() instead")
    void queryResourceDenylistsV1DenylistPublicIpAddressGetSignalE(OAIAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryResourceDenylistsV1DenylistPublicIpAddressGetSignalError(OAIAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPutSignalError() instead")
    void updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPutSignalError() instead")
    void updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changeStatusOfTheDenylistV1DenylistPublicDenylistIdPutSignalErrorFull() instead")
    void changeStatusOfTheDenylistV1DenylistPublicDenylistIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheDenylistV1DenylistPublicDenylistIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPutSignalErrorFull() instead")
    void changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheOriginDenylistV1DenylistPrivateDenylistIdOriginPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPutSignalErrorFull() instead")
    void changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheOriginDenylistV1DenylistPublicDenylistIdOriginPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPrivateDenylistOfTheUserV1DenylistPrivatePostSignalErrorFull() instead")
    void createPrivateDenylistOfTheUserV1DenylistPrivatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrivateDenylistOfTheUserV1DenylistPrivatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDeleteSignalErrorFull() instead")
    void deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllIpAddressesReportedByTheUserV1DenylistReportedIpAllDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDeleteSignalErrorFull() instead")
    void deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnIpAddressReportedByTheUserV1DenylistReportedIpIpAddressDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDeleteSignalErrorFull() instead")
    void deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheDenylistContentV1DenylistPrivateDenylistIdContentDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheDenylistV1DenylistPrivateDenylistIdDeleteSignalErrorFull() instead")
    void deleteTheDenylistV1DenylistPrivateDenylistIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheDenylistV1DenylistPrivateDenylistIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheDenylistV1DenylistPublicDenylistIdDeleteSignalErrorFull() instead")
    void deleteTheDenylistV1DenylistPublicDenylistIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheDenylistV1DenylistPublicDenylistIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGetSignalErrorFull() instead")
    void getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOwnedDenylistsByResourceTypeV1DenylistPublicOwnedResourceTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGetSignalErrorFull() instead")
    void getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPrivateDenylistsByResourceTypeV1DenylistPrivateAllResourceTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPrivateDenylistsV1DenylistPrivateAllGetSignalErrorFull() instead")
    void getAllPrivateDenylistsV1DenylistPrivateAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPrivateDenylistsV1DenylistPrivateAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGetSignalErrorFull() instead")
    void getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPublicDenylistsByResourceTypeV1DenylistPublicAllResourceTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPublicDenylistsV1DenylistPublicAllGetSignalErrorFull() instead")
    void getAllPublicDenylistsV1DenylistPublicAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPublicDenylistsV1DenylistPublicAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDenylistContentV1DenylistPrivateDenylistIdContentGetSignalErrorFull() instead")
    void getDenylistContentV1DenylistPrivateDenylistIdContentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDenylistContentV1DenylistPrivateDenylistIdContentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGetSignalErrorFull() instead")
    void getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicDenylistsOwnedByTheUserV1DenylistPublicOwnedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleDenylistV1DenylistPrivateDenylistIdGetSignalErrorFull() instead")
    void getSingleDenylistV1DenylistPrivateDenylistIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleDenylistV1DenylistPrivateDenylistIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleDenylistV1DenylistPublicDenylistIdGetSignalErrorFull() instead")
    void getSingleDenylistV1DenylistPublicDenylistIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleDenylistV1DenylistPublicDenylistIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGetSignalErrorFull() instead")
    void queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAllTheIpAddressesReportedByTheUserV1DenylistReportedIpGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGetSignalErrorFull() instead")
    void queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAnIpAddressesReportedByTheUserV1DenylistReportedIpIpAddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryResourceDenylistsV1DenylistPrivateIpAddressGetSignalErrorFull() instead")
    void queryResourceDenylistsV1DenylistPrivateIpAddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryResourceDenylistsV1DenylistPrivateIpAddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryResourceDenylistsV1DenylistPublicIpAddressGetSignalErrorFull() instead")
    void queryResourceDenylistsV1DenylistPublicIpAddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryResourceDenylistsV1DenylistPublicIpAddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPutSignalErrorFull() instead")
    void updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrivateContentOfTheDenylistOfTheUserV1DenylistPrivateDenylistIdContentPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPutSignalErrorFull() instead")
    void updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrivateDenylistOfTheUserV1DenylistPrivateDenylistIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
