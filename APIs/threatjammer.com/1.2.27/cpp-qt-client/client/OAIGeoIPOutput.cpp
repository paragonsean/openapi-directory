/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoIPOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoIPOutput::OAIGeoIPOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoIPOutput::OAIGeoIPOutput() {
    this->initializeModel();
}

OAIGeoIPOutput::~OAIGeoIPOutput() {}

void OAIGeoIPOutput::initializeModel() {

    m_accuracy_radius_isSet = false;
    m_accuracy_radius_isValid = false;

    m_asn_country_iso_code_isSet = false;
    m_asn_country_iso_code_isValid = false;

    m_city_geoname_code_isSet = false;
    m_city_geoname_code_isValid = false;

    m_city_name_isSet = false;
    m_city_name_isValid = false;

    m_continent_code_isSet = false;
    m_continent_code_isValid = false;

    m_country_iso_code_isSet = false;
    m_country_iso_code_isValid = false;

    m_hostnames_isSet = false;
    m_hostnames_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_geoname_code_isSet = false;
    m_region_geoname_code_isValid = false;

    m_region_name_isSet = false;
    m_region_name_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIGeoIPOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoIPOutput::fromJsonObject(QJsonObject json) {

    m_accuracy_radius_isValid = ::OpenAPI::fromJsonValue(m_accuracy_radius, json[QString("accuracy_radius")]);
    m_accuracy_radius_isSet = !json[QString("accuracy_radius")].isNull() && m_accuracy_radius_isValid;

    m_asn_country_iso_code_isValid = ::OpenAPI::fromJsonValue(m_asn_country_iso_code, json[QString("asn_country_iso_code")]);
    m_asn_country_iso_code_isSet = !json[QString("asn_country_iso_code")].isNull() && m_asn_country_iso_code_isValid;

    m_city_geoname_code_isValid = ::OpenAPI::fromJsonValue(m_city_geoname_code, json[QString("city_geoname_code")]);
    m_city_geoname_code_isSet = !json[QString("city_geoname_code")].isNull() && m_city_geoname_code_isValid;

    m_city_name_isValid = ::OpenAPI::fromJsonValue(m_city_name, json[QString("city_name")]);
    m_city_name_isSet = !json[QString("city_name")].isNull() && m_city_name_isValid;

    m_continent_code_isValid = ::OpenAPI::fromJsonValue(m_continent_code, json[QString("continent_code")]);
    m_continent_code_isSet = !json[QString("continent_code")].isNull() && m_continent_code_isValid;

    m_country_iso_code_isValid = ::OpenAPI::fromJsonValue(m_country_iso_code, json[QString("country_iso_code")]);
    m_country_iso_code_isSet = !json[QString("country_iso_code")].isNull() && m_country_iso_code_isValid;

    m_hostnames_isValid = ::OpenAPI::fromJsonValue(m_hostnames, json[QString("hostnames")]);
    m_hostnames_isSet = !json[QString("hostnames")].isNull() && m_hostnames_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_region_geoname_code_isValid = ::OpenAPI::fromJsonValue(m_region_geoname_code, json[QString("region_geoname_code")]);
    m_region_geoname_code_isSet = !json[QString("region_geoname_code")].isNull() && m_region_geoname_code_isValid;

    m_region_name_isValid = ::OpenAPI::fromJsonValue(m_region_name, json[QString("region_name")]);
    m_region_name_isSet = !json[QString("region_name")].isNull() && m_region_name_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("time_zone")]);
    m_time_zone_isSet = !json[QString("time_zone")].isNull() && m_time_zone_isValid;
}

QString OAIGeoIPOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoIPOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_accuracy_radius_isSet) {
        obj.insert(QString("accuracy_radius"), ::OpenAPI::toJsonValue(m_accuracy_radius));
    }
    if (m_asn_country_iso_code_isSet) {
        obj.insert(QString("asn_country_iso_code"), ::OpenAPI::toJsonValue(m_asn_country_iso_code));
    }
    if (m_city_geoname_code_isSet) {
        obj.insert(QString("city_geoname_code"), ::OpenAPI::toJsonValue(m_city_geoname_code));
    }
    if (m_city_name_isSet) {
        obj.insert(QString("city_name"), ::OpenAPI::toJsonValue(m_city_name));
    }
    if (m_continent_code_isSet) {
        obj.insert(QString("continent_code"), ::OpenAPI::toJsonValue(m_continent_code));
    }
    if (m_country_iso_code_isSet) {
        obj.insert(QString("country_iso_code"), ::OpenAPI::toJsonValue(m_country_iso_code));
    }
    if (m_hostnames.size() > 0) {
        obj.insert(QString("hostnames"), ::OpenAPI::toJsonValue(m_hostnames));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_geoname_code_isSet) {
        obj.insert(QString("region_geoname_code"), ::OpenAPI::toJsonValue(m_region_geoname_code));
    }
    if (m_region_name_isSet) {
        obj.insert(QString("region_name"), ::OpenAPI::toJsonValue(m_region_name));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("time_zone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

double OAIGeoIPOutput::getAccuracyRadius() const {
    return m_accuracy_radius;
}
void OAIGeoIPOutput::setAccuracyRadius(const double &accuracy_radius) {
    m_accuracy_radius = accuracy_radius;
    m_accuracy_radius_isSet = true;
}

bool OAIGeoIPOutput::is_accuracy_radius_Set() const{
    return m_accuracy_radius_isSet;
}

bool OAIGeoIPOutput::is_accuracy_radius_Valid() const{
    return m_accuracy_radius_isValid;
}

QString OAIGeoIPOutput::getAsnCountryIsoCode() const {
    return m_asn_country_iso_code;
}
void OAIGeoIPOutput::setAsnCountryIsoCode(const QString &asn_country_iso_code) {
    m_asn_country_iso_code = asn_country_iso_code;
    m_asn_country_iso_code_isSet = true;
}

bool OAIGeoIPOutput::is_asn_country_iso_code_Set() const{
    return m_asn_country_iso_code_isSet;
}

bool OAIGeoIPOutput::is_asn_country_iso_code_Valid() const{
    return m_asn_country_iso_code_isValid;
}

qint32 OAIGeoIPOutput::getCityGeonameCode() const {
    return m_city_geoname_code;
}
void OAIGeoIPOutput::setCityGeonameCode(const qint32 &city_geoname_code) {
    m_city_geoname_code = city_geoname_code;
    m_city_geoname_code_isSet = true;
}

bool OAIGeoIPOutput::is_city_geoname_code_Set() const{
    return m_city_geoname_code_isSet;
}

bool OAIGeoIPOutput::is_city_geoname_code_Valid() const{
    return m_city_geoname_code_isValid;
}

QString OAIGeoIPOutput::getCityName() const {
    return m_city_name;
}
void OAIGeoIPOutput::setCityName(const QString &city_name) {
    m_city_name = city_name;
    m_city_name_isSet = true;
}

bool OAIGeoIPOutput::is_city_name_Set() const{
    return m_city_name_isSet;
}

bool OAIGeoIPOutput::is_city_name_Valid() const{
    return m_city_name_isValid;
}

QString OAIGeoIPOutput::getContinentCode() const {
    return m_continent_code;
}
void OAIGeoIPOutput::setContinentCode(const QString &continent_code) {
    m_continent_code = continent_code;
    m_continent_code_isSet = true;
}

bool OAIGeoIPOutput::is_continent_code_Set() const{
    return m_continent_code_isSet;
}

bool OAIGeoIPOutput::is_continent_code_Valid() const{
    return m_continent_code_isValid;
}

QString OAIGeoIPOutput::getCountryIsoCode() const {
    return m_country_iso_code;
}
void OAIGeoIPOutput::setCountryIsoCode(const QString &country_iso_code) {
    m_country_iso_code = country_iso_code;
    m_country_iso_code_isSet = true;
}

bool OAIGeoIPOutput::is_country_iso_code_Set() const{
    return m_country_iso_code_isSet;
}

bool OAIGeoIPOutput::is_country_iso_code_Valid() const{
    return m_country_iso_code_isValid;
}

QList<QString> OAIGeoIPOutput::getHostnames() const {
    return m_hostnames;
}
void OAIGeoIPOutput::setHostnames(const QList<QString> &hostnames) {
    m_hostnames = hostnames;
    m_hostnames_isSet = true;
}

bool OAIGeoIPOutput::is_hostnames_Set() const{
    return m_hostnames_isSet;
}

bool OAIGeoIPOutput::is_hostnames_Valid() const{
    return m_hostnames_isValid;
}

double OAIGeoIPOutput::getLatitude() const {
    return m_latitude;
}
void OAIGeoIPOutput::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGeoIPOutput::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGeoIPOutput::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIGeoIPOutput::getLongitude() const {
    return m_longitude;
}
void OAIGeoIPOutput::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGeoIPOutput::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGeoIPOutput::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIGeoIPOutput::getPostalCode() const {
    return m_postal_code;
}
void OAIGeoIPOutput::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIGeoIPOutput::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIGeoIPOutput::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

qint32 OAIGeoIPOutput::getRegionGeonameCode() const {
    return m_region_geoname_code;
}
void OAIGeoIPOutput::setRegionGeonameCode(const qint32 &region_geoname_code) {
    m_region_geoname_code = region_geoname_code;
    m_region_geoname_code_isSet = true;
}

bool OAIGeoIPOutput::is_region_geoname_code_Set() const{
    return m_region_geoname_code_isSet;
}

bool OAIGeoIPOutput::is_region_geoname_code_Valid() const{
    return m_region_geoname_code_isValid;
}

QString OAIGeoIPOutput::getRegionName() const {
    return m_region_name;
}
void OAIGeoIPOutput::setRegionName(const QString &region_name) {
    m_region_name = region_name;
    m_region_name_isSet = true;
}

bool OAIGeoIPOutput::is_region_name_Set() const{
    return m_region_name_isSet;
}

bool OAIGeoIPOutput::is_region_name_Valid() const{
    return m_region_name_isValid;
}

QString OAIGeoIPOutput::getSelf() const {
    return m_self;
}
void OAIGeoIPOutput::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIGeoIPOutput::is_self_Set() const{
    return m_self_isSet;
}

bool OAIGeoIPOutput::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIGeoIPOutput::getTimeZone() const {
    return m_time_zone;
}
void OAIGeoIPOutput::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIGeoIPOutput::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIGeoIPOutput::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIGeoIPOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accuracy_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asn_country_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_geoname_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostnames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_geoname_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoIPOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accuracy_radius_isValid && m_asn_country_iso_code_isValid && m_city_geoname_code_isValid && m_city_name_isValid && m_continent_code_isValid && m_country_iso_code_isValid && m_hostnames_isValid && m_latitude_isValid && m_longitude_isValid && m_postal_code_isValid && m_region_geoname_code_isValid && m_region_name_isValid && m_time_zone_isValid && true;
}

} // namespace OpenAPI
