/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAllowlistDataQueryAndManagementApi_H
#define OAI_OAIAllowlistDataQueryAndManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAclListCollectionOutput.h"
#include "OAIAddress.h"
#include "OAIBody_change_status_of_the_allowlist_v1_allowlist_public__allowlist_id__put.h"
#include "OAIBody_change_status_of_the_origin_allowlist_v1_allowlist_private__allowlist_id__origin_put.h"
#include "OAIBody_change_status_of_the_origin_allowlist_v1_allowlist_public__allowlist_id__origin_put.h"
#include "OAIBody_create_private_allowlist_of_the_user_v1_allowlist_private_post.h"
#include "OAIBody_update_private_allowlist_of_the_user_v1_allowlist_private__allowlist_id__put.h"
#include "OAIBody_update_private_content_of_the_allowlist_of_the_user_v1_allowlist_private__allowlist_id__content_put.h"
#include "OAIHTTPValidationError.h"
#include "OAIPrivateAclGroupListCollectionOutput.h"
#include "OAIPrivateAclGroupListOutput.h"
#include "OAIPrivateAclListCollectionOutput.h"
#include "OAIPublicAclGroupListCollectionOutput.h"
#include "OAIPublicAclGroupListOutput.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAllowlistDataQueryAndManagementApi : public QObject {
    Q_OBJECT

public:
    OAIAllowlistDataQueryAndManagementApi(const int timeOut = 0);
    ~OAIAllowlistDataQueryAndManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  allowlist_id QString [required]
    * @param[in]  oai_body_change_status_of_the_allowlist_v1_allowlist_public__allowlist_id__put OAIBody_change_status_of_the_allowlist_v1_allowlist_public__allowlist_id__put [required]
    */
    virtual void changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPut(const QString &allowlist_id, const OAIBody_change_status_of_the_allowlist_v1_allowlist_public__allowlist_id__put &oai_body_change_status_of_the_allowlist_v1_allowlist_public__allowlist_id__put);

    /**
    * @param[in]  allowlist_id QString [required]
    * @param[in]  oai_body_change_status_of_the_origin_allowlist_v1_allowlist_private__allowlist_id__origin_put OAIBody_change_status_of_the_origin_allowlist_v1_allowlist_private__allowlist_id__origin_put [required]
    */
    virtual void changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPut(const QString &allowlist_id, const OAIBody_change_status_of_the_origin_allowlist_v1_allowlist_private__allowlist_id__origin_put &oai_body_change_status_of_the_origin_allowlist_v1_allowlist_private__allowlist_id__origin_put);

    /**
    * @param[in]  allowlist_id QString [required]
    * @param[in]  oai_body_change_status_of_the_origin_allowlist_v1_allowlist_public__allowlist_id__origin_put OAIBody_change_status_of_the_origin_allowlist_v1_allowlist_public__allowlist_id__origin_put [required]
    */
    virtual void changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPut(const QString &allowlist_id, const OAIBody_change_status_of_the_origin_allowlist_v1_allowlist_public__allowlist_id__origin_put &oai_body_change_status_of_the_origin_allowlist_v1_allowlist_public__allowlist_id__origin_put);

    /**
    * @param[in]  oai_body_create_private_allowlist_of_the_user_v1_allowlist_private_post OAIBody_create_private_allowlist_of_the_user_v1_allowlist_private_post [required]
    */
    virtual void createPrivateAllowlistOfTheUserV1AllowlistPrivatePost(const OAIBody_create_private_allowlist_of_the_user_v1_allowlist_private_post &oai_body_create_private_allowlist_of_the_user_v1_allowlist_private_post);

    /**
    * @param[in]  allowlist_id QString [required]
    */
    virtual void deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDelete(const QString &allowlist_id);

    /**
    * @param[in]  allowlist_id QString [required]
    */
    virtual void deleteTheAllowlistV1AllowlistPrivateAllowlistIdDelete(const QString &allowlist_id);

    /**
    * @param[in]  allowlist_id QString [required]
    */
    virtual void deleteTheAllowlistV1AllowlistPublicAllowlistIdDelete(const QString &allowlist_id);

    /**
    * @param[in]  resource_type QString [required]
    */
    virtual void getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGet(const QString &resource_type);

    /**
    * @param[in]  resource_type QString [required]
    */
    virtual void getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGet(const QString &resource_type);


    virtual void getAllPrivateAllowlistsV1AllowlistPrivateAllGet();

    /**
    * @param[in]  resource_type QString [required]
    */
    virtual void getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGet(const QString &resource_type);


    virtual void getAllPublicAllowlistsV1AllowlistPublicAllGet();

    /**
    * @param[in]  allowlist_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getAllowlistContentV1AllowlistPrivateAllowlistIdContentGet(const QString &allowlist_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());


    virtual void getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGet();

    /**
    * @param[in]  allowlist_id QString [required]
    */
    virtual void getSingleAllowlistV1AllowlistPrivateAllowlistIdGet(const QString &allowlist_id);

    /**
    * @param[in]  allowlist_id QString [required]
    */
    virtual void getSingleAllowlistV1AllowlistPublicAllowlistIdGet(const QString &allowlist_id);

    /**
    * @param[in]  address OAIAddress [required]
    */
    virtual void queryResourceAllowlistsV1AllowlistPublicIpAddressGet(const OAIAddress &address);

    /**
    * @param[in]  address OAIAddress [required]
    */
    virtual void queryResourceDenylistsV1AllowlistPrivateIpAddressGet(const OAIAddress &address);

    /**
    * @param[in]  allowlist_id QString [required]
    * @param[in]  oai_body_update_private_allowlist_of_the_user_v1_allowlist_private__allowlist_id__put OAIBody_update_private_allowlist_of_the_user_v1_allowlist_private__allowlist_id__put [optional]
    */
    virtual void updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPut(const QString &allowlist_id, const ::OpenAPI::OptionalParam<OAIBody_update_private_allowlist_of_the_user_v1_allowlist_private__allowlist_id__put> &oai_body_update_private_allowlist_of_the_user_v1_allowlist_private__allowlist_id__put = ::OpenAPI::OptionalParam<OAIBody_update_private_allowlist_of_the_user_v1_allowlist_private__allowlist_id__put>());

    /**
    * @param[in]  allowlist_id QString [required]
    * @param[in]  oai_body_update_private_content_of_the_allowlist_of_the_user_v1_allowlist_private__allowlist_id__content_put OAIBody_update_private_content_of_the_allowlist_of_the_user_v1_allowlist_private__allowlist_id__content_put [optional]
    */
    virtual void updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPut(const QString &allowlist_id, const ::OpenAPI::OptionalParam<OAIBody_update_private_content_of_the_allowlist_of_the_user_v1_allowlist_private__allowlist_id__content_put> &oai_body_update_private_content_of_the_allowlist_of_the_user_v1_allowlist_private__allowlist_id__content_put = ::OpenAPI::OptionalParam<OAIBody_update_private_content_of_the_allowlist_of_the_user_v1_allowlist_private__allowlist_id__content_put>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPutCallback(OAIHttpRequestWorker *worker);
    void changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPutCallback(OAIHttpRequestWorker *worker);
    void changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPutCallback(OAIHttpRequestWorker *worker);
    void createPrivateAllowlistOfTheUserV1AllowlistPrivatePostCallback(OAIHttpRequestWorker *worker);
    void deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDeleteCallback(OAIHttpRequestWorker *worker);
    void deleteTheAllowlistV1AllowlistPrivateAllowlistIdDeleteCallback(OAIHttpRequestWorker *worker);
    void deleteTheAllowlistV1AllowlistPublicAllowlistIdDeleteCallback(OAIHttpRequestWorker *worker);
    void getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGetCallback(OAIHttpRequestWorker *worker);
    void getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGetCallback(OAIHttpRequestWorker *worker);
    void getAllPrivateAllowlistsV1AllowlistPrivateAllGetCallback(OAIHttpRequestWorker *worker);
    void getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGetCallback(OAIHttpRequestWorker *worker);
    void getAllPublicAllowlistsV1AllowlistPublicAllGetCallback(OAIHttpRequestWorker *worker);
    void getAllowlistContentV1AllowlistPrivateAllowlistIdContentGetCallback(OAIHttpRequestWorker *worker);
    void getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGetCallback(OAIHttpRequestWorker *worker);
    void getSingleAllowlistV1AllowlistPrivateAllowlistIdGetCallback(OAIHttpRequestWorker *worker);
    void getSingleAllowlistV1AllowlistPublicAllowlistIdGetCallback(OAIHttpRequestWorker *worker);
    void queryResourceAllowlistsV1AllowlistPublicIpAddressGetCallback(OAIHttpRequestWorker *worker);
    void queryResourceDenylistsV1AllowlistPrivateIpAddressGetCallback(OAIHttpRequestWorker *worker);
    void updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPutCallback(OAIHttpRequestWorker *worker);
    void updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPutSignal(QJsonValue summary);
    void changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPutSignal(QJsonValue summary);
    void changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPutSignal(QJsonValue summary);
    void createPrivateAllowlistOfTheUserV1AllowlistPrivatePostSignal(QString summary);
    void deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDeleteSignal(QJsonValue summary);
    void deleteTheAllowlistV1AllowlistPrivateAllowlistIdDeleteSignal(QJsonValue summary);
    void deleteTheAllowlistV1AllowlistPublicAllowlistIdDeleteSignal(QJsonValue summary);
    void getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGetSignal(OAIPublicAclGroupListCollectionOutput summary);
    void getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGetSignal(OAIPrivateAclGroupListCollectionOutput summary);
    void getAllPrivateAllowlistsV1AllowlistPrivateAllGetSignal(OAIPrivateAclGroupListCollectionOutput summary);
    void getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGetSignal(OAIPublicAclGroupListCollectionOutput summary);
    void getAllPublicAllowlistsV1AllowlistPublicAllGetSignal(OAIPublicAclGroupListCollectionOutput summary);
    void getAllowlistContentV1AllowlistPrivateAllowlistIdContentGetSignal(OAIPrivateAclListCollectionOutput summary);
    void getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGetSignal(OAIPublicAclGroupListCollectionOutput summary);
    void getSingleAllowlistV1AllowlistPrivateAllowlistIdGetSignal(OAIPrivateAclGroupListOutput summary);
    void getSingleAllowlistV1AllowlistPublicAllowlistIdGetSignal(OAIPublicAclGroupListOutput summary);
    void queryResourceAllowlistsV1AllowlistPublicIpAddressGetSignal(OAIAclListCollectionOutput summary);
    void queryResourceDenylistsV1AllowlistPrivateIpAddressGetSignal(OAIAclListCollectionOutput summary);
    void updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPutSignal(QJsonValue summary);
    void updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPutSignal(QJsonValue summary);


    void changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createPrivateAllowlistOfTheUserV1AllowlistPrivatePostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDeleteSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteTheAllowlistV1AllowlistPrivateAllowlistIdDeleteSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteTheAllowlistV1AllowlistPublicAllowlistIdDeleteSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListCollectionOutput summary);
    void getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAclGroupListCollectionOutput summary);
    void getAllPrivateAllowlistsV1AllowlistPrivateAllGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAclGroupListCollectionOutput summary);
    void getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListCollectionOutput summary);
    void getAllPublicAllowlistsV1AllowlistPublicAllGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListCollectionOutput summary);
    void getAllowlistContentV1AllowlistPrivateAllowlistIdContentGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAclListCollectionOutput summary);
    void getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListCollectionOutput summary);
    void getSingleAllowlistV1AllowlistPrivateAllowlistIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAclGroupListOutput summary);
    void getSingleAllowlistV1AllowlistPublicAllowlistIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicAclGroupListOutput summary);
    void queryResourceAllowlistsV1AllowlistPublicIpAddressGetSignalFull(OAIHttpRequestWorker *worker, OAIAclListCollectionOutput summary);
    void queryResourceDenylistsV1AllowlistPrivateIpAddressGetSignalFull(OAIHttpRequestWorker *worker, OAIAclListCollectionOutput summary);
    void updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPutSignalError() instead")
    void changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPutSignalError() instead")
    void changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPutSignalError() instead")
    void changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPrivateAllowlistOfTheUserV1AllowlistPrivatePostSignalError() instead")
    void createPrivateAllowlistOfTheUserV1AllowlistPrivatePostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrivateAllowlistOfTheUserV1AllowlistPrivatePostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDeleteSignalError() instead")
    void deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDeleteSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDeleteSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheAllowlistV1AllowlistPrivateAllowlistIdDeleteSignalError() instead")
    void deleteTheAllowlistV1AllowlistPrivateAllowlistIdDeleteSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheAllowlistV1AllowlistPrivateAllowlistIdDeleteSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheAllowlistV1AllowlistPublicAllowlistIdDeleteSignalError() instead")
    void deleteTheAllowlistV1AllowlistPublicAllowlistIdDeleteSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheAllowlistV1AllowlistPublicAllowlistIdDeleteSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGetSignalError() instead")
    void getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGetSignalE(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGetSignalError(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGetSignalError() instead")
    void getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGetSignalE(OAIPrivateAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGetSignalError(OAIPrivateAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPrivateAllowlistsV1AllowlistPrivateAllGetSignalError() instead")
    void getAllPrivateAllowlistsV1AllowlistPrivateAllGetSignalE(OAIPrivateAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPrivateAllowlistsV1AllowlistPrivateAllGetSignalError(OAIPrivateAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGetSignalError() instead")
    void getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGetSignalE(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGetSignalError(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPublicAllowlistsV1AllowlistPublicAllGetSignalError() instead")
    void getAllPublicAllowlistsV1AllowlistPublicAllGetSignalE(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPublicAllowlistsV1AllowlistPublicAllGetSignalError(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllowlistContentV1AllowlistPrivateAllowlistIdContentGetSignalError() instead")
    void getAllowlistContentV1AllowlistPrivateAllowlistIdContentGetSignalE(OAIPrivateAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllowlistContentV1AllowlistPrivateAllowlistIdContentGetSignalError(OAIPrivateAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGetSignalError() instead")
    void getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGetSignalE(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGetSignalError(OAIPublicAclGroupListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleAllowlistV1AllowlistPrivateAllowlistIdGetSignalError() instead")
    void getSingleAllowlistV1AllowlistPrivateAllowlistIdGetSignalE(OAIPrivateAclGroupListOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleAllowlistV1AllowlistPrivateAllowlistIdGetSignalError(OAIPrivateAclGroupListOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleAllowlistV1AllowlistPublicAllowlistIdGetSignalError() instead")
    void getSingleAllowlistV1AllowlistPublicAllowlistIdGetSignalE(OAIPublicAclGroupListOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleAllowlistV1AllowlistPublicAllowlistIdGetSignalError(OAIPublicAclGroupListOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryResourceAllowlistsV1AllowlistPublicIpAddressGetSignalError() instead")
    void queryResourceAllowlistsV1AllowlistPublicIpAddressGetSignalE(OAIAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryResourceAllowlistsV1AllowlistPublicIpAddressGetSignalError(OAIAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryResourceDenylistsV1AllowlistPrivateIpAddressGetSignalError() instead")
    void queryResourceDenylistsV1AllowlistPrivateIpAddressGetSignalE(OAIAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryResourceDenylistsV1AllowlistPrivateIpAddressGetSignalError(OAIAclListCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPutSignalError() instead")
    void updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPutSignalError() instead")
    void updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPutSignalErrorFull() instead")
    void changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheAllowlistV1AllowlistPublicAllowlistIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPutSignalErrorFull() instead")
    void changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheOriginAllowlistV1AllowlistPrivateAllowlistIdOriginPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPutSignalErrorFull() instead")
    void changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusOfTheOriginAllowlistV1AllowlistPublicAllowlistIdOriginPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPrivateAllowlistOfTheUserV1AllowlistPrivatePostSignalErrorFull() instead")
    void createPrivateAllowlistOfTheUserV1AllowlistPrivatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrivateAllowlistOfTheUserV1AllowlistPrivatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDeleteSignalErrorFull() instead")
    void deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheAllowlistContentV1AllowlistPrivateAllowlistIdContentDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheAllowlistV1AllowlistPrivateAllowlistIdDeleteSignalErrorFull() instead")
    void deleteTheAllowlistV1AllowlistPrivateAllowlistIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheAllowlistV1AllowlistPrivateAllowlistIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTheAllowlistV1AllowlistPublicAllowlistIdDeleteSignalErrorFull() instead")
    void deleteTheAllowlistV1AllowlistPublicAllowlistIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTheAllowlistV1AllowlistPublicAllowlistIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGetSignalErrorFull() instead")
    void getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOwnedAllowlistsByResourceTypeV1AllowlistPublicOwnedResourceTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGetSignalErrorFull() instead")
    void getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPrivateAllowlistsByResourceTypeV1AllowlistPrivateAllResourceTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPrivateAllowlistsV1AllowlistPrivateAllGetSignalErrorFull() instead")
    void getAllPrivateAllowlistsV1AllowlistPrivateAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPrivateAllowlistsV1AllowlistPrivateAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGetSignalErrorFull() instead")
    void getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPublicAllowlistsByResourceTypeV1AllowlistPublicAllResourceTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPublicAllowlistsV1AllowlistPublicAllGetSignalErrorFull() instead")
    void getAllPublicAllowlistsV1AllowlistPublicAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPublicAllowlistsV1AllowlistPublicAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllowlistContentV1AllowlistPrivateAllowlistIdContentGetSignalErrorFull() instead")
    void getAllowlistContentV1AllowlistPrivateAllowlistIdContentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllowlistContentV1AllowlistPrivateAllowlistIdContentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGetSignalErrorFull() instead")
    void getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicAllowlistsOwnedByTheUserV1AllowlistPublicOwnedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleAllowlistV1AllowlistPrivateAllowlistIdGetSignalErrorFull() instead")
    void getSingleAllowlistV1AllowlistPrivateAllowlistIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleAllowlistV1AllowlistPrivateAllowlistIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleAllowlistV1AllowlistPublicAllowlistIdGetSignalErrorFull() instead")
    void getSingleAllowlistV1AllowlistPublicAllowlistIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleAllowlistV1AllowlistPublicAllowlistIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryResourceAllowlistsV1AllowlistPublicIpAddressGetSignalErrorFull() instead")
    void queryResourceAllowlistsV1AllowlistPublicIpAddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryResourceAllowlistsV1AllowlistPublicIpAddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryResourceDenylistsV1AllowlistPrivateIpAddressGetSignalErrorFull() instead")
    void queryResourceDenylistsV1AllowlistPrivateIpAddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryResourceDenylistsV1AllowlistPrivateIpAddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPutSignalErrorFull() instead")
    void updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrivateAllowlistOfTheUserV1AllowlistPrivateAllowlistIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPutSignalErrorFull() instead")
    void updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePrivateContentOfTheAllowlistOfTheUserV1AllowlistPrivateAllowlistIdContentPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
