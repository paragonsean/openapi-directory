/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGeoIPOutput.h
 *
 * 
 */

#ifndef OAIGeoIPOutput_H
#define OAIGeoIPOutput_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGeoIPOutput : public OAIObject {
public:
    OAIGeoIPOutput();
    OAIGeoIPOutput(QString json);
    ~OAIGeoIPOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAccuracyRadius() const;
    void setAccuracyRadius(const double &accuracy_radius);
    bool is_accuracy_radius_Set() const;
    bool is_accuracy_radius_Valid() const;

    QString getAsnCountryIsoCode() const;
    void setAsnCountryIsoCode(const QString &asn_country_iso_code);
    bool is_asn_country_iso_code_Set() const;
    bool is_asn_country_iso_code_Valid() const;

    qint32 getCityGeonameCode() const;
    void setCityGeonameCode(const qint32 &city_geoname_code);
    bool is_city_geoname_code_Set() const;
    bool is_city_geoname_code_Valid() const;

    QString getCityName() const;
    void setCityName(const QString &city_name);
    bool is_city_name_Set() const;
    bool is_city_name_Valid() const;

    QString getContinentCode() const;
    void setContinentCode(const QString &continent_code);
    bool is_continent_code_Set() const;
    bool is_continent_code_Valid() const;

    QString getCountryIsoCode() const;
    void setCountryIsoCode(const QString &country_iso_code);
    bool is_country_iso_code_Set() const;
    bool is_country_iso_code_Valid() const;

    QList<QString> getHostnames() const;
    void setHostnames(const QList<QString> &hostnames);
    bool is_hostnames_Set() const;
    bool is_hostnames_Valid() const;

    double getLatitude() const;
    void setLatitude(const double &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    double getLongitude() const;
    void setLongitude(const double &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    QString getPostalCode() const;
    void setPostalCode(const QString &postal_code);
    bool is_postal_code_Set() const;
    bool is_postal_code_Valid() const;

    qint32 getRegionGeonameCode() const;
    void setRegionGeonameCode(const qint32 &region_geoname_code);
    bool is_region_geoname_code_Set() const;
    bool is_region_geoname_code_Valid() const;

    QString getRegionName() const;
    void setRegionName(const QString &region_name);
    bool is_region_name_Set() const;
    bool is_region_name_Valid() const;

    QString getSelf() const;
    void setSelf(const QString &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_accuracy_radius;
    bool m_accuracy_radius_isSet;
    bool m_accuracy_radius_isValid;

    QString m_asn_country_iso_code;
    bool m_asn_country_iso_code_isSet;
    bool m_asn_country_iso_code_isValid;

    qint32 m_city_geoname_code;
    bool m_city_geoname_code_isSet;
    bool m_city_geoname_code_isValid;

    QString m_city_name;
    bool m_city_name_isSet;
    bool m_city_name_isValid;

    QString m_continent_code;
    bool m_continent_code_isSet;
    bool m_continent_code_isValid;

    QString m_country_iso_code;
    bool m_country_iso_code_isSet;
    bool m_country_iso_code_isValid;

    QList<QString> m_hostnames;
    bool m_hostnames_isSet;
    bool m_hostnames_isValid;

    double m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    double m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    QString m_postal_code;
    bool m_postal_code_isSet;
    bool m_postal_code_isValid;

    qint32 m_region_geoname_code;
    bool m_region_geoname_code_isSet;
    bool m_region_geoname_code_isValid;

    QString m_region_name;
    bool m_region_name_isSet;
    bool m_region_name_isValid;

    QString m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGeoIPOutput)

#endif // OAIGeoIPOutput_H
