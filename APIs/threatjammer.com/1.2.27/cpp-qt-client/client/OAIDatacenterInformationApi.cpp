/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatacenterInformationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDatacenterInformationApi::OAIDatacenterInformationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDatacenterInformationApi::~OAIDatacenterInformationApi() {
}

void OAIDatacenterInformationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("queryDatacenterPrefixInformationV1DatacenterPrefixPost", defaultConf);
    _serverIndices.insert("queryDatacenterPrefixInformationV1DatacenterPrefixPost", 0);
    _serverConfigs.insert("queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGet", defaultConf);
    _serverIndices.insert("queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGet", 0);
    _serverConfigs.insert("queryDatacenterV1DatacenterDatacenterIdGet", defaultConf);
    _serverIndices.insert("queryDatacenterV1DatacenterDatacenterIdGet", 0);
    _serverConfigs.insert("queryIPAddressNetworkInformationV1DatacenterIpIpAddressGet", defaultConf);
    _serverIndices.insert("queryIPAddressNetworkInformationV1DatacenterIpIpAddressGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDatacenterInformationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDatacenterInformationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDatacenterInformationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDatacenterInformationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDatacenterInformationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDatacenterInformationApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDatacenterInformationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDatacenterInformationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDatacenterInformationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDatacenterInformationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDatacenterInformationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDatacenterInformationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDatacenterInformationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDatacenterInformationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDatacenterInformationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDatacenterInformationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDatacenterInformationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDatacenterInformationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDatacenterInformationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDatacenterInformationApi::queryDatacenterPrefixInformationV1DatacenterPrefixPost(const OAIBody_query_datacenter_prefix_information_v1_datacenter_prefix_post &oai_body_query_datacenter_prefix_information_v1_datacenter_prefix_post) {
    QString fullPath = QString(_serverConfigs["queryDatacenterPrefixInformationV1DatacenterPrefixPost"][_serverIndices.value("queryDatacenterPrefixInformationV1DatacenterPrefixPost")].URL()+"/v1/datacenter/prefix");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_body_query_datacenter_prefix_information_v1_datacenter_prefix_post.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDatacenterInformationApi::queryDatacenterPrefixInformationV1DatacenterPrefixPostCallback);
    connect(this, &OAIDatacenterInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDatacenterInformationApi::queryDatacenterPrefixInformationV1DatacenterPrefixPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDatacenterPrefixOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryDatacenterPrefixInformationV1DatacenterPrefixPostSignal(output);
        Q_EMIT queryDatacenterPrefixInformationV1DatacenterPrefixPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryDatacenterPrefixInformationV1DatacenterPrefixPostSignalE(output, error_type, error_str);
        Q_EMIT queryDatacenterPrefixInformationV1DatacenterPrefixPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryDatacenterPrefixInformationV1DatacenterPrefixPostSignalError(output, error_type, error_str);
        Q_EMIT queryDatacenterPrefixInformationV1DatacenterPrefixPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDatacenterInformationApi::queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGet(const QString &datacenter_id) {
    QString fullPath = QString(_serverConfigs["queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGet"][_serverIndices.value("queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGet")].URL()+"/v1/datacenter/{datacenter_id}/prefixes");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString datacenter_idPathParam("{");
        datacenter_idPathParam.append("datacenter_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "datacenter_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"datacenter_id"+pathSuffix : pathPrefix;
        fullPath.replace(datacenter_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(datacenter_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDatacenterInformationApi::queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetCallback);
    connect(this, &OAIDatacenterInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDatacenterInformationApi::queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDatacenterPrefixesOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetSignal(output);
        Q_EMIT queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetSignalE(output, error_type, error_str);
        Q_EMIT queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetSignalError(output, error_type, error_str);
        Q_EMIT queryDatacenterPrefixesListV1DatacenterDatacenterIdPrefixesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDatacenterInformationApi::queryDatacenterV1DatacenterDatacenterIdGet(const QString &datacenter_id) {
    QString fullPath = QString(_serverConfigs["queryDatacenterV1DatacenterDatacenterIdGet"][_serverIndices.value("queryDatacenterV1DatacenterDatacenterIdGet")].URL()+"/v1/datacenter/{datacenter_id}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString datacenter_idPathParam("{");
        datacenter_idPathParam.append("datacenter_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "datacenter_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"datacenter_id"+pathSuffix : pathPrefix;
        fullPath.replace(datacenter_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(datacenter_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDatacenterInformationApi::queryDatacenterV1DatacenterDatacenterIdGetCallback);
    connect(this, &OAIDatacenterInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDatacenterInformationApi::queryDatacenterV1DatacenterDatacenterIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDatacenterOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryDatacenterV1DatacenterDatacenterIdGetSignal(output);
        Q_EMIT queryDatacenterV1DatacenterDatacenterIdGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryDatacenterV1DatacenterDatacenterIdGetSignalE(output, error_type, error_str);
        Q_EMIT queryDatacenterV1DatacenterDatacenterIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryDatacenterV1DatacenterDatacenterIdGetSignalError(output, error_type, error_str);
        Q_EMIT queryDatacenterV1DatacenterDatacenterIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDatacenterInformationApi::queryIPAddressNetworkInformationV1DatacenterIpIpAddressGet(const QString &ip_address) {
    QString fullPath = QString(_serverConfigs["queryIPAddressNetworkInformationV1DatacenterIpIpAddressGet"][_serverIndices.value("queryIPAddressNetworkInformationV1DatacenterIpIpAddressGet")].URL()+"/v1/datacenter/ip/{ip_address}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString ip_addressPathParam("{");
        ip_addressPathParam.append("ip_address").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ip_address", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ip_address"+pathSuffix : pathPrefix;
        fullPath.replace(ip_addressPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ip_address)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDatacenterInformationApi::queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetCallback);
    connect(this, &OAIDatacenterInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDatacenterInformationApi::queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDatacenterPrefixOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetSignal(output);
        Q_EMIT queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetSignalE(output, error_type, error_str);
        Q_EMIT queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetSignalError(output, error_type, error_str);
        Q_EMIT queryIPAddressNetworkInformationV1DatacenterIpIpAddressGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDatacenterInformationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
