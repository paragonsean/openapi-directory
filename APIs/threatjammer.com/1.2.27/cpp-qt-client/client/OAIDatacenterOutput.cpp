/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatacenterOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatacenterOutput::OAIDatacenterOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatacenterOutput::OAIDatacenterOutput() {
    this->initializeModel();
}

OAIDatacenterOutput::~OAIDatacenterOutput() {}

void OAIDatacenterOutput::initializeModel() {

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prefixes_isSet = false;
    m_prefixes_isValid = false;

    m_risk_isSet = false;
    m_risk_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDatacenterOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatacenterOutput::fromJsonObject(QJsonObject json) {

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prefixes_isValid = ::OpenAPI::fromJsonValue(m_prefixes, json[QString("prefixes")]);
    m_prefixes_isSet = !json[QString("prefixes")].isNull() && m_prefixes_isValid;

    m_risk_isValid = ::OpenAPI::fromJsonValue(m_risk, json[QString("risk")]);
    m_risk_isSet = !json[QString("risk")].isNull() && m_risk_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDatacenterOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatacenterOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prefixes_isSet) {
        obj.insert(QString("prefixes"), ::OpenAPI::toJsonValue(m_prefixes));
    }
    if (m_risk_isSet) {
        obj.insert(QString("risk"), ::OpenAPI::toJsonValue(m_risk));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDatacenterOutput::getAsn() const {
    return m_asn;
}
void OAIDatacenterOutput::setAsn(const QString &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIDatacenterOutput::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIDatacenterOutput::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAIDatacenterOutput::getDescription() const {
    return m_description;
}
void OAIDatacenterOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDatacenterOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDatacenterOutput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDatacenterOutput::getName() const {
    return m_name;
}
void OAIDatacenterOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatacenterOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatacenterOutput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDatacenterOutput::getPrefixes() const {
    return m_prefixes;
}
void OAIDatacenterOutput::setPrefixes(const QString &prefixes) {
    m_prefixes = prefixes;
    m_prefixes_isSet = true;
}

bool OAIDatacenterOutput::is_prefixes_Set() const{
    return m_prefixes_isSet;
}

bool OAIDatacenterOutput::is_prefixes_Valid() const{
    return m_prefixes_isValid;
}

QString OAIDatacenterOutput::getRisk() const {
    return m_risk;
}
void OAIDatacenterOutput::setRisk(const QString &risk) {
    m_risk = risk;
    m_risk_isSet = true;
}

bool OAIDatacenterOutput::is_risk_Set() const{
    return m_risk_isSet;
}

bool OAIDatacenterOutput::is_risk_Valid() const{
    return m_risk_isValid;
}

qint32 OAIDatacenterOutput::getScore() const {
    return m_score;
}
void OAIDatacenterOutput::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIDatacenterOutput::is_score_Set() const{
    return m_score_isSet;
}

bool OAIDatacenterOutput::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIDatacenterOutput::getSelf() const {
    return m_self;
}
void OAIDatacenterOutput::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIDatacenterOutput::is_self_Set() const{
    return m_self_isSet;
}

bool OAIDatacenterOutput::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIDatacenterOutput::getSource() const {
    return m_source;
}
void OAIDatacenterOutput::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDatacenterOutput::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDatacenterOutput::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDatacenterOutput::getStatus() const {
    return m_status;
}
void OAIDatacenterOutput::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDatacenterOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDatacenterOutput::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDatacenterOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefixes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatacenterOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asn_isValid && m_name_isValid && m_prefixes_isValid && m_self_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
