/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOriginClientAnalysisOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOriginClientAnalysisOutput::OAIOriginClientAnalysisOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOriginClientAnalysisOutput::OAIOriginClientAnalysisOutput() {
    this->initializeModel();
}

OAIOriginClientAnalysisOutput::~OAIOriginClientAnalysisOutput() {}

void OAIOriginClientAnalysisOutput::initializeModel() {

    m_client_browser_isSet = false;
    m_client_browser_isValid = false;

    m_client_crawler_isSet = false;
    m_client_crawler_isValid = false;

    m_client_email_isSet = false;
    m_client_email_isValid = false;

    m_client_library_isSet = false;
    m_client_library_isValid = false;

    m_client_mobile_browser_isSet = false;
    m_client_mobile_browser_isValid = false;

    m_client_multimedia_player_isSet = false;
    m_client_multimedia_player_isValid = false;

    m_client_offline_browser_isSet = false;
    m_client_offline_browser_isValid = false;

    m_client_total_isSet = false;
    m_client_total_isValid = false;

    m_client_ua_anonymizer_isSet = false;
    m_client_ua_anonymizer_isValid = false;

    m_client_unrecognized_isSet = false;
    m_client_unrecognized_isValid = false;

    m_client_validator_isSet = false;
    m_client_validator_isValid = false;

    m_client_wap_browser_isSet = false;
    m_client_wap_browser_isValid = false;

    m_crawler_feed_fetcher_isSet = false;
    m_crawler_feed_fetcher_isValid = false;

    m_crawler_link_checker_isSet = false;
    m_crawler_link_checker_isValid = false;

    m_crawler_marketing_isSet = false;
    m_crawler_marketing_isValid = false;

    m_crawler_screenshot_creator_isSet = false;
    m_crawler_screenshot_creator_isValid = false;

    m_crawler_search_engine_bot_isSet = false;
    m_crawler_search_engine_bot_isValid = false;

    m_crawler_site_monitor_isSet = false;
    m_crawler_site_monitor_isValid = false;

    m_crawler_speed_tester_isSet = false;
    m_crawler_speed_tester_isValid = false;

    m_crawler_tool_isSet = false;
    m_crawler_tool_isValid = false;

    m_crawler_total_isSet = false;
    m_crawler_total_isValid = false;

    m_crawler_uncategorised_isSet = false;
    m_crawler_uncategorised_isValid = false;

    m_crawler_unrecognized_isSet = false;
    m_crawler_unrecognized_isValid = false;

    m_crawler_virus_scanner_isSet = false;
    m_crawler_virus_scanner_isValid = false;

    m_crawler_vulnerability_scanner_isSet = false;
    m_crawler_vulnerability_scanner_isValid = false;

    m_crawler_web_scraper_isSet = false;
    m_crawler_web_scraper_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIOriginClientAnalysisOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOriginClientAnalysisOutput::fromJsonObject(QJsonObject json) {

    m_client_browser_isValid = ::OpenAPI::fromJsonValue(m_client_browser, json[QString("client_browser")]);
    m_client_browser_isSet = !json[QString("client_browser")].isNull() && m_client_browser_isValid;

    m_client_crawler_isValid = ::OpenAPI::fromJsonValue(m_client_crawler, json[QString("client_crawler")]);
    m_client_crawler_isSet = !json[QString("client_crawler")].isNull() && m_client_crawler_isValid;

    m_client_email_isValid = ::OpenAPI::fromJsonValue(m_client_email, json[QString("client_email")]);
    m_client_email_isSet = !json[QString("client_email")].isNull() && m_client_email_isValid;

    m_client_library_isValid = ::OpenAPI::fromJsonValue(m_client_library, json[QString("client_library")]);
    m_client_library_isSet = !json[QString("client_library")].isNull() && m_client_library_isValid;

    m_client_mobile_browser_isValid = ::OpenAPI::fromJsonValue(m_client_mobile_browser, json[QString("client_mobile_browser")]);
    m_client_mobile_browser_isSet = !json[QString("client_mobile_browser")].isNull() && m_client_mobile_browser_isValid;

    m_client_multimedia_player_isValid = ::OpenAPI::fromJsonValue(m_client_multimedia_player, json[QString("client_multimedia_player")]);
    m_client_multimedia_player_isSet = !json[QString("client_multimedia_player")].isNull() && m_client_multimedia_player_isValid;

    m_client_offline_browser_isValid = ::OpenAPI::fromJsonValue(m_client_offline_browser, json[QString("client_offline_browser")]);
    m_client_offline_browser_isSet = !json[QString("client_offline_browser")].isNull() && m_client_offline_browser_isValid;

    m_client_total_isValid = ::OpenAPI::fromJsonValue(m_client_total, json[QString("client_total")]);
    m_client_total_isSet = !json[QString("client_total")].isNull() && m_client_total_isValid;

    m_client_ua_anonymizer_isValid = ::OpenAPI::fromJsonValue(m_client_ua_anonymizer, json[QString("client_ua_anonymizer")]);
    m_client_ua_anonymizer_isSet = !json[QString("client_ua_anonymizer")].isNull() && m_client_ua_anonymizer_isValid;

    m_client_unrecognized_isValid = ::OpenAPI::fromJsonValue(m_client_unrecognized, json[QString("client_unrecognized")]);
    m_client_unrecognized_isSet = !json[QString("client_unrecognized")].isNull() && m_client_unrecognized_isValid;

    m_client_validator_isValid = ::OpenAPI::fromJsonValue(m_client_validator, json[QString("client_validator")]);
    m_client_validator_isSet = !json[QString("client_validator")].isNull() && m_client_validator_isValid;

    m_client_wap_browser_isValid = ::OpenAPI::fromJsonValue(m_client_wap_browser, json[QString("client_wap_browser")]);
    m_client_wap_browser_isSet = !json[QString("client_wap_browser")].isNull() && m_client_wap_browser_isValid;

    m_crawler_feed_fetcher_isValid = ::OpenAPI::fromJsonValue(m_crawler_feed_fetcher, json[QString("crawler_feed_fetcher")]);
    m_crawler_feed_fetcher_isSet = !json[QString("crawler_feed_fetcher")].isNull() && m_crawler_feed_fetcher_isValid;

    m_crawler_link_checker_isValid = ::OpenAPI::fromJsonValue(m_crawler_link_checker, json[QString("crawler_link_checker")]);
    m_crawler_link_checker_isSet = !json[QString("crawler_link_checker")].isNull() && m_crawler_link_checker_isValid;

    m_crawler_marketing_isValid = ::OpenAPI::fromJsonValue(m_crawler_marketing, json[QString("crawler_marketing")]);
    m_crawler_marketing_isSet = !json[QString("crawler_marketing")].isNull() && m_crawler_marketing_isValid;

    m_crawler_screenshot_creator_isValid = ::OpenAPI::fromJsonValue(m_crawler_screenshot_creator, json[QString("crawler_screenshot_creator")]);
    m_crawler_screenshot_creator_isSet = !json[QString("crawler_screenshot_creator")].isNull() && m_crawler_screenshot_creator_isValid;

    m_crawler_search_engine_bot_isValid = ::OpenAPI::fromJsonValue(m_crawler_search_engine_bot, json[QString("crawler_search_engine_bot")]);
    m_crawler_search_engine_bot_isSet = !json[QString("crawler_search_engine_bot")].isNull() && m_crawler_search_engine_bot_isValid;

    m_crawler_site_monitor_isValid = ::OpenAPI::fromJsonValue(m_crawler_site_monitor, json[QString("crawler_site_monitor")]);
    m_crawler_site_monitor_isSet = !json[QString("crawler_site_monitor")].isNull() && m_crawler_site_monitor_isValid;

    m_crawler_speed_tester_isValid = ::OpenAPI::fromJsonValue(m_crawler_speed_tester, json[QString("crawler_speed_tester")]);
    m_crawler_speed_tester_isSet = !json[QString("crawler_speed_tester")].isNull() && m_crawler_speed_tester_isValid;

    m_crawler_tool_isValid = ::OpenAPI::fromJsonValue(m_crawler_tool, json[QString("crawler_tool")]);
    m_crawler_tool_isSet = !json[QString("crawler_tool")].isNull() && m_crawler_tool_isValid;

    m_crawler_total_isValid = ::OpenAPI::fromJsonValue(m_crawler_total, json[QString("crawler_total")]);
    m_crawler_total_isSet = !json[QString("crawler_total")].isNull() && m_crawler_total_isValid;

    m_crawler_uncategorised_isValid = ::OpenAPI::fromJsonValue(m_crawler_uncategorised, json[QString("crawler_uncategorised")]);
    m_crawler_uncategorised_isSet = !json[QString("crawler_uncategorised")].isNull() && m_crawler_uncategorised_isValid;

    m_crawler_unrecognized_isValid = ::OpenAPI::fromJsonValue(m_crawler_unrecognized, json[QString("crawler_unrecognized")]);
    m_crawler_unrecognized_isSet = !json[QString("crawler_unrecognized")].isNull() && m_crawler_unrecognized_isValid;

    m_crawler_virus_scanner_isValid = ::OpenAPI::fromJsonValue(m_crawler_virus_scanner, json[QString("crawler_virus_scanner")]);
    m_crawler_virus_scanner_isSet = !json[QString("crawler_virus_scanner")].isNull() && m_crawler_virus_scanner_isValid;

    m_crawler_vulnerability_scanner_isValid = ::OpenAPI::fromJsonValue(m_crawler_vulnerability_scanner, json[QString("crawler_vulnerability_scanner")]);
    m_crawler_vulnerability_scanner_isSet = !json[QString("crawler_vulnerability_scanner")].isNull() && m_crawler_vulnerability_scanner_isValid;

    m_crawler_web_scraper_isValid = ::OpenAPI::fromJsonValue(m_crawler_web_scraper, json[QString("crawler_web_scraper")]);
    m_crawler_web_scraper_isSet = !json[QString("crawler_web_scraper")].isNull() && m_crawler_web_scraper_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIOriginClientAnalysisOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOriginClientAnalysisOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_client_browser_isSet) {
        obj.insert(QString("client_browser"), ::OpenAPI::toJsonValue(m_client_browser));
    }
    if (m_client_crawler_isSet) {
        obj.insert(QString("client_crawler"), ::OpenAPI::toJsonValue(m_client_crawler));
    }
    if (m_client_email_isSet) {
        obj.insert(QString("client_email"), ::OpenAPI::toJsonValue(m_client_email));
    }
    if (m_client_library_isSet) {
        obj.insert(QString("client_library"), ::OpenAPI::toJsonValue(m_client_library));
    }
    if (m_client_mobile_browser_isSet) {
        obj.insert(QString("client_mobile_browser"), ::OpenAPI::toJsonValue(m_client_mobile_browser));
    }
    if (m_client_multimedia_player_isSet) {
        obj.insert(QString("client_multimedia_player"), ::OpenAPI::toJsonValue(m_client_multimedia_player));
    }
    if (m_client_offline_browser_isSet) {
        obj.insert(QString("client_offline_browser"), ::OpenAPI::toJsonValue(m_client_offline_browser));
    }
    if (m_client_total_isSet) {
        obj.insert(QString("client_total"), ::OpenAPI::toJsonValue(m_client_total));
    }
    if (m_client_ua_anonymizer_isSet) {
        obj.insert(QString("client_ua_anonymizer"), ::OpenAPI::toJsonValue(m_client_ua_anonymizer));
    }
    if (m_client_unrecognized_isSet) {
        obj.insert(QString("client_unrecognized"), ::OpenAPI::toJsonValue(m_client_unrecognized));
    }
    if (m_client_validator_isSet) {
        obj.insert(QString("client_validator"), ::OpenAPI::toJsonValue(m_client_validator));
    }
    if (m_client_wap_browser_isSet) {
        obj.insert(QString("client_wap_browser"), ::OpenAPI::toJsonValue(m_client_wap_browser));
    }
    if (m_crawler_feed_fetcher_isSet) {
        obj.insert(QString("crawler_feed_fetcher"), ::OpenAPI::toJsonValue(m_crawler_feed_fetcher));
    }
    if (m_crawler_link_checker_isSet) {
        obj.insert(QString("crawler_link_checker"), ::OpenAPI::toJsonValue(m_crawler_link_checker));
    }
    if (m_crawler_marketing_isSet) {
        obj.insert(QString("crawler_marketing"), ::OpenAPI::toJsonValue(m_crawler_marketing));
    }
    if (m_crawler_screenshot_creator_isSet) {
        obj.insert(QString("crawler_screenshot_creator"), ::OpenAPI::toJsonValue(m_crawler_screenshot_creator));
    }
    if (m_crawler_search_engine_bot_isSet) {
        obj.insert(QString("crawler_search_engine_bot"), ::OpenAPI::toJsonValue(m_crawler_search_engine_bot));
    }
    if (m_crawler_site_monitor_isSet) {
        obj.insert(QString("crawler_site_monitor"), ::OpenAPI::toJsonValue(m_crawler_site_monitor));
    }
    if (m_crawler_speed_tester_isSet) {
        obj.insert(QString("crawler_speed_tester"), ::OpenAPI::toJsonValue(m_crawler_speed_tester));
    }
    if (m_crawler_tool_isSet) {
        obj.insert(QString("crawler_tool"), ::OpenAPI::toJsonValue(m_crawler_tool));
    }
    if (m_crawler_total_isSet) {
        obj.insert(QString("crawler_total"), ::OpenAPI::toJsonValue(m_crawler_total));
    }
    if (m_crawler_uncategorised_isSet) {
        obj.insert(QString("crawler_uncategorised"), ::OpenAPI::toJsonValue(m_crawler_uncategorised));
    }
    if (m_crawler_unrecognized_isSet) {
        obj.insert(QString("crawler_unrecognized"), ::OpenAPI::toJsonValue(m_crawler_unrecognized));
    }
    if (m_crawler_virus_scanner_isSet) {
        obj.insert(QString("crawler_virus_scanner"), ::OpenAPI::toJsonValue(m_crawler_virus_scanner));
    }
    if (m_crawler_vulnerability_scanner_isSet) {
        obj.insert(QString("crawler_vulnerability_scanner"), ::OpenAPI::toJsonValue(m_crawler_vulnerability_scanner));
    }
    if (m_crawler_web_scraper_isSet) {
        obj.insert(QString("crawler_web_scraper"), ::OpenAPI::toJsonValue(m_crawler_web_scraper));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIOriginClientAnalysisOutput::getClientBrowser() const {
    return m_client_browser;
}
void OAIOriginClientAnalysisOutput::setClientBrowser(const qint32 &client_browser) {
    m_client_browser = client_browser;
    m_client_browser_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_browser_Set() const{
    return m_client_browser_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_browser_Valid() const{
    return m_client_browser_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientCrawler() const {
    return m_client_crawler;
}
void OAIOriginClientAnalysisOutput::setClientCrawler(const qint32 &client_crawler) {
    m_client_crawler = client_crawler;
    m_client_crawler_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_crawler_Set() const{
    return m_client_crawler_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_crawler_Valid() const{
    return m_client_crawler_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientEmail() const {
    return m_client_email;
}
void OAIOriginClientAnalysisOutput::setClientEmail(const qint32 &client_email) {
    m_client_email = client_email;
    m_client_email_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_email_Set() const{
    return m_client_email_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_email_Valid() const{
    return m_client_email_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientLibrary() const {
    return m_client_library;
}
void OAIOriginClientAnalysisOutput::setClientLibrary(const qint32 &client_library) {
    m_client_library = client_library;
    m_client_library_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_library_Set() const{
    return m_client_library_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_library_Valid() const{
    return m_client_library_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientMobileBrowser() const {
    return m_client_mobile_browser;
}
void OAIOriginClientAnalysisOutput::setClientMobileBrowser(const qint32 &client_mobile_browser) {
    m_client_mobile_browser = client_mobile_browser;
    m_client_mobile_browser_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_mobile_browser_Set() const{
    return m_client_mobile_browser_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_mobile_browser_Valid() const{
    return m_client_mobile_browser_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientMultimediaPlayer() const {
    return m_client_multimedia_player;
}
void OAIOriginClientAnalysisOutput::setClientMultimediaPlayer(const qint32 &client_multimedia_player) {
    m_client_multimedia_player = client_multimedia_player;
    m_client_multimedia_player_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_multimedia_player_Set() const{
    return m_client_multimedia_player_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_multimedia_player_Valid() const{
    return m_client_multimedia_player_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientOfflineBrowser() const {
    return m_client_offline_browser;
}
void OAIOriginClientAnalysisOutput::setClientOfflineBrowser(const qint32 &client_offline_browser) {
    m_client_offline_browser = client_offline_browser;
    m_client_offline_browser_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_offline_browser_Set() const{
    return m_client_offline_browser_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_offline_browser_Valid() const{
    return m_client_offline_browser_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientTotal() const {
    return m_client_total;
}
void OAIOriginClientAnalysisOutput::setClientTotal(const qint32 &client_total) {
    m_client_total = client_total;
    m_client_total_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_total_Set() const{
    return m_client_total_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_total_Valid() const{
    return m_client_total_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientUaAnonymizer() const {
    return m_client_ua_anonymizer;
}
void OAIOriginClientAnalysisOutput::setClientUaAnonymizer(const qint32 &client_ua_anonymizer) {
    m_client_ua_anonymizer = client_ua_anonymizer;
    m_client_ua_anonymizer_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_ua_anonymizer_Set() const{
    return m_client_ua_anonymizer_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_ua_anonymizer_Valid() const{
    return m_client_ua_anonymizer_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientUnrecognized() const {
    return m_client_unrecognized;
}
void OAIOriginClientAnalysisOutput::setClientUnrecognized(const qint32 &client_unrecognized) {
    m_client_unrecognized = client_unrecognized;
    m_client_unrecognized_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_unrecognized_Set() const{
    return m_client_unrecognized_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_unrecognized_Valid() const{
    return m_client_unrecognized_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientValidator() const {
    return m_client_validator;
}
void OAIOriginClientAnalysisOutput::setClientValidator(const qint32 &client_validator) {
    m_client_validator = client_validator;
    m_client_validator_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_validator_Set() const{
    return m_client_validator_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_validator_Valid() const{
    return m_client_validator_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getClientWapBrowser() const {
    return m_client_wap_browser;
}
void OAIOriginClientAnalysisOutput::setClientWapBrowser(const qint32 &client_wap_browser) {
    m_client_wap_browser = client_wap_browser;
    m_client_wap_browser_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_client_wap_browser_Set() const{
    return m_client_wap_browser_isSet;
}

bool OAIOriginClientAnalysisOutput::is_client_wap_browser_Valid() const{
    return m_client_wap_browser_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerFeedFetcher() const {
    return m_crawler_feed_fetcher;
}
void OAIOriginClientAnalysisOutput::setCrawlerFeedFetcher(const qint32 &crawler_feed_fetcher) {
    m_crawler_feed_fetcher = crawler_feed_fetcher;
    m_crawler_feed_fetcher_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_feed_fetcher_Set() const{
    return m_crawler_feed_fetcher_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_feed_fetcher_Valid() const{
    return m_crawler_feed_fetcher_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerLinkChecker() const {
    return m_crawler_link_checker;
}
void OAIOriginClientAnalysisOutput::setCrawlerLinkChecker(const qint32 &crawler_link_checker) {
    m_crawler_link_checker = crawler_link_checker;
    m_crawler_link_checker_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_link_checker_Set() const{
    return m_crawler_link_checker_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_link_checker_Valid() const{
    return m_crawler_link_checker_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerMarketing() const {
    return m_crawler_marketing;
}
void OAIOriginClientAnalysisOutput::setCrawlerMarketing(const qint32 &crawler_marketing) {
    m_crawler_marketing = crawler_marketing;
    m_crawler_marketing_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_marketing_Set() const{
    return m_crawler_marketing_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_marketing_Valid() const{
    return m_crawler_marketing_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerScreenshotCreator() const {
    return m_crawler_screenshot_creator;
}
void OAIOriginClientAnalysisOutput::setCrawlerScreenshotCreator(const qint32 &crawler_screenshot_creator) {
    m_crawler_screenshot_creator = crawler_screenshot_creator;
    m_crawler_screenshot_creator_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_screenshot_creator_Set() const{
    return m_crawler_screenshot_creator_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_screenshot_creator_Valid() const{
    return m_crawler_screenshot_creator_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerSearchEngineBot() const {
    return m_crawler_search_engine_bot;
}
void OAIOriginClientAnalysisOutput::setCrawlerSearchEngineBot(const qint32 &crawler_search_engine_bot) {
    m_crawler_search_engine_bot = crawler_search_engine_bot;
    m_crawler_search_engine_bot_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_search_engine_bot_Set() const{
    return m_crawler_search_engine_bot_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_search_engine_bot_Valid() const{
    return m_crawler_search_engine_bot_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerSiteMonitor() const {
    return m_crawler_site_monitor;
}
void OAIOriginClientAnalysisOutput::setCrawlerSiteMonitor(const qint32 &crawler_site_monitor) {
    m_crawler_site_monitor = crawler_site_monitor;
    m_crawler_site_monitor_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_site_monitor_Set() const{
    return m_crawler_site_monitor_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_site_monitor_Valid() const{
    return m_crawler_site_monitor_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerSpeedTester() const {
    return m_crawler_speed_tester;
}
void OAIOriginClientAnalysisOutput::setCrawlerSpeedTester(const qint32 &crawler_speed_tester) {
    m_crawler_speed_tester = crawler_speed_tester;
    m_crawler_speed_tester_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_speed_tester_Set() const{
    return m_crawler_speed_tester_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_speed_tester_Valid() const{
    return m_crawler_speed_tester_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerTool() const {
    return m_crawler_tool;
}
void OAIOriginClientAnalysisOutput::setCrawlerTool(const qint32 &crawler_tool) {
    m_crawler_tool = crawler_tool;
    m_crawler_tool_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_tool_Set() const{
    return m_crawler_tool_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_tool_Valid() const{
    return m_crawler_tool_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerTotal() const {
    return m_crawler_total;
}
void OAIOriginClientAnalysisOutput::setCrawlerTotal(const qint32 &crawler_total) {
    m_crawler_total = crawler_total;
    m_crawler_total_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_total_Set() const{
    return m_crawler_total_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_total_Valid() const{
    return m_crawler_total_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerUncategorised() const {
    return m_crawler_uncategorised;
}
void OAIOriginClientAnalysisOutput::setCrawlerUncategorised(const qint32 &crawler_uncategorised) {
    m_crawler_uncategorised = crawler_uncategorised;
    m_crawler_uncategorised_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_uncategorised_Set() const{
    return m_crawler_uncategorised_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_uncategorised_Valid() const{
    return m_crawler_uncategorised_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerUnrecognized() const {
    return m_crawler_unrecognized;
}
void OAIOriginClientAnalysisOutput::setCrawlerUnrecognized(const qint32 &crawler_unrecognized) {
    m_crawler_unrecognized = crawler_unrecognized;
    m_crawler_unrecognized_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_unrecognized_Set() const{
    return m_crawler_unrecognized_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_unrecognized_Valid() const{
    return m_crawler_unrecognized_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerVirusScanner() const {
    return m_crawler_virus_scanner;
}
void OAIOriginClientAnalysisOutput::setCrawlerVirusScanner(const qint32 &crawler_virus_scanner) {
    m_crawler_virus_scanner = crawler_virus_scanner;
    m_crawler_virus_scanner_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_virus_scanner_Set() const{
    return m_crawler_virus_scanner_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_virus_scanner_Valid() const{
    return m_crawler_virus_scanner_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerVulnerabilityScanner() const {
    return m_crawler_vulnerability_scanner;
}
void OAIOriginClientAnalysisOutput::setCrawlerVulnerabilityScanner(const qint32 &crawler_vulnerability_scanner) {
    m_crawler_vulnerability_scanner = crawler_vulnerability_scanner;
    m_crawler_vulnerability_scanner_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_vulnerability_scanner_Set() const{
    return m_crawler_vulnerability_scanner_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_vulnerability_scanner_Valid() const{
    return m_crawler_vulnerability_scanner_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getCrawlerWebScraper() const {
    return m_crawler_web_scraper;
}
void OAIOriginClientAnalysisOutput::setCrawlerWebScraper(const qint32 &crawler_web_scraper) {
    m_crawler_web_scraper = crawler_web_scraper;
    m_crawler_web_scraper_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_crawler_web_scraper_Set() const{
    return m_crawler_web_scraper_isSet;
}

bool OAIOriginClientAnalysisOutput::is_crawler_web_scraper_Valid() const{
    return m_crawler_web_scraper_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getTimestamp() const {
    return m_timestamp;
}
void OAIOriginClientAnalysisOutput::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIOriginClientAnalysisOutput::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAIOriginClientAnalysisOutput::getTotal() const {
    return m_total;
}
void OAIOriginClientAnalysisOutput::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIOriginClientAnalysisOutput::is_total_Set() const{
    return m_total_isSet;
}

bool OAIOriginClientAnalysisOutput::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIOriginClientAnalysisOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_browser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_crawler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_library_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_mobile_browser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_multimedia_player_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_offline_browser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ua_anonymizer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_unrecognized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_validator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_wap_browser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_feed_fetcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_link_checker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_marketing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_screenshot_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_search_engine_bot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_site_monitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_speed_tester_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_tool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_uncategorised_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_unrecognized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_virus_scanner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_vulnerability_scanner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_web_scraper_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOriginClientAnalysisOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_browser_isValid && m_client_crawler_isValid && m_client_email_isValid && m_client_library_isValid && m_client_mobile_browser_isValid && m_client_multimedia_player_isValid && m_client_offline_browser_isValid && m_client_total_isValid && m_client_ua_anonymizer_isValid && m_client_unrecognized_isValid && m_client_validator_isValid && m_client_wap_browser_isValid && m_crawler_feed_fetcher_isValid && m_crawler_link_checker_isValid && m_crawler_marketing_isValid && m_crawler_screenshot_creator_isValid && m_crawler_search_engine_bot_isValid && m_crawler_site_monitor_isValid && m_crawler_speed_tester_isValid && m_crawler_tool_isValid && m_crawler_total_isValid && m_crawler_uncategorised_isValid && m_crawler_unrecognized_isValid && m_crawler_virus_scanner_isValid && m_crawler_vulnerability_scanner_isValid && m_crawler_web_scraper_isValid && m_timestamp_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
