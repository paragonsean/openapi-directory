/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlatformDatasetsApi_H
#define OAI_OAIPlatformDatasetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatasetTypeCollectionOutput.h"
#include "OAIDatasetTypeOutput.h"
#include "OAIHTTPValidationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlatformDatasetsApi : public QObject {
    Q_OBJECT

public:
    OAIPlatformDatasetsApi(const int timeOut = 0);
    ~OAIPlatformDatasetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGet();

    /**
    * @param[in]  name QString [required]
    */
    virtual void queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGet(const QString &name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGetCallback(OAIHttpRequestWorker *worker);
    void queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGetSignal(OAIDatasetTypeCollectionOutput summary);
    void queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGetSignal(OAIDatasetTypeOutput summary);


    void queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGetSignalFull(OAIHttpRequestWorker *worker, OAIDatasetTypeCollectionOutput summary);
    void queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGetSignalFull(OAIHttpRequestWorker *worker, OAIDatasetTypeOutput summary);

    Q_DECL_DEPRECATED_X("Use queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGetSignalError() instead")
    void queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGetSignalE(OAIDatasetTypeCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGetSignalError(OAIDatasetTypeCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGetSignalError() instead")
    void queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGetSignalE(OAIDatasetTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGetSignalError(OAIDatasetTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGetSignalErrorFull() instead")
    void queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDatatasetInformationOfAllTheResourceTypesV1DatasetIpGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGetSignalErrorFull() instead")
    void queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDatatasetInformationOfTheResourceTypeV1DatasetIpNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
