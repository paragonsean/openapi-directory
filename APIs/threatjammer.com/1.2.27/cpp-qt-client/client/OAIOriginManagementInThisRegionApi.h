/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOriginManagementInThisRegionApi_H
#define OAI_OAIOriginManagementInThisRegionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBody_query_origin_status_v1_origin_status_post.h"
#include "OAIBody_update_configuration_origin_v1_origin_put.h"
#include "OAIBody_update_origin_status_v1_origin_status_put.h"
#include "OAIHTTPValidationError.h"
#include "OAIObject.h"
#include "OAIOriginAddressStatusCollectionOutput.h"
#include "OAIOriginClientAnalysisCollectionOutput.h"
#include "OAIOriginCollectionOutput.h"
#include "OAIOriginCookieIdStatusCollectionOutput.h"
#include "OAIOriginOutput.h"
#include "OAIOriginScriptsOutput.h"
#include "OAIOriginStatusDetailsCollectionOutput.h"
#include "OAIOriginStatusDetailsOutput.h"
#include "OAIOriginStatusOutput.h"
#include "OAIOriginTrafficAnalysisCollectionOutput.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOriginManagementInThisRegionApi : public QObject {
    Q_OBJECT

public:
    OAIOriginManagementInThisRegionApi(const int timeOut = 0);
    ~OAIOriginManagementInThisRegionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void queryAllOriginInformationV1OriginAllGet();

    /**
    * @param[in]  query QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void queryOriginAddressStatusInformationV1OriginAddressesGet(const QString &query, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void queryOriginCookieIdStatusInformationV1OriginCookiesGet(const QString &query, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [required]
    */
    virtual void queryOriginInformationV1OriginGet(const QString &query);

    /**
    * @param[in]  query QString [required]
    */
    virtual void queryOriginScriptsV1OriginScriptsGet(const QString &query);

    /**
    * @param[in]  status_id QString [required]
    */
    virtual void queryOriginStatusDetailV1OriginStatusDetailStatusIdGet(const QString &status_id);


    virtual void queryOriginStatusDetailsV1OriginStatusDetailsGet();

    /**
    * @param[in]  query QString [required]
    * @param[in]  oai_body_query_origin_status_v1_origin_status_post OAIBody_query_origin_status_v1_origin_status_post [optional]
    */
    virtual void queryOriginStatusV1OriginStatusPost(const QString &query, const ::OpenAPI::OptionalParam<OAIBody_query_origin_status_v1_origin_status_post> &oai_body_query_origin_status_v1_origin_status_post = ::OpenAPI::OptionalParam<OAIBody_query_origin_status_v1_origin_status_post>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  interval QString [required]
    * @param[in]  from_timestamp qint32 [required]
    * @param[in]  to_timestamp qint32 [optional]
    */
    virtual void queryOriginTrafficAnalysisV1OriginTrafficAnalysisGet(const QString &query, const QString &interval, const qint32 &from_timestamp, const ::OpenAPI::OptionalParam<qint32> &to_timestamp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  interval QString [required]
    * @param[in]  from_timestamp qint32 [required]
    * @param[in]  to_timestamp qint32 [optional]
    */
    virtual void queryOriginTrafficClientV1OriginClientAnalysisGet(const QString &query, const QString &interval, const qint32 &from_timestamp, const ::OpenAPI::OptionalParam<qint32> &to_timestamp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_body_update_configuration_origin_v1_origin_put OAIBody_update_configuration_origin_v1_origin_put [required]
    */
    virtual void updateConfigurationOriginV1OriginPut(const OAIBody_update_configuration_origin_v1_origin_put &oai_body_update_configuration_origin_v1_origin_put);

    /**
    * @param[in]  query QString [required]
    * @param[in]  oai_body_update_origin_status_v1_origin_status_put OAIBody_update_origin_status_v1_origin_status_put [optional]
    */
    virtual void updateOriginStatusV1OriginStatusPut(const QString &query, const ::OpenAPI::OptionalParam<OAIBody_update_origin_status_v1_origin_status_put> &oai_body_update_origin_status_v1_origin_status_put = ::OpenAPI::OptionalParam<OAIBody_update_origin_status_v1_origin_status_put>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queryAllOriginInformationV1OriginAllGetCallback(OAIHttpRequestWorker *worker);
    void queryOriginAddressStatusInformationV1OriginAddressesGetCallback(OAIHttpRequestWorker *worker);
    void queryOriginCookieIdStatusInformationV1OriginCookiesGetCallback(OAIHttpRequestWorker *worker);
    void queryOriginInformationV1OriginGetCallback(OAIHttpRequestWorker *worker);
    void queryOriginScriptsV1OriginScriptsGetCallback(OAIHttpRequestWorker *worker);
    void queryOriginStatusDetailV1OriginStatusDetailStatusIdGetCallback(OAIHttpRequestWorker *worker);
    void queryOriginStatusDetailsV1OriginStatusDetailsGetCallback(OAIHttpRequestWorker *worker);
    void queryOriginStatusV1OriginStatusPostCallback(OAIHttpRequestWorker *worker);
    void queryOriginTrafficAnalysisV1OriginTrafficAnalysisGetCallback(OAIHttpRequestWorker *worker);
    void queryOriginTrafficClientV1OriginClientAnalysisGetCallback(OAIHttpRequestWorker *worker);
    void updateConfigurationOriginV1OriginPutCallback(OAIHttpRequestWorker *worker);
    void updateOriginStatusV1OriginStatusPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queryAllOriginInformationV1OriginAllGetSignal(OAIOriginCollectionOutput summary);
    void queryOriginAddressStatusInformationV1OriginAddressesGetSignal(OAIOriginAddressStatusCollectionOutput summary);
    void queryOriginCookieIdStatusInformationV1OriginCookiesGetSignal(OAIOriginCookieIdStatusCollectionOutput summary);
    void queryOriginInformationV1OriginGetSignal(OAIOriginOutput summary);
    void queryOriginScriptsV1OriginScriptsGetSignal(OAIOriginScriptsOutput summary);
    void queryOriginStatusDetailV1OriginStatusDetailStatusIdGetSignal(OAIOriginStatusDetailsOutput summary);
    void queryOriginStatusDetailsV1OriginStatusDetailsGetSignal(OAIOriginStatusDetailsCollectionOutput summary);
    void queryOriginStatusV1OriginStatusPostSignal(OAIOriginStatusOutput summary);
    void queryOriginTrafficAnalysisV1OriginTrafficAnalysisGetSignal(OAIOriginTrafficAnalysisCollectionOutput summary);
    void queryOriginTrafficClientV1OriginClientAnalysisGetSignal(OAIOriginClientAnalysisCollectionOutput summary);
    void updateConfigurationOriginV1OriginPutSignal(OAIObject summary);
    void updateOriginStatusV1OriginStatusPutSignal(QJsonValue summary);


    void queryAllOriginInformationV1OriginAllGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginCollectionOutput summary);
    void queryOriginAddressStatusInformationV1OriginAddressesGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginAddressStatusCollectionOutput summary);
    void queryOriginCookieIdStatusInformationV1OriginCookiesGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginCookieIdStatusCollectionOutput summary);
    void queryOriginInformationV1OriginGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginOutput summary);
    void queryOriginScriptsV1OriginScriptsGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginScriptsOutput summary);
    void queryOriginStatusDetailV1OriginStatusDetailStatusIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginStatusDetailsOutput summary);
    void queryOriginStatusDetailsV1OriginStatusDetailsGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginStatusDetailsCollectionOutput summary);
    void queryOriginStatusV1OriginStatusPostSignalFull(OAIHttpRequestWorker *worker, OAIOriginStatusOutput summary);
    void queryOriginTrafficAnalysisV1OriginTrafficAnalysisGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginTrafficAnalysisCollectionOutput summary);
    void queryOriginTrafficClientV1OriginClientAnalysisGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginClientAnalysisCollectionOutput summary);
    void updateConfigurationOriginV1OriginPutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOriginStatusV1OriginStatusPutSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use queryAllOriginInformationV1OriginAllGetSignalError() instead")
    void queryAllOriginInformationV1OriginAllGetSignalE(OAIOriginCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAllOriginInformationV1OriginAllGetSignalError(OAIOriginCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginAddressStatusInformationV1OriginAddressesGetSignalError() instead")
    void queryOriginAddressStatusInformationV1OriginAddressesGetSignalE(OAIOriginAddressStatusCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginAddressStatusInformationV1OriginAddressesGetSignalError(OAIOriginAddressStatusCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginCookieIdStatusInformationV1OriginCookiesGetSignalError() instead")
    void queryOriginCookieIdStatusInformationV1OriginCookiesGetSignalE(OAIOriginCookieIdStatusCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginCookieIdStatusInformationV1OriginCookiesGetSignalError(OAIOriginCookieIdStatusCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginInformationV1OriginGetSignalError() instead")
    void queryOriginInformationV1OriginGetSignalE(OAIOriginOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginInformationV1OriginGetSignalError(OAIOriginOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginScriptsV1OriginScriptsGetSignalError() instead")
    void queryOriginScriptsV1OriginScriptsGetSignalE(OAIOriginScriptsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginScriptsV1OriginScriptsGetSignalError(OAIOriginScriptsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginStatusDetailV1OriginStatusDetailStatusIdGetSignalError() instead")
    void queryOriginStatusDetailV1OriginStatusDetailStatusIdGetSignalE(OAIOriginStatusDetailsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginStatusDetailV1OriginStatusDetailStatusIdGetSignalError(OAIOriginStatusDetailsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginStatusDetailsV1OriginStatusDetailsGetSignalError() instead")
    void queryOriginStatusDetailsV1OriginStatusDetailsGetSignalE(OAIOriginStatusDetailsCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginStatusDetailsV1OriginStatusDetailsGetSignalError(OAIOriginStatusDetailsCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginStatusV1OriginStatusPostSignalError() instead")
    void queryOriginStatusV1OriginStatusPostSignalE(OAIOriginStatusOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginStatusV1OriginStatusPostSignalError(OAIOriginStatusOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginTrafficAnalysisV1OriginTrafficAnalysisGetSignalError() instead")
    void queryOriginTrafficAnalysisV1OriginTrafficAnalysisGetSignalE(OAIOriginTrafficAnalysisCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginTrafficAnalysisV1OriginTrafficAnalysisGetSignalError(OAIOriginTrafficAnalysisCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginTrafficClientV1OriginClientAnalysisGetSignalError() instead")
    void queryOriginTrafficClientV1OriginClientAnalysisGetSignalE(OAIOriginClientAnalysisCollectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginTrafficClientV1OriginClientAnalysisGetSignalError(OAIOriginClientAnalysisCollectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationOriginV1OriginPutSignalError() instead")
    void updateConfigurationOriginV1OriginPutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationOriginV1OriginPutSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOriginStatusV1OriginStatusPutSignalError() instead")
    void updateOriginStatusV1OriginStatusPutSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOriginStatusV1OriginStatusPutSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queryAllOriginInformationV1OriginAllGetSignalErrorFull() instead")
    void queryAllOriginInformationV1OriginAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryAllOriginInformationV1OriginAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginAddressStatusInformationV1OriginAddressesGetSignalErrorFull() instead")
    void queryOriginAddressStatusInformationV1OriginAddressesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginAddressStatusInformationV1OriginAddressesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginCookieIdStatusInformationV1OriginCookiesGetSignalErrorFull() instead")
    void queryOriginCookieIdStatusInformationV1OriginCookiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginCookieIdStatusInformationV1OriginCookiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginInformationV1OriginGetSignalErrorFull() instead")
    void queryOriginInformationV1OriginGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginInformationV1OriginGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginScriptsV1OriginScriptsGetSignalErrorFull() instead")
    void queryOriginScriptsV1OriginScriptsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginScriptsV1OriginScriptsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginStatusDetailV1OriginStatusDetailStatusIdGetSignalErrorFull() instead")
    void queryOriginStatusDetailV1OriginStatusDetailStatusIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginStatusDetailV1OriginStatusDetailStatusIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginStatusDetailsV1OriginStatusDetailsGetSignalErrorFull() instead")
    void queryOriginStatusDetailsV1OriginStatusDetailsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginStatusDetailsV1OriginStatusDetailsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginStatusV1OriginStatusPostSignalErrorFull() instead")
    void queryOriginStatusV1OriginStatusPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginStatusV1OriginStatusPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginTrafficAnalysisV1OriginTrafficAnalysisGetSignalErrorFull() instead")
    void queryOriginTrafficAnalysisV1OriginTrafficAnalysisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginTrafficAnalysisV1OriginTrafficAnalysisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryOriginTrafficClientV1OriginClientAnalysisGetSignalErrorFull() instead")
    void queryOriginTrafficClientV1OriginClientAnalysisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryOriginTrafficClientV1OriginClientAnalysisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationOriginV1OriginPutSignalErrorFull() instead")
    void updateConfigurationOriginV1OriginPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationOriginV1OriginPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOriginStatusV1OriginStatusPutSignalErrorFull() instead")
    void updateOriginStatusV1OriginStatusPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOriginStatusV1OriginStatusPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
