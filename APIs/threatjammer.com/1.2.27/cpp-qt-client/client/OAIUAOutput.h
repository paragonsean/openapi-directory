/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUAOutput.h
 *
 * 
 */

#ifndef OAIUAOutput_H
#define OAIUAOutput_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUAOutput : public OAIObject {
public:
    OAIUAOutput();
    OAIUAOutput(QString json);
    ~OAIUAOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAgent() const;
    void setAgent(const QString &agent);
    bool is_agent_Set() const;
    bool is_agent_Valid() const;

    QString getClassification() const;
    void setClassification(const QString &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    QString getDevice() const;
    void setDevice(const QString &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getFamily() const;
    void setFamily(const QString &family);
    bool is_family_Set() const;
    bool is_family_Valid() const;

    QString getFrequent() const;
    void setFrequent(const QString &frequent);
    bool is_frequent_Set() const;
    bool is_frequent_Valid() const;

    QString getLatest() const;
    void setLatest(const QString &latest);
    bool is_latest_Set() const;
    bool is_latest_Valid() const;

    QString getOs() const;
    void setOs(const QString &os);
    bool is_os_Set() const;
    bool is_os_Valid() const;

    QString getSelf() const;
    void setSelf(const QString &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    QString getString() const;
    void setString(const QString &string);
    bool is_string_Set() const;
    bool is_string_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVendor() const;
    void setVendor(const QString &vendor);
    bool is_vendor_Set() const;
    bool is_vendor_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_agent;
    bool m_agent_isSet;
    bool m_agent_isValid;

    QString m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    QString m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_family;
    bool m_family_isSet;
    bool m_family_isValid;

    QString m_frequent;
    bool m_frequent_isSet;
    bool m_frequent_isValid;

    QString m_latest;
    bool m_latest_isSet;
    bool m_latest_isValid;

    QString m_os;
    bool m_os_isSet;
    bool m_os_isValid;

    QString m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    QString m_string;
    bool m_string_isSet;
    bool m_string_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_vendor;
    bool m_vendor_isSet;
    bool m_vendor_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUAOutput)

#endif // OAIUAOutput_H
