/**
 * ThreatJammer.com User API
 *  The public API open to the users. [Read the docs and learn more.](https://threatjammer.com/docs).  ## General information  ### Description Threat Jammer supports two end-user REST APIs: the User API and the Report API. The end-user uses the User API to interact with the different databases, heuristics, and machine learning processes. Devices use the Report API to interact with Threat Jammer. This document will explain how to use the User API and interact with the different services, create a token, interpret the quota information, and create the HTTP request to interact with the User API.  ### Authentication The API is protected by a **Bearer authentication** schema. **Bearer authentication** (also called **token authentication**) is an HTTP authentication scheme that involves security tokens called bearer tokens. It is used to authenticate the user. All the different endpoints expect a `Bearer` token in the `Authorization` header.  Example:  ``` curl -X 'GET'   'https://dublin.api.threatjammer.com/test'   -H 'accept: application/json'   -H 'Authorization: Bearer YOUR_API_KEY' ```  You can obtain a token after registering on the [ThreatJammer.com](https://threatjammer.com) website for free.   ### Region specific tokens All the `Bearer` tokens contain information about the authorized region. The developers have to use a token created for the region they want to use. A token used in a different region will return a `401 Unauthorized` error.  ### Global errors  The API will return the following permanent errors: - a `401 Unauthorized` error if the token is not valid, or does not belong to the region. - a `401 Unauthorized` error if the token does not exist. - a `401 Unauthorized` error if the token is malformed. - a `403 Forbidden` error if the subscription level is not enough. Some endpoints are only available for paid subscription levels.  And these temporary errors: - a `429 Too Many Requests` error if the quota is exceeded (see below).  ### Quota limits  **Every request to the User API will consume one (1) quota point.**  The API has two rate limiting processes: - a quota limit of **5000** requests per month for the `FREE` account. The limit is reset every month. - a quota limit of **10** requests per minute for the `FREE` account. The limit is reset every minute and implements a sliding window mechanism.  
 *
 * The version of the OpenAPI document: 1.2.27
 * Contact: support@threatjammer.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutonomousSystemsInformationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAutonomousSystemsInformationApi::OAIAutonomousSystemsInformationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAutonomousSystemsInformationApi::~OAIAutonomousSystemsInformationApi() {
}

void OAIAutonomousSystemsInformationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("queryAsnPrefixInformationV1AsnPrefixPost", defaultConf);
    _serverIndices.insert("queryAsnPrefixInformationV1AsnPrefixPost", 0);
    _serverConfigs.insert("queryAsnPrefixesListV1AsnNumberPrefixesGet", defaultConf);
    _serverIndices.insert("queryAsnPrefixesListV1AsnNumberPrefixesGet", 0);
    _serverConfigs.insert("queryAsnV1AsnNumberGet", defaultConf);
    _serverIndices.insert("queryAsnV1AsnNumberGet", 0);
    _serverConfigs.insert("queryIPAddressNetworkInformationV1AsnIpIpAddressGet", defaultConf);
    _serverIndices.insert("queryIPAddressNetworkInformationV1AsnIpIpAddressGet", 0);
    _serverConfigs.insert("queryRegistryByTheNameV1AsnRegistryCodeGet", defaultConf);
    _serverIndices.insert("queryRegistryByTheNameV1AsnRegistryCodeGet", 0);
    _serverConfigs.insert("queryRegistryNamesV1AsnRegistryAllGet", defaultConf);
    _serverIndices.insert("queryRegistryNamesV1AsnRegistryAllGet", 0);
    _serverConfigs.insert("queryStatusByTheNameV1AsnStatusCodeGet", defaultConf);
    _serverIndices.insert("queryStatusByTheNameV1AsnStatusCodeGet", 0);
    _serverConfigs.insert("queryStatusNamesV1AsnStatusAllGet", defaultConf);
    _serverIndices.insert("queryStatusNamesV1AsnStatusAllGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAutonomousSystemsInformationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAutonomousSystemsInformationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAutonomousSystemsInformationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAutonomousSystemsInformationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAutonomousSystemsInformationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAutonomousSystemsInformationApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAutonomousSystemsInformationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAutonomousSystemsInformationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAutonomousSystemsInformationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAutonomousSystemsInformationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAutonomousSystemsInformationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAutonomousSystemsInformationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAutonomousSystemsInformationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAutonomousSystemsInformationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAutonomousSystemsInformationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAutonomousSystemsInformationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAutonomousSystemsInformationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAutonomousSystemsInformationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAutonomousSystemsInformationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAutonomousSystemsInformationApi::queryAsnPrefixInformationV1AsnPrefixPost(const OAIBody_query_asn_prefix_information_v1_asn_prefix_post &oai_body_query_asn_prefix_information_v1_asn_prefix_post) {
    QString fullPath = QString(_serverConfigs["queryAsnPrefixInformationV1AsnPrefixPost"][_serverIndices.value("queryAsnPrefixInformationV1AsnPrefixPost")].URL()+"/v1/asn/prefix");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_body_query_asn_prefix_information_v1_asn_prefix_post.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutonomousSystemsInformationApi::queryAsnPrefixInformationV1AsnPrefixPostCallback);
    connect(this, &OAIAutonomousSystemsInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutonomousSystemsInformationApi::queryAsnPrefixInformationV1AsnPrefixPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAutonomousSystemPrefixOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryAsnPrefixInformationV1AsnPrefixPostSignal(output);
        Q_EMIT queryAsnPrefixInformationV1AsnPrefixPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryAsnPrefixInformationV1AsnPrefixPostSignalE(output, error_type, error_str);
        Q_EMIT queryAsnPrefixInformationV1AsnPrefixPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryAsnPrefixInformationV1AsnPrefixPostSignalError(output, error_type, error_str);
        Q_EMIT queryAsnPrefixInformationV1AsnPrefixPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutonomousSystemsInformationApi::queryAsnPrefixesListV1AsnNumberPrefixesGet(const qint32 &number) {
    QString fullPath = QString(_serverConfigs["queryAsnPrefixesListV1AsnNumberPrefixesGet"][_serverIndices.value("queryAsnPrefixesListV1AsnNumberPrefixesGet")].URL()+"/v1/asn/{number}/prefixes");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString numberPathParam("{");
        numberPathParam.append("number").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "number", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"number"+pathSuffix : pathPrefix;
        fullPath.replace(numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutonomousSystemsInformationApi::queryAsnPrefixesListV1AsnNumberPrefixesGetCallback);
    connect(this, &OAIAutonomousSystemsInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutonomousSystemsInformationApi::queryAsnPrefixesListV1AsnNumberPrefixesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAutonomousSystemPrefixesOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryAsnPrefixesListV1AsnNumberPrefixesGetSignal(output);
        Q_EMIT queryAsnPrefixesListV1AsnNumberPrefixesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryAsnPrefixesListV1AsnNumberPrefixesGetSignalE(output, error_type, error_str);
        Q_EMIT queryAsnPrefixesListV1AsnNumberPrefixesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryAsnPrefixesListV1AsnNumberPrefixesGetSignalError(output, error_type, error_str);
        Q_EMIT queryAsnPrefixesListV1AsnNumberPrefixesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutonomousSystemsInformationApi::queryAsnV1AsnNumberGet(const qint32 &number) {
    QString fullPath = QString(_serverConfigs["queryAsnV1AsnNumberGet"][_serverIndices.value("queryAsnV1AsnNumberGet")].URL()+"/v1/asn/{number}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString numberPathParam("{");
        numberPathParam.append("number").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "number", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"number"+pathSuffix : pathPrefix;
        fullPath.replace(numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutonomousSystemsInformationApi::queryAsnV1AsnNumberGetCallback);
    connect(this, &OAIAutonomousSystemsInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutonomousSystemsInformationApi::queryAsnV1AsnNumberGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAutonomousSystemOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryAsnV1AsnNumberGetSignal(output);
        Q_EMIT queryAsnV1AsnNumberGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryAsnV1AsnNumberGetSignalE(output, error_type, error_str);
        Q_EMIT queryAsnV1AsnNumberGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryAsnV1AsnNumberGetSignalError(output, error_type, error_str);
        Q_EMIT queryAsnV1AsnNumberGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutonomousSystemsInformationApi::queryIPAddressNetworkInformationV1AsnIpIpAddressGet(const QString &ip_address) {
    QString fullPath = QString(_serverConfigs["queryIPAddressNetworkInformationV1AsnIpIpAddressGet"][_serverIndices.value("queryIPAddressNetworkInformationV1AsnIpIpAddressGet")].URL()+"/v1/asn/ip/{ip_address}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString ip_addressPathParam("{");
        ip_addressPathParam.append("ip_address").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ip_address", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ip_address"+pathSuffix : pathPrefix;
        fullPath.replace(ip_addressPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ip_address)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutonomousSystemsInformationApi::queryIPAddressNetworkInformationV1AsnIpIpAddressGetCallback);
    connect(this, &OAIAutonomousSystemsInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutonomousSystemsInformationApi::queryIPAddressNetworkInformationV1AsnIpIpAddressGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAutonomousSystemPrefixOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignal(output);
        Q_EMIT queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalE(output, error_type, error_str);
        Q_EMIT queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalError(output, error_type, error_str);
        Q_EMIT queryIPAddressNetworkInformationV1AsnIpIpAddressGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutonomousSystemsInformationApi::queryRegistryByTheNameV1AsnRegistryCodeGet(const QString &code) {
    QString fullPath = QString(_serverConfigs["queryRegistryByTheNameV1AsnRegistryCodeGet"][_serverIndices.value("queryRegistryByTheNameV1AsnRegistryCodeGet")].URL()+"/v1/asn/registry/{code}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString codePathParam("{");
        codePathParam.append("code").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "code", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"code"+pathSuffix : pathPrefix;
        fullPath.replace(codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(code)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutonomousSystemsInformationApi::queryRegistryByTheNameV1AsnRegistryCodeGetCallback);
    connect(this, &OAIAutonomousSystemsInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutonomousSystemsInformationApi::queryRegistryByTheNameV1AsnRegistryCodeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAutonomousSystemRegistryOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryRegistryByTheNameV1AsnRegistryCodeGetSignal(output);
        Q_EMIT queryRegistryByTheNameV1AsnRegistryCodeGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryRegistryByTheNameV1AsnRegistryCodeGetSignalE(output, error_type, error_str);
        Q_EMIT queryRegistryByTheNameV1AsnRegistryCodeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryRegistryByTheNameV1AsnRegistryCodeGetSignalError(output, error_type, error_str);
        Q_EMIT queryRegistryByTheNameV1AsnRegistryCodeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutonomousSystemsInformationApi::queryRegistryNamesV1AsnRegistryAllGet() {
    QString fullPath = QString(_serverConfigs["queryRegistryNamesV1AsnRegistryAllGet"][_serverIndices.value("queryRegistryNamesV1AsnRegistryAllGet")].URL()+"/v1/asn/registry/all");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutonomousSystemsInformationApi::queryRegistryNamesV1AsnRegistryAllGetCallback);
    connect(this, &OAIAutonomousSystemsInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutonomousSystemsInformationApi::queryRegistryNamesV1AsnRegistryAllGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAutonomousSystemRegistryOutput> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAutonomousSystemRegistryOutput val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryRegistryNamesV1AsnRegistryAllGetSignal(output);
        Q_EMIT queryRegistryNamesV1AsnRegistryAllGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryRegistryNamesV1AsnRegistryAllGetSignalE(output, error_type, error_str);
        Q_EMIT queryRegistryNamesV1AsnRegistryAllGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryRegistryNamesV1AsnRegistryAllGetSignalError(output, error_type, error_str);
        Q_EMIT queryRegistryNamesV1AsnRegistryAllGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutonomousSystemsInformationApi::queryStatusByTheNameV1AsnStatusCodeGet(const QString &code) {
    QString fullPath = QString(_serverConfigs["queryStatusByTheNameV1AsnStatusCodeGet"][_serverIndices.value("queryStatusByTheNameV1AsnStatusCodeGet")].URL()+"/v1/asn/status/{code}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString codePathParam("{");
        codePathParam.append("code").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "code", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"code"+pathSuffix : pathPrefix;
        fullPath.replace(codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(code)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutonomousSystemsInformationApi::queryStatusByTheNameV1AsnStatusCodeGetCallback);
    connect(this, &OAIAutonomousSystemsInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutonomousSystemsInformationApi::queryStatusByTheNameV1AsnStatusCodeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAutonomousSystemStatusOutput output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryStatusByTheNameV1AsnStatusCodeGetSignal(output);
        Q_EMIT queryStatusByTheNameV1AsnStatusCodeGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryStatusByTheNameV1AsnStatusCodeGetSignalE(output, error_type, error_str);
        Q_EMIT queryStatusByTheNameV1AsnStatusCodeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryStatusByTheNameV1AsnStatusCodeGetSignalError(output, error_type, error_str);
        Q_EMIT queryStatusByTheNameV1AsnStatusCodeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutonomousSystemsInformationApi::queryStatusNamesV1AsnStatusAllGet() {
    QString fullPath = QString(_serverConfigs["queryStatusNamesV1AsnStatusAllGet"][_serverIndices.value("queryStatusNamesV1AsnStatusAllGet")].URL()+"/v1/asn/status/all");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutonomousSystemsInformationApi::queryStatusNamesV1AsnStatusAllGetCallback);
    connect(this, &OAIAutonomousSystemsInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutonomousSystemsInformationApi::queryStatusNamesV1AsnStatusAllGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAutonomousSystemStatusOutput> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAutonomousSystemStatusOutput val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryStatusNamesV1AsnStatusAllGetSignal(output);
        Q_EMIT queryStatusNamesV1AsnStatusAllGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryStatusNamesV1AsnStatusAllGetSignalE(output, error_type, error_str);
        Q_EMIT queryStatusNamesV1AsnStatusAllGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryStatusNamesV1AsnStatusAllGetSignalError(output, error_type, error_str);
        Q_EMIT queryStatusNamesV1AsnStatusAllGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutonomousSystemsInformationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
