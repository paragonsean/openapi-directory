# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AclListCollectionOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asns: List[str]=[], cidrs: List[str]=[], continents: List[str]=[], countries: List[str]=[], datacenters: List[str]=[], reported: List[str]=None, _self: str=None):
        """AclListCollectionOutput - a model defined in OpenAPI

        :param asns: The asns of this AclListCollectionOutput.
        :param cidrs: The cidrs of this AclListCollectionOutput.
        :param continents: The continents of this AclListCollectionOutput.
        :param countries: The countries of this AclListCollectionOutput.
        :param datacenters: The datacenters of this AclListCollectionOutput.
        :param reported: The reported of this AclListCollectionOutput.
        :param _self: The _self of this AclListCollectionOutput.
        """
        self.openapi_types = {
            'asns': List[str],
            'cidrs': List[str],
            'continents': List[str],
            'countries': List[str],
            'datacenters': List[str],
            'reported': List[str],
            '_self': str
        }

        self.attribute_map = {
            'asns': 'asns',
            'cidrs': 'cidrs',
            'continents': 'continents',
            'countries': 'countries',
            'datacenters': 'datacenters',
            'reported': 'reported',
            '_self': 'self'
        }

        self._asns = asns
        self._cidrs = cidrs
        self._continents = continents
        self._countries = countries
        self._datacenters = datacenters
        self._reported = reported
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AclListCollectionOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AclListCollectionOutput of this AclListCollectionOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asns(self):
        """Gets the asns of this AclListCollectionOutput.


        :return: The asns of this AclListCollectionOutput.
        :rtype: List[str]
        """
        return self._asns

    @asns.setter
    def asns(self, asns):
        """Sets the asns of this AclListCollectionOutput.


        :param asns: The asns of this AclListCollectionOutput.
        :type asns: List[str]
        """

        self._asns = asns

    @property
    def cidrs(self):
        """Gets the cidrs of this AclListCollectionOutput.


        :return: The cidrs of this AclListCollectionOutput.
        :rtype: List[str]
        """
        return self._cidrs

    @cidrs.setter
    def cidrs(self, cidrs):
        """Sets the cidrs of this AclListCollectionOutput.


        :param cidrs: The cidrs of this AclListCollectionOutput.
        :type cidrs: List[str]
        """

        self._cidrs = cidrs

    @property
    def continents(self):
        """Gets the continents of this AclListCollectionOutput.


        :return: The continents of this AclListCollectionOutput.
        :rtype: List[str]
        """
        return self._continents

    @continents.setter
    def continents(self, continents):
        """Sets the continents of this AclListCollectionOutput.


        :param continents: The continents of this AclListCollectionOutput.
        :type continents: List[str]
        """

        self._continents = continents

    @property
    def countries(self):
        """Gets the countries of this AclListCollectionOutput.


        :return: The countries of this AclListCollectionOutput.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this AclListCollectionOutput.


        :param countries: The countries of this AclListCollectionOutput.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def datacenters(self):
        """Gets the datacenters of this AclListCollectionOutput.


        :return: The datacenters of this AclListCollectionOutput.
        :rtype: List[str]
        """
        return self._datacenters

    @datacenters.setter
    def datacenters(self, datacenters):
        """Sets the datacenters of this AclListCollectionOutput.


        :param datacenters: The datacenters of this AclListCollectionOutput.
        :type datacenters: List[str]
        """

        self._datacenters = datacenters

    @property
    def reported(self):
        """Gets the reported of this AclListCollectionOutput.


        :return: The reported of this AclListCollectionOutput.
        :rtype: List[str]
        """
        return self._reported

    @reported.setter
    def reported(self, reported):
        """Sets the reported of this AclListCollectionOutput.


        :param reported: The reported of this AclListCollectionOutput.
        :type reported: List[str]
        """

        self._reported = reported

    @property
    def _self(self):
        """Gets the _self of this AclListCollectionOutput.


        :return: The _self of this AclListCollectionOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AclListCollectionOutput.


        :param _self: The _self of this AclListCollectionOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
