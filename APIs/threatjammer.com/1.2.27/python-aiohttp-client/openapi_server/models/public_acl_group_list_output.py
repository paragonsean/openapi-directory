# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acl_group_origin_collection_output import AclGroupOriginCollectionOutput
from openapi_server import util


class PublicAclGroupListOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: int=None, description: str=None, list_type: str=None, name: str=None, origins: AclGroupOriginCollectionOutput=None, resource_type: str=None, _self: str=None, status: str=None, tags: List[str]=None, ttl: int=None, updated_at: int=None):
        """PublicAclGroupListOutput - a model defined in OpenAPI

        :param created_at: The created_at of this PublicAclGroupListOutput.
        :param description: The description of this PublicAclGroupListOutput.
        :param list_type: The list_type of this PublicAclGroupListOutput.
        :param name: The name of this PublicAclGroupListOutput.
        :param origins: The origins of this PublicAclGroupListOutput.
        :param resource_type: The resource_type of this PublicAclGroupListOutput.
        :param _self: The _self of this PublicAclGroupListOutput.
        :param status: The status of this PublicAclGroupListOutput.
        :param tags: The tags of this PublicAclGroupListOutput.
        :param ttl: The ttl of this PublicAclGroupListOutput.
        :param updated_at: The updated_at of this PublicAclGroupListOutput.
        """
        self.openapi_types = {
            'created_at': int,
            'description': str,
            'list_type': str,
            'name': str,
            'origins': AclGroupOriginCollectionOutput,
            'resource_type': str,
            '_self': str,
            'status': str,
            'tags': List[str],
            'ttl': int,
            'updated_at': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'list_type': 'list_type',
            'name': 'name',
            'origins': 'origins',
            'resource_type': 'resource_type',
            '_self': 'self',
            'status': 'status',
            'tags': 'tags',
            'ttl': 'ttl',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._description = description
        self._list_type = list_type
        self._name = name
        self._origins = origins
        self._resource_type = resource_type
        self.__self = _self
        self._status = status
        self._tags = tags
        self._ttl = ttl
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicAclGroupListOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicAclGroupListOutput of this PublicAclGroupListOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this PublicAclGroupListOutput.


        :return: The created_at of this PublicAclGroupListOutput.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PublicAclGroupListOutput.


        :param created_at: The created_at of this PublicAclGroupListOutput.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this PublicAclGroupListOutput.


        :return: The description of this PublicAclGroupListOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PublicAclGroupListOutput.


        :param description: The description of this PublicAclGroupListOutput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def list_type(self):
        """Gets the list_type of this PublicAclGroupListOutput.


        :return: The list_type of this PublicAclGroupListOutput.
        :rtype: str
        """
        return self._list_type

    @list_type.setter
    def list_type(self, list_type):
        """Sets the list_type of this PublicAclGroupListOutput.


        :param list_type: The list_type of this PublicAclGroupListOutput.
        :type list_type: str
        """
        allowed_values = ["UNKNOWN", "ALLOW", "DENY"]  # noqa: E501
        if list_type not in allowed_values:
            raise ValueError(
                "Invalid value for `list_type` ({0}), must be one of {1}"
                .format(list_type, allowed_values)
            )

        self._list_type = list_type

    @property
    def name(self):
        """Gets the name of this PublicAclGroupListOutput.


        :return: The name of this PublicAclGroupListOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicAclGroupListOutput.


        :param name: The name of this PublicAclGroupListOutput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origins(self):
        """Gets the origins of this PublicAclGroupListOutput.


        :return: The origins of this PublicAclGroupListOutput.
        :rtype: AclGroupOriginCollectionOutput
        """
        return self._origins

    @origins.setter
    def origins(self, origins):
        """Sets the origins of this PublicAclGroupListOutput.


        :param origins: The origins of this PublicAclGroupListOutput.
        :type origins: AclGroupOriginCollectionOutput
        """

        self._origins = origins

    @property
    def resource_type(self):
        """Gets the resource_type of this PublicAclGroupListOutput.


        :return: The resource_type of this PublicAclGroupListOutput.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this PublicAclGroupListOutput.


        :param resource_type: The resource_type of this PublicAclGroupListOutput.
        :type resource_type: str
        """
        allowed_values = ["UNKNOWN", "CIDR", "COUNTRY", "CONTINENT", "AS", "DATACENTER", "USERAGENT"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def _self(self):
        """Gets the _self of this PublicAclGroupListOutput.


        :return: The _self of this PublicAclGroupListOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this PublicAclGroupListOutput.


        :param _self: The _self of this PublicAclGroupListOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def status(self):
        """Gets the status of this PublicAclGroupListOutput.


        :return: The status of this PublicAclGroupListOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PublicAclGroupListOutput.


        :param status: The status of this PublicAclGroupListOutput.
        :type status: str
        """
        allowed_values = ["INACTIVE", "ACTIVE", "EXPIRED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this PublicAclGroupListOutput.


        :return: The tags of this PublicAclGroupListOutput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PublicAclGroupListOutput.


        :param tags: The tags of this PublicAclGroupListOutput.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def ttl(self):
        """Gets the ttl of this PublicAclGroupListOutput.


        :return: The ttl of this PublicAclGroupListOutput.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this PublicAclGroupListOutput.


        :param ttl: The ttl of this PublicAclGroupListOutput.
        :type ttl: int
        """

        self._ttl = ttl

    @property
    def updated_at(self):
        """Gets the updated_at of this PublicAclGroupListOutput.


        :return: The updated_at of this PublicAclGroupListOutput.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PublicAclGroupListOutput.


        :param updated_at: The updated_at of this PublicAclGroupListOutput.
        :type updated_at: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
