# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v1_models_token_source_output import V1ModelsTokenSourceOutput
from openapi_server import util


class ActivityOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: int=None, data: object=None, description: str=None, event: str=None, _self: str=None, source: V1ModelsTokenSourceOutput=None):
        """ActivityOutput - a model defined in OpenAPI

        :param created_at: The created_at of this ActivityOutput.
        :param data: The data of this ActivityOutput.
        :param description: The description of this ActivityOutput.
        :param event: The event of this ActivityOutput.
        :param _self: The _self of this ActivityOutput.
        :param source: The source of this ActivityOutput.
        """
        self.openapi_types = {
            'created_at': int,
            'data': object,
            'description': str,
            'event': str,
            '_self': str,
            'source': V1ModelsTokenSourceOutput
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'data': 'data',
            'description': 'description',
            'event': 'event',
            '_self': 'self',
            'source': 'source'
        }

        self._created_at = created_at
        self._data = data
        self._description = description
        self._event = event
        self.__self = _self
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityOutput of this ActivityOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ActivityOutput.


        :return: The created_at of this ActivityOutput.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActivityOutput.


        :param created_at: The created_at of this ActivityOutput.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this ActivityOutput.


        :return: The data of this ActivityOutput.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ActivityOutput.


        :param data: The data of this ActivityOutput.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def description(self):
        """Gets the description of this ActivityOutput.


        :return: The description of this ActivityOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityOutput.


        :param description: The description of this ActivityOutput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def event(self):
        """Gets the event of this ActivityOutput.


        :return: The event of this ActivityOutput.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ActivityOutput.


        :param event: The event of this ActivityOutput.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def _self(self):
        """Gets the _self of this ActivityOutput.


        :return: The _self of this ActivityOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ActivityOutput.


        :param _self: The _self of this ActivityOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def source(self):
        """Gets the source of this ActivityOutput.


        :return: The source of this ActivityOutput.
        :rtype: V1ModelsTokenSourceOutput
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ActivityOutput.


        :param source: The source of this ActivityOutput.
        :type source: V1ModelsTokenSourceOutput
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
