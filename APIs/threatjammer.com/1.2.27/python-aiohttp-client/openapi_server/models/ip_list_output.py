# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IPListOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset: str=None, expiry: int=None, last_report: int=None, protocol: str=None, _self: str=None, tags: List[str]=None, total_reports: int=None):
        """IPListOutput - a model defined in OpenAPI

        :param dataset: The dataset of this IPListOutput.
        :param expiry: The expiry of this IPListOutput.
        :param last_report: The last_report of this IPListOutput.
        :param protocol: The protocol of this IPListOutput.
        :param _self: The _self of this IPListOutput.
        :param tags: The tags of this IPListOutput.
        :param total_reports: The total_reports of this IPListOutput.
        """
        self.openapi_types = {
            'dataset': str,
            'expiry': int,
            'last_report': int,
            'protocol': str,
            '_self': str,
            'tags': List[str],
            'total_reports': int
        }

        self.attribute_map = {
            'dataset': 'dataset',
            'expiry': 'expiry',
            'last_report': 'last_report',
            'protocol': 'protocol',
            '_self': 'self',
            'tags': 'tags',
            'total_reports': 'total_reports'
        }

        self._dataset = dataset
        self._expiry = expiry
        self._last_report = last_report
        self._protocol = protocol
        self.__self = _self
        self._tags = tags
        self._total_reports = total_reports

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPListOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPListOutput of this IPListOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset(self):
        """Gets the dataset of this IPListOutput.


        :return: The dataset of this IPListOutput.
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this IPListOutput.


        :param dataset: The dataset of this IPListOutput.
        :type dataset: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")

        self._dataset = dataset

    @property
    def expiry(self):
        """Gets the expiry of this IPListOutput.


        :return: The expiry of this IPListOutput.
        :rtype: int
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this IPListOutput.


        :param expiry: The expiry of this IPListOutput.
        :type expiry: int
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")

        self._expiry = expiry

    @property
    def last_report(self):
        """Gets the last_report of this IPListOutput.


        :return: The last_report of this IPListOutput.
        :rtype: int
        """
        return self._last_report

    @last_report.setter
    def last_report(self, last_report):
        """Sets the last_report of this IPListOutput.


        :param last_report: The last_report of this IPListOutput.
        :type last_report: int
        """
        if last_report is None:
            raise ValueError("Invalid value for `last_report`, must not be `None`")

        self._last_report = last_report

    @property
    def protocol(self):
        """Gets the protocol of this IPListOutput.


        :return: The protocol of this IPListOutput.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IPListOutput.


        :param protocol: The protocol of this IPListOutput.
        :type protocol: str
        """
        allowed_values = ["ALL", "IPV4", "IPV6"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def _self(self):
        """Gets the _self of this IPListOutput.


        :return: The _self of this IPListOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this IPListOutput.


        :param _self: The _self of this IPListOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def tags(self):
        """Gets the tags of this IPListOutput.


        :return: The tags of this IPListOutput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IPListOutput.


        :param tags: The tags of this IPListOutput.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def total_reports(self):
        """Gets the total_reports of this IPListOutput.


        :return: The total_reports of this IPListOutput.
        :rtype: int
        """
        return self._total_reports

    @total_reports.setter
    def total_reports(self, total_reports):
        """Sets the total_reports of this IPListOutput.


        :param total_reports: The total_reports of this IPListOutput.
        :type total_reports: int
        """
        if total_reports is None:
            raise ValueError("Invalid value for `total_reports`, must not be `None`")

        self._total_reports = total_reports
