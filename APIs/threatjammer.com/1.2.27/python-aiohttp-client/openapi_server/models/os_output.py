# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OSOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, description: str=None, family: str=None, vendor: str=None):
        """OSOutput - a model defined in OpenAPI

        :param code: The code of this OSOutput.
        :param description: The description of this OSOutput.
        :param family: The family of this OSOutput.
        :param vendor: The vendor of this OSOutput.
        """
        self.openapi_types = {
            'code': str,
            'description': str,
            'family': str,
            'vendor': str
        }

        self.attribute_map = {
            'code': 'code',
            'description': 'description',
            'family': 'family',
            'vendor': 'vendor'
        }

        self._code = code
        self._description = description
        self._family = family
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSOutput of this OSOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this OSOutput.


        :return: The code of this OSOutput.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OSOutput.


        :param code: The code of this OSOutput.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def description(self):
        """Gets the description of this OSOutput.


        :return: The description of this OSOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OSOutput.


        :param description: The description of this OSOutput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def family(self):
        """Gets the family of this OSOutput.


        :return: The family of this OSOutput.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this OSOutput.


        :param family: The family of this OSOutput.
        :type family: str
        """
        if family is None:
            raise ValueError("Invalid value for `family`, must not be `None`")

        self._family = family

    @property
    def vendor(self):
        """Gets the vendor of this OSOutput.


        :return: The vendor of this OSOutput.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this OSOutput.


        :param vendor: The vendor of this OSOutput.
        :type vendor: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")

        self._vendor = vendor
