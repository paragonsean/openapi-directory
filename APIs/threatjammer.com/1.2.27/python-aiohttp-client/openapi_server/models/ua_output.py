# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UAOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent: str=None, classification: str=None, device: str=None, engine: str=None, family: str=None, frequent: str=None, latest: str=None, os: str=None, _self: str=None, string: str=None, type: str=None, vendor: str=None, version: str=None):
        """UAOutput - a model defined in OpenAPI

        :param agent: The agent of this UAOutput.
        :param classification: The classification of this UAOutput.
        :param device: The device of this UAOutput.
        :param engine: The engine of this UAOutput.
        :param family: The family of this UAOutput.
        :param frequent: The frequent of this UAOutput.
        :param latest: The latest of this UAOutput.
        :param os: The os of this UAOutput.
        :param _self: The _self of this UAOutput.
        :param string: The string of this UAOutput.
        :param type: The type of this UAOutput.
        :param vendor: The vendor of this UAOutput.
        :param version: The version of this UAOutput.
        """
        self.openapi_types = {
            'agent': str,
            'classification': str,
            'device': str,
            'engine': str,
            'family': str,
            'frequent': str,
            'latest': str,
            'os': str,
            '_self': str,
            'string': str,
            'type': str,
            'vendor': str,
            'version': str
        }

        self.attribute_map = {
            'agent': 'agent',
            'classification': 'classification',
            'device': 'device',
            'engine': 'engine',
            'family': 'family',
            'frequent': 'frequent',
            'latest': 'latest',
            'os': 'os',
            '_self': 'self',
            'string': 'string',
            'type': 'type',
            'vendor': 'vendor',
            'version': 'version'
        }

        self._agent = agent
        self._classification = classification
        self._device = device
        self._engine = engine
        self._family = family
        self._frequent = frequent
        self._latest = latest
        self._os = os
        self.__self = _self
        self._string = string
        self._type = type
        self._vendor = vendor
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UAOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UAOutput of this UAOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent(self):
        """Gets the agent of this UAOutput.


        :return: The agent of this UAOutput.
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this UAOutput.


        :param agent: The agent of this UAOutput.
        :type agent: str
        """
        if agent is None:
            raise ValueError("Invalid value for `agent`, must not be `None`")

        self._agent = agent

    @property
    def classification(self):
        """Gets the classification of this UAOutput.


        :return: The classification of this UAOutput.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this UAOutput.


        :param classification: The classification of this UAOutput.
        :type classification: str
        """
        allowed_values = ["CRAWLER", "CLIENT", "UNKNOWN"]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def device(self):
        """Gets the device of this UAOutput.


        :return: The device of this UAOutput.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this UAOutput.


        :param device: The device of this UAOutput.
        :type device: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def engine(self):
        """Gets the engine of this UAOutput.


        :return: The engine of this UAOutput.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this UAOutput.


        :param engine: The engine of this UAOutput.
        :type engine: str
        """
        if engine is None:
            raise ValueError("Invalid value for `engine`, must not be `None`")

        self._engine = engine

    @property
    def family(self):
        """Gets the family of this UAOutput.


        :return: The family of this UAOutput.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this UAOutput.


        :param family: The family of this UAOutput.
        :type family: str
        """
        if family is None:
            raise ValueError("Invalid value for `family`, must not be `None`")

        self._family = family

    @property
    def frequent(self):
        """Gets the frequent of this UAOutput.


        :return: The frequent of this UAOutput.
        :rtype: str
        """
        return self._frequent

    @frequent.setter
    def frequent(self, frequent):
        """Sets the frequent of this UAOutput.


        :param frequent: The frequent of this UAOutput.
        :type frequent: str
        """
        allowed_values = ["COMMON", "RARE", "VERY_RARE", "UNKNOWN"]  # noqa: E501
        if frequent not in allowed_values:
            raise ValueError(
                "Invalid value for `frequent` ({0}), must be one of {1}"
                .format(frequent, allowed_values)
            )

        self._frequent = frequent

    @property
    def latest(self):
        """Gets the latest of this UAOutput.


        :return: The latest of this UAOutput.
        :rtype: str
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this UAOutput.


        :param latest: The latest of this UAOutput.
        :type latest: str
        """
        if latest is None:
            raise ValueError("Invalid value for `latest`, must not be `None`")

        self._latest = latest

    @property
    def os(self):
        """Gets the os of this UAOutput.


        :return: The os of this UAOutput.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this UAOutput.


        :param os: The os of this UAOutput.
        :type os: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def _self(self):
        """Gets the _self of this UAOutput.


        :return: The _self of this UAOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this UAOutput.


        :param _self: The _self of this UAOutput.
        :type _self: str
        """

        self.__self = _self

    @property
    def string(self):
        """Gets the string of this UAOutput.


        :return: The string of this UAOutput.
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this UAOutput.


        :param string: The string of this UAOutput.
        :type string: str
        """
        if string is None:
            raise ValueError("Invalid value for `string`, must not be `None`")

        self._string = string

    @property
    def type(self):
        """Gets the type of this UAOutput.


        :return: The type of this UAOutput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UAOutput.


        :param type: The type of this UAOutput.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vendor(self):
        """Gets the vendor of this UAOutput.


        :return: The vendor of this UAOutput.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this UAOutput.


        :param vendor: The vendor of this UAOutput.
        :type vendor: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this UAOutput.


        :return: The version of this UAOutput.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UAOutput.


        :param version: The version of this UAOutput.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
