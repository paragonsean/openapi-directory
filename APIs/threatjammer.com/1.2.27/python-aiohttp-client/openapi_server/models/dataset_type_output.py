# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatasetTypeOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, items: int=None, name: str=None, _self: str=None, status: str=None, type: str=None):
        """DatasetTypeOutput - a model defined in OpenAPI

        :param description: The description of this DatasetTypeOutput.
        :param items: The items of this DatasetTypeOutput.
        :param name: The name of this DatasetTypeOutput.
        :param _self: The _self of this DatasetTypeOutput.
        :param status: The status of this DatasetTypeOutput.
        :param type: The type of this DatasetTypeOutput.
        """
        self.openapi_types = {
            'description': str,
            'items': int,
            'name': str,
            '_self': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'items': 'items',
            'name': 'name',
            '_self': 'self',
            'status': 'status',
            'type': 'type'
        }

        self._description = description
        self._items = items
        self._name = name
        self.__self = _self
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetTypeOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetTypeOutput of this DatasetTypeOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DatasetTypeOutput.


        :return: The description of this DatasetTypeOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatasetTypeOutput.


        :param description: The description of this DatasetTypeOutput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def items(self):
        """Gets the items of this DatasetTypeOutput.


        :return: The items of this DatasetTypeOutput.
        :rtype: int
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this DatasetTypeOutput.


        :param items: The items of this DatasetTypeOutput.
        :type items: int
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def name(self):
        """Gets the name of this DatasetTypeOutput.


        :return: The name of this DatasetTypeOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatasetTypeOutput.


        :param name: The name of this DatasetTypeOutput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def _self(self):
        """Gets the _self of this DatasetTypeOutput.


        :return: The _self of this DatasetTypeOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this DatasetTypeOutput.


        :param _self: The _self of this DatasetTypeOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def status(self):
        """Gets the status of this DatasetTypeOutput.


        :return: The status of this DatasetTypeOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DatasetTypeOutput.


        :param status: The status of this DatasetTypeOutput.
        :type status: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this DatasetTypeOutput.


        :return: The type of this DatasetTypeOutput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatasetTypeOutput.


        :param type: The type of this DatasetTypeOutput.
        :type type: str
        """
        allowed_values = ["ip", "domain"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
