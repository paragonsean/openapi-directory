# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OriginCookieIdStatusOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cookie_id: str=None, created_at: int=None, expiry: int=None, log_id: str=None, status: str=None, updated_at: int=None):
        """OriginCookieIdStatusOutput - a model defined in OpenAPI

        :param cookie_id: The cookie_id of this OriginCookieIdStatusOutput.
        :param created_at: The created_at of this OriginCookieIdStatusOutput.
        :param expiry: The expiry of this OriginCookieIdStatusOutput.
        :param log_id: The log_id of this OriginCookieIdStatusOutput.
        :param status: The status of this OriginCookieIdStatusOutput.
        :param updated_at: The updated_at of this OriginCookieIdStatusOutput.
        """
        self.openapi_types = {
            'cookie_id': str,
            'created_at': int,
            'expiry': int,
            'log_id': str,
            'status': str,
            'updated_at': int
        }

        self.attribute_map = {
            'cookie_id': 'cookie_id',
            'created_at': 'created_at',
            'expiry': 'expiry',
            'log_id': 'log_id',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._cookie_id = cookie_id
        self._created_at = created_at
        self._expiry = expiry
        self._log_id = log_id
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginCookieIdStatusOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginCookieIdStatusOutput of this OriginCookieIdStatusOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cookie_id(self):
        """Gets the cookie_id of this OriginCookieIdStatusOutput.


        :return: The cookie_id of this OriginCookieIdStatusOutput.
        :rtype: str
        """
        return self._cookie_id

    @cookie_id.setter
    def cookie_id(self, cookie_id):
        """Sets the cookie_id of this OriginCookieIdStatusOutput.


        :param cookie_id: The cookie_id of this OriginCookieIdStatusOutput.
        :type cookie_id: str
        """
        if cookie_id is None:
            raise ValueError("Invalid value for `cookie_id`, must not be `None`")

        self._cookie_id = cookie_id

    @property
    def created_at(self):
        """Gets the created_at of this OriginCookieIdStatusOutput.


        :return: The created_at of this OriginCookieIdStatusOutput.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OriginCookieIdStatusOutput.


        :param created_at: The created_at of this OriginCookieIdStatusOutput.
        :type created_at: int
        """

        self._created_at = created_at

    @property
    def expiry(self):
        """Gets the expiry of this OriginCookieIdStatusOutput.


        :return: The expiry of this OriginCookieIdStatusOutput.
        :rtype: int
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this OriginCookieIdStatusOutput.


        :param expiry: The expiry of this OriginCookieIdStatusOutput.
        :type expiry: int
        """

        self._expiry = expiry

    @property
    def log_id(self):
        """Gets the log_id of this OriginCookieIdStatusOutput.


        :return: The log_id of this OriginCookieIdStatusOutput.
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this OriginCookieIdStatusOutput.


        :param log_id: The log_id of this OriginCookieIdStatusOutput.
        :type log_id: str
        """

        self._log_id = log_id

    @property
    def status(self):
        """Gets the status of this OriginCookieIdStatusOutput.


        :return: The status of this OriginCookieIdStatusOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OriginCookieIdStatusOutput.


        :param status: The status of this OriginCookieIdStatusOutput.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this OriginCookieIdStatusOutput.


        :return: The updated_at of this OriginCookieIdStatusOutput.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OriginCookieIdStatusOutput.


        :param updated_at: The updated_at of this OriginCookieIdStatusOutput.
        :type updated_at: int
        """

        self._updated_at = updated_at
