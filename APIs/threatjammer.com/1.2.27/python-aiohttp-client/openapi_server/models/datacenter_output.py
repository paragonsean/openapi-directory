# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatacenterOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: str=None, description: str=None, name: str=None, prefixes: str=None, risk: str=None, score: int=None, _self: str=None, source: str=None, status: str='enabled'):
        """DatacenterOutput - a model defined in OpenAPI

        :param asn: The asn of this DatacenterOutput.
        :param description: The description of this DatacenterOutput.
        :param name: The name of this DatacenterOutput.
        :param prefixes: The prefixes of this DatacenterOutput.
        :param risk: The risk of this DatacenterOutput.
        :param score: The score of this DatacenterOutput.
        :param _self: The _self of this DatacenterOutput.
        :param source: The source of this DatacenterOutput.
        :param status: The status of this DatacenterOutput.
        """
        self.openapi_types = {
            'asn': str,
            'description': str,
            'name': str,
            'prefixes': str,
            'risk': str,
            'score': int,
            '_self': str,
            'source': str,
            'status': str
        }

        self.attribute_map = {
            'asn': 'asn',
            'description': 'description',
            'name': 'name',
            'prefixes': 'prefixes',
            'risk': 'risk',
            'score': 'score',
            '_self': 'self',
            'source': 'source',
            'status': 'status'
        }

        self._asn = asn
        self._description = description
        self._name = name
        self._prefixes = prefixes
        self._risk = risk
        self._score = score
        self.__self = _self
        self._source = source
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatacenterOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatacenterOutput of this DatacenterOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this DatacenterOutput.


        :return: The asn of this DatacenterOutput.
        :rtype: str
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this DatacenterOutput.


        :param asn: The asn of this DatacenterOutput.
        :type asn: str
        """
        if asn is None:
            raise ValueError("Invalid value for `asn`, must not be `None`")

        self._asn = asn

    @property
    def description(self):
        """Gets the description of this DatacenterOutput.


        :return: The description of this DatacenterOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatacenterOutput.


        :param description: The description of this DatacenterOutput.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this DatacenterOutput.


        :return: The name of this DatacenterOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatacenterOutput.


        :param name: The name of this DatacenterOutput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prefixes(self):
        """Gets the prefixes of this DatacenterOutput.


        :return: The prefixes of this DatacenterOutput.
        :rtype: str
        """
        return self._prefixes

    @prefixes.setter
    def prefixes(self, prefixes):
        """Sets the prefixes of this DatacenterOutput.


        :param prefixes: The prefixes of this DatacenterOutput.
        :type prefixes: str
        """
        if prefixes is None:
            raise ValueError("Invalid value for `prefixes`, must not be `None`")

        self._prefixes = prefixes

    @property
    def risk(self):
        """Gets the risk of this DatacenterOutput.


        :return: The risk of this DatacenterOutput.
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this DatacenterOutput.


        :param risk: The risk of this DatacenterOutput.
        :type risk: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if risk not in allowed_values:
            raise ValueError(
                "Invalid value for `risk` ({0}), must be one of {1}"
                .format(risk, allowed_values)
            )

        self._risk = risk

    @property
    def score(self):
        """Gets the score of this DatacenterOutput.


        :return: The score of this DatacenterOutput.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this DatacenterOutput.


        :param score: The score of this DatacenterOutput.
        :type score: int
        """

        self._score = score

    @property
    def _self(self):
        """Gets the _self of this DatacenterOutput.


        :return: The _self of this DatacenterOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this DatacenterOutput.


        :param _self: The _self of this DatacenterOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def source(self):
        """Gets the source of this DatacenterOutput.


        :return: The source of this DatacenterOutput.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DatacenterOutput.


        :param source: The source of this DatacenterOutput.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def status(self):
        """Gets the status of this DatacenterOutput.


        :return: The status of this DatacenterOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DatacenterOutput.


        :param status: The status of this DatacenterOutput.
        :type status: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
