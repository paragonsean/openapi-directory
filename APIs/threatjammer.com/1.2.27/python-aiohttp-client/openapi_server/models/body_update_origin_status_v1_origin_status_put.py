# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BodyUpdateOriginStatusV1OriginStatusPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_id: str=None, scope: str=None, status: str=None):
        """BodyUpdateOriginStatusV1OriginStatusPut - a model defined in OpenAPI

        :param log_id: The log_id of this BodyUpdateOriginStatusV1OriginStatusPut.
        :param scope: The scope of this BodyUpdateOriginStatusV1OriginStatusPut.
        :param status: The status of this BodyUpdateOriginStatusV1OriginStatusPut.
        """
        self.openapi_types = {
            'log_id': str,
            'scope': str,
            'status': str
        }

        self.attribute_map = {
            'log_id': 'log_id',
            'scope': 'scope',
            'status': 'status'
        }

        self._log_id = log_id
        self._scope = scope
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BodyUpdateOriginStatusV1OriginStatusPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Body_update_origin_status_v1_origin_status_put of this BodyUpdateOriginStatusV1OriginStatusPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_id(self):
        """Gets the log_id of this BodyUpdateOriginStatusV1OriginStatusPut.

        The log id to change the status

        :return: The log_id of this BodyUpdateOriginStatusV1OriginStatusPut.
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this BodyUpdateOriginStatusV1OriginStatusPut.

        The log id to change the status

        :param log_id: The log_id of this BodyUpdateOriginStatusV1OriginStatusPut.
        :type log_id: str
        """

        self._log_id = log_id

    @property
    def scope(self):
        """Gets the scope of this BodyUpdateOriginStatusV1OriginStatusPut.

        The scope to change the status

        :return: The scope of this BodyUpdateOriginStatusV1OriginStatusPut.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this BodyUpdateOriginStatusV1OriginStatusPut.

        The scope to change the status

        :param scope: The scope of this BodyUpdateOriginStatusV1OriginStatusPut.
        :type scope: str
        """
        allowed_values = ["address_and_cookie", "address", "cookie"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def status(self):
        """Gets the status of this BodyUpdateOriginStatusV1OriginStatusPut.

        The status id to change the details

        :return: The status of this BodyUpdateOriginStatusV1OriginStatusPut.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BodyUpdateOriginStatusV1OriginStatusPut.

        The status id to change the details

        :param status: The status of this BodyUpdateOriginStatusV1OriginStatusPut.
        :type status: str
        """
        allowed_values = ["pass", "block", "challenge", "bypass", "ignore"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
