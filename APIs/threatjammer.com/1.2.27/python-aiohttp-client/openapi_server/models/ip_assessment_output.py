# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IPAssessmentOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowlisted: str=None, asn: str=None, asn_prefix: str=None, datacenter: str=None, datacenter_prefix: str=None, datasets: List[str]=None, denylisted: str=None, first_appearance: List[str]=None, last_appearance: List[str]=None, reason: str=None, risk: str=None, score: int=None, _self: str=None, sources: List[str]=None):
        """IPAssessmentOutput - a model defined in OpenAPI

        :param allowlisted: The allowlisted of this IPAssessmentOutput.
        :param asn: The asn of this IPAssessmentOutput.
        :param asn_prefix: The asn_prefix of this IPAssessmentOutput.
        :param datacenter: The datacenter of this IPAssessmentOutput.
        :param datacenter_prefix: The datacenter_prefix of this IPAssessmentOutput.
        :param datasets: The datasets of this IPAssessmentOutput.
        :param denylisted: The denylisted of this IPAssessmentOutput.
        :param first_appearance: The first_appearance of this IPAssessmentOutput.
        :param last_appearance: The last_appearance of this IPAssessmentOutput.
        :param reason: The reason of this IPAssessmentOutput.
        :param risk: The risk of this IPAssessmentOutput.
        :param score: The score of this IPAssessmentOutput.
        :param _self: The _self of this IPAssessmentOutput.
        :param sources: The sources of this IPAssessmentOutput.
        """
        self.openapi_types = {
            'allowlisted': str,
            'asn': str,
            'asn_prefix': str,
            'datacenter': str,
            'datacenter_prefix': str,
            'datasets': List[str],
            'denylisted': str,
            'first_appearance': List[str],
            'last_appearance': List[str],
            'reason': str,
            'risk': str,
            'score': int,
            '_self': str,
            'sources': List[str]
        }

        self.attribute_map = {
            'allowlisted': 'allowlisted',
            'asn': 'asn',
            'asn_prefix': 'asn_prefix',
            'datacenter': 'datacenter',
            'datacenter_prefix': 'datacenter_prefix',
            'datasets': 'datasets',
            'denylisted': 'denylisted',
            'first_appearance': 'first_appearance',
            'last_appearance': 'last_appearance',
            'reason': 'reason',
            'risk': 'risk',
            'score': 'score',
            '_self': 'self',
            'sources': 'sources'
        }

        self._allowlisted = allowlisted
        self._asn = asn
        self._asn_prefix = asn_prefix
        self._datacenter = datacenter
        self._datacenter_prefix = datacenter_prefix
        self._datasets = datasets
        self._denylisted = denylisted
        self._first_appearance = first_appearance
        self._last_appearance = last_appearance
        self._reason = reason
        self._risk = risk
        self._score = score
        self.__self = _self
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPAssessmentOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPAssessmentOutput of this IPAssessmentOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowlisted(self):
        """Gets the allowlisted of this IPAssessmentOutput.


        :return: The allowlisted of this IPAssessmentOutput.
        :rtype: str
        """
        return self._allowlisted

    @allowlisted.setter
    def allowlisted(self, allowlisted):
        """Sets the allowlisted of this IPAssessmentOutput.


        :param allowlisted: The allowlisted of this IPAssessmentOutput.
        :type allowlisted: str
        """
        if allowlisted is None:
            raise ValueError("Invalid value for `allowlisted`, must not be `None`")

        self._allowlisted = allowlisted

    @property
    def asn(self):
        """Gets the asn of this IPAssessmentOutput.


        :return: The asn of this IPAssessmentOutput.
        :rtype: str
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this IPAssessmentOutput.


        :param asn: The asn of this IPAssessmentOutput.
        :type asn: str
        """
        if asn is None:
            raise ValueError("Invalid value for `asn`, must not be `None`")

        self._asn = asn

    @property
    def asn_prefix(self):
        """Gets the asn_prefix of this IPAssessmentOutput.


        :return: The asn_prefix of this IPAssessmentOutput.
        :rtype: str
        """
        return self._asn_prefix

    @asn_prefix.setter
    def asn_prefix(self, asn_prefix):
        """Sets the asn_prefix of this IPAssessmentOutput.


        :param asn_prefix: The asn_prefix of this IPAssessmentOutput.
        :type asn_prefix: str
        """
        if asn_prefix is None:
            raise ValueError("Invalid value for `asn_prefix`, must not be `None`")

        self._asn_prefix = asn_prefix

    @property
    def datacenter(self):
        """Gets the datacenter of this IPAssessmentOutput.


        :return: The datacenter of this IPAssessmentOutput.
        :rtype: str
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this IPAssessmentOutput.


        :param datacenter: The datacenter of this IPAssessmentOutput.
        :type datacenter: str
        """
        if datacenter is None:
            raise ValueError("Invalid value for `datacenter`, must not be `None`")

        self._datacenter = datacenter

    @property
    def datacenter_prefix(self):
        """Gets the datacenter_prefix of this IPAssessmentOutput.


        :return: The datacenter_prefix of this IPAssessmentOutput.
        :rtype: str
        """
        return self._datacenter_prefix

    @datacenter_prefix.setter
    def datacenter_prefix(self, datacenter_prefix):
        """Sets the datacenter_prefix of this IPAssessmentOutput.


        :param datacenter_prefix: The datacenter_prefix of this IPAssessmentOutput.
        :type datacenter_prefix: str
        """
        if datacenter_prefix is None:
            raise ValueError("Invalid value for `datacenter_prefix`, must not be `None`")

        self._datacenter_prefix = datacenter_prefix

    @property
    def datasets(self):
        """Gets the datasets of this IPAssessmentOutput.


        :return: The datasets of this IPAssessmentOutput.
        :rtype: List[str]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this IPAssessmentOutput.


        :param datasets: The datasets of this IPAssessmentOutput.
        :type datasets: List[str]
        """
        if datasets is None:
            raise ValueError("Invalid value for `datasets`, must not be `None`")

        self._datasets = datasets

    @property
    def denylisted(self):
        """Gets the denylisted of this IPAssessmentOutput.


        :return: The denylisted of this IPAssessmentOutput.
        :rtype: str
        """
        return self._denylisted

    @denylisted.setter
    def denylisted(self, denylisted):
        """Sets the denylisted of this IPAssessmentOutput.


        :param denylisted: The denylisted of this IPAssessmentOutput.
        :type denylisted: str
        """
        if denylisted is None:
            raise ValueError("Invalid value for `denylisted`, must not be `None`")

        self._denylisted = denylisted

    @property
    def first_appearance(self):
        """Gets the first_appearance of this IPAssessmentOutput.


        :return: The first_appearance of this IPAssessmentOutput.
        :rtype: List[str]
        """
        return self._first_appearance

    @first_appearance.setter
    def first_appearance(self, first_appearance):
        """Sets the first_appearance of this IPAssessmentOutput.


        :param first_appearance: The first_appearance of this IPAssessmentOutput.
        :type first_appearance: List[str]
        """
        if first_appearance is None:
            raise ValueError("Invalid value for `first_appearance`, must not be `None`")

        self._first_appearance = first_appearance

    @property
    def last_appearance(self):
        """Gets the last_appearance of this IPAssessmentOutput.


        :return: The last_appearance of this IPAssessmentOutput.
        :rtype: List[str]
        """
        return self._last_appearance

    @last_appearance.setter
    def last_appearance(self, last_appearance):
        """Sets the last_appearance of this IPAssessmentOutput.


        :param last_appearance: The last_appearance of this IPAssessmentOutput.
        :type last_appearance: List[str]
        """
        if last_appearance is None:
            raise ValueError("Invalid value for `last_appearance`, must not be `None`")

        self._last_appearance = last_appearance

    @property
    def reason(self):
        """Gets the reason of this IPAssessmentOutput.


        :return: The reason of this IPAssessmentOutput.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this IPAssessmentOutput.


        :param reason: The reason of this IPAssessmentOutput.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def risk(self):
        """Gets the risk of this IPAssessmentOutput.


        :return: The risk of this IPAssessmentOutput.
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this IPAssessmentOutput.


        :param risk: The risk of this IPAssessmentOutput.
        :type risk: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if risk not in allowed_values:
            raise ValueError(
                "Invalid value for `risk` ({0}), must be one of {1}"
                .format(risk, allowed_values)
            )

        self._risk = risk

    @property
    def score(self):
        """Gets the score of this IPAssessmentOutput.


        :return: The score of this IPAssessmentOutput.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this IPAssessmentOutput.


        :param score: The score of this IPAssessmentOutput.
        :type score: int
        """

        self._score = score

    @property
    def _self(self):
        """Gets the _self of this IPAssessmentOutput.


        :return: The _self of this IPAssessmentOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this IPAssessmentOutput.


        :param _self: The _self of this IPAssessmentOutput.
        :type _self: str
        """

        self.__self = _self

    @property
    def sources(self):
        """Gets the sources of this IPAssessmentOutput.


        :return: The sources of this IPAssessmentOutput.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this IPAssessmentOutput.


        :param sources: The sources of this IPAssessmentOutput.
        :type sources: List[str]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources
