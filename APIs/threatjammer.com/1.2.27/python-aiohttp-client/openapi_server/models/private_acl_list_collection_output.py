# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cidrs_inner import CidrsInner
from openapi_server import util


class PrivateAclListCollectionOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asns: List[int]=None, cidrs: List[CidrsInner]=None, continents: List[str]=None, countries: List[str]=None, datacenters: List[str]=None, _self: str=None, user_agents: List[str]=None):
        """PrivateAclListCollectionOutput - a model defined in OpenAPI

        :param asns: The asns of this PrivateAclListCollectionOutput.
        :param cidrs: The cidrs of this PrivateAclListCollectionOutput.
        :param continents: The continents of this PrivateAclListCollectionOutput.
        :param countries: The countries of this PrivateAclListCollectionOutput.
        :param datacenters: The datacenters of this PrivateAclListCollectionOutput.
        :param _self: The _self of this PrivateAclListCollectionOutput.
        :param user_agents: The user_agents of this PrivateAclListCollectionOutput.
        """
        self.openapi_types = {
            'asns': List[int],
            'cidrs': List[CidrsInner],
            'continents': List[str],
            'countries': List[str],
            'datacenters': List[str],
            '_self': str,
            'user_agents': List[str]
        }

        self.attribute_map = {
            'asns': 'asns',
            'cidrs': 'cidrs',
            'continents': 'continents',
            'countries': 'countries',
            'datacenters': 'datacenters',
            '_self': 'self',
            'user_agents': 'user_agents'
        }

        self._asns = asns
        self._cidrs = cidrs
        self._continents = continents
        self._countries = countries
        self._datacenters = datacenters
        self.__self = _self
        self._user_agents = user_agents

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateAclListCollectionOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateAclListCollectionOutput of this PrivateAclListCollectionOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asns(self):
        """Gets the asns of this PrivateAclListCollectionOutput.


        :return: The asns of this PrivateAclListCollectionOutput.
        :rtype: List[int]
        """
        return self._asns

    @asns.setter
    def asns(self, asns):
        """Sets the asns of this PrivateAclListCollectionOutput.


        :param asns: The asns of this PrivateAclListCollectionOutput.
        :type asns: List[int]
        """

        self._asns = asns

    @property
    def cidrs(self):
        """Gets the cidrs of this PrivateAclListCollectionOutput.


        :return: The cidrs of this PrivateAclListCollectionOutput.
        :rtype: List[CidrsInner]
        """
        return self._cidrs

    @cidrs.setter
    def cidrs(self, cidrs):
        """Sets the cidrs of this PrivateAclListCollectionOutput.


        :param cidrs: The cidrs of this PrivateAclListCollectionOutput.
        :type cidrs: List[CidrsInner]
        """

        self._cidrs = cidrs

    @property
    def continents(self):
        """Gets the continents of this PrivateAclListCollectionOutput.


        :return: The continents of this PrivateAclListCollectionOutput.
        :rtype: List[str]
        """
        return self._continents

    @continents.setter
    def continents(self, continents):
        """Sets the continents of this PrivateAclListCollectionOutput.


        :param continents: The continents of this PrivateAclListCollectionOutput.
        :type continents: List[str]
        """
        allowed_values = ["AF", "AN", "AS", "EU", "NA", "OC", "SA"]  # noqa: E501
        if not set(continents).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `continents` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(continents) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._continents = continents

    @property
    def countries(self):
        """Gets the countries of this PrivateAclListCollectionOutput.


        :return: The countries of this PrivateAclListCollectionOutput.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this PrivateAclListCollectionOutput.


        :param countries: The countries of this PrivateAclListCollectionOutput.
        :type countries: List[str]
        """
        allowed_values = ["AW", "AF", "AO", "AI", "AX", "AL", "AD", "AE", "AR", "AM", "AS", "AQ", "TF", "AG", "AU", "AT", "AZ", "BI", "BE", "BJ", "BQ", "BF", "BD", "BG", "BH", "BS", "BA", "BL", "BY", "BZ", "BM", "BO", "BR", "BB", "BN", "BT", "BV", "BW", "CF", "CA", "CC", "CH", "CL", "CN", "CI", "CM", "CD", "CG", "CK", "CO", "KM", "CV", "CR", "CU", "CW", "CX", "KY", "CY", "CZ", "DE", "DJ", "DM", "DK", "DO", "DZ", "EC", "EG", "ER", "EH", "ES", "EE", "ET", "FI", "FJ", "FK", "FR", "FO", "FM", "GA", "GB", "GE", "GG", "GH", "GI", "GN", "GP", "GM", "GW", "GQ", "GR", "GD", "GL", "GT", "GF", "GU", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IM", "IN", "IO", "IE", "IR", "IQ", "IS", "IL", "IT", "JM", "JE", "JO", "JP", "KZ", "KE", "KG", "KH", "KI", "KN", "KR", "KW", "LA", "LB", "LR", "LY", "LC", "LI", "LK", "LS", "LT", "LU", "LV", "MO", "MF", "MA", "MC", "MD", "MG", "MV", "MX", "MH", "MK", "ML", "MT", "MM", "ME", "MN", "MP", "MZ", "MR", "MS", "MQ", "MU", "MW", "MY", "YT", "NA", "NC", "NE", "NF", "NG", "NI", "NU", "NL", "false", "NP", "NR", "NZ", "OM", "PK", "PA", "PN", "PE", "PH", "PW", "PG", "PL", "PR", "KP", "PT", "PY", "PS", "PF", "QA", "RE", "RO", "RU", "RW", "SA", "SD", "SN", "SG", "GS", "SH", "SJ", "SB", "SL", "SV", "SM", "SO", "PM", "RS", "SS", "ST", "SR", "SK", "SI", "SE", "SZ", "SX", "SC", "SY", "TC", "TD", "TG", "TH", "TJ", "TK", "TM", "TL", "TO", "TT", "TN", "TR", "TV", "TW", "TZ", "UG", "UA", "UM", "UY", "US", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "ZA", "ZM", "ZW"]  # noqa: E501
        if not set(countries).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `countries` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(countries) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._countries = countries

    @property
    def datacenters(self):
        """Gets the datacenters of this PrivateAclListCollectionOutput.


        :return: The datacenters of this PrivateAclListCollectionOutput.
        :rtype: List[str]
        """
        return self._datacenters

    @datacenters.setter
    def datacenters(self, datacenters):
        """Sets the datacenters of this PrivateAclListCollectionOutput.


        :param datacenters: The datacenters of this PrivateAclListCollectionOutput.
        :type datacenters: List[str]
        """

        self._datacenters = datacenters

    @property
    def _self(self):
        """Gets the _self of this PrivateAclListCollectionOutput.


        :return: The _self of this PrivateAclListCollectionOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this PrivateAclListCollectionOutput.


        :param _self: The _self of this PrivateAclListCollectionOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def user_agents(self):
        """Gets the user_agents of this PrivateAclListCollectionOutput.


        :return: The user_agents of this PrivateAclListCollectionOutput.
        :rtype: List[str]
        """
        return self._user_agents

    @user_agents.setter
    def user_agents(self, user_agents):
        """Sets the user_agents of this PrivateAclListCollectionOutput.


        :param user_agents: The user_agents of this PrivateAclListCollectionOutput.
        :type user_agents: List[str]
        """

        self._user_agents = user_agents
