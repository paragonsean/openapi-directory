# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OriginTrafficAnalysisOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn_risky: int=None, bots: int=None, datacenters: int=None, denylists: int=None, network_country_mismatches: int=None, score_high: int=None, timestamp: int=None, total: int=None, webdrivers: int=None):
        """OriginTrafficAnalysisOutput - a model defined in OpenAPI

        :param asn_risky: The asn_risky of this OriginTrafficAnalysisOutput.
        :param bots: The bots of this OriginTrafficAnalysisOutput.
        :param datacenters: The datacenters of this OriginTrafficAnalysisOutput.
        :param denylists: The denylists of this OriginTrafficAnalysisOutput.
        :param network_country_mismatches: The network_country_mismatches of this OriginTrafficAnalysisOutput.
        :param score_high: The score_high of this OriginTrafficAnalysisOutput.
        :param timestamp: The timestamp of this OriginTrafficAnalysisOutput.
        :param total: The total of this OriginTrafficAnalysisOutput.
        :param webdrivers: The webdrivers of this OriginTrafficAnalysisOutput.
        """
        self.openapi_types = {
            'asn_risky': int,
            'bots': int,
            'datacenters': int,
            'denylists': int,
            'network_country_mismatches': int,
            'score_high': int,
            'timestamp': int,
            'total': int,
            'webdrivers': int
        }

        self.attribute_map = {
            'asn_risky': 'asn_risky',
            'bots': 'bots',
            'datacenters': 'datacenters',
            'denylists': 'denylists',
            'network_country_mismatches': 'network_country_mismatches',
            'score_high': 'score_high',
            'timestamp': 'timestamp',
            'total': 'total',
            'webdrivers': 'webdrivers'
        }

        self._asn_risky = asn_risky
        self._bots = bots
        self._datacenters = datacenters
        self._denylists = denylists
        self._network_country_mismatches = network_country_mismatches
        self._score_high = score_high
        self._timestamp = timestamp
        self._total = total
        self._webdrivers = webdrivers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginTrafficAnalysisOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginTrafficAnalysisOutput of this OriginTrafficAnalysisOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn_risky(self):
        """Gets the asn_risky of this OriginTrafficAnalysisOutput.


        :return: The asn_risky of this OriginTrafficAnalysisOutput.
        :rtype: int
        """
        return self._asn_risky

    @asn_risky.setter
    def asn_risky(self, asn_risky):
        """Sets the asn_risky of this OriginTrafficAnalysisOutput.


        :param asn_risky: The asn_risky of this OriginTrafficAnalysisOutput.
        :type asn_risky: int
        """
        if asn_risky is None:
            raise ValueError("Invalid value for `asn_risky`, must not be `None`")

        self._asn_risky = asn_risky

    @property
    def bots(self):
        """Gets the bots of this OriginTrafficAnalysisOutput.


        :return: The bots of this OriginTrafficAnalysisOutput.
        :rtype: int
        """
        return self._bots

    @bots.setter
    def bots(self, bots):
        """Sets the bots of this OriginTrafficAnalysisOutput.


        :param bots: The bots of this OriginTrafficAnalysisOutput.
        :type bots: int
        """
        if bots is None:
            raise ValueError("Invalid value for `bots`, must not be `None`")

        self._bots = bots

    @property
    def datacenters(self):
        """Gets the datacenters of this OriginTrafficAnalysisOutput.


        :return: The datacenters of this OriginTrafficAnalysisOutput.
        :rtype: int
        """
        return self._datacenters

    @datacenters.setter
    def datacenters(self, datacenters):
        """Sets the datacenters of this OriginTrafficAnalysisOutput.


        :param datacenters: The datacenters of this OriginTrafficAnalysisOutput.
        :type datacenters: int
        """
        if datacenters is None:
            raise ValueError("Invalid value for `datacenters`, must not be `None`")

        self._datacenters = datacenters

    @property
    def denylists(self):
        """Gets the denylists of this OriginTrafficAnalysisOutput.


        :return: The denylists of this OriginTrafficAnalysisOutput.
        :rtype: int
        """
        return self._denylists

    @denylists.setter
    def denylists(self, denylists):
        """Sets the denylists of this OriginTrafficAnalysisOutput.


        :param denylists: The denylists of this OriginTrafficAnalysisOutput.
        :type denylists: int
        """
        if denylists is None:
            raise ValueError("Invalid value for `denylists`, must not be `None`")

        self._denylists = denylists

    @property
    def network_country_mismatches(self):
        """Gets the network_country_mismatches of this OriginTrafficAnalysisOutput.


        :return: The network_country_mismatches of this OriginTrafficAnalysisOutput.
        :rtype: int
        """
        return self._network_country_mismatches

    @network_country_mismatches.setter
    def network_country_mismatches(self, network_country_mismatches):
        """Sets the network_country_mismatches of this OriginTrafficAnalysisOutput.


        :param network_country_mismatches: The network_country_mismatches of this OriginTrafficAnalysisOutput.
        :type network_country_mismatches: int
        """
        if network_country_mismatches is None:
            raise ValueError("Invalid value for `network_country_mismatches`, must not be `None`")

        self._network_country_mismatches = network_country_mismatches

    @property
    def score_high(self):
        """Gets the score_high of this OriginTrafficAnalysisOutput.


        :return: The score_high of this OriginTrafficAnalysisOutput.
        :rtype: int
        """
        return self._score_high

    @score_high.setter
    def score_high(self, score_high):
        """Sets the score_high of this OriginTrafficAnalysisOutput.


        :param score_high: The score_high of this OriginTrafficAnalysisOutput.
        :type score_high: int
        """
        if score_high is None:
            raise ValueError("Invalid value for `score_high`, must not be `None`")

        self._score_high = score_high

    @property
    def timestamp(self):
        """Gets the timestamp of this OriginTrafficAnalysisOutput.


        :return: The timestamp of this OriginTrafficAnalysisOutput.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this OriginTrafficAnalysisOutput.


        :param timestamp: The timestamp of this OriginTrafficAnalysisOutput.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def total(self):
        """Gets the total of this OriginTrafficAnalysisOutput.


        :return: The total of this OriginTrafficAnalysisOutput.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OriginTrafficAnalysisOutput.


        :param total: The total of this OriginTrafficAnalysisOutput.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def webdrivers(self):
        """Gets the webdrivers of this OriginTrafficAnalysisOutput.


        :return: The webdrivers of this OriginTrafficAnalysisOutput.
        :rtype: int
        """
        return self._webdrivers

    @webdrivers.setter
    def webdrivers(self, webdrivers):
        """Sets the webdrivers of this OriginTrafficAnalysisOutput.


        :param webdrivers: The webdrivers of this OriginTrafficAnalysisOutput.
        :type webdrivers: int
        """
        if webdrivers is None:
            raise ValueError("Invalid value for `webdrivers`, must not be `None`")

        self._webdrivers = webdrivers
