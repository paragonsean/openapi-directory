# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateAclGroupListInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, resource_type: str=None, tags: List[str]=None, ttl: int=None):
        """PrivateAclGroupListInput - a model defined in OpenAPI

        :param description: The description of this PrivateAclGroupListInput.
        :param name: The name of this PrivateAclGroupListInput.
        :param resource_type: The resource_type of this PrivateAclGroupListInput.
        :param tags: The tags of this PrivateAclGroupListInput.
        :param ttl: The ttl of this PrivateAclGroupListInput.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'resource_type': str,
            'tags': List[str],
            'ttl': int
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'resource_type': 'resource_type',
            'tags': 'tags',
            'ttl': 'ttl'
        }

        self._description = description
        self._name = name
        self._resource_type = resource_type
        self._tags = tags
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateAclGroupListInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateAclGroupListInput of this PrivateAclGroupListInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PrivateAclGroupListInput.


        :return: The description of this PrivateAclGroupListInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PrivateAclGroupListInput.


        :param description: The description of this PrivateAclGroupListInput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this PrivateAclGroupListInput.


        :return: The name of this PrivateAclGroupListInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrivateAclGroupListInput.


        :param name: The name of this PrivateAclGroupListInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this PrivateAclGroupListInput.


        :return: The resource_type of this PrivateAclGroupListInput.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this PrivateAclGroupListInput.


        :param resource_type: The resource_type of this PrivateAclGroupListInput.
        :type resource_type: str
        """
        allowed_values = ["UNKNOWN", "CIDR", "COUNTRY", "CONTINENT", "AS", "DATACENTER", "USERAGENT"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def tags(self):
        """Gets the tags of this PrivateAclGroupListInput.


        :return: The tags of this PrivateAclGroupListInput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PrivateAclGroupListInput.


        :param tags: The tags of this PrivateAclGroupListInput.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def ttl(self):
        """Gets the ttl of this PrivateAclGroupListInput.


        :return: The ttl of this PrivateAclGroupListInput.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this PrivateAclGroupListInput.


        :param ttl: The ttl of this PrivateAclGroupListInput.
        :type ttl: int
        """

        self._ttl = ttl
