# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AclGroupOriginOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: int=None, origin: str=None, _self: str=None, status: str=None, updated_at: int=None):
        """AclGroupOriginOutput - a model defined in OpenAPI

        :param created_at: The created_at of this AclGroupOriginOutput.
        :param origin: The origin of this AclGroupOriginOutput.
        :param _self: The _self of this AclGroupOriginOutput.
        :param status: The status of this AclGroupOriginOutput.
        :param updated_at: The updated_at of this AclGroupOriginOutput.
        """
        self.openapi_types = {
            'created_at': int,
            'origin': str,
            '_self': str,
            'status': str,
            'updated_at': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'origin': 'origin',
            '_self': 'self',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._origin = origin
        self.__self = _self
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AclGroupOriginOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AclGroupOriginOutput of this AclGroupOriginOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this AclGroupOriginOutput.


        :return: The created_at of this AclGroupOriginOutput.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AclGroupOriginOutput.


        :param created_at: The created_at of this AclGroupOriginOutput.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def origin(self):
        """Gets the origin of this AclGroupOriginOutput.


        :return: The origin of this AclGroupOriginOutput.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this AclGroupOriginOutput.


        :param origin: The origin of this AclGroupOriginOutput.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def _self(self):
        """Gets the _self of this AclGroupOriginOutput.


        :return: The _self of this AclGroupOriginOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AclGroupOriginOutput.


        :param _self: The _self of this AclGroupOriginOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def status(self):
        """Gets the status of this AclGroupOriginOutput.


        :return: The status of this AclGroupOriginOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AclGroupOriginOutput.


        :param status: The status of this AclGroupOriginOutput.
        :type status: str
        """
        allowed_values = ["INACTIVE", "ACTIVE", "EXPIRED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this AclGroupOriginOutput.


        :return: The updated_at of this AclGroupOriginOutput.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AclGroupOriginOutput.


        :param updated_at: The updated_at of this AclGroupOriginOutput.
        :type updated_at: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
