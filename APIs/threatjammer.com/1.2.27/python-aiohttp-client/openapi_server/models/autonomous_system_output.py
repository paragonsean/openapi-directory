# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AutonomousSystemOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, description: str=None, name: str=None, prefixes: str=None, registry: str=None, registry_date: str=None, risk: str=None, score: int=None, _self: str=None, status: str=None):
        """AutonomousSystemOutput - a model defined in OpenAPI

        :param country_code: The country_code of this AutonomousSystemOutput.
        :param description: The description of this AutonomousSystemOutput.
        :param name: The name of this AutonomousSystemOutput.
        :param prefixes: The prefixes of this AutonomousSystemOutput.
        :param registry: The registry of this AutonomousSystemOutput.
        :param registry_date: The registry_date of this AutonomousSystemOutput.
        :param risk: The risk of this AutonomousSystemOutput.
        :param score: The score of this AutonomousSystemOutput.
        :param _self: The _self of this AutonomousSystemOutput.
        :param status: The status of this AutonomousSystemOutput.
        """
        self.openapi_types = {
            'country_code': str,
            'description': str,
            'name': str,
            'prefixes': str,
            'registry': str,
            'registry_date': str,
            'risk': str,
            'score': int,
            '_self': str,
            'status': str
        }

        self.attribute_map = {
            'country_code': 'country_code',
            'description': 'description',
            'name': 'name',
            'prefixes': 'prefixes',
            'registry': 'registry',
            'registry_date': 'registry_date',
            'risk': 'risk',
            'score': 'score',
            '_self': 'self',
            'status': 'status'
        }

        self._country_code = country_code
        self._description = description
        self._name = name
        self._prefixes = prefixes
        self._registry = registry
        self._registry_date = registry_date
        self._risk = risk
        self._score = score
        self.__self = _self
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutonomousSystemOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutonomousSystemOutput of this AutonomousSystemOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this AutonomousSystemOutput.


        :return: The country_code of this AutonomousSystemOutput.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this AutonomousSystemOutput.


        :param country_code: The country_code of this AutonomousSystemOutput.
        :type country_code: str
        """
        allowed_values = ["AF", "AP", "AX", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AT", "AZ", "BS", "BH", "BD", "BB", "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR", "IO", "BN", "BG", "BF", "BI", "CV", "KH", "CM", "CA", "KY", "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM", "CG", "CD", "CK", "CR", "CI", "HR", "CU", "CW", "CY", "CZ", "DK", "DJ", "DM", "DO", "EC", "EG", "SV", "GQ", "ER", "EE", "ET", "FK", "FO", "FJ", "FI", "FR", "GF", "PF", "TF", "GA", "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU", "GT", "GG", "GN", "GW", "GY", "HT", "HM", "VA", "HN", "HK", "HU", "IS", "IN", "ID", "IR", "IQ", "IE", "IM", "IL", "IT", "JM", "JP", "JE", "JO", "KZ", "KE", "KI", "KP", "KR", "KW", "KG", "LA", "LV", "LB", "LS", "LR", "LY", "LI", "LT", "LU", "MO", "MK", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MQ", "MR", "MU", "YT", "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "NL", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "MP", "false", "OM", "PK", "PW", "PS", "PA", "PG", "PY", "PE", "PH", "PN", "PL", "PT", "PR", "QA", "RE", "RO", "RU", "RW", "BL", "SH", "KN", "LC", "MF", "PM", "VC", "WS", "SM", "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SK", "SI", "SB", "SO", "ZA", "GS", "SS", "ES", "LK", "SD", "SR", "SJ", "SZ", "SE", "CH", "SY", "TW", "TJ", "TZ", "TH", "TL", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV", "UG", "UA", "AE", "GB", "US", "UM", "UY", "UZ", "VU", "VE", "VN", "VG", "VI", "WF", "EH", "YE", "ZM", "ZW", "ZZ", "EU", "RESERVED BY RFC6793"]  # noqa: E501
        if country_code not in allowed_values:
            raise ValueError(
                "Invalid value for `country_code` ({0}), must be one of {1}"
                .format(country_code, allowed_values)
            )

        self._country_code = country_code

    @property
    def description(self):
        """Gets the description of this AutonomousSystemOutput.


        :return: The description of this AutonomousSystemOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutonomousSystemOutput.


        :param description: The description of this AutonomousSystemOutput.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this AutonomousSystemOutput.


        :return: The name of this AutonomousSystemOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutonomousSystemOutput.


        :param name: The name of this AutonomousSystemOutput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prefixes(self):
        """Gets the prefixes of this AutonomousSystemOutput.


        :return: The prefixes of this AutonomousSystemOutput.
        :rtype: str
        """
        return self._prefixes

    @prefixes.setter
    def prefixes(self, prefixes):
        """Sets the prefixes of this AutonomousSystemOutput.


        :param prefixes: The prefixes of this AutonomousSystemOutput.
        :type prefixes: str
        """
        if prefixes is None:
            raise ValueError("Invalid value for `prefixes`, must not be `None`")

        self._prefixes = prefixes

    @property
    def registry(self):
        """Gets the registry of this AutonomousSystemOutput.


        :return: The registry of this AutonomousSystemOutput.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this AutonomousSystemOutput.


        :param registry: The registry of this AutonomousSystemOutput.
        :type registry: str
        """
        if registry is None:
            raise ValueError("Invalid value for `registry`, must not be `None`")

        self._registry = registry

    @property
    def registry_date(self):
        """Gets the registry_date of this AutonomousSystemOutput.


        :return: The registry_date of this AutonomousSystemOutput.
        :rtype: str
        """
        return self._registry_date

    @registry_date.setter
    def registry_date(self, registry_date):
        """Sets the registry_date of this AutonomousSystemOutput.


        :param registry_date: The registry_date of this AutonomousSystemOutput.
        :type registry_date: str
        """
        if registry_date is not None and not re.search(r'^(\d{4})(\d{2})(\d{2})$', registry_date):
            raise ValueError("Invalid value for `registry_date`, must be a follow pattern or equal to `/^(\d{4})(\d{2})(\d{2})$/`")

        self._registry_date = registry_date

    @property
    def risk(self):
        """Gets the risk of this AutonomousSystemOutput.


        :return: The risk of this AutonomousSystemOutput.
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this AutonomousSystemOutput.


        :param risk: The risk of this AutonomousSystemOutput.
        :type risk: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if risk not in allowed_values:
            raise ValueError(
                "Invalid value for `risk` ({0}), must be one of {1}"
                .format(risk, allowed_values)
            )

        self._risk = risk

    @property
    def score(self):
        """Gets the score of this AutonomousSystemOutput.


        :return: The score of this AutonomousSystemOutput.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this AutonomousSystemOutput.


        :param score: The score of this AutonomousSystemOutput.
        :type score: int
        """

        self._score = score

    @property
    def _self(self):
        """Gets the _self of this AutonomousSystemOutput.


        :return: The _self of this AutonomousSystemOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AutonomousSystemOutput.


        :param _self: The _self of this AutonomousSystemOutput.
        :type _self: str
        """

        self.__self = _self

    @property
    def status(self):
        """Gets the status of this AutonomousSystemOutput.


        :return: The status of this AutonomousSystemOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutonomousSystemOutput.


        :param status: The status of this AutonomousSystemOutput.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
