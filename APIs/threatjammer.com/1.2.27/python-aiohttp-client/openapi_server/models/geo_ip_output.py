# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeoIPOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy_radius: float=None, asn_country_iso_code: str=None, city_geoname_code: int=None, city_name: str=None, continent_code: str=None, country_iso_code: str=None, hostnames: List[str]=None, latitude: float=None, longitude: float=None, postal_code: str=None, region_geoname_code: int=None, region_name: str=None, _self: str=None, time_zone: str=None):
        """GeoIPOutput - a model defined in OpenAPI

        :param accuracy_radius: The accuracy_radius of this GeoIPOutput.
        :param asn_country_iso_code: The asn_country_iso_code of this GeoIPOutput.
        :param city_geoname_code: The city_geoname_code of this GeoIPOutput.
        :param city_name: The city_name of this GeoIPOutput.
        :param continent_code: The continent_code of this GeoIPOutput.
        :param country_iso_code: The country_iso_code of this GeoIPOutput.
        :param hostnames: The hostnames of this GeoIPOutput.
        :param latitude: The latitude of this GeoIPOutput.
        :param longitude: The longitude of this GeoIPOutput.
        :param postal_code: The postal_code of this GeoIPOutput.
        :param region_geoname_code: The region_geoname_code of this GeoIPOutput.
        :param region_name: The region_name of this GeoIPOutput.
        :param _self: The _self of this GeoIPOutput.
        :param time_zone: The time_zone of this GeoIPOutput.
        """
        self.openapi_types = {
            'accuracy_radius': float,
            'asn_country_iso_code': str,
            'city_geoname_code': int,
            'city_name': str,
            'continent_code': str,
            'country_iso_code': str,
            'hostnames': List[str],
            'latitude': float,
            'longitude': float,
            'postal_code': str,
            'region_geoname_code': int,
            'region_name': str,
            '_self': str,
            'time_zone': str
        }

        self.attribute_map = {
            'accuracy_radius': 'accuracy_radius',
            'asn_country_iso_code': 'asn_country_iso_code',
            'city_geoname_code': 'city_geoname_code',
            'city_name': 'city_name',
            'continent_code': 'continent_code',
            'country_iso_code': 'country_iso_code',
            'hostnames': 'hostnames',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'postal_code': 'postal_code',
            'region_geoname_code': 'region_geoname_code',
            'region_name': 'region_name',
            '_self': 'self',
            'time_zone': 'time_zone'
        }

        self._accuracy_radius = accuracy_radius
        self._asn_country_iso_code = asn_country_iso_code
        self._city_geoname_code = city_geoname_code
        self._city_name = city_name
        self._continent_code = continent_code
        self._country_iso_code = country_iso_code
        self._hostnames = hostnames
        self._latitude = latitude
        self._longitude = longitude
        self._postal_code = postal_code
        self._region_geoname_code = region_geoname_code
        self._region_name = region_name
        self.__self = _self
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoIPOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoIPOutput of this GeoIPOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy_radius(self):
        """Gets the accuracy_radius of this GeoIPOutput.


        :return: The accuracy_radius of this GeoIPOutput.
        :rtype: float
        """
        return self._accuracy_radius

    @accuracy_radius.setter
    def accuracy_radius(self, accuracy_radius):
        """Sets the accuracy_radius of this GeoIPOutput.


        :param accuracy_radius: The accuracy_radius of this GeoIPOutput.
        :type accuracy_radius: float
        """
        if accuracy_radius is None:
            raise ValueError("Invalid value for `accuracy_radius`, must not be `None`")

        self._accuracy_radius = accuracy_radius

    @property
    def asn_country_iso_code(self):
        """Gets the asn_country_iso_code of this GeoIPOutput.


        :return: The asn_country_iso_code of this GeoIPOutput.
        :rtype: str
        """
        return self._asn_country_iso_code

    @asn_country_iso_code.setter
    def asn_country_iso_code(self, asn_country_iso_code):
        """Sets the asn_country_iso_code of this GeoIPOutput.


        :param asn_country_iso_code: The asn_country_iso_code of this GeoIPOutput.
        :type asn_country_iso_code: str
        """
        if asn_country_iso_code is None:
            raise ValueError("Invalid value for `asn_country_iso_code`, must not be `None`")

        self._asn_country_iso_code = asn_country_iso_code

    @property
    def city_geoname_code(self):
        """Gets the city_geoname_code of this GeoIPOutput.


        :return: The city_geoname_code of this GeoIPOutput.
        :rtype: int
        """
        return self._city_geoname_code

    @city_geoname_code.setter
    def city_geoname_code(self, city_geoname_code):
        """Sets the city_geoname_code of this GeoIPOutput.


        :param city_geoname_code: The city_geoname_code of this GeoIPOutput.
        :type city_geoname_code: int
        """
        if city_geoname_code is None:
            raise ValueError("Invalid value for `city_geoname_code`, must not be `None`")

        self._city_geoname_code = city_geoname_code

    @property
    def city_name(self):
        """Gets the city_name of this GeoIPOutput.


        :return: The city_name of this GeoIPOutput.
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this GeoIPOutput.


        :param city_name: The city_name of this GeoIPOutput.
        :type city_name: str
        """
        if city_name is None:
            raise ValueError("Invalid value for `city_name`, must not be `None`")

        self._city_name = city_name

    @property
    def continent_code(self):
        """Gets the continent_code of this GeoIPOutput.


        :return: The continent_code of this GeoIPOutput.
        :rtype: str
        """
        return self._continent_code

    @continent_code.setter
    def continent_code(self, continent_code):
        """Sets the continent_code of this GeoIPOutput.


        :param continent_code: The continent_code of this GeoIPOutput.
        :type continent_code: str
        """
        if continent_code is None:
            raise ValueError("Invalid value for `continent_code`, must not be `None`")

        self._continent_code = continent_code

    @property
    def country_iso_code(self):
        """Gets the country_iso_code of this GeoIPOutput.


        :return: The country_iso_code of this GeoIPOutput.
        :rtype: str
        """
        return self._country_iso_code

    @country_iso_code.setter
    def country_iso_code(self, country_iso_code):
        """Sets the country_iso_code of this GeoIPOutput.


        :param country_iso_code: The country_iso_code of this GeoIPOutput.
        :type country_iso_code: str
        """
        if country_iso_code is None:
            raise ValueError("Invalid value for `country_iso_code`, must not be `None`")

        self._country_iso_code = country_iso_code

    @property
    def hostnames(self):
        """Gets the hostnames of this GeoIPOutput.


        :return: The hostnames of this GeoIPOutput.
        :rtype: List[str]
        """
        return self._hostnames

    @hostnames.setter
    def hostnames(self, hostnames):
        """Sets the hostnames of this GeoIPOutput.


        :param hostnames: The hostnames of this GeoIPOutput.
        :type hostnames: List[str]
        """
        if hostnames is None:
            raise ValueError("Invalid value for `hostnames`, must not be `None`")

        self._hostnames = hostnames

    @property
    def latitude(self):
        """Gets the latitude of this GeoIPOutput.


        :return: The latitude of this GeoIPOutput.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GeoIPOutput.


        :param latitude: The latitude of this GeoIPOutput.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GeoIPOutput.


        :return: The longitude of this GeoIPOutput.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GeoIPOutput.


        :param longitude: The longitude of this GeoIPOutput.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def postal_code(self):
        """Gets the postal_code of this GeoIPOutput.


        :return: The postal_code of this GeoIPOutput.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this GeoIPOutput.


        :param postal_code: The postal_code of this GeoIPOutput.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def region_geoname_code(self):
        """Gets the region_geoname_code of this GeoIPOutput.


        :return: The region_geoname_code of this GeoIPOutput.
        :rtype: int
        """
        return self._region_geoname_code

    @region_geoname_code.setter
    def region_geoname_code(self, region_geoname_code):
        """Sets the region_geoname_code of this GeoIPOutput.


        :param region_geoname_code: The region_geoname_code of this GeoIPOutput.
        :type region_geoname_code: int
        """
        if region_geoname_code is None:
            raise ValueError("Invalid value for `region_geoname_code`, must not be `None`")

        self._region_geoname_code = region_geoname_code

    @property
    def region_name(self):
        """Gets the region_name of this GeoIPOutput.


        :return: The region_name of this GeoIPOutput.
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this GeoIPOutput.


        :param region_name: The region_name of this GeoIPOutput.
        :type region_name: str
        """
        if region_name is None:
            raise ValueError("Invalid value for `region_name`, must not be `None`")

        self._region_name = region_name

    @property
    def _self(self):
        """Gets the _self of this GeoIPOutput.


        :return: The _self of this GeoIPOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this GeoIPOutput.


        :param _self: The _self of this GeoIPOutput.
        :type _self: str
        """

        self.__self = _self

    @property
    def time_zone(self):
        """Gets the time_zone of this GeoIPOutput.


        :return: The time_zone of this GeoIPOutput.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this GeoIPOutput.


        :param time_zone: The time_zone of this GeoIPOutput.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone
