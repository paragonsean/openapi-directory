# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OriginOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: str=None, addresses: str=None, config: object=None, cookies: str=None, created_at: int=None, logs: str=None, origin: str=None, scripts: str=None, _self: str=None, status: str=None, token: str=None, updated_at: int=None):
        """OriginOutput - a model defined in OpenAPI

        :param actions: The actions of this OriginOutput.
        :param addresses: The addresses of this OriginOutput.
        :param config: The config of this OriginOutput.
        :param cookies: The cookies of this OriginOutput.
        :param created_at: The created_at of this OriginOutput.
        :param logs: The logs of this OriginOutput.
        :param origin: The origin of this OriginOutput.
        :param scripts: The scripts of this OriginOutput.
        :param _self: The _self of this OriginOutput.
        :param status: The status of this OriginOutput.
        :param token: The token of this OriginOutput.
        :param updated_at: The updated_at of this OriginOutput.
        """
        self.openapi_types = {
            'actions': str,
            'addresses': str,
            'config': object,
            'cookies': str,
            'created_at': int,
            'logs': str,
            'origin': str,
            'scripts': str,
            '_self': str,
            'status': str,
            'token': str,
            'updated_at': int
        }

        self.attribute_map = {
            'actions': 'actions',
            'addresses': 'addresses',
            'config': 'config',
            'cookies': 'cookies',
            'created_at': 'created_at',
            'logs': 'logs',
            'origin': 'origin',
            'scripts': 'scripts',
            '_self': 'self',
            'status': 'status',
            'token': 'token',
            'updated_at': 'updated_at'
        }

        self._actions = actions
        self._addresses = addresses
        self._config = config
        self._cookies = cookies
        self._created_at = created_at
        self._logs = logs
        self._origin = origin
        self._scripts = scripts
        self.__self = _self
        self._status = status
        self._token = token
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginOutput of this OriginOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this OriginOutput.


        :return: The actions of this OriginOutput.
        :rtype: str
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this OriginOutput.


        :param actions: The actions of this OriginOutput.
        :type actions: str
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def addresses(self):
        """Gets the addresses of this OriginOutput.


        :return: The addresses of this OriginOutput.
        :rtype: str
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this OriginOutput.


        :param addresses: The addresses of this OriginOutput.
        :type addresses: str
        """
        if addresses is None:
            raise ValueError("Invalid value for `addresses`, must not be `None`")

        self._addresses = addresses

    @property
    def config(self):
        """Gets the config of this OriginOutput.


        :return: The config of this OriginOutput.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this OriginOutput.


        :param config: The config of this OriginOutput.
        :type config: object
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")

        self._config = config

    @property
    def cookies(self):
        """Gets the cookies of this OriginOutput.


        :return: The cookies of this OriginOutput.
        :rtype: str
        """
        return self._cookies

    @cookies.setter
    def cookies(self, cookies):
        """Sets the cookies of this OriginOutput.


        :param cookies: The cookies of this OriginOutput.
        :type cookies: str
        """
        if cookies is None:
            raise ValueError("Invalid value for `cookies`, must not be `None`")

        self._cookies = cookies

    @property
    def created_at(self):
        """Gets the created_at of this OriginOutput.


        :return: The created_at of this OriginOutput.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OriginOutput.


        :param created_at: The created_at of this OriginOutput.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def logs(self):
        """Gets the logs of this OriginOutput.


        :return: The logs of this OriginOutput.
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this OriginOutput.


        :param logs: The logs of this OriginOutput.
        :type logs: str
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")

        self._logs = logs

    @property
    def origin(self):
        """Gets the origin of this OriginOutput.


        :return: The origin of this OriginOutput.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this OriginOutput.


        :param origin: The origin of this OriginOutput.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def scripts(self):
        """Gets the scripts of this OriginOutput.


        :return: The scripts of this OriginOutput.
        :rtype: str
        """
        return self._scripts

    @scripts.setter
    def scripts(self, scripts):
        """Sets the scripts of this OriginOutput.


        :param scripts: The scripts of this OriginOutput.
        :type scripts: str
        """
        if scripts is None:
            raise ValueError("Invalid value for `scripts`, must not be `None`")

        self._scripts = scripts

    @property
    def _self(self):
        """Gets the _self of this OriginOutput.


        :return: The _self of this OriginOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this OriginOutput.


        :param _self: The _self of this OriginOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def status(self):
        """Gets the status of this OriginOutput.


        :return: The status of this OriginOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OriginOutput.


        :param status: The status of this OriginOutput.
        :type status: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def token(self):
        """Gets the token of this OriginOutput.


        :return: The token of this OriginOutput.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this OriginOutput.


        :param token: The token of this OriginOutput.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def updated_at(self):
        """Gets the updated_at of this OriginOutput.


        :return: The updated_at of this OriginOutput.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OriginOutput.


        :param updated_at: The updated_at of this OriginOutput.
        :type updated_at: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
