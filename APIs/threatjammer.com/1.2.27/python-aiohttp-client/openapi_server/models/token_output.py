# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: int=None, last_minute_bucket_init_value: int=None, last_minute_bucket_refill_ratio: int=None, last_minute_bucket_refresh: int=None, last_minute_bucket_value: int=None, last_month_bucket_init_value: int=None, last_month_bucket_refresh: int=None, last_month_bucket_value: int=None, region_id: str=None, _self: str=None, status: str=None, updated_at: int=None):
        """TokenOutput - a model defined in OpenAPI

        :param created_at: The created_at of this TokenOutput.
        :param last_minute_bucket_init_value: The last_minute_bucket_init_value of this TokenOutput.
        :param last_minute_bucket_refill_ratio: The last_minute_bucket_refill_ratio of this TokenOutput.
        :param last_minute_bucket_refresh: The last_minute_bucket_refresh of this TokenOutput.
        :param last_minute_bucket_value: The last_minute_bucket_value of this TokenOutput.
        :param last_month_bucket_init_value: The last_month_bucket_init_value of this TokenOutput.
        :param last_month_bucket_refresh: The last_month_bucket_refresh of this TokenOutput.
        :param last_month_bucket_value: The last_month_bucket_value of this TokenOutput.
        :param region_id: The region_id of this TokenOutput.
        :param _self: The _self of this TokenOutput.
        :param status: The status of this TokenOutput.
        :param updated_at: The updated_at of this TokenOutput.
        """
        self.openapi_types = {
            'created_at': int,
            'last_minute_bucket_init_value': int,
            'last_minute_bucket_refill_ratio': int,
            'last_minute_bucket_refresh': int,
            'last_minute_bucket_value': int,
            'last_month_bucket_init_value': int,
            'last_month_bucket_refresh': int,
            'last_month_bucket_value': int,
            'region_id': str,
            '_self': str,
            'status': str,
            'updated_at': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'last_minute_bucket_init_value': 'last_minute_bucket_init_value',
            'last_minute_bucket_refill_ratio': 'last_minute_bucket_refill_ratio',
            'last_minute_bucket_refresh': 'last_minute_bucket_refresh',
            'last_minute_bucket_value': 'last_minute_bucket_value',
            'last_month_bucket_init_value': 'last_month_bucket_init_value',
            'last_month_bucket_refresh': 'last_month_bucket_refresh',
            'last_month_bucket_value': 'last_month_bucket_value',
            'region_id': 'region_id',
            '_self': 'self',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._last_minute_bucket_init_value = last_minute_bucket_init_value
        self._last_minute_bucket_refill_ratio = last_minute_bucket_refill_ratio
        self._last_minute_bucket_refresh = last_minute_bucket_refresh
        self._last_minute_bucket_value = last_minute_bucket_value
        self._last_month_bucket_init_value = last_month_bucket_init_value
        self._last_month_bucket_refresh = last_month_bucket_refresh
        self._last_month_bucket_value = last_month_bucket_value
        self._region_id = region_id
        self.__self = _self
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenOutput of this TokenOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this TokenOutput.


        :return: The created_at of this TokenOutput.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TokenOutput.


        :param created_at: The created_at of this TokenOutput.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def last_minute_bucket_init_value(self):
        """Gets the last_minute_bucket_init_value of this TokenOutput.


        :return: The last_minute_bucket_init_value of this TokenOutput.
        :rtype: int
        """
        return self._last_minute_bucket_init_value

    @last_minute_bucket_init_value.setter
    def last_minute_bucket_init_value(self, last_minute_bucket_init_value):
        """Sets the last_minute_bucket_init_value of this TokenOutput.


        :param last_minute_bucket_init_value: The last_minute_bucket_init_value of this TokenOutput.
        :type last_minute_bucket_init_value: int
        """
        if last_minute_bucket_init_value is None:
            raise ValueError("Invalid value for `last_minute_bucket_init_value`, must not be `None`")

        self._last_minute_bucket_init_value = last_minute_bucket_init_value

    @property
    def last_minute_bucket_refill_ratio(self):
        """Gets the last_minute_bucket_refill_ratio of this TokenOutput.


        :return: The last_minute_bucket_refill_ratio of this TokenOutput.
        :rtype: int
        """
        return self._last_minute_bucket_refill_ratio

    @last_minute_bucket_refill_ratio.setter
    def last_minute_bucket_refill_ratio(self, last_minute_bucket_refill_ratio):
        """Sets the last_minute_bucket_refill_ratio of this TokenOutput.


        :param last_minute_bucket_refill_ratio: The last_minute_bucket_refill_ratio of this TokenOutput.
        :type last_minute_bucket_refill_ratio: int
        """
        if last_minute_bucket_refill_ratio is None:
            raise ValueError("Invalid value for `last_minute_bucket_refill_ratio`, must not be `None`")

        self._last_minute_bucket_refill_ratio = last_minute_bucket_refill_ratio

    @property
    def last_minute_bucket_refresh(self):
        """Gets the last_minute_bucket_refresh of this TokenOutput.


        :return: The last_minute_bucket_refresh of this TokenOutput.
        :rtype: int
        """
        return self._last_minute_bucket_refresh

    @last_minute_bucket_refresh.setter
    def last_minute_bucket_refresh(self, last_minute_bucket_refresh):
        """Sets the last_minute_bucket_refresh of this TokenOutput.


        :param last_minute_bucket_refresh: The last_minute_bucket_refresh of this TokenOutput.
        :type last_minute_bucket_refresh: int
        """
        if last_minute_bucket_refresh is None:
            raise ValueError("Invalid value for `last_minute_bucket_refresh`, must not be `None`")

        self._last_minute_bucket_refresh = last_minute_bucket_refresh

    @property
    def last_minute_bucket_value(self):
        """Gets the last_minute_bucket_value of this TokenOutput.


        :return: The last_minute_bucket_value of this TokenOutput.
        :rtype: int
        """
        return self._last_minute_bucket_value

    @last_minute_bucket_value.setter
    def last_minute_bucket_value(self, last_minute_bucket_value):
        """Sets the last_minute_bucket_value of this TokenOutput.


        :param last_minute_bucket_value: The last_minute_bucket_value of this TokenOutput.
        :type last_minute_bucket_value: int
        """
        if last_minute_bucket_value is None:
            raise ValueError("Invalid value for `last_minute_bucket_value`, must not be `None`")

        self._last_minute_bucket_value = last_minute_bucket_value

    @property
    def last_month_bucket_init_value(self):
        """Gets the last_month_bucket_init_value of this TokenOutput.


        :return: The last_month_bucket_init_value of this TokenOutput.
        :rtype: int
        """
        return self._last_month_bucket_init_value

    @last_month_bucket_init_value.setter
    def last_month_bucket_init_value(self, last_month_bucket_init_value):
        """Sets the last_month_bucket_init_value of this TokenOutput.


        :param last_month_bucket_init_value: The last_month_bucket_init_value of this TokenOutput.
        :type last_month_bucket_init_value: int
        """
        if last_month_bucket_init_value is None:
            raise ValueError("Invalid value for `last_month_bucket_init_value`, must not be `None`")

        self._last_month_bucket_init_value = last_month_bucket_init_value

    @property
    def last_month_bucket_refresh(self):
        """Gets the last_month_bucket_refresh of this TokenOutput.


        :return: The last_month_bucket_refresh of this TokenOutput.
        :rtype: int
        """
        return self._last_month_bucket_refresh

    @last_month_bucket_refresh.setter
    def last_month_bucket_refresh(self, last_month_bucket_refresh):
        """Sets the last_month_bucket_refresh of this TokenOutput.


        :param last_month_bucket_refresh: The last_month_bucket_refresh of this TokenOutput.
        :type last_month_bucket_refresh: int
        """
        if last_month_bucket_refresh is None:
            raise ValueError("Invalid value for `last_month_bucket_refresh`, must not be `None`")

        self._last_month_bucket_refresh = last_month_bucket_refresh

    @property
    def last_month_bucket_value(self):
        """Gets the last_month_bucket_value of this TokenOutput.


        :return: The last_month_bucket_value of this TokenOutput.
        :rtype: int
        """
        return self._last_month_bucket_value

    @last_month_bucket_value.setter
    def last_month_bucket_value(self, last_month_bucket_value):
        """Sets the last_month_bucket_value of this TokenOutput.


        :param last_month_bucket_value: The last_month_bucket_value of this TokenOutput.
        :type last_month_bucket_value: int
        """
        if last_month_bucket_value is None:
            raise ValueError("Invalid value for `last_month_bucket_value`, must not be `None`")

        self._last_month_bucket_value = last_month_bucket_value

    @property
    def region_id(self):
        """Gets the region_id of this TokenOutput.


        :return: The region_id of this TokenOutput.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this TokenOutput.


        :param region_id: The region_id of this TokenOutput.
        :type region_id: str
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id

    @property
    def _self(self):
        """Gets the _self of this TokenOutput.


        :return: The _self of this TokenOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this TokenOutput.


        :param _self: The _self of this TokenOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def status(self):
        """Gets the status of this TokenOutput.


        :return: The status of this TokenOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TokenOutput.


        :param status: The status of this TokenOutput.
        :type status: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this TokenOutput.


        :return: The updated_at of this TokenOutput.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TokenOutput.


        :param updated_at: The updated_at of this TokenOutput.
        :type updated_at: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
