# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_output import ActivityOutput
from openapi_server import util


class ActivityCollectionOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activities: List[ActivityOutput]=None, page: int=None, page_size: int=None, _self: str=None):
        """ActivityCollectionOutput - a model defined in OpenAPI

        :param activities: The activities of this ActivityCollectionOutput.
        :param page: The page of this ActivityCollectionOutput.
        :param page_size: The page_size of this ActivityCollectionOutput.
        :param _self: The _self of this ActivityCollectionOutput.
        """
        self.openapi_types = {
            'activities': List[ActivityOutput],
            'page': int,
            'page_size': int,
            '_self': str
        }

        self.attribute_map = {
            'activities': 'activities',
            'page': 'page',
            'page_size': 'page_size',
            '_self': 'self'
        }

        self._activities = activities
        self._page = page
        self._page_size = page_size
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityCollectionOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityCollectionOutput of this ActivityCollectionOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activities(self):
        """Gets the activities of this ActivityCollectionOutput.


        :return: The activities of this ActivityCollectionOutput.
        :rtype: List[ActivityOutput]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this ActivityCollectionOutput.


        :param activities: The activities of this ActivityCollectionOutput.
        :type activities: List[ActivityOutput]
        """
        if activities is None:
            raise ValueError("Invalid value for `activities`, must not be `None`")

        self._activities = activities

    @property
    def page(self):
        """Gets the page of this ActivityCollectionOutput.


        :return: The page of this ActivityCollectionOutput.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ActivityCollectionOutput.


        :param page: The page of this ActivityCollectionOutput.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this ActivityCollectionOutput.


        :return: The page_size of this ActivityCollectionOutput.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ActivityCollectionOutput.


        :param page_size: The page_size of this ActivityCollectionOutput.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")

        self._page_size = page_size

    @property
    def _self(self):
        """Gets the _self of this ActivityCollectionOutput.


        :return: The _self of this ActivityCollectionOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ActivityCollectionOutput.


        :param _self: The _self of this ActivityCollectionOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
