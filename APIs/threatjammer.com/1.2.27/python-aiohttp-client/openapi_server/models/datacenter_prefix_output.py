# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatacenterPrefixOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datacenter: str=None, ip_abuse_total: int=0, max_score: int=0, min_score: int=0, risk: str=None, score: int=None, _self: str=None):
        """DatacenterPrefixOutput - a model defined in OpenAPI

        :param datacenter: The datacenter of this DatacenterPrefixOutput.
        :param ip_abuse_total: The ip_abuse_total of this DatacenterPrefixOutput.
        :param max_score: The max_score of this DatacenterPrefixOutput.
        :param min_score: The min_score of this DatacenterPrefixOutput.
        :param risk: The risk of this DatacenterPrefixOutput.
        :param score: The score of this DatacenterPrefixOutput.
        :param _self: The _self of this DatacenterPrefixOutput.
        """
        self.openapi_types = {
            'datacenter': str,
            'ip_abuse_total': int,
            'max_score': int,
            'min_score': int,
            'risk': str,
            'score': int,
            '_self': str
        }

        self.attribute_map = {
            'datacenter': 'datacenter',
            'ip_abuse_total': 'ip_abuse_total',
            'max_score': 'max_score',
            'min_score': 'min_score',
            'risk': 'risk',
            'score': 'score',
            '_self': 'self'
        }

        self._datacenter = datacenter
        self._ip_abuse_total = ip_abuse_total
        self._max_score = max_score
        self._min_score = min_score
        self._risk = risk
        self._score = score
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatacenterPrefixOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatacenterPrefixOutput of this DatacenterPrefixOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datacenter(self):
        """Gets the datacenter of this DatacenterPrefixOutput.


        :return: The datacenter of this DatacenterPrefixOutput.
        :rtype: str
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this DatacenterPrefixOutput.


        :param datacenter: The datacenter of this DatacenterPrefixOutput.
        :type datacenter: str
        """
        if datacenter is None:
            raise ValueError("Invalid value for `datacenter`, must not be `None`")

        self._datacenter = datacenter

    @property
    def ip_abuse_total(self):
        """Gets the ip_abuse_total of this DatacenterPrefixOutput.


        :return: The ip_abuse_total of this DatacenterPrefixOutput.
        :rtype: int
        """
        return self._ip_abuse_total

    @ip_abuse_total.setter
    def ip_abuse_total(self, ip_abuse_total):
        """Sets the ip_abuse_total of this DatacenterPrefixOutput.


        :param ip_abuse_total: The ip_abuse_total of this DatacenterPrefixOutput.
        :type ip_abuse_total: int
        """

        self._ip_abuse_total = ip_abuse_total

    @property
    def max_score(self):
        """Gets the max_score of this DatacenterPrefixOutput.


        :return: The max_score of this DatacenterPrefixOutput.
        :rtype: int
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this DatacenterPrefixOutput.


        :param max_score: The max_score of this DatacenterPrefixOutput.
        :type max_score: int
        """

        self._max_score = max_score

    @property
    def min_score(self):
        """Gets the min_score of this DatacenterPrefixOutput.


        :return: The min_score of this DatacenterPrefixOutput.
        :rtype: int
        """
        return self._min_score

    @min_score.setter
    def min_score(self, min_score):
        """Sets the min_score of this DatacenterPrefixOutput.


        :param min_score: The min_score of this DatacenterPrefixOutput.
        :type min_score: int
        """

        self._min_score = min_score

    @property
    def risk(self):
        """Gets the risk of this DatacenterPrefixOutput.


        :return: The risk of this DatacenterPrefixOutput.
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this DatacenterPrefixOutput.


        :param risk: The risk of this DatacenterPrefixOutput.
        :type risk: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if risk not in allowed_values:
            raise ValueError(
                "Invalid value for `risk` ({0}), must be one of {1}"
                .format(risk, allowed_values)
            )

        self._risk = risk

    @property
    def score(self):
        """Gets the score of this DatacenterPrefixOutput.


        :return: The score of this DatacenterPrefixOutput.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this DatacenterPrefixOutput.


        :param score: The score of this DatacenterPrefixOutput.
        :type score: int
        """

        self._score = score

    @property
    def _self(self):
        """Gets the _self of this DatacenterPrefixOutput.


        :return: The _self of this DatacenterPrefixOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this DatacenterPrefixOutput.


        :param _self: The _self of this DatacenterPrefixOutput.
        :type _self: str
        """

        self.__self = _self
