# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AutonomousSystemPrefixOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: str=None, description: str=None, mantainer: str=None, object_type: str=None, registry_date: str=None, registry_status: str=None, risk: str=None, score: int=None, _self: str=None):
        """AutonomousSystemPrefixOutput - a model defined in OpenAPI

        :param asn: The asn of this AutonomousSystemPrefixOutput.
        :param description: The description of this AutonomousSystemPrefixOutput.
        :param mantainer: The mantainer of this AutonomousSystemPrefixOutput.
        :param object_type: The object_type of this AutonomousSystemPrefixOutput.
        :param registry_date: The registry_date of this AutonomousSystemPrefixOutput.
        :param registry_status: The registry_status of this AutonomousSystemPrefixOutput.
        :param risk: The risk of this AutonomousSystemPrefixOutput.
        :param score: The score of this AutonomousSystemPrefixOutput.
        :param _self: The _self of this AutonomousSystemPrefixOutput.
        """
        self.openapi_types = {
            'asn': str,
            'description': str,
            'mantainer': str,
            'object_type': str,
            'registry_date': str,
            'registry_status': str,
            'risk': str,
            'score': int,
            '_self': str
        }

        self.attribute_map = {
            'asn': 'asn',
            'description': 'description',
            'mantainer': 'mantainer',
            'object_type': 'object_type',
            'registry_date': 'registry_date',
            'registry_status': 'registry_status',
            'risk': 'risk',
            'score': 'score',
            '_self': 'self'
        }

        self._asn = asn
        self._description = description
        self._mantainer = mantainer
        self._object_type = object_type
        self._registry_date = registry_date
        self._registry_status = registry_status
        self._risk = risk
        self._score = score
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutonomousSystemPrefixOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutonomousSystemPrefixOutput of this AutonomousSystemPrefixOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this AutonomousSystemPrefixOutput.


        :return: The asn of this AutonomousSystemPrefixOutput.
        :rtype: str
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this AutonomousSystemPrefixOutput.


        :param asn: The asn of this AutonomousSystemPrefixOutput.
        :type asn: str
        """

        self._asn = asn

    @property
    def description(self):
        """Gets the description of this AutonomousSystemPrefixOutput.


        :return: The description of this AutonomousSystemPrefixOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutonomousSystemPrefixOutput.


        :param description: The description of this AutonomousSystemPrefixOutput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def mantainer(self):
        """Gets the mantainer of this AutonomousSystemPrefixOutput.


        :return: The mantainer of this AutonomousSystemPrefixOutput.
        :rtype: str
        """
        return self._mantainer

    @mantainer.setter
    def mantainer(self, mantainer):
        """Sets the mantainer of this AutonomousSystemPrefixOutput.


        :param mantainer: The mantainer of this AutonomousSystemPrefixOutput.
        :type mantainer: str
        """
        if mantainer is None:
            raise ValueError("Invalid value for `mantainer`, must not be `None`")

        self._mantainer = mantainer

    @property
    def object_type(self):
        """Gets the object_type of this AutonomousSystemPrefixOutput.


        :return: The object_type of this AutonomousSystemPrefixOutput.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this AutonomousSystemPrefixOutput.


        :param object_type: The object_type of this AutonomousSystemPrefixOutput.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type

    @property
    def registry_date(self):
        """Gets the registry_date of this AutonomousSystemPrefixOutput.


        :return: The registry_date of this AutonomousSystemPrefixOutput.
        :rtype: str
        """
        return self._registry_date

    @registry_date.setter
    def registry_date(self, registry_date):
        """Sets the registry_date of this AutonomousSystemPrefixOutput.


        :param registry_date: The registry_date of this AutonomousSystemPrefixOutput.
        :type registry_date: str
        """
        if registry_date is not None and not re.search(r'^(\d{4})(\d{2})(\d{2})$', registry_date):
            raise ValueError("Invalid value for `registry_date`, must be a follow pattern or equal to `/^(\d{4})(\d{2})(\d{2})$/`")

        self._registry_date = registry_date

    @property
    def registry_status(self):
        """Gets the registry_status of this AutonomousSystemPrefixOutput.


        :return: The registry_status of this AutonomousSystemPrefixOutput.
        :rtype: str
        """
        return self._registry_status

    @registry_status.setter
    def registry_status(self, registry_status):
        """Sets the registry_status of this AutonomousSystemPrefixOutput.


        :param registry_status: The registry_status of this AutonomousSystemPrefixOutput.
        :type registry_status: str
        """

        self._registry_status = registry_status

    @property
    def risk(self):
        """Gets the risk of this AutonomousSystemPrefixOutput.


        :return: The risk of this AutonomousSystemPrefixOutput.
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this AutonomousSystemPrefixOutput.


        :param risk: The risk of this AutonomousSystemPrefixOutput.
        :type risk: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if risk not in allowed_values:
            raise ValueError(
                "Invalid value for `risk` ({0}), must be one of {1}"
                .format(risk, allowed_values)
            )

        self._risk = risk

    @property
    def score(self):
        """Gets the score of this AutonomousSystemPrefixOutput.


        :return: The score of this AutonomousSystemPrefixOutput.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this AutonomousSystemPrefixOutput.


        :param score: The score of this AutonomousSystemPrefixOutput.
        :type score: int
        """

        self._score = score

    @property
    def _self(self):
        """Gets the _self of this AutonomousSystemPrefixOutput.


        :return: The _self of this AutonomousSystemPrefixOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AutonomousSystemPrefixOutput.


        :param _self: The _self of this AutonomousSystemPrefixOutput.
        :type _self: str
        """

        self.__self = _self
