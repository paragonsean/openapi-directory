# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.origin_traffic_analysis_output import OriginTrafficAnalysisOutput
from openapi_server import util


class OriginTrafficAnalysisCollectionOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[OriginTrafficAnalysisOutput]=None, from_timestamp: int=None, interval: str=None, _self: str=None, to_timestamp: int=None):
        """OriginTrafficAnalysisCollectionOutput - a model defined in OpenAPI

        :param data: The data of this OriginTrafficAnalysisCollectionOutput.
        :param from_timestamp: The from_timestamp of this OriginTrafficAnalysisCollectionOutput.
        :param interval: The interval of this OriginTrafficAnalysisCollectionOutput.
        :param _self: The _self of this OriginTrafficAnalysisCollectionOutput.
        :param to_timestamp: The to_timestamp of this OriginTrafficAnalysisCollectionOutput.
        """
        self.openapi_types = {
            'data': List[OriginTrafficAnalysisOutput],
            'from_timestamp': int,
            'interval': str,
            '_self': str,
            'to_timestamp': int
        }

        self.attribute_map = {
            'data': 'data',
            'from_timestamp': 'from_timestamp',
            'interval': 'interval',
            '_self': 'self',
            'to_timestamp': 'to_timestamp'
        }

        self._data = data
        self._from_timestamp = from_timestamp
        self._interval = interval
        self.__self = _self
        self._to_timestamp = to_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginTrafficAnalysisCollectionOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginTrafficAnalysisCollectionOutput of this OriginTrafficAnalysisCollectionOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this OriginTrafficAnalysisCollectionOutput.


        :return: The data of this OriginTrafficAnalysisCollectionOutput.
        :rtype: List[OriginTrafficAnalysisOutput]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this OriginTrafficAnalysisCollectionOutput.


        :param data: The data of this OriginTrafficAnalysisCollectionOutput.
        :type data: List[OriginTrafficAnalysisOutput]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def from_timestamp(self):
        """Gets the from_timestamp of this OriginTrafficAnalysisCollectionOutput.


        :return: The from_timestamp of this OriginTrafficAnalysisCollectionOutput.
        :rtype: int
        """
        return self._from_timestamp

    @from_timestamp.setter
    def from_timestamp(self, from_timestamp):
        """Sets the from_timestamp of this OriginTrafficAnalysisCollectionOutput.


        :param from_timestamp: The from_timestamp of this OriginTrafficAnalysisCollectionOutput.
        :type from_timestamp: int
        """
        if from_timestamp is None:
            raise ValueError("Invalid value for `from_timestamp`, must not be `None`")

        self._from_timestamp = from_timestamp

    @property
    def interval(self):
        """Gets the interval of this OriginTrafficAnalysisCollectionOutput.


        :return: The interval of this OriginTrafficAnalysisCollectionOutput.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this OriginTrafficAnalysisCollectionOutput.


        :param interval: The interval of this OriginTrafficAnalysisCollectionOutput.
        :type interval: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def _self(self):
        """Gets the _self of this OriginTrafficAnalysisCollectionOutput.


        :return: The _self of this OriginTrafficAnalysisCollectionOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this OriginTrafficAnalysisCollectionOutput.


        :param _self: The _self of this OriginTrafficAnalysisCollectionOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def to_timestamp(self):
        """Gets the to_timestamp of this OriginTrafficAnalysisCollectionOutput.


        :return: The to_timestamp of this OriginTrafficAnalysisCollectionOutput.
        :rtype: int
        """
        return self._to_timestamp

    @to_timestamp.setter
    def to_timestamp(self, to_timestamp):
        """Sets the to_timestamp of this OriginTrafficAnalysisCollectionOutput.


        :param to_timestamp: The to_timestamp of this OriginTrafficAnalysisCollectionOutput.
        :type to_timestamp: int
        """
        if to_timestamp is None:
            raise ValueError("Invalid value for `to_timestamp`, must not be `None`")

        self._to_timestamp = to_timestamp
