# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V1ModelsTokenSourceOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, body: str=None, method: str=None, status_code: int=None, ua_string: str=None, uri: str=None):
        """V1ModelsTokenSourceOutput - a model defined in OpenAPI

        :param address: The address of this V1ModelsTokenSourceOutput.
        :param body: The body of this V1ModelsTokenSourceOutput.
        :param method: The method of this V1ModelsTokenSourceOutput.
        :param status_code: The status_code of this V1ModelsTokenSourceOutput.
        :param ua_string: The ua_string of this V1ModelsTokenSourceOutput.
        :param uri: The uri of this V1ModelsTokenSourceOutput.
        """
        self.openapi_types = {
            'address': str,
            'body': str,
            'method': str,
            'status_code': int,
            'ua_string': str,
            'uri': str
        }

        self.attribute_map = {
            'address': 'address',
            'body': 'body',
            'method': 'method',
            'status_code': 'status_code',
            'ua_string': 'ua_string',
            'uri': 'uri'
        }

        self._address = address
        self._body = body
        self._method = method
        self._status_code = status_code
        self._ua_string = ua_string
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1ModelsTokenSourceOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The v1__models__token__SourceOutput of this V1ModelsTokenSourceOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this V1ModelsTokenSourceOutput.


        :return: The address of this V1ModelsTokenSourceOutput.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this V1ModelsTokenSourceOutput.


        :param address: The address of this V1ModelsTokenSourceOutput.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def body(self):
        """Gets the body of this V1ModelsTokenSourceOutput.


        :return: The body of this V1ModelsTokenSourceOutput.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this V1ModelsTokenSourceOutput.


        :param body: The body of this V1ModelsTokenSourceOutput.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def method(self):
        """Gets the method of this V1ModelsTokenSourceOutput.


        :return: The method of this V1ModelsTokenSourceOutput.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this V1ModelsTokenSourceOutput.


        :param method: The method of this V1ModelsTokenSourceOutput.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def status_code(self):
        """Gets the status_code of this V1ModelsTokenSourceOutput.


        :return: The status_code of this V1ModelsTokenSourceOutput.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this V1ModelsTokenSourceOutput.


        :param status_code: The status_code of this V1ModelsTokenSourceOutput.
        :type status_code: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def ua_string(self):
        """Gets the ua_string of this V1ModelsTokenSourceOutput.


        :return: The ua_string of this V1ModelsTokenSourceOutput.
        :rtype: str
        """
        return self._ua_string

    @ua_string.setter
    def ua_string(self, ua_string):
        """Sets the ua_string of this V1ModelsTokenSourceOutput.


        :param ua_string: The ua_string of this V1ModelsTokenSourceOutput.
        :type ua_string: str
        """
        if ua_string is None:
            raise ValueError("Invalid value for `ua_string`, must not be `None`")

        self._ua_string = ua_string

    @property
    def uri(self):
        """Gets the uri of this V1ModelsTokenSourceOutput.


        :return: The uri of this V1ModelsTokenSourceOutput.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this V1ModelsTokenSourceOutput.


        :param uri: The uri of this V1ModelsTokenSourceOutput.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
