# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceTimeRangeOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: int=None, lapse: str=None, risk: str=None, score: int=None, _self: str=None, source: str=None, updated_at: int=None):
        """SourceTimeRangeOutput - a model defined in OpenAPI

        :param items: The items of this SourceTimeRangeOutput.
        :param lapse: The lapse of this SourceTimeRangeOutput.
        :param risk: The risk of this SourceTimeRangeOutput.
        :param score: The score of this SourceTimeRangeOutput.
        :param _self: The _self of this SourceTimeRangeOutput.
        :param source: The source of this SourceTimeRangeOutput.
        :param updated_at: The updated_at of this SourceTimeRangeOutput.
        """
        self.openapi_types = {
            'items': int,
            'lapse': str,
            'risk': str,
            'score': int,
            '_self': str,
            'source': str,
            'updated_at': int
        }

        self.attribute_map = {
            'items': 'items',
            'lapse': 'lapse',
            'risk': 'risk',
            'score': 'score',
            '_self': 'self',
            'source': 'source',
            'updated_at': 'updated_at'
        }

        self._items = items
        self._lapse = lapse
        self._risk = risk
        self._score = score
        self.__self = _self
        self._source = source
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceTimeRangeOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceTimeRangeOutput of this SourceTimeRangeOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this SourceTimeRangeOutput.


        :return: The items of this SourceTimeRangeOutput.
        :rtype: int
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SourceTimeRangeOutput.


        :param items: The items of this SourceTimeRangeOutput.
        :type items: int
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def lapse(self):
        """Gets the lapse of this SourceTimeRangeOutput.


        :return: The lapse of this SourceTimeRangeOutput.
        :rtype: str
        """
        return self._lapse

    @lapse.setter
    def lapse(self, lapse):
        """Sets the lapse of this SourceTimeRangeOutput.


        :param lapse: The lapse of this SourceTimeRangeOutput.
        :type lapse: str
        """
        allowed_values = ["1H", "6H", "12H", "1D", "7D", "30D", "90D", "180D", "365D"]  # noqa: E501
        if lapse not in allowed_values:
            raise ValueError(
                "Invalid value for `lapse` ({0}), must be one of {1}"
                .format(lapse, allowed_values)
            )

        self._lapse = lapse

    @property
    def risk(self):
        """Gets the risk of this SourceTimeRangeOutput.


        :return: The risk of this SourceTimeRangeOutput.
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this SourceTimeRangeOutput.


        :param risk: The risk of this SourceTimeRangeOutput.
        :type risk: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if risk not in allowed_values:
            raise ValueError(
                "Invalid value for `risk` ({0}), must be one of {1}"
                .format(risk, allowed_values)
            )

        self._risk = risk

    @property
    def score(self):
        """Gets the score of this SourceTimeRangeOutput.


        :return: The score of this SourceTimeRangeOutput.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SourceTimeRangeOutput.


        :param score: The score of this SourceTimeRangeOutput.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def _self(self):
        """Gets the _self of this SourceTimeRangeOutput.


        :return: The _self of this SourceTimeRangeOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this SourceTimeRangeOutput.


        :param _self: The _self of this SourceTimeRangeOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def source(self):
        """Gets the source of this SourceTimeRangeOutput.


        :return: The source of this SourceTimeRangeOutput.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SourceTimeRangeOutput.


        :param source: The source of this SourceTimeRangeOutput.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def updated_at(self):
        """Gets the updated_at of this SourceTimeRangeOutput.


        :return: The updated_at of this SourceTimeRangeOutput.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SourceTimeRangeOutput.


        :param updated_at: The updated_at of this SourceTimeRangeOutput.
        :type updated_at: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
