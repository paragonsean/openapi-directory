# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IPLogOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, cidr: str=None, dataset: str=None, lapse: str=None, risk: str=None, score: int=None, _self: str=None, source: str=None, timestamp: int=None):
        """IPLogOutput - a model defined in OpenAPI

        :param action: The action of this IPLogOutput.
        :param cidr: The cidr of this IPLogOutput.
        :param dataset: The dataset of this IPLogOutput.
        :param lapse: The lapse of this IPLogOutput.
        :param risk: The risk of this IPLogOutput.
        :param score: The score of this IPLogOutput.
        :param _self: The _self of this IPLogOutput.
        :param source: The source of this IPLogOutput.
        :param timestamp: The timestamp of this IPLogOutput.
        """
        self.openapi_types = {
            'action': str,
            'cidr': str,
            'dataset': str,
            'lapse': str,
            'risk': str,
            'score': int,
            '_self': str,
            'source': str,
            'timestamp': int
        }

        self.attribute_map = {
            'action': 'action',
            'cidr': 'cidr',
            'dataset': 'dataset',
            'lapse': 'lapse',
            'risk': 'risk',
            'score': 'score',
            '_self': 'self',
            'source': 'source',
            'timestamp': 'timestamp'
        }

        self._action = action
        self._cidr = cidr
        self._dataset = dataset
        self._lapse = lapse
        self._risk = risk
        self._score = score
        self.__self = _self
        self._source = source
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPLogOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPLogOutput of this IPLogOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this IPLogOutput.


        :return: The action of this IPLogOutput.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IPLogOutput.


        :param action: The action of this IPLogOutput.
        :type action: str
        """
        allowed_values = ["ADD", "DELETE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def cidr(self):
        """Gets the cidr of this IPLogOutput.


        :return: The cidr of this IPLogOutput.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this IPLogOutput.


        :param cidr: The cidr of this IPLogOutput.
        :type cidr: str
        """

        self._cidr = cidr

    @property
    def dataset(self):
        """Gets the dataset of this IPLogOutput.


        :return: The dataset of this IPLogOutput.
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this IPLogOutput.


        :param dataset: The dataset of this IPLogOutput.
        :type dataset: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")

        self._dataset = dataset

    @property
    def lapse(self):
        """Gets the lapse of this IPLogOutput.


        :return: The lapse of this IPLogOutput.
        :rtype: str
        """
        return self._lapse

    @lapse.setter
    def lapse(self, lapse):
        """Sets the lapse of this IPLogOutput.


        :param lapse: The lapse of this IPLogOutput.
        :type lapse: str
        """
        allowed_values = ["1H", "6H", "12H", "1D", "7D", "30D", "90D", "180D", "365D"]  # noqa: E501
        if lapse not in allowed_values:
            raise ValueError(
                "Invalid value for `lapse` ({0}), must be one of {1}"
                .format(lapse, allowed_values)
            )

        self._lapse = lapse

    @property
    def risk(self):
        """Gets the risk of this IPLogOutput.


        :return: The risk of this IPLogOutput.
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this IPLogOutput.


        :param risk: The risk of this IPLogOutput.
        :type risk: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if risk not in allowed_values:
            raise ValueError(
                "Invalid value for `risk` ({0}), must be one of {1}"
                .format(risk, allowed_values)
            )

        self._risk = risk

    @property
    def score(self):
        """Gets the score of this IPLogOutput.


        :return: The score of this IPLogOutput.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this IPLogOutput.


        :param score: The score of this IPLogOutput.
        :type score: int
        """

        self._score = score

    @property
    def _self(self):
        """Gets the _self of this IPLogOutput.


        :return: The _self of this IPLogOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this IPLogOutput.


        :param _self: The _self of this IPLogOutput.
        :type _self: str
        """

        self.__self = _self

    @property
    def source(self):
        """Gets the source of this IPLogOutput.


        :return: The source of this IPLogOutput.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this IPLogOutput.


        :param source: The source of this IPLogOutput.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def timestamp(self):
        """Gets the timestamp of this IPLogOutput.


        :return: The timestamp of this IPLogOutput.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this IPLogOutput.


        :param timestamp: The timestamp of this IPLogOutput.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
