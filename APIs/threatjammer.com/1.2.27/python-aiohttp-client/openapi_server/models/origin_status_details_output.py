# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OriginStatusDetailsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cardinality: int=None, description: str=None, _self: str=None, status: str=None):
        """OriginStatusDetailsOutput - a model defined in OpenAPI

        :param cardinality: The cardinality of this OriginStatusDetailsOutput.
        :param description: The description of this OriginStatusDetailsOutput.
        :param _self: The _self of this OriginStatusDetailsOutput.
        :param status: The status of this OriginStatusDetailsOutput.
        """
        self.openapi_types = {
            'cardinality': int,
            'description': str,
            '_self': str,
            'status': str
        }

        self.attribute_map = {
            'cardinality': 'cardinality',
            'description': 'description',
            '_self': 'self',
            'status': 'status'
        }

        self._cardinality = cardinality
        self._description = description
        self.__self = _self
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginStatusDetailsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginStatusDetailsOutput of this OriginStatusDetailsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cardinality(self):
        """Gets the cardinality of this OriginStatusDetailsOutput.


        :return: The cardinality of this OriginStatusDetailsOutput.
        :rtype: int
        """
        return self._cardinality

    @cardinality.setter
    def cardinality(self, cardinality):
        """Sets the cardinality of this OriginStatusDetailsOutput.


        :param cardinality: The cardinality of this OriginStatusDetailsOutput.
        :type cardinality: int
        """
        if cardinality is None:
            raise ValueError("Invalid value for `cardinality`, must not be `None`")

        self._cardinality = cardinality

    @property
    def description(self):
        """Gets the description of this OriginStatusDetailsOutput.


        :return: The description of this OriginStatusDetailsOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OriginStatusDetailsOutput.


        :param description: The description of this OriginStatusDetailsOutput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def _self(self):
        """Gets the _self of this OriginStatusDetailsOutput.


        :return: The _self of this OriginStatusDetailsOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this OriginStatusDetailsOutput.


        :param _self: The _self of this OriginStatusDetailsOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def status(self):
        """Gets the status of this OriginStatusDetailsOutput.


        :return: The status of this OriginStatusDetailsOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OriginStatusDetailsOutput.


        :param status: The status of this OriginStatusDetailsOutput.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
