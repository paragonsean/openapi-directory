# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V1ModelsSourceSourceOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset: str=None, description: str=None, maximum_risk: str=None, maximum_score: int=None, minimum_risk: str=None, minimum_score: int=None, name: str=None, refresh: str=None, _self: str=None, source: str=None, subscriptions: List[str]=None, time_ranges: List[str]=None, updated_at: int=None, url: str=None):
        """V1ModelsSourceSourceOutput - a model defined in OpenAPI

        :param dataset: The dataset of this V1ModelsSourceSourceOutput.
        :param description: The description of this V1ModelsSourceSourceOutput.
        :param maximum_risk: The maximum_risk of this V1ModelsSourceSourceOutput.
        :param maximum_score: The maximum_score of this V1ModelsSourceSourceOutput.
        :param minimum_risk: The minimum_risk of this V1ModelsSourceSourceOutput.
        :param minimum_score: The minimum_score of this V1ModelsSourceSourceOutput.
        :param name: The name of this V1ModelsSourceSourceOutput.
        :param refresh: The refresh of this V1ModelsSourceSourceOutput.
        :param _self: The _self of this V1ModelsSourceSourceOutput.
        :param source: The source of this V1ModelsSourceSourceOutput.
        :param subscriptions: The subscriptions of this V1ModelsSourceSourceOutput.
        :param time_ranges: The time_ranges of this V1ModelsSourceSourceOutput.
        :param updated_at: The updated_at of this V1ModelsSourceSourceOutput.
        :param url: The url of this V1ModelsSourceSourceOutput.
        """
        self.openapi_types = {
            'dataset': str,
            'description': str,
            'maximum_risk': str,
            'maximum_score': int,
            'minimum_risk': str,
            'minimum_score': int,
            'name': str,
            'refresh': str,
            '_self': str,
            'source': str,
            'subscriptions': List[str],
            'time_ranges': List[str],
            'updated_at': int,
            'url': str
        }

        self.attribute_map = {
            'dataset': 'dataset',
            'description': 'description',
            'maximum_risk': 'maximum_risk',
            'maximum_score': 'maximum_score',
            'minimum_risk': 'minimum_risk',
            'minimum_score': 'minimum_score',
            'name': 'name',
            'refresh': 'refresh',
            '_self': 'self',
            'source': 'source',
            'subscriptions': 'subscriptions',
            'time_ranges': 'time_ranges',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._dataset = dataset
        self._description = description
        self._maximum_risk = maximum_risk
        self._maximum_score = maximum_score
        self._minimum_risk = minimum_risk
        self._minimum_score = minimum_score
        self._name = name
        self._refresh = refresh
        self.__self = _self
        self._source = source
        self._subscriptions = subscriptions
        self._time_ranges = time_ranges
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1ModelsSourceSourceOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The v1__models__source__SourceOutput of this V1ModelsSourceSourceOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset(self):
        """Gets the dataset of this V1ModelsSourceSourceOutput.


        :return: The dataset of this V1ModelsSourceSourceOutput.
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this V1ModelsSourceSourceOutput.


        :param dataset: The dataset of this V1ModelsSourceSourceOutput.
        :type dataset: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")

        self._dataset = dataset

    @property
    def description(self):
        """Gets the description of this V1ModelsSourceSourceOutput.


        :return: The description of this V1ModelsSourceSourceOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1ModelsSourceSourceOutput.


        :param description: The description of this V1ModelsSourceSourceOutput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def maximum_risk(self):
        """Gets the maximum_risk of this V1ModelsSourceSourceOutput.


        :return: The maximum_risk of this V1ModelsSourceSourceOutput.
        :rtype: str
        """
        return self._maximum_risk

    @maximum_risk.setter
    def maximum_risk(self, maximum_risk):
        """Sets the maximum_risk of this V1ModelsSourceSourceOutput.


        :param maximum_risk: The maximum_risk of this V1ModelsSourceSourceOutput.
        :type maximum_risk: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if maximum_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `maximum_risk` ({0}), must be one of {1}"
                .format(maximum_risk, allowed_values)
            )

        self._maximum_risk = maximum_risk

    @property
    def maximum_score(self):
        """Gets the maximum_score of this V1ModelsSourceSourceOutput.


        :return: The maximum_score of this V1ModelsSourceSourceOutput.
        :rtype: int
        """
        return self._maximum_score

    @maximum_score.setter
    def maximum_score(self, maximum_score):
        """Sets the maximum_score of this V1ModelsSourceSourceOutput.


        :param maximum_score: The maximum_score of this V1ModelsSourceSourceOutput.
        :type maximum_score: int
        """
        if maximum_score is None:
            raise ValueError("Invalid value for `maximum_score`, must not be `None`")

        self._maximum_score = maximum_score

    @property
    def minimum_risk(self):
        """Gets the minimum_risk of this V1ModelsSourceSourceOutput.


        :return: The minimum_risk of this V1ModelsSourceSourceOutput.
        :rtype: str
        """
        return self._minimum_risk

    @minimum_risk.setter
    def minimum_risk(self, minimum_risk):
        """Sets the minimum_risk of this V1ModelsSourceSourceOutput.


        :param minimum_risk: The minimum_risk of this V1ModelsSourceSourceOutput.
        :type minimum_risk: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if minimum_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_risk` ({0}), must be one of {1}"
                .format(minimum_risk, allowed_values)
            )

        self._minimum_risk = minimum_risk

    @property
    def minimum_score(self):
        """Gets the minimum_score of this V1ModelsSourceSourceOutput.


        :return: The minimum_score of this V1ModelsSourceSourceOutput.
        :rtype: int
        """
        return self._minimum_score

    @minimum_score.setter
    def minimum_score(self, minimum_score):
        """Sets the minimum_score of this V1ModelsSourceSourceOutput.


        :param minimum_score: The minimum_score of this V1ModelsSourceSourceOutput.
        :type minimum_score: int
        """
        if minimum_score is None:
            raise ValueError("Invalid value for `minimum_score`, must not be `None`")

        self._minimum_score = minimum_score

    @property
    def name(self):
        """Gets the name of this V1ModelsSourceSourceOutput.


        :return: The name of this V1ModelsSourceSourceOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1ModelsSourceSourceOutput.


        :param name: The name of this V1ModelsSourceSourceOutput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def refresh(self):
        """Gets the refresh of this V1ModelsSourceSourceOutput.


        :return: The refresh of this V1ModelsSourceSourceOutput.
        :rtype: str
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """Sets the refresh of this V1ModelsSourceSourceOutput.


        :param refresh: The refresh of this V1ModelsSourceSourceOutput.
        :type refresh: str
        """
        allowed_values = ["1H", "6H", "12H", "1D", "7D", "30D", "90D", "180D", "365D"]  # noqa: E501
        if refresh not in allowed_values:
            raise ValueError(
                "Invalid value for `refresh` ({0}), must be one of {1}"
                .format(refresh, allowed_values)
            )

        self._refresh = refresh

    @property
    def _self(self):
        """Gets the _self of this V1ModelsSourceSourceOutput.


        :return: The _self of this V1ModelsSourceSourceOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this V1ModelsSourceSourceOutput.


        :param _self: The _self of this V1ModelsSourceSourceOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def source(self):
        """Gets the source of this V1ModelsSourceSourceOutput.


        :return: The source of this V1ModelsSourceSourceOutput.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this V1ModelsSourceSourceOutput.


        :param source: The source of this V1ModelsSourceSourceOutput.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def subscriptions(self):
        """Gets the subscriptions of this V1ModelsSourceSourceOutput.


        :return: The subscriptions of this V1ModelsSourceSourceOutput.
        :rtype: List[str]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this V1ModelsSourceSourceOutput.


        :param subscriptions: The subscriptions of this V1ModelsSourceSourceOutput.
        :type subscriptions: List[str]
        """
        allowed_values = ["FREE", "BASIC", "PRO", "ENTERPRISE"]  # noqa: E501
        if not set(subscriptions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `subscriptions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(subscriptions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._subscriptions = subscriptions

    @property
    def time_ranges(self):
        """Gets the time_ranges of this V1ModelsSourceSourceOutput.


        :return: The time_ranges of this V1ModelsSourceSourceOutput.
        :rtype: List[str]
        """
        return self._time_ranges

    @time_ranges.setter
    def time_ranges(self, time_ranges):
        """Sets the time_ranges of this V1ModelsSourceSourceOutput.


        :param time_ranges: The time_ranges of this V1ModelsSourceSourceOutput.
        :type time_ranges: List[str]
        """
        if time_ranges is None:
            raise ValueError("Invalid value for `time_ranges`, must not be `None`")

        self._time_ranges = time_ranges

    @property
    def updated_at(self):
        """Gets the updated_at of this V1ModelsSourceSourceOutput.


        :return: The updated_at of this V1ModelsSourceSourceOutput.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V1ModelsSourceSourceOutput.


        :param updated_at: The updated_at of this V1ModelsSourceSourceOutput.
        :type updated_at: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this V1ModelsSourceSourceOutput.


        :return: The url of this V1ModelsSourceSourceOutput.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V1ModelsSourceSourceOutput.


        :param url: The url of this V1ModelsSourceSourceOutput.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
