/**
 * Randommer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFinanceApi_H
#define OAI_OAIFinanceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFinanceApi : public QObject {
    Q_OBJECT

public:
    OAIFinanceApi(const int timeOut = 0);
    ~OAIFinanceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiFinanceCountriesGet(const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  crypto_type QString [optional]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiFinanceCryptoAddressGet(const ::OpenAPI::OptionalParam<QString> &crypto_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiFinanceCryptoAddressTypesGet(const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiFinanceIbanCountryCodeGet(const QString &country_code, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  vat QString [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiFinanceVatValidatorPost(const QString &country, const QString &vat, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiFinanceCountriesGetCallback(OAIHttpRequestWorker *worker);
    void apiFinanceCryptoAddressGetCallback(OAIHttpRequestWorker *worker);
    void apiFinanceCryptoAddressTypesGetCallback(OAIHttpRequestWorker *worker);
    void apiFinanceIbanCountryCodeGetCallback(OAIHttpRequestWorker *worker);
    void apiFinanceVatValidatorPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiFinanceCountriesGetSignal();
    void apiFinanceCryptoAddressGetSignal();
    void apiFinanceCryptoAddressTypesGetSignal();
    void apiFinanceIbanCountryCodeGetSignal();
    void apiFinanceVatValidatorPostSignal();


    void apiFinanceCountriesGetSignalFull(OAIHttpRequestWorker *worker);
    void apiFinanceCryptoAddressGetSignalFull(OAIHttpRequestWorker *worker);
    void apiFinanceCryptoAddressTypesGetSignalFull(OAIHttpRequestWorker *worker);
    void apiFinanceIbanCountryCodeGetSignalFull(OAIHttpRequestWorker *worker);
    void apiFinanceVatValidatorPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiFinanceCountriesGetSignalError() instead")
    void apiFinanceCountriesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceCountriesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiFinanceCryptoAddressGetSignalError() instead")
    void apiFinanceCryptoAddressGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceCryptoAddressGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiFinanceCryptoAddressTypesGetSignalError() instead")
    void apiFinanceCryptoAddressTypesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceCryptoAddressTypesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiFinanceIbanCountryCodeGetSignalError() instead")
    void apiFinanceIbanCountryCodeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceIbanCountryCodeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiFinanceVatValidatorPostSignalError() instead")
    void apiFinanceVatValidatorPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceVatValidatorPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiFinanceCountriesGetSignalErrorFull() instead")
    void apiFinanceCountriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceCountriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiFinanceCryptoAddressGetSignalErrorFull() instead")
    void apiFinanceCryptoAddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceCryptoAddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiFinanceCryptoAddressTypesGetSignalErrorFull() instead")
    void apiFinanceCryptoAddressTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceCryptoAddressTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiFinanceIbanCountryCodeGetSignalErrorFull() instead")
    void apiFinanceIbanCountryCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceIbanCountryCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiFinanceVatValidatorPostSignalErrorFull() instead")
    void apiFinanceVatValidatorPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiFinanceVatValidatorPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
