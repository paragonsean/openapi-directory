/**
 * Randommer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextApi_H
#define OAI_OAITextApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICaseType.h"
#include "OAILoremType.h"
#include "OAITextActionType.h"
#include "OAITextDto.h"
#include "OAITextType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITextApi : public QObject {
    Q_OBJECT

public:
    OAITextApi(const int timeOut = 0);
    ~OAITextApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_text_dto OAITextDto [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiTextHumanizePost(const OAITextDto &oai_text_dto, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lorem_type OAILoremType [required]
    * @param[in]  type OAITextType [required]
    * @param[in]  number qint32 [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiTextLoremIpsumGet(const OAILoremType &lorem_type, const OAITextType &type, const qint32 &number, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  length qint32 [required]
    * @param[in]  has_digits bool [required]
    * @param[in]  has_uppercase bool [required]
    * @param[in]  has_special bool [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiTextPasswordGet(const qint32 &length, const bool &has_digits, const bool &has_uppercase, const bool &has_special, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product QString [required]
    * @param[in]  quantity qint32 [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiTextReviewPost(const QString &product, const qint32 &quantity, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  text_action_type OAITextActionType [required]
    * @param[in]  oai_text_dto OAITextDto [required]
    * @param[in]  case_type OAICaseType [optional]
    * @param[in]  find QString [optional]
    * @param[in]  replace QString [optional]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiTextTransformPost(const OAITextActionType &text_action_type, const OAITextDto &oai_text_dto, const ::OpenAPI::OptionalParam<OAICaseType> &case_type = ::OpenAPI::OptionalParam<OAICaseType>(), const ::OpenAPI::OptionalParam<QString> &find = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &replace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTextHumanizePostCallback(OAIHttpRequestWorker *worker);
    void apiTextLoremIpsumGetCallback(OAIHttpRequestWorker *worker);
    void apiTextPasswordGetCallback(OAIHttpRequestWorker *worker);
    void apiTextReviewPostCallback(OAIHttpRequestWorker *worker);
    void apiTextTransformPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTextHumanizePostSignal();
    void apiTextLoremIpsumGetSignal();
    void apiTextPasswordGetSignal();
    void apiTextReviewPostSignal();
    void apiTextTransformPostSignal();


    void apiTextHumanizePostSignalFull(OAIHttpRequestWorker *worker);
    void apiTextLoremIpsumGetSignalFull(OAIHttpRequestWorker *worker);
    void apiTextPasswordGetSignalFull(OAIHttpRequestWorker *worker);
    void apiTextReviewPostSignalFull(OAIHttpRequestWorker *worker);
    void apiTextTransformPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiTextHumanizePostSignalError() instead")
    void apiTextHumanizePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextHumanizePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTextLoremIpsumGetSignalError() instead")
    void apiTextLoremIpsumGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextLoremIpsumGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTextPasswordGetSignalError() instead")
    void apiTextPasswordGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextPasswordGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTextReviewPostSignalError() instead")
    void apiTextReviewPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextReviewPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTextTransformPostSignalError() instead")
    void apiTextTransformPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextTransformPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTextHumanizePostSignalErrorFull() instead")
    void apiTextHumanizePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextHumanizePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTextLoremIpsumGetSignalErrorFull() instead")
    void apiTextLoremIpsumGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextLoremIpsumGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTextPasswordGetSignalErrorFull() instead")
    void apiTextPasswordGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextPasswordGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTextReviewPostSignalErrorFull() instead")
    void apiTextReviewPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextReviewPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTextTransformPostSignalErrorFull() instead")
    void apiTextTransformPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTextTransformPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
