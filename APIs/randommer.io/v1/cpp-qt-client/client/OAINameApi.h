/**
 * Randommer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINameApi_H
#define OAI_OAINameApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINameType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINameApi : public QObject {
    Q_OBJECT

public:
    OAINameApi(const int timeOut = 0);
    ~OAINameApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  starting_words QString [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiNameBrandNamePost(const QString &starting_words, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  number qint32 [required]
    * @param[in]  culture_code QString [optional]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiNameBusinessNamePost(const qint32 &number, const ::OpenAPI::OptionalParam<QString> &culture_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiNameCulturesGet(const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name_type OAINameType [required]
    * @param[in]  quantity qint32 [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiNameGet(const OAINameType &name_type, const qint32 &quantity, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  starting_words QString [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void apiNameSuggestionsGet(const QString &starting_words, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiNameBrandNamePostCallback(OAIHttpRequestWorker *worker);
    void apiNameBusinessNamePostCallback(OAIHttpRequestWorker *worker);
    void apiNameCulturesGetCallback(OAIHttpRequestWorker *worker);
    void apiNameGetCallback(OAIHttpRequestWorker *worker);
    void apiNameSuggestionsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiNameBrandNamePostSignal();
    void apiNameBusinessNamePostSignal();
    void apiNameCulturesGetSignal();
    void apiNameGetSignal();
    void apiNameSuggestionsGetSignal();


    void apiNameBrandNamePostSignalFull(OAIHttpRequestWorker *worker);
    void apiNameBusinessNamePostSignalFull(OAIHttpRequestWorker *worker);
    void apiNameCulturesGetSignalFull(OAIHttpRequestWorker *worker);
    void apiNameGetSignalFull(OAIHttpRequestWorker *worker);
    void apiNameSuggestionsGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiNameBrandNamePostSignalError() instead")
    void apiNameBrandNamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameBrandNamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiNameBusinessNamePostSignalError() instead")
    void apiNameBusinessNamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameBusinessNamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiNameCulturesGetSignalError() instead")
    void apiNameCulturesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameCulturesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiNameGetSignalError() instead")
    void apiNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiNameSuggestionsGetSignalError() instead")
    void apiNameSuggestionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameSuggestionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiNameBrandNamePostSignalErrorFull() instead")
    void apiNameBrandNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameBrandNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiNameBusinessNamePostSignalErrorFull() instead")
    void apiNameBusinessNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameBusinessNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiNameCulturesGetSignalErrorFull() instead")
    void apiNameCulturesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameCulturesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiNameGetSignalErrorFull() instead")
    void apiNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiNameSuggestionsGetSignalErrorFull() instead")
    void apiNameSuggestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiNameSuggestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
