/**
 * Randommer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINameType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINameType::OAINameType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINameType::OAINameType() {
    this->initializeModel();
}

OAINameType::~OAINameType() {}

void OAINameType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINameType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINameType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("firstname", Qt::CaseInsensitive) == 0) {
        m_value = eOAINameType::FIRSTNAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("surname", Qt::CaseInsensitive) == 0) {
        m_value = eOAINameType::SURNAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fullname", Qt::CaseInsensitive) == 0) {
        m_value = eOAINameType::FULLNAME;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINameType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINameType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINameType::FIRSTNAME:
            val = "firstname";
            break;
        case eOAINameType::SURNAME:
            val = "surname";
            break;
        case eOAINameType::FULLNAME:
            val = "fullname";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINameType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINameType::eOAINameType OAINameType::getValue() const {
    return m_value;
}

void OAINameType::setValue(const OAINameType::eOAINameType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINameType::isSet() const {
    
    return m_value_isSet;
}

bool OAINameType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
