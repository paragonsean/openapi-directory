# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NumberValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, number: str=None):
        """NumberValidation - a model defined in OpenAPI

        :param country: The country of this NumberValidation.
        :param number: The number of this NumberValidation.
        """
        self.openapi_types = {
            'country': str,
            'number': str
        }

        self.attribute_map = {
            'country': 'country',
            'number': 'number'
        }

        self._country = country
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumberValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumberValidation of this NumberValidation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this NumberValidation.


        :return: The country of this NumberValidation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this NumberValidation.


        :param country: The country of this NumberValidation.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 1:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `1`")

        self._country = country

    @property
    def number(self):
        """Gets the number of this NumberValidation.


        :return: The number of this NumberValidation.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NumberValidation.


        :param number: The number of this NumberValidation.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and len(number) > 100:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `100`")
        if number is not None and len(number) < 1:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")

        self._number = number
