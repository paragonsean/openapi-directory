/*
 * Randommer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CaseType;
import org.openapitools.client.model.LoremType;
import org.openapitools.client.model.TextActionType;
import org.openapitools.client.model.TextDto;
import org.openapitools.client.model.TextType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TextApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TextApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TextApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiTextHumanizePost
     * @param textDto  (required)
     * @param xApiKey Enter your key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextHumanizePostCall(TextDto textDto, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = textDto;

        // create path and map variables
        String localVarPath = "/api/Text/Humanize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTextHumanizePostValidateBeforeCall(TextDto textDto, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'textDto' is set
        if (textDto == null) {
            throw new ApiException("Missing the required parameter 'textDto' when calling apiTextHumanizePost(Async)");
        }

        return apiTextHumanizePostCall(textDto, xApiKey, _callback);

    }

    /**
     * Humanize text
     * 
     * @param textDto  (required)
     * @param xApiKey Enter your key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiTextHumanizePost(TextDto textDto, String xApiKey) throws ApiException {
        apiTextHumanizePostWithHttpInfo(textDto, xApiKey);
    }

    /**
     * Humanize text
     * 
     * @param textDto  (required)
     * @param xApiKey Enter your key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTextHumanizePostWithHttpInfo(TextDto textDto, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiTextHumanizePostValidateBeforeCall(textDto, xApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Humanize text (asynchronously)
     * 
     * @param textDto  (required)
     * @param xApiKey Enter your key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextHumanizePostAsync(TextDto textDto, String xApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTextHumanizePostValidateBeforeCall(textDto, xApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTextLoremIpsumGet
     * @param loremType  (required)
     * @param type  (required)
     * @param number  (required)
     * @param xApiKey Enter your key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextLoremIpsumGetCall(LoremType loremType, TextType type, Integer number, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Text/LoremIpsum";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loremType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loremType", loremType));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTextLoremIpsumGetValidateBeforeCall(LoremType loremType, TextType type, Integer number, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loremType' is set
        if (loremType == null) {
            throw new ApiException("Missing the required parameter 'loremType' when calling apiTextLoremIpsumGet(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling apiTextLoremIpsumGet(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling apiTextLoremIpsumGet(Async)");
        }

        return apiTextLoremIpsumGetCall(loremType, type, number, xApiKey, _callback);

    }

    /**
     * Generate lorem ipsum
     * 
     * @param loremType  (required)
     * @param type  (required)
     * @param number  (required)
     * @param xApiKey Enter your key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiTextLoremIpsumGet(LoremType loremType, TextType type, Integer number, String xApiKey) throws ApiException {
        apiTextLoremIpsumGetWithHttpInfo(loremType, type, number, xApiKey);
    }

    /**
     * Generate lorem ipsum
     * 
     * @param loremType  (required)
     * @param type  (required)
     * @param number  (required)
     * @param xApiKey Enter your key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTextLoremIpsumGetWithHttpInfo(LoremType loremType, TextType type, Integer number, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiTextLoremIpsumGetValidateBeforeCall(loremType, type, number, xApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate lorem ipsum (asynchronously)
     * 
     * @param loremType  (required)
     * @param type  (required)
     * @param number  (required)
     * @param xApiKey Enter your key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextLoremIpsumGetAsync(LoremType loremType, TextType type, Integer number, String xApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTextLoremIpsumGetValidateBeforeCall(loremType, type, number, xApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTextPasswordGet
     * @param length  (required)
     * @param hasDigits  (required)
     * @param hasUppercase  (required)
     * @param hasSpecial  (required)
     * @param xApiKey Enter your key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextPasswordGetCall(Integer length, Boolean hasDigits, Boolean hasUppercase, Boolean hasSpecial, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Text/Password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        if (hasDigits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasDigits", hasDigits));
        }

        if (hasUppercase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasUppercase", hasUppercase));
        }

        if (hasSpecial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasSpecial", hasSpecial));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTextPasswordGetValidateBeforeCall(Integer length, Boolean hasDigits, Boolean hasUppercase, Boolean hasSpecial, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'length' is set
        if (length == null) {
            throw new ApiException("Missing the required parameter 'length' when calling apiTextPasswordGet(Async)");
        }

        // verify the required parameter 'hasDigits' is set
        if (hasDigits == null) {
            throw new ApiException("Missing the required parameter 'hasDigits' when calling apiTextPasswordGet(Async)");
        }

        // verify the required parameter 'hasUppercase' is set
        if (hasUppercase == null) {
            throw new ApiException("Missing the required parameter 'hasUppercase' when calling apiTextPasswordGet(Async)");
        }

        // verify the required parameter 'hasSpecial' is set
        if (hasSpecial == null) {
            throw new ApiException("Missing the required parameter 'hasSpecial' when calling apiTextPasswordGet(Async)");
        }

        return apiTextPasswordGetCall(length, hasDigits, hasUppercase, hasSpecial, xApiKey, _callback);

    }

    /**
     * Generate password
     * 
     * @param length  (required)
     * @param hasDigits  (required)
     * @param hasUppercase  (required)
     * @param hasSpecial  (required)
     * @param xApiKey Enter your key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiTextPasswordGet(Integer length, Boolean hasDigits, Boolean hasUppercase, Boolean hasSpecial, String xApiKey) throws ApiException {
        apiTextPasswordGetWithHttpInfo(length, hasDigits, hasUppercase, hasSpecial, xApiKey);
    }

    /**
     * Generate password
     * 
     * @param length  (required)
     * @param hasDigits  (required)
     * @param hasUppercase  (required)
     * @param hasSpecial  (required)
     * @param xApiKey Enter your key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTextPasswordGetWithHttpInfo(Integer length, Boolean hasDigits, Boolean hasUppercase, Boolean hasSpecial, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiTextPasswordGetValidateBeforeCall(length, hasDigits, hasUppercase, hasSpecial, xApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate password (asynchronously)
     * 
     * @param length  (required)
     * @param hasDigits  (required)
     * @param hasUppercase  (required)
     * @param hasSpecial  (required)
     * @param xApiKey Enter your key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextPasswordGetAsync(Integer length, Boolean hasDigits, Boolean hasUppercase, Boolean hasSpecial, String xApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTextPasswordGetValidateBeforeCall(length, hasDigits, hasUppercase, hasSpecial, xApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTextReviewPost
     * @param product  (required)
     * @param quantity  (required)
     * @param xApiKey Enter your key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextReviewPostCall(String product, Integer quantity, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Text/Review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTextReviewPostValidateBeforeCall(String product, Integer quantity, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling apiTextReviewPost(Async)");
        }

        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling apiTextReviewPost(Async)");
        }

        return apiTextReviewPostCall(product, quantity, xApiKey, _callback);

    }

    /**
     * Get reviews (max quantity&#x3D;500)
     * 
     * @param product  (required)
     * @param quantity  (required)
     * @param xApiKey Enter your key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiTextReviewPost(String product, Integer quantity, String xApiKey) throws ApiException {
        apiTextReviewPostWithHttpInfo(product, quantity, xApiKey);
    }

    /**
     * Get reviews (max quantity&#x3D;500)
     * 
     * @param product  (required)
     * @param quantity  (required)
     * @param xApiKey Enter your key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTextReviewPostWithHttpInfo(String product, Integer quantity, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiTextReviewPostValidateBeforeCall(product, quantity, xApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get reviews (max quantity&#x3D;500) (asynchronously)
     * 
     * @param product  (required)
     * @param quantity  (required)
     * @param xApiKey Enter your key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextReviewPostAsync(String product, Integer quantity, String xApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTextReviewPostValidateBeforeCall(product, quantity, xApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTextTransformPost
     * @param textActionType  (required)
     * @param textDto  (required)
     * @param caseType  (optional)
     * @param find  (optional)
     * @param replace  (optional)
     * @param xApiKey Enter your key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextTransformPostCall(TextActionType textActionType, TextDto textDto, CaseType caseType, String find, String replace, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = textDto;

        // create path and map variables
        String localVarPath = "/api/Text/Transform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (textActionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textActionType", textActionType));
        }

        if (caseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseType", caseType));
        }

        if (find != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find", find));
        }

        if (replace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replace", replace));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTextTransformPostValidateBeforeCall(TextActionType textActionType, TextDto textDto, CaseType caseType, String find, String replace, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'textActionType' is set
        if (textActionType == null) {
            throw new ApiException("Missing the required parameter 'textActionType' when calling apiTextTransformPost(Async)");
        }

        // verify the required parameter 'textDto' is set
        if (textDto == null) {
            throw new ApiException("Missing the required parameter 'textDto' when calling apiTextTransformPost(Async)");
        }

        return apiTextTransformPostCall(textActionType, textDto, caseType, find, replace, xApiKey, _callback);

    }

    /**
     * Transform text
     * 
     * @param textActionType  (required)
     * @param textDto  (required)
     * @param caseType  (optional)
     * @param find  (optional)
     * @param replace  (optional)
     * @param xApiKey Enter your key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiTextTransformPost(TextActionType textActionType, TextDto textDto, CaseType caseType, String find, String replace, String xApiKey) throws ApiException {
        apiTextTransformPostWithHttpInfo(textActionType, textDto, caseType, find, replace, xApiKey);
    }

    /**
     * Transform text
     * 
     * @param textActionType  (required)
     * @param textDto  (required)
     * @param caseType  (optional)
     * @param find  (optional)
     * @param replace  (optional)
     * @param xApiKey Enter your key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTextTransformPostWithHttpInfo(TextActionType textActionType, TextDto textDto, CaseType caseType, String find, String replace, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiTextTransformPostValidateBeforeCall(textActionType, textDto, caseType, find, replace, xApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Transform text (asynchronously)
     * 
     * @param textActionType  (required)
     * @param textDto  (required)
     * @param caseType  (optional)
     * @param find  (optional)
     * @param replace  (optional)
     * @param xApiKey Enter your key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTextTransformPostAsync(TextActionType textActionType, TextDto textDto, CaseType caseType, String find, String replace, String xApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTextTransformPostValidateBeforeCall(textActionType, textDto, caseType, find, replace, xApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
