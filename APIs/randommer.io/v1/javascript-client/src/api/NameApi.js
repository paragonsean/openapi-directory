/**
 * Randommer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NameType from '../model/NameType';

/**
* Name service.
* @module api/NameApi
* @version v1
*/
export default class NameApi {

    /**
    * Constructs a new NameApi. 
    * @alias module:api/NameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiNameBrandNamePost operation.
     * @callback module:api/NameApi~apiNameBrandNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate brand name suggestions
     * @param {String} startingWords 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/NameApi~apiNameBrandNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNameBrandNamePost(startingWords, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startingWords' is set
      if (startingWords === undefined || startingWords === null) {
        throw new Error("Missing the required parameter 'startingWords' when calling apiNameBrandNamePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'startingWords': startingWords
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Name/BrandName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNameBusinessNamePost operation.
     * @callback module:api/NameApi~apiNameBusinessNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get business names for a specific culture
     * @param {Number} number 
     * @param {Object} opts Optional parameters
     * @param {String} [cultureCode = 'en_US')] 
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/NameApi~apiNameBusinessNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNameBusinessNamePost(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling apiNameBusinessNamePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'cultureCode': opts['cultureCode']
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Name/BusinessName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNameCulturesGet operation.
     * @callback module:api/NameApi~apiNameCulturesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available cultures
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/NameApi~apiNameCulturesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNameCulturesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Name/Cultures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNameGet operation.
     * @callback module:api/NameApi~apiNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get name
     * @param {module:model/NameType} nameType 
     * @param {Number} quantity 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/NameApi~apiNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNameGet(nameType, quantity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nameType' is set
      if (nameType === undefined || nameType === null) {
        throw new Error("Missing the required parameter 'nameType' when calling apiNameGet");
      }
      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling apiNameGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'nameType': nameType,
        'quantity': quantity
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNameSuggestionsGet operation.
     * @callback module:api/NameApi~apiNameSuggestionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get business name suggestions
     * @param {String} startingWords 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/NameApi~apiNameSuggestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNameSuggestionsGet(startingWords, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startingWords' is set
      if (startingWords === undefined || startingWords === null) {
        throw new Error("Missing the required parameter 'startingWords' when calling apiNameSuggestionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'startingWords': startingWords
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Name/Suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
