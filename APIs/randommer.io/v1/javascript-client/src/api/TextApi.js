/**
 * Randommer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CaseType from '../model/CaseType';
import LoremType from '../model/LoremType';
import TextActionType from '../model/TextActionType';
import TextDto from '../model/TextDto';
import TextType from '../model/TextType';

/**
* Text service.
* @module api/TextApi
* @version v1
*/
export default class TextApi {

    /**
    * Constructs a new TextApi. 
    * @alias module:api/TextApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTextHumanizePost operation.
     * @callback module:api/TextApi~apiTextHumanizePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Humanize text
     * @param {module:model/TextDto} textDto 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/TextApi~apiTextHumanizePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTextHumanizePost(textDto, opts, callback) {
      opts = opts || {};
      let postBody = textDto;
      // verify the required parameter 'textDto' is set
      if (textDto === undefined || textDto === null) {
        throw new Error("Missing the required parameter 'textDto' when calling apiTextHumanizePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Text/Humanize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTextLoremIpsumGet operation.
     * @callback module:api/TextApi~apiTextLoremIpsumGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate lorem ipsum
     * @param {module:model/LoremType} loremType 
     * @param {module:model/TextType} type 
     * @param {Number} number 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/TextApi~apiTextLoremIpsumGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTextLoremIpsumGet(loremType, type, number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loremType' is set
      if (loremType === undefined || loremType === null) {
        throw new Error("Missing the required parameter 'loremType' when calling apiTextLoremIpsumGet");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling apiTextLoremIpsumGet");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling apiTextLoremIpsumGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'loremType': loremType,
        'type': type,
        'number': number
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Text/LoremIpsum', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTextPasswordGet operation.
     * @callback module:api/TextApi~apiTextPasswordGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate password
     * @param {Number} length 
     * @param {Boolean} hasDigits 
     * @param {Boolean} hasUppercase 
     * @param {Boolean} hasSpecial 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/TextApi~apiTextPasswordGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTextPasswordGet(length, hasDigits, hasUppercase, hasSpecial, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'length' is set
      if (length === undefined || length === null) {
        throw new Error("Missing the required parameter 'length' when calling apiTextPasswordGet");
      }
      // verify the required parameter 'hasDigits' is set
      if (hasDigits === undefined || hasDigits === null) {
        throw new Error("Missing the required parameter 'hasDigits' when calling apiTextPasswordGet");
      }
      // verify the required parameter 'hasUppercase' is set
      if (hasUppercase === undefined || hasUppercase === null) {
        throw new Error("Missing the required parameter 'hasUppercase' when calling apiTextPasswordGet");
      }
      // verify the required parameter 'hasSpecial' is set
      if (hasSpecial === undefined || hasSpecial === null) {
        throw new Error("Missing the required parameter 'hasSpecial' when calling apiTextPasswordGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'length': length,
        'hasDigits': hasDigits,
        'hasUppercase': hasUppercase,
        'hasSpecial': hasSpecial
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Text/Password', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTextReviewPost operation.
     * @callback module:api/TextApi~apiTextReviewPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get reviews (max quantity=500)
     * @param {String} product 
     * @param {Number} quantity 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/TextApi~apiTextReviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTextReviewPost(product, quantity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling apiTextReviewPost");
      }
      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling apiTextReviewPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'product': product,
        'quantity': quantity
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Text/Review', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTextTransformPost operation.
     * @callback module:api/TextApi~apiTextTransformPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transform text
     * @param {module:model/TextActionType} textActionType 
     * @param {module:model/TextDto} textDto 
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseType} [caseType] 
     * @param {String} [find] 
     * @param {String} [replace] 
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/TextApi~apiTextTransformPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTextTransformPost(textActionType, textDto, opts, callback) {
      opts = opts || {};
      let postBody = textDto;
      // verify the required parameter 'textActionType' is set
      if (textActionType === undefined || textActionType === null) {
        throw new Error("Missing the required parameter 'textActionType' when calling apiTextTransformPost");
      }
      // verify the required parameter 'textDto' is set
      if (textDto === undefined || textDto === null) {
        throw new Error("Missing the required parameter 'textDto' when calling apiTextTransformPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'textActionType': textActionType,
        'caseType': opts['caseType'],
        'find': opts['find'],
        'replace': opts['replace']
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Text/Transform', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
