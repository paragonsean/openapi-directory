/**
 * Randommer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IdType from '../model/IdType';
import NumberValidation from '../model/NumberValidation';

/**
* SocialNumber service.
* @module api/SocialNumberApi
* @version v1
*/
export default class SocialNumberApi {

    /**
    * Constructs a new SocialNumberApi. 
    * @alias module:api/SocialNumberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiSocialNumberGet operation.
     * @callback module:api/SocialNumberApi~apiSocialNumberGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a social security number
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/SocialNumberApi~apiSocialNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSocialNumberGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/SocialNumber', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSocialNumberPost operation.
     * @callback module:api/SocialNumberApi~apiSocialNumberPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate VAT/identity numbers
     * @param {module:model/IdType} idType 
     * @param {module:model/NumberValidation} numberValidation 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] Enter your key
     * @param {module:api/SocialNumberApi~apiSocialNumberPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSocialNumberPost(idType, numberValidation, opts, callback) {
      opts = opts || {};
      let postBody = numberValidation;
      // verify the required parameter 'idType' is set
      if (idType === undefined || idType === null) {
        throw new Error("Missing the required parameter 'idType' when calling apiSocialNumberPost");
      }
      // verify the required parameter 'numberValidation' is set
      if (numberValidation === undefined || numberValidation === null) {
        throw new Error("Missing the required parameter 'numberValidation' when calling apiSocialNumberPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'idType': idType
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/SocialNumber', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
