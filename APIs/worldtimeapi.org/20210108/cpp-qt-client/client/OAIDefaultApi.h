/**
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDateTimeJsonResponse.h"
#include "OAIErrorJsonResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void ipGet();

    /**
    * @param[in]  ipv4 QString [required]
    */
    virtual void ipIpv4Get(const QString &ipv4);

    /**
    * @param[in]  ipv4 QString [required]
    */
    virtual void ipIpv4TxtGet(const QString &ipv4);


    virtual void ipTxtGet();

    /**
    * @param[in]  area QString [required]
    */
    virtual void timezoneAreaGet(const QString &area);

    /**
    * @param[in]  area QString [required]
    * @param[in]  location QString [required]
    */
    virtual void timezoneAreaLocationGet(const QString &area, const QString &location);

    /**
    * @param[in]  area QString [required]
    * @param[in]  location QString [required]
    * @param[in]  region QString [required]
    */
    virtual void timezoneAreaLocationRegionGet(const QString &area, const QString &location, const QString &region);

    /**
    * @param[in]  area QString [required]
    * @param[in]  location QString [required]
    * @param[in]  region QString [required]
    */
    virtual void timezoneAreaLocationRegionTxtGet(const QString &area, const QString &location, const QString &region);

    /**
    * @param[in]  area QString [required]
    * @param[in]  location QString [required]
    */
    virtual void timezoneAreaLocationTxtGet(const QString &area, const QString &location);

    /**
    * @param[in]  area QString [required]
    */
    virtual void timezoneAreaTxtGet(const QString &area);


    virtual void timezoneGet();


    virtual void timezoneTxtGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ipGetCallback(OAIHttpRequestWorker *worker);
    void ipIpv4GetCallback(OAIHttpRequestWorker *worker);
    void ipIpv4TxtGetCallback(OAIHttpRequestWorker *worker);
    void ipTxtGetCallback(OAIHttpRequestWorker *worker);
    void timezoneAreaGetCallback(OAIHttpRequestWorker *worker);
    void timezoneAreaLocationGetCallback(OAIHttpRequestWorker *worker);
    void timezoneAreaLocationRegionGetCallback(OAIHttpRequestWorker *worker);
    void timezoneAreaLocationRegionTxtGetCallback(OAIHttpRequestWorker *worker);
    void timezoneAreaLocationTxtGetCallback(OAIHttpRequestWorker *worker);
    void timezoneAreaTxtGetCallback(OAIHttpRequestWorker *worker);
    void timezoneGetCallback(OAIHttpRequestWorker *worker);
    void timezoneTxtGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ipGetSignal(OAIDateTimeJsonResponse summary);
    void ipIpv4GetSignal(OAIDateTimeJsonResponse summary);
    void ipIpv4TxtGetSignal(QString summary);
    void ipTxtGetSignal(QString summary);
    void timezoneAreaGetSignal(QList<QString> summary);
    void timezoneAreaLocationGetSignal(OAIDateTimeJsonResponse summary);
    void timezoneAreaLocationRegionGetSignal(OAIDateTimeJsonResponse summary);
    void timezoneAreaLocationRegionTxtGetSignal(QString summary);
    void timezoneAreaLocationTxtGetSignal(QString summary);
    void timezoneAreaTxtGetSignal(QString summary);
    void timezoneGetSignal(QList<QString> summary);
    void timezoneTxtGetSignal(QString summary);


    void ipGetSignalFull(OAIHttpRequestWorker *worker, OAIDateTimeJsonResponse summary);
    void ipIpv4GetSignalFull(OAIHttpRequestWorker *worker, OAIDateTimeJsonResponse summary);
    void ipIpv4TxtGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void ipTxtGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void timezoneAreaGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void timezoneAreaLocationGetSignalFull(OAIHttpRequestWorker *worker, OAIDateTimeJsonResponse summary);
    void timezoneAreaLocationRegionGetSignalFull(OAIHttpRequestWorker *worker, OAIDateTimeJsonResponse summary);
    void timezoneAreaLocationRegionTxtGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void timezoneAreaLocationTxtGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void timezoneAreaTxtGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void timezoneGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void timezoneTxtGetSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use ipGetSignalError() instead")
    void ipGetSignalE(OAIDateTimeJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGetSignalError(OAIDateTimeJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipIpv4GetSignalError() instead")
    void ipIpv4GetSignalE(OAIDateTimeJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipIpv4GetSignalError(OAIDateTimeJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipIpv4TxtGetSignalError() instead")
    void ipIpv4TxtGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipIpv4TxtGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipTxtGetSignalError() instead")
    void ipTxtGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipTxtGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaGetSignalError() instead")
    void timezoneAreaGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaLocationGetSignalError() instead")
    void timezoneAreaLocationGetSignalE(OAIDateTimeJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaLocationGetSignalError(OAIDateTimeJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaLocationRegionGetSignalError() instead")
    void timezoneAreaLocationRegionGetSignalE(OAIDateTimeJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaLocationRegionGetSignalError(OAIDateTimeJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaLocationRegionTxtGetSignalError() instead")
    void timezoneAreaLocationRegionTxtGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaLocationRegionTxtGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaLocationTxtGetSignalError() instead")
    void timezoneAreaLocationTxtGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaLocationTxtGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaTxtGetSignalError() instead")
    void timezoneAreaTxtGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaTxtGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneGetSignalError() instead")
    void timezoneGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneTxtGetSignalError() instead")
    void timezoneTxtGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneTxtGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ipGetSignalErrorFull() instead")
    void ipGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipIpv4GetSignalErrorFull() instead")
    void ipIpv4GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipIpv4GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipIpv4TxtGetSignalErrorFull() instead")
    void ipIpv4TxtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipIpv4TxtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipTxtGetSignalErrorFull() instead")
    void ipTxtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipTxtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaGetSignalErrorFull() instead")
    void timezoneAreaGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaLocationGetSignalErrorFull() instead")
    void timezoneAreaLocationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaLocationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaLocationRegionGetSignalErrorFull() instead")
    void timezoneAreaLocationRegionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaLocationRegionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaLocationRegionTxtGetSignalErrorFull() instead")
    void timezoneAreaLocationRegionTxtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaLocationRegionTxtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaLocationTxtGetSignalErrorFull() instead")
    void timezoneAreaLocationTxtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaLocationTxtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneAreaTxtGetSignalErrorFull() instead")
    void timezoneAreaTxtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneAreaTxtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneGetSignalErrorFull() instead")
    void timezoneGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneTxtGetSignalErrorFull() instead")
    void timezoneTxtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneTxtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
