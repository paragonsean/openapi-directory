/**
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDateTimeJsonResponse.h
 *
 * 
 */

#ifndef OAIDateTimeJsonResponse_H
#define OAIDateTimeJsonResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDateTimeJsonResponse : public OAIObject {
public:
    OAIDateTimeJsonResponse();
    OAIDateTimeJsonResponse(QString json);
    ~OAIDateTimeJsonResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAbbreviation() const;
    void setAbbreviation(const QString &abbreviation);
    bool is_abbreviation_Set() const;
    bool is_abbreviation_Valid() const;

    QString getClientIp() const;
    void setClientIp(const QString &client_ip);
    bool is_client_ip_Set() const;
    bool is_client_ip_Valid() const;

    QString getDatetime() const;
    void setDatetime(const QString &datetime);
    bool is_datetime_Set() const;
    bool is_datetime_Valid() const;

    qint32 getDayOfWeek() const;
    void setDayOfWeek(const qint32 &day_of_week);
    bool is_day_of_week_Set() const;
    bool is_day_of_week_Valid() const;

    qint32 getDayOfYear() const;
    void setDayOfYear(const qint32 &day_of_year);
    bool is_day_of_year_Set() const;
    bool is_day_of_year_Valid() const;

    bool isDst() const;
    void setDst(const bool &dst);
    bool is_dst_Set() const;
    bool is_dst_Valid() const;

    QString getDstFrom() const;
    void setDstFrom(const QString &dst_from);
    bool is_dst_from_Set() const;
    bool is_dst_from_Valid() const;

    qint32 getDstOffset() const;
    void setDstOffset(const qint32 &dst_offset);
    bool is_dst_offset_Set() const;
    bool is_dst_offset_Valid() const;

    QString getDstUntil() const;
    void setDstUntil(const QString &dst_until);
    bool is_dst_until_Set() const;
    bool is_dst_until_Valid() const;

    qint32 getRawOffset() const;
    void setRawOffset(const qint32 &raw_offset);
    bool is_raw_offset_Set() const;
    bool is_raw_offset_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    qint32 getUnixtime() const;
    void setUnixtime(const qint32 &unixtime);
    bool is_unixtime_Set() const;
    bool is_unixtime_Valid() const;

    QString getUtcDatetime() const;
    void setUtcDatetime(const QString &utc_datetime);
    bool is_utc_datetime_Set() const;
    bool is_utc_datetime_Valid() const;

    QString getUtcOffset() const;
    void setUtcOffset(const QString &utc_offset);
    bool is_utc_offset_Set() const;
    bool is_utc_offset_Valid() const;

    qint32 getWeekNumber() const;
    void setWeekNumber(const qint32 &week_number);
    bool is_week_number_Set() const;
    bool is_week_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_abbreviation;
    bool m_abbreviation_isSet;
    bool m_abbreviation_isValid;

    QString m_client_ip;
    bool m_client_ip_isSet;
    bool m_client_ip_isValid;

    QString m_datetime;
    bool m_datetime_isSet;
    bool m_datetime_isValid;

    qint32 m_day_of_week;
    bool m_day_of_week_isSet;
    bool m_day_of_week_isValid;

    qint32 m_day_of_year;
    bool m_day_of_year_isSet;
    bool m_day_of_year_isValid;

    bool m_dst;
    bool m_dst_isSet;
    bool m_dst_isValid;

    QString m_dst_from;
    bool m_dst_from_isSet;
    bool m_dst_from_isValid;

    qint32 m_dst_offset;
    bool m_dst_offset_isSet;
    bool m_dst_offset_isValid;

    QString m_dst_until;
    bool m_dst_until_isSet;
    bool m_dst_until_isValid;

    qint32 m_raw_offset;
    bool m_raw_offset_isSet;
    bool m_raw_offset_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    qint32 m_unixtime;
    bool m_unixtime_isSet;
    bool m_unixtime_isValid;

    QString m_utc_datetime;
    bool m_utc_datetime_isSet;
    bool m_utc_datetime_isValid;

    QString m_utc_offset;
    bool m_utc_offset_isSet;
    bool m_utc_offset_isValid;

    qint32 m_week_number;
    bool m_week_number_isSet;
    bool m_week_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDateTimeJsonResponse)

#endif // OAIDateTimeJsonResponse_H
