/**
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeJsonResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeJsonResponse::OAIDateTimeJsonResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeJsonResponse::OAIDateTimeJsonResponse() {
    this->initializeModel();
}

OAIDateTimeJsonResponse::~OAIDateTimeJsonResponse() {}

void OAIDateTimeJsonResponse::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_client_ip_isSet = false;
    m_client_ip_isValid = false;

    m_datetime_isSet = false;
    m_datetime_isValid = false;

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_day_of_year_isSet = false;
    m_day_of_year_isValid = false;

    m_dst_isSet = false;
    m_dst_isValid = false;

    m_dst_from_isSet = false;
    m_dst_from_isValid = false;

    m_dst_offset_isSet = false;
    m_dst_offset_isValid = false;

    m_dst_until_isSet = false;
    m_dst_until_isValid = false;

    m_raw_offset_isSet = false;
    m_raw_offset_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_unixtime_isSet = false;
    m_unixtime_isValid = false;

    m_utc_datetime_isSet = false;
    m_utc_datetime_isValid = false;

    m_utc_offset_isSet = false;
    m_utc_offset_isValid = false;

    m_week_number_isSet = false;
    m_week_number_isValid = false;
}

void OAIDateTimeJsonResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeJsonResponse::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_client_ip_isValid = ::OpenAPI::fromJsonValue(m_client_ip, json[QString("client_ip")]);
    m_client_ip_isSet = !json[QString("client_ip")].isNull() && m_client_ip_isValid;

    m_datetime_isValid = ::OpenAPI::fromJsonValue(m_datetime, json[QString("datetime")]);
    m_datetime_isSet = !json[QString("datetime")].isNull() && m_datetime_isValid;

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("day_of_week")]);
    m_day_of_week_isSet = !json[QString("day_of_week")].isNull() && m_day_of_week_isValid;

    m_day_of_year_isValid = ::OpenAPI::fromJsonValue(m_day_of_year, json[QString("day_of_year")]);
    m_day_of_year_isSet = !json[QString("day_of_year")].isNull() && m_day_of_year_isValid;

    m_dst_isValid = ::OpenAPI::fromJsonValue(m_dst, json[QString("dst")]);
    m_dst_isSet = !json[QString("dst")].isNull() && m_dst_isValid;

    m_dst_from_isValid = ::OpenAPI::fromJsonValue(m_dst_from, json[QString("dst_from")]);
    m_dst_from_isSet = !json[QString("dst_from")].isNull() && m_dst_from_isValid;

    m_dst_offset_isValid = ::OpenAPI::fromJsonValue(m_dst_offset, json[QString("dst_offset")]);
    m_dst_offset_isSet = !json[QString("dst_offset")].isNull() && m_dst_offset_isValid;

    m_dst_until_isValid = ::OpenAPI::fromJsonValue(m_dst_until, json[QString("dst_until")]);
    m_dst_until_isSet = !json[QString("dst_until")].isNull() && m_dst_until_isValid;

    m_raw_offset_isValid = ::OpenAPI::fromJsonValue(m_raw_offset, json[QString("raw_offset")]);
    m_raw_offset_isSet = !json[QString("raw_offset")].isNull() && m_raw_offset_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_unixtime_isValid = ::OpenAPI::fromJsonValue(m_unixtime, json[QString("unixtime")]);
    m_unixtime_isSet = !json[QString("unixtime")].isNull() && m_unixtime_isValid;

    m_utc_datetime_isValid = ::OpenAPI::fromJsonValue(m_utc_datetime, json[QString("utc_datetime")]);
    m_utc_datetime_isSet = !json[QString("utc_datetime")].isNull() && m_utc_datetime_isValid;

    m_utc_offset_isValid = ::OpenAPI::fromJsonValue(m_utc_offset, json[QString("utc_offset")]);
    m_utc_offset_isSet = !json[QString("utc_offset")].isNull() && m_utc_offset_isValid;

    m_week_number_isValid = ::OpenAPI::fromJsonValue(m_week_number, json[QString("week_number")]);
    m_week_number_isSet = !json[QString("week_number")].isNull() && m_week_number_isValid;
}

QString OAIDateTimeJsonResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeJsonResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_client_ip_isSet) {
        obj.insert(QString("client_ip"), ::OpenAPI::toJsonValue(m_client_ip));
    }
    if (m_datetime_isSet) {
        obj.insert(QString("datetime"), ::OpenAPI::toJsonValue(m_datetime));
    }
    if (m_day_of_week_isSet) {
        obj.insert(QString("day_of_week"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_day_of_year_isSet) {
        obj.insert(QString("day_of_year"), ::OpenAPI::toJsonValue(m_day_of_year));
    }
    if (m_dst_isSet) {
        obj.insert(QString("dst"), ::OpenAPI::toJsonValue(m_dst));
    }
    if (m_dst_from_isSet) {
        obj.insert(QString("dst_from"), ::OpenAPI::toJsonValue(m_dst_from));
    }
    if (m_dst_offset_isSet) {
        obj.insert(QString("dst_offset"), ::OpenAPI::toJsonValue(m_dst_offset));
    }
    if (m_dst_until_isSet) {
        obj.insert(QString("dst_until"), ::OpenAPI::toJsonValue(m_dst_until));
    }
    if (m_raw_offset_isSet) {
        obj.insert(QString("raw_offset"), ::OpenAPI::toJsonValue(m_raw_offset));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_unixtime_isSet) {
        obj.insert(QString("unixtime"), ::OpenAPI::toJsonValue(m_unixtime));
    }
    if (m_utc_datetime_isSet) {
        obj.insert(QString("utc_datetime"), ::OpenAPI::toJsonValue(m_utc_datetime));
    }
    if (m_utc_offset_isSet) {
        obj.insert(QString("utc_offset"), ::OpenAPI::toJsonValue(m_utc_offset));
    }
    if (m_week_number_isSet) {
        obj.insert(QString("week_number"), ::OpenAPI::toJsonValue(m_week_number));
    }
    return obj;
}

QString OAIDateTimeJsonResponse::getAbbreviation() const {
    return m_abbreviation;
}
void OAIDateTimeJsonResponse::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAIDateTimeJsonResponse::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAIDateTimeJsonResponse::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

QString OAIDateTimeJsonResponse::getClientIp() const {
    return m_client_ip;
}
void OAIDateTimeJsonResponse::setClientIp(const QString &client_ip) {
    m_client_ip = client_ip;
    m_client_ip_isSet = true;
}

bool OAIDateTimeJsonResponse::is_client_ip_Set() const{
    return m_client_ip_isSet;
}

bool OAIDateTimeJsonResponse::is_client_ip_Valid() const{
    return m_client_ip_isValid;
}

QString OAIDateTimeJsonResponse::getDatetime() const {
    return m_datetime;
}
void OAIDateTimeJsonResponse::setDatetime(const QString &datetime) {
    m_datetime = datetime;
    m_datetime_isSet = true;
}

bool OAIDateTimeJsonResponse::is_datetime_Set() const{
    return m_datetime_isSet;
}

bool OAIDateTimeJsonResponse::is_datetime_Valid() const{
    return m_datetime_isValid;
}

qint32 OAIDateTimeJsonResponse::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIDateTimeJsonResponse::setDayOfWeek(const qint32 &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIDateTimeJsonResponse::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIDateTimeJsonResponse::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

qint32 OAIDateTimeJsonResponse::getDayOfYear() const {
    return m_day_of_year;
}
void OAIDateTimeJsonResponse::setDayOfYear(const qint32 &day_of_year) {
    m_day_of_year = day_of_year;
    m_day_of_year_isSet = true;
}

bool OAIDateTimeJsonResponse::is_day_of_year_Set() const{
    return m_day_of_year_isSet;
}

bool OAIDateTimeJsonResponse::is_day_of_year_Valid() const{
    return m_day_of_year_isValid;
}

bool OAIDateTimeJsonResponse::isDst() const {
    return m_dst;
}
void OAIDateTimeJsonResponse::setDst(const bool &dst) {
    m_dst = dst;
    m_dst_isSet = true;
}

bool OAIDateTimeJsonResponse::is_dst_Set() const{
    return m_dst_isSet;
}

bool OAIDateTimeJsonResponse::is_dst_Valid() const{
    return m_dst_isValid;
}

QString OAIDateTimeJsonResponse::getDstFrom() const {
    return m_dst_from;
}
void OAIDateTimeJsonResponse::setDstFrom(const QString &dst_from) {
    m_dst_from = dst_from;
    m_dst_from_isSet = true;
}

bool OAIDateTimeJsonResponse::is_dst_from_Set() const{
    return m_dst_from_isSet;
}

bool OAIDateTimeJsonResponse::is_dst_from_Valid() const{
    return m_dst_from_isValid;
}

qint32 OAIDateTimeJsonResponse::getDstOffset() const {
    return m_dst_offset;
}
void OAIDateTimeJsonResponse::setDstOffset(const qint32 &dst_offset) {
    m_dst_offset = dst_offset;
    m_dst_offset_isSet = true;
}

bool OAIDateTimeJsonResponse::is_dst_offset_Set() const{
    return m_dst_offset_isSet;
}

bool OAIDateTimeJsonResponse::is_dst_offset_Valid() const{
    return m_dst_offset_isValid;
}

QString OAIDateTimeJsonResponse::getDstUntil() const {
    return m_dst_until;
}
void OAIDateTimeJsonResponse::setDstUntil(const QString &dst_until) {
    m_dst_until = dst_until;
    m_dst_until_isSet = true;
}

bool OAIDateTimeJsonResponse::is_dst_until_Set() const{
    return m_dst_until_isSet;
}

bool OAIDateTimeJsonResponse::is_dst_until_Valid() const{
    return m_dst_until_isValid;
}

qint32 OAIDateTimeJsonResponse::getRawOffset() const {
    return m_raw_offset;
}
void OAIDateTimeJsonResponse::setRawOffset(const qint32 &raw_offset) {
    m_raw_offset = raw_offset;
    m_raw_offset_isSet = true;
}

bool OAIDateTimeJsonResponse::is_raw_offset_Set() const{
    return m_raw_offset_isSet;
}

bool OAIDateTimeJsonResponse::is_raw_offset_Valid() const{
    return m_raw_offset_isValid;
}

QString OAIDateTimeJsonResponse::getTimezone() const {
    return m_timezone;
}
void OAIDateTimeJsonResponse::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIDateTimeJsonResponse::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIDateTimeJsonResponse::is_timezone_Valid() const{
    return m_timezone_isValid;
}

qint32 OAIDateTimeJsonResponse::getUnixtime() const {
    return m_unixtime;
}
void OAIDateTimeJsonResponse::setUnixtime(const qint32 &unixtime) {
    m_unixtime = unixtime;
    m_unixtime_isSet = true;
}

bool OAIDateTimeJsonResponse::is_unixtime_Set() const{
    return m_unixtime_isSet;
}

bool OAIDateTimeJsonResponse::is_unixtime_Valid() const{
    return m_unixtime_isValid;
}

QString OAIDateTimeJsonResponse::getUtcDatetime() const {
    return m_utc_datetime;
}
void OAIDateTimeJsonResponse::setUtcDatetime(const QString &utc_datetime) {
    m_utc_datetime = utc_datetime;
    m_utc_datetime_isSet = true;
}

bool OAIDateTimeJsonResponse::is_utc_datetime_Set() const{
    return m_utc_datetime_isSet;
}

bool OAIDateTimeJsonResponse::is_utc_datetime_Valid() const{
    return m_utc_datetime_isValid;
}

QString OAIDateTimeJsonResponse::getUtcOffset() const {
    return m_utc_offset;
}
void OAIDateTimeJsonResponse::setUtcOffset(const QString &utc_offset) {
    m_utc_offset = utc_offset;
    m_utc_offset_isSet = true;
}

bool OAIDateTimeJsonResponse::is_utc_offset_Set() const{
    return m_utc_offset_isSet;
}

bool OAIDateTimeJsonResponse::is_utc_offset_Valid() const{
    return m_utc_offset_isValid;
}

qint32 OAIDateTimeJsonResponse::getWeekNumber() const {
    return m_week_number;
}
void OAIDateTimeJsonResponse::setWeekNumber(const qint32 &week_number) {
    m_week_number = week_number;
    m_week_number_isSet = true;
}

bool OAIDateTimeJsonResponse::is_week_number_Set() const{
    return m_week_number_isSet;
}

bool OAIDateTimeJsonResponse::is_week_number_Valid() const{
    return m_week_number_isValid;
}

bool OAIDateTimeJsonResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dst_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dst_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dst_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dst_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unixtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeJsonResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_abbreviation_isValid && m_client_ip_isValid && m_datetime_isValid && m_day_of_week_isValid && m_day_of_year_isValid && m_dst_isValid && m_dst_offset_isValid && m_timezone_isValid && m_unixtime_isValid && m_utc_datetime_isValid && m_utc_offset_isValid && m_week_number_isValid && true;
}

} // namespace OpenAPI
