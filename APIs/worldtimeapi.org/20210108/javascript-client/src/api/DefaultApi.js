/**
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DateTimeJsonResponse from '../model/DateTimeJsonResponse';
import ErrorJsonResponse from '../model/ErrorJsonResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 20210108
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ipGet operation.
     * @callback module:api/DefaultApi~ipGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DateTimeJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request the current time based on the ip of the request. note: this is a \"best guess\" obtained from open-source data.
     * @param {module:api/DefaultApi~ipGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DateTimeJsonResponse}
     */
    ipGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DateTimeJsonResponse;
      return this.apiClient.callApi(
        '/ip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipIpv4Get operation.
     * @callback module:api/DefaultApi~ipIpv4GetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DateTimeJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request the current time based on the ip of the request. note: this is a \"best guess\" obtained from open-source data.
     * @param {String} ipv4 
     * @param {module:api/DefaultApi~ipIpv4GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DateTimeJsonResponse}
     */
    ipIpv4Get(ipv4, callback) {
      let postBody = null;
      // verify the required parameter 'ipv4' is set
      if (ipv4 === undefined || ipv4 === null) {
        throw new Error("Missing the required parameter 'ipv4' when calling ipIpv4Get");
      }

      let pathParams = {
        'ipv4': ipv4
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DateTimeJsonResponse;
      return this.apiClient.callApi(
        '/ip/{ipv4}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipIpv4TxtGet operation.
     * @callback module:api/DefaultApi~ipIpv4TxtGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request the current time based on the ip of the request. note: this is a \"best guess\" obtained from open-source data.
     * @param {String} ipv4 
     * @param {module:api/DefaultApi~ipIpv4TxtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    ipIpv4TxtGet(ipv4, callback) {
      let postBody = null;
      // verify the required parameter 'ipv4' is set
      if (ipv4 === undefined || ipv4 === null) {
        throw new Error("Missing the required parameter 'ipv4' when calling ipIpv4TxtGet");
      }

      let pathParams = {
        'ipv4': ipv4
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/ip/{ipv4}.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipTxtGet operation.
     * @callback module:api/DefaultApi~ipTxtGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request the current time based on the ip of the request. note: this is a \"best guess\" obtained from open-source data.
     * @param {module:api/DefaultApi~ipTxtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    ipTxtGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/ip.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezoneAreaGet operation.
     * @callback module:api/DefaultApi~timezoneAreaGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * a listing of all timezones available for that area.
     * @param {String} area 
     * @param {module:api/DefaultApi~timezoneAreaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    timezoneAreaGet(area, callback) {
      let postBody = null;
      // verify the required parameter 'area' is set
      if (area === undefined || area === null) {
        throw new Error("Missing the required parameter 'area' when calling timezoneAreaGet");
      }

      let pathParams = {
        'area': area
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/timezone/{area}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezoneAreaLocationGet operation.
     * @callback module:api/DefaultApi~timezoneAreaLocationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DateTimeJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request the current time for a timezone.
     * @param {String} area 
     * @param {String} location 
     * @param {module:api/DefaultApi~timezoneAreaLocationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DateTimeJsonResponse}
     */
    timezoneAreaLocationGet(area, location, callback) {
      let postBody = null;
      // verify the required parameter 'area' is set
      if (area === undefined || area === null) {
        throw new Error("Missing the required parameter 'area' when calling timezoneAreaLocationGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling timezoneAreaLocationGet");
      }

      let pathParams = {
        'area': area,
        'location': location
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DateTimeJsonResponse;
      return this.apiClient.callApi(
        '/timezone/{area}/{location}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezoneAreaLocationRegionGet operation.
     * @callback module:api/DefaultApi~timezoneAreaLocationRegionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DateTimeJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request the current time for a timezone.
     * @param {String} area 
     * @param {String} location 
     * @param {String} region 
     * @param {module:api/DefaultApi~timezoneAreaLocationRegionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DateTimeJsonResponse}
     */
    timezoneAreaLocationRegionGet(area, location, region, callback) {
      let postBody = null;
      // verify the required parameter 'area' is set
      if (area === undefined || area === null) {
        throw new Error("Missing the required parameter 'area' when calling timezoneAreaLocationRegionGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling timezoneAreaLocationRegionGet");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling timezoneAreaLocationRegionGet");
      }

      let pathParams = {
        'area': area,
        'location': location,
        'region': region
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DateTimeJsonResponse;
      return this.apiClient.callApi(
        '/timezone/{area}/{location}/{region}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezoneAreaLocationRegionTxtGet operation.
     * @callback module:api/DefaultApi~timezoneAreaLocationRegionTxtGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request the current time for a timezone.
     * @param {String} area 
     * @param {String} location 
     * @param {String} region 
     * @param {module:api/DefaultApi~timezoneAreaLocationRegionTxtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    timezoneAreaLocationRegionTxtGet(area, location, region, callback) {
      let postBody = null;
      // verify the required parameter 'area' is set
      if (area === undefined || area === null) {
        throw new Error("Missing the required parameter 'area' when calling timezoneAreaLocationRegionTxtGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling timezoneAreaLocationRegionTxtGet");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling timezoneAreaLocationRegionTxtGet");
      }

      let pathParams = {
        'area': area,
        'location': location,
        'region': region
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/timezone/{area}/{location}/{region}.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezoneAreaLocationTxtGet operation.
     * @callback module:api/DefaultApi~timezoneAreaLocationTxtGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request the current time for a timezone.
     * @param {String} area 
     * @param {String} location 
     * @param {module:api/DefaultApi~timezoneAreaLocationTxtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    timezoneAreaLocationTxtGet(area, location, callback) {
      let postBody = null;
      // verify the required parameter 'area' is set
      if (area === undefined || area === null) {
        throw new Error("Missing the required parameter 'area' when calling timezoneAreaLocationTxtGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling timezoneAreaLocationTxtGet");
      }

      let pathParams = {
        'area': area,
        'location': location
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/timezone/{area}/{location}.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezoneAreaTxtGet operation.
     * @callback module:api/DefaultApi~timezoneAreaTxtGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * a listing of all timezones available for that area.
     * @param {String} area 
     * @param {module:api/DefaultApi~timezoneAreaTxtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    timezoneAreaTxtGet(area, callback) {
      let postBody = null;
      // verify the required parameter 'area' is set
      if (area === undefined || area === null) {
        throw new Error("Missing the required parameter 'area' when calling timezoneAreaTxtGet");
      }

      let pathParams = {
        'area': area
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/timezone/{area}.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezoneGet operation.
     * @callback module:api/DefaultApi~timezoneGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * a listing of all timezones.
     * @param {module:api/DefaultApi~timezoneGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    timezoneGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/timezone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timezoneTxtGet operation.
     * @callback module:api/DefaultApi~timezoneTxtGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * a listing of all timezones.
     * @param {module:api/DefaultApi~timezoneTxtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    timezoneTxtGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/timezone.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
