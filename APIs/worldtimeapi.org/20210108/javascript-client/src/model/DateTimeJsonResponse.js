/**
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DateTimeJsonResponse model module.
 * @module model/DateTimeJsonResponse
 * @version 20210108
 */
class DateTimeJsonResponse {
    /**
     * Constructs a new <code>DateTimeJsonResponse</code>.
     * @alias module:model/DateTimeJsonResponse
     * @param abbreviation {String} the abbreviated name of the timezone
     * @param clientIp {String} the IP of the client making the request
     * @param datetime {String} an ISO8601-valid string representing the current, local date/time
     * @param dayOfWeek {Number} current day number of the week, where sunday is 0
     * @param dayOfYear {Number} ordinal date of the current year
     * @param dst {Boolean} flag indicating whether the local time is in daylight savings
     * @param dstOffset {Number} the difference in seconds between the current local time and daylight saving time for the location
     * @param timezone {String} timezone in `Area/Location` or `Area/Location/Region` format
     * @param unixtime {Number} number of seconds since the Epoch
     * @param utcDatetime {String} an ISO8601-valid string representing the current date/time in UTC
     * @param utcOffset {String} an ISO8601-valid string representing the offset from UTC
     * @param weekNumber {Number} the current week number
     */
    constructor(abbreviation, clientIp, datetime, dayOfWeek, dayOfYear, dst, dstOffset, timezone, unixtime, utcDatetime, utcOffset, weekNumber) { 
        
        DateTimeJsonResponse.initialize(this, abbreviation, clientIp, datetime, dayOfWeek, dayOfYear, dst, dstOffset, timezone, unixtime, utcDatetime, utcOffset, weekNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, abbreviation, clientIp, datetime, dayOfWeek, dayOfYear, dst, dstOffset, timezone, unixtime, utcDatetime, utcOffset, weekNumber) { 
        obj['abbreviation'] = abbreviation;
        obj['client_ip'] = clientIp;
        obj['datetime'] = datetime;
        obj['day_of_week'] = dayOfWeek;
        obj['day_of_year'] = dayOfYear;
        obj['dst'] = dst;
        obj['dst_offset'] = dstOffset;
        obj['timezone'] = timezone;
        obj['unixtime'] = unixtime;
        obj['utc_datetime'] = utcDatetime;
        obj['utc_offset'] = utcOffset;
        obj['week_number'] = weekNumber;
    }

    /**
     * Constructs a <code>DateTimeJsonResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DateTimeJsonResponse} obj Optional instance to populate.
     * @return {module:model/DateTimeJsonResponse} The populated <code>DateTimeJsonResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DateTimeJsonResponse();

            if (data.hasOwnProperty('abbreviation')) {
                obj['abbreviation'] = ApiClient.convertToType(data['abbreviation'], 'String');
            }
            if (data.hasOwnProperty('client_ip')) {
                obj['client_ip'] = ApiClient.convertToType(data['client_ip'], 'String');
            }
            if (data.hasOwnProperty('datetime')) {
                obj['datetime'] = ApiClient.convertToType(data['datetime'], 'String');
            }
            if (data.hasOwnProperty('day_of_week')) {
                obj['day_of_week'] = ApiClient.convertToType(data['day_of_week'], 'Number');
            }
            if (data.hasOwnProperty('day_of_year')) {
                obj['day_of_year'] = ApiClient.convertToType(data['day_of_year'], 'Number');
            }
            if (data.hasOwnProperty('dst')) {
                obj['dst'] = ApiClient.convertToType(data['dst'], 'Boolean');
            }
            if (data.hasOwnProperty('dst_from')) {
                obj['dst_from'] = ApiClient.convertToType(data['dst_from'], 'String');
            }
            if (data.hasOwnProperty('dst_offset')) {
                obj['dst_offset'] = ApiClient.convertToType(data['dst_offset'], 'Number');
            }
            if (data.hasOwnProperty('dst_until')) {
                obj['dst_until'] = ApiClient.convertToType(data['dst_until'], 'String');
            }
            if (data.hasOwnProperty('raw_offset')) {
                obj['raw_offset'] = ApiClient.convertToType(data['raw_offset'], 'Number');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('unixtime')) {
                obj['unixtime'] = ApiClient.convertToType(data['unixtime'], 'Number');
            }
            if (data.hasOwnProperty('utc_datetime')) {
                obj['utc_datetime'] = ApiClient.convertToType(data['utc_datetime'], 'String');
            }
            if (data.hasOwnProperty('utc_offset')) {
                obj['utc_offset'] = ApiClient.convertToType(data['utc_offset'], 'String');
            }
            if (data.hasOwnProperty('week_number')) {
                obj['week_number'] = ApiClient.convertToType(data['week_number'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DateTimeJsonResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DateTimeJsonResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DateTimeJsonResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['abbreviation'] && !(typeof data['abbreviation'] === 'string' || data['abbreviation'] instanceof String)) {
            throw new Error("Expected the field `abbreviation` to be a primitive type in the JSON string but got " + data['abbreviation']);
        }
        // ensure the json data is a string
        if (data['client_ip'] && !(typeof data['client_ip'] === 'string' || data['client_ip'] instanceof String)) {
            throw new Error("Expected the field `client_ip` to be a primitive type in the JSON string but got " + data['client_ip']);
        }
        // ensure the json data is a string
        if (data['datetime'] && !(typeof data['datetime'] === 'string' || data['datetime'] instanceof String)) {
            throw new Error("Expected the field `datetime` to be a primitive type in the JSON string but got " + data['datetime']);
        }
        // ensure the json data is a string
        if (data['dst_from'] && !(typeof data['dst_from'] === 'string' || data['dst_from'] instanceof String)) {
            throw new Error("Expected the field `dst_from` to be a primitive type in the JSON string but got " + data['dst_from']);
        }
        // ensure the json data is a string
        if (data['dst_until'] && !(typeof data['dst_until'] === 'string' || data['dst_until'] instanceof String)) {
            throw new Error("Expected the field `dst_until` to be a primitive type in the JSON string but got " + data['dst_until']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['utc_datetime'] && !(typeof data['utc_datetime'] === 'string' || data['utc_datetime'] instanceof String)) {
            throw new Error("Expected the field `utc_datetime` to be a primitive type in the JSON string but got " + data['utc_datetime']);
        }
        // ensure the json data is a string
        if (data['utc_offset'] && !(typeof data['utc_offset'] === 'string' || data['utc_offset'] instanceof String)) {
            throw new Error("Expected the field `utc_offset` to be a primitive type in the JSON string but got " + data['utc_offset']);
        }

        return true;
    }


}

DateTimeJsonResponse.RequiredProperties = ["abbreviation", "client_ip", "datetime", "day_of_week", "day_of_year", "dst", "dst_offset", "timezone", "unixtime", "utc_datetime", "utc_offset", "week_number"];

/**
 * the abbreviated name of the timezone
 * @member {String} abbreviation
 */
DateTimeJsonResponse.prototype['abbreviation'] = undefined;

/**
 * the IP of the client making the request
 * @member {String} client_ip
 */
DateTimeJsonResponse.prototype['client_ip'] = undefined;

/**
 * an ISO8601-valid string representing the current, local date/time
 * @member {String} datetime
 */
DateTimeJsonResponse.prototype['datetime'] = undefined;

/**
 * current day number of the week, where sunday is 0
 * @member {Number} day_of_week
 */
DateTimeJsonResponse.prototype['day_of_week'] = undefined;

/**
 * ordinal date of the current year
 * @member {Number} day_of_year
 */
DateTimeJsonResponse.prototype['day_of_year'] = undefined;

/**
 * flag indicating whether the local time is in daylight savings
 * @member {Boolean} dst
 */
DateTimeJsonResponse.prototype['dst'] = undefined;

/**
 * an ISO8601-valid string representing the datetime when daylight savings started for this timezone
 * @member {String} dst_from
 */
DateTimeJsonResponse.prototype['dst_from'] = undefined;

/**
 * the difference in seconds between the current local time and daylight saving time for the location
 * @member {Number} dst_offset
 */
DateTimeJsonResponse.prototype['dst_offset'] = undefined;

/**
 * an ISO8601-valid string representing the datetime when daylight savings will end for this timezone
 * @member {String} dst_until
 */
DateTimeJsonResponse.prototype['dst_until'] = undefined;

/**
 * the difference in seconds between the current local time and the time in UTC, excluding any daylight saving difference (see dst_offset)
 * @member {Number} raw_offset
 */
DateTimeJsonResponse.prototype['raw_offset'] = undefined;

/**
 * timezone in `Area/Location` or `Area/Location/Region` format
 * @member {String} timezone
 */
DateTimeJsonResponse.prototype['timezone'] = undefined;

/**
 * number of seconds since the Epoch
 * @member {Number} unixtime
 */
DateTimeJsonResponse.prototype['unixtime'] = undefined;

/**
 * an ISO8601-valid string representing the current date/time in UTC
 * @member {String} utc_datetime
 */
DateTimeJsonResponse.prototype['utc_datetime'] = undefined;

/**
 * an ISO8601-valid string representing the offset from UTC
 * @member {String} utc_offset
 */
DateTimeJsonResponse.prototype['utc_offset'] = undefined;

/**
 * the current week number
 * @member {Number} week_number
 */
DateTimeJsonResponse.prototype['week_number'] = undefined;






export default DateTimeJsonResponse;

