/**
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WorldTimeApi);
  }
}(this, function(expect, WorldTimeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WorldTimeApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('ipGet', function() {
      it('should call ipGet successfully', function(done) {
        //uncomment below and update the code to test ipGet
        //instance.ipGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipIpv4Get', function() {
      it('should call ipIpv4Get successfully', function(done) {
        //uncomment below and update the code to test ipIpv4Get
        //instance.ipIpv4Get(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipIpv4TxtGet', function() {
      it('should call ipIpv4TxtGet successfully', function(done) {
        //uncomment below and update the code to test ipIpv4TxtGet
        //instance.ipIpv4TxtGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipTxtGet', function() {
      it('should call ipTxtGet successfully', function(done) {
        //uncomment below and update the code to test ipTxtGet
        //instance.ipTxtGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('timezoneAreaGet', function() {
      it('should call timezoneAreaGet successfully', function(done) {
        //uncomment below and update the code to test timezoneAreaGet
        //instance.timezoneAreaGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('timezoneAreaLocationGet', function() {
      it('should call timezoneAreaLocationGet successfully', function(done) {
        //uncomment below and update the code to test timezoneAreaLocationGet
        //instance.timezoneAreaLocationGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('timezoneAreaLocationRegionGet', function() {
      it('should call timezoneAreaLocationRegionGet successfully', function(done) {
        //uncomment below and update the code to test timezoneAreaLocationRegionGet
        //instance.timezoneAreaLocationRegionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('timezoneAreaLocationRegionTxtGet', function() {
      it('should call timezoneAreaLocationRegionTxtGet successfully', function(done) {
        //uncomment below and update the code to test timezoneAreaLocationRegionTxtGet
        //instance.timezoneAreaLocationRegionTxtGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('timezoneAreaLocationTxtGet', function() {
      it('should call timezoneAreaLocationTxtGet successfully', function(done) {
        //uncomment below and update the code to test timezoneAreaLocationTxtGet
        //instance.timezoneAreaLocationTxtGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('timezoneAreaTxtGet', function() {
      it('should call timezoneAreaTxtGet successfully', function(done) {
        //uncomment below and update the code to test timezoneAreaTxtGet
        //instance.timezoneAreaTxtGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('timezoneGet', function() {
      it('should call timezoneGet successfully', function(done) {
        //uncomment below and update the code to test timezoneGet
        //instance.timezoneGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('timezoneTxtGet', function() {
      it('should call timezoneTxtGet successfully', function(done) {
        //uncomment below and update the code to test timezoneTxtGet
        //instance.timezoneTxtGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
