/**
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WorldTimeApi);
  }
}(this, function(expect, WorldTimeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WorldTimeApi.DateTimeJsonResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DateTimeJsonResponse', function() {
    it('should create an instance of DateTimeJsonResponse', function() {
      // uncomment below and update the code to test DateTimeJsonResponse
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be.a(WorldTimeApi.DateTimeJsonResponse);
    });

    it('should have the property abbreviation (base name: "abbreviation")', function() {
      // uncomment below and update the code to test the property abbreviation
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property clientIp (base name: "client_ip")', function() {
      // uncomment below and update the code to test the property clientIp
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property datetime (base name: "datetime")', function() {
      // uncomment below and update the code to test the property datetime
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property dayOfWeek (base name: "day_of_week")', function() {
      // uncomment below and update the code to test the property dayOfWeek
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property dayOfYear (base name: "day_of_year")', function() {
      // uncomment below and update the code to test the property dayOfYear
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property dst (base name: "dst")', function() {
      // uncomment below and update the code to test the property dst
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property dstFrom (base name: "dst_from")', function() {
      // uncomment below and update the code to test the property dstFrom
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property dstOffset (base name: "dst_offset")', function() {
      // uncomment below and update the code to test the property dstOffset
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property dstUntil (base name: "dst_until")', function() {
      // uncomment below and update the code to test the property dstUntil
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property rawOffset (base name: "raw_offset")', function() {
      // uncomment below and update the code to test the property rawOffset
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property unixtime (base name: "unixtime")', function() {
      // uncomment below and update the code to test the property unixtime
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property utcDatetime (base name: "utc_datetime")', function() {
      // uncomment below and update the code to test the property utcDatetime
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property utcOffset (base name: "utc_offset")', function() {
      // uncomment below and update the code to test the property utcOffset
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property weekNumber (base name: "week_number")', function() {
      // uncomment below and update the code to test the property weekNumber
      //var instance = new WorldTimeApi.DateTimeJsonResponse();
      //expect(instance).to.be();
    });

  });

}));
