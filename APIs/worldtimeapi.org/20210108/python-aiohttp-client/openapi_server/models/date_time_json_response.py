# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DateTimeJsonResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abbreviation: str=None, client_ip: str=None, datetime: str=None, day_of_week: int=None, day_of_year: int=None, dst: bool=None, dst_from: str=None, dst_offset: int=None, dst_until: str=None, raw_offset: int=None, timezone: str=None, unixtime: int=None, utc_datetime: str=None, utc_offset: str=None, week_number: int=None):
        """DateTimeJsonResponse - a model defined in OpenAPI

        :param abbreviation: The abbreviation of this DateTimeJsonResponse.
        :param client_ip: The client_ip of this DateTimeJsonResponse.
        :param datetime: The datetime of this DateTimeJsonResponse.
        :param day_of_week: The day_of_week of this DateTimeJsonResponse.
        :param day_of_year: The day_of_year of this DateTimeJsonResponse.
        :param dst: The dst of this DateTimeJsonResponse.
        :param dst_from: The dst_from of this DateTimeJsonResponse.
        :param dst_offset: The dst_offset of this DateTimeJsonResponse.
        :param dst_until: The dst_until of this DateTimeJsonResponse.
        :param raw_offset: The raw_offset of this DateTimeJsonResponse.
        :param timezone: The timezone of this DateTimeJsonResponse.
        :param unixtime: The unixtime of this DateTimeJsonResponse.
        :param utc_datetime: The utc_datetime of this DateTimeJsonResponse.
        :param utc_offset: The utc_offset of this DateTimeJsonResponse.
        :param week_number: The week_number of this DateTimeJsonResponse.
        """
        self.openapi_types = {
            'abbreviation': str,
            'client_ip': str,
            'datetime': str,
            'day_of_week': int,
            'day_of_year': int,
            'dst': bool,
            'dst_from': str,
            'dst_offset': int,
            'dst_until': str,
            'raw_offset': int,
            'timezone': str,
            'unixtime': int,
            'utc_datetime': str,
            'utc_offset': str,
            'week_number': int
        }

        self.attribute_map = {
            'abbreviation': 'abbreviation',
            'client_ip': 'client_ip',
            'datetime': 'datetime',
            'day_of_week': 'day_of_week',
            'day_of_year': 'day_of_year',
            'dst': 'dst',
            'dst_from': 'dst_from',
            'dst_offset': 'dst_offset',
            'dst_until': 'dst_until',
            'raw_offset': 'raw_offset',
            'timezone': 'timezone',
            'unixtime': 'unixtime',
            'utc_datetime': 'utc_datetime',
            'utc_offset': 'utc_offset',
            'week_number': 'week_number'
        }

        self._abbreviation = abbreviation
        self._client_ip = client_ip
        self._datetime = datetime
        self._day_of_week = day_of_week
        self._day_of_year = day_of_year
        self._dst = dst
        self._dst_from = dst_from
        self._dst_offset = dst_offset
        self._dst_until = dst_until
        self._raw_offset = raw_offset
        self._timezone = timezone
        self._unixtime = unixtime
        self._utc_datetime = utc_datetime
        self._utc_offset = utc_offset
        self._week_number = week_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateTimeJsonResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateTimeJsonResponse of this DateTimeJsonResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbreviation(self):
        """Gets the abbreviation of this DateTimeJsonResponse.

        the abbreviated name of the timezone

        :return: The abbreviation of this DateTimeJsonResponse.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this DateTimeJsonResponse.

        the abbreviated name of the timezone

        :param abbreviation: The abbreviation of this DateTimeJsonResponse.
        :type abbreviation: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")

        self._abbreviation = abbreviation

    @property
    def client_ip(self):
        """Gets the client_ip of this DateTimeJsonResponse.

        the IP of the client making the request

        :return: The client_ip of this DateTimeJsonResponse.
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this DateTimeJsonResponse.

        the IP of the client making the request

        :param client_ip: The client_ip of this DateTimeJsonResponse.
        :type client_ip: str
        """
        if client_ip is None:
            raise ValueError("Invalid value for `client_ip`, must not be `None`")

        self._client_ip = client_ip

    @property
    def datetime(self):
        """Gets the datetime of this DateTimeJsonResponse.

        an ISO8601-valid string representing the current, local date/time

        :return: The datetime of this DateTimeJsonResponse.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this DateTimeJsonResponse.

        an ISO8601-valid string representing the current, local date/time

        :param datetime: The datetime of this DateTimeJsonResponse.
        :type datetime: str
        """
        if datetime is None:
            raise ValueError("Invalid value for `datetime`, must not be `None`")

        self._datetime = datetime

    @property
    def day_of_week(self):
        """Gets the day_of_week of this DateTimeJsonResponse.

        current day number of the week, where sunday is 0

        :return: The day_of_week of this DateTimeJsonResponse.
        :rtype: int
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this DateTimeJsonResponse.

        current day number of the week, where sunday is 0

        :param day_of_week: The day_of_week of this DateTimeJsonResponse.
        :type day_of_week: int
        """
        if day_of_week is None:
            raise ValueError("Invalid value for `day_of_week`, must not be `None`")

        self._day_of_week = day_of_week

    @property
    def day_of_year(self):
        """Gets the day_of_year of this DateTimeJsonResponse.

        ordinal date of the current year

        :return: The day_of_year of this DateTimeJsonResponse.
        :rtype: int
        """
        return self._day_of_year

    @day_of_year.setter
    def day_of_year(self, day_of_year):
        """Sets the day_of_year of this DateTimeJsonResponse.

        ordinal date of the current year

        :param day_of_year: The day_of_year of this DateTimeJsonResponse.
        :type day_of_year: int
        """
        if day_of_year is None:
            raise ValueError("Invalid value for `day_of_year`, must not be `None`")

        self._day_of_year = day_of_year

    @property
    def dst(self):
        """Gets the dst of this DateTimeJsonResponse.

        flag indicating whether the local time is in daylight savings

        :return: The dst of this DateTimeJsonResponse.
        :rtype: bool
        """
        return self._dst

    @dst.setter
    def dst(self, dst):
        """Sets the dst of this DateTimeJsonResponse.

        flag indicating whether the local time is in daylight savings

        :param dst: The dst of this DateTimeJsonResponse.
        :type dst: bool
        """
        if dst is None:
            raise ValueError("Invalid value for `dst`, must not be `None`")

        self._dst = dst

    @property
    def dst_from(self):
        """Gets the dst_from of this DateTimeJsonResponse.

        an ISO8601-valid string representing the datetime when daylight savings started for this timezone

        :return: The dst_from of this DateTimeJsonResponse.
        :rtype: str
        """
        return self._dst_from

    @dst_from.setter
    def dst_from(self, dst_from):
        """Sets the dst_from of this DateTimeJsonResponse.

        an ISO8601-valid string representing the datetime when daylight savings started for this timezone

        :param dst_from: The dst_from of this DateTimeJsonResponse.
        :type dst_from: str
        """

        self._dst_from = dst_from

    @property
    def dst_offset(self):
        """Gets the dst_offset of this DateTimeJsonResponse.

        the difference in seconds between the current local time and daylight saving time for the location

        :return: The dst_offset of this DateTimeJsonResponse.
        :rtype: int
        """
        return self._dst_offset

    @dst_offset.setter
    def dst_offset(self, dst_offset):
        """Sets the dst_offset of this DateTimeJsonResponse.

        the difference in seconds between the current local time and daylight saving time for the location

        :param dst_offset: The dst_offset of this DateTimeJsonResponse.
        :type dst_offset: int
        """
        if dst_offset is None:
            raise ValueError("Invalid value for `dst_offset`, must not be `None`")

        self._dst_offset = dst_offset

    @property
    def dst_until(self):
        """Gets the dst_until of this DateTimeJsonResponse.

        an ISO8601-valid string representing the datetime when daylight savings will end for this timezone

        :return: The dst_until of this DateTimeJsonResponse.
        :rtype: str
        """
        return self._dst_until

    @dst_until.setter
    def dst_until(self, dst_until):
        """Sets the dst_until of this DateTimeJsonResponse.

        an ISO8601-valid string representing the datetime when daylight savings will end for this timezone

        :param dst_until: The dst_until of this DateTimeJsonResponse.
        :type dst_until: str
        """

        self._dst_until = dst_until

    @property
    def raw_offset(self):
        """Gets the raw_offset of this DateTimeJsonResponse.

        the difference in seconds between the current local time and the time in UTC, excluding any daylight saving difference (see dst_offset)

        :return: The raw_offset of this DateTimeJsonResponse.
        :rtype: int
        """
        return self._raw_offset

    @raw_offset.setter
    def raw_offset(self, raw_offset):
        """Sets the raw_offset of this DateTimeJsonResponse.

        the difference in seconds between the current local time and the time in UTC, excluding any daylight saving difference (see dst_offset)

        :param raw_offset: The raw_offset of this DateTimeJsonResponse.
        :type raw_offset: int
        """

        self._raw_offset = raw_offset

    @property
    def timezone(self):
        """Gets the timezone of this DateTimeJsonResponse.

        timezone in `Area/Location` or `Area/Location/Region` format

        :return: The timezone of this DateTimeJsonResponse.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DateTimeJsonResponse.

        timezone in `Area/Location` or `Area/Location/Region` format

        :param timezone: The timezone of this DateTimeJsonResponse.
        :type timezone: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")

        self._timezone = timezone

    @property
    def unixtime(self):
        """Gets the unixtime of this DateTimeJsonResponse.

        number of seconds since the Epoch

        :return: The unixtime of this DateTimeJsonResponse.
        :rtype: int
        """
        return self._unixtime

    @unixtime.setter
    def unixtime(self, unixtime):
        """Sets the unixtime of this DateTimeJsonResponse.

        number of seconds since the Epoch

        :param unixtime: The unixtime of this DateTimeJsonResponse.
        :type unixtime: int
        """
        if unixtime is None:
            raise ValueError("Invalid value for `unixtime`, must not be `None`")

        self._unixtime = unixtime

    @property
    def utc_datetime(self):
        """Gets the utc_datetime of this DateTimeJsonResponse.

        an ISO8601-valid string representing the current date/time in UTC

        :return: The utc_datetime of this DateTimeJsonResponse.
        :rtype: str
        """
        return self._utc_datetime

    @utc_datetime.setter
    def utc_datetime(self, utc_datetime):
        """Sets the utc_datetime of this DateTimeJsonResponse.

        an ISO8601-valid string representing the current date/time in UTC

        :param utc_datetime: The utc_datetime of this DateTimeJsonResponse.
        :type utc_datetime: str
        """
        if utc_datetime is None:
            raise ValueError("Invalid value for `utc_datetime`, must not be `None`")

        self._utc_datetime = utc_datetime

    @property
    def utc_offset(self):
        """Gets the utc_offset of this DateTimeJsonResponse.

        an ISO8601-valid string representing the offset from UTC

        :return: The utc_offset of this DateTimeJsonResponse.
        :rtype: str
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this DateTimeJsonResponse.

        an ISO8601-valid string representing the offset from UTC

        :param utc_offset: The utc_offset of this DateTimeJsonResponse.
        :type utc_offset: str
        """
        if utc_offset is None:
            raise ValueError("Invalid value for `utc_offset`, must not be `None`")

        self._utc_offset = utc_offset

    @property
    def week_number(self):
        """Gets the week_number of this DateTimeJsonResponse.

        the current week number

        :return: The week_number of this DateTimeJsonResponse.
        :rtype: int
        """
        return self._week_number

    @week_number.setter
    def week_number(self, week_number):
        """Sets the week_number of this DateTimeJsonResponse.

        the current week number

        :param week_number: The week_number of this DateTimeJsonResponse.
        :type week_number: int
        """
        if week_number is None:
            raise ValueError("Invalid value for `week_number`, must not be `None`")

        self._week_number = week_number
