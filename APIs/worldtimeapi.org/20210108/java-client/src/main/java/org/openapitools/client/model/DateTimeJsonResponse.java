/*
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DateTimeJsonResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:10.754554-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DateTimeJsonResponse {
  public static final String SERIALIZED_NAME_ABBREVIATION = "abbreviation";
  @SerializedName(SERIALIZED_NAME_ABBREVIATION)
  private String abbreviation;

  public static final String SERIALIZED_NAME_CLIENT_IP = "client_ip";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP)
  private String clientIp;

  public static final String SERIALIZED_NAME_DATETIME = "datetime";
  @SerializedName(SERIALIZED_NAME_DATETIME)
  private String datetime;

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "day_of_week";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private Integer dayOfWeek;

  public static final String SERIALIZED_NAME_DAY_OF_YEAR = "day_of_year";
  @SerializedName(SERIALIZED_NAME_DAY_OF_YEAR)
  private Integer dayOfYear;

  public static final String SERIALIZED_NAME_DST = "dst";
  @SerializedName(SERIALIZED_NAME_DST)
  private Boolean dst;

  public static final String SERIALIZED_NAME_DST_FROM = "dst_from";
  @SerializedName(SERIALIZED_NAME_DST_FROM)
  private String dstFrom;

  public static final String SERIALIZED_NAME_DST_OFFSET = "dst_offset";
  @SerializedName(SERIALIZED_NAME_DST_OFFSET)
  private Integer dstOffset;

  public static final String SERIALIZED_NAME_DST_UNTIL = "dst_until";
  @SerializedName(SERIALIZED_NAME_DST_UNTIL)
  private String dstUntil;

  public static final String SERIALIZED_NAME_RAW_OFFSET = "raw_offset";
  @SerializedName(SERIALIZED_NAME_RAW_OFFSET)
  private Integer rawOffset;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_UNIXTIME = "unixtime";
  @SerializedName(SERIALIZED_NAME_UNIXTIME)
  private Integer unixtime;

  public static final String SERIALIZED_NAME_UTC_DATETIME = "utc_datetime";
  @SerializedName(SERIALIZED_NAME_UTC_DATETIME)
  private String utcDatetime;

  public static final String SERIALIZED_NAME_UTC_OFFSET = "utc_offset";
  @SerializedName(SERIALIZED_NAME_UTC_OFFSET)
  private String utcOffset;

  public static final String SERIALIZED_NAME_WEEK_NUMBER = "week_number";
  @SerializedName(SERIALIZED_NAME_WEEK_NUMBER)
  private Integer weekNumber;

  public DateTimeJsonResponse() {
  }

  public DateTimeJsonResponse abbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
    return this;
  }

  /**
   * the abbreviated name of the timezone
   * @return abbreviation
   */
  @javax.annotation.Nonnull
  public String getAbbreviation() {
    return abbreviation;
  }

  public void setAbbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
  }


  public DateTimeJsonResponse clientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  /**
   * the IP of the client making the request
   * @return clientIp
   */
  @javax.annotation.Nonnull
  public String getClientIp() {
    return clientIp;
  }

  public void setClientIp(String clientIp) {
    this.clientIp = clientIp;
  }


  public DateTimeJsonResponse datetime(String datetime) {
    this.datetime = datetime;
    return this;
  }

  /**
   * an ISO8601-valid string representing the current, local date/time
   * @return datetime
   */
  @javax.annotation.Nonnull
  public String getDatetime() {
    return datetime;
  }

  public void setDatetime(String datetime) {
    this.datetime = datetime;
  }


  public DateTimeJsonResponse dayOfWeek(Integer dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * current day number of the week, where sunday is 0
   * @return dayOfWeek
   */
  @javax.annotation.Nonnull
  public Integer getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(Integer dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public DateTimeJsonResponse dayOfYear(Integer dayOfYear) {
    this.dayOfYear = dayOfYear;
    return this;
  }

  /**
   * ordinal date of the current year
   * @return dayOfYear
   */
  @javax.annotation.Nonnull
  public Integer getDayOfYear() {
    return dayOfYear;
  }

  public void setDayOfYear(Integer dayOfYear) {
    this.dayOfYear = dayOfYear;
  }


  public DateTimeJsonResponse dst(Boolean dst) {
    this.dst = dst;
    return this;
  }

  /**
   * flag indicating whether the local time is in daylight savings
   * @return dst
   */
  @javax.annotation.Nonnull
  public Boolean getDst() {
    return dst;
  }

  public void setDst(Boolean dst) {
    this.dst = dst;
  }


  public DateTimeJsonResponse dstFrom(String dstFrom) {
    this.dstFrom = dstFrom;
    return this;
  }

  /**
   * an ISO8601-valid string representing the datetime when daylight savings started for this timezone
   * @return dstFrom
   */
  @javax.annotation.Nullable
  public String getDstFrom() {
    return dstFrom;
  }

  public void setDstFrom(String dstFrom) {
    this.dstFrom = dstFrom;
  }


  public DateTimeJsonResponse dstOffset(Integer dstOffset) {
    this.dstOffset = dstOffset;
    return this;
  }

  /**
   * the difference in seconds between the current local time and daylight saving time for the location
   * @return dstOffset
   */
  @javax.annotation.Nonnull
  public Integer getDstOffset() {
    return dstOffset;
  }

  public void setDstOffset(Integer dstOffset) {
    this.dstOffset = dstOffset;
  }


  public DateTimeJsonResponse dstUntil(String dstUntil) {
    this.dstUntil = dstUntil;
    return this;
  }

  /**
   * an ISO8601-valid string representing the datetime when daylight savings will end for this timezone
   * @return dstUntil
   */
  @javax.annotation.Nullable
  public String getDstUntil() {
    return dstUntil;
  }

  public void setDstUntil(String dstUntil) {
    this.dstUntil = dstUntil;
  }


  public DateTimeJsonResponse rawOffset(Integer rawOffset) {
    this.rawOffset = rawOffset;
    return this;
  }

  /**
   * the difference in seconds between the current local time and the time in UTC, excluding any daylight saving difference (see dst_offset)
   * @return rawOffset
   */
  @javax.annotation.Nullable
  public Integer getRawOffset() {
    return rawOffset;
  }

  public void setRawOffset(Integer rawOffset) {
    this.rawOffset = rawOffset;
  }


  public DateTimeJsonResponse timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * timezone in &#x60;Area/Location&#x60; or &#x60;Area/Location/Region&#x60; format
   * @return timezone
   */
  @javax.annotation.Nonnull
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public DateTimeJsonResponse unixtime(Integer unixtime) {
    this.unixtime = unixtime;
    return this;
  }

  /**
   * number of seconds since the Epoch
   * @return unixtime
   */
  @javax.annotation.Nonnull
  public Integer getUnixtime() {
    return unixtime;
  }

  public void setUnixtime(Integer unixtime) {
    this.unixtime = unixtime;
  }


  public DateTimeJsonResponse utcDatetime(String utcDatetime) {
    this.utcDatetime = utcDatetime;
    return this;
  }

  /**
   * an ISO8601-valid string representing the current date/time in UTC
   * @return utcDatetime
   */
  @javax.annotation.Nonnull
  public String getUtcDatetime() {
    return utcDatetime;
  }

  public void setUtcDatetime(String utcDatetime) {
    this.utcDatetime = utcDatetime;
  }


  public DateTimeJsonResponse utcOffset(String utcOffset) {
    this.utcOffset = utcOffset;
    return this;
  }

  /**
   * an ISO8601-valid string representing the offset from UTC
   * @return utcOffset
   */
  @javax.annotation.Nonnull
  public String getUtcOffset() {
    return utcOffset;
  }

  public void setUtcOffset(String utcOffset) {
    this.utcOffset = utcOffset;
  }


  public DateTimeJsonResponse weekNumber(Integer weekNumber) {
    this.weekNumber = weekNumber;
    return this;
  }

  /**
   * the current week number
   * @return weekNumber
   */
  @javax.annotation.Nonnull
  public Integer getWeekNumber() {
    return weekNumber;
  }

  public void setWeekNumber(Integer weekNumber) {
    this.weekNumber = weekNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DateTimeJsonResponse dateTimeJsonResponse = (DateTimeJsonResponse) o;
    return Objects.equals(this.abbreviation, dateTimeJsonResponse.abbreviation) &&
        Objects.equals(this.clientIp, dateTimeJsonResponse.clientIp) &&
        Objects.equals(this.datetime, dateTimeJsonResponse.datetime) &&
        Objects.equals(this.dayOfWeek, dateTimeJsonResponse.dayOfWeek) &&
        Objects.equals(this.dayOfYear, dateTimeJsonResponse.dayOfYear) &&
        Objects.equals(this.dst, dateTimeJsonResponse.dst) &&
        Objects.equals(this.dstFrom, dateTimeJsonResponse.dstFrom) &&
        Objects.equals(this.dstOffset, dateTimeJsonResponse.dstOffset) &&
        Objects.equals(this.dstUntil, dateTimeJsonResponse.dstUntil) &&
        Objects.equals(this.rawOffset, dateTimeJsonResponse.rawOffset) &&
        Objects.equals(this.timezone, dateTimeJsonResponse.timezone) &&
        Objects.equals(this.unixtime, dateTimeJsonResponse.unixtime) &&
        Objects.equals(this.utcDatetime, dateTimeJsonResponse.utcDatetime) &&
        Objects.equals(this.utcOffset, dateTimeJsonResponse.utcOffset) &&
        Objects.equals(this.weekNumber, dateTimeJsonResponse.weekNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abbreviation, clientIp, datetime, dayOfWeek, dayOfYear, dst, dstFrom, dstOffset, dstUntil, rawOffset, timezone, unixtime, utcDatetime, utcOffset, weekNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DateTimeJsonResponse {\n");
    sb.append("    abbreviation: ").append(toIndentedString(abbreviation)).append("\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    dayOfYear: ").append(toIndentedString(dayOfYear)).append("\n");
    sb.append("    dst: ").append(toIndentedString(dst)).append("\n");
    sb.append("    dstFrom: ").append(toIndentedString(dstFrom)).append("\n");
    sb.append("    dstOffset: ").append(toIndentedString(dstOffset)).append("\n");
    sb.append("    dstUntil: ").append(toIndentedString(dstUntil)).append("\n");
    sb.append("    rawOffset: ").append(toIndentedString(rawOffset)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    unixtime: ").append(toIndentedString(unixtime)).append("\n");
    sb.append("    utcDatetime: ").append(toIndentedString(utcDatetime)).append("\n");
    sb.append("    utcOffset: ").append(toIndentedString(utcOffset)).append("\n");
    sb.append("    weekNumber: ").append(toIndentedString(weekNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abbreviation");
    openapiFields.add("client_ip");
    openapiFields.add("datetime");
    openapiFields.add("day_of_week");
    openapiFields.add("day_of_year");
    openapiFields.add("dst");
    openapiFields.add("dst_from");
    openapiFields.add("dst_offset");
    openapiFields.add("dst_until");
    openapiFields.add("raw_offset");
    openapiFields.add("timezone");
    openapiFields.add("unixtime");
    openapiFields.add("utc_datetime");
    openapiFields.add("utc_offset");
    openapiFields.add("week_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("abbreviation");
    openapiRequiredFields.add("client_ip");
    openapiRequiredFields.add("datetime");
    openapiRequiredFields.add("day_of_week");
    openapiRequiredFields.add("day_of_year");
    openapiRequiredFields.add("dst");
    openapiRequiredFields.add("dst_offset");
    openapiRequiredFields.add("timezone");
    openapiRequiredFields.add("unixtime");
    openapiRequiredFields.add("utc_datetime");
    openapiRequiredFields.add("utc_offset");
    openapiRequiredFields.add("week_number");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DateTimeJsonResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DateTimeJsonResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DateTimeJsonResponse is not found in the empty JSON string", DateTimeJsonResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DateTimeJsonResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DateTimeJsonResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DateTimeJsonResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("abbreviation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abbreviation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abbreviation").toString()));
      }
      if (!jsonObj.get("client_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip").toString()));
      }
      if (!jsonObj.get("datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datetime").toString()));
      }
      if ((jsonObj.get("dst_from") != null && !jsonObj.get("dst_from").isJsonNull()) && !jsonObj.get("dst_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dst_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dst_from").toString()));
      }
      if ((jsonObj.get("dst_until") != null && !jsonObj.get("dst_until").isJsonNull()) && !jsonObj.get("dst_until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dst_until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dst_until").toString()));
      }
      if (!jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (!jsonObj.get("utc_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utc_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utc_datetime").toString()));
      }
      if (!jsonObj.get("utc_offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utc_offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utc_offset").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DateTimeJsonResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DateTimeJsonResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DateTimeJsonResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DateTimeJsonResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DateTimeJsonResponse>() {
           @Override
           public void write(JsonWriter out, DateTimeJsonResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DateTimeJsonResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DateTimeJsonResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DateTimeJsonResponse
   * @throws IOException if the JSON string is invalid with respect to DateTimeJsonResponse
   */
  public static DateTimeJsonResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DateTimeJsonResponse.class);
  }

  /**
   * Convert an instance of DateTimeJsonResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

