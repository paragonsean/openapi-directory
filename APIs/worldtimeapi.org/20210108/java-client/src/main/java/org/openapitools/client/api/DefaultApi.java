/*
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DateTimeJsonResponse;
import org.openapitools.client.model.ErrorJsonResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return ipGetCall(_callback);

    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     * 
     * @return DateTimeJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public DateTimeJsonResponse ipGet() throws ApiException {
        ApiResponse<DateTimeJsonResponse> localVarResp = ipGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     * 
     * @return ApiResponse&lt;DateTimeJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DateTimeJsonResponse> ipGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DateTimeJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipGetAsync(final ApiCallback<DateTimeJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DateTimeJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipIpv4Get
     * @param ipv4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipIpv4GetCall(String ipv4, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ip/{ipv4}"
            .replace("{" + "ipv4" + "}", localVarApiClient.escapeString(ipv4.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipIpv4GetValidateBeforeCall(String ipv4, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipv4' is set
        if (ipv4 == null) {
            throw new ApiException("Missing the required parameter 'ipv4' when calling ipIpv4Get(Async)");
        }

        return ipIpv4GetCall(ipv4, _callback);

    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     * 
     * @param ipv4  (required)
     * @return DateTimeJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public DateTimeJsonResponse ipIpv4Get(String ipv4) throws ApiException {
        ApiResponse<DateTimeJsonResponse> localVarResp = ipIpv4GetWithHttpInfo(ipv4);
        return localVarResp.getData();
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     * 
     * @param ipv4  (required)
     * @return ApiResponse&lt;DateTimeJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DateTimeJsonResponse> ipIpv4GetWithHttpInfo(String ipv4) throws ApiException {
        okhttp3.Call localVarCall = ipIpv4GetValidateBeforeCall(ipv4, null);
        Type localVarReturnType = new TypeToken<DateTimeJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data. (asynchronously)
     * 
     * @param ipv4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipIpv4GetAsync(String ipv4, final ApiCallback<DateTimeJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipIpv4GetValidateBeforeCall(ipv4, _callback);
        Type localVarReturnType = new TypeToken<DateTimeJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipIpv4TxtGet
     * @param ipv4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipIpv4TxtGetCall(String ipv4, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ip/{ipv4}.txt"
            .replace("{" + "ipv4" + "}", localVarApiClient.escapeString(ipv4.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipIpv4TxtGetValidateBeforeCall(String ipv4, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipv4' is set
        if (ipv4 == null) {
            throw new ApiException("Missing the required parameter 'ipv4' when calling ipIpv4TxtGet(Async)");
        }

        return ipIpv4TxtGetCall(ipv4, _callback);

    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     * 
     * @param ipv4  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public String ipIpv4TxtGet(String ipv4) throws ApiException {
        ApiResponse<String> localVarResp = ipIpv4TxtGetWithHttpInfo(ipv4);
        return localVarResp.getData();
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     * 
     * @param ipv4  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> ipIpv4TxtGetWithHttpInfo(String ipv4) throws ApiException {
        okhttp3.Call localVarCall = ipIpv4TxtGetValidateBeforeCall(ipv4, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data. (asynchronously)
     * 
     * @param ipv4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipIpv4TxtGetAsync(String ipv4, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipIpv4TxtGetValidateBeforeCall(ipv4, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipTxtGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipTxtGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ip.txt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipTxtGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return ipTxtGetCall(_callback);

    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public String ipTxtGet() throws ApiException {
        ApiResponse<String> localVarResp = ipTxtGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> ipTxtGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipTxtGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipTxtGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipTxtGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezoneAreaGet
     * @param area  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of available timezones in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaGetCall(String area, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timezone/{area}"
            .replace("{" + "area" + "}", localVarApiClient.escapeString(area.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezoneAreaGetValidateBeforeCall(String area, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'area' is set
        if (area == null) {
            throw new ApiException("Missing the required parameter 'area' when calling timezoneAreaGet(Async)");
        }

        return timezoneAreaGetCall(area, _callback);

    }

    /**
     * a listing of all timezones available for that area.
     * 
     * @param area  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of available timezones in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public List<String> timezoneAreaGet(String area) throws ApiException {
        ApiResponse<List<String>> localVarResp = timezoneAreaGetWithHttpInfo(area);
        return localVarResp.getData();
    }

    /**
     * a listing of all timezones available for that area.
     * 
     * @param area  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of available timezones in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> timezoneAreaGetWithHttpInfo(String area) throws ApiException {
        okhttp3.Call localVarCall = timezoneAreaGetValidateBeforeCall(area, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * a listing of all timezones available for that area. (asynchronously)
     * 
     * @param area  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of available timezones in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaGetAsync(String area, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezoneAreaGetValidateBeforeCall(area, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezoneAreaLocationGet
     * @param area  (required)
     * @param location  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaLocationGetCall(String area, String location, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timezone/{area}/{location}"
            .replace("{" + "area" + "}", localVarApiClient.escapeString(area.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezoneAreaLocationGetValidateBeforeCall(String area, String location, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'area' is set
        if (area == null) {
            throw new ApiException("Missing the required parameter 'area' when calling timezoneAreaLocationGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling timezoneAreaLocationGet(Async)");
        }

        return timezoneAreaLocationGetCall(area, location, _callback);

    }

    /**
     * request the current time for a timezone.
     * 
     * @param area  (required)
     * @param location  (required)
     * @return DateTimeJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public DateTimeJsonResponse timezoneAreaLocationGet(String area, String location) throws ApiException {
        ApiResponse<DateTimeJsonResponse> localVarResp = timezoneAreaLocationGetWithHttpInfo(area, location);
        return localVarResp.getData();
    }

    /**
     * request the current time for a timezone.
     * 
     * @param area  (required)
     * @param location  (required)
     * @return ApiResponse&lt;DateTimeJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DateTimeJsonResponse> timezoneAreaLocationGetWithHttpInfo(String area, String location) throws ApiException {
        okhttp3.Call localVarCall = timezoneAreaLocationGetValidateBeforeCall(area, location, null);
        Type localVarReturnType = new TypeToken<DateTimeJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request the current time for a timezone. (asynchronously)
     * 
     * @param area  (required)
     * @param location  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaLocationGetAsync(String area, String location, final ApiCallback<DateTimeJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezoneAreaLocationGetValidateBeforeCall(area, location, _callback);
        Type localVarReturnType = new TypeToken<DateTimeJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezoneAreaLocationRegionGet
     * @param area  (required)
     * @param location  (required)
     * @param region  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaLocationRegionGetCall(String area, String location, String region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timezone/{area}/{location}/{region}"
            .replace("{" + "area" + "}", localVarApiClient.escapeString(area.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezoneAreaLocationRegionGetValidateBeforeCall(String area, String location, String region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'area' is set
        if (area == null) {
            throw new ApiException("Missing the required parameter 'area' when calling timezoneAreaLocationRegionGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling timezoneAreaLocationRegionGet(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling timezoneAreaLocationRegionGet(Async)");
        }

        return timezoneAreaLocationRegionGetCall(area, location, region, _callback);

    }

    /**
     * request the current time for a timezone.
     * 
     * @param area  (required)
     * @param location  (required)
     * @param region  (required)
     * @return DateTimeJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public DateTimeJsonResponse timezoneAreaLocationRegionGet(String area, String location, String region) throws ApiException {
        ApiResponse<DateTimeJsonResponse> localVarResp = timezoneAreaLocationRegionGetWithHttpInfo(area, location, region);
        return localVarResp.getData();
    }

    /**
     * request the current time for a timezone.
     * 
     * @param area  (required)
     * @param location  (required)
     * @param region  (required)
     * @return ApiResponse&lt;DateTimeJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DateTimeJsonResponse> timezoneAreaLocationRegionGetWithHttpInfo(String area, String location, String region) throws ApiException {
        okhttp3.Call localVarCall = timezoneAreaLocationRegionGetValidateBeforeCall(area, location, region, null);
        Type localVarReturnType = new TypeToken<DateTimeJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request the current time for a timezone. (asynchronously)
     * 
     * @param area  (required)
     * @param location  (required)
     * @param region  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in JSON format </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaLocationRegionGetAsync(String area, String location, String region, final ApiCallback<DateTimeJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezoneAreaLocationRegionGetValidateBeforeCall(area, location, region, _callback);
        Type localVarReturnType = new TypeToken<DateTimeJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezoneAreaLocationRegionTxtGet
     * @param area  (required)
     * @param location  (required)
     * @param region  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaLocationRegionTxtGetCall(String area, String location, String region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timezone/{area}/{location}/{region}.txt"
            .replace("{" + "area" + "}", localVarApiClient.escapeString(area.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezoneAreaLocationRegionTxtGetValidateBeforeCall(String area, String location, String region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'area' is set
        if (area == null) {
            throw new ApiException("Missing the required parameter 'area' when calling timezoneAreaLocationRegionTxtGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling timezoneAreaLocationRegionTxtGet(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling timezoneAreaLocationRegionTxtGet(Async)");
        }

        return timezoneAreaLocationRegionTxtGetCall(area, location, region, _callback);

    }

    /**
     * request the current time for a timezone.
     * 
     * @param area  (required)
     * @param location  (required)
     * @param region  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public String timezoneAreaLocationRegionTxtGet(String area, String location, String region) throws ApiException {
        ApiResponse<String> localVarResp = timezoneAreaLocationRegionTxtGetWithHttpInfo(area, location, region);
        return localVarResp.getData();
    }

    /**
     * request the current time for a timezone.
     * 
     * @param area  (required)
     * @param location  (required)
     * @param region  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> timezoneAreaLocationRegionTxtGetWithHttpInfo(String area, String location, String region) throws ApiException {
        okhttp3.Call localVarCall = timezoneAreaLocationRegionTxtGetValidateBeforeCall(area, location, region, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request the current time for a timezone. (asynchronously)
     * 
     * @param area  (required)
     * @param location  (required)
     * @param region  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaLocationRegionTxtGetAsync(String area, String location, String region, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezoneAreaLocationRegionTxtGetValidateBeforeCall(area, location, region, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezoneAreaLocationTxtGet
     * @param area  (required)
     * @param location  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaLocationTxtGetCall(String area, String location, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timezone/{area}/{location}.txt"
            .replace("{" + "area" + "}", localVarApiClient.escapeString(area.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezoneAreaLocationTxtGetValidateBeforeCall(String area, String location, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'area' is set
        if (area == null) {
            throw new ApiException("Missing the required parameter 'area' when calling timezoneAreaLocationTxtGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling timezoneAreaLocationTxtGet(Async)");
        }

        return timezoneAreaLocationTxtGetCall(area, location, _callback);

    }

    /**
     * request the current time for a timezone.
     * 
     * @param area  (required)
     * @param location  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public String timezoneAreaLocationTxtGet(String area, String location) throws ApiException {
        ApiResponse<String> localVarResp = timezoneAreaLocationTxtGetWithHttpInfo(area, location);
        return localVarResp.getData();
    }

    /**
     * request the current time for a timezone.
     * 
     * @param area  (required)
     * @param location  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> timezoneAreaLocationTxtGetWithHttpInfo(String area, String location) throws ApiException {
        okhttp3.Call localVarCall = timezoneAreaLocationTxtGetValidateBeforeCall(area, location, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request the current time for a timezone. (asynchronously)
     * 
     * @param area  (required)
     * @param location  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the current time for the timezone requested in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaLocationTxtGetAsync(String area, String location, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezoneAreaLocationTxtGetValidateBeforeCall(area, location, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezoneAreaTxtGet
     * @param area  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of available timezones in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaTxtGetCall(String area, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timezone/{area}.txt"
            .replace("{" + "area" + "}", localVarApiClient.escapeString(area.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezoneAreaTxtGetValidateBeforeCall(String area, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'area' is set
        if (area == null) {
            throw new ApiException("Missing the required parameter 'area' when calling timezoneAreaTxtGet(Async)");
        }

        return timezoneAreaTxtGetCall(area, _callback);

    }

    /**
     * a listing of all timezones available for that area.
     * 
     * @param area  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of available timezones in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public String timezoneAreaTxtGet(String area) throws ApiException {
        ApiResponse<String> localVarResp = timezoneAreaTxtGetWithHttpInfo(area);
        return localVarResp.getData();
    }

    /**
     * a listing of all timezones available for that area.
     * 
     * @param area  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of available timezones in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> timezoneAreaTxtGetWithHttpInfo(String area) throws ApiException {
        okhttp3.Call localVarCall = timezoneAreaTxtGetValidateBeforeCall(area, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * a listing of all timezones available for that area. (asynchronously)
     * 
     * @param area  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of available timezones in plain text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> an error response in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneAreaTxtGetAsync(String area, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezoneAreaTxtGetValidateBeforeCall(area, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezoneGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> the list of available timezones in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timezone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezoneGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return timezoneGetCall(_callback);

    }

    /**
     * a listing of all timezones.
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> the list of available timezones in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public List<String> timezoneGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = timezoneGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * a listing of all timezones.
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> the list of available timezones in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> timezoneGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = timezoneGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * a listing of all timezones. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> the list of available timezones in JSON format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezoneGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezoneTxtGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> the list of available timezones in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneTxtGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timezone.txt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezoneTxtGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return timezoneTxtGetCall(_callback);

    }

    /**
     * a listing of all timezones.
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> the list of available timezones in plain text </td><td>  -  </td></tr>
     </table>
     */
    public String timezoneTxtGet() throws ApiException {
        ApiResponse<String> localVarResp = timezoneTxtGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * a listing of all timezones.
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> the list of available timezones in plain text </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> timezoneTxtGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = timezoneTxtGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * a listing of all timezones. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> the list of available timezones in plain text </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezoneTxtGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezoneTxtGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
