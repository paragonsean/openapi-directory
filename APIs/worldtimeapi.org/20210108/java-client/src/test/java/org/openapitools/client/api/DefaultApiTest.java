/*
 * World Time API
 * A simple API to get the current time based on a request with a timezone.
 *
 * The version of the OpenAPI document: 20210108
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DateTimeJsonResponse;
import org.openapitools.client.model.ErrorJsonResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipGetTest() throws ApiException {
        DateTimeJsonResponse response = api.ipGet();
        // TODO: test validations
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipIpv4GetTest() throws ApiException {
        String ipv4 = null;
        DateTimeJsonResponse response = api.ipIpv4Get(ipv4);
        // TODO: test validations
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipIpv4TxtGetTest() throws ApiException {
        String ipv4 = null;
        String response = api.ipIpv4TxtGet(ipv4);
        // TODO: test validations
    }

    /**
     * request the current time based on the ip of the request. note: this is a \&quot;best guess\&quot; obtained from open-source data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipTxtGetTest() throws ApiException {
        String response = api.ipTxtGet();
        // TODO: test validations
    }

    /**
     * a listing of all timezones available for that area.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezoneAreaGetTest() throws ApiException {
        String area = null;
        List<String> response = api.timezoneAreaGet(area);
        // TODO: test validations
    }

    /**
     * request the current time for a timezone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezoneAreaLocationGetTest() throws ApiException {
        String area = null;
        String location = null;
        DateTimeJsonResponse response = api.timezoneAreaLocationGet(area, location);
        // TODO: test validations
    }

    /**
     * request the current time for a timezone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezoneAreaLocationRegionGetTest() throws ApiException {
        String area = null;
        String location = null;
        String region = null;
        DateTimeJsonResponse response = api.timezoneAreaLocationRegionGet(area, location, region);
        // TODO: test validations
    }

    /**
     * request the current time for a timezone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezoneAreaLocationRegionTxtGetTest() throws ApiException {
        String area = null;
        String location = null;
        String region = null;
        String response = api.timezoneAreaLocationRegionTxtGet(area, location, region);
        // TODO: test validations
    }

    /**
     * request the current time for a timezone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezoneAreaLocationTxtGetTest() throws ApiException {
        String area = null;
        String location = null;
        String response = api.timezoneAreaLocationTxtGet(area, location);
        // TODO: test validations
    }

    /**
     * a listing of all timezones available for that area.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezoneAreaTxtGetTest() throws ApiException {
        String area = null;
        String response = api.timezoneAreaTxtGet(area);
        // TODO: test validations
    }

    /**
     * a listing of all timezones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezoneGetTest() throws ApiException {
        List<String> response = api.timezoneGet();
        // TODO: test validations
    }

    /**
     * a listing of all timezones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezoneTxtGetTest() throws ApiException {
        String response = api.timezoneTxtGet();
        // TODO: test validations
    }

}
