/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RoleRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientRoleMappingsApi
 */
@Disabled
public class ClientRoleMappingsApiTest {

    private final ClientRoleMappingsApi api = new ClientRoleMappingsApi();

    /**
     * Get available client-level roles that can be mapped to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsClientsClientAvailableGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmGroupsIdRoleMappingsClientsClientAvailableGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Get effective client-level role mappings   This recurses any composite roles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsClientsClientCompositeGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmGroupsIdRoleMappingsClientsClientCompositeGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Delete client-level roles from user role mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsClientsClientDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmGroupsIdRoleMappingsClientsClientDelete(realm, id, client, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get client-level role mappings for the user, and the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsClientsClientGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmGroupsIdRoleMappingsClientsClientGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Add client-level roles to the user role mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsClientsClientPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmGroupsIdRoleMappingsClientsClientPost(realm, id, client, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get available client-level roles that can be mapped to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsClientsClientAvailableGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmUsersIdRoleMappingsClientsClientAvailableGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Get effective client-level role mappings   This recurses any composite roles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsClientsClientCompositeGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmUsersIdRoleMappingsClientsClientCompositeGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Delete client-level roles from user role mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsClientsClientDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmUsersIdRoleMappingsClientsClientDelete(realm, id, client, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get client-level role mappings for the user, and the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsClientsClientGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmUsersIdRoleMappingsClientsClientGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Add client-level roles to the user role mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsClientsClientPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmUsersIdRoleMappingsClientsClientPost(realm, id, client, roleRepresentation);
        // TODO: test validations
    }

}
