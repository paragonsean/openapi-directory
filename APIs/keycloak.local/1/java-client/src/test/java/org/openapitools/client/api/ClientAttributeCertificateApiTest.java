/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateRepresentation;
import org.openapitools.client.model.KeyStoreConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientAttributeCertificateApi
 */
@Disabled
public class ClientAttributeCertificateApiTest {

    private final ClientAttributeCertificateApi api = new ClientAttributeCertificateApi();

    /**
     * Get a keystore file for the client, containing private key and public certificate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdCertificatesAttrDownloadPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String attr = null;
        KeyStoreConfig keyStoreConfig = null;
        byte[] response = api.realmClientsIdCertificatesAttrDownloadPost(realm, id, attr, keyStoreConfig);
        // TODO: test validations
    }

    /**
     * Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdCertificatesAttrGenerateAndDownloadPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String attr = null;
        KeyStoreConfig keyStoreConfig = null;
        byte[] response = api.realmClientsIdCertificatesAttrGenerateAndDownloadPost(realm, id, attr, keyStoreConfig);
        // TODO: test validations
    }

    /**
     * Generate a new certificate with new key pair
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdCertificatesAttrGeneratePostTest() throws ApiException {
        String realm = null;
        String id = null;
        String attr = null;
        CertificateRepresentation response = api.realmClientsIdCertificatesAttrGeneratePost(realm, id, attr);
        // TODO: test validations
    }

    /**
     * Get key info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdCertificatesAttrGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String attr = null;
        CertificateRepresentation response = api.realmClientsIdCertificatesAttrGet(realm, id, attr);
        // TODO: test validations
    }

    /**
     * Upload only certificate, not private key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdCertificatesAttrUploadCertificatePostTest() throws ApiException {
        String realm = null;
        String id = null;
        String attr = null;
        CertificateRepresentation response = api.realmClientsIdCertificatesAttrUploadCertificatePost(realm, id, attr);
        // TODO: test validations
    }

    /**
     * Upload certificate and eventually private key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdCertificatesAttrUploadPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String attr = null;
        CertificateRepresentation response = api.realmClientsIdCertificatesAttrUploadPost(realm, id, attr);
        // TODO: test validations
    }

}
