/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GroupRepresentation;
import org.openapitools.client.model.ManagementPermissionReference;
import org.openapitools.client.model.RoleRepresentation;
import org.openapitools.client.model.UserRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RolesApi
 */
@Disabled
public class RolesApiTest {

    private final RolesApi api = new RolesApi();

    /**
     * Get all roles for the realm or client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesGetTest() throws ApiException {
        String realm = null;
        String id = null;
        Boolean briefRepresentation = null;
        Integer first = null;
        Integer max = null;
        String search = null;
        List<RoleRepresentation> response = api.realmClientsIdRolesGet(realm, id, briefRepresentation, first, max, search);
        // TODO: test validations
    }

    /**
     * Create a new role for the realm or client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesPostTest() throws ApiException {
        String realm = null;
        String id = null;
        RoleRepresentation roleRepresentation = null;
        api.realmClientsIdRolesPost(realm, id, roleRepresentation);
        // TODO: test validations
    }

    /**
     * An app-level roles for the specified app for the role’s composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameCompositesClientsClientGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        String client = null;
        List<RoleRepresentation> response = api.realmClientsIdRolesRoleNameCompositesClientsClientGet(realm, id, roleName, client);
        // TODO: test validations
    }

    /**
     * Remove roles from the role’s composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameCompositesDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientsIdRolesRoleNameCompositesDelete(realm, id, roleName, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get composites of the role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameCompositesGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        List<RoleRepresentation> response = api.realmClientsIdRolesRoleNameCompositesGet(realm, id, roleName);
        // TODO: test validations
    }

    /**
     * Add a composite to the role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameCompositesPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientsIdRolesRoleNameCompositesPost(realm, id, roleName, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get realm-level roles of the role’s composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameCompositesRealmGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        List<RoleRepresentation> response = api.realmClientsIdRolesRoleNameCompositesRealmGet(realm, id, roleName);
        // TODO: test validations
    }

    /**
     * Delete a role by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        api.realmClientsIdRolesRoleNameDelete(realm, id, roleName);
        // TODO: test validations
    }

    /**
     * Get a role by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        RoleRepresentation response = api.realmClientsIdRolesRoleNameGet(realm, id, roleName);
        // TODO: test validations
    }

    /**
     * Return List of Groups that have the specified role name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameGroupsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        Boolean briefRepresentation = null;
        Integer first = null;
        Integer max = null;
        List<GroupRepresentation> response = api.realmClientsIdRolesRoleNameGroupsGet(realm, id, roleName, briefRepresentation, first, max);
        // TODO: test validations
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameManagementPermissionsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        ManagementPermissionReference response = api.realmClientsIdRolesRoleNameManagementPermissionsGet(realm, id, roleName);
        // TODO: test validations
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameManagementPermissionsPutTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        ManagementPermissionReference managementPermissionReference = null;
        ManagementPermissionReference response = api.realmClientsIdRolesRoleNameManagementPermissionsPut(realm, id, roleName, managementPermissionReference);
        // TODO: test validations
    }

    /**
     * Update a role by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNamePutTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        RoleRepresentation roleRepresentation = null;
        api.realmClientsIdRolesRoleNamePut(realm, id, roleName, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Return List of Users that have the specified role name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRolesRoleNameUsersGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleName = null;
        Integer first = null;
        Integer max = null;
        List<UserRepresentation> response = api.realmClientsIdRolesRoleNameUsersGet(realm, id, roleName, first, max);
        // TODO: test validations
    }

    /**
     * Get all roles for the realm or client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesGetTest() throws ApiException {
        String realm = null;
        Boolean briefRepresentation = null;
        Integer first = null;
        Integer max = null;
        String search = null;
        List<RoleRepresentation> response = api.realmRolesGet(realm, briefRepresentation, first, max, search);
        // TODO: test validations
    }

    /**
     * Create a new role for the realm or client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesPostTest() throws ApiException {
        String realm = null;
        RoleRepresentation roleRepresentation = null;
        api.realmRolesPost(realm, roleRepresentation);
        // TODO: test validations
    }

    /**
     * An app-level roles for the specified app for the role’s composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameCompositesClientsClientGetTest() throws ApiException {
        String realm = null;
        String roleName = null;
        String client = null;
        List<RoleRepresentation> response = api.realmRolesRoleNameCompositesClientsClientGet(realm, roleName, client);
        // TODO: test validations
    }

    /**
     * Remove roles from the role’s composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameCompositesDeleteTest() throws ApiException {
        String realm = null;
        String roleName = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmRolesRoleNameCompositesDelete(realm, roleName, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get composites of the role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameCompositesGetTest() throws ApiException {
        String realm = null;
        String roleName = null;
        List<RoleRepresentation> response = api.realmRolesRoleNameCompositesGet(realm, roleName);
        // TODO: test validations
    }

    /**
     * Add a composite to the role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameCompositesPostTest() throws ApiException {
        String realm = null;
        String roleName = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmRolesRoleNameCompositesPost(realm, roleName, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get realm-level roles of the role’s composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameCompositesRealmGetTest() throws ApiException {
        String realm = null;
        String roleName = null;
        List<RoleRepresentation> response = api.realmRolesRoleNameCompositesRealmGet(realm, roleName);
        // TODO: test validations
    }

    /**
     * Delete a role by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameDeleteTest() throws ApiException {
        String realm = null;
        String roleName = null;
        api.realmRolesRoleNameDelete(realm, roleName);
        // TODO: test validations
    }

    /**
     * Get a role by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameGetTest() throws ApiException {
        String realm = null;
        String roleName = null;
        RoleRepresentation response = api.realmRolesRoleNameGet(realm, roleName);
        // TODO: test validations
    }

    /**
     * Return List of Groups that have the specified role name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameGroupsGetTest() throws ApiException {
        String realm = null;
        String roleName = null;
        Boolean briefRepresentation = null;
        Integer first = null;
        Integer max = null;
        List<GroupRepresentation> response = api.realmRolesRoleNameGroupsGet(realm, roleName, briefRepresentation, first, max);
        // TODO: test validations
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameManagementPermissionsGetTest() throws ApiException {
        String realm = null;
        String roleName = null;
        ManagementPermissionReference response = api.realmRolesRoleNameManagementPermissionsGet(realm, roleName);
        // TODO: test validations
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameManagementPermissionsPutTest() throws ApiException {
        String realm = null;
        String roleName = null;
        ManagementPermissionReference managementPermissionReference = null;
        ManagementPermissionReference response = api.realmRolesRoleNameManagementPermissionsPut(realm, roleName, managementPermissionReference);
        // TODO: test validations
    }

    /**
     * Update a role by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNamePutTest() throws ApiException {
        String realm = null;
        String roleName = null;
        RoleRepresentation roleRepresentation = null;
        api.realmRolesRoleNamePut(realm, roleName, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Return List of Users that have the specified role name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesRoleNameUsersGetTest() throws ApiException {
        String realm = null;
        String roleName = null;
        Integer first = null;
        Integer max = null;
        List<UserRepresentation> response = api.realmRolesRoleNameUsersGet(realm, roleName, first, max);
        // TODO: test validations
    }

}
