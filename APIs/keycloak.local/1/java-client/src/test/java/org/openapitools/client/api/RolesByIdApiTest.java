/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ManagementPermissionReference;
import org.openapitools.client.model.RoleRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RolesByIdApi
 */
@Disabled
public class RolesByIdApiTest {

    private final RolesByIdApi api = new RolesByIdApi();

    /**
     * Get client-level roles for the client that are in the role’s composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdCompositesClientsClientGetTest() throws ApiException {
        String realm = null;
        String roleId = null;
        String client = null;
        List<RoleRepresentation> response = api.realmRolesByIdRoleIdCompositesClientsClientGet(realm, roleId, client);
        // TODO: test validations
    }

    /**
     * Remove a set of roles from the role’s composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdCompositesDeleteTest() throws ApiException {
        String realm = null;
        String roleId = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmRolesByIdRoleIdCompositesDelete(realm, roleId, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get role’s children   Returns a set of role’s children provided the role is a composite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdCompositesGetTest() throws ApiException {
        String realm = null;
        String roleId = null;
        List<RoleRepresentation> response = api.realmRolesByIdRoleIdCompositesGet(realm, roleId);
        // TODO: test validations
    }

    /**
     * Make the role a composite role by associating some child roles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdCompositesPostTest() throws ApiException {
        String realm = null;
        String roleId = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmRolesByIdRoleIdCompositesPost(realm, roleId, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get realm-level roles that are in the role’s composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdCompositesRealmGetTest() throws ApiException {
        String realm = null;
        String roleId = null;
        List<RoleRepresentation> response = api.realmRolesByIdRoleIdCompositesRealmGet(realm, roleId);
        // TODO: test validations
    }

    /**
     * Delete the role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdDeleteTest() throws ApiException {
        String realm = null;
        String roleId = null;
        api.realmRolesByIdRoleIdDelete(realm, roleId);
        // TODO: test validations
    }

    /**
     * Get a specific role’s representation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdGetTest() throws ApiException {
        String realm = null;
        String roleId = null;
        RoleRepresentation response = api.realmRolesByIdRoleIdGet(realm, roleId);
        // TODO: test validations
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdManagementPermissionsGetTest() throws ApiException {
        String realm = null;
        String roleId = null;
        ManagementPermissionReference response = api.realmRolesByIdRoleIdManagementPermissionsGet(realm, roleId);
        // TODO: test validations
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdManagementPermissionsPutTest() throws ApiException {
        String realm = null;
        String roleId = null;
        ManagementPermissionReference managementPermissionReference = null;
        ManagementPermissionReference response = api.realmRolesByIdRoleIdManagementPermissionsPut(realm, roleId, managementPermissionReference);
        // TODO: test validations
    }

    /**
     * Update the role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmRolesByIdRoleIdPutTest() throws ApiException {
        String realm = null;
        String roleId = null;
        RoleRepresentation roleRepresentation = null;
        api.realmRolesByIdRoleIdPut(realm, roleId, roleRepresentation);
        // TODO: test validations
    }

}
