/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessToken;
import org.openapitools.client.model.ClientRepresentation;
import org.openapitools.client.model.ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation;
import org.openapitools.client.model.ClientScopeRepresentation;
import org.openapitools.client.model.CredentialRepresentation;
import org.openapitools.client.model.GlobalRequestResult;
import org.openapitools.client.model.ManagementPermissionReference;
import org.openapitools.client.model.RoleRepresentation;
import org.openapitools.client.model.UserRepresentation;
import org.openapitools.client.model.UserSessionRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientsApi
 */
@Disabled
public class ClientsApiTest {

    private final ClientsApi api = new ClientsApi();

    /**
     * Get clients belonging to the realm   Returns a list of clients belonging to the realm
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsGetTest() throws ApiException {
        String realm = null;
        String clientId = null;
        Integer first = null;
        Integer max = null;
        Boolean search = null;
        Boolean viewableOnly = null;
        List<ClientRepresentation> response = api.realmClientsGet(realm, clientId, first, max, search, viewableOnly);
        // TODO: test validations
    }

    /**
     * Get the client secret
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdClientSecretGetTest() throws ApiException {
        String realm = null;
        String id = null;
        CredentialRepresentation response = api.realmClientsIdClientSecretGet(realm, id);
        // TODO: test validations
    }

    /**
     * Generate a new secret for the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdClientSecretPostTest() throws ApiException {
        String realm = null;
        String id = null;
        CredentialRepresentation response = api.realmClientsIdClientSecretPost(realm, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdDefaultClientScopesClientScopeIdDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String clientScopeId = null;
        api.realmClientsIdDefaultClientScopesClientScopeIdDelete(realm, id, clientScopeId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdDefaultClientScopesClientScopeIdPutTest() throws ApiException {
        String realm = null;
        String id = null;
        String clientScopeId = null;
        api.realmClientsIdDefaultClientScopesClientScopeIdPut(realm, id, clientScopeId);
        // TODO: test validations
    }

    /**
     * Get default client scopes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdDefaultClientScopesGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<ClientScopeRepresentation> response = api.realmClientsIdDefaultClientScopesGet(realm, id);
        // TODO: test validations
    }

    /**
     * Delete the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        api.realmClientsIdDelete(realm, id);
        // TODO: test validations
    }

    /**
     * Create JSON with payload of example access token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String scope = null;
        String userId = null;
        AccessToken response = api.realmClientsIdEvaluateScopesGenerateExampleAccessTokenGet(realm, id, scope, userId);
        // TODO: test validations
    }

    /**
     * Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdEvaluateScopesProtocolMappersGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String scope = null;
        List<ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation> response = api.realmClientsIdEvaluateScopesProtocolMappersGet(realm, id, scope);
        // TODO: test validations
    }

    /**
     * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleContainerId = null;
        String scope = null;
        List<RoleRepresentation> response = api.realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(realm, id, roleContainerId, scope);
        // TODO: test validations
    }

    /**
     * Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String roleContainerId = null;
        String scope = null;
        List<RoleRepresentation> response = api.realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(realm, id, roleContainerId, scope);
        // TODO: test validations
    }

    /**
     * Get representation of the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdGetTest() throws ApiException {
        String realm = null;
        String id = null;
        ClientRepresentation response = api.realmClientsIdGet(realm, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdInstallationProvidersProviderIdGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String providerId = null;
        api.realmClientsIdInstallationProvidersProviderIdGet(realm, id, providerId);
        // TODO: test validations
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdManagementPermissionsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        ManagementPermissionReference response = api.realmClientsIdManagementPermissionsGet(realm, id);
        // TODO: test validations
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdManagementPermissionsPutTest() throws ApiException {
        String realm = null;
        String id = null;
        ManagementPermissionReference managementPermissionReference = null;
        ManagementPermissionReference response = api.realmClientsIdManagementPermissionsPut(realm, id, managementPermissionReference);
        // TODO: test validations
    }

    /**
     * Unregister a cluster node from the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdNodesNodeDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String node = null;
        api.realmClientsIdNodesNodeDelete(realm, id, node);
        // TODO: test validations
    }

    /**
     * Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdNodesPostTest() throws ApiException {
        String realm = null;
        String id = null;
        Map<String, Object> requestBody = null;
        api.realmClientsIdNodesPost(realm, id, requestBody);
        // TODO: test validations
    }

    /**
     * Get application offline session count   Returns a number of offline user sessions associated with this client   {      \&quot;count\&quot;: number  }
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdOfflineSessionCountGetTest() throws ApiException {
        String realm = null;
        String id = null;
        Map<String, Object> response = api.realmClientsIdOfflineSessionCountGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get offline sessions for client   Returns a list of offline user sessions associated with this client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdOfflineSessionsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        Integer first = null;
        Integer max = null;
        List<UserSessionRepresentation> response = api.realmClientsIdOfflineSessionsGet(realm, id, first, max);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdOptionalClientScopesClientScopeIdDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String clientScopeId = null;
        api.realmClientsIdOptionalClientScopesClientScopeIdDelete(realm, id, clientScopeId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdOptionalClientScopesClientScopeIdPutTest() throws ApiException {
        String realm = null;
        String id = null;
        String clientScopeId = null;
        api.realmClientsIdOptionalClientScopesClientScopeIdPut(realm, id, clientScopeId);
        // TODO: test validations
    }

    /**
     * Get optional client scopes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdOptionalClientScopesGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<ClientScopeRepresentation> response = api.realmClientsIdOptionalClientScopesGet(realm, id);
        // TODO: test validations
    }

    /**
     * Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdPushRevocationPostTest() throws ApiException {
        String realm = null;
        String id = null;
        GlobalRequestResult response = api.realmClientsIdPushRevocationPost(realm, id);
        // TODO: test validations
    }

    /**
     * Update the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdPutTest() throws ApiException {
        String realm = null;
        String id = null;
        ClientRepresentation clientRepresentation = null;
        api.realmClientsIdPut(realm, id, clientRepresentation);
        // TODO: test validations
    }

    /**
     * Generate a new registration access token for the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdRegistrationAccessTokenPostTest() throws ApiException {
        String realm = null;
        String id = null;
        ClientRepresentation response = api.realmClientsIdRegistrationAccessTokenPost(realm, id);
        // TODO: test validations
    }

    /**
     * Get a user dedicated to the service account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdServiceAccountUserGetTest() throws ApiException {
        String realm = null;
        String id = null;
        UserRepresentation response = api.realmClientsIdServiceAccountUserGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get application session count   Returns a number of user sessions associated with this client   {      \&quot;count\&quot;: number  }
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdSessionCountGetTest() throws ApiException {
        String realm = null;
        String id = null;
        Map<String, Object> response = api.realmClientsIdSessionCountGet(realm, id);
        // TODO: test validations
    }

    /**
     * Test if registered cluster nodes are available   Tests availability by sending &#39;ping&#39; request to all cluster nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdTestNodesAvailableGetTest() throws ApiException {
        String realm = null;
        String id = null;
        GlobalRequestResult response = api.realmClientsIdTestNodesAvailableGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get user sessions for client   Returns a list of user sessions associated with this client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdUserSessionsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        Integer first = null;
        Integer max = null;
        List<UserSessionRepresentation> response = api.realmClientsIdUserSessionsGet(realm, id, first, max);
        // TODO: test validations
    }

    /**
     * Create a new client   Client’s client_id must be unique!
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsPostTest() throws ApiException {
        String realm = null;
        ClientRepresentation clientRepresentation = null;
        api.realmClientsPost(realm, clientRepresentation);
        // TODO: test validations
    }

}
