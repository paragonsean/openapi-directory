/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthenticationExecutionInfoRepresentation;
import org.openapitools.client.model.AuthenticationExecutionRepresentation;
import org.openapitools.client.model.AuthenticationFlowRepresentation;
import org.openapitools.client.model.AuthenticatorConfigInfoRepresentation;
import org.openapitools.client.model.AuthenticatorConfigRepresentation;
import org.openapitools.client.model.RequiredActionProviderRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationManagementApi
 */
@Disabled
public class AuthenticationManagementApiTest {

    private final AuthenticationManagementApi api = new AuthenticationManagementApi();

    /**
     * Get authenticator providers   Returns a list of authenticator providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationAuthenticatorProvidersGetTest() throws ApiException {
        String realm = null;
        List<Map<String, Object>> response = api.realmAuthenticationAuthenticatorProvidersGet(realm);
        // TODO: test validations
    }

    /**
     * Get client authenticator providers   Returns a list of client authenticator providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationClientAuthenticatorProvidersGetTest() throws ApiException {
        String realm = null;
        List<Map<String, Object>> response = api.realmAuthenticationClientAuthenticatorProvidersGet(realm);
        // TODO: test validations
    }

    /**
     * Get authenticator provider’s configuration description
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationConfigDescriptionProviderIdGetTest() throws ApiException {
        String realm = null;
        String providerId = null;
        AuthenticatorConfigInfoRepresentation response = api.realmAuthenticationConfigDescriptionProviderIdGet(realm, providerId);
        // TODO: test validations
    }

    /**
     * Delete authenticator configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationConfigIdDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        api.realmAuthenticationConfigIdDelete(realm, id);
        // TODO: test validations
    }

    /**
     * Get authenticator configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationConfigIdGetTest() throws ApiException {
        String realm = null;
        String id = null;
        AuthenticatorConfigRepresentation response = api.realmAuthenticationConfigIdGet(realm, id);
        // TODO: test validations
    }

    /**
     * Update authenticator configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationConfigIdPutTest() throws ApiException {
        String realm = null;
        String id = null;
        AuthenticatorConfigRepresentation authenticatorConfigRepresentation = null;
        api.realmAuthenticationConfigIdPut(realm, id, authenticatorConfigRepresentation);
        // TODO: test validations
    }

    /**
     * Update execution with new configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationExecutionsExecutionIdConfigPostTest() throws ApiException {
        String realm = null;
        String executionId = null;
        AuthenticatorConfigRepresentation authenticatorConfigRepresentation = null;
        api.realmAuthenticationExecutionsExecutionIdConfigPost(realm, executionId, authenticatorConfigRepresentation);
        // TODO: test validations
    }

    /**
     * Delete execution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationExecutionsExecutionIdDeleteTest() throws ApiException {
        String realm = null;
        String executionId = null;
        api.realmAuthenticationExecutionsExecutionIdDelete(realm, executionId);
        // TODO: test validations
    }

    /**
     * Get Single Execution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationExecutionsExecutionIdGetTest() throws ApiException {
        String realm = null;
        String executionId = null;
        api.realmAuthenticationExecutionsExecutionIdGet(realm, executionId);
        // TODO: test validations
    }

    /**
     * Lower execution’s priority
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationExecutionsExecutionIdLowerPriorityPostTest() throws ApiException {
        String realm = null;
        String executionId = null;
        api.realmAuthenticationExecutionsExecutionIdLowerPriorityPost(realm, executionId);
        // TODO: test validations
    }

    /**
     * Raise execution’s priority
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationExecutionsExecutionIdRaisePriorityPostTest() throws ApiException {
        String realm = null;
        String executionId = null;
        api.realmAuthenticationExecutionsExecutionIdRaisePriorityPost(realm, executionId);
        // TODO: test validations
    }

    /**
     * Add new authentication execution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationExecutionsPostTest() throws ApiException {
        String realm = null;
        AuthenticationExecutionRepresentation authenticationExecutionRepresentation = null;
        api.realmAuthenticationExecutionsPost(realm, authenticationExecutionRepresentation);
        // TODO: test validations
    }

    /**
     * Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsFlowAliasCopyPostTest() throws ApiException {
        String realm = null;
        String flowAlias = null;
        Map<String, Object> requestBody = null;
        api.realmAuthenticationFlowsFlowAliasCopyPost(realm, flowAlias, requestBody);
        // TODO: test validations
    }

    /**
     * Add new authentication execution to a flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsFlowAliasExecutionsExecutionPostTest() throws ApiException {
        String realm = null;
        String flowAlias = null;
        Map<String, Object> requestBody = null;
        api.realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(realm, flowAlias, requestBody);
        // TODO: test validations
    }

    /**
     * Add new flow with new execution to existing flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsFlowAliasExecutionsFlowPostTest() throws ApiException {
        String realm = null;
        String flowAlias = null;
        Map<String, Object> requestBody = null;
        api.realmAuthenticationFlowsFlowAliasExecutionsFlowPost(realm, flowAlias, requestBody);
        // TODO: test validations
    }

    /**
     * Get authentication executions for a flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsFlowAliasExecutionsGetTest() throws ApiException {
        String realm = null;
        String flowAlias = null;
        api.realmAuthenticationFlowsFlowAliasExecutionsGet(realm, flowAlias);
        // TODO: test validations
    }

    /**
     * Update authentication executions of a flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsFlowAliasExecutionsPutTest() throws ApiException {
        String realm = null;
        String flowAlias = null;
        AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation = null;
        api.realmAuthenticationFlowsFlowAliasExecutionsPut(realm, flowAlias, authenticationExecutionInfoRepresentation);
        // TODO: test validations
    }

    /**
     * Get authentication flows   Returns a list of authentication flows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsGetTest() throws ApiException {
        String realm = null;
        List<AuthenticationFlowRepresentation> response = api.realmAuthenticationFlowsGet(realm);
        // TODO: test validations
    }

    /**
     * Delete an authentication flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsIdDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        api.realmAuthenticationFlowsIdDelete(realm, id);
        // TODO: test validations
    }

    /**
     * Get authentication flow for id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsIdGetTest() throws ApiException {
        String realm = null;
        String id = null;
        AuthenticationFlowRepresentation response = api.realmAuthenticationFlowsIdGet(realm, id);
        // TODO: test validations
    }

    /**
     * Update an authentication flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsIdPutTest() throws ApiException {
        String realm = null;
        String id = null;
        AuthenticationFlowRepresentation authenticationFlowRepresentation = null;
        api.realmAuthenticationFlowsIdPut(realm, id, authenticationFlowRepresentation);
        // TODO: test validations
    }

    /**
     * Create a new authentication flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFlowsPostTest() throws ApiException {
        String realm = null;
        AuthenticationFlowRepresentation authenticationFlowRepresentation = null;
        api.realmAuthenticationFlowsPost(realm, authenticationFlowRepresentation);
        // TODO: test validations
    }

    /**
     * Get form action providers   Returns a list of form action providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFormActionProvidersGetTest() throws ApiException {
        String realm = null;
        List<Map<String, Object>> response = api.realmAuthenticationFormActionProvidersGet(realm);
        // TODO: test validations
    }

    /**
     * Get form providers   Returns a list of form providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationFormProvidersGetTest() throws ApiException {
        String realm = null;
        List<Map<String, Object>> response = api.realmAuthenticationFormProvidersGet(realm);
        // TODO: test validations
    }

    /**
     * Get configuration descriptions for all clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationPerClientConfigDescriptionGetTest() throws ApiException {
        String realm = null;
        Map<String, Object> response = api.realmAuthenticationPerClientConfigDescriptionGet(realm);
        // TODO: test validations
    }

    /**
     * Register a new required actions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationRegisterRequiredActionPostTest() throws ApiException {
        String realm = null;
        Map<String, Object> requestBody = null;
        api.realmAuthenticationRegisterRequiredActionPost(realm, requestBody);
        // TODO: test validations
    }

    /**
     * Delete required action
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationRequiredActionsAliasDeleteTest() throws ApiException {
        String realm = null;
        String alias = null;
        api.realmAuthenticationRequiredActionsAliasDelete(realm, alias);
        // TODO: test validations
    }

    /**
     * Get required action for alias
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationRequiredActionsAliasGetTest() throws ApiException {
        String realm = null;
        String alias = null;
        RequiredActionProviderRepresentation response = api.realmAuthenticationRequiredActionsAliasGet(realm, alias);
        // TODO: test validations
    }

    /**
     * Lower required action’s priority
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationRequiredActionsAliasLowerPriorityPostTest() throws ApiException {
        String realm = null;
        String alias = null;
        api.realmAuthenticationRequiredActionsAliasLowerPriorityPost(realm, alias);
        // TODO: test validations
    }

    /**
     * Update required action
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationRequiredActionsAliasPutTest() throws ApiException {
        String realm = null;
        String alias = null;
        RequiredActionProviderRepresentation requiredActionProviderRepresentation = null;
        api.realmAuthenticationRequiredActionsAliasPut(realm, alias, requiredActionProviderRepresentation);
        // TODO: test validations
    }

    /**
     * Raise required action’s priority
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationRequiredActionsAliasRaisePriorityPostTest() throws ApiException {
        String realm = null;
        String alias = null;
        api.realmAuthenticationRequiredActionsAliasRaisePriorityPost(realm, alias);
        // TODO: test validations
    }

    /**
     * Get required actions   Returns a list of required actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationRequiredActionsGetTest() throws ApiException {
        String realm = null;
        List<RequiredActionProviderRepresentation> response = api.realmAuthenticationRequiredActionsGet(realm);
        // TODO: test validations
    }

    /**
     * Get unregistered required actions   Returns a list of unregistered required actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAuthenticationUnregisteredRequiredActionsGetTest() throws ApiException {
        String realm = null;
        List<Map<String, Object>> response = api.realmAuthenticationUnregisteredRequiredActionsGet(realm);
        // TODO: test validations
    }

}
