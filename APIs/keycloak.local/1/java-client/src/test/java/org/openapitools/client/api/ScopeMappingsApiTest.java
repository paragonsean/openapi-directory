/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MappingsRepresentation;
import org.openapitools.client.model.RoleRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScopeMappingsApi
 */
@Disabled
public class ScopeMappingsApiTest {

    private final ScopeMappingsApi api = new ScopeMappingsApi();

    /**
     * The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsClientsClientAvailableGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmClientScopesIdScopeMappingsClientsClientAvailableGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsClientsClientCompositeGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmClientScopesIdScopeMappingsClientsClientCompositeGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Remove client-level roles from the client’s scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsClientsClientDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientScopesIdScopeMappingsClientsClientDelete(realm, id, client, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get the roles associated with a client’s scope   Returns roles for the client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsClientsClientGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmClientScopesIdScopeMappingsClientsClientGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Add client-level roles to the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsClientsClientPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientScopesIdScopeMappingsClientsClientPost(realm, id, client, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get all scope mappings for the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        MappingsRepresentation response = api.realmClientScopesIdScopeMappingsGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get realm-level roles that are available to attach to this client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsRealmAvailableGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmClientScopesIdScopeMappingsRealmAvailableGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsRealmCompositeGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmClientScopesIdScopeMappingsRealmCompositeGet(realm, id);
        // TODO: test validations
    }

    /**
     * Remove a set of realm-level roles from the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsRealmDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientScopesIdScopeMappingsRealmDelete(realm, id, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get realm-level roles associated with the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsRealmGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmClientScopesIdScopeMappingsRealmGet(realm, id);
        // TODO: test validations
    }

    /**
     * Add a set of realm-level roles to the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientScopesIdScopeMappingsRealmPostTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientScopesIdScopeMappingsRealmPost(realm, id, roleRepresentation);
        // TODO: test validations
    }

    /**
     * The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsClientsClientAvailableGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmClientsIdScopeMappingsClientsClientAvailableGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsClientsClientCompositeGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmClientsIdScopeMappingsClientsClientCompositeGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Remove client-level roles from the client’s scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsClientsClientDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientsIdScopeMappingsClientsClientDelete(realm, id, client, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get the roles associated with a client’s scope   Returns roles for the client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsClientsClientGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> response = api.realmClientsIdScopeMappingsClientsClientGet(realm, id, client);
        // TODO: test validations
    }

    /**
     * Add client-level roles to the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsClientsClientPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientsIdScopeMappingsClientsClientPost(realm, id, client, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get all scope mappings for the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        MappingsRepresentation response = api.realmClientsIdScopeMappingsGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get realm-level roles that are available to attach to this client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsRealmAvailableGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmClientsIdScopeMappingsRealmAvailableGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsRealmCompositeGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmClientsIdScopeMappingsRealmCompositeGet(realm, id);
        // TODO: test validations
    }

    /**
     * Remove a set of realm-level roles from the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsRealmDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientsIdScopeMappingsRealmDelete(realm, id, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get realm-level roles associated with the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsRealmGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmClientsIdScopeMappingsRealmGet(realm, id);
        // TODO: test validations
    }

    /**
     * Add a set of realm-level roles to the client’s scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientsIdScopeMappingsRealmPostTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmClientsIdScopeMappingsRealmPost(realm, id, roleRepresentation);
        // TODO: test validations
    }

}
