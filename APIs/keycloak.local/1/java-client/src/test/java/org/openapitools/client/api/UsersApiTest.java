/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CredentialRepresentation;
import org.openapitools.client.model.FederatedIdentityRepresentation;
import org.openapitools.client.model.GroupRepresentation;
import org.openapitools.client.model.UserRepresentation;
import org.openapitools.client.model.UserSessionRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Returns the number of users that match the given criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersCountGetTest() throws ApiException {
        String realm = null;
        String email = null;
        String firstName = null;
        String lastName = null;
        String search = null;
        String username = null;
        Integer response = api.realmUsersCountGet(realm, email, firstName, lastName, search, username);
        // TODO: test validations
    }

    /**
     * Get users   Returns a list of users, filtered according to query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersGetTest() throws ApiException {
        String realm = null;
        Boolean briefRepresentation = null;
        String email = null;
        Integer first = null;
        String firstName = null;
        String lastName = null;
        Integer max = null;
        String search = null;
        String username = null;
        List<UserRepresentation> response = api.realmUsersGet(realm, briefRepresentation, email, first, firstName, lastName, max, search, username);
        // TODO: test validations
    }

    /**
     * Return credential types, which are provided by the user storage where user is stored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdConfiguredUserStorageCredentialTypesGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<String> response = api.realmUsersIdConfiguredUserStorageCredentialTypesGet(realm, id);
        // TODO: test validations
    }

    /**
     * Revoke consent and offline tokens for particular client from user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdConsentsClientDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String client = null;
        api.realmUsersIdConsentsClientDelete(realm, id, client);
        // TODO: test validations
    }

    /**
     * Get consents granted by the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdConsentsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<Map<String, Object>> response = api.realmUsersIdConsentsGet(realm, id);
        // TODO: test validations
    }

    /**
     * Remove a credential for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdCredentialsCredentialIdDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String credentialId = null;
        api.realmUsersIdCredentialsCredentialIdDelete(realm, id, credentialId);
        // TODO: test validations
    }

    /**
     * Move a credential to a position behind another credential
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String credentialId = null;
        String newPreviousCredentialId = null;
        api.realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(realm, id, credentialId, newPreviousCredentialId);
        // TODO: test validations
    }

    /**
     * Move a credential to a first position in the credentials list of the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdCredentialsCredentialIdMoveToFirstPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String credentialId = null;
        api.realmUsersIdCredentialsCredentialIdMoveToFirstPost(realm, id, credentialId);
        // TODO: test validations
    }

    /**
     * Update a credential label for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdCredentialsCredentialIdUserLabelPutTest() throws ApiException {
        String realm = null;
        String id = null;
        String credentialId = null;
        String body = null;
        api.realmUsersIdCredentialsCredentialIdUserLabelPut(realm, id, credentialId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdCredentialsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<CredentialRepresentation> response = api.realmUsersIdCredentialsGet(realm, id);
        // TODO: test validations
    }

    /**
     * Delete the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        api.realmUsersIdDelete(realm, id);
        // TODO: test validations
    }

    /**
     * Disable all credentials for a user of a specific type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdDisableCredentialTypesPutTest() throws ApiException {
        String realm = null;
        String id = null;
        List<String> requestBody = null;
        api.realmUsersIdDisableCredentialTypesPut(realm, id, requestBody);
        // TODO: test validations
    }

    /**
     * Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdExecuteActionsEmailPutTest() throws ApiException {
        String realm = null;
        String id = null;
        List<String> requestBody = null;
        String clientId = null;
        Integer lifespan = null;
        String redirectUri = null;
        api.realmUsersIdExecuteActionsEmailPut(realm, id, requestBody, clientId, lifespan, redirectUri);
        // TODO: test validations
    }

    /**
     * Get social logins associated with the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdFederatedIdentityGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<FederatedIdentityRepresentation> response = api.realmUsersIdFederatedIdentityGet(realm, id);
        // TODO: test validations
    }

    /**
     * Remove a social login provider from user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdFederatedIdentityProviderDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String provider = null;
        api.realmUsersIdFederatedIdentityProviderDelete(realm, id, provider);
        // TODO: test validations
    }

    /**
     * Add a social login provider to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdFederatedIdentityProviderPostTest() throws ApiException {
        String realm = null;
        String id = null;
        String provider = null;
        FederatedIdentityRepresentation federatedIdentityRepresentation = null;
        api.realmUsersIdFederatedIdentityProviderPost(realm, id, provider, federatedIdentityRepresentation);
        // TODO: test validations
    }

    /**
     * Get representation of the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdGetTest() throws ApiException {
        String realm = null;
        String id = null;
        UserRepresentation response = api.realmUsersIdGet(realm, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdGroupsCountGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String search = null;
        Map<String, Object> response = api.realmUsersIdGroupsCountGet(realm, id, search);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdGroupsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        Boolean briefRepresentation = null;
        Integer first = null;
        Integer max = null;
        String search = null;
        List<GroupRepresentation> response = api.realmUsersIdGroupsGet(realm, id, briefRepresentation, first, max, search);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdGroupsGroupIdDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        String groupId = null;
        api.realmUsersIdGroupsGroupIdDelete(realm, id, groupId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdGroupsGroupIdPutTest() throws ApiException {
        String realm = null;
        String id = null;
        String groupId = null;
        api.realmUsersIdGroupsGroupIdPut(realm, id, groupId);
        // TODO: test validations
    }

    /**
     * Impersonate the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdImpersonationPostTest() throws ApiException {
        String realm = null;
        String id = null;
        Map<String, Object> response = api.realmUsersIdImpersonationPost(realm, id);
        // TODO: test validations
    }

    /**
     * Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdLogoutPostTest() throws ApiException {
        String realm = null;
        String id = null;
        api.realmUsersIdLogoutPost(realm, id);
        // TODO: test validations
    }

    /**
     * Get offline sessions associated with the user and client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdOfflineSessionsClientIdGetTest() throws ApiException {
        String realm = null;
        String id = null;
        String clientId = null;
        List<UserSessionRepresentation> response = api.realmUsersIdOfflineSessionsClientIdGet(realm, id, clientId);
        // TODO: test validations
    }

    /**
     * Update the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdPutTest() throws ApiException {
        String realm = null;
        String id = null;
        UserRepresentation userRepresentation = null;
        api.realmUsersIdPut(realm, id, userRepresentation);
        // TODO: test validations
    }

    /**
     * Set up a new password for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdResetPasswordPutTest() throws ApiException {
        String realm = null;
        String id = null;
        CredentialRepresentation credentialRepresentation = null;
        api.realmUsersIdResetPasswordPut(realm, id, credentialRepresentation);
        // TODO: test validations
    }

    /**
     * Send an email-verification email to the user   An email contains a link the user can click to verify their email address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdSendVerifyEmailPutTest() throws ApiException {
        String realm = null;
        String id = null;
        String clientId = null;
        String redirectUri = null;
        api.realmUsersIdSendVerifyEmailPut(realm, id, clientId, redirectUri);
        // TODO: test validations
    }

    /**
     * Get sessions associated with the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdSessionsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<UserSessionRepresentation> response = api.realmUsersIdSessionsGet(realm, id);
        // TODO: test validations
    }

    /**
     * Create a new user   Username must be unique.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersPostTest() throws ApiException {
        String realm = null;
        UserRepresentation userRepresentation = null;
        api.realmUsersPost(realm, userRepresentation);
        // TODO: test validations
    }

}
