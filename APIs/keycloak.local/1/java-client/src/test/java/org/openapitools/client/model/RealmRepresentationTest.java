/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuthenticationFlowRepresentation;
import org.openapitools.client.model.AuthenticatorConfigRepresentation;
import org.openapitools.client.model.ClientRepresentation;
import org.openapitools.client.model.ClientScopeRepresentation;
import org.openapitools.client.model.GroupRepresentation;
import org.openapitools.client.model.IdentityProviderMapperRepresentation;
import org.openapitools.client.model.IdentityProviderRepresentation;
import org.openapitools.client.model.MultivaluedHashMap;
import org.openapitools.client.model.ProtocolMapperRepresentation;
import org.openapitools.client.model.RequiredActionProviderRepresentation;
import org.openapitools.client.model.RolesRepresentation;
import org.openapitools.client.model.ScopeMappingRepresentation;
import org.openapitools.client.model.UserFederationMapperRepresentation;
import org.openapitools.client.model.UserFederationProviderRepresentation;
import org.openapitools.client.model.UserRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for RealmRepresentation
 */
public class RealmRepresentationTest {
    private final RealmRepresentation model = new RealmRepresentation();

    /**
     * Model tests for RealmRepresentation
     */
    @Test
    public void testRealmRepresentation() {
        // TODO: test RealmRepresentation
    }

    /**
     * Test the property 'accessCodeLifespan'
     */
    @Test
    public void accessCodeLifespanTest() {
        // TODO: test accessCodeLifespan
    }

    /**
     * Test the property 'accessCodeLifespanLogin'
     */
    @Test
    public void accessCodeLifespanLoginTest() {
        // TODO: test accessCodeLifespanLogin
    }

    /**
     * Test the property 'accessCodeLifespanUserAction'
     */
    @Test
    public void accessCodeLifespanUserActionTest() {
        // TODO: test accessCodeLifespanUserAction
    }

    /**
     * Test the property 'accessTokenLifespan'
     */
    @Test
    public void accessTokenLifespanTest() {
        // TODO: test accessTokenLifespan
    }

    /**
     * Test the property 'accessTokenLifespanForImplicitFlow'
     */
    @Test
    public void accessTokenLifespanForImplicitFlowTest() {
        // TODO: test accessTokenLifespanForImplicitFlow
    }

    /**
     * Test the property 'accountTheme'
     */
    @Test
    public void accountThemeTest() {
        // TODO: test accountTheme
    }

    /**
     * Test the property 'actionTokenGeneratedByAdminLifespan'
     */
    @Test
    public void actionTokenGeneratedByAdminLifespanTest() {
        // TODO: test actionTokenGeneratedByAdminLifespan
    }

    /**
     * Test the property 'actionTokenGeneratedByUserLifespan'
     */
    @Test
    public void actionTokenGeneratedByUserLifespanTest() {
        // TODO: test actionTokenGeneratedByUserLifespan
    }

    /**
     * Test the property 'adminEventsDetailsEnabled'
     */
    @Test
    public void adminEventsDetailsEnabledTest() {
        // TODO: test adminEventsDetailsEnabled
    }

    /**
     * Test the property 'adminEventsEnabled'
     */
    @Test
    public void adminEventsEnabledTest() {
        // TODO: test adminEventsEnabled
    }

    /**
     * Test the property 'adminTheme'
     */
    @Test
    public void adminThemeTest() {
        // TODO: test adminTheme
    }

    /**
     * Test the property 'attributes'
     */
    @Test
    public void attributesTest() {
        // TODO: test attributes
    }

    /**
     * Test the property 'authenticationFlows'
     */
    @Test
    public void authenticationFlowsTest() {
        // TODO: test authenticationFlows
    }

    /**
     * Test the property 'authenticatorConfig'
     */
    @Test
    public void authenticatorConfigTest() {
        // TODO: test authenticatorConfig
    }

    /**
     * Test the property 'browserFlow'
     */
    @Test
    public void browserFlowTest() {
        // TODO: test browserFlow
    }

    /**
     * Test the property 'browserSecurityHeaders'
     */
    @Test
    public void browserSecurityHeadersTest() {
        // TODO: test browserSecurityHeaders
    }

    /**
     * Test the property 'bruteForceProtected'
     */
    @Test
    public void bruteForceProtectedTest() {
        // TODO: test bruteForceProtected
    }

    /**
     * Test the property 'clientAuthenticationFlow'
     */
    @Test
    public void clientAuthenticationFlowTest() {
        // TODO: test clientAuthenticationFlow
    }

    /**
     * Test the property 'clientScopeMappings'
     */
    @Test
    public void clientScopeMappingsTest() {
        // TODO: test clientScopeMappings
    }

    /**
     * Test the property 'clientScopes'
     */
    @Test
    public void clientScopesTest() {
        // TODO: test clientScopes
    }

    /**
     * Test the property 'clientSessionIdleTimeout'
     */
    @Test
    public void clientSessionIdleTimeoutTest() {
        // TODO: test clientSessionIdleTimeout
    }

    /**
     * Test the property 'clientSessionMaxLifespan'
     */
    @Test
    public void clientSessionMaxLifespanTest() {
        // TODO: test clientSessionMaxLifespan
    }

    /**
     * Test the property 'clients'
     */
    @Test
    public void clientsTest() {
        // TODO: test clients
    }

    /**
     * Test the property 'components'
     */
    @Test
    public void componentsTest() {
        // TODO: test components
    }

    /**
     * Test the property 'defaultDefaultClientScopes'
     */
    @Test
    public void defaultDefaultClientScopesTest() {
        // TODO: test defaultDefaultClientScopes
    }

    /**
     * Test the property 'defaultGroups'
     */
    @Test
    public void defaultGroupsTest() {
        // TODO: test defaultGroups
    }

    /**
     * Test the property 'defaultLocale'
     */
    @Test
    public void defaultLocaleTest() {
        // TODO: test defaultLocale
    }

    /**
     * Test the property 'defaultOptionalClientScopes'
     */
    @Test
    public void defaultOptionalClientScopesTest() {
        // TODO: test defaultOptionalClientScopes
    }

    /**
     * Test the property 'defaultRoles'
     */
    @Test
    public void defaultRolesTest() {
        // TODO: test defaultRoles
    }

    /**
     * Test the property 'defaultSignatureAlgorithm'
     */
    @Test
    public void defaultSignatureAlgorithmTest() {
        // TODO: test defaultSignatureAlgorithm
    }

    /**
     * Test the property 'directGrantFlow'
     */
    @Test
    public void directGrantFlowTest() {
        // TODO: test directGrantFlow
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    public void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'displayNameHtml'
     */
    @Test
    public void displayNameHtmlTest() {
        // TODO: test displayNameHtml
    }

    /**
     * Test the property 'dockerAuthenticationFlow'
     */
    @Test
    public void dockerAuthenticationFlowTest() {
        // TODO: test dockerAuthenticationFlow
    }

    /**
     * Test the property 'duplicateEmailsAllowed'
     */
    @Test
    public void duplicateEmailsAllowedTest() {
        // TODO: test duplicateEmailsAllowed
    }

    /**
     * Test the property 'editUsernameAllowed'
     */
    @Test
    public void editUsernameAllowedTest() {
        // TODO: test editUsernameAllowed
    }

    /**
     * Test the property 'emailTheme'
     */
    @Test
    public void emailThemeTest() {
        // TODO: test emailTheme
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'enabledEventTypes'
     */
    @Test
    public void enabledEventTypesTest() {
        // TODO: test enabledEventTypes
    }

    /**
     * Test the property 'eventsEnabled'
     */
    @Test
    public void eventsEnabledTest() {
        // TODO: test eventsEnabled
    }

    /**
     * Test the property 'eventsExpiration'
     */
    @Test
    public void eventsExpirationTest() {
        // TODO: test eventsExpiration
    }

    /**
     * Test the property 'eventsListeners'
     */
    @Test
    public void eventsListenersTest() {
        // TODO: test eventsListeners
    }

    /**
     * Test the property 'failureFactor'
     */
    @Test
    public void failureFactorTest() {
        // TODO: test failureFactor
    }

    /**
     * Test the property 'federatedUsers'
     */
    @Test
    public void federatedUsersTest() {
        // TODO: test federatedUsers
    }

    /**
     * Test the property 'groups'
     */
    @Test
    public void groupsTest() {
        // TODO: test groups
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'identityProviderMappers'
     */
    @Test
    public void identityProviderMappersTest() {
        // TODO: test identityProviderMappers
    }

    /**
     * Test the property 'identityProviders'
     */
    @Test
    public void identityProvidersTest() {
        // TODO: test identityProviders
    }

    /**
     * Test the property 'internationalizationEnabled'
     */
    @Test
    public void internationalizationEnabledTest() {
        // TODO: test internationalizationEnabled
    }

    /**
     * Test the property 'keycloakVersion'
     */
    @Test
    public void keycloakVersionTest() {
        // TODO: test keycloakVersion
    }

    /**
     * Test the property 'loginTheme'
     */
    @Test
    public void loginThemeTest() {
        // TODO: test loginTheme
    }

    /**
     * Test the property 'loginWithEmailAllowed'
     */
    @Test
    public void loginWithEmailAllowedTest() {
        // TODO: test loginWithEmailAllowed
    }

    /**
     * Test the property 'maxDeltaTimeSeconds'
     */
    @Test
    public void maxDeltaTimeSecondsTest() {
        // TODO: test maxDeltaTimeSeconds
    }

    /**
     * Test the property 'maxFailureWaitSeconds'
     */
    @Test
    public void maxFailureWaitSecondsTest() {
        // TODO: test maxFailureWaitSeconds
    }

    /**
     * Test the property 'minimumQuickLoginWaitSeconds'
     */
    @Test
    public void minimumQuickLoginWaitSecondsTest() {
        // TODO: test minimumQuickLoginWaitSeconds
    }

    /**
     * Test the property 'notBefore'
     */
    @Test
    public void notBeforeTest() {
        // TODO: test notBefore
    }

    /**
     * Test the property 'offlineSessionIdleTimeout'
     */
    @Test
    public void offlineSessionIdleTimeoutTest() {
        // TODO: test offlineSessionIdleTimeout
    }

    /**
     * Test the property 'offlineSessionMaxLifespan'
     */
    @Test
    public void offlineSessionMaxLifespanTest() {
        // TODO: test offlineSessionMaxLifespan
    }

    /**
     * Test the property 'offlineSessionMaxLifespanEnabled'
     */
    @Test
    public void offlineSessionMaxLifespanEnabledTest() {
        // TODO: test offlineSessionMaxLifespanEnabled
    }

    /**
     * Test the property 'otpPolicyAlgorithm'
     */
    @Test
    public void otpPolicyAlgorithmTest() {
        // TODO: test otpPolicyAlgorithm
    }

    /**
     * Test the property 'otpPolicyDigits'
     */
    @Test
    public void otpPolicyDigitsTest() {
        // TODO: test otpPolicyDigits
    }

    /**
     * Test the property 'otpPolicyInitialCounter'
     */
    @Test
    public void otpPolicyInitialCounterTest() {
        // TODO: test otpPolicyInitialCounter
    }

    /**
     * Test the property 'otpPolicyLookAheadWindow'
     */
    @Test
    public void otpPolicyLookAheadWindowTest() {
        // TODO: test otpPolicyLookAheadWindow
    }

    /**
     * Test the property 'otpPolicyPeriod'
     */
    @Test
    public void otpPolicyPeriodTest() {
        // TODO: test otpPolicyPeriod
    }

    /**
     * Test the property 'otpPolicyType'
     */
    @Test
    public void otpPolicyTypeTest() {
        // TODO: test otpPolicyType
    }

    /**
     * Test the property 'otpSupportedApplications'
     */
    @Test
    public void otpSupportedApplicationsTest() {
        // TODO: test otpSupportedApplications
    }

    /**
     * Test the property 'passwordPolicy'
     */
    @Test
    public void passwordPolicyTest() {
        // TODO: test passwordPolicy
    }

    /**
     * Test the property 'permanentLockout'
     */
    @Test
    public void permanentLockoutTest() {
        // TODO: test permanentLockout
    }

    /**
     * Test the property 'protocolMappers'
     */
    @Test
    public void protocolMappersTest() {
        // TODO: test protocolMappers
    }

    /**
     * Test the property 'quickLoginCheckMilliSeconds'
     */
    @Test
    public void quickLoginCheckMilliSecondsTest() {
        // TODO: test quickLoginCheckMilliSeconds
    }

    /**
     * Test the property 'realm'
     */
    @Test
    public void realmTest() {
        // TODO: test realm
    }

    /**
     * Test the property 'refreshTokenMaxReuse'
     */
    @Test
    public void refreshTokenMaxReuseTest() {
        // TODO: test refreshTokenMaxReuse
    }

    /**
     * Test the property 'registrationAllowed'
     */
    @Test
    public void registrationAllowedTest() {
        // TODO: test registrationAllowed
    }

    /**
     * Test the property 'registrationEmailAsUsername'
     */
    @Test
    public void registrationEmailAsUsernameTest() {
        // TODO: test registrationEmailAsUsername
    }

    /**
     * Test the property 'registrationFlow'
     */
    @Test
    public void registrationFlowTest() {
        // TODO: test registrationFlow
    }

    /**
     * Test the property 'rememberMe'
     */
    @Test
    public void rememberMeTest() {
        // TODO: test rememberMe
    }

    /**
     * Test the property 'requiredActions'
     */
    @Test
    public void requiredActionsTest() {
        // TODO: test requiredActions
    }

    /**
     * Test the property 'resetCredentialsFlow'
     */
    @Test
    public void resetCredentialsFlowTest() {
        // TODO: test resetCredentialsFlow
    }

    /**
     * Test the property 'resetPasswordAllowed'
     */
    @Test
    public void resetPasswordAllowedTest() {
        // TODO: test resetPasswordAllowed
    }

    /**
     * Test the property 'revokeRefreshToken'
     */
    @Test
    public void revokeRefreshTokenTest() {
        // TODO: test revokeRefreshToken
    }

    /**
     * Test the property 'roles'
     */
    @Test
    public void rolesTest() {
        // TODO: test roles
    }

    /**
     * Test the property 'scopeMappings'
     */
    @Test
    public void scopeMappingsTest() {
        // TODO: test scopeMappings
    }

    /**
     * Test the property 'smtpServer'
     */
    @Test
    public void smtpServerTest() {
        // TODO: test smtpServer
    }

    /**
     * Test the property 'sslRequired'
     */
    @Test
    public void sslRequiredTest() {
        // TODO: test sslRequired
    }

    /**
     * Test the property 'ssoSessionIdleTimeout'
     */
    @Test
    public void ssoSessionIdleTimeoutTest() {
        // TODO: test ssoSessionIdleTimeout
    }

    /**
     * Test the property 'ssoSessionIdleTimeoutRememberMe'
     */
    @Test
    public void ssoSessionIdleTimeoutRememberMeTest() {
        // TODO: test ssoSessionIdleTimeoutRememberMe
    }

    /**
     * Test the property 'ssoSessionMaxLifespan'
     */
    @Test
    public void ssoSessionMaxLifespanTest() {
        // TODO: test ssoSessionMaxLifespan
    }

    /**
     * Test the property 'ssoSessionMaxLifespanRememberMe'
     */
    @Test
    public void ssoSessionMaxLifespanRememberMeTest() {
        // TODO: test ssoSessionMaxLifespanRememberMe
    }

    /**
     * Test the property 'supportedLocales'
     */
    @Test
    public void supportedLocalesTest() {
        // TODO: test supportedLocales
    }

    /**
     * Test the property 'userFederationMappers'
     */
    @Test
    public void userFederationMappersTest() {
        // TODO: test userFederationMappers
    }

    /**
     * Test the property 'userFederationProviders'
     */
    @Test
    public void userFederationProvidersTest() {
        // TODO: test userFederationProviders
    }

    /**
     * Test the property 'userManagedAccessAllowed'
     */
    @Test
    public void userManagedAccessAllowedTest() {
        // TODO: test userManagedAccessAllowed
    }

    /**
     * Test the property 'users'
     */
    @Test
    public void usersTest() {
        // TODO: test users
    }

    /**
     * Test the property 'verifyEmail'
     */
    @Test
    public void verifyEmailTest() {
        // TODO: test verifyEmail
    }

    /**
     * Test the property 'waitIncrementSeconds'
     */
    @Test
    public void waitIncrementSecondsTest() {
        // TODO: test waitIncrementSeconds
    }

    /**
     * Test the property 'webAuthnPolicyAcceptableAaguids'
     */
    @Test
    public void webAuthnPolicyAcceptableAaguidsTest() {
        // TODO: test webAuthnPolicyAcceptableAaguids
    }

    /**
     * Test the property 'webAuthnPolicyAttestationConveyancePreference'
     */
    @Test
    public void webAuthnPolicyAttestationConveyancePreferenceTest() {
        // TODO: test webAuthnPolicyAttestationConveyancePreference
    }

    /**
     * Test the property 'webAuthnPolicyAuthenticatorAttachment'
     */
    @Test
    public void webAuthnPolicyAuthenticatorAttachmentTest() {
        // TODO: test webAuthnPolicyAuthenticatorAttachment
    }

    /**
     * Test the property 'webAuthnPolicyAvoidSameAuthenticatorRegister'
     */
    @Test
    public void webAuthnPolicyAvoidSameAuthenticatorRegisterTest() {
        // TODO: test webAuthnPolicyAvoidSameAuthenticatorRegister
    }

    /**
     * Test the property 'webAuthnPolicyCreateTimeout'
     */
    @Test
    public void webAuthnPolicyCreateTimeoutTest() {
        // TODO: test webAuthnPolicyCreateTimeout
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessAcceptableAaguids'
     */
    @Test
    public void webAuthnPolicyPasswordlessAcceptableAaguidsTest() {
        // TODO: test webAuthnPolicyPasswordlessAcceptableAaguids
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessAttestationConveyancePreference'
     */
    @Test
    public void webAuthnPolicyPasswordlessAttestationConveyancePreferenceTest() {
        // TODO: test webAuthnPolicyPasswordlessAttestationConveyancePreference
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessAuthenticatorAttachment'
     */
    @Test
    public void webAuthnPolicyPasswordlessAuthenticatorAttachmentTest() {
        // TODO: test webAuthnPolicyPasswordlessAuthenticatorAttachment
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister'
     */
    @Test
    public void webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegisterTest() {
        // TODO: test webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessCreateTimeout'
     */
    @Test
    public void webAuthnPolicyPasswordlessCreateTimeoutTest() {
        // TODO: test webAuthnPolicyPasswordlessCreateTimeout
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessRequireResidentKey'
     */
    @Test
    public void webAuthnPolicyPasswordlessRequireResidentKeyTest() {
        // TODO: test webAuthnPolicyPasswordlessRequireResidentKey
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessRpEntityName'
     */
    @Test
    public void webAuthnPolicyPasswordlessRpEntityNameTest() {
        // TODO: test webAuthnPolicyPasswordlessRpEntityName
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessRpId'
     */
    @Test
    public void webAuthnPolicyPasswordlessRpIdTest() {
        // TODO: test webAuthnPolicyPasswordlessRpId
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessSignatureAlgorithms'
     */
    @Test
    public void webAuthnPolicyPasswordlessSignatureAlgorithmsTest() {
        // TODO: test webAuthnPolicyPasswordlessSignatureAlgorithms
    }

    /**
     * Test the property 'webAuthnPolicyPasswordlessUserVerificationRequirement'
     */
    @Test
    public void webAuthnPolicyPasswordlessUserVerificationRequirementTest() {
        // TODO: test webAuthnPolicyPasswordlessUserVerificationRequirement
    }

    /**
     * Test the property 'webAuthnPolicyRequireResidentKey'
     */
    @Test
    public void webAuthnPolicyRequireResidentKeyTest() {
        // TODO: test webAuthnPolicyRequireResidentKey
    }

    /**
     * Test the property 'webAuthnPolicyRpEntityName'
     */
    @Test
    public void webAuthnPolicyRpEntityNameTest() {
        // TODO: test webAuthnPolicyRpEntityName
    }

    /**
     * Test the property 'webAuthnPolicyRpId'
     */
    @Test
    public void webAuthnPolicyRpIdTest() {
        // TODO: test webAuthnPolicyRpId
    }

    /**
     * Test the property 'webAuthnPolicySignatureAlgorithms'
     */
    @Test
    public void webAuthnPolicySignatureAlgorithmsTest() {
        // TODO: test webAuthnPolicySignatureAlgorithms
    }

    /**
     * Test the property 'webAuthnPolicyUserVerificationRequirement'
     */
    @Test
    public void webAuthnPolicyUserVerificationRequirementTest() {
        // TODO: test webAuthnPolicyUserVerificationRequirement
    }

}
