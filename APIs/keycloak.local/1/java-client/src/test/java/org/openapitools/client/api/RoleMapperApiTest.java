/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MappingsRepresentation;
import org.openapitools.client.model.RoleRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoleMapperApi
 */
@Disabled
public class RoleMapperApiTest {

    private final RoleMapperApi api = new RoleMapperApi();

    /**
     * Get role mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        MappingsRepresentation response = api.realmGroupsIdRoleMappingsGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get realm-level roles that can be mapped
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsRealmAvailableGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmGroupsIdRoleMappingsRealmAvailableGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsRealmCompositeGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmGroupsIdRoleMappingsRealmCompositeGet(realm, id);
        // TODO: test validations
    }

    /**
     * Delete realm-level role mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsRealmDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmGroupsIdRoleMappingsRealmDelete(realm, id, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get realm-level role mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsRealmGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmGroupsIdRoleMappingsRealmGet(realm, id);
        // TODO: test validations
    }

    /**
     * Add realm-level role mappings to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupsIdRoleMappingsRealmPostTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmGroupsIdRoleMappingsRealmPost(realm, id, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get role mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsGetTest() throws ApiException {
        String realm = null;
        String id = null;
        MappingsRepresentation response = api.realmUsersIdRoleMappingsGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get realm-level roles that can be mapped
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsRealmAvailableGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmUsersIdRoleMappingsRealmAvailableGet(realm, id);
        // TODO: test validations
    }

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsRealmCompositeGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmUsersIdRoleMappingsRealmCompositeGet(realm, id);
        // TODO: test validations
    }

    /**
     * Delete realm-level role mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsRealmDeleteTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmUsersIdRoleMappingsRealmDelete(realm, id, roleRepresentation);
        // TODO: test validations
    }

    /**
     * Get realm-level role mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsRealmGetTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> response = api.realmUsersIdRoleMappingsRealmGet(realm, id);
        // TODO: test validations
    }

    /**
     * Add realm-level role mappings to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersIdRoleMappingsRealmPostTest() throws ApiException {
        String realm = null;
        String id = null;
        List<RoleRepresentation> roleRepresentation = null;
        api.realmUsersIdRoleMappingsRealmPost(realm, id, roleRepresentation);
        // TODO: test validations
    }

}
