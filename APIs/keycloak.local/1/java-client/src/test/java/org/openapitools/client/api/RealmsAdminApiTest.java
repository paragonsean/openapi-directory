/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdminEventRepresentation;
import org.openapitools.client.model.ClientRepresentation;
import org.openapitools.client.model.ClientScopeRepresentation;
import org.openapitools.client.model.EventRepresentation;
import org.openapitools.client.model.GroupRepresentation;
import org.openapitools.client.model.ManagementPermissionReference;
import org.openapitools.client.model.PartialImportRepresentation;
import org.openapitools.client.model.RealmEventsConfigRepresentation;
import org.openapitools.client.model.RealmRepresentation;
import org.openapitools.client.model.TestLdapConnectionRepresentation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RealmsAdminApi
 */
@Disabled
public class RealmsAdminApiTest {

    private final RealmsAdminApi api = new RealmsAdminApi();

    /**
     * Delete all admin events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAdminEventsDeleteTest() throws ApiException {
        String realm = null;
        api.realmAdminEventsDelete(realm);
        // TODO: test validations
    }

    /**
     * Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmAdminEventsGetTest() throws ApiException {
        String realm = null;
        String authClient = null;
        String authIpAddress = null;
        String authRealm = null;
        String authUser = null;
        String dateFrom = null;
        String dateTo = null;
        Integer first = null;
        Integer max = null;
        List<String> operationTypes = null;
        String resourcePath = null;
        List<String> resourceTypes = null;
        List<AdminEventRepresentation> response = api.realmAdminEventsGet(realm, authClient, authIpAddress, authRealm, authUser, dateFrom, dateTo, first, max, operationTypes, resourcePath, resourceTypes);
        // TODO: test validations
    }

    /**
     * Clear cache of external public keys (Public keys of clients or Identity providers)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClearKeysCachePostTest() throws ApiException {
        String realm = null;
        api.realmClearKeysCachePost(realm);
        // TODO: test validations
    }

    /**
     * Clear realm cache
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClearRealmCachePostTest() throws ApiException {
        String realm = null;
        api.realmClearRealmCachePost(realm);
        // TODO: test validations
    }

    /**
     * Clear user cache
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClearUserCachePostTest() throws ApiException {
        String realm = null;
        api.realmClearUserCachePost(realm);
        // TODO: test validations
    }

    /**
     * Base path for importing clients under this realm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientDescriptionConverterPostTest() throws ApiException {
        String realm = null;
        String body = null;
        ClientRepresentation response = api.realmClientDescriptionConverterPost(realm, body);
        // TODO: test validations
    }

    /**
     * Get client session stats   Returns a JSON map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmClientSessionStatsGetTest() throws ApiException {
        String realm = null;
        List<Map<String, Object>> response = api.realmClientSessionStatsGet(realm);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmCredentialRegistratorsGetTest() throws ApiException {
        String realm = null;
        List<String> response = api.realmCredentialRegistratorsGet(realm);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDefaultDefaultClientScopesClientScopeIdDeleteTest() throws ApiException {
        String realm = null;
        String clientScopeId = null;
        api.realmDefaultDefaultClientScopesClientScopeIdDelete(realm, clientScopeId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDefaultDefaultClientScopesClientScopeIdPutTest() throws ApiException {
        String realm = null;
        String clientScopeId = null;
        api.realmDefaultDefaultClientScopesClientScopeIdPut(realm, clientScopeId);
        // TODO: test validations
    }

    /**
     * Get realm default client scopes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDefaultDefaultClientScopesGetTest() throws ApiException {
        String realm = null;
        List<ClientScopeRepresentation> response = api.realmDefaultDefaultClientScopesGet(realm);
        // TODO: test validations
    }

    /**
     * Get group hierarchy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDefaultGroupsGetTest() throws ApiException {
        String realm = null;
        List<GroupRepresentation> response = api.realmDefaultGroupsGet(realm);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDefaultGroupsGroupIdDeleteTest() throws ApiException {
        String realm = null;
        String groupId = null;
        api.realmDefaultGroupsGroupIdDelete(realm, groupId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDefaultGroupsGroupIdPutTest() throws ApiException {
        String realm = null;
        String groupId = null;
        api.realmDefaultGroupsGroupIdPut(realm, groupId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDefaultOptionalClientScopesClientScopeIdDeleteTest() throws ApiException {
        String realm = null;
        String clientScopeId = null;
        api.realmDefaultOptionalClientScopesClientScopeIdDelete(realm, clientScopeId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDefaultOptionalClientScopesClientScopeIdPutTest() throws ApiException {
        String realm = null;
        String clientScopeId = null;
        api.realmDefaultOptionalClientScopesClientScopeIdPut(realm, clientScopeId);
        // TODO: test validations
    }

    /**
     * Get realm optional client scopes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDefaultOptionalClientScopesGetTest() throws ApiException {
        String realm = null;
        List<ClientScopeRepresentation> response = api.realmDefaultOptionalClientScopesGet(realm);
        // TODO: test validations
    }

    /**
     * Delete the realm
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmDeleteTest() throws ApiException {
        String realm = null;
        api.realmDelete(realm);
        // TODO: test validations
    }

    /**
     * Get the events provider configuration   Returns JSON object with events provider configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmEventsConfigGetTest() throws ApiException {
        String realm = null;
        RealmEventsConfigRepresentation response = api.realmEventsConfigGet(realm);
        // TODO: test validations
    }

    /**
     * Update the events provider   Change the events provider and/or its configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmEventsConfigPutTest() throws ApiException {
        String realm = null;
        RealmEventsConfigRepresentation realmEventsConfigRepresentation = null;
        api.realmEventsConfigPut(realm, realmEventsConfigRepresentation);
        // TODO: test validations
    }

    /**
     * Delete all events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmEventsDeleteTest() throws ApiException {
        String realm = null;
        api.realmEventsDelete(realm);
        // TODO: test validations
    }

    /**
     * Get events   Returns all events, or filters them based on URL query parameters listed here
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmEventsGetTest() throws ApiException {
        String realm = null;
        String client = null;
        String dateFrom = null;
        String dateTo = null;
        Integer first = null;
        String ipAddress = null;
        Integer max = null;
        List<String> type = null;
        String user = null;
        List<EventRepresentation> response = api.realmEventsGet(realm, client, dateFrom, dateTo, first, ipAddress, max, type, user);
        // TODO: test validations
    }

    /**
     * Get the top-level representation of the realm   It will not include nested information like User and Client representations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGetTest() throws ApiException {
        String realm = null;
        RealmRepresentation response = api.realmGet(realm);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmGroupByPathPathGetTest() throws ApiException {
        String realm = null;
        String path = null;
        GroupRepresentation response = api.realmGroupByPathPathGet(realm, path);
        // TODO: test validations
    }

    /**
     * Removes all user sessions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmLogoutAllPostTest() throws ApiException {
        String realm = null;
        api.realmLogoutAllPost(realm);
        // TODO: test validations
    }

    /**
     * Partial export of existing realm into a JSON file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmPartialExportPostTest() throws ApiException {
        String realm = null;
        Boolean exportClients = null;
        Boolean exportGroupsAndRoles = null;
        RealmRepresentation response = api.realmPartialExportPost(realm, exportClients, exportGroupsAndRoles);
        // TODO: test validations
    }

    /**
     * Partial import from a JSON file to an existing realm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmPartialImportPostTest() throws ApiException {
        String realm = null;
        PartialImportRepresentation partialImportRepresentation = null;
        api.realmPartialImportPost(realm, partialImportRepresentation);
        // TODO: test validations
    }

    /**
     * Push the realm’s revocation policy to any client that has an admin url associated with it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmPushRevocationPostTest() throws ApiException {
        String realm = null;
        api.realmPushRevocationPost(realm);
        // TODO: test validations
    }

    /**
     * Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmPutTest() throws ApiException {
        String realm = null;
        RealmRepresentation realmRepresentation = null;
        api.realmPut(realm, realmRepresentation);
        // TODO: test validations
    }

    /**
     * Remove a specific user session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmSessionsSessionDeleteTest() throws ApiException {
        String realm = null;
        String session = null;
        api.realmSessionsSessionDelete(realm, session);
        // TODO: test validations
    }

    /**
     * Test LDAP connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmTestLDAPConnectionPostTest() throws ApiException {
        String realm = null;
        TestLdapConnectionRepresentation testLdapConnectionRepresentation = null;
        api.realmTestLDAPConnectionPost(realm, testLdapConnectionRepresentation);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmTestSMTPConnectionPostTest() throws ApiException {
        String realm = null;
        Map<String, Object> requestBody = null;
        api.realmTestSMTPConnectionPost(realm, requestBody);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersManagementPermissionsGetTest() throws ApiException {
        String realm = null;
        ManagementPermissionReference response = api.realmUsersManagementPermissionsGet(realm);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmUsersManagementPermissionsPutTest() throws ApiException {
        String realm = null;
        ManagementPermissionReference managementPermissionReference = null;
        ManagementPermissionReference response = api.realmUsersManagementPermissionsPut(realm, managementPermissionReference);
        // TODO: test validations
    }

    /**
     * Import a realm   Imports a realm from a full representation of that realm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rootPostTest() throws ApiException {
        RealmRepresentation realmRepresentation = null;
        api.rootPost(realmRepresentation);
        // TODO: test validations
    }

}
