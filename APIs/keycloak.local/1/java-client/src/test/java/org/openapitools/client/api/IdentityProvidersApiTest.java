/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.IdentityProviderMapperRepresentation;
import org.openapitools.client.model.IdentityProviderRepresentation;
import org.openapitools.client.model.ManagementPermissionReference;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdentityProvidersApi
 */
@Disabled
public class IdentityProvidersApiTest {

    private final IdentityProvidersApi api = new IdentityProvidersApi();

    /**
     * Import identity provider from uploaded JSON file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderImportConfigPostTest() throws ApiException {
        String realm = null;
        Map<String, Object> response = api.realmIdentityProviderImportConfigPost(realm);
        // TODO: test validations
    }

    /**
     * Delete the identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasDeleteTest() throws ApiException {
        String realm = null;
        String alias = null;
        api.realmIdentityProviderInstancesAliasDelete(realm, alias);
        // TODO: test validations
    }

    /**
     * Export public broker configuration for identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasExportGetTest() throws ApiException {
        String realm = null;
        String alias = null;
        String format = null;
        api.realmIdentityProviderInstancesAliasExportGet(realm, alias, format);
        // TODO: test validations
    }

    /**
     * Get the identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasGetTest() throws ApiException {
        String realm = null;
        String alias = null;
        IdentityProviderRepresentation response = api.realmIdentityProviderInstancesAliasGet(realm, alias);
        // TODO: test validations
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasManagementPermissionsGetTest() throws ApiException {
        String realm = null;
        String alias = null;
        ManagementPermissionReference response = api.realmIdentityProviderInstancesAliasManagementPermissionsGet(realm, alias);
        // TODO: test validations
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasManagementPermissionsPutTest() throws ApiException {
        String realm = null;
        String alias = null;
        ManagementPermissionReference managementPermissionReference = null;
        ManagementPermissionReference response = api.realmIdentityProviderInstancesAliasManagementPermissionsPut(realm, alias, managementPermissionReference);
        // TODO: test validations
    }

    /**
     * Get mapper types for identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasMapperTypesGetTest() throws ApiException {
        String realm = null;
        String alias = null;
        api.realmIdentityProviderInstancesAliasMapperTypesGet(realm, alias);
        // TODO: test validations
    }

    /**
     * Get mappers for identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasMappersGetTest() throws ApiException {
        String realm = null;
        String alias = null;
        List<IdentityProviderMapperRepresentation> response = api.realmIdentityProviderInstancesAliasMappersGet(realm, alias);
        // TODO: test validations
    }

    /**
     * Delete a mapper for the identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasMappersIdDeleteTest() throws ApiException {
        String realm = null;
        String alias = null;
        String id = null;
        api.realmIdentityProviderInstancesAliasMappersIdDelete(realm, alias, id);
        // TODO: test validations
    }

    /**
     * Get mapper by id for the identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasMappersIdGetTest() throws ApiException {
        String realm = null;
        String alias = null;
        String id = null;
        IdentityProviderMapperRepresentation response = api.realmIdentityProviderInstancesAliasMappersIdGet(realm, alias, id);
        // TODO: test validations
    }

    /**
     * Update a mapper for the identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasMappersIdPutTest() throws ApiException {
        String realm = null;
        String alias = null;
        String id = null;
        IdentityProviderMapperRepresentation identityProviderMapperRepresentation = null;
        api.realmIdentityProviderInstancesAliasMappersIdPut(realm, alias, id, identityProviderMapperRepresentation);
        // TODO: test validations
    }

    /**
     * Add a mapper to identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasMappersPostTest() throws ApiException {
        String realm = null;
        String alias = null;
        IdentityProviderMapperRepresentation identityProviderMapperRepresentation = null;
        api.realmIdentityProviderInstancesAliasMappersPost(realm, alias, identityProviderMapperRepresentation);
        // TODO: test validations
    }

    /**
     * Update the identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesAliasPutTest() throws ApiException {
        String realm = null;
        String alias = null;
        IdentityProviderRepresentation identityProviderRepresentation = null;
        api.realmIdentityProviderInstancesAliasPut(realm, alias, identityProviderRepresentation);
        // TODO: test validations
    }

    /**
     * Get identity providers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesGetTest() throws ApiException {
        String realm = null;
        List<IdentityProviderRepresentation> response = api.realmIdentityProviderInstancesGet(realm);
        // TODO: test validations
    }

    /**
     * Create a new identity provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderInstancesPostTest() throws ApiException {
        String realm = null;
        IdentityProviderRepresentation identityProviderRepresentation = null;
        api.realmIdentityProviderInstancesPost(realm, identityProviderRepresentation);
        // TODO: test validations
    }

    /**
     * Get identity providers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realmIdentityProviderProvidersProviderIdGetTest() throws ApiException {
        String realm = null;
        String providerId = null;
        api.realmIdentityProviderProvidersProviderIdGet(realm, providerId);
        // TODO: test validations
    }

}
