/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MemoryInfoRepresentation;
import org.openapitools.client.model.PasswordPolicyTypeRepresentation;
import org.openapitools.client.model.ProfileInfoRepresentation;
import org.openapitools.client.model.SystemInfoRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServerInfoRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerInfoRepresentation {
  public static final String SERIALIZED_NAME_BUILTIN_PROTOCOL_MAPPERS = "builtinProtocolMappers";
  @SerializedName(SERIALIZED_NAME_BUILTIN_PROTOCOL_MAPPERS)
  private Map<String, Object> builtinProtocolMappers = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_IMPORTERS = "clientImporters";
  @SerializedName(SERIALIZED_NAME_CLIENT_IMPORTERS)
  private List<Map<String, Object>> clientImporters = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_INSTALLATIONS = "clientInstallations";
  @SerializedName(SERIALIZED_NAME_CLIENT_INSTALLATIONS)
  private Map<String, Object> clientInstallations = new HashMap<>();

  public static final String SERIALIZED_NAME_COMPONENT_TYPES = "componentTypes";
  @SerializedName(SERIALIZED_NAME_COMPONENT_TYPES)
  private Map<String, Object> componentTypes = new HashMap<>();

  public static final String SERIALIZED_NAME_ENUMS = "enums";
  @SerializedName(SERIALIZED_NAME_ENUMS)
  private Map<String, Object> enums = new HashMap<>();

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDERS = "identityProviders";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDERS)
  private List<Map<String, Object>> identityProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMORY_INFO = "memoryInfo";
  @SerializedName(SERIALIZED_NAME_MEMORY_INFO)
  private MemoryInfoRepresentation memoryInfo;

  public static final String SERIALIZED_NAME_PASSWORD_POLICIES = "passwordPolicies";
  @SerializedName(SERIALIZED_NAME_PASSWORD_POLICIES)
  private List<PasswordPolicyTypeRepresentation> passwordPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILE_INFO = "profileInfo";
  @SerializedName(SERIALIZED_NAME_PROFILE_INFO)
  private ProfileInfoRepresentation profileInfo;

  public static final String SERIALIZED_NAME_PROTOCOL_MAPPER_TYPES = "protocolMapperTypes";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_MAPPER_TYPES)
  private Map<String, Object> protocolMapperTypes = new HashMap<>();

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private Map<String, Object> providers = new HashMap<>();

  public static final String SERIALIZED_NAME_SOCIAL_PROVIDERS = "socialProviders";
  @SerializedName(SERIALIZED_NAME_SOCIAL_PROVIDERS)
  private List<Map<String, Object>> socialProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYSTEM_INFO = "systemInfo";
  @SerializedName(SERIALIZED_NAME_SYSTEM_INFO)
  private SystemInfoRepresentation systemInfo;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private Map<String, Object> themes = new HashMap<>();

  public ServerInfoRepresentation() {
  }

  public ServerInfoRepresentation builtinProtocolMappers(Map<String, Object> builtinProtocolMappers) {
    this.builtinProtocolMappers = builtinProtocolMappers;
    return this;
  }

  public ServerInfoRepresentation putBuiltinProtocolMappersItem(String key, Object builtinProtocolMappersItem) {
    if (this.builtinProtocolMappers == null) {
      this.builtinProtocolMappers = new HashMap<>();
    }
    this.builtinProtocolMappers.put(key, builtinProtocolMappersItem);
    return this;
  }

  /**
   * Get builtinProtocolMappers
   * @return builtinProtocolMappers
   */
  @javax.annotation.Nullable
  public Map<String, Object> getBuiltinProtocolMappers() {
    return builtinProtocolMappers;
  }

  public void setBuiltinProtocolMappers(Map<String, Object> builtinProtocolMappers) {
    this.builtinProtocolMappers = builtinProtocolMappers;
  }


  public ServerInfoRepresentation clientImporters(List<Map<String, Object>> clientImporters) {
    this.clientImporters = clientImporters;
    return this;
  }

  public ServerInfoRepresentation addClientImportersItem(Map<String, Object> clientImportersItem) {
    if (this.clientImporters == null) {
      this.clientImporters = new ArrayList<>();
    }
    this.clientImporters.add(clientImportersItem);
    return this;
  }

  /**
   * Get clientImporters
   * @return clientImporters
   */
  @javax.annotation.Nullable
  public List<Map<String, Object>> getClientImporters() {
    return clientImporters;
  }

  public void setClientImporters(List<Map<String, Object>> clientImporters) {
    this.clientImporters = clientImporters;
  }


  public ServerInfoRepresentation clientInstallations(Map<String, Object> clientInstallations) {
    this.clientInstallations = clientInstallations;
    return this;
  }

  public ServerInfoRepresentation putClientInstallationsItem(String key, Object clientInstallationsItem) {
    if (this.clientInstallations == null) {
      this.clientInstallations = new HashMap<>();
    }
    this.clientInstallations.put(key, clientInstallationsItem);
    return this;
  }

  /**
   * Get clientInstallations
   * @return clientInstallations
   */
  @javax.annotation.Nullable
  public Map<String, Object> getClientInstallations() {
    return clientInstallations;
  }

  public void setClientInstallations(Map<String, Object> clientInstallations) {
    this.clientInstallations = clientInstallations;
  }


  public ServerInfoRepresentation componentTypes(Map<String, Object> componentTypes) {
    this.componentTypes = componentTypes;
    return this;
  }

  public ServerInfoRepresentation putComponentTypesItem(String key, Object componentTypesItem) {
    if (this.componentTypes == null) {
      this.componentTypes = new HashMap<>();
    }
    this.componentTypes.put(key, componentTypesItem);
    return this;
  }

  /**
   * Get componentTypes
   * @return componentTypes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getComponentTypes() {
    return componentTypes;
  }

  public void setComponentTypes(Map<String, Object> componentTypes) {
    this.componentTypes = componentTypes;
  }


  public ServerInfoRepresentation enums(Map<String, Object> enums) {
    this.enums = enums;
    return this;
  }

  public ServerInfoRepresentation putEnumsItem(String key, Object enumsItem) {
    if (this.enums == null) {
      this.enums = new HashMap<>();
    }
    this.enums.put(key, enumsItem);
    return this;
  }

  /**
   * Get enums
   * @return enums
   */
  @javax.annotation.Nullable
  public Map<String, Object> getEnums() {
    return enums;
  }

  public void setEnums(Map<String, Object> enums) {
    this.enums = enums;
  }


  public ServerInfoRepresentation identityProviders(List<Map<String, Object>> identityProviders) {
    this.identityProviders = identityProviders;
    return this;
  }

  public ServerInfoRepresentation addIdentityProvidersItem(Map<String, Object> identityProvidersItem) {
    if (this.identityProviders == null) {
      this.identityProviders = new ArrayList<>();
    }
    this.identityProviders.add(identityProvidersItem);
    return this;
  }

  /**
   * Get identityProviders
   * @return identityProviders
   */
  @javax.annotation.Nullable
  public List<Map<String, Object>> getIdentityProviders() {
    return identityProviders;
  }

  public void setIdentityProviders(List<Map<String, Object>> identityProviders) {
    this.identityProviders = identityProviders;
  }


  public ServerInfoRepresentation memoryInfo(MemoryInfoRepresentation memoryInfo) {
    this.memoryInfo = memoryInfo;
    return this;
  }

  /**
   * Get memoryInfo
   * @return memoryInfo
   */
  @javax.annotation.Nullable
  public MemoryInfoRepresentation getMemoryInfo() {
    return memoryInfo;
  }

  public void setMemoryInfo(MemoryInfoRepresentation memoryInfo) {
    this.memoryInfo = memoryInfo;
  }


  public ServerInfoRepresentation passwordPolicies(List<PasswordPolicyTypeRepresentation> passwordPolicies) {
    this.passwordPolicies = passwordPolicies;
    return this;
  }

  public ServerInfoRepresentation addPasswordPoliciesItem(PasswordPolicyTypeRepresentation passwordPoliciesItem) {
    if (this.passwordPolicies == null) {
      this.passwordPolicies = new ArrayList<>();
    }
    this.passwordPolicies.add(passwordPoliciesItem);
    return this;
  }

  /**
   * Get passwordPolicies
   * @return passwordPolicies
   */
  @javax.annotation.Nullable
  public List<PasswordPolicyTypeRepresentation> getPasswordPolicies() {
    return passwordPolicies;
  }

  public void setPasswordPolicies(List<PasswordPolicyTypeRepresentation> passwordPolicies) {
    this.passwordPolicies = passwordPolicies;
  }


  public ServerInfoRepresentation profileInfo(ProfileInfoRepresentation profileInfo) {
    this.profileInfo = profileInfo;
    return this;
  }

  /**
   * Get profileInfo
   * @return profileInfo
   */
  @javax.annotation.Nullable
  public ProfileInfoRepresentation getProfileInfo() {
    return profileInfo;
  }

  public void setProfileInfo(ProfileInfoRepresentation profileInfo) {
    this.profileInfo = profileInfo;
  }


  public ServerInfoRepresentation protocolMapperTypes(Map<String, Object> protocolMapperTypes) {
    this.protocolMapperTypes = protocolMapperTypes;
    return this;
  }

  public ServerInfoRepresentation putProtocolMapperTypesItem(String key, Object protocolMapperTypesItem) {
    if (this.protocolMapperTypes == null) {
      this.protocolMapperTypes = new HashMap<>();
    }
    this.protocolMapperTypes.put(key, protocolMapperTypesItem);
    return this;
  }

  /**
   * Get protocolMapperTypes
   * @return protocolMapperTypes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getProtocolMapperTypes() {
    return protocolMapperTypes;
  }

  public void setProtocolMapperTypes(Map<String, Object> protocolMapperTypes) {
    this.protocolMapperTypes = protocolMapperTypes;
  }


  public ServerInfoRepresentation providers(Map<String, Object> providers) {
    this.providers = providers;
    return this;
  }

  public ServerInfoRepresentation putProvidersItem(String key, Object providersItem) {
    if (this.providers == null) {
      this.providers = new HashMap<>();
    }
    this.providers.put(key, providersItem);
    return this;
  }

  /**
   * Get providers
   * @return providers
   */
  @javax.annotation.Nullable
  public Map<String, Object> getProviders() {
    return providers;
  }

  public void setProviders(Map<String, Object> providers) {
    this.providers = providers;
  }


  public ServerInfoRepresentation socialProviders(List<Map<String, Object>> socialProviders) {
    this.socialProviders = socialProviders;
    return this;
  }

  public ServerInfoRepresentation addSocialProvidersItem(Map<String, Object> socialProvidersItem) {
    if (this.socialProviders == null) {
      this.socialProviders = new ArrayList<>();
    }
    this.socialProviders.add(socialProvidersItem);
    return this;
  }

  /**
   * Get socialProviders
   * @return socialProviders
   */
  @javax.annotation.Nullable
  public List<Map<String, Object>> getSocialProviders() {
    return socialProviders;
  }

  public void setSocialProviders(List<Map<String, Object>> socialProviders) {
    this.socialProviders = socialProviders;
  }


  public ServerInfoRepresentation systemInfo(SystemInfoRepresentation systemInfo) {
    this.systemInfo = systemInfo;
    return this;
  }

  /**
   * Get systemInfo
   * @return systemInfo
   */
  @javax.annotation.Nullable
  public SystemInfoRepresentation getSystemInfo() {
    return systemInfo;
  }

  public void setSystemInfo(SystemInfoRepresentation systemInfo) {
    this.systemInfo = systemInfo;
  }


  public ServerInfoRepresentation themes(Map<String, Object> themes) {
    this.themes = themes;
    return this;
  }

  public ServerInfoRepresentation putThemesItem(String key, Object themesItem) {
    if (this.themes == null) {
      this.themes = new HashMap<>();
    }
    this.themes.put(key, themesItem);
    return this;
  }

  /**
   * Get themes
   * @return themes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getThemes() {
    return themes;
  }

  public void setThemes(Map<String, Object> themes) {
    this.themes = themes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerInfoRepresentation serverInfoRepresentation = (ServerInfoRepresentation) o;
    return Objects.equals(this.builtinProtocolMappers, serverInfoRepresentation.builtinProtocolMappers) &&
        Objects.equals(this.clientImporters, serverInfoRepresentation.clientImporters) &&
        Objects.equals(this.clientInstallations, serverInfoRepresentation.clientInstallations) &&
        Objects.equals(this.componentTypes, serverInfoRepresentation.componentTypes) &&
        Objects.equals(this.enums, serverInfoRepresentation.enums) &&
        Objects.equals(this.identityProviders, serverInfoRepresentation.identityProviders) &&
        Objects.equals(this.memoryInfo, serverInfoRepresentation.memoryInfo) &&
        Objects.equals(this.passwordPolicies, serverInfoRepresentation.passwordPolicies) &&
        Objects.equals(this.profileInfo, serverInfoRepresentation.profileInfo) &&
        Objects.equals(this.protocolMapperTypes, serverInfoRepresentation.protocolMapperTypes) &&
        Objects.equals(this.providers, serverInfoRepresentation.providers) &&
        Objects.equals(this.socialProviders, serverInfoRepresentation.socialProviders) &&
        Objects.equals(this.systemInfo, serverInfoRepresentation.systemInfo) &&
        Objects.equals(this.themes, serverInfoRepresentation.themes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(builtinProtocolMappers, clientImporters, clientInstallations, componentTypes, enums, identityProviders, memoryInfo, passwordPolicies, profileInfo, protocolMapperTypes, providers, socialProviders, systemInfo, themes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerInfoRepresentation {\n");
    sb.append("    builtinProtocolMappers: ").append(toIndentedString(builtinProtocolMappers)).append("\n");
    sb.append("    clientImporters: ").append(toIndentedString(clientImporters)).append("\n");
    sb.append("    clientInstallations: ").append(toIndentedString(clientInstallations)).append("\n");
    sb.append("    componentTypes: ").append(toIndentedString(componentTypes)).append("\n");
    sb.append("    enums: ").append(toIndentedString(enums)).append("\n");
    sb.append("    identityProviders: ").append(toIndentedString(identityProviders)).append("\n");
    sb.append("    memoryInfo: ").append(toIndentedString(memoryInfo)).append("\n");
    sb.append("    passwordPolicies: ").append(toIndentedString(passwordPolicies)).append("\n");
    sb.append("    profileInfo: ").append(toIndentedString(profileInfo)).append("\n");
    sb.append("    protocolMapperTypes: ").append(toIndentedString(protocolMapperTypes)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    socialProviders: ").append(toIndentedString(socialProviders)).append("\n");
    sb.append("    systemInfo: ").append(toIndentedString(systemInfo)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("builtinProtocolMappers");
    openapiFields.add("clientImporters");
    openapiFields.add("clientInstallations");
    openapiFields.add("componentTypes");
    openapiFields.add("enums");
    openapiFields.add("identityProviders");
    openapiFields.add("memoryInfo");
    openapiFields.add("passwordPolicies");
    openapiFields.add("profileInfo");
    openapiFields.add("protocolMapperTypes");
    openapiFields.add("providers");
    openapiFields.add("socialProviders");
    openapiFields.add("systemInfo");
    openapiFields.add("themes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerInfoRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerInfoRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerInfoRepresentation is not found in the empty JSON string", ServerInfoRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerInfoRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerInfoRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("clientImporters") != null && !jsonObj.get("clientImporters").isJsonNull() && !jsonObj.get("clientImporters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientImporters` to be an array in the JSON string but got `%s`", jsonObj.get("clientImporters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("identityProviders") != null && !jsonObj.get("identityProviders").isJsonNull() && !jsonObj.get("identityProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityProviders` to be an array in the JSON string but got `%s`", jsonObj.get("identityProviders").toString()));
      }
      // validate the optional field `memoryInfo`
      if (jsonObj.get("memoryInfo") != null && !jsonObj.get("memoryInfo").isJsonNull()) {
        MemoryInfoRepresentation.validateJsonElement(jsonObj.get("memoryInfo"));
      }
      if (jsonObj.get("passwordPolicies") != null && !jsonObj.get("passwordPolicies").isJsonNull()) {
        JsonArray jsonArraypasswordPolicies = jsonObj.getAsJsonArray("passwordPolicies");
        if (jsonArraypasswordPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("passwordPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `passwordPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("passwordPolicies").toString()));
          }

          // validate the optional field `passwordPolicies` (array)
          for (int i = 0; i < jsonArraypasswordPolicies.size(); i++) {
            PasswordPolicyTypeRepresentation.validateJsonElement(jsonArraypasswordPolicies.get(i));
          };
        }
      }
      // validate the optional field `profileInfo`
      if (jsonObj.get("profileInfo") != null && !jsonObj.get("profileInfo").isJsonNull()) {
        ProfileInfoRepresentation.validateJsonElement(jsonObj.get("profileInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("socialProviders") != null && !jsonObj.get("socialProviders").isJsonNull() && !jsonObj.get("socialProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialProviders` to be an array in the JSON string but got `%s`", jsonObj.get("socialProviders").toString()));
      }
      // validate the optional field `systemInfo`
      if (jsonObj.get("systemInfo") != null && !jsonObj.get("systemInfo").isJsonNull()) {
        SystemInfoRepresentation.validateJsonElement(jsonObj.get("systemInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerInfoRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerInfoRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerInfoRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerInfoRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerInfoRepresentation>() {
           @Override
           public void write(JsonWriter out, ServerInfoRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerInfoRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerInfoRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerInfoRepresentation
   * @throws IOException if the JSON string is invalid with respect to ServerInfoRepresentation
   */
  public static ServerInfoRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerInfoRepresentation.class);
  }

  /**
   * Convert an instance of ServerInfoRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

