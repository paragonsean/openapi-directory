/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CredentialRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CredentialRepresentation {
  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private Long createdDate;

  public static final String SERIALIZED_NAME_CREDENTIAL_DATA = "credentialData";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_DATA)
  private String credentialData;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_SECRET_DATA = "secretData";
  @SerializedName(SERIALIZED_NAME_SECRET_DATA)
  private String secretData;

  public static final String SERIALIZED_NAME_TEMPORARY = "temporary";
  @SerializedName(SERIALIZED_NAME_TEMPORARY)
  private Boolean temporary;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_LABEL = "userLabel";
  @SerializedName(SERIALIZED_NAME_USER_LABEL)
  private String userLabel;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public CredentialRepresentation() {
  }

  public CredentialRepresentation createdDate(Long createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public Long getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }


  public CredentialRepresentation credentialData(String credentialData) {
    this.credentialData = credentialData;
    return this;
  }

  /**
   * Get credentialData
   * @return credentialData
   */
  @javax.annotation.Nullable
  public String getCredentialData() {
    return credentialData;
  }

  public void setCredentialData(String credentialData) {
    this.credentialData = credentialData;
  }


  public CredentialRepresentation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CredentialRepresentation priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public CredentialRepresentation secretData(String secretData) {
    this.secretData = secretData;
    return this;
  }

  /**
   * Get secretData
   * @return secretData
   */
  @javax.annotation.Nullable
  public String getSecretData() {
    return secretData;
  }

  public void setSecretData(String secretData) {
    this.secretData = secretData;
  }


  public CredentialRepresentation temporary(Boolean temporary) {
    this.temporary = temporary;
    return this;
  }

  /**
   * Get temporary
   * @return temporary
   */
  @javax.annotation.Nullable
  public Boolean getTemporary() {
    return temporary;
  }

  public void setTemporary(Boolean temporary) {
    this.temporary = temporary;
  }


  public CredentialRepresentation type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CredentialRepresentation userLabel(String userLabel) {
    this.userLabel = userLabel;
    return this;
  }

  /**
   * Get userLabel
   * @return userLabel
   */
  @javax.annotation.Nullable
  public String getUserLabel() {
    return userLabel;
  }

  public void setUserLabel(String userLabel) {
    this.userLabel = userLabel;
  }


  public CredentialRepresentation value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredentialRepresentation credentialRepresentation = (CredentialRepresentation) o;
    return Objects.equals(this.createdDate, credentialRepresentation.createdDate) &&
        Objects.equals(this.credentialData, credentialRepresentation.credentialData) &&
        Objects.equals(this.id, credentialRepresentation.id) &&
        Objects.equals(this.priority, credentialRepresentation.priority) &&
        Objects.equals(this.secretData, credentialRepresentation.secretData) &&
        Objects.equals(this.temporary, credentialRepresentation.temporary) &&
        Objects.equals(this.type, credentialRepresentation.type) &&
        Objects.equals(this.userLabel, credentialRepresentation.userLabel) &&
        Objects.equals(this.value, credentialRepresentation.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDate, credentialData, id, priority, secretData, temporary, type, userLabel, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredentialRepresentation {\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    credentialData: ").append(toIndentedString(credentialData)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    secretData: ").append(toIndentedString(secretData)).append("\n");
    sb.append("    temporary: ").append(toIndentedString(temporary)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userLabel: ").append(toIndentedString(userLabel)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdDate");
    openapiFields.add("credentialData");
    openapiFields.add("id");
    openapiFields.add("priority");
    openapiFields.add("secretData");
    openapiFields.add("temporary");
    openapiFields.add("type");
    openapiFields.add("userLabel");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredentialRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredentialRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredentialRepresentation is not found in the empty JSON string", CredentialRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredentialRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredentialRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("credentialData") != null && !jsonObj.get("credentialData").isJsonNull()) && !jsonObj.get("credentialData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialData").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("secretData") != null && !jsonObj.get("secretData").isJsonNull()) && !jsonObj.get("secretData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretData").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("userLabel") != null && !jsonObj.get("userLabel").isJsonNull()) && !jsonObj.get("userLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLabel").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredentialRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredentialRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredentialRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredentialRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<CredentialRepresentation>() {
           @Override
           public void write(JsonWriter out, CredentialRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredentialRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredentialRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredentialRepresentation
   * @throws IOException if the JSON string is invalid with respect to CredentialRepresentation
   */
  public static CredentialRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredentialRepresentation.class);
  }

  /**
   * Convert an instance of CredentialRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

