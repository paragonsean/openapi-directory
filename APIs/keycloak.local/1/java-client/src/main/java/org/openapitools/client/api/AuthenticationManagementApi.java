/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthenticationExecutionInfoRepresentation;
import org.openapitools.client.model.AuthenticationExecutionRepresentation;
import org.openapitools.client.model.AuthenticationFlowRepresentation;
import org.openapitools.client.model.AuthenticatorConfigInfoRepresentation;
import org.openapitools.client.model.AuthenticatorConfigRepresentation;
import org.openapitools.client.model.RequiredActionProviderRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for realmAuthenticationAuthenticatorProvidersGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationAuthenticatorProvidersGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/authenticator-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationAuthenticatorProvidersGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationAuthenticatorProvidersGet(Async)");
        }

        return realmAuthenticationAuthenticatorProvidersGetCall(realm, _callback);

    }

    /**
     * Get authenticator providers   Returns a list of authenticator providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> realmAuthenticationAuthenticatorProvidersGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = realmAuthenticationAuthenticatorProvidersGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get authenticator providers   Returns a list of authenticator providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> realmAuthenticationAuthenticatorProvidersGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationAuthenticatorProvidersGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authenticator providers   Returns a list of authenticator providers. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationAuthenticatorProvidersGetAsync(String realm, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationAuthenticatorProvidersGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationClientAuthenticatorProvidersGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationClientAuthenticatorProvidersGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/client-authenticator-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationClientAuthenticatorProvidersGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationClientAuthenticatorProvidersGet(Async)");
        }

        return realmAuthenticationClientAuthenticatorProvidersGetCall(realm, _callback);

    }

    /**
     * Get client authenticator providers   Returns a list of client authenticator providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> realmAuthenticationClientAuthenticatorProvidersGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = realmAuthenticationClientAuthenticatorProvidersGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get client authenticator providers   Returns a list of client authenticator providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> realmAuthenticationClientAuthenticatorProvidersGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationClientAuthenticatorProvidersGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get client authenticator providers   Returns a list of client authenticator providers. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationClientAuthenticatorProvidersGetAsync(String realm, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationClientAuthenticatorProvidersGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationConfigDescriptionProviderIdGet
     * @param realm realm name (not id!) (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationConfigDescriptionProviderIdGetCall(String realm, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/config-description/{providerId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationConfigDescriptionProviderIdGetValidateBeforeCall(String realm, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationConfigDescriptionProviderIdGet(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling realmAuthenticationConfigDescriptionProviderIdGet(Async)");
        }

        return realmAuthenticationConfigDescriptionProviderIdGetCall(realm, providerId, _callback);

    }

    /**
     * Get authenticator provider’s configuration description
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId  (required)
     * @return AuthenticatorConfigInfoRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorConfigInfoRepresentation realmAuthenticationConfigDescriptionProviderIdGet(String realm, String providerId) throws ApiException {
        ApiResponse<AuthenticatorConfigInfoRepresentation> localVarResp = realmAuthenticationConfigDescriptionProviderIdGetWithHttpInfo(realm, providerId);
        return localVarResp.getData();
    }

    /**
     * Get authenticator provider’s configuration description
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;AuthenticatorConfigInfoRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorConfigInfoRepresentation> realmAuthenticationConfigDescriptionProviderIdGetWithHttpInfo(String realm, String providerId) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationConfigDescriptionProviderIdGetValidateBeforeCall(realm, providerId, null);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigInfoRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authenticator provider’s configuration description (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationConfigDescriptionProviderIdGetAsync(String realm, String providerId, final ApiCallback<AuthenticatorConfigInfoRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationConfigDescriptionProviderIdGetValidateBeforeCall(realm, providerId, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigInfoRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationConfigIdDelete
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationConfigIdDeleteCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/config/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationConfigIdDeleteValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationConfigIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmAuthenticationConfigIdDelete(Async)");
        }

        return realmAuthenticationConfigIdDeleteCall(realm, id, _callback);

    }

    /**
     * Delete authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationConfigIdDelete(String realm, String id) throws ApiException {
        realmAuthenticationConfigIdDeleteWithHttpInfo(realm, id);
    }

    /**
     * Delete authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationConfigIdDeleteWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationConfigIdDeleteValidateBeforeCall(realm, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete authenticator configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationConfigIdDeleteAsync(String realm, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationConfigIdDeleteValidateBeforeCall(realm, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationConfigIdGet
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationConfigIdGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/config/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationConfigIdGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationConfigIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmAuthenticationConfigIdGet(Async)");
        }

        return realmAuthenticationConfigIdGetCall(realm, id, _callback);

    }

    /**
     * Get authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @return AuthenticatorConfigRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorConfigRepresentation realmAuthenticationConfigIdGet(String realm, String id) throws ApiException {
        ApiResponse<AuthenticatorConfigRepresentation> localVarResp = realmAuthenticationConfigIdGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @return ApiResponse&lt;AuthenticatorConfigRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorConfigRepresentation> realmAuthenticationConfigIdGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationConfigIdGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authenticator configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationConfigIdGetAsync(String realm, String id, final ApiCallback<AuthenticatorConfigRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationConfigIdGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationConfigIdPut
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param authenticatorConfigRepresentation JSON describing new state of authenticator configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationConfigIdPutCall(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorConfigRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/config/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationConfigIdPutValidateBeforeCall(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationConfigIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmAuthenticationConfigIdPut(Async)");
        }

        // verify the required parameter 'authenticatorConfigRepresentation' is set
        if (authenticatorConfigRepresentation == null) {
            throw new ApiException("Missing the required parameter 'authenticatorConfigRepresentation' when calling realmAuthenticationConfigIdPut(Async)");
        }

        return realmAuthenticationConfigIdPutCall(realm, id, authenticatorConfigRepresentation, _callback);

    }

    /**
     * Update authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param authenticatorConfigRepresentation JSON describing new state of authenticator configuration (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationConfigIdPut(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        realmAuthenticationConfigIdPutWithHttpInfo(realm, id, authenticatorConfigRepresentation);
    }

    /**
     * Update authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param authenticatorConfigRepresentation JSON describing new state of authenticator configuration (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationConfigIdPutWithHttpInfo(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationConfigIdPutValidateBeforeCall(realm, id, authenticatorConfigRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update authenticator configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param authenticatorConfigRepresentation JSON describing new state of authenticator configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationConfigIdPutAsync(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationConfigIdPutValidateBeforeCall(realm, id, authenticatorConfigRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationExecutionsExecutionIdConfigPost
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param authenticatorConfigRepresentation JSON with new configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdConfigPostCall(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorConfigRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/executions/{executionId}/config"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationExecutionsExecutionIdConfigPostValidateBeforeCall(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdConfigPost(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdConfigPost(Async)");
        }

        // verify the required parameter 'authenticatorConfigRepresentation' is set
        if (authenticatorConfigRepresentation == null) {
            throw new ApiException("Missing the required parameter 'authenticatorConfigRepresentation' when calling realmAuthenticationExecutionsExecutionIdConfigPost(Async)");
        }

        return realmAuthenticationExecutionsExecutionIdConfigPostCall(realm, executionId, authenticatorConfigRepresentation, _callback);

    }

    /**
     * Update execution with new configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param authenticatorConfigRepresentation JSON with new configuration (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationExecutionsExecutionIdConfigPost(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        realmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfo(realm, executionId, authenticatorConfigRepresentation);
    }

    /**
     * Update execution with new configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param authenticatorConfigRepresentation JSON with new configuration (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfo(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdConfigPostValidateBeforeCall(realm, executionId, authenticatorConfigRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update execution with new configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param authenticatorConfigRepresentation JSON with new configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdConfigPostAsync(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdConfigPostValidateBeforeCall(realm, executionId, authenticatorConfigRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationExecutionsExecutionIdDelete
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdDeleteCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/executions/{executionId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationExecutionsExecutionIdDeleteValidateBeforeCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdDelete(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdDelete(Async)");
        }

        return realmAuthenticationExecutionsExecutionIdDeleteCall(realm, executionId, _callback);

    }

    /**
     * Delete execution
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationExecutionsExecutionIdDelete(String realm, String executionId) throws ApiException {
        realmAuthenticationExecutionsExecutionIdDeleteWithHttpInfo(realm, executionId);
    }

    /**
     * Delete execution
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationExecutionsExecutionIdDeleteWithHttpInfo(String realm, String executionId) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdDeleteValidateBeforeCall(realm, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete execution (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdDeleteAsync(String realm, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdDeleteValidateBeforeCall(realm, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationExecutionsExecutionIdGet
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdGetCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/executions/{executionId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationExecutionsExecutionIdGetValidateBeforeCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdGet(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdGet(Async)");
        }

        return realmAuthenticationExecutionsExecutionIdGetCall(realm, executionId, _callback);

    }

    /**
     * Get Single Execution
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationExecutionsExecutionIdGet(String realm, String executionId) throws ApiException {
        realmAuthenticationExecutionsExecutionIdGetWithHttpInfo(realm, executionId);
    }

    /**
     * Get Single Execution
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationExecutionsExecutionIdGetWithHttpInfo(String realm, String executionId) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdGetValidateBeforeCall(realm, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Single Execution (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdGetAsync(String realm, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdGetValidateBeforeCall(realm, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationExecutionsExecutionIdLowerPriorityPost
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdLowerPriorityPostCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/executions/{executionId}/lower-priority"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationExecutionsExecutionIdLowerPriorityPostValidateBeforeCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdLowerPriorityPost(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdLowerPriorityPost(Async)");
        }

        return realmAuthenticationExecutionsExecutionIdLowerPriorityPostCall(realm, executionId, _callback);

    }

    /**
     * Lower execution’s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationExecutionsExecutionIdLowerPriorityPost(String realm, String executionId) throws ApiException {
        realmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfo(realm, executionId);
    }

    /**
     * Lower execution’s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfo(String realm, String executionId) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdLowerPriorityPostValidateBeforeCall(realm, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lower execution’s priority (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdLowerPriorityPostAsync(String realm, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdLowerPriorityPostValidateBeforeCall(realm, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationExecutionsExecutionIdRaisePriorityPost
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdRaisePriorityPostCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/executions/{executionId}/raise-priority"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationExecutionsExecutionIdRaisePriorityPostValidateBeforeCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdRaisePriorityPost(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdRaisePriorityPost(Async)");
        }

        return realmAuthenticationExecutionsExecutionIdRaisePriorityPostCall(realm, executionId, _callback);

    }

    /**
     * Raise execution’s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationExecutionsExecutionIdRaisePriorityPost(String realm, String executionId) throws ApiException {
        realmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfo(realm, executionId);
    }

    /**
     * Raise execution’s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfo(String realm, String executionId) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdRaisePriorityPostValidateBeforeCall(realm, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Raise execution’s priority (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsExecutionIdRaisePriorityPostAsync(String realm, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationExecutionsExecutionIdRaisePriorityPostValidateBeforeCall(realm, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationExecutionsPost
     * @param realm realm name (not id!) (required)
     * @param authenticationExecutionRepresentation JSON model describing authentication execution (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsPostCall(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationExecutionRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/executions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationExecutionsPostValidateBeforeCall(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsPost(Async)");
        }

        // verify the required parameter 'authenticationExecutionRepresentation' is set
        if (authenticationExecutionRepresentation == null) {
            throw new ApiException("Missing the required parameter 'authenticationExecutionRepresentation' when calling realmAuthenticationExecutionsPost(Async)");
        }

        return realmAuthenticationExecutionsPostCall(realm, authenticationExecutionRepresentation, _callback);

    }

    /**
     * Add new authentication execution
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationExecutionRepresentation JSON model describing authentication execution (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationExecutionsPost(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation) throws ApiException {
        realmAuthenticationExecutionsPostWithHttpInfo(realm, authenticationExecutionRepresentation);
    }

    /**
     * Add new authentication execution
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationExecutionRepresentation JSON model describing authentication execution (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationExecutionsPostWithHttpInfo(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationExecutionsPostValidateBeforeCall(realm, authenticationExecutionRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new authentication execution (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationExecutionRepresentation JSON model describing authentication execution (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationExecutionsPostAsync(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationExecutionsPostValidateBeforeCall(realm, authenticationExecutionRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsFlowAliasCopyPost
     * @param realm realm name (not id!) (required)
     * @param flowAlias Name of the existing authentication flow (required)
     * @param requestBody JSON containing &#39;newName&#39; attribute (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasCopyPostCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows/{flowAlias}/copy"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsFlowAliasCopyPostValidateBeforeCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasCopyPost(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasCopyPost(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling realmAuthenticationFlowsFlowAliasCopyPost(Async)");
        }

        return realmAuthenticationFlowsFlowAliasCopyPostCall(realm, flowAlias, requestBody, _callback);

    }

    /**
     * Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Name of the existing authentication flow (required)
     * @param requestBody JSON containing &#39;newName&#39; attribute (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationFlowsFlowAliasCopyPost(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        realmAuthenticationFlowsFlowAliasCopyPostWithHttpInfo(realm, flowAlias, requestBody);
    }

    /**
     * Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Name of the existing authentication flow (required)
     * @param requestBody JSON containing &#39;newName&#39; attribute (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationFlowsFlowAliasCopyPostWithHttpInfo(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasCopyPostValidateBeforeCall(realm, flowAlias, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Name of the existing authentication flow (required)
     * @param requestBody JSON containing &#39;newName&#39; attribute (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasCopyPostAsync(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasCopyPostValidateBeforeCall(realm, flowAlias, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsFlowAliasExecutionsExecutionPost
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent flow (required)
     * @param requestBody New execution JSON data containing &#39;provider&#39; attribute (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsExecutionPostCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows/{flowAlias}/executions/execution"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsExecutionPostValidateBeforeCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(Async)");
        }

        return realmAuthenticationFlowsFlowAliasExecutionsExecutionPostCall(realm, flowAlias, requestBody, _callback);

    }

    /**
     * Add new authentication execution to a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent flow (required)
     * @param requestBody New execution JSON data containing &#39;provider&#39; attribute (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        realmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfo(realm, flowAlias, requestBody);
    }

    /**
     * Add new authentication execution to a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent flow (required)
     * @param requestBody New execution JSON data containing &#39;provider&#39; attribute (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfo(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasExecutionsExecutionPostValidateBeforeCall(realm, flowAlias, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new authentication execution to a flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent flow (required)
     * @param requestBody New execution JSON data containing &#39;provider&#39; attribute (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsExecutionPostAsync(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasExecutionsExecutionPostValidateBeforeCall(realm, flowAlias, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsFlowAliasExecutionsFlowPost
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent authentication flow (required)
     * @param requestBody New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsFlowPostCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows/{flowAlias}/executions/flow"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsFlowPostValidateBeforeCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost(Async)");
        }

        return realmAuthenticationFlowsFlowAliasExecutionsFlowPostCall(realm, flowAlias, requestBody, _callback);

    }

    /**
     * Add new flow with new execution to existing flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent authentication flow (required)
     * @param requestBody New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationFlowsFlowAliasExecutionsFlowPost(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        realmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfo(realm, flowAlias, requestBody);
    }

    /**
     * Add new flow with new execution to existing flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent authentication flow (required)
     * @param requestBody New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfo(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasExecutionsFlowPostValidateBeforeCall(realm, flowAlias, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new flow with new execution to existing flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent authentication flow (required)
     * @param requestBody New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsFlowPostAsync(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasExecutionsFlowPostValidateBeforeCall(realm, flowAlias, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsFlowAliasExecutionsGet
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsGetCall(String realm, String flowAlias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows/{flowAlias}/executions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsGetValidateBeforeCall(String realm, String flowAlias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasExecutionsGet(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasExecutionsGet(Async)");
        }

        return realmAuthenticationFlowsFlowAliasExecutionsGetCall(realm, flowAlias, _callback);

    }

    /**
     * Get authentication executions for a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationFlowsFlowAliasExecutionsGet(String realm, String flowAlias) throws ApiException {
        realmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfo(realm, flowAlias);
    }

    /**
     * Get authentication executions for a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfo(String realm, String flowAlias) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasExecutionsGetValidateBeforeCall(realm, flowAlias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get authentication executions for a flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsGetAsync(String realm, String flowAlias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasExecutionsGetValidateBeforeCall(realm, flowAlias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsFlowAliasExecutionsPut
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param authenticationExecutionInfoRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsPutCall(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationExecutionInfoRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows/{flowAlias}/executions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsPutValidateBeforeCall(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasExecutionsPut(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasExecutionsPut(Async)");
        }

        // verify the required parameter 'authenticationExecutionInfoRepresentation' is set
        if (authenticationExecutionInfoRepresentation == null) {
            throw new ApiException("Missing the required parameter 'authenticationExecutionInfoRepresentation' when calling realmAuthenticationFlowsFlowAliasExecutionsPut(Async)");
        }

        return realmAuthenticationFlowsFlowAliasExecutionsPutCall(realm, flowAlias, authenticationExecutionInfoRepresentation, _callback);

    }

    /**
     * Update authentication executions of a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param authenticationExecutionInfoRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationFlowsFlowAliasExecutionsPut(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation) throws ApiException {
        realmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfo(realm, flowAlias, authenticationExecutionInfoRepresentation);
    }

    /**
     * Update authentication executions of a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param authenticationExecutionInfoRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfo(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasExecutionsPutValidateBeforeCall(realm, flowAlias, authenticationExecutionInfoRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update authentication executions of a flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param authenticationExecutionInfoRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsFlowAliasExecutionsPutAsync(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsFlowAliasExecutionsPutValidateBeforeCall(realm, flowAlias, authenticationExecutionInfoRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsGet(Async)");
        }

        return realmAuthenticationFlowsGetCall(realm, _callback);

    }

    /**
     * Get authentication flows   Returns a list of authentication flows.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;AuthenticationFlowRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<AuthenticationFlowRepresentation> realmAuthenticationFlowsGet(String realm) throws ApiException {
        ApiResponse<List<AuthenticationFlowRepresentation>> localVarResp = realmAuthenticationFlowsGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get authentication flows   Returns a list of authentication flows.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;AuthenticationFlowRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AuthenticationFlowRepresentation>> realmAuthenticationFlowsGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<AuthenticationFlowRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authentication flows   Returns a list of authentication flows. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsGetAsync(String realm, final ApiCallback<List<AuthenticationFlowRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<AuthenticationFlowRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsIdDelete
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsIdDeleteCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsIdDeleteValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmAuthenticationFlowsIdDelete(Async)");
        }

        return realmAuthenticationFlowsIdDeleteCall(realm, id, _callback);

    }

    /**
     * Delete an authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationFlowsIdDelete(String realm, String id) throws ApiException {
        realmAuthenticationFlowsIdDeleteWithHttpInfo(realm, id);
    }

    /**
     * Delete an authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationFlowsIdDeleteWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsIdDeleteValidateBeforeCall(realm, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an authentication flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsIdDeleteAsync(String realm, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsIdDeleteValidateBeforeCall(realm, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsIdGet
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsIdGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsIdGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmAuthenticationFlowsIdGet(Async)");
        }

        return realmAuthenticationFlowsIdGetCall(realm, id, _callback);

    }

    /**
     * Get authentication flow for id
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @return AuthenticationFlowRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticationFlowRepresentation realmAuthenticationFlowsIdGet(String realm, String id) throws ApiException {
        ApiResponse<AuthenticationFlowRepresentation> localVarResp = realmAuthenticationFlowsIdGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get authentication flow for id
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @return ApiResponse&lt;AuthenticationFlowRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticationFlowRepresentation> realmAuthenticationFlowsIdGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsIdGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<AuthenticationFlowRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authentication flow for id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsIdGetAsync(String realm, String id, final ApiCallback<AuthenticationFlowRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsIdGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationFlowRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsIdPut
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param authenticationFlowRepresentation Authentication flow representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsIdPutCall(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationFlowRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsIdPutValidateBeforeCall(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmAuthenticationFlowsIdPut(Async)");
        }

        // verify the required parameter 'authenticationFlowRepresentation' is set
        if (authenticationFlowRepresentation == null) {
            throw new ApiException("Missing the required parameter 'authenticationFlowRepresentation' when calling realmAuthenticationFlowsIdPut(Async)");
        }

        return realmAuthenticationFlowsIdPutCall(realm, id, authenticationFlowRepresentation, _callback);

    }

    /**
     * Update an authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param authenticationFlowRepresentation Authentication flow representation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationFlowsIdPut(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation) throws ApiException {
        realmAuthenticationFlowsIdPutWithHttpInfo(realm, id, authenticationFlowRepresentation);
    }

    /**
     * Update an authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param authenticationFlowRepresentation Authentication flow representation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationFlowsIdPutWithHttpInfo(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsIdPutValidateBeforeCall(realm, id, authenticationFlowRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an authentication flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param authenticationFlowRepresentation Authentication flow representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsIdPutAsync(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsIdPutValidateBeforeCall(realm, id, authenticationFlowRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFlowsPost
     * @param realm realm name (not id!) (required)
     * @param authenticationFlowRepresentation Authentication flow representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsPostCall(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationFlowRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/flows"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFlowsPostValidateBeforeCall(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFlowsPost(Async)");
        }

        // verify the required parameter 'authenticationFlowRepresentation' is set
        if (authenticationFlowRepresentation == null) {
            throw new ApiException("Missing the required parameter 'authenticationFlowRepresentation' when calling realmAuthenticationFlowsPost(Async)");
        }

        return realmAuthenticationFlowsPostCall(realm, authenticationFlowRepresentation, _callback);

    }

    /**
     * Create a new authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationFlowRepresentation Authentication flow representation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationFlowsPost(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation) throws ApiException {
        realmAuthenticationFlowsPostWithHttpInfo(realm, authenticationFlowRepresentation);
    }

    /**
     * Create a new authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationFlowRepresentation Authentication flow representation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationFlowsPostWithHttpInfo(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFlowsPostValidateBeforeCall(realm, authenticationFlowRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new authentication flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationFlowRepresentation Authentication flow representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFlowsPostAsync(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFlowsPostValidateBeforeCall(realm, authenticationFlowRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFormActionProvidersGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFormActionProvidersGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/form-action-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFormActionProvidersGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFormActionProvidersGet(Async)");
        }

        return realmAuthenticationFormActionProvidersGetCall(realm, _callback);

    }

    /**
     * Get form action providers   Returns a list of form action providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> realmAuthenticationFormActionProvidersGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = realmAuthenticationFormActionProvidersGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get form action providers   Returns a list of form action providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> realmAuthenticationFormActionProvidersGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFormActionProvidersGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get form action providers   Returns a list of form action providers. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFormActionProvidersGetAsync(String realm, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFormActionProvidersGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationFormProvidersGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFormProvidersGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/form-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationFormProvidersGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationFormProvidersGet(Async)");
        }

        return realmAuthenticationFormProvidersGetCall(realm, _callback);

    }

    /**
     * Get form providers   Returns a list of form providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> realmAuthenticationFormProvidersGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = realmAuthenticationFormProvidersGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get form providers   Returns a list of form providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> realmAuthenticationFormProvidersGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationFormProvidersGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get form providers   Returns a list of form providers. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationFormProvidersGetAsync(String realm, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationFormProvidersGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationPerClientConfigDescriptionGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationPerClientConfigDescriptionGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/per-client-config-description"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationPerClientConfigDescriptionGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationPerClientConfigDescriptionGet(Async)");
        }

        return realmAuthenticationPerClientConfigDescriptionGetCall(realm, _callback);

    }

    /**
     * Get configuration descriptions for all clients
     * 
     * @param realm realm name (not id!) (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> realmAuthenticationPerClientConfigDescriptionGet(String realm) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = realmAuthenticationPerClientConfigDescriptionGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get configuration descriptions for all clients
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> realmAuthenticationPerClientConfigDescriptionGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationPerClientConfigDescriptionGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get configuration descriptions for all clients (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationPerClientConfigDescriptionGetAsync(String realm, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationPerClientConfigDescriptionGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationRegisterRequiredActionPost
     * @param realm realm name (not id!) (required)
     * @param requestBody JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRegisterRequiredActionPostCall(String realm, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/register-required-action"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationRegisterRequiredActionPostValidateBeforeCall(String realm, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationRegisterRequiredActionPost(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling realmAuthenticationRegisterRequiredActionPost(Async)");
        }

        return realmAuthenticationRegisterRequiredActionPostCall(realm, requestBody, _callback);

    }

    /**
     * Register a new required actions
     * 
     * @param realm realm name (not id!) (required)
     * @param requestBody JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationRegisterRequiredActionPost(String realm, Map<String, Object> requestBody) throws ApiException {
        realmAuthenticationRegisterRequiredActionPostWithHttpInfo(realm, requestBody);
    }

    /**
     * Register a new required actions
     * 
     * @param realm realm name (not id!) (required)
     * @param requestBody JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationRegisterRequiredActionPostWithHttpInfo(String realm, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationRegisterRequiredActionPostValidateBeforeCall(realm, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a new required actions (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param requestBody JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRegisterRequiredActionPostAsync(String realm, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationRegisterRequiredActionPostValidateBeforeCall(realm, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationRequiredActionsAliasDelete
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasDeleteCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/required-actions/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationRequiredActionsAliasDeleteValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasDelete(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasDelete(Async)");
        }

        return realmAuthenticationRequiredActionsAliasDeleteCall(realm, alias, _callback);

    }

    /**
     * Delete required action
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationRequiredActionsAliasDelete(String realm, String alias) throws ApiException {
        realmAuthenticationRequiredActionsAliasDeleteWithHttpInfo(realm, alias);
    }

    /**
     * Delete required action
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationRequiredActionsAliasDeleteWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasDeleteValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete required action (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasDeleteAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasDeleteValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationRequiredActionsAliasGet
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/required-actions/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationRequiredActionsAliasGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasGet(Async)");
        }

        return realmAuthenticationRequiredActionsAliasGetCall(realm, alias, _callback);

    }

    /**
     * Get required action for alias
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return RequiredActionProviderRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public RequiredActionProviderRepresentation realmAuthenticationRequiredActionsAliasGet(String realm, String alias) throws ApiException {
        ApiResponse<RequiredActionProviderRepresentation> localVarResp = realmAuthenticationRequiredActionsAliasGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Get required action for alias
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;RequiredActionProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequiredActionProviderRepresentation> realmAuthenticationRequiredActionsAliasGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<RequiredActionProviderRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get required action for alias (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasGetAsync(String realm, String alias, final ApiCallback<RequiredActionProviderRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<RequiredActionProviderRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationRequiredActionsAliasLowerPriorityPost
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasLowerPriorityPostCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/required-actions/{alias}/lower-priority"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationRequiredActionsAliasLowerPriorityPostValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasLowerPriorityPost(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasLowerPriorityPost(Async)");
        }

        return realmAuthenticationRequiredActionsAliasLowerPriorityPostCall(realm, alias, _callback);

    }

    /**
     * Lower required action’s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationRequiredActionsAliasLowerPriorityPost(String realm, String alias) throws ApiException {
        realmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfo(realm, alias);
    }

    /**
     * Lower required action’s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasLowerPriorityPostValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lower required action’s priority (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasLowerPriorityPostAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasLowerPriorityPostValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationRequiredActionsAliasPut
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionProviderRepresentation JSON describing new state of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasPutCall(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requiredActionProviderRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/required-actions/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationRequiredActionsAliasPutValidateBeforeCall(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasPut(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasPut(Async)");
        }

        // verify the required parameter 'requiredActionProviderRepresentation' is set
        if (requiredActionProviderRepresentation == null) {
            throw new ApiException("Missing the required parameter 'requiredActionProviderRepresentation' when calling realmAuthenticationRequiredActionsAliasPut(Async)");
        }

        return realmAuthenticationRequiredActionsAliasPutCall(realm, alias, requiredActionProviderRepresentation, _callback);

    }

    /**
     * Update required action
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionProviderRepresentation JSON describing new state of required action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationRequiredActionsAliasPut(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation) throws ApiException {
        realmAuthenticationRequiredActionsAliasPutWithHttpInfo(realm, alias, requiredActionProviderRepresentation);
    }

    /**
     * Update required action
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionProviderRepresentation JSON describing new state of required action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationRequiredActionsAliasPutWithHttpInfo(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasPutValidateBeforeCall(realm, alias, requiredActionProviderRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update required action (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionProviderRepresentation JSON describing new state of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasPutAsync(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasPutValidateBeforeCall(realm, alias, requiredActionProviderRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationRequiredActionsAliasRaisePriorityPost
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasRaisePriorityPostCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/required-actions/{alias}/raise-priority"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationRequiredActionsAliasRaisePriorityPostValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasRaisePriorityPost(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasRaisePriorityPost(Async)");
        }

        return realmAuthenticationRequiredActionsAliasRaisePriorityPostCall(realm, alias, _callback);

    }

    /**
     * Raise required action’s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmAuthenticationRequiredActionsAliasRaisePriorityPost(String realm, String alias) throws ApiException {
        realmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfo(realm, alias);
    }

    /**
     * Raise required action’s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasRaisePriorityPostValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Raise required action’s priority (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsAliasRaisePriorityPostAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsAliasRaisePriorityPostValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationRequiredActionsGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/required-actions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationRequiredActionsGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsGet(Async)");
        }

        return realmAuthenticationRequiredActionsGetCall(realm, _callback);

    }

    /**
     * Get required actions   Returns a list of required actions.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;RequiredActionProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RequiredActionProviderRepresentation> realmAuthenticationRequiredActionsGet(String realm) throws ApiException {
        ApiResponse<List<RequiredActionProviderRepresentation>> localVarResp = realmAuthenticationRequiredActionsGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get required actions   Returns a list of required actions.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RequiredActionProviderRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RequiredActionProviderRepresentation>> realmAuthenticationRequiredActionsGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<RequiredActionProviderRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get required actions   Returns a list of required actions. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationRequiredActionsGetAsync(String realm, final ApiCallback<List<RequiredActionProviderRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationRequiredActionsGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<RequiredActionProviderRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmAuthenticationUnregisteredRequiredActionsGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationUnregisteredRequiredActionsGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/authentication/unregistered-required-actions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmAuthenticationUnregisteredRequiredActionsGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmAuthenticationUnregisteredRequiredActionsGet(Async)");
        }

        return realmAuthenticationUnregisteredRequiredActionsGetCall(realm, _callback);

    }

    /**
     * Get unregistered required actions   Returns a list of unregistered required actions.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> realmAuthenticationUnregisteredRequiredActionsGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = realmAuthenticationUnregisteredRequiredActionsGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get unregistered required actions   Returns a list of unregistered required actions.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> realmAuthenticationUnregisteredRequiredActionsGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmAuthenticationUnregisteredRequiredActionsGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get unregistered required actions   Returns a list of unregistered required actions. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmAuthenticationUnregisteredRequiredActionsGetAsync(String realm, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmAuthenticationUnregisteredRequiredActionsGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
