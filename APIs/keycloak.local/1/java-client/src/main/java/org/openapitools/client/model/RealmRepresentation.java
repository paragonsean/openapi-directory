/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuthenticationFlowRepresentation;
import org.openapitools.client.model.AuthenticatorConfigRepresentation;
import org.openapitools.client.model.ClientRepresentation;
import org.openapitools.client.model.ClientScopeRepresentation;
import org.openapitools.client.model.GroupRepresentation;
import org.openapitools.client.model.IdentityProviderMapperRepresentation;
import org.openapitools.client.model.IdentityProviderRepresentation;
import org.openapitools.client.model.MultivaluedHashMap;
import org.openapitools.client.model.ProtocolMapperRepresentation;
import org.openapitools.client.model.RequiredActionProviderRepresentation;
import org.openapitools.client.model.RolesRepresentation;
import org.openapitools.client.model.ScopeMappingRepresentation;
import org.openapitools.client.model.UserFederationMapperRepresentation;
import org.openapitools.client.model.UserFederationProviderRepresentation;
import org.openapitools.client.model.UserRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RealmRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RealmRepresentation {
  public static final String SERIALIZED_NAME_ACCESS_CODE_LIFESPAN = "accessCodeLifespan";
  @SerializedName(SERIALIZED_NAME_ACCESS_CODE_LIFESPAN)
  private Integer accessCodeLifespan;

  public static final String SERIALIZED_NAME_ACCESS_CODE_LIFESPAN_LOGIN = "accessCodeLifespanLogin";
  @SerializedName(SERIALIZED_NAME_ACCESS_CODE_LIFESPAN_LOGIN)
  private Integer accessCodeLifespanLogin;

  public static final String SERIALIZED_NAME_ACCESS_CODE_LIFESPAN_USER_ACTION = "accessCodeLifespanUserAction";
  @SerializedName(SERIALIZED_NAME_ACCESS_CODE_LIFESPAN_USER_ACTION)
  private Integer accessCodeLifespanUserAction;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_LIFESPAN = "accessTokenLifespan";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_LIFESPAN)
  private Integer accessTokenLifespan;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_LIFESPAN_FOR_IMPLICIT_FLOW = "accessTokenLifespanForImplicitFlow";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_LIFESPAN_FOR_IMPLICIT_FLOW)
  private Integer accessTokenLifespanForImplicitFlow;

  public static final String SERIALIZED_NAME_ACCOUNT_THEME = "accountTheme";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_THEME)
  private String accountTheme;

  public static final String SERIALIZED_NAME_ACTION_TOKEN_GENERATED_BY_ADMIN_LIFESPAN = "actionTokenGeneratedByAdminLifespan";
  @SerializedName(SERIALIZED_NAME_ACTION_TOKEN_GENERATED_BY_ADMIN_LIFESPAN)
  private Integer actionTokenGeneratedByAdminLifespan;

  public static final String SERIALIZED_NAME_ACTION_TOKEN_GENERATED_BY_USER_LIFESPAN = "actionTokenGeneratedByUserLifespan";
  @SerializedName(SERIALIZED_NAME_ACTION_TOKEN_GENERATED_BY_USER_LIFESPAN)
  private Integer actionTokenGeneratedByUserLifespan;

  public static final String SERIALIZED_NAME_ADMIN_EVENTS_DETAILS_ENABLED = "adminEventsDetailsEnabled";
  @SerializedName(SERIALIZED_NAME_ADMIN_EVENTS_DETAILS_ENABLED)
  private Boolean adminEventsDetailsEnabled;

  public static final String SERIALIZED_NAME_ADMIN_EVENTS_ENABLED = "adminEventsEnabled";
  @SerializedName(SERIALIZED_NAME_ADMIN_EVENTS_ENABLED)
  private Boolean adminEventsEnabled;

  public static final String SERIALIZED_NAME_ADMIN_THEME = "adminTheme";
  @SerializedName(SERIALIZED_NAME_ADMIN_THEME)
  private String adminTheme;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOWS = "authenticationFlows";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOWS)
  private List<AuthenticationFlowRepresentation> authenticationFlows = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHENTICATOR_CONFIG = "authenticatorConfig";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATOR_CONFIG)
  private List<AuthenticatorConfigRepresentation> authenticatorConfig = new ArrayList<>();

  public static final String SERIALIZED_NAME_BROWSER_FLOW = "browserFlow";
  @SerializedName(SERIALIZED_NAME_BROWSER_FLOW)
  private String browserFlow;

  public static final String SERIALIZED_NAME_BROWSER_SECURITY_HEADERS = "browserSecurityHeaders";
  @SerializedName(SERIALIZED_NAME_BROWSER_SECURITY_HEADERS)
  private Map<String, Object> browserSecurityHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_BRUTE_FORCE_PROTECTED = "bruteForceProtected";
  @SerializedName(SERIALIZED_NAME_BRUTE_FORCE_PROTECTED)
  private Boolean bruteForceProtected;

  public static final String SERIALIZED_NAME_CLIENT_AUTHENTICATION_FLOW = "clientAuthenticationFlow";
  @SerializedName(SERIALIZED_NAME_CLIENT_AUTHENTICATION_FLOW)
  private String clientAuthenticationFlow;

  public static final String SERIALIZED_NAME_CLIENT_SCOPE_MAPPINGS = "clientScopeMappings";
  @SerializedName(SERIALIZED_NAME_CLIENT_SCOPE_MAPPINGS)
  private Map<String, Object> clientScopeMappings = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_SCOPES = "clientScopes";
  @SerializedName(SERIALIZED_NAME_CLIENT_SCOPES)
  private List<ClientScopeRepresentation> clientScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_SESSION_IDLE_TIMEOUT = "clientSessionIdleTimeout";
  @SerializedName(SERIALIZED_NAME_CLIENT_SESSION_IDLE_TIMEOUT)
  private Integer clientSessionIdleTimeout;

  public static final String SERIALIZED_NAME_CLIENT_SESSION_MAX_LIFESPAN = "clientSessionMaxLifespan";
  @SerializedName(SERIALIZED_NAME_CLIENT_SESSION_MAX_LIFESPAN)
  private Integer clientSessionMaxLifespan;

  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  private List<ClientRepresentation> clients = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private MultivaluedHashMap components;

  public static final String SERIALIZED_NAME_DEFAULT_DEFAULT_CLIENT_SCOPES = "defaultDefaultClientScopes";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DEFAULT_CLIENT_SCOPES)
  private List<String> defaultDefaultClientScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_GROUPS = "defaultGroups";
  @SerializedName(SERIALIZED_NAME_DEFAULT_GROUPS)
  private List<String> defaultGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_LOCALE = "defaultLocale";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOCALE)
  private String defaultLocale;

  public static final String SERIALIZED_NAME_DEFAULT_OPTIONAL_CLIENT_SCOPES = "defaultOptionalClientScopes";
  @SerializedName(SERIALIZED_NAME_DEFAULT_OPTIONAL_CLIENT_SCOPES)
  private List<String> defaultOptionalClientScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_ROLES = "defaultRoles";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ROLES)
  private List<String> defaultRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_SIGNATURE_ALGORITHM = "defaultSignatureAlgorithm";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SIGNATURE_ALGORITHM)
  private String defaultSignatureAlgorithm;

  public static final String SERIALIZED_NAME_DIRECT_GRANT_FLOW = "directGrantFlow";
  @SerializedName(SERIALIZED_NAME_DIRECT_GRANT_FLOW)
  private String directGrantFlow;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME_HTML = "displayNameHtml";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME_HTML)
  private String displayNameHtml;

  public static final String SERIALIZED_NAME_DOCKER_AUTHENTICATION_FLOW = "dockerAuthenticationFlow";
  @SerializedName(SERIALIZED_NAME_DOCKER_AUTHENTICATION_FLOW)
  private String dockerAuthenticationFlow;

  public static final String SERIALIZED_NAME_DUPLICATE_EMAILS_ALLOWED = "duplicateEmailsAllowed";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_EMAILS_ALLOWED)
  private Boolean duplicateEmailsAllowed;

  public static final String SERIALIZED_NAME_EDIT_USERNAME_ALLOWED = "editUsernameAllowed";
  @SerializedName(SERIALIZED_NAME_EDIT_USERNAME_ALLOWED)
  private Boolean editUsernameAllowed;

  public static final String SERIALIZED_NAME_EMAIL_THEME = "emailTheme";
  @SerializedName(SERIALIZED_NAME_EMAIL_THEME)
  private String emailTheme;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ENABLED_EVENT_TYPES = "enabledEventTypes";
  @SerializedName(SERIALIZED_NAME_ENABLED_EVENT_TYPES)
  private List<String> enabledEventTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENTS_ENABLED = "eventsEnabled";
  @SerializedName(SERIALIZED_NAME_EVENTS_ENABLED)
  private Boolean eventsEnabled;

  public static final String SERIALIZED_NAME_EVENTS_EXPIRATION = "eventsExpiration";
  @SerializedName(SERIALIZED_NAME_EVENTS_EXPIRATION)
  private Long eventsExpiration;

  public static final String SERIALIZED_NAME_EVENTS_LISTENERS = "eventsListeners";
  @SerializedName(SERIALIZED_NAME_EVENTS_LISTENERS)
  private List<String> eventsListeners = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILURE_FACTOR = "failureFactor";
  @SerializedName(SERIALIZED_NAME_FAILURE_FACTOR)
  private Integer failureFactor;

  public static final String SERIALIZED_NAME_FEDERATED_USERS = "federatedUsers";
  @SerializedName(SERIALIZED_NAME_FEDERATED_USERS)
  private List<UserRepresentation> federatedUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<GroupRepresentation> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER_MAPPERS = "identityProviderMappers";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER_MAPPERS)
  private List<IdentityProviderMapperRepresentation> identityProviderMappers = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDERS = "identityProviders";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDERS)
  private List<IdentityProviderRepresentation> identityProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERNATIONALIZATION_ENABLED = "internationalizationEnabled";
  @SerializedName(SERIALIZED_NAME_INTERNATIONALIZATION_ENABLED)
  private Boolean internationalizationEnabled;

  public static final String SERIALIZED_NAME_KEYCLOAK_VERSION = "keycloakVersion";
  @SerializedName(SERIALIZED_NAME_KEYCLOAK_VERSION)
  private String keycloakVersion;

  public static final String SERIALIZED_NAME_LOGIN_THEME = "loginTheme";
  @SerializedName(SERIALIZED_NAME_LOGIN_THEME)
  private String loginTheme;

  public static final String SERIALIZED_NAME_LOGIN_WITH_EMAIL_ALLOWED = "loginWithEmailAllowed";
  @SerializedName(SERIALIZED_NAME_LOGIN_WITH_EMAIL_ALLOWED)
  private Boolean loginWithEmailAllowed;

  public static final String SERIALIZED_NAME_MAX_DELTA_TIME_SECONDS = "maxDeltaTimeSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_DELTA_TIME_SECONDS)
  private Integer maxDeltaTimeSeconds;

  public static final String SERIALIZED_NAME_MAX_FAILURE_WAIT_SECONDS = "maxFailureWaitSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_FAILURE_WAIT_SECONDS)
  private Integer maxFailureWaitSeconds;

  public static final String SERIALIZED_NAME_MINIMUM_QUICK_LOGIN_WAIT_SECONDS = "minimumQuickLoginWaitSeconds";
  @SerializedName(SERIALIZED_NAME_MINIMUM_QUICK_LOGIN_WAIT_SECONDS)
  private Integer minimumQuickLoginWaitSeconds;

  public static final String SERIALIZED_NAME_NOT_BEFORE = "notBefore";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE)
  private Integer notBefore;

  public static final String SERIALIZED_NAME_OFFLINE_SESSION_IDLE_TIMEOUT = "offlineSessionIdleTimeout";
  @SerializedName(SERIALIZED_NAME_OFFLINE_SESSION_IDLE_TIMEOUT)
  private Integer offlineSessionIdleTimeout;

  public static final String SERIALIZED_NAME_OFFLINE_SESSION_MAX_LIFESPAN = "offlineSessionMaxLifespan";
  @SerializedName(SERIALIZED_NAME_OFFLINE_SESSION_MAX_LIFESPAN)
  private Integer offlineSessionMaxLifespan;

  public static final String SERIALIZED_NAME_OFFLINE_SESSION_MAX_LIFESPAN_ENABLED = "offlineSessionMaxLifespanEnabled";
  @SerializedName(SERIALIZED_NAME_OFFLINE_SESSION_MAX_LIFESPAN_ENABLED)
  private Boolean offlineSessionMaxLifespanEnabled;

  public static final String SERIALIZED_NAME_OTP_POLICY_ALGORITHM = "otpPolicyAlgorithm";
  @SerializedName(SERIALIZED_NAME_OTP_POLICY_ALGORITHM)
  private String otpPolicyAlgorithm;

  public static final String SERIALIZED_NAME_OTP_POLICY_DIGITS = "otpPolicyDigits";
  @SerializedName(SERIALIZED_NAME_OTP_POLICY_DIGITS)
  private Integer otpPolicyDigits;

  public static final String SERIALIZED_NAME_OTP_POLICY_INITIAL_COUNTER = "otpPolicyInitialCounter";
  @SerializedName(SERIALIZED_NAME_OTP_POLICY_INITIAL_COUNTER)
  private Integer otpPolicyInitialCounter;

  public static final String SERIALIZED_NAME_OTP_POLICY_LOOK_AHEAD_WINDOW = "otpPolicyLookAheadWindow";
  @SerializedName(SERIALIZED_NAME_OTP_POLICY_LOOK_AHEAD_WINDOW)
  private Integer otpPolicyLookAheadWindow;

  public static final String SERIALIZED_NAME_OTP_POLICY_PERIOD = "otpPolicyPeriod";
  @SerializedName(SERIALIZED_NAME_OTP_POLICY_PERIOD)
  private Integer otpPolicyPeriod;

  public static final String SERIALIZED_NAME_OTP_POLICY_TYPE = "otpPolicyType";
  @SerializedName(SERIALIZED_NAME_OTP_POLICY_TYPE)
  private String otpPolicyType;

  public static final String SERIALIZED_NAME_OTP_SUPPORTED_APPLICATIONS = "otpSupportedApplications";
  @SerializedName(SERIALIZED_NAME_OTP_SUPPORTED_APPLICATIONS)
  private List<String> otpSupportedApplications = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD_POLICY = "passwordPolicy";
  @SerializedName(SERIALIZED_NAME_PASSWORD_POLICY)
  private String passwordPolicy;

  public static final String SERIALIZED_NAME_PERMANENT_LOCKOUT = "permanentLockout";
  @SerializedName(SERIALIZED_NAME_PERMANENT_LOCKOUT)
  private Boolean permanentLockout;

  public static final String SERIALIZED_NAME_PROTOCOL_MAPPERS = "protocolMappers";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_MAPPERS)
  private List<ProtocolMapperRepresentation> protocolMappers = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUICK_LOGIN_CHECK_MILLI_SECONDS = "quickLoginCheckMilliSeconds";
  @SerializedName(SERIALIZED_NAME_QUICK_LOGIN_CHECK_MILLI_SECONDS)
  private Long quickLoginCheckMilliSeconds;

  public static final String SERIALIZED_NAME_REALM = "realm";
  @SerializedName(SERIALIZED_NAME_REALM)
  private String realm;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_MAX_REUSE = "refreshTokenMaxReuse";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_MAX_REUSE)
  private Integer refreshTokenMaxReuse;

  public static final String SERIALIZED_NAME_REGISTRATION_ALLOWED = "registrationAllowed";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ALLOWED)
  private Boolean registrationAllowed;

  public static final String SERIALIZED_NAME_REGISTRATION_EMAIL_AS_USERNAME = "registrationEmailAsUsername";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_EMAIL_AS_USERNAME)
  private Boolean registrationEmailAsUsername;

  public static final String SERIALIZED_NAME_REGISTRATION_FLOW = "registrationFlow";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_FLOW)
  private String registrationFlow;

  public static final String SERIALIZED_NAME_REMEMBER_ME = "rememberMe";
  @SerializedName(SERIALIZED_NAME_REMEMBER_ME)
  private Boolean rememberMe;

  public static final String SERIALIZED_NAME_REQUIRED_ACTIONS = "requiredActions";
  @SerializedName(SERIALIZED_NAME_REQUIRED_ACTIONS)
  private List<RequiredActionProviderRepresentation> requiredActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESET_CREDENTIALS_FLOW = "resetCredentialsFlow";
  @SerializedName(SERIALIZED_NAME_RESET_CREDENTIALS_FLOW)
  private String resetCredentialsFlow;

  public static final String SERIALIZED_NAME_RESET_PASSWORD_ALLOWED = "resetPasswordAllowed";
  @SerializedName(SERIALIZED_NAME_RESET_PASSWORD_ALLOWED)
  private Boolean resetPasswordAllowed;

  public static final String SERIALIZED_NAME_REVOKE_REFRESH_TOKEN = "revokeRefreshToken";
  @SerializedName(SERIALIZED_NAME_REVOKE_REFRESH_TOKEN)
  private Boolean revokeRefreshToken;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private RolesRepresentation roles;

  public static final String SERIALIZED_NAME_SCOPE_MAPPINGS = "scopeMappings";
  @SerializedName(SERIALIZED_NAME_SCOPE_MAPPINGS)
  private List<ScopeMappingRepresentation> scopeMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_SMTP_SERVER = "smtpServer";
  @SerializedName(SERIALIZED_NAME_SMTP_SERVER)
  private Map<String, Object> smtpServer = new HashMap<>();

  public static final String SERIALIZED_NAME_SSL_REQUIRED = "sslRequired";
  @SerializedName(SERIALIZED_NAME_SSL_REQUIRED)
  private String sslRequired;

  public static final String SERIALIZED_NAME_SSO_SESSION_IDLE_TIMEOUT = "ssoSessionIdleTimeout";
  @SerializedName(SERIALIZED_NAME_SSO_SESSION_IDLE_TIMEOUT)
  private Integer ssoSessionIdleTimeout;

  public static final String SERIALIZED_NAME_SSO_SESSION_IDLE_TIMEOUT_REMEMBER_ME = "ssoSessionIdleTimeoutRememberMe";
  @SerializedName(SERIALIZED_NAME_SSO_SESSION_IDLE_TIMEOUT_REMEMBER_ME)
  private Integer ssoSessionIdleTimeoutRememberMe;

  public static final String SERIALIZED_NAME_SSO_SESSION_MAX_LIFESPAN = "ssoSessionMaxLifespan";
  @SerializedName(SERIALIZED_NAME_SSO_SESSION_MAX_LIFESPAN)
  private Integer ssoSessionMaxLifespan;

  public static final String SERIALIZED_NAME_SSO_SESSION_MAX_LIFESPAN_REMEMBER_ME = "ssoSessionMaxLifespanRememberMe";
  @SerializedName(SERIALIZED_NAME_SSO_SESSION_MAX_LIFESPAN_REMEMBER_ME)
  private Integer ssoSessionMaxLifespanRememberMe;

  public static final String SERIALIZED_NAME_SUPPORTED_LOCALES = "supportedLocales";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_LOCALES)
  private List<String> supportedLocales = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_FEDERATION_MAPPERS = "userFederationMappers";
  @SerializedName(SERIALIZED_NAME_USER_FEDERATION_MAPPERS)
  private List<UserFederationMapperRepresentation> userFederationMappers = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_FEDERATION_PROVIDERS = "userFederationProviders";
  @SerializedName(SERIALIZED_NAME_USER_FEDERATION_PROVIDERS)
  private List<UserFederationProviderRepresentation> userFederationProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_MANAGED_ACCESS_ALLOWED = "userManagedAccessAllowed";
  @SerializedName(SERIALIZED_NAME_USER_MANAGED_ACCESS_ALLOWED)
  private Boolean userManagedAccessAllowed;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<UserRepresentation> users = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFY_EMAIL = "verifyEmail";
  @SerializedName(SERIALIZED_NAME_VERIFY_EMAIL)
  private Boolean verifyEmail;

  public static final String SERIALIZED_NAME_WAIT_INCREMENT_SECONDS = "waitIncrementSeconds";
  @SerializedName(SERIALIZED_NAME_WAIT_INCREMENT_SECONDS)
  private Integer waitIncrementSeconds;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_ACCEPTABLE_AAGUIDS = "webAuthnPolicyAcceptableAaguids";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_ACCEPTABLE_AAGUIDS)
  private List<String> webAuthnPolicyAcceptableAaguids = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_ATTESTATION_CONVEYANCE_PREFERENCE = "webAuthnPolicyAttestationConveyancePreference";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_ATTESTATION_CONVEYANCE_PREFERENCE)
  private String webAuthnPolicyAttestationConveyancePreference;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_AUTHENTICATOR_ATTACHMENT = "webAuthnPolicyAuthenticatorAttachment";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_AUTHENTICATOR_ATTACHMENT)
  private String webAuthnPolicyAuthenticatorAttachment;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_AVOID_SAME_AUTHENTICATOR_REGISTER = "webAuthnPolicyAvoidSameAuthenticatorRegister";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_AVOID_SAME_AUTHENTICATOR_REGISTER)
  private Boolean webAuthnPolicyAvoidSameAuthenticatorRegister;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_CREATE_TIMEOUT = "webAuthnPolicyCreateTimeout";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_CREATE_TIMEOUT)
  private Integer webAuthnPolicyCreateTimeout;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_ACCEPTABLE_AAGUIDS = "webAuthnPolicyPasswordlessAcceptableAaguids";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_ACCEPTABLE_AAGUIDS)
  private List<String> webAuthnPolicyPasswordlessAcceptableAaguids = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_ATTESTATION_CONVEYANCE_PREFERENCE = "webAuthnPolicyPasswordlessAttestationConveyancePreference";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_ATTESTATION_CONVEYANCE_PREFERENCE)
  private String webAuthnPolicyPasswordlessAttestationConveyancePreference;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_AUTHENTICATOR_ATTACHMENT = "webAuthnPolicyPasswordlessAuthenticatorAttachment";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_AUTHENTICATOR_ATTACHMENT)
  private String webAuthnPolicyPasswordlessAuthenticatorAttachment;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_AVOID_SAME_AUTHENTICATOR_REGISTER = "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_AVOID_SAME_AUTHENTICATOR_REGISTER)
  private Boolean webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_CREATE_TIMEOUT = "webAuthnPolicyPasswordlessCreateTimeout";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_CREATE_TIMEOUT)
  private Integer webAuthnPolicyPasswordlessCreateTimeout;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_REQUIRE_RESIDENT_KEY = "webAuthnPolicyPasswordlessRequireResidentKey";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_REQUIRE_RESIDENT_KEY)
  private String webAuthnPolicyPasswordlessRequireResidentKey;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_RP_ENTITY_NAME = "webAuthnPolicyPasswordlessRpEntityName";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_RP_ENTITY_NAME)
  private String webAuthnPolicyPasswordlessRpEntityName;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_RP_ID = "webAuthnPolicyPasswordlessRpId";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_RP_ID)
  private String webAuthnPolicyPasswordlessRpId;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_SIGNATURE_ALGORITHMS = "webAuthnPolicyPasswordlessSignatureAlgorithms";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_SIGNATURE_ALGORITHMS)
  private List<String> webAuthnPolicyPasswordlessSignatureAlgorithms = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_USER_VERIFICATION_REQUIREMENT = "webAuthnPolicyPasswordlessUserVerificationRequirement";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_PASSWORDLESS_USER_VERIFICATION_REQUIREMENT)
  private String webAuthnPolicyPasswordlessUserVerificationRequirement;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_REQUIRE_RESIDENT_KEY = "webAuthnPolicyRequireResidentKey";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_REQUIRE_RESIDENT_KEY)
  private String webAuthnPolicyRequireResidentKey;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_RP_ENTITY_NAME = "webAuthnPolicyRpEntityName";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_RP_ENTITY_NAME)
  private String webAuthnPolicyRpEntityName;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_RP_ID = "webAuthnPolicyRpId";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_RP_ID)
  private String webAuthnPolicyRpId;

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_SIGNATURE_ALGORITHMS = "webAuthnPolicySignatureAlgorithms";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_SIGNATURE_ALGORITHMS)
  private List<String> webAuthnPolicySignatureAlgorithms = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB_AUTHN_POLICY_USER_VERIFICATION_REQUIREMENT = "webAuthnPolicyUserVerificationRequirement";
  @SerializedName(SERIALIZED_NAME_WEB_AUTHN_POLICY_USER_VERIFICATION_REQUIREMENT)
  private String webAuthnPolicyUserVerificationRequirement;

  public RealmRepresentation() {
  }

  public RealmRepresentation accessCodeLifespan(Integer accessCodeLifespan) {
    this.accessCodeLifespan = accessCodeLifespan;
    return this;
  }

  /**
   * Get accessCodeLifespan
   * @return accessCodeLifespan
   */
  @javax.annotation.Nullable
  public Integer getAccessCodeLifespan() {
    return accessCodeLifespan;
  }

  public void setAccessCodeLifespan(Integer accessCodeLifespan) {
    this.accessCodeLifespan = accessCodeLifespan;
  }


  public RealmRepresentation accessCodeLifespanLogin(Integer accessCodeLifespanLogin) {
    this.accessCodeLifespanLogin = accessCodeLifespanLogin;
    return this;
  }

  /**
   * Get accessCodeLifespanLogin
   * @return accessCodeLifespanLogin
   */
  @javax.annotation.Nullable
  public Integer getAccessCodeLifespanLogin() {
    return accessCodeLifespanLogin;
  }

  public void setAccessCodeLifespanLogin(Integer accessCodeLifespanLogin) {
    this.accessCodeLifespanLogin = accessCodeLifespanLogin;
  }


  public RealmRepresentation accessCodeLifespanUserAction(Integer accessCodeLifespanUserAction) {
    this.accessCodeLifespanUserAction = accessCodeLifespanUserAction;
    return this;
  }

  /**
   * Get accessCodeLifespanUserAction
   * @return accessCodeLifespanUserAction
   */
  @javax.annotation.Nullable
  public Integer getAccessCodeLifespanUserAction() {
    return accessCodeLifespanUserAction;
  }

  public void setAccessCodeLifespanUserAction(Integer accessCodeLifespanUserAction) {
    this.accessCodeLifespanUserAction = accessCodeLifespanUserAction;
  }


  public RealmRepresentation accessTokenLifespan(Integer accessTokenLifespan) {
    this.accessTokenLifespan = accessTokenLifespan;
    return this;
  }

  /**
   * Get accessTokenLifespan
   * @return accessTokenLifespan
   */
  @javax.annotation.Nullable
  public Integer getAccessTokenLifespan() {
    return accessTokenLifespan;
  }

  public void setAccessTokenLifespan(Integer accessTokenLifespan) {
    this.accessTokenLifespan = accessTokenLifespan;
  }


  public RealmRepresentation accessTokenLifespanForImplicitFlow(Integer accessTokenLifespanForImplicitFlow) {
    this.accessTokenLifespanForImplicitFlow = accessTokenLifespanForImplicitFlow;
    return this;
  }

  /**
   * Get accessTokenLifespanForImplicitFlow
   * @return accessTokenLifespanForImplicitFlow
   */
  @javax.annotation.Nullable
  public Integer getAccessTokenLifespanForImplicitFlow() {
    return accessTokenLifespanForImplicitFlow;
  }

  public void setAccessTokenLifespanForImplicitFlow(Integer accessTokenLifespanForImplicitFlow) {
    this.accessTokenLifespanForImplicitFlow = accessTokenLifespanForImplicitFlow;
  }


  public RealmRepresentation accountTheme(String accountTheme) {
    this.accountTheme = accountTheme;
    return this;
  }

  /**
   * Get accountTheme
   * @return accountTheme
   */
  @javax.annotation.Nullable
  public String getAccountTheme() {
    return accountTheme;
  }

  public void setAccountTheme(String accountTheme) {
    this.accountTheme = accountTheme;
  }


  public RealmRepresentation actionTokenGeneratedByAdminLifespan(Integer actionTokenGeneratedByAdminLifespan) {
    this.actionTokenGeneratedByAdminLifespan = actionTokenGeneratedByAdminLifespan;
    return this;
  }

  /**
   * Get actionTokenGeneratedByAdminLifespan
   * @return actionTokenGeneratedByAdminLifespan
   */
  @javax.annotation.Nullable
  public Integer getActionTokenGeneratedByAdminLifespan() {
    return actionTokenGeneratedByAdminLifespan;
  }

  public void setActionTokenGeneratedByAdminLifespan(Integer actionTokenGeneratedByAdminLifespan) {
    this.actionTokenGeneratedByAdminLifespan = actionTokenGeneratedByAdminLifespan;
  }


  public RealmRepresentation actionTokenGeneratedByUserLifespan(Integer actionTokenGeneratedByUserLifespan) {
    this.actionTokenGeneratedByUserLifespan = actionTokenGeneratedByUserLifespan;
    return this;
  }

  /**
   * Get actionTokenGeneratedByUserLifespan
   * @return actionTokenGeneratedByUserLifespan
   */
  @javax.annotation.Nullable
  public Integer getActionTokenGeneratedByUserLifespan() {
    return actionTokenGeneratedByUserLifespan;
  }

  public void setActionTokenGeneratedByUserLifespan(Integer actionTokenGeneratedByUserLifespan) {
    this.actionTokenGeneratedByUserLifespan = actionTokenGeneratedByUserLifespan;
  }


  public RealmRepresentation adminEventsDetailsEnabled(Boolean adminEventsDetailsEnabled) {
    this.adminEventsDetailsEnabled = adminEventsDetailsEnabled;
    return this;
  }

  /**
   * Get adminEventsDetailsEnabled
   * @return adminEventsDetailsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAdminEventsDetailsEnabled() {
    return adminEventsDetailsEnabled;
  }

  public void setAdminEventsDetailsEnabled(Boolean adminEventsDetailsEnabled) {
    this.adminEventsDetailsEnabled = adminEventsDetailsEnabled;
  }


  public RealmRepresentation adminEventsEnabled(Boolean adminEventsEnabled) {
    this.adminEventsEnabled = adminEventsEnabled;
    return this;
  }

  /**
   * Get adminEventsEnabled
   * @return adminEventsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAdminEventsEnabled() {
    return adminEventsEnabled;
  }

  public void setAdminEventsEnabled(Boolean adminEventsEnabled) {
    this.adminEventsEnabled = adminEventsEnabled;
  }


  public RealmRepresentation adminTheme(String adminTheme) {
    this.adminTheme = adminTheme;
    return this;
  }

  /**
   * Get adminTheme
   * @return adminTheme
   */
  @javax.annotation.Nullable
  public String getAdminTheme() {
    return adminTheme;
  }

  public void setAdminTheme(String adminTheme) {
    this.adminTheme = adminTheme;
  }


  public RealmRepresentation attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public RealmRepresentation putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public RealmRepresentation authenticationFlows(List<AuthenticationFlowRepresentation> authenticationFlows) {
    this.authenticationFlows = authenticationFlows;
    return this;
  }

  public RealmRepresentation addAuthenticationFlowsItem(AuthenticationFlowRepresentation authenticationFlowsItem) {
    if (this.authenticationFlows == null) {
      this.authenticationFlows = new ArrayList<>();
    }
    this.authenticationFlows.add(authenticationFlowsItem);
    return this;
  }

  /**
   * Get authenticationFlows
   * @return authenticationFlows
   */
  @javax.annotation.Nullable
  public List<AuthenticationFlowRepresentation> getAuthenticationFlows() {
    return authenticationFlows;
  }

  public void setAuthenticationFlows(List<AuthenticationFlowRepresentation> authenticationFlows) {
    this.authenticationFlows = authenticationFlows;
  }


  public RealmRepresentation authenticatorConfig(List<AuthenticatorConfigRepresentation> authenticatorConfig) {
    this.authenticatorConfig = authenticatorConfig;
    return this;
  }

  public RealmRepresentation addAuthenticatorConfigItem(AuthenticatorConfigRepresentation authenticatorConfigItem) {
    if (this.authenticatorConfig == null) {
      this.authenticatorConfig = new ArrayList<>();
    }
    this.authenticatorConfig.add(authenticatorConfigItem);
    return this;
  }

  /**
   * Get authenticatorConfig
   * @return authenticatorConfig
   */
  @javax.annotation.Nullable
  public List<AuthenticatorConfigRepresentation> getAuthenticatorConfig() {
    return authenticatorConfig;
  }

  public void setAuthenticatorConfig(List<AuthenticatorConfigRepresentation> authenticatorConfig) {
    this.authenticatorConfig = authenticatorConfig;
  }


  public RealmRepresentation browserFlow(String browserFlow) {
    this.browserFlow = browserFlow;
    return this;
  }

  /**
   * Get browserFlow
   * @return browserFlow
   */
  @javax.annotation.Nullable
  public String getBrowserFlow() {
    return browserFlow;
  }

  public void setBrowserFlow(String browserFlow) {
    this.browserFlow = browserFlow;
  }


  public RealmRepresentation browserSecurityHeaders(Map<String, Object> browserSecurityHeaders) {
    this.browserSecurityHeaders = browserSecurityHeaders;
    return this;
  }

  public RealmRepresentation putBrowserSecurityHeadersItem(String key, Object browserSecurityHeadersItem) {
    if (this.browserSecurityHeaders == null) {
      this.browserSecurityHeaders = new HashMap<>();
    }
    this.browserSecurityHeaders.put(key, browserSecurityHeadersItem);
    return this;
  }

  /**
   * Get browserSecurityHeaders
   * @return browserSecurityHeaders
   */
  @javax.annotation.Nullable
  public Map<String, Object> getBrowserSecurityHeaders() {
    return browserSecurityHeaders;
  }

  public void setBrowserSecurityHeaders(Map<String, Object> browserSecurityHeaders) {
    this.browserSecurityHeaders = browserSecurityHeaders;
  }


  public RealmRepresentation bruteForceProtected(Boolean bruteForceProtected) {
    this.bruteForceProtected = bruteForceProtected;
    return this;
  }

  /**
   * Get bruteForceProtected
   * @return bruteForceProtected
   */
  @javax.annotation.Nullable
  public Boolean getBruteForceProtected() {
    return bruteForceProtected;
  }

  public void setBruteForceProtected(Boolean bruteForceProtected) {
    this.bruteForceProtected = bruteForceProtected;
  }


  public RealmRepresentation clientAuthenticationFlow(String clientAuthenticationFlow) {
    this.clientAuthenticationFlow = clientAuthenticationFlow;
    return this;
  }

  /**
   * Get clientAuthenticationFlow
   * @return clientAuthenticationFlow
   */
  @javax.annotation.Nullable
  public String getClientAuthenticationFlow() {
    return clientAuthenticationFlow;
  }

  public void setClientAuthenticationFlow(String clientAuthenticationFlow) {
    this.clientAuthenticationFlow = clientAuthenticationFlow;
  }


  public RealmRepresentation clientScopeMappings(Map<String, Object> clientScopeMappings) {
    this.clientScopeMappings = clientScopeMappings;
    return this;
  }

  public RealmRepresentation putClientScopeMappingsItem(String key, Object clientScopeMappingsItem) {
    if (this.clientScopeMappings == null) {
      this.clientScopeMappings = new HashMap<>();
    }
    this.clientScopeMappings.put(key, clientScopeMappingsItem);
    return this;
  }

  /**
   * Get clientScopeMappings
   * @return clientScopeMappings
   */
  @javax.annotation.Nullable
  public Map<String, Object> getClientScopeMappings() {
    return clientScopeMappings;
  }

  public void setClientScopeMappings(Map<String, Object> clientScopeMappings) {
    this.clientScopeMappings = clientScopeMappings;
  }


  public RealmRepresentation clientScopes(List<ClientScopeRepresentation> clientScopes) {
    this.clientScopes = clientScopes;
    return this;
  }

  public RealmRepresentation addClientScopesItem(ClientScopeRepresentation clientScopesItem) {
    if (this.clientScopes == null) {
      this.clientScopes = new ArrayList<>();
    }
    this.clientScopes.add(clientScopesItem);
    return this;
  }

  /**
   * Get clientScopes
   * @return clientScopes
   */
  @javax.annotation.Nullable
  public List<ClientScopeRepresentation> getClientScopes() {
    return clientScopes;
  }

  public void setClientScopes(List<ClientScopeRepresentation> clientScopes) {
    this.clientScopes = clientScopes;
  }


  public RealmRepresentation clientSessionIdleTimeout(Integer clientSessionIdleTimeout) {
    this.clientSessionIdleTimeout = clientSessionIdleTimeout;
    return this;
  }

  /**
   * Get clientSessionIdleTimeout
   * @return clientSessionIdleTimeout
   */
  @javax.annotation.Nullable
  public Integer getClientSessionIdleTimeout() {
    return clientSessionIdleTimeout;
  }

  public void setClientSessionIdleTimeout(Integer clientSessionIdleTimeout) {
    this.clientSessionIdleTimeout = clientSessionIdleTimeout;
  }


  public RealmRepresentation clientSessionMaxLifespan(Integer clientSessionMaxLifespan) {
    this.clientSessionMaxLifespan = clientSessionMaxLifespan;
    return this;
  }

  /**
   * Get clientSessionMaxLifespan
   * @return clientSessionMaxLifespan
   */
  @javax.annotation.Nullable
  public Integer getClientSessionMaxLifespan() {
    return clientSessionMaxLifespan;
  }

  public void setClientSessionMaxLifespan(Integer clientSessionMaxLifespan) {
    this.clientSessionMaxLifespan = clientSessionMaxLifespan;
  }


  public RealmRepresentation clients(List<ClientRepresentation> clients) {
    this.clients = clients;
    return this;
  }

  public RealmRepresentation addClientsItem(ClientRepresentation clientsItem) {
    if (this.clients == null) {
      this.clients = new ArrayList<>();
    }
    this.clients.add(clientsItem);
    return this;
  }

  /**
   * Get clients
   * @return clients
   */
  @javax.annotation.Nullable
  public List<ClientRepresentation> getClients() {
    return clients;
  }

  public void setClients(List<ClientRepresentation> clients) {
    this.clients = clients;
  }


  public RealmRepresentation components(MultivaluedHashMap components) {
    this.components = components;
    return this;
  }

  /**
   * Get components
   * @return components
   */
  @javax.annotation.Nullable
  public MultivaluedHashMap getComponents() {
    return components;
  }

  public void setComponents(MultivaluedHashMap components) {
    this.components = components;
  }


  public RealmRepresentation defaultDefaultClientScopes(List<String> defaultDefaultClientScopes) {
    this.defaultDefaultClientScopes = defaultDefaultClientScopes;
    return this;
  }

  public RealmRepresentation addDefaultDefaultClientScopesItem(String defaultDefaultClientScopesItem) {
    if (this.defaultDefaultClientScopes == null) {
      this.defaultDefaultClientScopes = new ArrayList<>();
    }
    this.defaultDefaultClientScopes.add(defaultDefaultClientScopesItem);
    return this;
  }

  /**
   * Get defaultDefaultClientScopes
   * @return defaultDefaultClientScopes
   */
  @javax.annotation.Nullable
  public List<String> getDefaultDefaultClientScopes() {
    return defaultDefaultClientScopes;
  }

  public void setDefaultDefaultClientScopes(List<String> defaultDefaultClientScopes) {
    this.defaultDefaultClientScopes = defaultDefaultClientScopes;
  }


  public RealmRepresentation defaultGroups(List<String> defaultGroups) {
    this.defaultGroups = defaultGroups;
    return this;
  }

  public RealmRepresentation addDefaultGroupsItem(String defaultGroupsItem) {
    if (this.defaultGroups == null) {
      this.defaultGroups = new ArrayList<>();
    }
    this.defaultGroups.add(defaultGroupsItem);
    return this;
  }

  /**
   * Get defaultGroups
   * @return defaultGroups
   */
  @javax.annotation.Nullable
  public List<String> getDefaultGroups() {
    return defaultGroups;
  }

  public void setDefaultGroups(List<String> defaultGroups) {
    this.defaultGroups = defaultGroups;
  }


  public RealmRepresentation defaultLocale(String defaultLocale) {
    this.defaultLocale = defaultLocale;
    return this;
  }

  /**
   * Get defaultLocale
   * @return defaultLocale
   */
  @javax.annotation.Nullable
  public String getDefaultLocale() {
    return defaultLocale;
  }

  public void setDefaultLocale(String defaultLocale) {
    this.defaultLocale = defaultLocale;
  }


  public RealmRepresentation defaultOptionalClientScopes(List<String> defaultOptionalClientScopes) {
    this.defaultOptionalClientScopes = defaultOptionalClientScopes;
    return this;
  }

  public RealmRepresentation addDefaultOptionalClientScopesItem(String defaultOptionalClientScopesItem) {
    if (this.defaultOptionalClientScopes == null) {
      this.defaultOptionalClientScopes = new ArrayList<>();
    }
    this.defaultOptionalClientScopes.add(defaultOptionalClientScopesItem);
    return this;
  }

  /**
   * Get defaultOptionalClientScopes
   * @return defaultOptionalClientScopes
   */
  @javax.annotation.Nullable
  public List<String> getDefaultOptionalClientScopes() {
    return defaultOptionalClientScopes;
  }

  public void setDefaultOptionalClientScopes(List<String> defaultOptionalClientScopes) {
    this.defaultOptionalClientScopes = defaultOptionalClientScopes;
  }


  public RealmRepresentation defaultRoles(List<String> defaultRoles) {
    this.defaultRoles = defaultRoles;
    return this;
  }

  public RealmRepresentation addDefaultRolesItem(String defaultRolesItem) {
    if (this.defaultRoles == null) {
      this.defaultRoles = new ArrayList<>();
    }
    this.defaultRoles.add(defaultRolesItem);
    return this;
  }

  /**
   * Get defaultRoles
   * @return defaultRoles
   */
  @javax.annotation.Nullable
  public List<String> getDefaultRoles() {
    return defaultRoles;
  }

  public void setDefaultRoles(List<String> defaultRoles) {
    this.defaultRoles = defaultRoles;
  }


  public RealmRepresentation defaultSignatureAlgorithm(String defaultSignatureAlgorithm) {
    this.defaultSignatureAlgorithm = defaultSignatureAlgorithm;
    return this;
  }

  /**
   * Get defaultSignatureAlgorithm
   * @return defaultSignatureAlgorithm
   */
  @javax.annotation.Nullable
  public String getDefaultSignatureAlgorithm() {
    return defaultSignatureAlgorithm;
  }

  public void setDefaultSignatureAlgorithm(String defaultSignatureAlgorithm) {
    this.defaultSignatureAlgorithm = defaultSignatureAlgorithm;
  }


  public RealmRepresentation directGrantFlow(String directGrantFlow) {
    this.directGrantFlow = directGrantFlow;
    return this;
  }

  /**
   * Get directGrantFlow
   * @return directGrantFlow
   */
  @javax.annotation.Nullable
  public String getDirectGrantFlow() {
    return directGrantFlow;
  }

  public void setDirectGrantFlow(String directGrantFlow) {
    this.directGrantFlow = directGrantFlow;
  }


  public RealmRepresentation displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public RealmRepresentation displayNameHtml(String displayNameHtml) {
    this.displayNameHtml = displayNameHtml;
    return this;
  }

  /**
   * Get displayNameHtml
   * @return displayNameHtml
   */
  @javax.annotation.Nullable
  public String getDisplayNameHtml() {
    return displayNameHtml;
  }

  public void setDisplayNameHtml(String displayNameHtml) {
    this.displayNameHtml = displayNameHtml;
  }


  public RealmRepresentation dockerAuthenticationFlow(String dockerAuthenticationFlow) {
    this.dockerAuthenticationFlow = dockerAuthenticationFlow;
    return this;
  }

  /**
   * Get dockerAuthenticationFlow
   * @return dockerAuthenticationFlow
   */
  @javax.annotation.Nullable
  public String getDockerAuthenticationFlow() {
    return dockerAuthenticationFlow;
  }

  public void setDockerAuthenticationFlow(String dockerAuthenticationFlow) {
    this.dockerAuthenticationFlow = dockerAuthenticationFlow;
  }


  public RealmRepresentation duplicateEmailsAllowed(Boolean duplicateEmailsAllowed) {
    this.duplicateEmailsAllowed = duplicateEmailsAllowed;
    return this;
  }

  /**
   * Get duplicateEmailsAllowed
   * @return duplicateEmailsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getDuplicateEmailsAllowed() {
    return duplicateEmailsAllowed;
  }

  public void setDuplicateEmailsAllowed(Boolean duplicateEmailsAllowed) {
    this.duplicateEmailsAllowed = duplicateEmailsAllowed;
  }


  public RealmRepresentation editUsernameAllowed(Boolean editUsernameAllowed) {
    this.editUsernameAllowed = editUsernameAllowed;
    return this;
  }

  /**
   * Get editUsernameAllowed
   * @return editUsernameAllowed
   */
  @javax.annotation.Nullable
  public Boolean getEditUsernameAllowed() {
    return editUsernameAllowed;
  }

  public void setEditUsernameAllowed(Boolean editUsernameAllowed) {
    this.editUsernameAllowed = editUsernameAllowed;
  }


  public RealmRepresentation emailTheme(String emailTheme) {
    this.emailTheme = emailTheme;
    return this;
  }

  /**
   * Get emailTheme
   * @return emailTheme
   */
  @javax.annotation.Nullable
  public String getEmailTheme() {
    return emailTheme;
  }

  public void setEmailTheme(String emailTheme) {
    this.emailTheme = emailTheme;
  }


  public RealmRepresentation enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public RealmRepresentation enabledEventTypes(List<String> enabledEventTypes) {
    this.enabledEventTypes = enabledEventTypes;
    return this;
  }

  public RealmRepresentation addEnabledEventTypesItem(String enabledEventTypesItem) {
    if (this.enabledEventTypes == null) {
      this.enabledEventTypes = new ArrayList<>();
    }
    this.enabledEventTypes.add(enabledEventTypesItem);
    return this;
  }

  /**
   * Get enabledEventTypes
   * @return enabledEventTypes
   */
  @javax.annotation.Nullable
  public List<String> getEnabledEventTypes() {
    return enabledEventTypes;
  }

  public void setEnabledEventTypes(List<String> enabledEventTypes) {
    this.enabledEventTypes = enabledEventTypes;
  }


  public RealmRepresentation eventsEnabled(Boolean eventsEnabled) {
    this.eventsEnabled = eventsEnabled;
    return this;
  }

  /**
   * Get eventsEnabled
   * @return eventsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEventsEnabled() {
    return eventsEnabled;
  }

  public void setEventsEnabled(Boolean eventsEnabled) {
    this.eventsEnabled = eventsEnabled;
  }


  public RealmRepresentation eventsExpiration(Long eventsExpiration) {
    this.eventsExpiration = eventsExpiration;
    return this;
  }

  /**
   * Get eventsExpiration
   * @return eventsExpiration
   */
  @javax.annotation.Nullable
  public Long getEventsExpiration() {
    return eventsExpiration;
  }

  public void setEventsExpiration(Long eventsExpiration) {
    this.eventsExpiration = eventsExpiration;
  }


  public RealmRepresentation eventsListeners(List<String> eventsListeners) {
    this.eventsListeners = eventsListeners;
    return this;
  }

  public RealmRepresentation addEventsListenersItem(String eventsListenersItem) {
    if (this.eventsListeners == null) {
      this.eventsListeners = new ArrayList<>();
    }
    this.eventsListeners.add(eventsListenersItem);
    return this;
  }

  /**
   * Get eventsListeners
   * @return eventsListeners
   */
  @javax.annotation.Nullable
  public List<String> getEventsListeners() {
    return eventsListeners;
  }

  public void setEventsListeners(List<String> eventsListeners) {
    this.eventsListeners = eventsListeners;
  }


  public RealmRepresentation failureFactor(Integer failureFactor) {
    this.failureFactor = failureFactor;
    return this;
  }

  /**
   * Get failureFactor
   * @return failureFactor
   */
  @javax.annotation.Nullable
  public Integer getFailureFactor() {
    return failureFactor;
  }

  public void setFailureFactor(Integer failureFactor) {
    this.failureFactor = failureFactor;
  }


  public RealmRepresentation federatedUsers(List<UserRepresentation> federatedUsers) {
    this.federatedUsers = federatedUsers;
    return this;
  }

  public RealmRepresentation addFederatedUsersItem(UserRepresentation federatedUsersItem) {
    if (this.federatedUsers == null) {
      this.federatedUsers = new ArrayList<>();
    }
    this.federatedUsers.add(federatedUsersItem);
    return this;
  }

  /**
   * Get federatedUsers
   * @return federatedUsers
   */
  @javax.annotation.Nullable
  public List<UserRepresentation> getFederatedUsers() {
    return federatedUsers;
  }

  public void setFederatedUsers(List<UserRepresentation> federatedUsers) {
    this.federatedUsers = federatedUsers;
  }


  public RealmRepresentation groups(List<GroupRepresentation> groups) {
    this.groups = groups;
    return this;
  }

  public RealmRepresentation addGroupsItem(GroupRepresentation groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public List<GroupRepresentation> getGroups() {
    return groups;
  }

  public void setGroups(List<GroupRepresentation> groups) {
    this.groups = groups;
  }


  public RealmRepresentation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RealmRepresentation identityProviderMappers(List<IdentityProviderMapperRepresentation> identityProviderMappers) {
    this.identityProviderMappers = identityProviderMappers;
    return this;
  }

  public RealmRepresentation addIdentityProviderMappersItem(IdentityProviderMapperRepresentation identityProviderMappersItem) {
    if (this.identityProviderMappers == null) {
      this.identityProviderMappers = new ArrayList<>();
    }
    this.identityProviderMappers.add(identityProviderMappersItem);
    return this;
  }

  /**
   * Get identityProviderMappers
   * @return identityProviderMappers
   */
  @javax.annotation.Nullable
  public List<IdentityProviderMapperRepresentation> getIdentityProviderMappers() {
    return identityProviderMappers;
  }

  public void setIdentityProviderMappers(List<IdentityProviderMapperRepresentation> identityProviderMappers) {
    this.identityProviderMappers = identityProviderMappers;
  }


  public RealmRepresentation identityProviders(List<IdentityProviderRepresentation> identityProviders) {
    this.identityProviders = identityProviders;
    return this;
  }

  public RealmRepresentation addIdentityProvidersItem(IdentityProviderRepresentation identityProvidersItem) {
    if (this.identityProviders == null) {
      this.identityProviders = new ArrayList<>();
    }
    this.identityProviders.add(identityProvidersItem);
    return this;
  }

  /**
   * Get identityProviders
   * @return identityProviders
   */
  @javax.annotation.Nullable
  public List<IdentityProviderRepresentation> getIdentityProviders() {
    return identityProviders;
  }

  public void setIdentityProviders(List<IdentityProviderRepresentation> identityProviders) {
    this.identityProviders = identityProviders;
  }


  public RealmRepresentation internationalizationEnabled(Boolean internationalizationEnabled) {
    this.internationalizationEnabled = internationalizationEnabled;
    return this;
  }

  /**
   * Get internationalizationEnabled
   * @return internationalizationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getInternationalizationEnabled() {
    return internationalizationEnabled;
  }

  public void setInternationalizationEnabled(Boolean internationalizationEnabled) {
    this.internationalizationEnabled = internationalizationEnabled;
  }


  public RealmRepresentation keycloakVersion(String keycloakVersion) {
    this.keycloakVersion = keycloakVersion;
    return this;
  }

  /**
   * Get keycloakVersion
   * @return keycloakVersion
   */
  @javax.annotation.Nullable
  public String getKeycloakVersion() {
    return keycloakVersion;
  }

  public void setKeycloakVersion(String keycloakVersion) {
    this.keycloakVersion = keycloakVersion;
  }


  public RealmRepresentation loginTheme(String loginTheme) {
    this.loginTheme = loginTheme;
    return this;
  }

  /**
   * Get loginTheme
   * @return loginTheme
   */
  @javax.annotation.Nullable
  public String getLoginTheme() {
    return loginTheme;
  }

  public void setLoginTheme(String loginTheme) {
    this.loginTheme = loginTheme;
  }


  public RealmRepresentation loginWithEmailAllowed(Boolean loginWithEmailAllowed) {
    this.loginWithEmailAllowed = loginWithEmailAllowed;
    return this;
  }

  /**
   * Get loginWithEmailAllowed
   * @return loginWithEmailAllowed
   */
  @javax.annotation.Nullable
  public Boolean getLoginWithEmailAllowed() {
    return loginWithEmailAllowed;
  }

  public void setLoginWithEmailAllowed(Boolean loginWithEmailAllowed) {
    this.loginWithEmailAllowed = loginWithEmailAllowed;
  }


  public RealmRepresentation maxDeltaTimeSeconds(Integer maxDeltaTimeSeconds) {
    this.maxDeltaTimeSeconds = maxDeltaTimeSeconds;
    return this;
  }

  /**
   * Get maxDeltaTimeSeconds
   * @return maxDeltaTimeSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaxDeltaTimeSeconds() {
    return maxDeltaTimeSeconds;
  }

  public void setMaxDeltaTimeSeconds(Integer maxDeltaTimeSeconds) {
    this.maxDeltaTimeSeconds = maxDeltaTimeSeconds;
  }


  public RealmRepresentation maxFailureWaitSeconds(Integer maxFailureWaitSeconds) {
    this.maxFailureWaitSeconds = maxFailureWaitSeconds;
    return this;
  }

  /**
   * Get maxFailureWaitSeconds
   * @return maxFailureWaitSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaxFailureWaitSeconds() {
    return maxFailureWaitSeconds;
  }

  public void setMaxFailureWaitSeconds(Integer maxFailureWaitSeconds) {
    this.maxFailureWaitSeconds = maxFailureWaitSeconds;
  }


  public RealmRepresentation minimumQuickLoginWaitSeconds(Integer minimumQuickLoginWaitSeconds) {
    this.minimumQuickLoginWaitSeconds = minimumQuickLoginWaitSeconds;
    return this;
  }

  /**
   * Get minimumQuickLoginWaitSeconds
   * @return minimumQuickLoginWaitSeconds
   */
  @javax.annotation.Nullable
  public Integer getMinimumQuickLoginWaitSeconds() {
    return minimumQuickLoginWaitSeconds;
  }

  public void setMinimumQuickLoginWaitSeconds(Integer minimumQuickLoginWaitSeconds) {
    this.minimumQuickLoginWaitSeconds = minimumQuickLoginWaitSeconds;
  }


  public RealmRepresentation notBefore(Integer notBefore) {
    this.notBefore = notBefore;
    return this;
  }

  /**
   * Get notBefore
   * @return notBefore
   */
  @javax.annotation.Nullable
  public Integer getNotBefore() {
    return notBefore;
  }

  public void setNotBefore(Integer notBefore) {
    this.notBefore = notBefore;
  }


  public RealmRepresentation offlineSessionIdleTimeout(Integer offlineSessionIdleTimeout) {
    this.offlineSessionIdleTimeout = offlineSessionIdleTimeout;
    return this;
  }

  /**
   * Get offlineSessionIdleTimeout
   * @return offlineSessionIdleTimeout
   */
  @javax.annotation.Nullable
  public Integer getOfflineSessionIdleTimeout() {
    return offlineSessionIdleTimeout;
  }

  public void setOfflineSessionIdleTimeout(Integer offlineSessionIdleTimeout) {
    this.offlineSessionIdleTimeout = offlineSessionIdleTimeout;
  }


  public RealmRepresentation offlineSessionMaxLifespan(Integer offlineSessionMaxLifespan) {
    this.offlineSessionMaxLifespan = offlineSessionMaxLifespan;
    return this;
  }

  /**
   * Get offlineSessionMaxLifespan
   * @return offlineSessionMaxLifespan
   */
  @javax.annotation.Nullable
  public Integer getOfflineSessionMaxLifespan() {
    return offlineSessionMaxLifespan;
  }

  public void setOfflineSessionMaxLifespan(Integer offlineSessionMaxLifespan) {
    this.offlineSessionMaxLifespan = offlineSessionMaxLifespan;
  }


  public RealmRepresentation offlineSessionMaxLifespanEnabled(Boolean offlineSessionMaxLifespanEnabled) {
    this.offlineSessionMaxLifespanEnabled = offlineSessionMaxLifespanEnabled;
    return this;
  }

  /**
   * Get offlineSessionMaxLifespanEnabled
   * @return offlineSessionMaxLifespanEnabled
   */
  @javax.annotation.Nullable
  public Boolean getOfflineSessionMaxLifespanEnabled() {
    return offlineSessionMaxLifespanEnabled;
  }

  public void setOfflineSessionMaxLifespanEnabled(Boolean offlineSessionMaxLifespanEnabled) {
    this.offlineSessionMaxLifespanEnabled = offlineSessionMaxLifespanEnabled;
  }


  public RealmRepresentation otpPolicyAlgorithm(String otpPolicyAlgorithm) {
    this.otpPolicyAlgorithm = otpPolicyAlgorithm;
    return this;
  }

  /**
   * Get otpPolicyAlgorithm
   * @return otpPolicyAlgorithm
   */
  @javax.annotation.Nullable
  public String getOtpPolicyAlgorithm() {
    return otpPolicyAlgorithm;
  }

  public void setOtpPolicyAlgorithm(String otpPolicyAlgorithm) {
    this.otpPolicyAlgorithm = otpPolicyAlgorithm;
  }


  public RealmRepresentation otpPolicyDigits(Integer otpPolicyDigits) {
    this.otpPolicyDigits = otpPolicyDigits;
    return this;
  }

  /**
   * Get otpPolicyDigits
   * @return otpPolicyDigits
   */
  @javax.annotation.Nullable
  public Integer getOtpPolicyDigits() {
    return otpPolicyDigits;
  }

  public void setOtpPolicyDigits(Integer otpPolicyDigits) {
    this.otpPolicyDigits = otpPolicyDigits;
  }


  public RealmRepresentation otpPolicyInitialCounter(Integer otpPolicyInitialCounter) {
    this.otpPolicyInitialCounter = otpPolicyInitialCounter;
    return this;
  }

  /**
   * Get otpPolicyInitialCounter
   * @return otpPolicyInitialCounter
   */
  @javax.annotation.Nullable
  public Integer getOtpPolicyInitialCounter() {
    return otpPolicyInitialCounter;
  }

  public void setOtpPolicyInitialCounter(Integer otpPolicyInitialCounter) {
    this.otpPolicyInitialCounter = otpPolicyInitialCounter;
  }


  public RealmRepresentation otpPolicyLookAheadWindow(Integer otpPolicyLookAheadWindow) {
    this.otpPolicyLookAheadWindow = otpPolicyLookAheadWindow;
    return this;
  }

  /**
   * Get otpPolicyLookAheadWindow
   * @return otpPolicyLookAheadWindow
   */
  @javax.annotation.Nullable
  public Integer getOtpPolicyLookAheadWindow() {
    return otpPolicyLookAheadWindow;
  }

  public void setOtpPolicyLookAheadWindow(Integer otpPolicyLookAheadWindow) {
    this.otpPolicyLookAheadWindow = otpPolicyLookAheadWindow;
  }


  public RealmRepresentation otpPolicyPeriod(Integer otpPolicyPeriod) {
    this.otpPolicyPeriod = otpPolicyPeriod;
    return this;
  }

  /**
   * Get otpPolicyPeriod
   * @return otpPolicyPeriod
   */
  @javax.annotation.Nullable
  public Integer getOtpPolicyPeriod() {
    return otpPolicyPeriod;
  }

  public void setOtpPolicyPeriod(Integer otpPolicyPeriod) {
    this.otpPolicyPeriod = otpPolicyPeriod;
  }


  public RealmRepresentation otpPolicyType(String otpPolicyType) {
    this.otpPolicyType = otpPolicyType;
    return this;
  }

  /**
   * Get otpPolicyType
   * @return otpPolicyType
   */
  @javax.annotation.Nullable
  public String getOtpPolicyType() {
    return otpPolicyType;
  }

  public void setOtpPolicyType(String otpPolicyType) {
    this.otpPolicyType = otpPolicyType;
  }


  public RealmRepresentation otpSupportedApplications(List<String> otpSupportedApplications) {
    this.otpSupportedApplications = otpSupportedApplications;
    return this;
  }

  public RealmRepresentation addOtpSupportedApplicationsItem(String otpSupportedApplicationsItem) {
    if (this.otpSupportedApplications == null) {
      this.otpSupportedApplications = new ArrayList<>();
    }
    this.otpSupportedApplications.add(otpSupportedApplicationsItem);
    return this;
  }

  /**
   * Get otpSupportedApplications
   * @return otpSupportedApplications
   */
  @javax.annotation.Nullable
  public List<String> getOtpSupportedApplications() {
    return otpSupportedApplications;
  }

  public void setOtpSupportedApplications(List<String> otpSupportedApplications) {
    this.otpSupportedApplications = otpSupportedApplications;
  }


  public RealmRepresentation passwordPolicy(String passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
    return this;
  }

  /**
   * Get passwordPolicy
   * @return passwordPolicy
   */
  @javax.annotation.Nullable
  public String getPasswordPolicy() {
    return passwordPolicy;
  }

  public void setPasswordPolicy(String passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
  }


  public RealmRepresentation permanentLockout(Boolean permanentLockout) {
    this.permanentLockout = permanentLockout;
    return this;
  }

  /**
   * Get permanentLockout
   * @return permanentLockout
   */
  @javax.annotation.Nullable
  public Boolean getPermanentLockout() {
    return permanentLockout;
  }

  public void setPermanentLockout(Boolean permanentLockout) {
    this.permanentLockout = permanentLockout;
  }


  public RealmRepresentation protocolMappers(List<ProtocolMapperRepresentation> protocolMappers) {
    this.protocolMappers = protocolMappers;
    return this;
  }

  public RealmRepresentation addProtocolMappersItem(ProtocolMapperRepresentation protocolMappersItem) {
    if (this.protocolMappers == null) {
      this.protocolMappers = new ArrayList<>();
    }
    this.protocolMappers.add(protocolMappersItem);
    return this;
  }

  /**
   * Get protocolMappers
   * @return protocolMappers
   */
  @javax.annotation.Nullable
  public List<ProtocolMapperRepresentation> getProtocolMappers() {
    return protocolMappers;
  }

  public void setProtocolMappers(List<ProtocolMapperRepresentation> protocolMappers) {
    this.protocolMappers = protocolMappers;
  }


  public RealmRepresentation quickLoginCheckMilliSeconds(Long quickLoginCheckMilliSeconds) {
    this.quickLoginCheckMilliSeconds = quickLoginCheckMilliSeconds;
    return this;
  }

  /**
   * Get quickLoginCheckMilliSeconds
   * @return quickLoginCheckMilliSeconds
   */
  @javax.annotation.Nullable
  public Long getQuickLoginCheckMilliSeconds() {
    return quickLoginCheckMilliSeconds;
  }

  public void setQuickLoginCheckMilliSeconds(Long quickLoginCheckMilliSeconds) {
    this.quickLoginCheckMilliSeconds = quickLoginCheckMilliSeconds;
  }


  public RealmRepresentation realm(String realm) {
    this.realm = realm;
    return this;
  }

  /**
   * Get realm
   * @return realm
   */
  @javax.annotation.Nullable
  public String getRealm() {
    return realm;
  }

  public void setRealm(String realm) {
    this.realm = realm;
  }


  public RealmRepresentation refreshTokenMaxReuse(Integer refreshTokenMaxReuse) {
    this.refreshTokenMaxReuse = refreshTokenMaxReuse;
    return this;
  }

  /**
   * Get refreshTokenMaxReuse
   * @return refreshTokenMaxReuse
   */
  @javax.annotation.Nullable
  public Integer getRefreshTokenMaxReuse() {
    return refreshTokenMaxReuse;
  }

  public void setRefreshTokenMaxReuse(Integer refreshTokenMaxReuse) {
    this.refreshTokenMaxReuse = refreshTokenMaxReuse;
  }


  public RealmRepresentation registrationAllowed(Boolean registrationAllowed) {
    this.registrationAllowed = registrationAllowed;
    return this;
  }

  /**
   * Get registrationAllowed
   * @return registrationAllowed
   */
  @javax.annotation.Nullable
  public Boolean getRegistrationAllowed() {
    return registrationAllowed;
  }

  public void setRegistrationAllowed(Boolean registrationAllowed) {
    this.registrationAllowed = registrationAllowed;
  }


  public RealmRepresentation registrationEmailAsUsername(Boolean registrationEmailAsUsername) {
    this.registrationEmailAsUsername = registrationEmailAsUsername;
    return this;
  }

  /**
   * Get registrationEmailAsUsername
   * @return registrationEmailAsUsername
   */
  @javax.annotation.Nullable
  public Boolean getRegistrationEmailAsUsername() {
    return registrationEmailAsUsername;
  }

  public void setRegistrationEmailAsUsername(Boolean registrationEmailAsUsername) {
    this.registrationEmailAsUsername = registrationEmailAsUsername;
  }


  public RealmRepresentation registrationFlow(String registrationFlow) {
    this.registrationFlow = registrationFlow;
    return this;
  }

  /**
   * Get registrationFlow
   * @return registrationFlow
   */
  @javax.annotation.Nullable
  public String getRegistrationFlow() {
    return registrationFlow;
  }

  public void setRegistrationFlow(String registrationFlow) {
    this.registrationFlow = registrationFlow;
  }


  public RealmRepresentation rememberMe(Boolean rememberMe) {
    this.rememberMe = rememberMe;
    return this;
  }

  /**
   * Get rememberMe
   * @return rememberMe
   */
  @javax.annotation.Nullable
  public Boolean getRememberMe() {
    return rememberMe;
  }

  public void setRememberMe(Boolean rememberMe) {
    this.rememberMe = rememberMe;
  }


  public RealmRepresentation requiredActions(List<RequiredActionProviderRepresentation> requiredActions) {
    this.requiredActions = requiredActions;
    return this;
  }

  public RealmRepresentation addRequiredActionsItem(RequiredActionProviderRepresentation requiredActionsItem) {
    if (this.requiredActions == null) {
      this.requiredActions = new ArrayList<>();
    }
    this.requiredActions.add(requiredActionsItem);
    return this;
  }

  /**
   * Get requiredActions
   * @return requiredActions
   */
  @javax.annotation.Nullable
  public List<RequiredActionProviderRepresentation> getRequiredActions() {
    return requiredActions;
  }

  public void setRequiredActions(List<RequiredActionProviderRepresentation> requiredActions) {
    this.requiredActions = requiredActions;
  }


  public RealmRepresentation resetCredentialsFlow(String resetCredentialsFlow) {
    this.resetCredentialsFlow = resetCredentialsFlow;
    return this;
  }

  /**
   * Get resetCredentialsFlow
   * @return resetCredentialsFlow
   */
  @javax.annotation.Nullable
  public String getResetCredentialsFlow() {
    return resetCredentialsFlow;
  }

  public void setResetCredentialsFlow(String resetCredentialsFlow) {
    this.resetCredentialsFlow = resetCredentialsFlow;
  }


  public RealmRepresentation resetPasswordAllowed(Boolean resetPasswordAllowed) {
    this.resetPasswordAllowed = resetPasswordAllowed;
    return this;
  }

  /**
   * Get resetPasswordAllowed
   * @return resetPasswordAllowed
   */
  @javax.annotation.Nullable
  public Boolean getResetPasswordAllowed() {
    return resetPasswordAllowed;
  }

  public void setResetPasswordAllowed(Boolean resetPasswordAllowed) {
    this.resetPasswordAllowed = resetPasswordAllowed;
  }


  public RealmRepresentation revokeRefreshToken(Boolean revokeRefreshToken) {
    this.revokeRefreshToken = revokeRefreshToken;
    return this;
  }

  /**
   * Get revokeRefreshToken
   * @return revokeRefreshToken
   */
  @javax.annotation.Nullable
  public Boolean getRevokeRefreshToken() {
    return revokeRefreshToken;
  }

  public void setRevokeRefreshToken(Boolean revokeRefreshToken) {
    this.revokeRefreshToken = revokeRefreshToken;
  }


  public RealmRepresentation roles(RolesRepresentation roles) {
    this.roles = roles;
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public RolesRepresentation getRoles() {
    return roles;
  }

  public void setRoles(RolesRepresentation roles) {
    this.roles = roles;
  }


  public RealmRepresentation scopeMappings(List<ScopeMappingRepresentation> scopeMappings) {
    this.scopeMappings = scopeMappings;
    return this;
  }

  public RealmRepresentation addScopeMappingsItem(ScopeMappingRepresentation scopeMappingsItem) {
    if (this.scopeMappings == null) {
      this.scopeMappings = new ArrayList<>();
    }
    this.scopeMappings.add(scopeMappingsItem);
    return this;
  }

  /**
   * Get scopeMappings
   * @return scopeMappings
   */
  @javax.annotation.Nullable
  public List<ScopeMappingRepresentation> getScopeMappings() {
    return scopeMappings;
  }

  public void setScopeMappings(List<ScopeMappingRepresentation> scopeMappings) {
    this.scopeMappings = scopeMappings;
  }


  public RealmRepresentation smtpServer(Map<String, Object> smtpServer) {
    this.smtpServer = smtpServer;
    return this;
  }

  public RealmRepresentation putSmtpServerItem(String key, Object smtpServerItem) {
    if (this.smtpServer == null) {
      this.smtpServer = new HashMap<>();
    }
    this.smtpServer.put(key, smtpServerItem);
    return this;
  }

  /**
   * Get smtpServer
   * @return smtpServer
   */
  @javax.annotation.Nullable
  public Map<String, Object> getSmtpServer() {
    return smtpServer;
  }

  public void setSmtpServer(Map<String, Object> smtpServer) {
    this.smtpServer = smtpServer;
  }


  public RealmRepresentation sslRequired(String sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

  /**
   * Get sslRequired
   * @return sslRequired
   */
  @javax.annotation.Nullable
  public String getSslRequired() {
    return sslRequired;
  }

  public void setSslRequired(String sslRequired) {
    this.sslRequired = sslRequired;
  }


  public RealmRepresentation ssoSessionIdleTimeout(Integer ssoSessionIdleTimeout) {
    this.ssoSessionIdleTimeout = ssoSessionIdleTimeout;
    return this;
  }

  /**
   * Get ssoSessionIdleTimeout
   * @return ssoSessionIdleTimeout
   */
  @javax.annotation.Nullable
  public Integer getSsoSessionIdleTimeout() {
    return ssoSessionIdleTimeout;
  }

  public void setSsoSessionIdleTimeout(Integer ssoSessionIdleTimeout) {
    this.ssoSessionIdleTimeout = ssoSessionIdleTimeout;
  }


  public RealmRepresentation ssoSessionIdleTimeoutRememberMe(Integer ssoSessionIdleTimeoutRememberMe) {
    this.ssoSessionIdleTimeoutRememberMe = ssoSessionIdleTimeoutRememberMe;
    return this;
  }

  /**
   * Get ssoSessionIdleTimeoutRememberMe
   * @return ssoSessionIdleTimeoutRememberMe
   */
  @javax.annotation.Nullable
  public Integer getSsoSessionIdleTimeoutRememberMe() {
    return ssoSessionIdleTimeoutRememberMe;
  }

  public void setSsoSessionIdleTimeoutRememberMe(Integer ssoSessionIdleTimeoutRememberMe) {
    this.ssoSessionIdleTimeoutRememberMe = ssoSessionIdleTimeoutRememberMe;
  }


  public RealmRepresentation ssoSessionMaxLifespan(Integer ssoSessionMaxLifespan) {
    this.ssoSessionMaxLifespan = ssoSessionMaxLifespan;
    return this;
  }

  /**
   * Get ssoSessionMaxLifespan
   * @return ssoSessionMaxLifespan
   */
  @javax.annotation.Nullable
  public Integer getSsoSessionMaxLifespan() {
    return ssoSessionMaxLifespan;
  }

  public void setSsoSessionMaxLifespan(Integer ssoSessionMaxLifespan) {
    this.ssoSessionMaxLifespan = ssoSessionMaxLifespan;
  }


  public RealmRepresentation ssoSessionMaxLifespanRememberMe(Integer ssoSessionMaxLifespanRememberMe) {
    this.ssoSessionMaxLifespanRememberMe = ssoSessionMaxLifespanRememberMe;
    return this;
  }

  /**
   * Get ssoSessionMaxLifespanRememberMe
   * @return ssoSessionMaxLifespanRememberMe
   */
  @javax.annotation.Nullable
  public Integer getSsoSessionMaxLifespanRememberMe() {
    return ssoSessionMaxLifespanRememberMe;
  }

  public void setSsoSessionMaxLifespanRememberMe(Integer ssoSessionMaxLifespanRememberMe) {
    this.ssoSessionMaxLifespanRememberMe = ssoSessionMaxLifespanRememberMe;
  }


  public RealmRepresentation supportedLocales(List<String> supportedLocales) {
    this.supportedLocales = supportedLocales;
    return this;
  }

  public RealmRepresentation addSupportedLocalesItem(String supportedLocalesItem) {
    if (this.supportedLocales == null) {
      this.supportedLocales = new ArrayList<>();
    }
    this.supportedLocales.add(supportedLocalesItem);
    return this;
  }

  /**
   * Get supportedLocales
   * @return supportedLocales
   */
  @javax.annotation.Nullable
  public List<String> getSupportedLocales() {
    return supportedLocales;
  }

  public void setSupportedLocales(List<String> supportedLocales) {
    this.supportedLocales = supportedLocales;
  }


  public RealmRepresentation userFederationMappers(List<UserFederationMapperRepresentation> userFederationMappers) {
    this.userFederationMappers = userFederationMappers;
    return this;
  }

  public RealmRepresentation addUserFederationMappersItem(UserFederationMapperRepresentation userFederationMappersItem) {
    if (this.userFederationMappers == null) {
      this.userFederationMappers = new ArrayList<>();
    }
    this.userFederationMappers.add(userFederationMappersItem);
    return this;
  }

  /**
   * Get userFederationMappers
   * @return userFederationMappers
   */
  @javax.annotation.Nullable
  public List<UserFederationMapperRepresentation> getUserFederationMappers() {
    return userFederationMappers;
  }

  public void setUserFederationMappers(List<UserFederationMapperRepresentation> userFederationMappers) {
    this.userFederationMappers = userFederationMappers;
  }


  public RealmRepresentation userFederationProviders(List<UserFederationProviderRepresentation> userFederationProviders) {
    this.userFederationProviders = userFederationProviders;
    return this;
  }

  public RealmRepresentation addUserFederationProvidersItem(UserFederationProviderRepresentation userFederationProvidersItem) {
    if (this.userFederationProviders == null) {
      this.userFederationProviders = new ArrayList<>();
    }
    this.userFederationProviders.add(userFederationProvidersItem);
    return this;
  }

  /**
   * Get userFederationProviders
   * @return userFederationProviders
   */
  @javax.annotation.Nullable
  public List<UserFederationProviderRepresentation> getUserFederationProviders() {
    return userFederationProviders;
  }

  public void setUserFederationProviders(List<UserFederationProviderRepresentation> userFederationProviders) {
    this.userFederationProviders = userFederationProviders;
  }


  public RealmRepresentation userManagedAccessAllowed(Boolean userManagedAccessAllowed) {
    this.userManagedAccessAllowed = userManagedAccessAllowed;
    return this;
  }

  /**
   * Get userManagedAccessAllowed
   * @return userManagedAccessAllowed
   */
  @javax.annotation.Nullable
  public Boolean getUserManagedAccessAllowed() {
    return userManagedAccessAllowed;
  }

  public void setUserManagedAccessAllowed(Boolean userManagedAccessAllowed) {
    this.userManagedAccessAllowed = userManagedAccessAllowed;
  }


  public RealmRepresentation users(List<UserRepresentation> users) {
    this.users = users;
    return this;
  }

  public RealmRepresentation addUsersItem(UserRepresentation usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public List<UserRepresentation> getUsers() {
    return users;
  }

  public void setUsers(List<UserRepresentation> users) {
    this.users = users;
  }


  public RealmRepresentation verifyEmail(Boolean verifyEmail) {
    this.verifyEmail = verifyEmail;
    return this;
  }

  /**
   * Get verifyEmail
   * @return verifyEmail
   */
  @javax.annotation.Nullable
  public Boolean getVerifyEmail() {
    return verifyEmail;
  }

  public void setVerifyEmail(Boolean verifyEmail) {
    this.verifyEmail = verifyEmail;
  }


  public RealmRepresentation waitIncrementSeconds(Integer waitIncrementSeconds) {
    this.waitIncrementSeconds = waitIncrementSeconds;
    return this;
  }

  /**
   * Get waitIncrementSeconds
   * @return waitIncrementSeconds
   */
  @javax.annotation.Nullable
  public Integer getWaitIncrementSeconds() {
    return waitIncrementSeconds;
  }

  public void setWaitIncrementSeconds(Integer waitIncrementSeconds) {
    this.waitIncrementSeconds = waitIncrementSeconds;
  }


  public RealmRepresentation webAuthnPolicyAcceptableAaguids(List<String> webAuthnPolicyAcceptableAaguids) {
    this.webAuthnPolicyAcceptableAaguids = webAuthnPolicyAcceptableAaguids;
    return this;
  }

  public RealmRepresentation addWebAuthnPolicyAcceptableAaguidsItem(String webAuthnPolicyAcceptableAaguidsItem) {
    if (this.webAuthnPolicyAcceptableAaguids == null) {
      this.webAuthnPolicyAcceptableAaguids = new ArrayList<>();
    }
    this.webAuthnPolicyAcceptableAaguids.add(webAuthnPolicyAcceptableAaguidsItem);
    return this;
  }

  /**
   * Get webAuthnPolicyAcceptableAaguids
   * @return webAuthnPolicyAcceptableAaguids
   */
  @javax.annotation.Nullable
  public List<String> getWebAuthnPolicyAcceptableAaguids() {
    return webAuthnPolicyAcceptableAaguids;
  }

  public void setWebAuthnPolicyAcceptableAaguids(List<String> webAuthnPolicyAcceptableAaguids) {
    this.webAuthnPolicyAcceptableAaguids = webAuthnPolicyAcceptableAaguids;
  }


  public RealmRepresentation webAuthnPolicyAttestationConveyancePreference(String webAuthnPolicyAttestationConveyancePreference) {
    this.webAuthnPolicyAttestationConveyancePreference = webAuthnPolicyAttestationConveyancePreference;
    return this;
  }

  /**
   * Get webAuthnPolicyAttestationConveyancePreference
   * @return webAuthnPolicyAttestationConveyancePreference
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyAttestationConveyancePreference() {
    return webAuthnPolicyAttestationConveyancePreference;
  }

  public void setWebAuthnPolicyAttestationConveyancePreference(String webAuthnPolicyAttestationConveyancePreference) {
    this.webAuthnPolicyAttestationConveyancePreference = webAuthnPolicyAttestationConveyancePreference;
  }


  public RealmRepresentation webAuthnPolicyAuthenticatorAttachment(String webAuthnPolicyAuthenticatorAttachment) {
    this.webAuthnPolicyAuthenticatorAttachment = webAuthnPolicyAuthenticatorAttachment;
    return this;
  }

  /**
   * Get webAuthnPolicyAuthenticatorAttachment
   * @return webAuthnPolicyAuthenticatorAttachment
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyAuthenticatorAttachment() {
    return webAuthnPolicyAuthenticatorAttachment;
  }

  public void setWebAuthnPolicyAuthenticatorAttachment(String webAuthnPolicyAuthenticatorAttachment) {
    this.webAuthnPolicyAuthenticatorAttachment = webAuthnPolicyAuthenticatorAttachment;
  }


  public RealmRepresentation webAuthnPolicyAvoidSameAuthenticatorRegister(Boolean webAuthnPolicyAvoidSameAuthenticatorRegister) {
    this.webAuthnPolicyAvoidSameAuthenticatorRegister = webAuthnPolicyAvoidSameAuthenticatorRegister;
    return this;
  }

  /**
   * Get webAuthnPolicyAvoidSameAuthenticatorRegister
   * @return webAuthnPolicyAvoidSameAuthenticatorRegister
   */
  @javax.annotation.Nullable
  public Boolean getWebAuthnPolicyAvoidSameAuthenticatorRegister() {
    return webAuthnPolicyAvoidSameAuthenticatorRegister;
  }

  public void setWebAuthnPolicyAvoidSameAuthenticatorRegister(Boolean webAuthnPolicyAvoidSameAuthenticatorRegister) {
    this.webAuthnPolicyAvoidSameAuthenticatorRegister = webAuthnPolicyAvoidSameAuthenticatorRegister;
  }


  public RealmRepresentation webAuthnPolicyCreateTimeout(Integer webAuthnPolicyCreateTimeout) {
    this.webAuthnPolicyCreateTimeout = webAuthnPolicyCreateTimeout;
    return this;
  }

  /**
   * Get webAuthnPolicyCreateTimeout
   * @return webAuthnPolicyCreateTimeout
   */
  @javax.annotation.Nullable
  public Integer getWebAuthnPolicyCreateTimeout() {
    return webAuthnPolicyCreateTimeout;
  }

  public void setWebAuthnPolicyCreateTimeout(Integer webAuthnPolicyCreateTimeout) {
    this.webAuthnPolicyCreateTimeout = webAuthnPolicyCreateTimeout;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessAcceptableAaguids(List<String> webAuthnPolicyPasswordlessAcceptableAaguids) {
    this.webAuthnPolicyPasswordlessAcceptableAaguids = webAuthnPolicyPasswordlessAcceptableAaguids;
    return this;
  }

  public RealmRepresentation addWebAuthnPolicyPasswordlessAcceptableAaguidsItem(String webAuthnPolicyPasswordlessAcceptableAaguidsItem) {
    if (this.webAuthnPolicyPasswordlessAcceptableAaguids == null) {
      this.webAuthnPolicyPasswordlessAcceptableAaguids = new ArrayList<>();
    }
    this.webAuthnPolicyPasswordlessAcceptableAaguids.add(webAuthnPolicyPasswordlessAcceptableAaguidsItem);
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessAcceptableAaguids
   * @return webAuthnPolicyPasswordlessAcceptableAaguids
   */
  @javax.annotation.Nullable
  public List<String> getWebAuthnPolicyPasswordlessAcceptableAaguids() {
    return webAuthnPolicyPasswordlessAcceptableAaguids;
  }

  public void setWebAuthnPolicyPasswordlessAcceptableAaguids(List<String> webAuthnPolicyPasswordlessAcceptableAaguids) {
    this.webAuthnPolicyPasswordlessAcceptableAaguids = webAuthnPolicyPasswordlessAcceptableAaguids;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessAttestationConveyancePreference(String webAuthnPolicyPasswordlessAttestationConveyancePreference) {
    this.webAuthnPolicyPasswordlessAttestationConveyancePreference = webAuthnPolicyPasswordlessAttestationConveyancePreference;
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessAttestationConveyancePreference
   * @return webAuthnPolicyPasswordlessAttestationConveyancePreference
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyPasswordlessAttestationConveyancePreference() {
    return webAuthnPolicyPasswordlessAttestationConveyancePreference;
  }

  public void setWebAuthnPolicyPasswordlessAttestationConveyancePreference(String webAuthnPolicyPasswordlessAttestationConveyancePreference) {
    this.webAuthnPolicyPasswordlessAttestationConveyancePreference = webAuthnPolicyPasswordlessAttestationConveyancePreference;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessAuthenticatorAttachment(String webAuthnPolicyPasswordlessAuthenticatorAttachment) {
    this.webAuthnPolicyPasswordlessAuthenticatorAttachment = webAuthnPolicyPasswordlessAuthenticatorAttachment;
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessAuthenticatorAttachment
   * @return webAuthnPolicyPasswordlessAuthenticatorAttachment
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyPasswordlessAuthenticatorAttachment() {
    return webAuthnPolicyPasswordlessAuthenticatorAttachment;
  }

  public void setWebAuthnPolicyPasswordlessAuthenticatorAttachment(String webAuthnPolicyPasswordlessAuthenticatorAttachment) {
    this.webAuthnPolicyPasswordlessAuthenticatorAttachment = webAuthnPolicyPasswordlessAuthenticatorAttachment;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister(Boolean webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister) {
    this.webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister = webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister;
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister
   * @return webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister
   */
  @javax.annotation.Nullable
  public Boolean getWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister() {
    return webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister;
  }

  public void setWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister(Boolean webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister) {
    this.webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister = webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessCreateTimeout(Integer webAuthnPolicyPasswordlessCreateTimeout) {
    this.webAuthnPolicyPasswordlessCreateTimeout = webAuthnPolicyPasswordlessCreateTimeout;
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessCreateTimeout
   * @return webAuthnPolicyPasswordlessCreateTimeout
   */
  @javax.annotation.Nullable
  public Integer getWebAuthnPolicyPasswordlessCreateTimeout() {
    return webAuthnPolicyPasswordlessCreateTimeout;
  }

  public void setWebAuthnPolicyPasswordlessCreateTimeout(Integer webAuthnPolicyPasswordlessCreateTimeout) {
    this.webAuthnPolicyPasswordlessCreateTimeout = webAuthnPolicyPasswordlessCreateTimeout;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessRequireResidentKey(String webAuthnPolicyPasswordlessRequireResidentKey) {
    this.webAuthnPolicyPasswordlessRequireResidentKey = webAuthnPolicyPasswordlessRequireResidentKey;
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessRequireResidentKey
   * @return webAuthnPolicyPasswordlessRequireResidentKey
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyPasswordlessRequireResidentKey() {
    return webAuthnPolicyPasswordlessRequireResidentKey;
  }

  public void setWebAuthnPolicyPasswordlessRequireResidentKey(String webAuthnPolicyPasswordlessRequireResidentKey) {
    this.webAuthnPolicyPasswordlessRequireResidentKey = webAuthnPolicyPasswordlessRequireResidentKey;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessRpEntityName(String webAuthnPolicyPasswordlessRpEntityName) {
    this.webAuthnPolicyPasswordlessRpEntityName = webAuthnPolicyPasswordlessRpEntityName;
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessRpEntityName
   * @return webAuthnPolicyPasswordlessRpEntityName
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyPasswordlessRpEntityName() {
    return webAuthnPolicyPasswordlessRpEntityName;
  }

  public void setWebAuthnPolicyPasswordlessRpEntityName(String webAuthnPolicyPasswordlessRpEntityName) {
    this.webAuthnPolicyPasswordlessRpEntityName = webAuthnPolicyPasswordlessRpEntityName;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessRpId(String webAuthnPolicyPasswordlessRpId) {
    this.webAuthnPolicyPasswordlessRpId = webAuthnPolicyPasswordlessRpId;
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessRpId
   * @return webAuthnPolicyPasswordlessRpId
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyPasswordlessRpId() {
    return webAuthnPolicyPasswordlessRpId;
  }

  public void setWebAuthnPolicyPasswordlessRpId(String webAuthnPolicyPasswordlessRpId) {
    this.webAuthnPolicyPasswordlessRpId = webAuthnPolicyPasswordlessRpId;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessSignatureAlgorithms(List<String> webAuthnPolicyPasswordlessSignatureAlgorithms) {
    this.webAuthnPolicyPasswordlessSignatureAlgorithms = webAuthnPolicyPasswordlessSignatureAlgorithms;
    return this;
  }

  public RealmRepresentation addWebAuthnPolicyPasswordlessSignatureAlgorithmsItem(String webAuthnPolicyPasswordlessSignatureAlgorithmsItem) {
    if (this.webAuthnPolicyPasswordlessSignatureAlgorithms == null) {
      this.webAuthnPolicyPasswordlessSignatureAlgorithms = new ArrayList<>();
    }
    this.webAuthnPolicyPasswordlessSignatureAlgorithms.add(webAuthnPolicyPasswordlessSignatureAlgorithmsItem);
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessSignatureAlgorithms
   * @return webAuthnPolicyPasswordlessSignatureAlgorithms
   */
  @javax.annotation.Nullable
  public List<String> getWebAuthnPolicyPasswordlessSignatureAlgorithms() {
    return webAuthnPolicyPasswordlessSignatureAlgorithms;
  }

  public void setWebAuthnPolicyPasswordlessSignatureAlgorithms(List<String> webAuthnPolicyPasswordlessSignatureAlgorithms) {
    this.webAuthnPolicyPasswordlessSignatureAlgorithms = webAuthnPolicyPasswordlessSignatureAlgorithms;
  }


  public RealmRepresentation webAuthnPolicyPasswordlessUserVerificationRequirement(String webAuthnPolicyPasswordlessUserVerificationRequirement) {
    this.webAuthnPolicyPasswordlessUserVerificationRequirement = webAuthnPolicyPasswordlessUserVerificationRequirement;
    return this;
  }

  /**
   * Get webAuthnPolicyPasswordlessUserVerificationRequirement
   * @return webAuthnPolicyPasswordlessUserVerificationRequirement
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyPasswordlessUserVerificationRequirement() {
    return webAuthnPolicyPasswordlessUserVerificationRequirement;
  }

  public void setWebAuthnPolicyPasswordlessUserVerificationRequirement(String webAuthnPolicyPasswordlessUserVerificationRequirement) {
    this.webAuthnPolicyPasswordlessUserVerificationRequirement = webAuthnPolicyPasswordlessUserVerificationRequirement;
  }


  public RealmRepresentation webAuthnPolicyRequireResidentKey(String webAuthnPolicyRequireResidentKey) {
    this.webAuthnPolicyRequireResidentKey = webAuthnPolicyRequireResidentKey;
    return this;
  }

  /**
   * Get webAuthnPolicyRequireResidentKey
   * @return webAuthnPolicyRequireResidentKey
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyRequireResidentKey() {
    return webAuthnPolicyRequireResidentKey;
  }

  public void setWebAuthnPolicyRequireResidentKey(String webAuthnPolicyRequireResidentKey) {
    this.webAuthnPolicyRequireResidentKey = webAuthnPolicyRequireResidentKey;
  }


  public RealmRepresentation webAuthnPolicyRpEntityName(String webAuthnPolicyRpEntityName) {
    this.webAuthnPolicyRpEntityName = webAuthnPolicyRpEntityName;
    return this;
  }

  /**
   * Get webAuthnPolicyRpEntityName
   * @return webAuthnPolicyRpEntityName
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyRpEntityName() {
    return webAuthnPolicyRpEntityName;
  }

  public void setWebAuthnPolicyRpEntityName(String webAuthnPolicyRpEntityName) {
    this.webAuthnPolicyRpEntityName = webAuthnPolicyRpEntityName;
  }


  public RealmRepresentation webAuthnPolicyRpId(String webAuthnPolicyRpId) {
    this.webAuthnPolicyRpId = webAuthnPolicyRpId;
    return this;
  }

  /**
   * Get webAuthnPolicyRpId
   * @return webAuthnPolicyRpId
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyRpId() {
    return webAuthnPolicyRpId;
  }

  public void setWebAuthnPolicyRpId(String webAuthnPolicyRpId) {
    this.webAuthnPolicyRpId = webAuthnPolicyRpId;
  }


  public RealmRepresentation webAuthnPolicySignatureAlgorithms(List<String> webAuthnPolicySignatureAlgorithms) {
    this.webAuthnPolicySignatureAlgorithms = webAuthnPolicySignatureAlgorithms;
    return this;
  }

  public RealmRepresentation addWebAuthnPolicySignatureAlgorithmsItem(String webAuthnPolicySignatureAlgorithmsItem) {
    if (this.webAuthnPolicySignatureAlgorithms == null) {
      this.webAuthnPolicySignatureAlgorithms = new ArrayList<>();
    }
    this.webAuthnPolicySignatureAlgorithms.add(webAuthnPolicySignatureAlgorithmsItem);
    return this;
  }

  /**
   * Get webAuthnPolicySignatureAlgorithms
   * @return webAuthnPolicySignatureAlgorithms
   */
  @javax.annotation.Nullable
  public List<String> getWebAuthnPolicySignatureAlgorithms() {
    return webAuthnPolicySignatureAlgorithms;
  }

  public void setWebAuthnPolicySignatureAlgorithms(List<String> webAuthnPolicySignatureAlgorithms) {
    this.webAuthnPolicySignatureAlgorithms = webAuthnPolicySignatureAlgorithms;
  }


  public RealmRepresentation webAuthnPolicyUserVerificationRequirement(String webAuthnPolicyUserVerificationRequirement) {
    this.webAuthnPolicyUserVerificationRequirement = webAuthnPolicyUserVerificationRequirement;
    return this;
  }

  /**
   * Get webAuthnPolicyUserVerificationRequirement
   * @return webAuthnPolicyUserVerificationRequirement
   */
  @javax.annotation.Nullable
  public String getWebAuthnPolicyUserVerificationRequirement() {
    return webAuthnPolicyUserVerificationRequirement;
  }

  public void setWebAuthnPolicyUserVerificationRequirement(String webAuthnPolicyUserVerificationRequirement) {
    this.webAuthnPolicyUserVerificationRequirement = webAuthnPolicyUserVerificationRequirement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealmRepresentation realmRepresentation = (RealmRepresentation) o;
    return Objects.equals(this.accessCodeLifespan, realmRepresentation.accessCodeLifespan) &&
        Objects.equals(this.accessCodeLifespanLogin, realmRepresentation.accessCodeLifespanLogin) &&
        Objects.equals(this.accessCodeLifespanUserAction, realmRepresentation.accessCodeLifespanUserAction) &&
        Objects.equals(this.accessTokenLifespan, realmRepresentation.accessTokenLifespan) &&
        Objects.equals(this.accessTokenLifespanForImplicitFlow, realmRepresentation.accessTokenLifespanForImplicitFlow) &&
        Objects.equals(this.accountTheme, realmRepresentation.accountTheme) &&
        Objects.equals(this.actionTokenGeneratedByAdminLifespan, realmRepresentation.actionTokenGeneratedByAdminLifespan) &&
        Objects.equals(this.actionTokenGeneratedByUserLifespan, realmRepresentation.actionTokenGeneratedByUserLifespan) &&
        Objects.equals(this.adminEventsDetailsEnabled, realmRepresentation.adminEventsDetailsEnabled) &&
        Objects.equals(this.adminEventsEnabled, realmRepresentation.adminEventsEnabled) &&
        Objects.equals(this.adminTheme, realmRepresentation.adminTheme) &&
        Objects.equals(this.attributes, realmRepresentation.attributes) &&
        Objects.equals(this.authenticationFlows, realmRepresentation.authenticationFlows) &&
        Objects.equals(this.authenticatorConfig, realmRepresentation.authenticatorConfig) &&
        Objects.equals(this.browserFlow, realmRepresentation.browserFlow) &&
        Objects.equals(this.browserSecurityHeaders, realmRepresentation.browserSecurityHeaders) &&
        Objects.equals(this.bruteForceProtected, realmRepresentation.bruteForceProtected) &&
        Objects.equals(this.clientAuthenticationFlow, realmRepresentation.clientAuthenticationFlow) &&
        Objects.equals(this.clientScopeMappings, realmRepresentation.clientScopeMappings) &&
        Objects.equals(this.clientScopes, realmRepresentation.clientScopes) &&
        Objects.equals(this.clientSessionIdleTimeout, realmRepresentation.clientSessionIdleTimeout) &&
        Objects.equals(this.clientSessionMaxLifespan, realmRepresentation.clientSessionMaxLifespan) &&
        Objects.equals(this.clients, realmRepresentation.clients) &&
        Objects.equals(this.components, realmRepresentation.components) &&
        Objects.equals(this.defaultDefaultClientScopes, realmRepresentation.defaultDefaultClientScopes) &&
        Objects.equals(this.defaultGroups, realmRepresentation.defaultGroups) &&
        Objects.equals(this.defaultLocale, realmRepresentation.defaultLocale) &&
        Objects.equals(this.defaultOptionalClientScopes, realmRepresentation.defaultOptionalClientScopes) &&
        Objects.equals(this.defaultRoles, realmRepresentation.defaultRoles) &&
        Objects.equals(this.defaultSignatureAlgorithm, realmRepresentation.defaultSignatureAlgorithm) &&
        Objects.equals(this.directGrantFlow, realmRepresentation.directGrantFlow) &&
        Objects.equals(this.displayName, realmRepresentation.displayName) &&
        Objects.equals(this.displayNameHtml, realmRepresentation.displayNameHtml) &&
        Objects.equals(this.dockerAuthenticationFlow, realmRepresentation.dockerAuthenticationFlow) &&
        Objects.equals(this.duplicateEmailsAllowed, realmRepresentation.duplicateEmailsAllowed) &&
        Objects.equals(this.editUsernameAllowed, realmRepresentation.editUsernameAllowed) &&
        Objects.equals(this.emailTheme, realmRepresentation.emailTheme) &&
        Objects.equals(this.enabled, realmRepresentation.enabled) &&
        Objects.equals(this.enabledEventTypes, realmRepresentation.enabledEventTypes) &&
        Objects.equals(this.eventsEnabled, realmRepresentation.eventsEnabled) &&
        Objects.equals(this.eventsExpiration, realmRepresentation.eventsExpiration) &&
        Objects.equals(this.eventsListeners, realmRepresentation.eventsListeners) &&
        Objects.equals(this.failureFactor, realmRepresentation.failureFactor) &&
        Objects.equals(this.federatedUsers, realmRepresentation.federatedUsers) &&
        Objects.equals(this.groups, realmRepresentation.groups) &&
        Objects.equals(this.id, realmRepresentation.id) &&
        Objects.equals(this.identityProviderMappers, realmRepresentation.identityProviderMappers) &&
        Objects.equals(this.identityProviders, realmRepresentation.identityProviders) &&
        Objects.equals(this.internationalizationEnabled, realmRepresentation.internationalizationEnabled) &&
        Objects.equals(this.keycloakVersion, realmRepresentation.keycloakVersion) &&
        Objects.equals(this.loginTheme, realmRepresentation.loginTheme) &&
        Objects.equals(this.loginWithEmailAllowed, realmRepresentation.loginWithEmailAllowed) &&
        Objects.equals(this.maxDeltaTimeSeconds, realmRepresentation.maxDeltaTimeSeconds) &&
        Objects.equals(this.maxFailureWaitSeconds, realmRepresentation.maxFailureWaitSeconds) &&
        Objects.equals(this.minimumQuickLoginWaitSeconds, realmRepresentation.minimumQuickLoginWaitSeconds) &&
        Objects.equals(this.notBefore, realmRepresentation.notBefore) &&
        Objects.equals(this.offlineSessionIdleTimeout, realmRepresentation.offlineSessionIdleTimeout) &&
        Objects.equals(this.offlineSessionMaxLifespan, realmRepresentation.offlineSessionMaxLifespan) &&
        Objects.equals(this.offlineSessionMaxLifespanEnabled, realmRepresentation.offlineSessionMaxLifespanEnabled) &&
        Objects.equals(this.otpPolicyAlgorithm, realmRepresentation.otpPolicyAlgorithm) &&
        Objects.equals(this.otpPolicyDigits, realmRepresentation.otpPolicyDigits) &&
        Objects.equals(this.otpPolicyInitialCounter, realmRepresentation.otpPolicyInitialCounter) &&
        Objects.equals(this.otpPolicyLookAheadWindow, realmRepresentation.otpPolicyLookAheadWindow) &&
        Objects.equals(this.otpPolicyPeriod, realmRepresentation.otpPolicyPeriod) &&
        Objects.equals(this.otpPolicyType, realmRepresentation.otpPolicyType) &&
        Objects.equals(this.otpSupportedApplications, realmRepresentation.otpSupportedApplications) &&
        Objects.equals(this.passwordPolicy, realmRepresentation.passwordPolicy) &&
        Objects.equals(this.permanentLockout, realmRepresentation.permanentLockout) &&
        Objects.equals(this.protocolMappers, realmRepresentation.protocolMappers) &&
        Objects.equals(this.quickLoginCheckMilliSeconds, realmRepresentation.quickLoginCheckMilliSeconds) &&
        Objects.equals(this.realm, realmRepresentation.realm) &&
        Objects.equals(this.refreshTokenMaxReuse, realmRepresentation.refreshTokenMaxReuse) &&
        Objects.equals(this.registrationAllowed, realmRepresentation.registrationAllowed) &&
        Objects.equals(this.registrationEmailAsUsername, realmRepresentation.registrationEmailAsUsername) &&
        Objects.equals(this.registrationFlow, realmRepresentation.registrationFlow) &&
        Objects.equals(this.rememberMe, realmRepresentation.rememberMe) &&
        Objects.equals(this.requiredActions, realmRepresentation.requiredActions) &&
        Objects.equals(this.resetCredentialsFlow, realmRepresentation.resetCredentialsFlow) &&
        Objects.equals(this.resetPasswordAllowed, realmRepresentation.resetPasswordAllowed) &&
        Objects.equals(this.revokeRefreshToken, realmRepresentation.revokeRefreshToken) &&
        Objects.equals(this.roles, realmRepresentation.roles) &&
        Objects.equals(this.scopeMappings, realmRepresentation.scopeMappings) &&
        Objects.equals(this.smtpServer, realmRepresentation.smtpServer) &&
        Objects.equals(this.sslRequired, realmRepresentation.sslRequired) &&
        Objects.equals(this.ssoSessionIdleTimeout, realmRepresentation.ssoSessionIdleTimeout) &&
        Objects.equals(this.ssoSessionIdleTimeoutRememberMe, realmRepresentation.ssoSessionIdleTimeoutRememberMe) &&
        Objects.equals(this.ssoSessionMaxLifespan, realmRepresentation.ssoSessionMaxLifespan) &&
        Objects.equals(this.ssoSessionMaxLifespanRememberMe, realmRepresentation.ssoSessionMaxLifespanRememberMe) &&
        Objects.equals(this.supportedLocales, realmRepresentation.supportedLocales) &&
        Objects.equals(this.userFederationMappers, realmRepresentation.userFederationMappers) &&
        Objects.equals(this.userFederationProviders, realmRepresentation.userFederationProviders) &&
        Objects.equals(this.userManagedAccessAllowed, realmRepresentation.userManagedAccessAllowed) &&
        Objects.equals(this.users, realmRepresentation.users) &&
        Objects.equals(this.verifyEmail, realmRepresentation.verifyEmail) &&
        Objects.equals(this.waitIncrementSeconds, realmRepresentation.waitIncrementSeconds) &&
        Objects.equals(this.webAuthnPolicyAcceptableAaguids, realmRepresentation.webAuthnPolicyAcceptableAaguids) &&
        Objects.equals(this.webAuthnPolicyAttestationConveyancePreference, realmRepresentation.webAuthnPolicyAttestationConveyancePreference) &&
        Objects.equals(this.webAuthnPolicyAuthenticatorAttachment, realmRepresentation.webAuthnPolicyAuthenticatorAttachment) &&
        Objects.equals(this.webAuthnPolicyAvoidSameAuthenticatorRegister, realmRepresentation.webAuthnPolicyAvoidSameAuthenticatorRegister) &&
        Objects.equals(this.webAuthnPolicyCreateTimeout, realmRepresentation.webAuthnPolicyCreateTimeout) &&
        Objects.equals(this.webAuthnPolicyPasswordlessAcceptableAaguids, realmRepresentation.webAuthnPolicyPasswordlessAcceptableAaguids) &&
        Objects.equals(this.webAuthnPolicyPasswordlessAttestationConveyancePreference, realmRepresentation.webAuthnPolicyPasswordlessAttestationConveyancePreference) &&
        Objects.equals(this.webAuthnPolicyPasswordlessAuthenticatorAttachment, realmRepresentation.webAuthnPolicyPasswordlessAuthenticatorAttachment) &&
        Objects.equals(this.webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister, realmRepresentation.webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister) &&
        Objects.equals(this.webAuthnPolicyPasswordlessCreateTimeout, realmRepresentation.webAuthnPolicyPasswordlessCreateTimeout) &&
        Objects.equals(this.webAuthnPolicyPasswordlessRequireResidentKey, realmRepresentation.webAuthnPolicyPasswordlessRequireResidentKey) &&
        Objects.equals(this.webAuthnPolicyPasswordlessRpEntityName, realmRepresentation.webAuthnPolicyPasswordlessRpEntityName) &&
        Objects.equals(this.webAuthnPolicyPasswordlessRpId, realmRepresentation.webAuthnPolicyPasswordlessRpId) &&
        Objects.equals(this.webAuthnPolicyPasswordlessSignatureAlgorithms, realmRepresentation.webAuthnPolicyPasswordlessSignatureAlgorithms) &&
        Objects.equals(this.webAuthnPolicyPasswordlessUserVerificationRequirement, realmRepresentation.webAuthnPolicyPasswordlessUserVerificationRequirement) &&
        Objects.equals(this.webAuthnPolicyRequireResidentKey, realmRepresentation.webAuthnPolicyRequireResidentKey) &&
        Objects.equals(this.webAuthnPolicyRpEntityName, realmRepresentation.webAuthnPolicyRpEntityName) &&
        Objects.equals(this.webAuthnPolicyRpId, realmRepresentation.webAuthnPolicyRpId) &&
        Objects.equals(this.webAuthnPolicySignatureAlgorithms, realmRepresentation.webAuthnPolicySignatureAlgorithms) &&
        Objects.equals(this.webAuthnPolicyUserVerificationRequirement, realmRepresentation.webAuthnPolicyUserVerificationRequirement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessCodeLifespan, accessCodeLifespanLogin, accessCodeLifespanUserAction, accessTokenLifespan, accessTokenLifespanForImplicitFlow, accountTheme, actionTokenGeneratedByAdminLifespan, actionTokenGeneratedByUserLifespan, adminEventsDetailsEnabled, adminEventsEnabled, adminTheme, attributes, authenticationFlows, authenticatorConfig, browserFlow, browserSecurityHeaders, bruteForceProtected, clientAuthenticationFlow, clientScopeMappings, clientScopes, clientSessionIdleTimeout, clientSessionMaxLifespan, clients, components, defaultDefaultClientScopes, defaultGroups, defaultLocale, defaultOptionalClientScopes, defaultRoles, defaultSignatureAlgorithm, directGrantFlow, displayName, displayNameHtml, dockerAuthenticationFlow, duplicateEmailsAllowed, editUsernameAllowed, emailTheme, enabled, enabledEventTypes, eventsEnabled, eventsExpiration, eventsListeners, failureFactor, federatedUsers, groups, id, identityProviderMappers, identityProviders, internationalizationEnabled, keycloakVersion, loginTheme, loginWithEmailAllowed, maxDeltaTimeSeconds, maxFailureWaitSeconds, minimumQuickLoginWaitSeconds, notBefore, offlineSessionIdleTimeout, offlineSessionMaxLifespan, offlineSessionMaxLifespanEnabled, otpPolicyAlgorithm, otpPolicyDigits, otpPolicyInitialCounter, otpPolicyLookAheadWindow, otpPolicyPeriod, otpPolicyType, otpSupportedApplications, passwordPolicy, permanentLockout, protocolMappers, quickLoginCheckMilliSeconds, realm, refreshTokenMaxReuse, registrationAllowed, registrationEmailAsUsername, registrationFlow, rememberMe, requiredActions, resetCredentialsFlow, resetPasswordAllowed, revokeRefreshToken, roles, scopeMappings, smtpServer, sslRequired, ssoSessionIdleTimeout, ssoSessionIdleTimeoutRememberMe, ssoSessionMaxLifespan, ssoSessionMaxLifespanRememberMe, supportedLocales, userFederationMappers, userFederationProviders, userManagedAccessAllowed, users, verifyEmail, waitIncrementSeconds, webAuthnPolicyAcceptableAaguids, webAuthnPolicyAttestationConveyancePreference, webAuthnPolicyAuthenticatorAttachment, webAuthnPolicyAvoidSameAuthenticatorRegister, webAuthnPolicyCreateTimeout, webAuthnPolicyPasswordlessAcceptableAaguids, webAuthnPolicyPasswordlessAttestationConveyancePreference, webAuthnPolicyPasswordlessAuthenticatorAttachment, webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister, webAuthnPolicyPasswordlessCreateTimeout, webAuthnPolicyPasswordlessRequireResidentKey, webAuthnPolicyPasswordlessRpEntityName, webAuthnPolicyPasswordlessRpId, webAuthnPolicyPasswordlessSignatureAlgorithms, webAuthnPolicyPasswordlessUserVerificationRequirement, webAuthnPolicyRequireResidentKey, webAuthnPolicyRpEntityName, webAuthnPolicyRpId, webAuthnPolicySignatureAlgorithms, webAuthnPolicyUserVerificationRequirement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealmRepresentation {\n");
    sb.append("    accessCodeLifespan: ").append(toIndentedString(accessCodeLifespan)).append("\n");
    sb.append("    accessCodeLifespanLogin: ").append(toIndentedString(accessCodeLifespanLogin)).append("\n");
    sb.append("    accessCodeLifespanUserAction: ").append(toIndentedString(accessCodeLifespanUserAction)).append("\n");
    sb.append("    accessTokenLifespan: ").append(toIndentedString(accessTokenLifespan)).append("\n");
    sb.append("    accessTokenLifespanForImplicitFlow: ").append(toIndentedString(accessTokenLifespanForImplicitFlow)).append("\n");
    sb.append("    accountTheme: ").append(toIndentedString(accountTheme)).append("\n");
    sb.append("    actionTokenGeneratedByAdminLifespan: ").append(toIndentedString(actionTokenGeneratedByAdminLifespan)).append("\n");
    sb.append("    actionTokenGeneratedByUserLifespan: ").append(toIndentedString(actionTokenGeneratedByUserLifespan)).append("\n");
    sb.append("    adminEventsDetailsEnabled: ").append(toIndentedString(adminEventsDetailsEnabled)).append("\n");
    sb.append("    adminEventsEnabled: ").append(toIndentedString(adminEventsEnabled)).append("\n");
    sb.append("    adminTheme: ").append(toIndentedString(adminTheme)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    authenticationFlows: ").append(toIndentedString(authenticationFlows)).append("\n");
    sb.append("    authenticatorConfig: ").append(toIndentedString(authenticatorConfig)).append("\n");
    sb.append("    browserFlow: ").append(toIndentedString(browserFlow)).append("\n");
    sb.append("    browserSecurityHeaders: ").append(toIndentedString(browserSecurityHeaders)).append("\n");
    sb.append("    bruteForceProtected: ").append(toIndentedString(bruteForceProtected)).append("\n");
    sb.append("    clientAuthenticationFlow: ").append(toIndentedString(clientAuthenticationFlow)).append("\n");
    sb.append("    clientScopeMappings: ").append(toIndentedString(clientScopeMappings)).append("\n");
    sb.append("    clientScopes: ").append(toIndentedString(clientScopes)).append("\n");
    sb.append("    clientSessionIdleTimeout: ").append(toIndentedString(clientSessionIdleTimeout)).append("\n");
    sb.append("    clientSessionMaxLifespan: ").append(toIndentedString(clientSessionMaxLifespan)).append("\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    defaultDefaultClientScopes: ").append(toIndentedString(defaultDefaultClientScopes)).append("\n");
    sb.append("    defaultGroups: ").append(toIndentedString(defaultGroups)).append("\n");
    sb.append("    defaultLocale: ").append(toIndentedString(defaultLocale)).append("\n");
    sb.append("    defaultOptionalClientScopes: ").append(toIndentedString(defaultOptionalClientScopes)).append("\n");
    sb.append("    defaultRoles: ").append(toIndentedString(defaultRoles)).append("\n");
    sb.append("    defaultSignatureAlgorithm: ").append(toIndentedString(defaultSignatureAlgorithm)).append("\n");
    sb.append("    directGrantFlow: ").append(toIndentedString(directGrantFlow)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    displayNameHtml: ").append(toIndentedString(displayNameHtml)).append("\n");
    sb.append("    dockerAuthenticationFlow: ").append(toIndentedString(dockerAuthenticationFlow)).append("\n");
    sb.append("    duplicateEmailsAllowed: ").append(toIndentedString(duplicateEmailsAllowed)).append("\n");
    sb.append("    editUsernameAllowed: ").append(toIndentedString(editUsernameAllowed)).append("\n");
    sb.append("    emailTheme: ").append(toIndentedString(emailTheme)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    enabledEventTypes: ").append(toIndentedString(enabledEventTypes)).append("\n");
    sb.append("    eventsEnabled: ").append(toIndentedString(eventsEnabled)).append("\n");
    sb.append("    eventsExpiration: ").append(toIndentedString(eventsExpiration)).append("\n");
    sb.append("    eventsListeners: ").append(toIndentedString(eventsListeners)).append("\n");
    sb.append("    failureFactor: ").append(toIndentedString(failureFactor)).append("\n");
    sb.append("    federatedUsers: ").append(toIndentedString(federatedUsers)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identityProviderMappers: ").append(toIndentedString(identityProviderMappers)).append("\n");
    sb.append("    identityProviders: ").append(toIndentedString(identityProviders)).append("\n");
    sb.append("    internationalizationEnabled: ").append(toIndentedString(internationalizationEnabled)).append("\n");
    sb.append("    keycloakVersion: ").append(toIndentedString(keycloakVersion)).append("\n");
    sb.append("    loginTheme: ").append(toIndentedString(loginTheme)).append("\n");
    sb.append("    loginWithEmailAllowed: ").append(toIndentedString(loginWithEmailAllowed)).append("\n");
    sb.append("    maxDeltaTimeSeconds: ").append(toIndentedString(maxDeltaTimeSeconds)).append("\n");
    sb.append("    maxFailureWaitSeconds: ").append(toIndentedString(maxFailureWaitSeconds)).append("\n");
    sb.append("    minimumQuickLoginWaitSeconds: ").append(toIndentedString(minimumQuickLoginWaitSeconds)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    offlineSessionIdleTimeout: ").append(toIndentedString(offlineSessionIdleTimeout)).append("\n");
    sb.append("    offlineSessionMaxLifespan: ").append(toIndentedString(offlineSessionMaxLifespan)).append("\n");
    sb.append("    offlineSessionMaxLifespanEnabled: ").append(toIndentedString(offlineSessionMaxLifespanEnabled)).append("\n");
    sb.append("    otpPolicyAlgorithm: ").append(toIndentedString(otpPolicyAlgorithm)).append("\n");
    sb.append("    otpPolicyDigits: ").append(toIndentedString(otpPolicyDigits)).append("\n");
    sb.append("    otpPolicyInitialCounter: ").append(toIndentedString(otpPolicyInitialCounter)).append("\n");
    sb.append("    otpPolicyLookAheadWindow: ").append(toIndentedString(otpPolicyLookAheadWindow)).append("\n");
    sb.append("    otpPolicyPeriod: ").append(toIndentedString(otpPolicyPeriod)).append("\n");
    sb.append("    otpPolicyType: ").append(toIndentedString(otpPolicyType)).append("\n");
    sb.append("    otpSupportedApplications: ").append(toIndentedString(otpSupportedApplications)).append("\n");
    sb.append("    passwordPolicy: ").append(toIndentedString(passwordPolicy)).append("\n");
    sb.append("    permanentLockout: ").append(toIndentedString(permanentLockout)).append("\n");
    sb.append("    protocolMappers: ").append(toIndentedString(protocolMappers)).append("\n");
    sb.append("    quickLoginCheckMilliSeconds: ").append(toIndentedString(quickLoginCheckMilliSeconds)).append("\n");
    sb.append("    realm: ").append(toIndentedString(realm)).append("\n");
    sb.append("    refreshTokenMaxReuse: ").append(toIndentedString(refreshTokenMaxReuse)).append("\n");
    sb.append("    registrationAllowed: ").append(toIndentedString(registrationAllowed)).append("\n");
    sb.append("    registrationEmailAsUsername: ").append(toIndentedString(registrationEmailAsUsername)).append("\n");
    sb.append("    registrationFlow: ").append(toIndentedString(registrationFlow)).append("\n");
    sb.append("    rememberMe: ").append(toIndentedString(rememberMe)).append("\n");
    sb.append("    requiredActions: ").append(toIndentedString(requiredActions)).append("\n");
    sb.append("    resetCredentialsFlow: ").append(toIndentedString(resetCredentialsFlow)).append("\n");
    sb.append("    resetPasswordAllowed: ").append(toIndentedString(resetPasswordAllowed)).append("\n");
    sb.append("    revokeRefreshToken: ").append(toIndentedString(revokeRefreshToken)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    scopeMappings: ").append(toIndentedString(scopeMappings)).append("\n");
    sb.append("    smtpServer: ").append(toIndentedString(smtpServer)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("    ssoSessionIdleTimeout: ").append(toIndentedString(ssoSessionIdleTimeout)).append("\n");
    sb.append("    ssoSessionIdleTimeoutRememberMe: ").append(toIndentedString(ssoSessionIdleTimeoutRememberMe)).append("\n");
    sb.append("    ssoSessionMaxLifespan: ").append(toIndentedString(ssoSessionMaxLifespan)).append("\n");
    sb.append("    ssoSessionMaxLifespanRememberMe: ").append(toIndentedString(ssoSessionMaxLifespanRememberMe)).append("\n");
    sb.append("    supportedLocales: ").append(toIndentedString(supportedLocales)).append("\n");
    sb.append("    userFederationMappers: ").append(toIndentedString(userFederationMappers)).append("\n");
    sb.append("    userFederationProviders: ").append(toIndentedString(userFederationProviders)).append("\n");
    sb.append("    userManagedAccessAllowed: ").append(toIndentedString(userManagedAccessAllowed)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    verifyEmail: ").append(toIndentedString(verifyEmail)).append("\n");
    sb.append("    waitIncrementSeconds: ").append(toIndentedString(waitIncrementSeconds)).append("\n");
    sb.append("    webAuthnPolicyAcceptableAaguids: ").append(toIndentedString(webAuthnPolicyAcceptableAaguids)).append("\n");
    sb.append("    webAuthnPolicyAttestationConveyancePreference: ").append(toIndentedString(webAuthnPolicyAttestationConveyancePreference)).append("\n");
    sb.append("    webAuthnPolicyAuthenticatorAttachment: ").append(toIndentedString(webAuthnPolicyAuthenticatorAttachment)).append("\n");
    sb.append("    webAuthnPolicyAvoidSameAuthenticatorRegister: ").append(toIndentedString(webAuthnPolicyAvoidSameAuthenticatorRegister)).append("\n");
    sb.append("    webAuthnPolicyCreateTimeout: ").append(toIndentedString(webAuthnPolicyCreateTimeout)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessAcceptableAaguids: ").append(toIndentedString(webAuthnPolicyPasswordlessAcceptableAaguids)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessAttestationConveyancePreference: ").append(toIndentedString(webAuthnPolicyPasswordlessAttestationConveyancePreference)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessAuthenticatorAttachment: ").append(toIndentedString(webAuthnPolicyPasswordlessAuthenticatorAttachment)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister: ").append(toIndentedString(webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessCreateTimeout: ").append(toIndentedString(webAuthnPolicyPasswordlessCreateTimeout)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessRequireResidentKey: ").append(toIndentedString(webAuthnPolicyPasswordlessRequireResidentKey)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessRpEntityName: ").append(toIndentedString(webAuthnPolicyPasswordlessRpEntityName)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessRpId: ").append(toIndentedString(webAuthnPolicyPasswordlessRpId)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessSignatureAlgorithms: ").append(toIndentedString(webAuthnPolicyPasswordlessSignatureAlgorithms)).append("\n");
    sb.append("    webAuthnPolicyPasswordlessUserVerificationRequirement: ").append(toIndentedString(webAuthnPolicyPasswordlessUserVerificationRequirement)).append("\n");
    sb.append("    webAuthnPolicyRequireResidentKey: ").append(toIndentedString(webAuthnPolicyRequireResidentKey)).append("\n");
    sb.append("    webAuthnPolicyRpEntityName: ").append(toIndentedString(webAuthnPolicyRpEntityName)).append("\n");
    sb.append("    webAuthnPolicyRpId: ").append(toIndentedString(webAuthnPolicyRpId)).append("\n");
    sb.append("    webAuthnPolicySignatureAlgorithms: ").append(toIndentedString(webAuthnPolicySignatureAlgorithms)).append("\n");
    sb.append("    webAuthnPolicyUserVerificationRequirement: ").append(toIndentedString(webAuthnPolicyUserVerificationRequirement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessCodeLifespan");
    openapiFields.add("accessCodeLifespanLogin");
    openapiFields.add("accessCodeLifespanUserAction");
    openapiFields.add("accessTokenLifespan");
    openapiFields.add("accessTokenLifespanForImplicitFlow");
    openapiFields.add("accountTheme");
    openapiFields.add("actionTokenGeneratedByAdminLifespan");
    openapiFields.add("actionTokenGeneratedByUserLifespan");
    openapiFields.add("adminEventsDetailsEnabled");
    openapiFields.add("adminEventsEnabled");
    openapiFields.add("adminTheme");
    openapiFields.add("attributes");
    openapiFields.add("authenticationFlows");
    openapiFields.add("authenticatorConfig");
    openapiFields.add("browserFlow");
    openapiFields.add("browserSecurityHeaders");
    openapiFields.add("bruteForceProtected");
    openapiFields.add("clientAuthenticationFlow");
    openapiFields.add("clientScopeMappings");
    openapiFields.add("clientScopes");
    openapiFields.add("clientSessionIdleTimeout");
    openapiFields.add("clientSessionMaxLifespan");
    openapiFields.add("clients");
    openapiFields.add("components");
    openapiFields.add("defaultDefaultClientScopes");
    openapiFields.add("defaultGroups");
    openapiFields.add("defaultLocale");
    openapiFields.add("defaultOptionalClientScopes");
    openapiFields.add("defaultRoles");
    openapiFields.add("defaultSignatureAlgorithm");
    openapiFields.add("directGrantFlow");
    openapiFields.add("displayName");
    openapiFields.add("displayNameHtml");
    openapiFields.add("dockerAuthenticationFlow");
    openapiFields.add("duplicateEmailsAllowed");
    openapiFields.add("editUsernameAllowed");
    openapiFields.add("emailTheme");
    openapiFields.add("enabled");
    openapiFields.add("enabledEventTypes");
    openapiFields.add("eventsEnabled");
    openapiFields.add("eventsExpiration");
    openapiFields.add("eventsListeners");
    openapiFields.add("failureFactor");
    openapiFields.add("federatedUsers");
    openapiFields.add("groups");
    openapiFields.add("id");
    openapiFields.add("identityProviderMappers");
    openapiFields.add("identityProviders");
    openapiFields.add("internationalizationEnabled");
    openapiFields.add("keycloakVersion");
    openapiFields.add("loginTheme");
    openapiFields.add("loginWithEmailAllowed");
    openapiFields.add("maxDeltaTimeSeconds");
    openapiFields.add("maxFailureWaitSeconds");
    openapiFields.add("minimumQuickLoginWaitSeconds");
    openapiFields.add("notBefore");
    openapiFields.add("offlineSessionIdleTimeout");
    openapiFields.add("offlineSessionMaxLifespan");
    openapiFields.add("offlineSessionMaxLifespanEnabled");
    openapiFields.add("otpPolicyAlgorithm");
    openapiFields.add("otpPolicyDigits");
    openapiFields.add("otpPolicyInitialCounter");
    openapiFields.add("otpPolicyLookAheadWindow");
    openapiFields.add("otpPolicyPeriod");
    openapiFields.add("otpPolicyType");
    openapiFields.add("otpSupportedApplications");
    openapiFields.add("passwordPolicy");
    openapiFields.add("permanentLockout");
    openapiFields.add("protocolMappers");
    openapiFields.add("quickLoginCheckMilliSeconds");
    openapiFields.add("realm");
    openapiFields.add("refreshTokenMaxReuse");
    openapiFields.add("registrationAllowed");
    openapiFields.add("registrationEmailAsUsername");
    openapiFields.add("registrationFlow");
    openapiFields.add("rememberMe");
    openapiFields.add("requiredActions");
    openapiFields.add("resetCredentialsFlow");
    openapiFields.add("resetPasswordAllowed");
    openapiFields.add("revokeRefreshToken");
    openapiFields.add("roles");
    openapiFields.add("scopeMappings");
    openapiFields.add("smtpServer");
    openapiFields.add("sslRequired");
    openapiFields.add("ssoSessionIdleTimeout");
    openapiFields.add("ssoSessionIdleTimeoutRememberMe");
    openapiFields.add("ssoSessionMaxLifespan");
    openapiFields.add("ssoSessionMaxLifespanRememberMe");
    openapiFields.add("supportedLocales");
    openapiFields.add("userFederationMappers");
    openapiFields.add("userFederationProviders");
    openapiFields.add("userManagedAccessAllowed");
    openapiFields.add("users");
    openapiFields.add("verifyEmail");
    openapiFields.add("waitIncrementSeconds");
    openapiFields.add("webAuthnPolicyAcceptableAaguids");
    openapiFields.add("webAuthnPolicyAttestationConveyancePreference");
    openapiFields.add("webAuthnPolicyAuthenticatorAttachment");
    openapiFields.add("webAuthnPolicyAvoidSameAuthenticatorRegister");
    openapiFields.add("webAuthnPolicyCreateTimeout");
    openapiFields.add("webAuthnPolicyPasswordlessAcceptableAaguids");
    openapiFields.add("webAuthnPolicyPasswordlessAttestationConveyancePreference");
    openapiFields.add("webAuthnPolicyPasswordlessAuthenticatorAttachment");
    openapiFields.add("webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister");
    openapiFields.add("webAuthnPolicyPasswordlessCreateTimeout");
    openapiFields.add("webAuthnPolicyPasswordlessRequireResidentKey");
    openapiFields.add("webAuthnPolicyPasswordlessRpEntityName");
    openapiFields.add("webAuthnPolicyPasswordlessRpId");
    openapiFields.add("webAuthnPolicyPasswordlessSignatureAlgorithms");
    openapiFields.add("webAuthnPolicyPasswordlessUserVerificationRequirement");
    openapiFields.add("webAuthnPolicyRequireResidentKey");
    openapiFields.add("webAuthnPolicyRpEntityName");
    openapiFields.add("webAuthnPolicyRpId");
    openapiFields.add("webAuthnPolicySignatureAlgorithms");
    openapiFields.add("webAuthnPolicyUserVerificationRequirement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RealmRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealmRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealmRepresentation is not found in the empty JSON string", RealmRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealmRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealmRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountTheme") != null && !jsonObj.get("accountTheme").isJsonNull()) && !jsonObj.get("accountTheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountTheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountTheme").toString()));
      }
      if ((jsonObj.get("adminTheme") != null && !jsonObj.get("adminTheme").isJsonNull()) && !jsonObj.get("adminTheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminTheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminTheme").toString()));
      }
      if (jsonObj.get("authenticationFlows") != null && !jsonObj.get("authenticationFlows").isJsonNull()) {
        JsonArray jsonArrayauthenticationFlows = jsonObj.getAsJsonArray("authenticationFlows");
        if (jsonArrayauthenticationFlows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authenticationFlows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authenticationFlows` to be an array in the JSON string but got `%s`", jsonObj.get("authenticationFlows").toString()));
          }

          // validate the optional field `authenticationFlows` (array)
          for (int i = 0; i < jsonArrayauthenticationFlows.size(); i++) {
            AuthenticationFlowRepresentation.validateJsonElement(jsonArrayauthenticationFlows.get(i));
          };
        }
      }
      if (jsonObj.get("authenticatorConfig") != null && !jsonObj.get("authenticatorConfig").isJsonNull()) {
        JsonArray jsonArrayauthenticatorConfig = jsonObj.getAsJsonArray("authenticatorConfig");
        if (jsonArrayauthenticatorConfig != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authenticatorConfig").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authenticatorConfig` to be an array in the JSON string but got `%s`", jsonObj.get("authenticatorConfig").toString()));
          }

          // validate the optional field `authenticatorConfig` (array)
          for (int i = 0; i < jsonArrayauthenticatorConfig.size(); i++) {
            AuthenticatorConfigRepresentation.validateJsonElement(jsonArrayauthenticatorConfig.get(i));
          };
        }
      }
      if ((jsonObj.get("browserFlow") != null && !jsonObj.get("browserFlow").isJsonNull()) && !jsonObj.get("browserFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserFlow").toString()));
      }
      if ((jsonObj.get("clientAuthenticationFlow") != null && !jsonObj.get("clientAuthenticationFlow").isJsonNull()) && !jsonObj.get("clientAuthenticationFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAuthenticationFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAuthenticationFlow").toString()));
      }
      if (jsonObj.get("clientScopes") != null && !jsonObj.get("clientScopes").isJsonNull()) {
        JsonArray jsonArrayclientScopes = jsonObj.getAsJsonArray("clientScopes");
        if (jsonArrayclientScopes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientScopes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientScopes` to be an array in the JSON string but got `%s`", jsonObj.get("clientScopes").toString()));
          }

          // validate the optional field `clientScopes` (array)
          for (int i = 0; i < jsonArrayclientScopes.size(); i++) {
            ClientScopeRepresentation.validateJsonElement(jsonArrayclientScopes.get(i));
          };
        }
      }
      if (jsonObj.get("clients") != null && !jsonObj.get("clients").isJsonNull()) {
        JsonArray jsonArrayclients = jsonObj.getAsJsonArray("clients");
        if (jsonArrayclients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clients` to be an array in the JSON string but got `%s`", jsonObj.get("clients").toString()));
          }

          // validate the optional field `clients` (array)
          for (int i = 0; i < jsonArrayclients.size(); i++) {
            ClientRepresentation.validateJsonElement(jsonArrayclients.get(i));
          };
        }
      }
      // validate the optional field `components`
      if (jsonObj.get("components") != null && !jsonObj.get("components").isJsonNull()) {
        MultivaluedHashMap.validateJsonElement(jsonObj.get("components"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultDefaultClientScopes") != null && !jsonObj.get("defaultDefaultClientScopes").isJsonNull() && !jsonObj.get("defaultDefaultClientScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultDefaultClientScopes` to be an array in the JSON string but got `%s`", jsonObj.get("defaultDefaultClientScopes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultGroups") != null && !jsonObj.get("defaultGroups").isJsonNull() && !jsonObj.get("defaultGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultGroups` to be an array in the JSON string but got `%s`", jsonObj.get("defaultGroups").toString()));
      }
      if ((jsonObj.get("defaultLocale") != null && !jsonObj.get("defaultLocale").isJsonNull()) && !jsonObj.get("defaultLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLocale").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultOptionalClientScopes") != null && !jsonObj.get("defaultOptionalClientScopes").isJsonNull() && !jsonObj.get("defaultOptionalClientScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultOptionalClientScopes` to be an array in the JSON string but got `%s`", jsonObj.get("defaultOptionalClientScopes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultRoles") != null && !jsonObj.get("defaultRoles").isJsonNull() && !jsonObj.get("defaultRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultRoles` to be an array in the JSON string but got `%s`", jsonObj.get("defaultRoles").toString()));
      }
      if ((jsonObj.get("defaultSignatureAlgorithm") != null && !jsonObj.get("defaultSignatureAlgorithm").isJsonNull()) && !jsonObj.get("defaultSignatureAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSignatureAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSignatureAlgorithm").toString()));
      }
      if ((jsonObj.get("directGrantFlow") != null && !jsonObj.get("directGrantFlow").isJsonNull()) && !jsonObj.get("directGrantFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directGrantFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directGrantFlow").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("displayNameHtml") != null && !jsonObj.get("displayNameHtml").isJsonNull()) && !jsonObj.get("displayNameHtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayNameHtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayNameHtml").toString()));
      }
      if ((jsonObj.get("dockerAuthenticationFlow") != null && !jsonObj.get("dockerAuthenticationFlow").isJsonNull()) && !jsonObj.get("dockerAuthenticationFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerAuthenticationFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerAuthenticationFlow").toString()));
      }
      if ((jsonObj.get("emailTheme") != null && !jsonObj.get("emailTheme").isJsonNull()) && !jsonObj.get("emailTheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailTheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailTheme").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enabledEventTypes") != null && !jsonObj.get("enabledEventTypes").isJsonNull() && !jsonObj.get("enabledEventTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledEventTypes` to be an array in the JSON string but got `%s`", jsonObj.get("enabledEventTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("eventsListeners") != null && !jsonObj.get("eventsListeners").isJsonNull() && !jsonObj.get("eventsListeners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventsListeners` to be an array in the JSON string but got `%s`", jsonObj.get("eventsListeners").toString()));
      }
      if (jsonObj.get("federatedUsers") != null && !jsonObj.get("federatedUsers").isJsonNull()) {
        JsonArray jsonArrayfederatedUsers = jsonObj.getAsJsonArray("federatedUsers");
        if (jsonArrayfederatedUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("federatedUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `federatedUsers` to be an array in the JSON string but got `%s`", jsonObj.get("federatedUsers").toString()));
          }

          // validate the optional field `federatedUsers` (array)
          for (int i = 0; i < jsonArrayfederatedUsers.size(); i++) {
            UserRepresentation.validateJsonElement(jsonArrayfederatedUsers.get(i));
          };
        }
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            GroupRepresentation.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("identityProviderMappers") != null && !jsonObj.get("identityProviderMappers").isJsonNull()) {
        JsonArray jsonArrayidentityProviderMappers = jsonObj.getAsJsonArray("identityProviderMappers");
        if (jsonArrayidentityProviderMappers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identityProviderMappers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identityProviderMappers` to be an array in the JSON string but got `%s`", jsonObj.get("identityProviderMappers").toString()));
          }

          // validate the optional field `identityProviderMappers` (array)
          for (int i = 0; i < jsonArrayidentityProviderMappers.size(); i++) {
            IdentityProviderMapperRepresentation.validateJsonElement(jsonArrayidentityProviderMappers.get(i));
          };
        }
      }
      if (jsonObj.get("identityProviders") != null && !jsonObj.get("identityProviders").isJsonNull()) {
        JsonArray jsonArrayidentityProviders = jsonObj.getAsJsonArray("identityProviders");
        if (jsonArrayidentityProviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identityProviders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identityProviders` to be an array in the JSON string but got `%s`", jsonObj.get("identityProviders").toString()));
          }

          // validate the optional field `identityProviders` (array)
          for (int i = 0; i < jsonArrayidentityProviders.size(); i++) {
            IdentityProviderRepresentation.validateJsonElement(jsonArrayidentityProviders.get(i));
          };
        }
      }
      if ((jsonObj.get("keycloakVersion") != null && !jsonObj.get("keycloakVersion").isJsonNull()) && !jsonObj.get("keycloakVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keycloakVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keycloakVersion").toString()));
      }
      if ((jsonObj.get("loginTheme") != null && !jsonObj.get("loginTheme").isJsonNull()) && !jsonObj.get("loginTheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginTheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginTheme").toString()));
      }
      if ((jsonObj.get("otpPolicyAlgorithm") != null && !jsonObj.get("otpPolicyAlgorithm").isJsonNull()) && !jsonObj.get("otpPolicyAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otpPolicyAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otpPolicyAlgorithm").toString()));
      }
      if ((jsonObj.get("otpPolicyType") != null && !jsonObj.get("otpPolicyType").isJsonNull()) && !jsonObj.get("otpPolicyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otpPolicyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otpPolicyType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("otpSupportedApplications") != null && !jsonObj.get("otpSupportedApplications").isJsonNull() && !jsonObj.get("otpSupportedApplications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `otpSupportedApplications` to be an array in the JSON string but got `%s`", jsonObj.get("otpSupportedApplications").toString()));
      }
      if ((jsonObj.get("passwordPolicy") != null && !jsonObj.get("passwordPolicy").isJsonNull()) && !jsonObj.get("passwordPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordPolicy").toString()));
      }
      if (jsonObj.get("protocolMappers") != null && !jsonObj.get("protocolMappers").isJsonNull()) {
        JsonArray jsonArrayprotocolMappers = jsonObj.getAsJsonArray("protocolMappers");
        if (jsonArrayprotocolMappers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("protocolMappers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `protocolMappers` to be an array in the JSON string but got `%s`", jsonObj.get("protocolMappers").toString()));
          }

          // validate the optional field `protocolMappers` (array)
          for (int i = 0; i < jsonArrayprotocolMappers.size(); i++) {
            ProtocolMapperRepresentation.validateJsonElement(jsonArrayprotocolMappers.get(i));
          };
        }
      }
      if ((jsonObj.get("realm") != null && !jsonObj.get("realm").isJsonNull()) && !jsonObj.get("realm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realm").toString()));
      }
      if ((jsonObj.get("registrationFlow") != null && !jsonObj.get("registrationFlow").isJsonNull()) && !jsonObj.get("registrationFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationFlow").toString()));
      }
      if (jsonObj.get("requiredActions") != null && !jsonObj.get("requiredActions").isJsonNull()) {
        JsonArray jsonArrayrequiredActions = jsonObj.getAsJsonArray("requiredActions");
        if (jsonArrayrequiredActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requiredActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requiredActions` to be an array in the JSON string but got `%s`", jsonObj.get("requiredActions").toString()));
          }

          // validate the optional field `requiredActions` (array)
          for (int i = 0; i < jsonArrayrequiredActions.size(); i++) {
            RequiredActionProviderRepresentation.validateJsonElement(jsonArrayrequiredActions.get(i));
          };
        }
      }
      if ((jsonObj.get("resetCredentialsFlow") != null && !jsonObj.get("resetCredentialsFlow").isJsonNull()) && !jsonObj.get("resetCredentialsFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resetCredentialsFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resetCredentialsFlow").toString()));
      }
      // validate the optional field `roles`
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        RolesRepresentation.validateJsonElement(jsonObj.get("roles"));
      }
      if (jsonObj.get("scopeMappings") != null && !jsonObj.get("scopeMappings").isJsonNull()) {
        JsonArray jsonArrayscopeMappings = jsonObj.getAsJsonArray("scopeMappings");
        if (jsonArrayscopeMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scopeMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scopeMappings` to be an array in the JSON string but got `%s`", jsonObj.get("scopeMappings").toString()));
          }

          // validate the optional field `scopeMappings` (array)
          for (int i = 0; i < jsonArrayscopeMappings.size(); i++) {
            ScopeMappingRepresentation.validateJsonElement(jsonArrayscopeMappings.get(i));
          };
        }
      }
      if ((jsonObj.get("sslRequired") != null && !jsonObj.get("sslRequired").isJsonNull()) && !jsonObj.get("sslRequired").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslRequired` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslRequired").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedLocales") != null && !jsonObj.get("supportedLocales").isJsonNull() && !jsonObj.get("supportedLocales").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedLocales` to be an array in the JSON string but got `%s`", jsonObj.get("supportedLocales").toString()));
      }
      if (jsonObj.get("userFederationMappers") != null && !jsonObj.get("userFederationMappers").isJsonNull()) {
        JsonArray jsonArrayuserFederationMappers = jsonObj.getAsJsonArray("userFederationMappers");
        if (jsonArrayuserFederationMappers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userFederationMappers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userFederationMappers` to be an array in the JSON string but got `%s`", jsonObj.get("userFederationMappers").toString()));
          }

          // validate the optional field `userFederationMappers` (array)
          for (int i = 0; i < jsonArrayuserFederationMappers.size(); i++) {
            UserFederationMapperRepresentation.validateJsonElement(jsonArrayuserFederationMappers.get(i));
          };
        }
      }
      if (jsonObj.get("userFederationProviders") != null && !jsonObj.get("userFederationProviders").isJsonNull()) {
        JsonArray jsonArrayuserFederationProviders = jsonObj.getAsJsonArray("userFederationProviders");
        if (jsonArrayuserFederationProviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userFederationProviders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userFederationProviders` to be an array in the JSON string but got `%s`", jsonObj.get("userFederationProviders").toString()));
          }

          // validate the optional field `userFederationProviders` (array)
          for (int i = 0; i < jsonArrayuserFederationProviders.size(); i++) {
            UserFederationProviderRepresentation.validateJsonElement(jsonArrayuserFederationProviders.get(i));
          };
        }
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            UserRepresentation.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webAuthnPolicyAcceptableAaguids") != null && !jsonObj.get("webAuthnPolicyAcceptableAaguids").isJsonNull() && !jsonObj.get("webAuthnPolicyAcceptableAaguids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyAcceptableAaguids` to be an array in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyAcceptableAaguids").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyAttestationConveyancePreference") != null && !jsonObj.get("webAuthnPolicyAttestationConveyancePreference").isJsonNull()) && !jsonObj.get("webAuthnPolicyAttestationConveyancePreference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyAttestationConveyancePreference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyAttestationConveyancePreference").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyAuthenticatorAttachment") != null && !jsonObj.get("webAuthnPolicyAuthenticatorAttachment").isJsonNull()) && !jsonObj.get("webAuthnPolicyAuthenticatorAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyAuthenticatorAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyAuthenticatorAttachment").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webAuthnPolicyPasswordlessAcceptableAaguids") != null && !jsonObj.get("webAuthnPolicyPasswordlessAcceptableAaguids").isJsonNull() && !jsonObj.get("webAuthnPolicyPasswordlessAcceptableAaguids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyPasswordlessAcceptableAaguids` to be an array in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyPasswordlessAcceptableAaguids").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyPasswordlessAttestationConveyancePreference") != null && !jsonObj.get("webAuthnPolicyPasswordlessAttestationConveyancePreference").isJsonNull()) && !jsonObj.get("webAuthnPolicyPasswordlessAttestationConveyancePreference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyPasswordlessAttestationConveyancePreference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyPasswordlessAttestationConveyancePreference").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyPasswordlessAuthenticatorAttachment") != null && !jsonObj.get("webAuthnPolicyPasswordlessAuthenticatorAttachment").isJsonNull()) && !jsonObj.get("webAuthnPolicyPasswordlessAuthenticatorAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyPasswordlessAuthenticatorAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyPasswordlessAuthenticatorAttachment").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyPasswordlessRequireResidentKey") != null && !jsonObj.get("webAuthnPolicyPasswordlessRequireResidentKey").isJsonNull()) && !jsonObj.get("webAuthnPolicyPasswordlessRequireResidentKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyPasswordlessRequireResidentKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyPasswordlessRequireResidentKey").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyPasswordlessRpEntityName") != null && !jsonObj.get("webAuthnPolicyPasswordlessRpEntityName").isJsonNull()) && !jsonObj.get("webAuthnPolicyPasswordlessRpEntityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyPasswordlessRpEntityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyPasswordlessRpEntityName").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyPasswordlessRpId") != null && !jsonObj.get("webAuthnPolicyPasswordlessRpId").isJsonNull()) && !jsonObj.get("webAuthnPolicyPasswordlessRpId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyPasswordlessRpId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyPasswordlessRpId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webAuthnPolicyPasswordlessSignatureAlgorithms") != null && !jsonObj.get("webAuthnPolicyPasswordlessSignatureAlgorithms").isJsonNull() && !jsonObj.get("webAuthnPolicyPasswordlessSignatureAlgorithms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyPasswordlessSignatureAlgorithms` to be an array in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyPasswordlessSignatureAlgorithms").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyPasswordlessUserVerificationRequirement") != null && !jsonObj.get("webAuthnPolicyPasswordlessUserVerificationRequirement").isJsonNull()) && !jsonObj.get("webAuthnPolicyPasswordlessUserVerificationRequirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyPasswordlessUserVerificationRequirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyPasswordlessUserVerificationRequirement").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyRequireResidentKey") != null && !jsonObj.get("webAuthnPolicyRequireResidentKey").isJsonNull()) && !jsonObj.get("webAuthnPolicyRequireResidentKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyRequireResidentKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyRequireResidentKey").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyRpEntityName") != null && !jsonObj.get("webAuthnPolicyRpEntityName").isJsonNull()) && !jsonObj.get("webAuthnPolicyRpEntityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyRpEntityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyRpEntityName").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyRpId") != null && !jsonObj.get("webAuthnPolicyRpId").isJsonNull()) && !jsonObj.get("webAuthnPolicyRpId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyRpId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyRpId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webAuthnPolicySignatureAlgorithms") != null && !jsonObj.get("webAuthnPolicySignatureAlgorithms").isJsonNull() && !jsonObj.get("webAuthnPolicySignatureAlgorithms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicySignatureAlgorithms` to be an array in the JSON string but got `%s`", jsonObj.get("webAuthnPolicySignatureAlgorithms").toString()));
      }
      if ((jsonObj.get("webAuthnPolicyUserVerificationRequirement") != null && !jsonObj.get("webAuthnPolicyUserVerificationRequirement").isJsonNull()) && !jsonObj.get("webAuthnPolicyUserVerificationRequirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAuthnPolicyUserVerificationRequirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAuthnPolicyUserVerificationRequirement").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealmRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealmRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealmRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealmRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<RealmRepresentation>() {
           @Override
           public void write(JsonWriter out, RealmRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealmRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RealmRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RealmRepresentation
   * @throws IOException if the JSON string is invalid with respect to RealmRepresentation
   */
  public static RealmRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealmRepresentation.class);
  }

  /**
   * Convert an instance of RealmRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

