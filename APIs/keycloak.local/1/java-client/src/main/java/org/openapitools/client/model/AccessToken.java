/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AccessTokenAccess;
import org.openapitools.client.model.AccessTokenAuthorization;
import org.openapitools.client.model.AccessTokenCertConf;
import org.openapitools.client.model.AddressClaimSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccessToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessToken {
  public static final String SERIALIZED_NAME_ACR = "acr";
  @SerializedName(SERIALIZED_NAME_ACR)
  private String acr;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AddressClaimSet address;

  public static final String SERIALIZED_NAME_ALLOWED_ORIGINS = "allowed-origins";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ORIGINS)
  private List<String> allowedOrigins = new ArrayList<>();

  public static final String SERIALIZED_NAME_AT_HASH = "at_hash";
  @SerializedName(SERIALIZED_NAME_AT_HASH)
  private String atHash;

  public static final String SERIALIZED_NAME_AUTH_TIME = "auth_time";
  @SerializedName(SERIALIZED_NAME_AUTH_TIME)
  private Long authTime;

  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private AccessTokenAuthorization authorization;

  public static final String SERIALIZED_NAME_AZP = "azp";
  @SerializedName(SERIALIZED_NAME_AZP)
  private String azp;

  public static final String SERIALIZED_NAME_BIRTHDATE = "birthdate";
  @SerializedName(SERIALIZED_NAME_BIRTHDATE)
  private String birthdate;

  public static final String SERIALIZED_NAME_C_HASH = "c_hash";
  @SerializedName(SERIALIZED_NAME_C_HASH)
  private String cHash;

  /**
   * Gets or Sets category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    INTERNAL("INTERNAL"),
    
    ACCESS("ACCESS"),
    
    ID("ID"),
    
    ADMIN("ADMIN"),
    
    USERINFO("USERINFO");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CLAIMS_LOCALES = "claims_locales";
  @SerializedName(SERIALIZED_NAME_CLAIMS_LOCALES)
  private String claimsLocales;

  public static final String SERIALIZED_NAME_CNF = "cnf";
  @SerializedName(SERIALIZED_NAME_CNF)
  private AccessTokenCertConf cnf;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "email_verified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_EXP = "exp";
  @SerializedName(SERIALIZED_NAME_EXP)
  private Long exp;

  public static final String SERIALIZED_NAME_FAMILY_NAME = "family_name";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "given_name";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_IAT = "iat";
  @SerializedName(SERIALIZED_NAME_IAT)
  private Long iat;

  public static final String SERIALIZED_NAME_ISS = "iss";
  @SerializedName(SERIALIZED_NAME_ISS)
  private String iss;

  public static final String SERIALIZED_NAME_JTI = "jti";
  @SerializedName(SERIALIZED_NAME_JTI)
  private String jti;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middle_name";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NBF = "nbf";
  @SerializedName(SERIALIZED_NAME_NBF)
  private Long nbf;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_OTHER_CLAIMS = "otherClaims";
  @SerializedName(SERIALIZED_NAME_OTHER_CLAIMS)
  private Map<String, Object> otherClaims = new HashMap<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_VERIFIED = "phone_number_verified";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_VERIFIED)
  private Boolean phoneNumberVerified;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private String picture;

  public static final String SERIALIZED_NAME_PREFERRED_USERNAME = "preferred_username";
  @SerializedName(SERIALIZED_NAME_PREFERRED_USERNAME)
  private String preferredUsername;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private String profile;

  public static final String SERIALIZED_NAME_REALM_ACCESS = "realm_access";
  @SerializedName(SERIALIZED_NAME_REALM_ACCESS)
  private AccessTokenAccess realmAccess;

  public static final String SERIALIZED_NAME_S_HASH = "s_hash";
  @SerializedName(SERIALIZED_NAME_S_HASH)
  private String sHash;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SESSION_STATE = "session_state";
  @SerializedName(SERIALIZED_NAME_SESSION_STATE)
  private String sessionState;

  public static final String SERIALIZED_NAME_SUB = "sub";
  @SerializedName(SERIALIZED_NAME_SUB)
  private String sub;

  public static final String SERIALIZED_NAME_TRUSTED_CERTS = "trusted-certs";
  @SerializedName(SERIALIZED_NAME_TRUSTED_CERTS)
  private List<String> trustedCerts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYP = "typ";
  @SerializedName(SERIALIZED_NAME_TYP)
  private String typ;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Long updatedAt;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_ZONEINFO = "zoneinfo";
  @SerializedName(SERIALIZED_NAME_ZONEINFO)
  private String zoneinfo;

  public AccessToken() {
  }

  public AccessToken acr(String acr) {
    this.acr = acr;
    return this;
  }

  /**
   * Get acr
   * @return acr
   */
  @javax.annotation.Nullable
  public String getAcr() {
    return acr;
  }

  public void setAcr(String acr) {
    this.acr = acr;
  }


  public AccessToken address(AddressClaimSet address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public AddressClaimSet getAddress() {
    return address;
  }

  public void setAddress(AddressClaimSet address) {
    this.address = address;
  }


  public AccessToken allowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
    return this;
  }

  public AccessToken addAllowedOriginsItem(String allowedOriginsItem) {
    if (this.allowedOrigins == null) {
      this.allowedOrigins = new ArrayList<>();
    }
    this.allowedOrigins.add(allowedOriginsItem);
    return this;
  }

  /**
   * Get allowedOrigins
   * @return allowedOrigins
   */
  @javax.annotation.Nullable
  public List<String> getAllowedOrigins() {
    return allowedOrigins;
  }

  public void setAllowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
  }


  public AccessToken atHash(String atHash) {
    this.atHash = atHash;
    return this;
  }

  /**
   * Get atHash
   * @return atHash
   */
  @javax.annotation.Nullable
  public String getAtHash() {
    return atHash;
  }

  public void setAtHash(String atHash) {
    this.atHash = atHash;
  }


  public AccessToken authTime(Long authTime) {
    this.authTime = authTime;
    return this;
  }

  /**
   * Get authTime
   * @return authTime
   */
  @javax.annotation.Nullable
  public Long getAuthTime() {
    return authTime;
  }

  public void setAuthTime(Long authTime) {
    this.authTime = authTime;
  }


  public AccessToken authorization(AccessTokenAuthorization authorization) {
    this.authorization = authorization;
    return this;
  }

  /**
   * Get authorization
   * @return authorization
   */
  @javax.annotation.Nullable
  public AccessTokenAuthorization getAuthorization() {
    return authorization;
  }

  public void setAuthorization(AccessTokenAuthorization authorization) {
    this.authorization = authorization;
  }


  public AccessToken azp(String azp) {
    this.azp = azp;
    return this;
  }

  /**
   * Get azp
   * @return azp
   */
  @javax.annotation.Nullable
  public String getAzp() {
    return azp;
  }

  public void setAzp(String azp) {
    this.azp = azp;
  }


  public AccessToken birthdate(String birthdate) {
    this.birthdate = birthdate;
    return this;
  }

  /**
   * Get birthdate
   * @return birthdate
   */
  @javax.annotation.Nullable
  public String getBirthdate() {
    return birthdate;
  }

  public void setBirthdate(String birthdate) {
    this.birthdate = birthdate;
  }


  public AccessToken cHash(String cHash) {
    this.cHash = cHash;
    return this;
  }

  /**
   * Get cHash
   * @return cHash
   */
  @javax.annotation.Nullable
  public String getcHash() {
    return cHash;
  }

  public void setcHash(String cHash) {
    this.cHash = cHash;
  }


  public AccessToken category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public AccessToken claimsLocales(String claimsLocales) {
    this.claimsLocales = claimsLocales;
    return this;
  }

  /**
   * Get claimsLocales
   * @return claimsLocales
   */
  @javax.annotation.Nullable
  public String getClaimsLocales() {
    return claimsLocales;
  }

  public void setClaimsLocales(String claimsLocales) {
    this.claimsLocales = claimsLocales;
  }


  public AccessToken cnf(AccessTokenCertConf cnf) {
    this.cnf = cnf;
    return this;
  }

  /**
   * Get cnf
   * @return cnf
   */
  @javax.annotation.Nullable
  public AccessTokenCertConf getCnf() {
    return cnf;
  }

  public void setCnf(AccessTokenCertConf cnf) {
    this.cnf = cnf;
  }


  public AccessToken email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public AccessToken emailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

  /**
   * Get emailVerified
   * @return emailVerified
   */
  @javax.annotation.Nullable
  public Boolean getEmailVerified() {
    return emailVerified;
  }

  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }


  public AccessToken exp(Long exp) {
    this.exp = exp;
    return this;
  }

  /**
   * Get exp
   * @return exp
   */
  @javax.annotation.Nullable
  public Long getExp() {
    return exp;
  }

  public void setExp(Long exp) {
    this.exp = exp;
  }


  public AccessToken familyName(String familyName) {
    this.familyName = familyName;
    return this;
  }

  /**
   * Get familyName
   * @return familyName
   */
  @javax.annotation.Nullable
  public String getFamilyName() {
    return familyName;
  }

  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public AccessToken gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public AccessToken givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * Get givenName
   * @return givenName
   */
  @javax.annotation.Nullable
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public AccessToken iat(Long iat) {
    this.iat = iat;
    return this;
  }

  /**
   * Get iat
   * @return iat
   */
  @javax.annotation.Nullable
  public Long getIat() {
    return iat;
  }

  public void setIat(Long iat) {
    this.iat = iat;
  }


  public AccessToken iss(String iss) {
    this.iss = iss;
    return this;
  }

  /**
   * Get iss
   * @return iss
   */
  @javax.annotation.Nullable
  public String getIss() {
    return iss;
  }

  public void setIss(String iss) {
    this.iss = iss;
  }


  public AccessToken jti(String jti) {
    this.jti = jti;
    return this;
  }

  /**
   * Get jti
   * @return jti
   */
  @javax.annotation.Nullable
  public String getJti() {
    return jti;
  }

  public void setJti(String jti) {
    this.jti = jti;
  }


  public AccessToken locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public AccessToken middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Get middleName
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public AccessToken name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccessToken nbf(Long nbf) {
    this.nbf = nbf;
    return this;
  }

  /**
   * Get nbf
   * @return nbf
   */
  @javax.annotation.Nullable
  public Long getNbf() {
    return nbf;
  }

  public void setNbf(Long nbf) {
    this.nbf = nbf;
  }


  public AccessToken nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * Get nickname
   * @return nickname
   */
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public AccessToken nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public AccessToken otherClaims(Map<String, Object> otherClaims) {
    this.otherClaims = otherClaims;
    return this;
  }

  public AccessToken putOtherClaimsItem(String key, Object otherClaimsItem) {
    if (this.otherClaims == null) {
      this.otherClaims = new HashMap<>();
    }
    this.otherClaims.put(key, otherClaimsItem);
    return this;
  }

  /**
   * Get otherClaims
   * @return otherClaims
   */
  @javax.annotation.Nullable
  public Map<String, Object> getOtherClaims() {
    return otherClaims;
  }

  public void setOtherClaims(Map<String, Object> otherClaims) {
    this.otherClaims = otherClaims;
  }


  public AccessToken phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public AccessToken phoneNumberVerified(Boolean phoneNumberVerified) {
    this.phoneNumberVerified = phoneNumberVerified;
    return this;
  }

  /**
   * Get phoneNumberVerified
   * @return phoneNumberVerified
   */
  @javax.annotation.Nullable
  public Boolean getPhoneNumberVerified() {
    return phoneNumberVerified;
  }

  public void setPhoneNumberVerified(Boolean phoneNumberVerified) {
    this.phoneNumberVerified = phoneNumberVerified;
  }


  public AccessToken picture(String picture) {
    this.picture = picture;
    return this;
  }

  /**
   * Get picture
   * @return picture
   */
  @javax.annotation.Nullable
  public String getPicture() {
    return picture;
  }

  public void setPicture(String picture) {
    this.picture = picture;
  }


  public AccessToken preferredUsername(String preferredUsername) {
    this.preferredUsername = preferredUsername;
    return this;
  }

  /**
   * Get preferredUsername
   * @return preferredUsername
   */
  @javax.annotation.Nullable
  public String getPreferredUsername() {
    return preferredUsername;
  }

  public void setPreferredUsername(String preferredUsername) {
    this.preferredUsername = preferredUsername;
  }


  public AccessToken profile(String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public String getProfile() {
    return profile;
  }

  public void setProfile(String profile) {
    this.profile = profile;
  }


  public AccessToken realmAccess(AccessTokenAccess realmAccess) {
    this.realmAccess = realmAccess;
    return this;
  }

  /**
   * Get realmAccess
   * @return realmAccess
   */
  @javax.annotation.Nullable
  public AccessTokenAccess getRealmAccess() {
    return realmAccess;
  }

  public void setRealmAccess(AccessTokenAccess realmAccess) {
    this.realmAccess = realmAccess;
  }


  public AccessToken sHash(String sHash) {
    this.sHash = sHash;
    return this;
  }

  /**
   * Get sHash
   * @return sHash
   */
  @javax.annotation.Nullable
  public String getsHash() {
    return sHash;
  }

  public void setsHash(String sHash) {
    this.sHash = sHash;
  }


  public AccessToken scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public AccessToken sessionState(String sessionState) {
    this.sessionState = sessionState;
    return this;
  }

  /**
   * Get sessionState
   * @return sessionState
   */
  @javax.annotation.Nullable
  public String getSessionState() {
    return sessionState;
  }

  public void setSessionState(String sessionState) {
    this.sessionState = sessionState;
  }


  public AccessToken sub(String sub) {
    this.sub = sub;
    return this;
  }

  /**
   * Get sub
   * @return sub
   */
  @javax.annotation.Nullable
  public String getSub() {
    return sub;
  }

  public void setSub(String sub) {
    this.sub = sub;
  }


  public AccessToken trustedCerts(List<String> trustedCerts) {
    this.trustedCerts = trustedCerts;
    return this;
  }

  public AccessToken addTrustedCertsItem(String trustedCertsItem) {
    if (this.trustedCerts == null) {
      this.trustedCerts = new ArrayList<>();
    }
    this.trustedCerts.add(trustedCertsItem);
    return this;
  }

  /**
   * Get trustedCerts
   * @return trustedCerts
   */
  @javax.annotation.Nullable
  public List<String> getTrustedCerts() {
    return trustedCerts;
  }

  public void setTrustedCerts(List<String> trustedCerts) {
    this.trustedCerts = trustedCerts;
  }


  public AccessToken typ(String typ) {
    this.typ = typ;
    return this;
  }

  /**
   * Get typ
   * @return typ
   */
  @javax.annotation.Nullable
  public String getTyp() {
    return typ;
  }

  public void setTyp(String typ) {
    this.typ = typ;
  }


  public AccessToken updatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public Long getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }


  public AccessToken website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public AccessToken zoneinfo(String zoneinfo) {
    this.zoneinfo = zoneinfo;
    return this;
  }

  /**
   * Get zoneinfo
   * @return zoneinfo
   */
  @javax.annotation.Nullable
  public String getZoneinfo() {
    return zoneinfo;
  }

  public void setZoneinfo(String zoneinfo) {
    this.zoneinfo = zoneinfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessToken accessToken = (AccessToken) o;
    return Objects.equals(this.acr, accessToken.acr) &&
        Objects.equals(this.address, accessToken.address) &&
        Objects.equals(this.allowedOrigins, accessToken.allowedOrigins) &&
        Objects.equals(this.atHash, accessToken.atHash) &&
        Objects.equals(this.authTime, accessToken.authTime) &&
        Objects.equals(this.authorization, accessToken.authorization) &&
        Objects.equals(this.azp, accessToken.azp) &&
        Objects.equals(this.birthdate, accessToken.birthdate) &&
        Objects.equals(this.cHash, accessToken.cHash) &&
        Objects.equals(this.category, accessToken.category) &&
        Objects.equals(this.claimsLocales, accessToken.claimsLocales) &&
        Objects.equals(this.cnf, accessToken.cnf) &&
        Objects.equals(this.email, accessToken.email) &&
        Objects.equals(this.emailVerified, accessToken.emailVerified) &&
        Objects.equals(this.exp, accessToken.exp) &&
        Objects.equals(this.familyName, accessToken.familyName) &&
        Objects.equals(this.gender, accessToken.gender) &&
        Objects.equals(this.givenName, accessToken.givenName) &&
        Objects.equals(this.iat, accessToken.iat) &&
        Objects.equals(this.iss, accessToken.iss) &&
        Objects.equals(this.jti, accessToken.jti) &&
        Objects.equals(this.locale, accessToken.locale) &&
        Objects.equals(this.middleName, accessToken.middleName) &&
        Objects.equals(this.name, accessToken.name) &&
        Objects.equals(this.nbf, accessToken.nbf) &&
        Objects.equals(this.nickname, accessToken.nickname) &&
        Objects.equals(this.nonce, accessToken.nonce) &&
        Objects.equals(this.otherClaims, accessToken.otherClaims) &&
        Objects.equals(this.phoneNumber, accessToken.phoneNumber) &&
        Objects.equals(this.phoneNumberVerified, accessToken.phoneNumberVerified) &&
        Objects.equals(this.picture, accessToken.picture) &&
        Objects.equals(this.preferredUsername, accessToken.preferredUsername) &&
        Objects.equals(this.profile, accessToken.profile) &&
        Objects.equals(this.realmAccess, accessToken.realmAccess) &&
        Objects.equals(this.sHash, accessToken.sHash) &&
        Objects.equals(this.scope, accessToken.scope) &&
        Objects.equals(this.sessionState, accessToken.sessionState) &&
        Objects.equals(this.sub, accessToken.sub) &&
        Objects.equals(this.trustedCerts, accessToken.trustedCerts) &&
        Objects.equals(this.typ, accessToken.typ) &&
        Objects.equals(this.updatedAt, accessToken.updatedAt) &&
        Objects.equals(this.website, accessToken.website) &&
        Objects.equals(this.zoneinfo, accessToken.zoneinfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acr, address, allowedOrigins, atHash, authTime, authorization, azp, birthdate, cHash, category, claimsLocales, cnf, email, emailVerified, exp, familyName, gender, givenName, iat, iss, jti, locale, middleName, name, nbf, nickname, nonce, otherClaims, phoneNumber, phoneNumberVerified, picture, preferredUsername, profile, realmAccess, sHash, scope, sessionState, sub, trustedCerts, typ, updatedAt, website, zoneinfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessToken {\n");
    sb.append("    acr: ").append(toIndentedString(acr)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    allowedOrigins: ").append(toIndentedString(allowedOrigins)).append("\n");
    sb.append("    atHash: ").append(toIndentedString(atHash)).append("\n");
    sb.append("    authTime: ").append(toIndentedString(authTime)).append("\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    azp: ").append(toIndentedString(azp)).append("\n");
    sb.append("    birthdate: ").append(toIndentedString(birthdate)).append("\n");
    sb.append("    cHash: ").append(toIndentedString(cHash)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    claimsLocales: ").append(toIndentedString(claimsLocales)).append("\n");
    sb.append("    cnf: ").append(toIndentedString(cnf)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    exp: ").append(toIndentedString(exp)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    iat: ").append(toIndentedString(iat)).append("\n");
    sb.append("    iss: ").append(toIndentedString(iss)).append("\n");
    sb.append("    jti: ").append(toIndentedString(jti)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nbf: ").append(toIndentedString(nbf)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    otherClaims: ").append(toIndentedString(otherClaims)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneNumberVerified: ").append(toIndentedString(phoneNumberVerified)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    preferredUsername: ").append(toIndentedString(preferredUsername)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    realmAccess: ").append(toIndentedString(realmAccess)).append("\n");
    sb.append("    sHash: ").append(toIndentedString(sHash)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sessionState: ").append(toIndentedString(sessionState)).append("\n");
    sb.append("    sub: ").append(toIndentedString(sub)).append("\n");
    sb.append("    trustedCerts: ").append(toIndentedString(trustedCerts)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    zoneinfo: ").append(toIndentedString(zoneinfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acr");
    openapiFields.add("address");
    openapiFields.add("allowed-origins");
    openapiFields.add("at_hash");
    openapiFields.add("auth_time");
    openapiFields.add("authorization");
    openapiFields.add("azp");
    openapiFields.add("birthdate");
    openapiFields.add("c_hash");
    openapiFields.add("category");
    openapiFields.add("claims_locales");
    openapiFields.add("cnf");
    openapiFields.add("email");
    openapiFields.add("email_verified");
    openapiFields.add("exp");
    openapiFields.add("family_name");
    openapiFields.add("gender");
    openapiFields.add("given_name");
    openapiFields.add("iat");
    openapiFields.add("iss");
    openapiFields.add("jti");
    openapiFields.add("locale");
    openapiFields.add("middle_name");
    openapiFields.add("name");
    openapiFields.add("nbf");
    openapiFields.add("nickname");
    openapiFields.add("nonce");
    openapiFields.add("otherClaims");
    openapiFields.add("phone_number");
    openapiFields.add("phone_number_verified");
    openapiFields.add("picture");
    openapiFields.add("preferred_username");
    openapiFields.add("profile");
    openapiFields.add("realm_access");
    openapiFields.add("s_hash");
    openapiFields.add("scope");
    openapiFields.add("session_state");
    openapiFields.add("sub");
    openapiFields.add("trusted-certs");
    openapiFields.add("typ");
    openapiFields.add("updated_at");
    openapiFields.add("website");
    openapiFields.add("zoneinfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessToken is not found in the empty JSON string", AccessToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acr") != null && !jsonObj.get("acr").isJsonNull()) && !jsonObj.get("acr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acr").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        AddressClaimSet.validateJsonElement(jsonObj.get("address"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed-origins") != null && !jsonObj.get("allowed-origins").isJsonNull() && !jsonObj.get("allowed-origins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed-origins` to be an array in the JSON string but got `%s`", jsonObj.get("allowed-origins").toString()));
      }
      if ((jsonObj.get("at_hash") != null && !jsonObj.get("at_hash").isJsonNull()) && !jsonObj.get("at_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `at_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("at_hash").toString()));
      }
      // validate the optional field `authorization`
      if (jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) {
        AccessTokenAuthorization.validateJsonElement(jsonObj.get("authorization"));
      }
      if ((jsonObj.get("azp") != null && !jsonObj.get("azp").isJsonNull()) && !jsonObj.get("azp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azp").toString()));
      }
      if ((jsonObj.get("birthdate") != null && !jsonObj.get("birthdate").isJsonNull()) && !jsonObj.get("birthdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthdate").toString()));
      }
      if ((jsonObj.get("c_hash") != null && !jsonObj.get("c_hash").isJsonNull()) && !jsonObj.get("c_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `c_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("c_hash").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("claims_locales") != null && !jsonObj.get("claims_locales").isJsonNull()) && !jsonObj.get("claims_locales").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claims_locales` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claims_locales").toString()));
      }
      // validate the optional field `cnf`
      if (jsonObj.get("cnf") != null && !jsonObj.get("cnf").isJsonNull()) {
        AccessTokenCertConf.validateJsonElement(jsonObj.get("cnf"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("family_name") != null && !jsonObj.get("family_name").isJsonNull()) && !jsonObj.get("family_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family_name").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("given_name") != null && !jsonObj.get("given_name").isJsonNull()) && !jsonObj.get("given_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `given_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("given_name").toString()));
      }
      if ((jsonObj.get("iss") != null && !jsonObj.get("iss").isJsonNull()) && !jsonObj.get("iss").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iss` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iss").toString()));
      }
      if ((jsonObj.get("jti") != null && !jsonObj.get("jti").isJsonNull()) && !jsonObj.get("jti").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jti` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jti").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("middle_name") != null && !jsonObj.get("middle_name").isJsonNull()) && !jsonObj.get("middle_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middle_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middle_name").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      if ((jsonObj.get("picture") != null && !jsonObj.get("picture").isJsonNull()) && !jsonObj.get("picture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture").toString()));
      }
      if ((jsonObj.get("preferred_username") != null && !jsonObj.get("preferred_username").isJsonNull()) && !jsonObj.get("preferred_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_username").toString()));
      }
      if ((jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) && !jsonObj.get("profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile").toString()));
      }
      // validate the optional field `realm_access`
      if (jsonObj.get("realm_access") != null && !jsonObj.get("realm_access").isJsonNull()) {
        AccessTokenAccess.validateJsonElement(jsonObj.get("realm_access"));
      }
      if ((jsonObj.get("s_hash") != null && !jsonObj.get("s_hash").isJsonNull()) && !jsonObj.get("s_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s_hash").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("session_state") != null && !jsonObj.get("session_state").isJsonNull()) && !jsonObj.get("session_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_state").toString()));
      }
      if ((jsonObj.get("sub") != null && !jsonObj.get("sub").isJsonNull()) && !jsonObj.get("sub").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trusted-certs") != null && !jsonObj.get("trusted-certs").isJsonNull() && !jsonObj.get("trusted-certs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trusted-certs` to be an array in the JSON string but got `%s`", jsonObj.get("trusted-certs").toString()));
      }
      if ((jsonObj.get("typ") != null && !jsonObj.get("typ").isJsonNull()) && !jsonObj.get("typ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typ").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if ((jsonObj.get("zoneinfo") != null && !jsonObj.get("zoneinfo").isJsonNull()) && !jsonObj.get("zoneinfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zoneinfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zoneinfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessToken.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessToken>() {
           @Override
           public void write(JsonWriter out, AccessToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessToken
   * @throws IOException if the JSON string is invalid with respect to AccessToken
   */
  public static AccessToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessToken.class);
  }

  /**
   * Convert an instance of AccessToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

