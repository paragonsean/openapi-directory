/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupRepresentation {
  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private Map<String, Object> access = new HashMap<>();

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_ROLES = "clientRoles";
  @SerializedName(SERIALIZED_NAME_CLIENT_ROLES)
  private Map<String, Object> clientRoles = new HashMap<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_REALM_ROLES = "realmRoles";
  @SerializedName(SERIALIZED_NAME_REALM_ROLES)
  private List<String> realmRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUB_GROUPS = "subGroups";
  @SerializedName(SERIALIZED_NAME_SUB_GROUPS)
  private List<GroupRepresentation> subGroups = new ArrayList<>();

  public GroupRepresentation() {
  }

  public GroupRepresentation access(Map<String, Object> access) {
    this.access = access;
    return this;
  }

  public GroupRepresentation putAccessItem(String key, Object accessItem) {
    if (this.access == null) {
      this.access = new HashMap<>();
    }
    this.access.put(key, accessItem);
    return this;
  }

  /**
   * Get access
   * @return access
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAccess() {
    return access;
  }

  public void setAccess(Map<String, Object> access) {
    this.access = access;
  }


  public GroupRepresentation attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public GroupRepresentation putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public GroupRepresentation clientRoles(Map<String, Object> clientRoles) {
    this.clientRoles = clientRoles;
    return this;
  }

  public GroupRepresentation putClientRolesItem(String key, Object clientRolesItem) {
    if (this.clientRoles == null) {
      this.clientRoles = new HashMap<>();
    }
    this.clientRoles.put(key, clientRolesItem);
    return this;
  }

  /**
   * Get clientRoles
   * @return clientRoles
   */
  @javax.annotation.Nullable
  public Map<String, Object> getClientRoles() {
    return clientRoles;
  }

  public void setClientRoles(Map<String, Object> clientRoles) {
    this.clientRoles = clientRoles;
  }


  public GroupRepresentation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GroupRepresentation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GroupRepresentation path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public GroupRepresentation realmRoles(List<String> realmRoles) {
    this.realmRoles = realmRoles;
    return this;
  }

  public GroupRepresentation addRealmRolesItem(String realmRolesItem) {
    if (this.realmRoles == null) {
      this.realmRoles = new ArrayList<>();
    }
    this.realmRoles.add(realmRolesItem);
    return this;
  }

  /**
   * Get realmRoles
   * @return realmRoles
   */
  @javax.annotation.Nullable
  public List<String> getRealmRoles() {
    return realmRoles;
  }

  public void setRealmRoles(List<String> realmRoles) {
    this.realmRoles = realmRoles;
  }


  public GroupRepresentation subGroups(List<GroupRepresentation> subGroups) {
    this.subGroups = subGroups;
    return this;
  }

  public GroupRepresentation addSubGroupsItem(GroupRepresentation subGroupsItem) {
    if (this.subGroups == null) {
      this.subGroups = new ArrayList<>();
    }
    this.subGroups.add(subGroupsItem);
    return this;
  }

  /**
   * Get subGroups
   * @return subGroups
   */
  @javax.annotation.Nullable
  public List<GroupRepresentation> getSubGroups() {
    return subGroups;
  }

  public void setSubGroups(List<GroupRepresentation> subGroups) {
    this.subGroups = subGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupRepresentation groupRepresentation = (GroupRepresentation) o;
    return Objects.equals(this.access, groupRepresentation.access) &&
        Objects.equals(this.attributes, groupRepresentation.attributes) &&
        Objects.equals(this.clientRoles, groupRepresentation.clientRoles) &&
        Objects.equals(this.id, groupRepresentation.id) &&
        Objects.equals(this.name, groupRepresentation.name) &&
        Objects.equals(this.path, groupRepresentation.path) &&
        Objects.equals(this.realmRoles, groupRepresentation.realmRoles) &&
        Objects.equals(this.subGroups, groupRepresentation.subGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, attributes, clientRoles, id, name, path, realmRoles, subGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupRepresentation {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    clientRoles: ").append(toIndentedString(clientRoles)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    realmRoles: ").append(toIndentedString(realmRoles)).append("\n");
    sb.append("    subGroups: ").append(toIndentedString(subGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("attributes");
    openapiFields.add("clientRoles");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("realmRoles");
    openapiFields.add("subGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupRepresentation is not found in the empty JSON string", GroupRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("realmRoles") != null && !jsonObj.get("realmRoles").isJsonNull() && !jsonObj.get("realmRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `realmRoles` to be an array in the JSON string but got `%s`", jsonObj.get("realmRoles").toString()));
      }
      if (jsonObj.get("subGroups") != null && !jsonObj.get("subGroups").isJsonNull()) {
        JsonArray jsonArraysubGroups = jsonObj.getAsJsonArray("subGroups");
        if (jsonArraysubGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subGroups` to be an array in the JSON string but got `%s`", jsonObj.get("subGroups").toString()));
          }

          // validate the optional field `subGroups` (array)
          for (int i = 0; i < jsonArraysubGroups.size(); i++) {
            GroupRepresentation.validateJsonElement(jsonArraysubGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupRepresentation>() {
           @Override
           public void write(JsonWriter out, GroupRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupRepresentation
   * @throws IOException if the JSON string is invalid with respect to GroupRepresentation
   */
  public static GroupRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupRepresentation.class);
  }

  /**
   * Convert an instance of GroupRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

