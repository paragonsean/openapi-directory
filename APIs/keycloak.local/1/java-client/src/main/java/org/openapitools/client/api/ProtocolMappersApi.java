/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProtocolMapperRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProtocolMappersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProtocolMappersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProtocolMappersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for realmClientScopesId1ProtocolMappersModelsId2Delete
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesId1ProtocolMappersModelsId2DeleteCall(String realm, String id1, String id2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id1" + "}", localVarApiClient.escapeString(id1.toString()))
            .replace("{" + "id2" + "}", localVarApiClient.escapeString(id2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientScopesId1ProtocolMappersModelsId2DeleteValidateBeforeCall(String realm, String id1, String id2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientScopesId1ProtocolMappersModelsId2Delete(Async)");
        }

        // verify the required parameter 'id1' is set
        if (id1 == null) {
            throw new ApiException("Missing the required parameter 'id1' when calling realmClientScopesId1ProtocolMappersModelsId2Delete(Async)");
        }

        // verify the required parameter 'id2' is set
        if (id2 == null) {
            throw new ApiException("Missing the required parameter 'id2' when calling realmClientScopesId1ProtocolMappersModelsId2Delete(Async)");
        }

        return realmClientScopesId1ProtocolMappersModelsId2DeleteCall(realm, id1, id2, _callback);

    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientScopesId1ProtocolMappersModelsId2Delete(String realm, String id1, String id2) throws ApiException {
        realmClientScopesId1ProtocolMappersModelsId2DeleteWithHttpInfo(realm, id1, id2);
    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientScopesId1ProtocolMappersModelsId2DeleteWithHttpInfo(String realm, String id1, String id2) throws ApiException {
        okhttp3.Call localVarCall = realmClientScopesId1ProtocolMappersModelsId2DeleteValidateBeforeCall(realm, id1, id2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesId1ProtocolMappersModelsId2DeleteAsync(String realm, String id1, String id2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientScopesId1ProtocolMappersModelsId2DeleteValidateBeforeCall(realm, id1, id2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientScopesId1ProtocolMappersModelsId2Get
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesId1ProtocolMappersModelsId2GetCall(String realm, String id1, String id2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id1" + "}", localVarApiClient.escapeString(id1.toString()))
            .replace("{" + "id2" + "}", localVarApiClient.escapeString(id2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientScopesId1ProtocolMappersModelsId2GetValidateBeforeCall(String realm, String id1, String id2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientScopesId1ProtocolMappersModelsId2Get(Async)");
        }

        // verify the required parameter 'id1' is set
        if (id1 == null) {
            throw new ApiException("Missing the required parameter 'id1' when calling realmClientScopesId1ProtocolMappersModelsId2Get(Async)");
        }

        // verify the required parameter 'id2' is set
        if (id2 == null) {
            throw new ApiException("Missing the required parameter 'id2' when calling realmClientScopesId1ProtocolMappersModelsId2Get(Async)");
        }

        return realmClientScopesId1ProtocolMappersModelsId2GetCall(realm, id1, id2, _callback);

    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @return ProtocolMapperRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ProtocolMapperRepresentation realmClientScopesId1ProtocolMappersModelsId2Get(String realm, String id1, String id2) throws ApiException {
        ApiResponse<ProtocolMapperRepresentation> localVarResp = realmClientScopesId1ProtocolMappersModelsId2GetWithHttpInfo(realm, id1, id2);
        return localVarResp.getData();
    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @return ApiResponse&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtocolMapperRepresentation> realmClientScopesId1ProtocolMappersModelsId2GetWithHttpInfo(String realm, String id1, String id2) throws ApiException {
        okhttp3.Call localVarCall = realmClientScopesId1ProtocolMappersModelsId2GetValidateBeforeCall(realm, id1, id2, null);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapper by id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesId1ProtocolMappersModelsId2GetAsync(String realm, String id1, String id2, final ApiCallback<ProtocolMapperRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientScopesId1ProtocolMappersModelsId2GetValidateBeforeCall(realm, id1, id2, _callback);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientScopesId1ProtocolMappersModelsId2Put
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesId1ProtocolMappersModelsId2PutCall(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id1" + "}", localVarApiClient.escapeString(id1.toString()))
            .replace("{" + "id2" + "}", localVarApiClient.escapeString(id2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientScopesId1ProtocolMappersModelsId2PutValidateBeforeCall(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientScopesId1ProtocolMappersModelsId2Put(Async)");
        }

        // verify the required parameter 'id1' is set
        if (id1 == null) {
            throw new ApiException("Missing the required parameter 'id1' when calling realmClientScopesId1ProtocolMappersModelsId2Put(Async)");
        }

        // verify the required parameter 'id2' is set
        if (id2 == null) {
            throw new ApiException("Missing the required parameter 'id2' when calling realmClientScopesId1ProtocolMappersModelsId2Put(Async)");
        }

        // verify the required parameter 'protocolMapperRepresentation' is set
        if (protocolMapperRepresentation == null) {
            throw new ApiException("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientScopesId1ProtocolMappersModelsId2Put(Async)");
        }

        return realmClientScopesId1ProtocolMappersModelsId2PutCall(realm, id1, id2, protocolMapperRepresentation, _callback);

    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param protocolMapperRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientScopesId1ProtocolMappersModelsId2Put(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        realmClientScopesId1ProtocolMappersModelsId2PutWithHttpInfo(realm, id1, id2, protocolMapperRepresentation);
    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param protocolMapperRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientScopesId1ProtocolMappersModelsId2PutWithHttpInfo(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientScopesId1ProtocolMappersModelsId2PutValidateBeforeCall(realm, id1, id2, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesId1ProtocolMappersModelsId2PutAsync(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientScopesId1ProtocolMappersModelsId2PutValidateBeforeCall(realm, id1, id2, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientScopesIdProtocolMappersAddModelsPost
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesIdProtocolMappersAddModelsPostCall(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/client-scopes/{id}/protocol-mappers/add-models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientScopesIdProtocolMappersAddModelsPostValidateBeforeCall(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientScopesIdProtocolMappersAddModelsPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientScopesIdProtocolMappersAddModelsPost(Async)");
        }

        // verify the required parameter 'protocolMapperRepresentation' is set
        if (protocolMapperRepresentation == null) {
            throw new ApiException("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientScopesIdProtocolMappersAddModelsPost(Async)");
        }

        return realmClientScopesIdProtocolMappersAddModelsPostCall(realm, id, protocolMapperRepresentation, _callback);

    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocolMapperRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientScopesIdProtocolMappersAddModelsPost(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        realmClientScopesIdProtocolMappersAddModelsPostWithHttpInfo(realm, id, protocolMapperRepresentation);
    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocolMapperRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientScopesIdProtocolMappersAddModelsPostWithHttpInfo(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientScopesIdProtocolMappersAddModelsPostValidateBeforeCall(realm, id, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create multiple mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesIdProtocolMappersAddModelsPostAsync(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientScopesIdProtocolMappersAddModelsPostValidateBeforeCall(realm, id, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientScopesIdProtocolMappersModelsGet
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesIdProtocolMappersModelsGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/client-scopes/{id}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientScopesIdProtocolMappersModelsGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientScopesIdProtocolMappersModelsGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientScopesIdProtocolMappersModelsGet(Async)");
        }

        return realmClientScopesIdProtocolMappersModelsGetCall(realm, id, _callback);

    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> realmClientScopesIdProtocolMappersModelsGet(String realm, String id) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = realmClientScopesIdProtocolMappersModelsGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> realmClientScopesIdProtocolMappersModelsGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmClientScopesIdProtocolMappersModelsGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesIdProtocolMappersModelsGetAsync(String realm, String id, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientScopesIdProtocolMappersModelsGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientScopesIdProtocolMappersModelsPost
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesIdProtocolMappersModelsPostCall(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/client-scopes/{id}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientScopesIdProtocolMappersModelsPostValidateBeforeCall(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientScopesIdProtocolMappersModelsPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientScopesIdProtocolMappersModelsPost(Async)");
        }

        // verify the required parameter 'protocolMapperRepresentation' is set
        if (protocolMapperRepresentation == null) {
            throw new ApiException("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientScopesIdProtocolMappersModelsPost(Async)");
        }

        return realmClientScopesIdProtocolMappersModelsPostCall(realm, id, protocolMapperRepresentation, _callback);

    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocolMapperRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientScopesIdProtocolMappersModelsPost(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        realmClientScopesIdProtocolMappersModelsPostWithHttpInfo(realm, id, protocolMapperRepresentation);
    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocolMapperRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientScopesIdProtocolMappersModelsPostWithHttpInfo(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientScopesIdProtocolMappersModelsPostValidateBeforeCall(realm, id, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesIdProtocolMappersModelsPostAsync(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientScopesIdProtocolMappersModelsPostValidateBeforeCall(realm, id, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientScopesIdProtocolMappersProtocolProtocolGet
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesIdProtocolMappersProtocolProtocolGetCall(String realm, String id, String protocol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "protocol" + "}", localVarApiClient.escapeString(protocol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientScopesIdProtocolMappersProtocolProtocolGetValidateBeforeCall(String realm, String id, String protocol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientScopesIdProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientScopesIdProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling realmClientScopesIdProtocolMappersProtocolProtocolGet(Async)");
        }

        return realmClientScopesIdProtocolMappersProtocolProtocolGetCall(realm, id, protocol, _callback);

    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocol  (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> realmClientScopesIdProtocolMappersProtocolProtocolGet(String realm, String id, String protocol) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = realmClientScopesIdProtocolMappersProtocolProtocolGetWithHttpInfo(realm, id, protocol);
        return localVarResp.getData();
    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocol  (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> realmClientScopesIdProtocolMappersProtocolProtocolGetWithHttpInfo(String realm, String id, String protocol) throws ApiException {
        okhttp3.Call localVarCall = realmClientScopesIdProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, id, protocol, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers by name for a specific protocol (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client scope (not name) (required)
     * @param protocol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientScopesIdProtocolMappersProtocolProtocolGetAsync(String realm, String id, String protocol, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientScopesIdProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, id, protocol, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsId1ProtocolMappersModelsId2Delete
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsId1ProtocolMappersModelsId2DeleteCall(String realm, String id1, String id2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id1}/protocol-mappers/models/{id2}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id1" + "}", localVarApiClient.escapeString(id1.toString()))
            .replace("{" + "id2" + "}", localVarApiClient.escapeString(id2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsId1ProtocolMappersModelsId2DeleteValidateBeforeCall(String realm, String id1, String id2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsId1ProtocolMappersModelsId2Delete(Async)");
        }

        // verify the required parameter 'id1' is set
        if (id1 == null) {
            throw new ApiException("Missing the required parameter 'id1' when calling realmClientsId1ProtocolMappersModelsId2Delete(Async)");
        }

        // verify the required parameter 'id2' is set
        if (id2 == null) {
            throw new ApiException("Missing the required parameter 'id2' when calling realmClientsId1ProtocolMappersModelsId2Delete(Async)");
        }

        return realmClientsId1ProtocolMappersModelsId2DeleteCall(realm, id1, id2, _callback);

    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientsId1ProtocolMappersModelsId2Delete(String realm, String id1, String id2) throws ApiException {
        realmClientsId1ProtocolMappersModelsId2DeleteWithHttpInfo(realm, id1, id2);
    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientsId1ProtocolMappersModelsId2DeleteWithHttpInfo(String realm, String id1, String id2) throws ApiException {
        okhttp3.Call localVarCall = realmClientsId1ProtocolMappersModelsId2DeleteValidateBeforeCall(realm, id1, id2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsId1ProtocolMappersModelsId2DeleteAsync(String realm, String id1, String id2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsId1ProtocolMappersModelsId2DeleteValidateBeforeCall(realm, id1, id2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsId1ProtocolMappersModelsId2Get
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsId1ProtocolMappersModelsId2GetCall(String realm, String id1, String id2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id1}/protocol-mappers/models/{id2}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id1" + "}", localVarApiClient.escapeString(id1.toString()))
            .replace("{" + "id2" + "}", localVarApiClient.escapeString(id2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsId1ProtocolMappersModelsId2GetValidateBeforeCall(String realm, String id1, String id2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsId1ProtocolMappersModelsId2Get(Async)");
        }

        // verify the required parameter 'id1' is set
        if (id1 == null) {
            throw new ApiException("Missing the required parameter 'id1' when calling realmClientsId1ProtocolMappersModelsId2Get(Async)");
        }

        // verify the required parameter 'id2' is set
        if (id2 == null) {
            throw new ApiException("Missing the required parameter 'id2' when calling realmClientsId1ProtocolMappersModelsId2Get(Async)");
        }

        return realmClientsId1ProtocolMappersModelsId2GetCall(realm, id1, id2, _callback);

    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @return ProtocolMapperRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ProtocolMapperRepresentation realmClientsId1ProtocolMappersModelsId2Get(String realm, String id1, String id2) throws ApiException {
        ApiResponse<ProtocolMapperRepresentation> localVarResp = realmClientsId1ProtocolMappersModelsId2GetWithHttpInfo(realm, id1, id2);
        return localVarResp.getData();
    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @return ApiResponse&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtocolMapperRepresentation> realmClientsId1ProtocolMappersModelsId2GetWithHttpInfo(String realm, String id1, String id2) throws ApiException {
        okhttp3.Call localVarCall = realmClientsId1ProtocolMappersModelsId2GetValidateBeforeCall(realm, id1, id2, null);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapper by id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsId1ProtocolMappersModelsId2GetAsync(String realm, String id1, String id2, final ApiCallback<ProtocolMapperRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsId1ProtocolMappersModelsId2GetValidateBeforeCall(realm, id1, id2, _callback);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsId1ProtocolMappersModelsId2Put
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsId1ProtocolMappersModelsId2PutCall(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id1}/protocol-mappers/models/{id2}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id1" + "}", localVarApiClient.escapeString(id1.toString()))
            .replace("{" + "id2" + "}", localVarApiClient.escapeString(id2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsId1ProtocolMappersModelsId2PutValidateBeforeCall(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsId1ProtocolMappersModelsId2Put(Async)");
        }

        // verify the required parameter 'id1' is set
        if (id1 == null) {
            throw new ApiException("Missing the required parameter 'id1' when calling realmClientsId1ProtocolMappersModelsId2Put(Async)");
        }

        // verify the required parameter 'id2' is set
        if (id2 == null) {
            throw new ApiException("Missing the required parameter 'id2' when calling realmClientsId1ProtocolMappersModelsId2Put(Async)");
        }

        // verify the required parameter 'protocolMapperRepresentation' is set
        if (protocolMapperRepresentation == null) {
            throw new ApiException("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientsId1ProtocolMappersModelsId2Put(Async)");
        }

        return realmClientsId1ProtocolMappersModelsId2PutCall(realm, id1, id2, protocolMapperRepresentation, _callback);

    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param protocolMapperRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientsId1ProtocolMappersModelsId2Put(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        realmClientsId1ProtocolMappersModelsId2PutWithHttpInfo(realm, id1, id2, protocolMapperRepresentation);
    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param protocolMapperRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientsId1ProtocolMappersModelsId2PutWithHttpInfo(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientsId1ProtocolMappersModelsId2PutValidateBeforeCall(realm, id1, id2, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id1  (required)
     * @param id2  (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsId1ProtocolMappersModelsId2PutAsync(String realm, String id1, String id2, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsId1ProtocolMappersModelsId2PutValidateBeforeCall(realm, id1, id2, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdProtocolMappersAddModelsPost
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdProtocolMappersAddModelsPostCall(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/protocol-mappers/add-models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdProtocolMappersAddModelsPostValidateBeforeCall(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdProtocolMappersAddModelsPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdProtocolMappersAddModelsPost(Async)");
        }

        // verify the required parameter 'protocolMapperRepresentation' is set
        if (protocolMapperRepresentation == null) {
            throw new ApiException("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientsIdProtocolMappersAddModelsPost(Async)");
        }

        return realmClientsIdProtocolMappersAddModelsPostCall(realm, id, protocolMapperRepresentation, _callback);

    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocolMapperRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientsIdProtocolMappersAddModelsPost(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        realmClientsIdProtocolMappersAddModelsPostWithHttpInfo(realm, id, protocolMapperRepresentation);
    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocolMapperRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientsIdProtocolMappersAddModelsPostWithHttpInfo(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdProtocolMappersAddModelsPostValidateBeforeCall(realm, id, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create multiple mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdProtocolMappersAddModelsPostAsync(String realm, String id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdProtocolMappersAddModelsPostValidateBeforeCall(realm, id, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdProtocolMappersModelsGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdProtocolMappersModelsGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdProtocolMappersModelsGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdProtocolMappersModelsGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdProtocolMappersModelsGet(Async)");
        }

        return realmClientsIdProtocolMappersModelsGetCall(realm, id, _callback);

    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> realmClientsIdProtocolMappersModelsGet(String realm, String id) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = realmClientsIdProtocolMappersModelsGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> realmClientsIdProtocolMappersModelsGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdProtocolMappersModelsGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdProtocolMappersModelsGetAsync(String realm, String id, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdProtocolMappersModelsGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdProtocolMappersModelsPost
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdProtocolMappersModelsPostCall(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdProtocolMappersModelsPostValidateBeforeCall(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdProtocolMappersModelsPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdProtocolMappersModelsPost(Async)");
        }

        // verify the required parameter 'protocolMapperRepresentation' is set
        if (protocolMapperRepresentation == null) {
            throw new ApiException("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientsIdProtocolMappersModelsPost(Async)");
        }

        return realmClientsIdProtocolMappersModelsPostCall(realm, id, protocolMapperRepresentation, _callback);

    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocolMapperRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientsIdProtocolMappersModelsPost(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        realmClientsIdProtocolMappersModelsPostWithHttpInfo(realm, id, protocolMapperRepresentation);
    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocolMapperRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientsIdProtocolMappersModelsPostWithHttpInfo(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdProtocolMappersModelsPostValidateBeforeCall(realm, id, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocolMapperRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdProtocolMappersModelsPostAsync(String realm, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdProtocolMappersModelsPostValidateBeforeCall(realm, id, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdProtocolMappersProtocolProtocolGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdProtocolMappersProtocolProtocolGetCall(String realm, String id, String protocol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "protocol" + "}", localVarApiClient.escapeString(protocol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdProtocolMappersProtocolProtocolGetValidateBeforeCall(String realm, String id, String protocol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling realmClientsIdProtocolMappersProtocolProtocolGet(Async)");
        }

        return realmClientsIdProtocolMappersProtocolProtocolGetCall(realm, id, protocol, _callback);

    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocol  (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> realmClientsIdProtocolMappersProtocolProtocolGet(String realm, String id, String protocol) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = realmClientsIdProtocolMappersProtocolProtocolGetWithHttpInfo(realm, id, protocol);
        return localVarResp.getData();
    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocol  (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> realmClientsIdProtocolMappersProtocolProtocolGetWithHttpInfo(String realm, String id, String protocol) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, id, protocol, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers by name for a specific protocol (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param protocol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdProtocolMappersProtocolProtocolGetAsync(String realm, String id, String protocol, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, id, protocol, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
