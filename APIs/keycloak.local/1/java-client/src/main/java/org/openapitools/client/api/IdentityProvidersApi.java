/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IdentityProviderMapperRepresentation;
import org.openapitools.client.model.IdentityProviderRepresentation;
import org.openapitools.client.model.ManagementPermissionReference;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentityProvidersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentityProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentityProvidersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for realmIdentityProviderImportConfigPost
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderImportConfigPostCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/import-config"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderImportConfigPostValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderImportConfigPost(Async)");
        }

        return realmIdentityProviderImportConfigPostCall(realm, _callback);

    }

    /**
     * Import identity provider from uploaded JSON file
     * 
     * @param realm realm name (not id!) (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> realmIdentityProviderImportConfigPost(String realm) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = realmIdentityProviderImportConfigPostWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Import identity provider from uploaded JSON file
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> realmIdentityProviderImportConfigPostWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderImportConfigPostValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import identity provider from uploaded JSON file (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderImportConfigPostAsync(String realm, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderImportConfigPostValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasDelete
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasDeleteCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasDeleteValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasDelete(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasDelete(Async)");
        }

        return realmIdentityProviderInstancesAliasDeleteCall(realm, alias, _callback);

    }

    /**
     * Delete the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmIdentityProviderInstancesAliasDelete(String realm, String alias) throws ApiException {
        realmIdentityProviderInstancesAliasDeleteWithHttpInfo(realm, alias);
    }

    /**
     * Delete the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmIdentityProviderInstancesAliasDeleteWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasDeleteValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasDeleteAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasDeleteValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasExportGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param format Format to use (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasExportGetCall(String realm, String alias, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}/export"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasExportGetValidateBeforeCall(String realm, String alias, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasExportGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasExportGet(Async)");
        }

        return realmIdentityProviderInstancesAliasExportGetCall(realm, alias, format, _callback);

    }

    /**
     * Export public broker configuration for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param format Format to use (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmIdentityProviderInstancesAliasExportGet(String realm, String alias, String format) throws ApiException {
        realmIdentityProviderInstancesAliasExportGetWithHttpInfo(realm, alias, format);
    }

    /**
     * Export public broker configuration for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param format Format to use (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmIdentityProviderInstancesAliasExportGetWithHttpInfo(String realm, String alias, String format) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasExportGetValidateBeforeCall(realm, alias, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export public broker configuration for identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param format Format to use (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasExportGetAsync(String realm, String alias, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasExportGetValidateBeforeCall(realm, alias, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasGet(Async)");
        }

        return realmIdentityProviderInstancesAliasGetCall(realm, alias, _callback);

    }

    /**
     * Get the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return IdentityProviderRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public IdentityProviderRepresentation realmIdentityProviderInstancesAliasGet(String realm, String alias) throws ApiException {
        ApiResponse<IdentityProviderRepresentation> localVarResp = realmIdentityProviderInstancesAliasGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Get the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;IdentityProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentityProviderRepresentation> realmIdentityProviderInstancesAliasGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<IdentityProviderRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasGetAsync(String realm, String alias, final ApiCallback<IdentityProviderRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<IdentityProviderRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasManagementPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasManagementPermissionsGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasManagementPermissionsGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasManagementPermissionsGet(Async)");
        }

        return realmIdentityProviderInstancesAliasManagementPermissionsGetCall(realm, alias, _callback);

    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference realmIdentityProviderInstancesAliasManagementPermissionsGet(String realm, String alias) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = realmIdentityProviderInstancesAliasManagementPermissionsGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> realmIdentityProviderInstancesAliasManagementPermissionsGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasManagementPermissionsGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasManagementPermissionsGetAsync(String realm, String alias, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasManagementPermissionsGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasManagementPermissionsPut
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param managementPermissionReference  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasManagementPermissionsPutCall(String realm, String alias, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementPermissionReference;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasManagementPermissionsPutValidateBeforeCall(String realm, String alias, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'managementPermissionReference' is set
        if (managementPermissionReference == null) {
            throw new ApiException("Missing the required parameter 'managementPermissionReference' when calling realmIdentityProviderInstancesAliasManagementPermissionsPut(Async)");
        }

        return realmIdentityProviderInstancesAliasManagementPermissionsPutCall(realm, alias, managementPermissionReference, _callback);

    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param managementPermissionReference  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference realmIdentityProviderInstancesAliasManagementPermissionsPut(String realm, String alias, ManagementPermissionReference managementPermissionReference) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = realmIdentityProviderInstancesAliasManagementPermissionsPutWithHttpInfo(realm, alias, managementPermissionReference);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param managementPermissionReference  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> realmIdentityProviderInstancesAliasManagementPermissionsPutWithHttpInfo(String realm, String alias, ManagementPermissionReference managementPermissionReference) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasManagementPermissionsPutValidateBeforeCall(realm, alias, managementPermissionReference, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param managementPermissionReference  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasManagementPermissionsPutAsync(String realm, String alias, ManagementPermissionReference managementPermissionReference, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasManagementPermissionsPutValidateBeforeCall(realm, alias, managementPermissionReference, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasMapperTypesGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMapperTypesGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}/mapper-types"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasMapperTypesGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMapperTypesGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMapperTypesGet(Async)");
        }

        return realmIdentityProviderInstancesAliasMapperTypesGetCall(realm, alias, _callback);

    }

    /**
     * Get mapper types for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmIdentityProviderInstancesAliasMapperTypesGet(String realm, String alias) throws ApiException {
        realmIdentityProviderInstancesAliasMapperTypesGetWithHttpInfo(realm, alias);
    }

    /**
     * Get mapper types for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmIdentityProviderInstancesAliasMapperTypesGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMapperTypesGetValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get mapper types for identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMapperTypesGetAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMapperTypesGetValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasMappersGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}/mappers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasMappersGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersGet(Async)");
        }

        return realmIdentityProviderInstancesAliasMappersGetCall(realm, alias, _callback);

    }

    /**
     * Get mappers for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return List&lt;IdentityProviderMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<IdentityProviderMapperRepresentation> realmIdentityProviderInstancesAliasMappersGet(String realm, String alias) throws ApiException {
        ApiResponse<List<IdentityProviderMapperRepresentation>> localVarResp = realmIdentityProviderInstancesAliasMappersGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Get mappers for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;List&lt;IdentityProviderMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IdentityProviderMapperRepresentation>> realmIdentityProviderInstancesAliasMappersGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<List<IdentityProviderMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers for identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersGetAsync(String realm, String alias, final ApiCallback<List<IdentityProviderMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<List<IdentityProviderMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasMappersIdDelete
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersIdDeleteCall(String realm, String alias, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}/mappers/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasMappersIdDeleteValidateBeforeCall(String realm, String alias, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersIdDelete(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmIdentityProviderInstancesAliasMappersIdDelete(Async)");
        }

        return realmIdentityProviderInstancesAliasMappersIdDeleteCall(realm, alias, id, _callback);

    }

    /**
     * Delete a mapper for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmIdentityProviderInstancesAliasMappersIdDelete(String realm, String alias, String id) throws ApiException {
        realmIdentityProviderInstancesAliasMappersIdDeleteWithHttpInfo(realm, alias, id);
    }

    /**
     * Delete a mapper for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmIdentityProviderInstancesAliasMappersIdDeleteWithHttpInfo(String realm, String alias, String id) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersIdDeleteValidateBeforeCall(realm, alias, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a mapper for the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersIdDeleteAsync(String realm, String alias, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersIdDeleteValidateBeforeCall(realm, alias, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasMappersIdGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersIdGetCall(String realm, String alias, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}/mappers/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasMappersIdGetValidateBeforeCall(String realm, String alias, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersIdGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmIdentityProviderInstancesAliasMappersIdGet(Async)");
        }

        return realmIdentityProviderInstancesAliasMappersIdGetCall(realm, alias, id, _callback);

    }

    /**
     * Get mapper by id for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @return IdentityProviderMapperRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public IdentityProviderMapperRepresentation realmIdentityProviderInstancesAliasMappersIdGet(String realm, String alias, String id) throws ApiException {
        ApiResponse<IdentityProviderMapperRepresentation> localVarResp = realmIdentityProviderInstancesAliasMappersIdGetWithHttpInfo(realm, alias, id);
        return localVarResp.getData();
    }

    /**
     * Get mapper by id for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @return ApiResponse&lt;IdentityProviderMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentityProviderMapperRepresentation> realmIdentityProviderInstancesAliasMappersIdGetWithHttpInfo(String realm, String alias, String id) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersIdGetValidateBeforeCall(realm, alias, id, null);
        Type localVarReturnType = new TypeToken<IdentityProviderMapperRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapper by id for the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersIdGetAsync(String realm, String alias, String id, final ApiCallback<IdentityProviderMapperRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersIdGetValidateBeforeCall(realm, alias, id, _callback);
        Type localVarReturnType = new TypeToken<IdentityProviderMapperRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasMappersIdPut
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param identityProviderMapperRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersIdPutCall(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProviderMapperRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}/mappers/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasMappersIdPutValidateBeforeCall(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersIdPut(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmIdentityProviderInstancesAliasMappersIdPut(Async)");
        }

        // verify the required parameter 'identityProviderMapperRepresentation' is set
        if (identityProviderMapperRepresentation == null) {
            throw new ApiException("Missing the required parameter 'identityProviderMapperRepresentation' when calling realmIdentityProviderInstancesAliasMappersIdPut(Async)");
        }

        return realmIdentityProviderInstancesAliasMappersIdPutCall(realm, alias, id, identityProviderMapperRepresentation, _callback);

    }

    /**
     * Update a mapper for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param identityProviderMapperRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmIdentityProviderInstancesAliasMappersIdPut(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation) throws ApiException {
        realmIdentityProviderInstancesAliasMappersIdPutWithHttpInfo(realm, alias, id, identityProviderMapperRepresentation);
    }

    /**
     * Update a mapper for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param identityProviderMapperRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmIdentityProviderInstancesAliasMappersIdPutWithHttpInfo(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersIdPutValidateBeforeCall(realm, alias, id, identityProviderMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a mapper for the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param identityProviderMapperRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersIdPutAsync(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersIdPutValidateBeforeCall(realm, alias, id, identityProviderMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasMappersPost
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderMapperRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersPostCall(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProviderMapperRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}/mappers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasMappersPostValidateBeforeCall(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersPost(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersPost(Async)");
        }

        // verify the required parameter 'identityProviderMapperRepresentation' is set
        if (identityProviderMapperRepresentation == null) {
            throw new ApiException("Missing the required parameter 'identityProviderMapperRepresentation' when calling realmIdentityProviderInstancesAliasMappersPost(Async)");
        }

        return realmIdentityProviderInstancesAliasMappersPostCall(realm, alias, identityProviderMapperRepresentation, _callback);

    }

    /**
     * Add a mapper to identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderMapperRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmIdentityProviderInstancesAliasMappersPost(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation) throws ApiException {
        realmIdentityProviderInstancesAliasMappersPostWithHttpInfo(realm, alias, identityProviderMapperRepresentation);
    }

    /**
     * Add a mapper to identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderMapperRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmIdentityProviderInstancesAliasMappersPostWithHttpInfo(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersPostValidateBeforeCall(realm, alias, identityProviderMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a mapper to identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderMapperRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasMappersPostAsync(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasMappersPostValidateBeforeCall(realm, alias, identityProviderMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesAliasPut
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasPutCall(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProviderRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesAliasPutValidateBeforeCall(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasPut(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasPut(Async)");
        }

        // verify the required parameter 'identityProviderRepresentation' is set
        if (identityProviderRepresentation == null) {
            throw new ApiException("Missing the required parameter 'identityProviderRepresentation' when calling realmIdentityProviderInstancesAliasPut(Async)");
        }

        return realmIdentityProviderInstancesAliasPutCall(realm, alias, identityProviderRepresentation, _callback);

    }

    /**
     * Update the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmIdentityProviderInstancesAliasPut(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation) throws ApiException {
        realmIdentityProviderInstancesAliasPutWithHttpInfo(realm, alias, identityProviderRepresentation);
    }

    /**
     * Update the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmIdentityProviderInstancesAliasPutWithHttpInfo(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasPutValidateBeforeCall(realm, alias, identityProviderRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesAliasPutAsync(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesAliasPutValidateBeforeCall(realm, alias, identityProviderRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesGet(Async)");
        }

        return realmIdentityProviderInstancesGetCall(realm, _callback);

    }

    /**
     * Get identity providers
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;IdentityProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<IdentityProviderRepresentation> realmIdentityProviderInstancesGet(String realm) throws ApiException {
        ApiResponse<List<IdentityProviderRepresentation>> localVarResp = realmIdentityProviderInstancesGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get identity providers
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;IdentityProviderRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IdentityProviderRepresentation>> realmIdentityProviderInstancesGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<IdentityProviderRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get identity providers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesGetAsync(String realm, final ApiCallback<List<IdentityProviderRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<IdentityProviderRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderInstancesPost
     * @param realm realm name (not id!) (required)
     * @param identityProviderRepresentation JSON body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesPostCall(String realm, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProviderRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/instances"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderInstancesPostValidateBeforeCall(String realm, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesPost(Async)");
        }

        // verify the required parameter 'identityProviderRepresentation' is set
        if (identityProviderRepresentation == null) {
            throw new ApiException("Missing the required parameter 'identityProviderRepresentation' when calling realmIdentityProviderInstancesPost(Async)");
        }

        return realmIdentityProviderInstancesPostCall(realm, identityProviderRepresentation, _callback);

    }

    /**
     * Create a new identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param identityProviderRepresentation JSON body (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmIdentityProviderInstancesPost(String realm, IdentityProviderRepresentation identityProviderRepresentation) throws ApiException {
        realmIdentityProviderInstancesPostWithHttpInfo(realm, identityProviderRepresentation);
    }

    /**
     * Create a new identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param identityProviderRepresentation JSON body (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmIdentityProviderInstancesPostWithHttpInfo(String realm, IdentityProviderRepresentation identityProviderRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderInstancesPostValidateBeforeCall(realm, identityProviderRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param identityProviderRepresentation JSON body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderInstancesPostAsync(String realm, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderInstancesPostValidateBeforeCall(realm, identityProviderRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmIdentityProviderProvidersProviderIdGet
     * @param realm realm name (not id!) (required)
     * @param providerId Provider id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderProvidersProviderIdGetCall(String realm, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/identity-provider/providers/{provider_id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "provider_id" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmIdentityProviderProvidersProviderIdGetValidateBeforeCall(String realm, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmIdentityProviderProvidersProviderIdGet(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling realmIdentityProviderProvidersProviderIdGet(Async)");
        }

        return realmIdentityProviderProvidersProviderIdGetCall(realm, providerId, _callback);

    }

    /**
     * Get identity providers
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId Provider id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmIdentityProviderProvidersProviderIdGet(String realm, String providerId) throws ApiException {
        realmIdentityProviderProvidersProviderIdGetWithHttpInfo(realm, providerId);
    }

    /**
     * Get identity providers
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId Provider id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmIdentityProviderProvidersProviderIdGetWithHttpInfo(String realm, String providerId) throws ApiException {
        okhttp3.Call localVarCall = realmIdentityProviderProvidersProviderIdGetValidateBeforeCall(realm, providerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get identity providers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId Provider id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmIdentityProviderProvidersProviderIdGetAsync(String realm, String providerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmIdentityProviderProvidersProviderIdGetValidateBeforeCall(realm, providerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
