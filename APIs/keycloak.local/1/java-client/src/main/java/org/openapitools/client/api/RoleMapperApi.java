/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MappingsRepresentation;
import org.openapitools.client.model.RoleRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleMapperApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoleMapperApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleMapperApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for realmGroupsIdRoleMappingsGet
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/groups/{id}/role-mappings"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmGroupsIdRoleMappingsGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsGet(Async)");
        }

        return realmGroupsIdRoleMappingsGetCall(realm, id, _callback);

    }

    /**
     * Get role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @return MappingsRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public MappingsRepresentation realmGroupsIdRoleMappingsGet(String realm, String id) throws ApiException {
        ApiResponse<MappingsRepresentation> localVarResp = realmGroupsIdRoleMappingsGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @return ApiResponse&lt;MappingsRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MappingsRepresentation> realmGroupsIdRoleMappingsGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get role mappings (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsGetAsync(String realm, String id, final ApiCallback<MappingsRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmGroupsIdRoleMappingsRealmAvailableGet
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmAvailableGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/groups/{id}/role-mappings/realm/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmGroupsIdRoleMappingsRealmAvailableGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmAvailableGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmAvailableGet(Async)");
        }

        return realmGroupsIdRoleMappingsRealmAvailableGetCall(realm, id, _callback);

    }

    /**
     * Get realm-level roles that can be mapped
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmGroupsIdRoleMappingsRealmAvailableGet(String realm, String id) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmGroupsIdRoleMappingsRealmAvailableGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles that can be mapped
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmGroupsIdRoleMappingsRealmAvailableGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmAvailableGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles that can be mapped (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmAvailableGetAsync(String realm, String id, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmAvailableGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmGroupsIdRoleMappingsRealmCompositeGet
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmCompositeGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/groups/{id}/role-mappings/realm/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmGroupsIdRoleMappingsRealmCompositeGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmCompositeGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmCompositeGet(Async)");
        }

        return realmGroupsIdRoleMappingsRealmCompositeGetCall(realm, id, _callback);

    }

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmGroupsIdRoleMappingsRealmCompositeGet(String realm, String id) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmGroupsIdRoleMappingsRealmCompositeGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmGroupsIdRoleMappingsRealmCompositeGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmCompositeGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmCompositeGetAsync(String realm, String id, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmCompositeGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmGroupsIdRoleMappingsRealmDelete
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param roleRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmDeleteCall(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/groups/{id}/role-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmGroupsIdRoleMappingsRealmDeleteValidateBeforeCall(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmDelete(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmGroupsIdRoleMappingsRealmDelete(Async)");
        }

        return realmGroupsIdRoleMappingsRealmDeleteCall(realm, id, roleRepresentation, _callback);

    }

    /**
     * Delete realm-level role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param roleRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmGroupsIdRoleMappingsRealmDelete(String realm, String id, List<RoleRepresentation> roleRepresentation) throws ApiException {
        realmGroupsIdRoleMappingsRealmDeleteWithHttpInfo(realm, id, roleRepresentation);
    }

    /**
     * Delete realm-level role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param roleRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmGroupsIdRoleMappingsRealmDeleteWithHttpInfo(String realm, String id, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmDeleteValidateBeforeCall(realm, id, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete realm-level role mappings (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param roleRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmDeleteAsync(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmDeleteValidateBeforeCall(realm, id, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmGroupsIdRoleMappingsRealmGet
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/groups/{id}/role-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmGroupsIdRoleMappingsRealmGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmGet(Async)");
        }

        return realmGroupsIdRoleMappingsRealmGetCall(realm, id, _callback);

    }

    /**
     * Get realm-level role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmGroupsIdRoleMappingsRealmGet(String realm, String id) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmGroupsIdRoleMappingsRealmGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get realm-level role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmGroupsIdRoleMappingsRealmGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level role mappings (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmGetAsync(String realm, String id, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmGroupsIdRoleMappingsRealmPost
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param roleRepresentation Roles to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmPostCall(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/groups/{id}/role-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmGroupsIdRoleMappingsRealmPostValidateBeforeCall(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmPost(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmGroupsIdRoleMappingsRealmPost(Async)");
        }

        return realmGroupsIdRoleMappingsRealmPostCall(realm, id, roleRepresentation, _callback);

    }

    /**
     * Add realm-level role mappings to the user
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param roleRepresentation Roles to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmGroupsIdRoleMappingsRealmPost(String realm, String id, List<RoleRepresentation> roleRepresentation) throws ApiException {
        realmGroupsIdRoleMappingsRealmPostWithHttpInfo(realm, id, roleRepresentation);
    }

    /**
     * Add realm-level role mappings to the user
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param roleRepresentation Roles to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmGroupsIdRoleMappingsRealmPostWithHttpInfo(String realm, String id, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmPostValidateBeforeCall(realm, id, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add realm-level role mappings to the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param roleRepresentation Roles to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmGroupsIdRoleMappingsRealmPostAsync(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmGroupsIdRoleMappingsRealmPostValidateBeforeCall(realm, id, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmUsersIdRoleMappingsGet
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/users/{id}/role-mappings"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmUsersIdRoleMappingsGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsGet(Async)");
        }

        return realmUsersIdRoleMappingsGetCall(realm, id, _callback);

    }

    /**
     * Get role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @return MappingsRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public MappingsRepresentation realmUsersIdRoleMappingsGet(String realm, String id) throws ApiException {
        ApiResponse<MappingsRepresentation> localVarResp = realmUsersIdRoleMappingsGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @return ApiResponse&lt;MappingsRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MappingsRepresentation> realmUsersIdRoleMappingsGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmUsersIdRoleMappingsGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get role mappings (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsGetAsync(String realm, String id, final ApiCallback<MappingsRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmUsersIdRoleMappingsGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmUsersIdRoleMappingsRealmAvailableGet
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmAvailableGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/users/{id}/role-mappings/realm/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmUsersIdRoleMappingsRealmAvailableGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmAvailableGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmAvailableGet(Async)");
        }

        return realmUsersIdRoleMappingsRealmAvailableGetCall(realm, id, _callback);

    }

    /**
     * Get realm-level roles that can be mapped
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmUsersIdRoleMappingsRealmAvailableGet(String realm, String id) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmUsersIdRoleMappingsRealmAvailableGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles that can be mapped
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmUsersIdRoleMappingsRealmAvailableGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmAvailableGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles that can be mapped (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmAvailableGetAsync(String realm, String id, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmAvailableGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmUsersIdRoleMappingsRealmCompositeGet
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmCompositeGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/users/{id}/role-mappings/realm/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmUsersIdRoleMappingsRealmCompositeGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmCompositeGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmCompositeGet(Async)");
        }

        return realmUsersIdRoleMappingsRealmCompositeGetCall(realm, id, _callback);

    }

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmUsersIdRoleMappingsRealmCompositeGet(String realm, String id) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmUsersIdRoleMappingsRealmCompositeGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmUsersIdRoleMappingsRealmCompositeGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmCompositeGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmCompositeGetAsync(String realm, String id, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmCompositeGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmUsersIdRoleMappingsRealmDelete
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param roleRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmDeleteCall(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/users/{id}/role-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmUsersIdRoleMappingsRealmDeleteValidateBeforeCall(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmDelete(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmUsersIdRoleMappingsRealmDelete(Async)");
        }

        return realmUsersIdRoleMappingsRealmDeleteCall(realm, id, roleRepresentation, _callback);

    }

    /**
     * Delete realm-level role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param roleRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmUsersIdRoleMappingsRealmDelete(String realm, String id, List<RoleRepresentation> roleRepresentation) throws ApiException {
        realmUsersIdRoleMappingsRealmDeleteWithHttpInfo(realm, id, roleRepresentation);
    }

    /**
     * Delete realm-level role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param roleRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmUsersIdRoleMappingsRealmDeleteWithHttpInfo(String realm, String id, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmDeleteValidateBeforeCall(realm, id, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete realm-level role mappings (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param roleRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmDeleteAsync(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmDeleteValidateBeforeCall(realm, id, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmUsersIdRoleMappingsRealmGet
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/users/{id}/role-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmUsersIdRoleMappingsRealmGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmGet(Async)");
        }

        return realmUsersIdRoleMappingsRealmGetCall(realm, id, _callback);

    }

    /**
     * Get realm-level role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmUsersIdRoleMappingsRealmGet(String realm, String id) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmUsersIdRoleMappingsRealmGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get realm-level role mappings
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmUsersIdRoleMappingsRealmGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level role mappings (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmGetAsync(String realm, String id, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmUsersIdRoleMappingsRealmPost
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param roleRepresentation Roles to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmPostCall(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/users/{id}/role-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmUsersIdRoleMappingsRealmPostValidateBeforeCall(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmPost(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmUsersIdRoleMappingsRealmPost(Async)");
        }

        return realmUsersIdRoleMappingsRealmPostCall(realm, id, roleRepresentation, _callback);

    }

    /**
     * Add realm-level role mappings to the user
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param roleRepresentation Roles to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmUsersIdRoleMappingsRealmPost(String realm, String id, List<RoleRepresentation> roleRepresentation) throws ApiException {
        realmUsersIdRoleMappingsRealmPostWithHttpInfo(realm, id, roleRepresentation);
    }

    /**
     * Add realm-level role mappings to the user
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param roleRepresentation Roles to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmUsersIdRoleMappingsRealmPostWithHttpInfo(String realm, String id, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmPostValidateBeforeCall(realm, id, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add realm-level role mappings to the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id User id (required)
     * @param roleRepresentation Roles to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmUsersIdRoleMappingsRealmPostAsync(String realm, String id, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmUsersIdRoleMappingsRealmPostValidateBeforeCall(realm, id, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
