/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PolicyRepresentation;
import org.openapitools.client.model.ResourceRepresentation;
import org.openapitools.client.model.ScopeRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceServerRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceServerRepresentation {
  public static final String SERIALIZED_NAME_ALLOW_REMOTE_RESOURCE_MANAGEMENT = "allowRemoteResourceManagement";
  @SerializedName(SERIALIZED_NAME_ALLOW_REMOTE_RESOURCE_MANAGEMENT)
  private Boolean allowRemoteResourceManagement;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  /**
   * Gets or Sets decisionStrategy
   */
  @JsonAdapter(DecisionStrategyEnum.Adapter.class)
  public enum DecisionStrategyEnum {
    AFFIRMATIVE("AFFIRMATIVE"),
    
    UNANIMOUS("UNANIMOUS"),
    
    CONSENSUS("CONSENSUS");

    private String value;

    DecisionStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecisionStrategyEnum fromValue(String value) {
      for (DecisionStrategyEnum b : DecisionStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DecisionStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecisionStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecisionStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecisionStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DecisionStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECISION_STRATEGY = "decisionStrategy";
  @SerializedName(SERIALIZED_NAME_DECISION_STRATEGY)
  private DecisionStrategyEnum decisionStrategy;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<PolicyRepresentation> policies = new ArrayList<>();

  /**
   * Gets or Sets policyEnforcementMode
   */
  @JsonAdapter(PolicyEnforcementModeEnum.Adapter.class)
  public enum PolicyEnforcementModeEnum {
    ENFORCING("ENFORCING"),
    
    PERMISSIVE("PERMISSIVE"),
    
    DISABLED("DISABLED");

    private String value;

    PolicyEnforcementModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyEnforcementModeEnum fromValue(String value) {
      for (PolicyEnforcementModeEnum b : PolicyEnforcementModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyEnforcementModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnforcementModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyEnforcementModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyEnforcementModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyEnforcementModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY_ENFORCEMENT_MODE = "policyEnforcementMode";
  @SerializedName(SERIALIZED_NAME_POLICY_ENFORCEMENT_MODE)
  private PolicyEnforcementModeEnum policyEnforcementMode;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<ResourceRepresentation> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<ScopeRepresentation> scopes = new ArrayList<>();

  public ResourceServerRepresentation() {
  }

  public ResourceServerRepresentation allowRemoteResourceManagement(Boolean allowRemoteResourceManagement) {
    this.allowRemoteResourceManagement = allowRemoteResourceManagement;
    return this;
  }

  /**
   * Get allowRemoteResourceManagement
   * @return allowRemoteResourceManagement
   */
  @javax.annotation.Nullable
  public Boolean getAllowRemoteResourceManagement() {
    return allowRemoteResourceManagement;
  }

  public void setAllowRemoteResourceManagement(Boolean allowRemoteResourceManagement) {
    this.allowRemoteResourceManagement = allowRemoteResourceManagement;
  }


  public ResourceServerRepresentation clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public ResourceServerRepresentation decisionStrategy(DecisionStrategyEnum decisionStrategy) {
    this.decisionStrategy = decisionStrategy;
    return this;
  }

  /**
   * Get decisionStrategy
   * @return decisionStrategy
   */
  @javax.annotation.Nullable
  public DecisionStrategyEnum getDecisionStrategy() {
    return decisionStrategy;
  }

  public void setDecisionStrategy(DecisionStrategyEnum decisionStrategy) {
    this.decisionStrategy = decisionStrategy;
  }


  public ResourceServerRepresentation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ResourceServerRepresentation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ResourceServerRepresentation policies(List<PolicyRepresentation> policies) {
    this.policies = policies;
    return this;
  }

  public ResourceServerRepresentation addPoliciesItem(PolicyRepresentation policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * Get policies
   * @return policies
   */
  @javax.annotation.Nullable
  public List<PolicyRepresentation> getPolicies() {
    return policies;
  }

  public void setPolicies(List<PolicyRepresentation> policies) {
    this.policies = policies;
  }


  public ResourceServerRepresentation policyEnforcementMode(PolicyEnforcementModeEnum policyEnforcementMode) {
    this.policyEnforcementMode = policyEnforcementMode;
    return this;
  }

  /**
   * Get policyEnforcementMode
   * @return policyEnforcementMode
   */
  @javax.annotation.Nullable
  public PolicyEnforcementModeEnum getPolicyEnforcementMode() {
    return policyEnforcementMode;
  }

  public void setPolicyEnforcementMode(PolicyEnforcementModeEnum policyEnforcementMode) {
    this.policyEnforcementMode = policyEnforcementMode;
  }


  public ResourceServerRepresentation resources(List<ResourceRepresentation> resources) {
    this.resources = resources;
    return this;
  }

  public ResourceServerRepresentation addResourcesItem(ResourceRepresentation resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public List<ResourceRepresentation> getResources() {
    return resources;
  }

  public void setResources(List<ResourceRepresentation> resources) {
    this.resources = resources;
  }


  public ResourceServerRepresentation scopes(List<ScopeRepresentation> scopes) {
    this.scopes = scopes;
    return this;
  }

  public ResourceServerRepresentation addScopesItem(ScopeRepresentation scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<ScopeRepresentation> getScopes() {
    return scopes;
  }

  public void setScopes(List<ScopeRepresentation> scopes) {
    this.scopes = scopes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceServerRepresentation resourceServerRepresentation = (ResourceServerRepresentation) o;
    return Objects.equals(this.allowRemoteResourceManagement, resourceServerRepresentation.allowRemoteResourceManagement) &&
        Objects.equals(this.clientId, resourceServerRepresentation.clientId) &&
        Objects.equals(this.decisionStrategy, resourceServerRepresentation.decisionStrategy) &&
        Objects.equals(this.id, resourceServerRepresentation.id) &&
        Objects.equals(this.name, resourceServerRepresentation.name) &&
        Objects.equals(this.policies, resourceServerRepresentation.policies) &&
        Objects.equals(this.policyEnforcementMode, resourceServerRepresentation.policyEnforcementMode) &&
        Objects.equals(this.resources, resourceServerRepresentation.resources) &&
        Objects.equals(this.scopes, resourceServerRepresentation.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowRemoteResourceManagement, clientId, decisionStrategy, id, name, policies, policyEnforcementMode, resources, scopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceServerRepresentation {\n");
    sb.append("    allowRemoteResourceManagement: ").append(toIndentedString(allowRemoteResourceManagement)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    decisionStrategy: ").append(toIndentedString(decisionStrategy)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    policyEnforcementMode: ").append(toIndentedString(policyEnforcementMode)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowRemoteResourceManagement");
    openapiFields.add("clientId");
    openapiFields.add("decisionStrategy");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("policies");
    openapiFields.add("policyEnforcementMode");
    openapiFields.add("resources");
    openapiFields.add("scopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceServerRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceServerRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceServerRepresentation is not found in the empty JSON string", ResourceServerRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceServerRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceServerRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("decisionStrategy") != null && !jsonObj.get("decisionStrategy").isJsonNull()) && !jsonObj.get("decisionStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionStrategy").toString()));
      }
      // validate the optional field `decisionStrategy`
      if (jsonObj.get("decisionStrategy") != null && !jsonObj.get("decisionStrategy").isJsonNull()) {
        DecisionStrategyEnum.validateJsonElement(jsonObj.get("decisionStrategy"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policies` to be an array in the JSON string but got `%s`", jsonObj.get("policies").toString()));
          }

          // validate the optional field `policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            PolicyRepresentation.validateJsonElement(jsonArraypolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("policyEnforcementMode") != null && !jsonObj.get("policyEnforcementMode").isJsonNull()) && !jsonObj.get("policyEnforcementMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyEnforcementMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyEnforcementMode").toString()));
      }
      // validate the optional field `policyEnforcementMode`
      if (jsonObj.get("policyEnforcementMode") != null && !jsonObj.get("policyEnforcementMode").isJsonNull()) {
        PolicyEnforcementModeEnum.validateJsonElement(jsonObj.get("policyEnforcementMode"));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            ResourceRepresentation.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull()) {
        JsonArray jsonArrayscopes = jsonObj.getAsJsonArray("scopes");
        if (jsonArrayscopes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scopes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
          }

          // validate the optional field `scopes` (array)
          for (int i = 0; i < jsonArrayscopes.size(); i++) {
            ScopeRepresentation.validateJsonElement(jsonArrayscopes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceServerRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceServerRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceServerRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceServerRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceServerRepresentation>() {
           @Override
           public void write(JsonWriter out, ResourceServerRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceServerRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceServerRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceServerRepresentation
   * @throws IOException if the JSON string is invalid with respect to ResourceServerRepresentation
   */
  public static ResourceServerRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceServerRepresentation.class);
  }

  /**
   * Convert an instance of ResourceServerRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

