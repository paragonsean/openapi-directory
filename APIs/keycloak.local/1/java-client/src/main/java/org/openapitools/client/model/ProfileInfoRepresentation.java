/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProfileInfoRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProfileInfoRepresentation {
  public static final String SERIALIZED_NAME_DISABLED_FEATURES = "disabledFeatures";
  @SerializedName(SERIALIZED_NAME_DISABLED_FEATURES)
  private List<String> disabledFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPERIMENTAL_FEATURES = "experimentalFeatures";
  @SerializedName(SERIALIZED_NAME_EXPERIMENTAL_FEATURES)
  private List<String> experimentalFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREVIEW_FEATURES = "previewFeatures";
  @SerializedName(SERIALIZED_NAME_PREVIEW_FEATURES)
  private List<String> previewFeatures = new ArrayList<>();

  public ProfileInfoRepresentation() {
  }

  public ProfileInfoRepresentation disabledFeatures(List<String> disabledFeatures) {
    this.disabledFeatures = disabledFeatures;
    return this;
  }

  public ProfileInfoRepresentation addDisabledFeaturesItem(String disabledFeaturesItem) {
    if (this.disabledFeatures == null) {
      this.disabledFeatures = new ArrayList<>();
    }
    this.disabledFeatures.add(disabledFeaturesItem);
    return this;
  }

  /**
   * Get disabledFeatures
   * @return disabledFeatures
   */
  @javax.annotation.Nullable
  public List<String> getDisabledFeatures() {
    return disabledFeatures;
  }

  public void setDisabledFeatures(List<String> disabledFeatures) {
    this.disabledFeatures = disabledFeatures;
  }


  public ProfileInfoRepresentation experimentalFeatures(List<String> experimentalFeatures) {
    this.experimentalFeatures = experimentalFeatures;
    return this;
  }

  public ProfileInfoRepresentation addExperimentalFeaturesItem(String experimentalFeaturesItem) {
    if (this.experimentalFeatures == null) {
      this.experimentalFeatures = new ArrayList<>();
    }
    this.experimentalFeatures.add(experimentalFeaturesItem);
    return this;
  }

  /**
   * Get experimentalFeatures
   * @return experimentalFeatures
   */
  @javax.annotation.Nullable
  public List<String> getExperimentalFeatures() {
    return experimentalFeatures;
  }

  public void setExperimentalFeatures(List<String> experimentalFeatures) {
    this.experimentalFeatures = experimentalFeatures;
  }


  public ProfileInfoRepresentation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProfileInfoRepresentation previewFeatures(List<String> previewFeatures) {
    this.previewFeatures = previewFeatures;
    return this;
  }

  public ProfileInfoRepresentation addPreviewFeaturesItem(String previewFeaturesItem) {
    if (this.previewFeatures == null) {
      this.previewFeatures = new ArrayList<>();
    }
    this.previewFeatures.add(previewFeaturesItem);
    return this;
  }

  /**
   * Get previewFeatures
   * @return previewFeatures
   */
  @javax.annotation.Nullable
  public List<String> getPreviewFeatures() {
    return previewFeatures;
  }

  public void setPreviewFeatures(List<String> previewFeatures) {
    this.previewFeatures = previewFeatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfileInfoRepresentation profileInfoRepresentation = (ProfileInfoRepresentation) o;
    return Objects.equals(this.disabledFeatures, profileInfoRepresentation.disabledFeatures) &&
        Objects.equals(this.experimentalFeatures, profileInfoRepresentation.experimentalFeatures) &&
        Objects.equals(this.name, profileInfoRepresentation.name) &&
        Objects.equals(this.previewFeatures, profileInfoRepresentation.previewFeatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disabledFeatures, experimentalFeatures, name, previewFeatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfileInfoRepresentation {\n");
    sb.append("    disabledFeatures: ").append(toIndentedString(disabledFeatures)).append("\n");
    sb.append("    experimentalFeatures: ").append(toIndentedString(experimentalFeatures)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    previewFeatures: ").append(toIndentedString(previewFeatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disabledFeatures");
    openapiFields.add("experimentalFeatures");
    openapiFields.add("name");
    openapiFields.add("previewFeatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProfileInfoRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfileInfoRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfileInfoRepresentation is not found in the empty JSON string", ProfileInfoRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfileInfoRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfileInfoRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("disabledFeatures") != null && !jsonObj.get("disabledFeatures").isJsonNull() && !jsonObj.get("disabledFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabledFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("disabledFeatures").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("experimentalFeatures") != null && !jsonObj.get("experimentalFeatures").isJsonNull() && !jsonObj.get("experimentalFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `experimentalFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("experimentalFeatures").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("previewFeatures") != null && !jsonObj.get("previewFeatures").isJsonNull() && !jsonObj.get("previewFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `previewFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("previewFeatures").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfileInfoRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfileInfoRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfileInfoRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfileInfoRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfileInfoRepresentation>() {
           @Override
           public void write(JsonWriter out, ProfileInfoRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfileInfoRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProfileInfoRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProfileInfoRepresentation
   * @throws IOException if the JSON string is invalid with respect to ProfileInfoRepresentation
   */
  public static ProfileInfoRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfileInfoRepresentation.class);
  }

  /**
   * Convert an instance of ProfileInfoRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

