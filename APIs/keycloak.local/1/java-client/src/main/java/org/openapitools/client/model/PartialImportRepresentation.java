/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClientRepresentation;
import org.openapitools.client.model.GroupRepresentation;
import org.openapitools.client.model.IdentityProviderRepresentation;
import org.openapitools.client.model.RolesRepresentation;
import org.openapitools.client.model.UserRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PartialImportRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartialImportRepresentation {
  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  private List<ClientRepresentation> clients = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<GroupRepresentation> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDERS = "identityProviders";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDERS)
  private List<IdentityProviderRepresentation> identityProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_IF_RESOURCE_EXISTS = "ifResourceExists";
  @SerializedName(SERIALIZED_NAME_IF_RESOURCE_EXISTS)
  private String ifResourceExists;

  /**
   * Gets or Sets policy
   */
  @JsonAdapter(PolicyEnum.Adapter.class)
  public enum PolicyEnum {
    SKIP("SKIP"),
    
    OVERWRITE("OVERWRITE"),
    
    FAIL("FAIL");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyEnum fromValue(String value) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private PolicyEnum policy;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private RolesRepresentation roles;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<UserRepresentation> users = new ArrayList<>();

  public PartialImportRepresentation() {
  }

  public PartialImportRepresentation clients(List<ClientRepresentation> clients) {
    this.clients = clients;
    return this;
  }

  public PartialImportRepresentation addClientsItem(ClientRepresentation clientsItem) {
    if (this.clients == null) {
      this.clients = new ArrayList<>();
    }
    this.clients.add(clientsItem);
    return this;
  }

  /**
   * Get clients
   * @return clients
   */
  @javax.annotation.Nullable
  public List<ClientRepresentation> getClients() {
    return clients;
  }

  public void setClients(List<ClientRepresentation> clients) {
    this.clients = clients;
  }


  public PartialImportRepresentation groups(List<GroupRepresentation> groups) {
    this.groups = groups;
    return this;
  }

  public PartialImportRepresentation addGroupsItem(GroupRepresentation groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public List<GroupRepresentation> getGroups() {
    return groups;
  }

  public void setGroups(List<GroupRepresentation> groups) {
    this.groups = groups;
  }


  public PartialImportRepresentation identityProviders(List<IdentityProviderRepresentation> identityProviders) {
    this.identityProviders = identityProviders;
    return this;
  }

  public PartialImportRepresentation addIdentityProvidersItem(IdentityProviderRepresentation identityProvidersItem) {
    if (this.identityProviders == null) {
      this.identityProviders = new ArrayList<>();
    }
    this.identityProviders.add(identityProvidersItem);
    return this;
  }

  /**
   * Get identityProviders
   * @return identityProviders
   */
  @javax.annotation.Nullable
  public List<IdentityProviderRepresentation> getIdentityProviders() {
    return identityProviders;
  }

  public void setIdentityProviders(List<IdentityProviderRepresentation> identityProviders) {
    this.identityProviders = identityProviders;
  }


  public PartialImportRepresentation ifResourceExists(String ifResourceExists) {
    this.ifResourceExists = ifResourceExists;
    return this;
  }

  /**
   * Get ifResourceExists
   * @return ifResourceExists
   */
  @javax.annotation.Nullable
  public String getIfResourceExists() {
    return ifResourceExists;
  }

  public void setIfResourceExists(String ifResourceExists) {
    this.ifResourceExists = ifResourceExists;
  }


  public PartialImportRepresentation policy(PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public PolicyEnum getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }


  public PartialImportRepresentation roles(RolesRepresentation roles) {
    this.roles = roles;
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public RolesRepresentation getRoles() {
    return roles;
  }

  public void setRoles(RolesRepresentation roles) {
    this.roles = roles;
  }


  public PartialImportRepresentation users(List<UserRepresentation> users) {
    this.users = users;
    return this;
  }

  public PartialImportRepresentation addUsersItem(UserRepresentation usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public List<UserRepresentation> getUsers() {
    return users;
  }

  public void setUsers(List<UserRepresentation> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartialImportRepresentation partialImportRepresentation = (PartialImportRepresentation) o;
    return Objects.equals(this.clients, partialImportRepresentation.clients) &&
        Objects.equals(this.groups, partialImportRepresentation.groups) &&
        Objects.equals(this.identityProviders, partialImportRepresentation.identityProviders) &&
        Objects.equals(this.ifResourceExists, partialImportRepresentation.ifResourceExists) &&
        Objects.equals(this.policy, partialImportRepresentation.policy) &&
        Objects.equals(this.roles, partialImportRepresentation.roles) &&
        Objects.equals(this.users, partialImportRepresentation.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clients, groups, identityProviders, ifResourceExists, policy, roles, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartialImportRepresentation {\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    identityProviders: ").append(toIndentedString(identityProviders)).append("\n");
    sb.append("    ifResourceExists: ").append(toIndentedString(ifResourceExists)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clients");
    openapiFields.add("groups");
    openapiFields.add("identityProviders");
    openapiFields.add("ifResourceExists");
    openapiFields.add("policy");
    openapiFields.add("roles");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartialImportRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartialImportRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartialImportRepresentation is not found in the empty JSON string", PartialImportRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartialImportRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartialImportRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("clients") != null && !jsonObj.get("clients").isJsonNull()) {
        JsonArray jsonArrayclients = jsonObj.getAsJsonArray("clients");
        if (jsonArrayclients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clients` to be an array in the JSON string but got `%s`", jsonObj.get("clients").toString()));
          }

          // validate the optional field `clients` (array)
          for (int i = 0; i < jsonArrayclients.size(); i++) {
            ClientRepresentation.validateJsonElement(jsonArrayclients.get(i));
          };
        }
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            GroupRepresentation.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      if (jsonObj.get("identityProviders") != null && !jsonObj.get("identityProviders").isJsonNull()) {
        JsonArray jsonArrayidentityProviders = jsonObj.getAsJsonArray("identityProviders");
        if (jsonArrayidentityProviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identityProviders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identityProviders` to be an array in the JSON string but got `%s`", jsonObj.get("identityProviders").toString()));
          }

          // validate the optional field `identityProviders` (array)
          for (int i = 0; i < jsonArrayidentityProviders.size(); i++) {
            IdentityProviderRepresentation.validateJsonElement(jsonArrayidentityProviders.get(i));
          };
        }
      }
      if ((jsonObj.get("ifResourceExists") != null && !jsonObj.get("ifResourceExists").isJsonNull()) && !jsonObj.get("ifResourceExists").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ifResourceExists` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ifResourceExists").toString()));
      }
      if ((jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) && !jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
      // validate the optional field `policy`
      if (jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) {
        PolicyEnum.validateJsonElement(jsonObj.get("policy"));
      }
      // validate the optional field `roles`
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        RolesRepresentation.validateJsonElement(jsonObj.get("roles"));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            UserRepresentation.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartialImportRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartialImportRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartialImportRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartialImportRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<PartialImportRepresentation>() {
           @Override
           public void write(JsonWriter out, PartialImportRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartialImportRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartialImportRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartialImportRepresentation
   * @throws IOException if the JSON string is invalid with respect to PartialImportRepresentation
   */
  public static PartialImportRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartialImportRepresentation.class);
  }

  /**
   * Convert an instance of PartialImportRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

