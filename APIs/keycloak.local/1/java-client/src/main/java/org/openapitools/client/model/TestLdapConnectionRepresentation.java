/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestLdapConnectionRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestLdapConnectionRepresentation {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_BIND_CREDENTIAL = "bindCredential";
  @SerializedName(SERIALIZED_NAME_BIND_CREDENTIAL)
  private String bindCredential;

  public static final String SERIALIZED_NAME_BIND_DN = "bindDn";
  @SerializedName(SERIALIZED_NAME_BIND_DN)
  private String bindDn;

  public static final String SERIALIZED_NAME_COMPONENT_ID = "componentId";
  @SerializedName(SERIALIZED_NAME_COMPONENT_ID)
  private String componentId;

  public static final String SERIALIZED_NAME_CONNECTION_TIMEOUT = "connectionTimeout";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TIMEOUT)
  private String connectionTimeout;

  public static final String SERIALIZED_NAME_CONNECTION_URL = "connectionUrl";
  @SerializedName(SERIALIZED_NAME_CONNECTION_URL)
  private String connectionUrl;

  public static final String SERIALIZED_NAME_START_TLS = "startTls";
  @SerializedName(SERIALIZED_NAME_START_TLS)
  private String startTls;

  public static final String SERIALIZED_NAME_USE_TRUSTSTORE_SPI = "useTruststoreSpi";
  @SerializedName(SERIALIZED_NAME_USE_TRUSTSTORE_SPI)
  private String useTruststoreSpi;

  public TestLdapConnectionRepresentation() {
  }

  public TestLdapConnectionRepresentation action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public TestLdapConnectionRepresentation bindCredential(String bindCredential) {
    this.bindCredential = bindCredential;
    return this;
  }

  /**
   * Get bindCredential
   * @return bindCredential
   */
  @javax.annotation.Nullable
  public String getBindCredential() {
    return bindCredential;
  }

  public void setBindCredential(String bindCredential) {
    this.bindCredential = bindCredential;
  }


  public TestLdapConnectionRepresentation bindDn(String bindDn) {
    this.bindDn = bindDn;
    return this;
  }

  /**
   * Get bindDn
   * @return bindDn
   */
  @javax.annotation.Nullable
  public String getBindDn() {
    return bindDn;
  }

  public void setBindDn(String bindDn) {
    this.bindDn = bindDn;
  }


  public TestLdapConnectionRepresentation componentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

  /**
   * Get componentId
   * @return componentId
   */
  @javax.annotation.Nullable
  public String getComponentId() {
    return componentId;
  }

  public void setComponentId(String componentId) {
    this.componentId = componentId;
  }


  public TestLdapConnectionRepresentation connectionTimeout(String connectionTimeout) {
    this.connectionTimeout = connectionTimeout;
    return this;
  }

  /**
   * Get connectionTimeout
   * @return connectionTimeout
   */
  @javax.annotation.Nullable
  public String getConnectionTimeout() {
    return connectionTimeout;
  }

  public void setConnectionTimeout(String connectionTimeout) {
    this.connectionTimeout = connectionTimeout;
  }


  public TestLdapConnectionRepresentation connectionUrl(String connectionUrl) {
    this.connectionUrl = connectionUrl;
    return this;
  }

  /**
   * Get connectionUrl
   * @return connectionUrl
   */
  @javax.annotation.Nullable
  public String getConnectionUrl() {
    return connectionUrl;
  }

  public void setConnectionUrl(String connectionUrl) {
    this.connectionUrl = connectionUrl;
  }


  public TestLdapConnectionRepresentation startTls(String startTls) {
    this.startTls = startTls;
    return this;
  }

  /**
   * Get startTls
   * @return startTls
   */
  @javax.annotation.Nullable
  public String getStartTls() {
    return startTls;
  }

  public void setStartTls(String startTls) {
    this.startTls = startTls;
  }


  public TestLdapConnectionRepresentation useTruststoreSpi(String useTruststoreSpi) {
    this.useTruststoreSpi = useTruststoreSpi;
    return this;
  }

  /**
   * Get useTruststoreSpi
   * @return useTruststoreSpi
   */
  @javax.annotation.Nullable
  public String getUseTruststoreSpi() {
    return useTruststoreSpi;
  }

  public void setUseTruststoreSpi(String useTruststoreSpi) {
    this.useTruststoreSpi = useTruststoreSpi;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestLdapConnectionRepresentation testLdapConnectionRepresentation = (TestLdapConnectionRepresentation) o;
    return Objects.equals(this.action, testLdapConnectionRepresentation.action) &&
        Objects.equals(this.bindCredential, testLdapConnectionRepresentation.bindCredential) &&
        Objects.equals(this.bindDn, testLdapConnectionRepresentation.bindDn) &&
        Objects.equals(this.componentId, testLdapConnectionRepresentation.componentId) &&
        Objects.equals(this.connectionTimeout, testLdapConnectionRepresentation.connectionTimeout) &&
        Objects.equals(this.connectionUrl, testLdapConnectionRepresentation.connectionUrl) &&
        Objects.equals(this.startTls, testLdapConnectionRepresentation.startTls) &&
        Objects.equals(this.useTruststoreSpi, testLdapConnectionRepresentation.useTruststoreSpi);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, bindCredential, bindDn, componentId, connectionTimeout, connectionUrl, startTls, useTruststoreSpi);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestLdapConnectionRepresentation {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    bindCredential: ").append(toIndentedString(bindCredential)).append("\n");
    sb.append("    bindDn: ").append(toIndentedString(bindDn)).append("\n");
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    connectionTimeout: ").append(toIndentedString(connectionTimeout)).append("\n");
    sb.append("    connectionUrl: ").append(toIndentedString(connectionUrl)).append("\n");
    sb.append("    startTls: ").append(toIndentedString(startTls)).append("\n");
    sb.append("    useTruststoreSpi: ").append(toIndentedString(useTruststoreSpi)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("bindCredential");
    openapiFields.add("bindDn");
    openapiFields.add("componentId");
    openapiFields.add("connectionTimeout");
    openapiFields.add("connectionUrl");
    openapiFields.add("startTls");
    openapiFields.add("useTruststoreSpi");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestLdapConnectionRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestLdapConnectionRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestLdapConnectionRepresentation is not found in the empty JSON string", TestLdapConnectionRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestLdapConnectionRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestLdapConnectionRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("bindCredential") != null && !jsonObj.get("bindCredential").isJsonNull()) && !jsonObj.get("bindCredential").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bindCredential` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bindCredential").toString()));
      }
      if ((jsonObj.get("bindDn") != null && !jsonObj.get("bindDn").isJsonNull()) && !jsonObj.get("bindDn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bindDn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bindDn").toString()));
      }
      if ((jsonObj.get("componentId") != null && !jsonObj.get("componentId").isJsonNull()) && !jsonObj.get("componentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `componentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("componentId").toString()));
      }
      if ((jsonObj.get("connectionTimeout") != null && !jsonObj.get("connectionTimeout").isJsonNull()) && !jsonObj.get("connectionTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionTimeout").toString()));
      }
      if ((jsonObj.get("connectionUrl") != null && !jsonObj.get("connectionUrl").isJsonNull()) && !jsonObj.get("connectionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionUrl").toString()));
      }
      if ((jsonObj.get("startTls") != null && !jsonObj.get("startTls").isJsonNull()) && !jsonObj.get("startTls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTls").toString()));
      }
      if ((jsonObj.get("useTruststoreSpi") != null && !jsonObj.get("useTruststoreSpi").isJsonNull()) && !jsonObj.get("useTruststoreSpi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `useTruststoreSpi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("useTruststoreSpi").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestLdapConnectionRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestLdapConnectionRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestLdapConnectionRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestLdapConnectionRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<TestLdapConnectionRepresentation>() {
           @Override
           public void write(JsonWriter out, TestLdapConnectionRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestLdapConnectionRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestLdapConnectionRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestLdapConnectionRepresentation
   * @throws IOException if the JSON string is invalid with respect to TestLdapConnectionRepresentation
   */
  public static TestLdapConnectionRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestLdapConnectionRepresentation.class);
  }

  /**
   * Convert an instance of TestLdapConnectionRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

