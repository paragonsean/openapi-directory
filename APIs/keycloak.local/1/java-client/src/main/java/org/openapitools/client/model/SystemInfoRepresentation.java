/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SystemInfoRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SystemInfoRepresentation {
  public static final String SERIALIZED_NAME_FILE_ENCODING = "fileEncoding";
  @SerializedName(SERIALIZED_NAME_FILE_ENCODING)
  private String fileEncoding;

  public static final String SERIALIZED_NAME_JAVA_HOME = "javaHome";
  @SerializedName(SERIALIZED_NAME_JAVA_HOME)
  private String javaHome;

  public static final String SERIALIZED_NAME_JAVA_RUNTIME = "javaRuntime";
  @SerializedName(SERIALIZED_NAME_JAVA_RUNTIME)
  private String javaRuntime;

  public static final String SERIALIZED_NAME_JAVA_VENDOR = "javaVendor";
  @SerializedName(SERIALIZED_NAME_JAVA_VENDOR)
  private String javaVendor;

  public static final String SERIALIZED_NAME_JAVA_VERSION = "javaVersion";
  @SerializedName(SERIALIZED_NAME_JAVA_VERSION)
  private String javaVersion;

  public static final String SERIALIZED_NAME_JAVA_VM = "javaVm";
  @SerializedName(SERIALIZED_NAME_JAVA_VM)
  private String javaVm;

  public static final String SERIALIZED_NAME_JAVA_VM_VERSION = "javaVmVersion";
  @SerializedName(SERIALIZED_NAME_JAVA_VM_VERSION)
  private String javaVmVersion;

  public static final String SERIALIZED_NAME_OS_ARCHITECTURE = "osArchitecture";
  @SerializedName(SERIALIZED_NAME_OS_ARCHITECTURE)
  private String osArchitecture;

  public static final String SERIALIZED_NAME_OS_NAME = "osName";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_SERVER_TIME = "serverTime";
  @SerializedName(SERIALIZED_NAME_SERVER_TIME)
  private String serverTime;

  public static final String SERIALIZED_NAME_UPTIME = "uptime";
  @SerializedName(SERIALIZED_NAME_UPTIME)
  private String uptime;

  public static final String SERIALIZED_NAME_UPTIME_MILLIS = "uptimeMillis";
  @SerializedName(SERIALIZED_NAME_UPTIME_MILLIS)
  private Long uptimeMillis;

  public static final String SERIALIZED_NAME_USER_DIR = "userDir";
  @SerializedName(SERIALIZED_NAME_USER_DIR)
  private String userDir;

  public static final String SERIALIZED_NAME_USER_LOCALE = "userLocale";
  @SerializedName(SERIALIZED_NAME_USER_LOCALE)
  private String userLocale;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_USER_TIMEZONE = "userTimezone";
  @SerializedName(SERIALIZED_NAME_USER_TIMEZONE)
  private String userTimezone;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public SystemInfoRepresentation() {
  }

  public SystemInfoRepresentation fileEncoding(String fileEncoding) {
    this.fileEncoding = fileEncoding;
    return this;
  }

  /**
   * Get fileEncoding
   * @return fileEncoding
   */
  @javax.annotation.Nullable
  public String getFileEncoding() {
    return fileEncoding;
  }

  public void setFileEncoding(String fileEncoding) {
    this.fileEncoding = fileEncoding;
  }


  public SystemInfoRepresentation javaHome(String javaHome) {
    this.javaHome = javaHome;
    return this;
  }

  /**
   * Get javaHome
   * @return javaHome
   */
  @javax.annotation.Nullable
  public String getJavaHome() {
    return javaHome;
  }

  public void setJavaHome(String javaHome) {
    this.javaHome = javaHome;
  }


  public SystemInfoRepresentation javaRuntime(String javaRuntime) {
    this.javaRuntime = javaRuntime;
    return this;
  }

  /**
   * Get javaRuntime
   * @return javaRuntime
   */
  @javax.annotation.Nullable
  public String getJavaRuntime() {
    return javaRuntime;
  }

  public void setJavaRuntime(String javaRuntime) {
    this.javaRuntime = javaRuntime;
  }


  public SystemInfoRepresentation javaVendor(String javaVendor) {
    this.javaVendor = javaVendor;
    return this;
  }

  /**
   * Get javaVendor
   * @return javaVendor
   */
  @javax.annotation.Nullable
  public String getJavaVendor() {
    return javaVendor;
  }

  public void setJavaVendor(String javaVendor) {
    this.javaVendor = javaVendor;
  }


  public SystemInfoRepresentation javaVersion(String javaVersion) {
    this.javaVersion = javaVersion;
    return this;
  }

  /**
   * Get javaVersion
   * @return javaVersion
   */
  @javax.annotation.Nullable
  public String getJavaVersion() {
    return javaVersion;
  }

  public void setJavaVersion(String javaVersion) {
    this.javaVersion = javaVersion;
  }


  public SystemInfoRepresentation javaVm(String javaVm) {
    this.javaVm = javaVm;
    return this;
  }

  /**
   * Get javaVm
   * @return javaVm
   */
  @javax.annotation.Nullable
  public String getJavaVm() {
    return javaVm;
  }

  public void setJavaVm(String javaVm) {
    this.javaVm = javaVm;
  }


  public SystemInfoRepresentation javaVmVersion(String javaVmVersion) {
    this.javaVmVersion = javaVmVersion;
    return this;
  }

  /**
   * Get javaVmVersion
   * @return javaVmVersion
   */
  @javax.annotation.Nullable
  public String getJavaVmVersion() {
    return javaVmVersion;
  }

  public void setJavaVmVersion(String javaVmVersion) {
    this.javaVmVersion = javaVmVersion;
  }


  public SystemInfoRepresentation osArchitecture(String osArchitecture) {
    this.osArchitecture = osArchitecture;
    return this;
  }

  /**
   * Get osArchitecture
   * @return osArchitecture
   */
  @javax.annotation.Nullable
  public String getOsArchitecture() {
    return osArchitecture;
  }

  public void setOsArchitecture(String osArchitecture) {
    this.osArchitecture = osArchitecture;
  }


  public SystemInfoRepresentation osName(String osName) {
    this.osName = osName;
    return this;
  }

  /**
   * Get osName
   * @return osName
   */
  @javax.annotation.Nullable
  public String getOsName() {
    return osName;
  }

  public void setOsName(String osName) {
    this.osName = osName;
  }


  public SystemInfoRepresentation osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * Get osVersion
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public SystemInfoRepresentation serverTime(String serverTime) {
    this.serverTime = serverTime;
    return this;
  }

  /**
   * Get serverTime
   * @return serverTime
   */
  @javax.annotation.Nullable
  public String getServerTime() {
    return serverTime;
  }

  public void setServerTime(String serverTime) {
    this.serverTime = serverTime;
  }


  public SystemInfoRepresentation uptime(String uptime) {
    this.uptime = uptime;
    return this;
  }

  /**
   * Get uptime
   * @return uptime
   */
  @javax.annotation.Nullable
  public String getUptime() {
    return uptime;
  }

  public void setUptime(String uptime) {
    this.uptime = uptime;
  }


  public SystemInfoRepresentation uptimeMillis(Long uptimeMillis) {
    this.uptimeMillis = uptimeMillis;
    return this;
  }

  /**
   * Get uptimeMillis
   * @return uptimeMillis
   */
  @javax.annotation.Nullable
  public Long getUptimeMillis() {
    return uptimeMillis;
  }

  public void setUptimeMillis(Long uptimeMillis) {
    this.uptimeMillis = uptimeMillis;
  }


  public SystemInfoRepresentation userDir(String userDir) {
    this.userDir = userDir;
    return this;
  }

  /**
   * Get userDir
   * @return userDir
   */
  @javax.annotation.Nullable
  public String getUserDir() {
    return userDir;
  }

  public void setUserDir(String userDir) {
    this.userDir = userDir;
  }


  public SystemInfoRepresentation userLocale(String userLocale) {
    this.userLocale = userLocale;
    return this;
  }

  /**
   * Get userLocale
   * @return userLocale
   */
  @javax.annotation.Nullable
  public String getUserLocale() {
    return userLocale;
  }

  public void setUserLocale(String userLocale) {
    this.userLocale = userLocale;
  }


  public SystemInfoRepresentation userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public SystemInfoRepresentation userTimezone(String userTimezone) {
    this.userTimezone = userTimezone;
    return this;
  }

  /**
   * Get userTimezone
   * @return userTimezone
   */
  @javax.annotation.Nullable
  public String getUserTimezone() {
    return userTimezone;
  }

  public void setUserTimezone(String userTimezone) {
    this.userTimezone = userTimezone;
  }


  public SystemInfoRepresentation version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemInfoRepresentation systemInfoRepresentation = (SystemInfoRepresentation) o;
    return Objects.equals(this.fileEncoding, systemInfoRepresentation.fileEncoding) &&
        Objects.equals(this.javaHome, systemInfoRepresentation.javaHome) &&
        Objects.equals(this.javaRuntime, systemInfoRepresentation.javaRuntime) &&
        Objects.equals(this.javaVendor, systemInfoRepresentation.javaVendor) &&
        Objects.equals(this.javaVersion, systemInfoRepresentation.javaVersion) &&
        Objects.equals(this.javaVm, systemInfoRepresentation.javaVm) &&
        Objects.equals(this.javaVmVersion, systemInfoRepresentation.javaVmVersion) &&
        Objects.equals(this.osArchitecture, systemInfoRepresentation.osArchitecture) &&
        Objects.equals(this.osName, systemInfoRepresentation.osName) &&
        Objects.equals(this.osVersion, systemInfoRepresentation.osVersion) &&
        Objects.equals(this.serverTime, systemInfoRepresentation.serverTime) &&
        Objects.equals(this.uptime, systemInfoRepresentation.uptime) &&
        Objects.equals(this.uptimeMillis, systemInfoRepresentation.uptimeMillis) &&
        Objects.equals(this.userDir, systemInfoRepresentation.userDir) &&
        Objects.equals(this.userLocale, systemInfoRepresentation.userLocale) &&
        Objects.equals(this.userName, systemInfoRepresentation.userName) &&
        Objects.equals(this.userTimezone, systemInfoRepresentation.userTimezone) &&
        Objects.equals(this.version, systemInfoRepresentation.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileEncoding, javaHome, javaRuntime, javaVendor, javaVersion, javaVm, javaVmVersion, osArchitecture, osName, osVersion, serverTime, uptime, uptimeMillis, userDir, userLocale, userName, userTimezone, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemInfoRepresentation {\n");
    sb.append("    fileEncoding: ").append(toIndentedString(fileEncoding)).append("\n");
    sb.append("    javaHome: ").append(toIndentedString(javaHome)).append("\n");
    sb.append("    javaRuntime: ").append(toIndentedString(javaRuntime)).append("\n");
    sb.append("    javaVendor: ").append(toIndentedString(javaVendor)).append("\n");
    sb.append("    javaVersion: ").append(toIndentedString(javaVersion)).append("\n");
    sb.append("    javaVm: ").append(toIndentedString(javaVm)).append("\n");
    sb.append("    javaVmVersion: ").append(toIndentedString(javaVmVersion)).append("\n");
    sb.append("    osArchitecture: ").append(toIndentedString(osArchitecture)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    serverTime: ").append(toIndentedString(serverTime)).append("\n");
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("    uptimeMillis: ").append(toIndentedString(uptimeMillis)).append("\n");
    sb.append("    userDir: ").append(toIndentedString(userDir)).append("\n");
    sb.append("    userLocale: ").append(toIndentedString(userLocale)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    userTimezone: ").append(toIndentedString(userTimezone)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileEncoding");
    openapiFields.add("javaHome");
    openapiFields.add("javaRuntime");
    openapiFields.add("javaVendor");
    openapiFields.add("javaVersion");
    openapiFields.add("javaVm");
    openapiFields.add("javaVmVersion");
    openapiFields.add("osArchitecture");
    openapiFields.add("osName");
    openapiFields.add("osVersion");
    openapiFields.add("serverTime");
    openapiFields.add("uptime");
    openapiFields.add("uptimeMillis");
    openapiFields.add("userDir");
    openapiFields.add("userLocale");
    openapiFields.add("userName");
    openapiFields.add("userTimezone");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemInfoRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemInfoRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemInfoRepresentation is not found in the empty JSON string", SystemInfoRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemInfoRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemInfoRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fileEncoding") != null && !jsonObj.get("fileEncoding").isJsonNull()) && !jsonObj.get("fileEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileEncoding").toString()));
      }
      if ((jsonObj.get("javaHome") != null && !jsonObj.get("javaHome").isJsonNull()) && !jsonObj.get("javaHome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaHome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaHome").toString()));
      }
      if ((jsonObj.get("javaRuntime") != null && !jsonObj.get("javaRuntime").isJsonNull()) && !jsonObj.get("javaRuntime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaRuntime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaRuntime").toString()));
      }
      if ((jsonObj.get("javaVendor") != null && !jsonObj.get("javaVendor").isJsonNull()) && !jsonObj.get("javaVendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaVendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaVendor").toString()));
      }
      if ((jsonObj.get("javaVersion") != null && !jsonObj.get("javaVersion").isJsonNull()) && !jsonObj.get("javaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaVersion").toString()));
      }
      if ((jsonObj.get("javaVm") != null && !jsonObj.get("javaVm").isJsonNull()) && !jsonObj.get("javaVm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaVm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaVm").toString()));
      }
      if ((jsonObj.get("javaVmVersion") != null && !jsonObj.get("javaVmVersion").isJsonNull()) && !jsonObj.get("javaVmVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaVmVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaVmVersion").toString()));
      }
      if ((jsonObj.get("osArchitecture") != null && !jsonObj.get("osArchitecture").isJsonNull()) && !jsonObj.get("osArchitecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osArchitecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osArchitecture").toString()));
      }
      if ((jsonObj.get("osName") != null && !jsonObj.get("osName").isJsonNull()) && !jsonObj.get("osName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osName").toString()));
      }
      if ((jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) && !jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if ((jsonObj.get("serverTime") != null && !jsonObj.get("serverTime").isJsonNull()) && !jsonObj.get("serverTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverTime").toString()));
      }
      if ((jsonObj.get("uptime") != null && !jsonObj.get("uptime").isJsonNull()) && !jsonObj.get("uptime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uptime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uptime").toString()));
      }
      if ((jsonObj.get("userDir") != null && !jsonObj.get("userDir").isJsonNull()) && !jsonObj.get("userDir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userDir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userDir").toString()));
      }
      if ((jsonObj.get("userLocale") != null && !jsonObj.get("userLocale").isJsonNull()) && !jsonObj.get("userLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLocale").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if ((jsonObj.get("userTimezone") != null && !jsonObj.get("userTimezone").isJsonNull()) && !jsonObj.get("userTimezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userTimezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userTimezone").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemInfoRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemInfoRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemInfoRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemInfoRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemInfoRepresentation>() {
           @Override
           public void write(JsonWriter out, SystemInfoRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemInfoRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemInfoRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemInfoRepresentation
   * @throws IOException if the JSON string is invalid with respect to SystemInfoRepresentation
   */
  public static SystemInfoRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemInfoRepresentation.class);
  }

  /**
   * Convert an instance of SystemInfoRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

