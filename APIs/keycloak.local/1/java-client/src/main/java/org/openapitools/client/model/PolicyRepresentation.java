/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ResourceRepresentation;
import org.openapitools.client.model.ScopeRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PolicyRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyRepresentation {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private Map<String, Object> config = new HashMap<>();

  /**
   * Gets or Sets decisionStrategy
   */
  @JsonAdapter(DecisionStrategyEnum.Adapter.class)
  public enum DecisionStrategyEnum {
    AFFIRMATIVE("AFFIRMATIVE"),
    
    UNANIMOUS("UNANIMOUS"),
    
    CONSENSUS("CONSENSUS");

    private String value;

    DecisionStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecisionStrategyEnum fromValue(String value) {
      for (DecisionStrategyEnum b : DecisionStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DecisionStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecisionStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecisionStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecisionStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DecisionStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECISION_STRATEGY = "decisionStrategy";
  @SerializedName(SERIALIZED_NAME_DECISION_STRATEGY)
  private DecisionStrategyEnum decisionStrategy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Gets or Sets logic
   */
  @JsonAdapter(LogicEnum.Adapter.class)
  public enum LogicEnum {
    POSITIVE("POSITIVE"),
    
    NEGATIVE("NEGATIVE");

    private String value;

    LogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogicEnum fromValue(String value) {
      for (LogicEnum b : LogicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogicEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogicEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOGIC = "logic";
  @SerializedName(SERIALIZED_NAME_LOGIC)
  private LogicEnum logic;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<String> policies = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<String> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES_DATA = "resourcesData";
  @SerializedName(SERIALIZED_NAME_RESOURCES_DATA)
  private List<ResourceRepresentation> resourcesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES_DATA = "scopesData";
  @SerializedName(SERIALIZED_NAME_SCOPES_DATA)
  private List<ScopeRepresentation> scopesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public PolicyRepresentation() {
  }

  public PolicyRepresentation config(Map<String, Object> config) {
    this.config = config;
    return this;
  }

  public PolicyRepresentation putConfigItem(String key, Object configItem) {
    if (this.config == null) {
      this.config = new HashMap<>();
    }
    this.config.put(key, configItem);
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public Map<String, Object> getConfig() {
    return config;
  }

  public void setConfig(Map<String, Object> config) {
    this.config = config;
  }


  public PolicyRepresentation decisionStrategy(DecisionStrategyEnum decisionStrategy) {
    this.decisionStrategy = decisionStrategy;
    return this;
  }

  /**
   * Get decisionStrategy
   * @return decisionStrategy
   */
  @javax.annotation.Nullable
  public DecisionStrategyEnum getDecisionStrategy() {
    return decisionStrategy;
  }

  public void setDecisionStrategy(DecisionStrategyEnum decisionStrategy) {
    this.decisionStrategy = decisionStrategy;
  }


  public PolicyRepresentation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PolicyRepresentation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PolicyRepresentation logic(LogicEnum logic) {
    this.logic = logic;
    return this;
  }

  /**
   * Get logic
   * @return logic
   */
  @javax.annotation.Nullable
  public LogicEnum getLogic() {
    return logic;
  }

  public void setLogic(LogicEnum logic) {
    this.logic = logic;
  }


  public PolicyRepresentation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PolicyRepresentation owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public PolicyRepresentation policies(List<String> policies) {
    this.policies = policies;
    return this;
  }

  public PolicyRepresentation addPoliciesItem(String policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * Get policies
   * @return policies
   */
  @javax.annotation.Nullable
  public List<String> getPolicies() {
    return policies;
  }

  public void setPolicies(List<String> policies) {
    this.policies = policies;
  }


  public PolicyRepresentation resources(List<String> resources) {
    this.resources = resources;
    return this;
  }

  public PolicyRepresentation addResourcesItem(String resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public List<String> getResources() {
    return resources;
  }

  public void setResources(List<String> resources) {
    this.resources = resources;
  }


  public PolicyRepresentation resourcesData(List<ResourceRepresentation> resourcesData) {
    this.resourcesData = resourcesData;
    return this;
  }

  public PolicyRepresentation addResourcesDataItem(ResourceRepresentation resourcesDataItem) {
    if (this.resourcesData == null) {
      this.resourcesData = new ArrayList<>();
    }
    this.resourcesData.add(resourcesDataItem);
    return this;
  }

  /**
   * Get resourcesData
   * @return resourcesData
   */
  @javax.annotation.Nullable
  public List<ResourceRepresentation> getResourcesData() {
    return resourcesData;
  }

  public void setResourcesData(List<ResourceRepresentation> resourcesData) {
    this.resourcesData = resourcesData;
  }


  public PolicyRepresentation scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public PolicyRepresentation addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public PolicyRepresentation scopesData(List<ScopeRepresentation> scopesData) {
    this.scopesData = scopesData;
    return this;
  }

  public PolicyRepresentation addScopesDataItem(ScopeRepresentation scopesDataItem) {
    if (this.scopesData == null) {
      this.scopesData = new ArrayList<>();
    }
    this.scopesData.add(scopesDataItem);
    return this;
  }

  /**
   * Get scopesData
   * @return scopesData
   */
  @javax.annotation.Nullable
  public List<ScopeRepresentation> getScopesData() {
    return scopesData;
  }

  public void setScopesData(List<ScopeRepresentation> scopesData) {
    this.scopesData = scopesData;
  }


  public PolicyRepresentation type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyRepresentation policyRepresentation = (PolicyRepresentation) o;
    return Objects.equals(this.config, policyRepresentation.config) &&
        Objects.equals(this.decisionStrategy, policyRepresentation.decisionStrategy) &&
        Objects.equals(this.description, policyRepresentation.description) &&
        Objects.equals(this.id, policyRepresentation.id) &&
        Objects.equals(this.logic, policyRepresentation.logic) &&
        Objects.equals(this.name, policyRepresentation.name) &&
        Objects.equals(this.owner, policyRepresentation.owner) &&
        Objects.equals(this.policies, policyRepresentation.policies) &&
        Objects.equals(this.resources, policyRepresentation.resources) &&
        Objects.equals(this.resourcesData, policyRepresentation.resourcesData) &&
        Objects.equals(this.scopes, policyRepresentation.scopes) &&
        Objects.equals(this.scopesData, policyRepresentation.scopesData) &&
        Objects.equals(this.type, policyRepresentation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, decisionStrategy, description, id, logic, name, owner, policies, resources, resourcesData, scopes, scopesData, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyRepresentation {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    decisionStrategy: ").append(toIndentedString(decisionStrategy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logic: ").append(toIndentedString(logic)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    resourcesData: ").append(toIndentedString(resourcesData)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    scopesData: ").append(toIndentedString(scopesData)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("decisionStrategy");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("logic");
    openapiFields.add("name");
    openapiFields.add("owner");
    openapiFields.add("policies");
    openapiFields.add("resources");
    openapiFields.add("resourcesData");
    openapiFields.add("scopes");
    openapiFields.add("scopesData");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyRepresentation is not found in the empty JSON string", PolicyRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("decisionStrategy") != null && !jsonObj.get("decisionStrategy").isJsonNull()) && !jsonObj.get("decisionStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionStrategy").toString()));
      }
      // validate the optional field `decisionStrategy`
      if (jsonObj.get("decisionStrategy") != null && !jsonObj.get("decisionStrategy").isJsonNull()) {
        DecisionStrategyEnum.validateJsonElement(jsonObj.get("decisionStrategy"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("logic") != null && !jsonObj.get("logic").isJsonNull()) && !jsonObj.get("logic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logic").toString()));
      }
      // validate the optional field `logic`
      if (jsonObj.get("logic") != null && !jsonObj.get("logic").isJsonNull()) {
        LogicEnum.validateJsonElement(jsonObj.get("logic"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull() && !jsonObj.get("policies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `policies` to be an array in the JSON string but got `%s`", jsonObj.get("policies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull() && !jsonObj.get("resources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
      }
      if (jsonObj.get("resourcesData") != null && !jsonObj.get("resourcesData").isJsonNull()) {
        JsonArray jsonArrayresourcesData = jsonObj.getAsJsonArray("resourcesData");
        if (jsonArrayresourcesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourcesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourcesData` to be an array in the JSON string but got `%s`", jsonObj.get("resourcesData").toString()));
          }

          // validate the optional field `resourcesData` (array)
          for (int i = 0; i < jsonArrayresourcesData.size(); i++) {
            ResourceRepresentation.validateJsonElement(jsonArrayresourcesData.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if (jsonObj.get("scopesData") != null && !jsonObj.get("scopesData").isJsonNull()) {
        JsonArray jsonArrayscopesData = jsonObj.getAsJsonArray("scopesData");
        if (jsonArrayscopesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scopesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scopesData` to be an array in the JSON string but got `%s`", jsonObj.get("scopesData").toString()));
          }

          // validate the optional field `scopesData` (array)
          for (int i = 0; i < jsonArrayscopesData.size(); i++) {
            ScopeRepresentation.validateJsonElement(jsonArrayscopesData.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyRepresentation>() {
           @Override
           public void write(JsonWriter out, PolicyRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyRepresentation
   * @throws IOException if the JSON string is invalid with respect to PolicyRepresentation
   */
  public static PolicyRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyRepresentation.class);
  }

  /**
   * Convert an instance of PolicyRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

