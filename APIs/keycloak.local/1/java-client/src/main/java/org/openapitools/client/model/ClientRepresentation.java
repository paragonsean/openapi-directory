/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ProtocolMapperRepresentation;
import org.openapitools.client.model.ResourceServerRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClientRepresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:16.227825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientRepresentation {
  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private Map<String, Object> access = new HashMap<>();

  public static final String SERIALIZED_NAME_ADMIN_URL = "adminUrl";
  @SerializedName(SERIALIZED_NAME_ADMIN_URL)
  private String adminUrl;

  public static final String SERIALIZED_NAME_ALWAYS_DISPLAY_IN_CONSOLE = "alwaysDisplayInConsole";
  @SerializedName(SERIALIZED_NAME_ALWAYS_DISPLAY_IN_CONSOLE)
  private Boolean alwaysDisplayInConsole;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW_BINDING_OVERRIDES = "authenticationFlowBindingOverrides";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW_BINDING_OVERRIDES)
  private Map<String, Object> authenticationFlowBindingOverrides = new HashMap<>();

  public static final String SERIALIZED_NAME_AUTHORIZATION_SERVICES_ENABLED = "authorizationServicesEnabled";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_SERVICES_ENABLED)
  private Boolean authorizationServicesEnabled;

  public static final String SERIALIZED_NAME_AUTHORIZATION_SETTINGS = "authorizationSettings";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_SETTINGS)
  private ResourceServerRepresentation authorizationSettings;

  public static final String SERIALIZED_NAME_BASE_URL = "baseUrl";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private String baseUrl;

  public static final String SERIALIZED_NAME_BEARER_ONLY = "bearerOnly";
  @SerializedName(SERIALIZED_NAME_BEARER_ONLY)
  private Boolean bearerOnly;

  public static final String SERIALIZED_NAME_CLIENT_AUTHENTICATOR_TYPE = "clientAuthenticatorType";
  @SerializedName(SERIALIZED_NAME_CLIENT_AUTHENTICATOR_TYPE)
  private String clientAuthenticatorType;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CONSENT_REQUIRED = "consentRequired";
  @SerializedName(SERIALIZED_NAME_CONSENT_REQUIRED)
  private Boolean consentRequired;

  public static final String SERIALIZED_NAME_DEFAULT_CLIENT_SCOPES = "defaultClientScopes";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CLIENT_SCOPES)
  private List<String> defaultClientScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_ROLES = "defaultRoles";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ROLES)
  private List<String> defaultRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DIRECT_ACCESS_GRANTS_ENABLED = "directAccessGrantsEnabled";
  @SerializedName(SERIALIZED_NAME_DIRECT_ACCESS_GRANTS_ENABLED)
  private Boolean directAccessGrantsEnabled;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FRONTCHANNEL_LOGOUT = "frontchannelLogout";
  @SerializedName(SERIALIZED_NAME_FRONTCHANNEL_LOGOUT)
  private Boolean frontchannelLogout;

  public static final String SERIALIZED_NAME_FULL_SCOPE_ALLOWED = "fullScopeAllowed";
  @SerializedName(SERIALIZED_NAME_FULL_SCOPE_ALLOWED)
  private Boolean fullScopeAllowed;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMPLICIT_FLOW_ENABLED = "implicitFlowEnabled";
  @SerializedName(SERIALIZED_NAME_IMPLICIT_FLOW_ENABLED)
  private Boolean implicitFlowEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_RE_REGISTRATION_TIMEOUT = "nodeReRegistrationTimeout";
  @SerializedName(SERIALIZED_NAME_NODE_RE_REGISTRATION_TIMEOUT)
  private Integer nodeReRegistrationTimeout;

  public static final String SERIALIZED_NAME_NOT_BEFORE = "notBefore";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE)
  private Integer notBefore;

  public static final String SERIALIZED_NAME_OPTIONAL_CLIENT_SCOPES = "optionalClientScopes";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_CLIENT_SCOPES)
  private List<String> optionalClientScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_PROTOCOL_MAPPERS = "protocolMappers";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_MAPPERS)
  private List<ProtocolMapperRepresentation> protocolMappers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_CLIENT = "publicClient";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CLIENT)
  private Boolean publicClient;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirectUris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<String> redirectUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGISTERED_NODES = "registeredNodes";
  @SerializedName(SERIALIZED_NAME_REGISTERED_NODES)
  private Map<String, Object> registeredNodes = new HashMap<>();

  public static final String SERIALIZED_NAME_REGISTRATION_ACCESS_TOKEN = "registrationAccessToken";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ACCESS_TOKEN)
  private String registrationAccessToken;

  public static final String SERIALIZED_NAME_ROOT_URL = "rootUrl";
  @SerializedName(SERIALIZED_NAME_ROOT_URL)
  private String rootUrl;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNTS_ENABLED = "serviceAccountsEnabled";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNTS_ENABLED)
  private Boolean serviceAccountsEnabled;

  public static final String SERIALIZED_NAME_STANDARD_FLOW_ENABLED = "standardFlowEnabled";
  @SerializedName(SERIALIZED_NAME_STANDARD_FLOW_ENABLED)
  private Boolean standardFlowEnabled;

  public static final String SERIALIZED_NAME_SURROGATE_AUTH_REQUIRED = "surrogateAuthRequired";
  @SerializedName(SERIALIZED_NAME_SURROGATE_AUTH_REQUIRED)
  private Boolean surrogateAuthRequired;

  public static final String SERIALIZED_NAME_WEB_ORIGINS = "webOrigins";
  @SerializedName(SERIALIZED_NAME_WEB_ORIGINS)
  private List<String> webOrigins = new ArrayList<>();

  public ClientRepresentation() {
  }

  public ClientRepresentation access(Map<String, Object> access) {
    this.access = access;
    return this;
  }

  public ClientRepresentation putAccessItem(String key, Object accessItem) {
    if (this.access == null) {
      this.access = new HashMap<>();
    }
    this.access.put(key, accessItem);
    return this;
  }

  /**
   * Get access
   * @return access
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAccess() {
    return access;
  }

  public void setAccess(Map<String, Object> access) {
    this.access = access;
  }


  public ClientRepresentation adminUrl(String adminUrl) {
    this.adminUrl = adminUrl;
    return this;
  }

  /**
   * Get adminUrl
   * @return adminUrl
   */
  @javax.annotation.Nullable
  public String getAdminUrl() {
    return adminUrl;
  }

  public void setAdminUrl(String adminUrl) {
    this.adminUrl = adminUrl;
  }


  public ClientRepresentation alwaysDisplayInConsole(Boolean alwaysDisplayInConsole) {
    this.alwaysDisplayInConsole = alwaysDisplayInConsole;
    return this;
  }

  /**
   * Get alwaysDisplayInConsole
   * @return alwaysDisplayInConsole
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysDisplayInConsole() {
    return alwaysDisplayInConsole;
  }

  public void setAlwaysDisplayInConsole(Boolean alwaysDisplayInConsole) {
    this.alwaysDisplayInConsole = alwaysDisplayInConsole;
  }


  public ClientRepresentation attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ClientRepresentation putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public ClientRepresentation authenticationFlowBindingOverrides(Map<String, Object> authenticationFlowBindingOverrides) {
    this.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
    return this;
  }

  public ClientRepresentation putAuthenticationFlowBindingOverridesItem(String key, Object authenticationFlowBindingOverridesItem) {
    if (this.authenticationFlowBindingOverrides == null) {
      this.authenticationFlowBindingOverrides = new HashMap<>();
    }
    this.authenticationFlowBindingOverrides.put(key, authenticationFlowBindingOverridesItem);
    return this;
  }

  /**
   * Get authenticationFlowBindingOverrides
   * @return authenticationFlowBindingOverrides
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAuthenticationFlowBindingOverrides() {
    return authenticationFlowBindingOverrides;
  }

  public void setAuthenticationFlowBindingOverrides(Map<String, Object> authenticationFlowBindingOverrides) {
    this.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
  }


  public ClientRepresentation authorizationServicesEnabled(Boolean authorizationServicesEnabled) {
    this.authorizationServicesEnabled = authorizationServicesEnabled;
    return this;
  }

  /**
   * Get authorizationServicesEnabled
   * @return authorizationServicesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAuthorizationServicesEnabled() {
    return authorizationServicesEnabled;
  }

  public void setAuthorizationServicesEnabled(Boolean authorizationServicesEnabled) {
    this.authorizationServicesEnabled = authorizationServicesEnabled;
  }


  public ClientRepresentation authorizationSettings(ResourceServerRepresentation authorizationSettings) {
    this.authorizationSettings = authorizationSettings;
    return this;
  }

  /**
   * Get authorizationSettings
   * @return authorizationSettings
   */
  @javax.annotation.Nullable
  public ResourceServerRepresentation getAuthorizationSettings() {
    return authorizationSettings;
  }

  public void setAuthorizationSettings(ResourceServerRepresentation authorizationSettings) {
    this.authorizationSettings = authorizationSettings;
  }


  public ClientRepresentation baseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * Get baseUrl
   * @return baseUrl
   */
  @javax.annotation.Nullable
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public ClientRepresentation bearerOnly(Boolean bearerOnly) {
    this.bearerOnly = bearerOnly;
    return this;
  }

  /**
   * Get bearerOnly
   * @return bearerOnly
   */
  @javax.annotation.Nullable
  public Boolean getBearerOnly() {
    return bearerOnly;
  }

  public void setBearerOnly(Boolean bearerOnly) {
    this.bearerOnly = bearerOnly;
  }


  public ClientRepresentation clientAuthenticatorType(String clientAuthenticatorType) {
    this.clientAuthenticatorType = clientAuthenticatorType;
    return this;
  }

  /**
   * Get clientAuthenticatorType
   * @return clientAuthenticatorType
   */
  @javax.annotation.Nullable
  public String getClientAuthenticatorType() {
    return clientAuthenticatorType;
  }

  public void setClientAuthenticatorType(String clientAuthenticatorType) {
    this.clientAuthenticatorType = clientAuthenticatorType;
  }


  public ClientRepresentation clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public ClientRepresentation consentRequired(Boolean consentRequired) {
    this.consentRequired = consentRequired;
    return this;
  }

  /**
   * Get consentRequired
   * @return consentRequired
   */
  @javax.annotation.Nullable
  public Boolean getConsentRequired() {
    return consentRequired;
  }

  public void setConsentRequired(Boolean consentRequired) {
    this.consentRequired = consentRequired;
  }


  public ClientRepresentation defaultClientScopes(List<String> defaultClientScopes) {
    this.defaultClientScopes = defaultClientScopes;
    return this;
  }

  public ClientRepresentation addDefaultClientScopesItem(String defaultClientScopesItem) {
    if (this.defaultClientScopes == null) {
      this.defaultClientScopes = new ArrayList<>();
    }
    this.defaultClientScopes.add(defaultClientScopesItem);
    return this;
  }

  /**
   * Get defaultClientScopes
   * @return defaultClientScopes
   */
  @javax.annotation.Nullable
  public List<String> getDefaultClientScopes() {
    return defaultClientScopes;
  }

  public void setDefaultClientScopes(List<String> defaultClientScopes) {
    this.defaultClientScopes = defaultClientScopes;
  }


  public ClientRepresentation defaultRoles(List<String> defaultRoles) {
    this.defaultRoles = defaultRoles;
    return this;
  }

  public ClientRepresentation addDefaultRolesItem(String defaultRolesItem) {
    if (this.defaultRoles == null) {
      this.defaultRoles = new ArrayList<>();
    }
    this.defaultRoles.add(defaultRolesItem);
    return this;
  }

  /**
   * Get defaultRoles
   * @return defaultRoles
   */
  @javax.annotation.Nullable
  public List<String> getDefaultRoles() {
    return defaultRoles;
  }

  public void setDefaultRoles(List<String> defaultRoles) {
    this.defaultRoles = defaultRoles;
  }


  public ClientRepresentation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ClientRepresentation directAccessGrantsEnabled(Boolean directAccessGrantsEnabled) {
    this.directAccessGrantsEnabled = directAccessGrantsEnabled;
    return this;
  }

  /**
   * Get directAccessGrantsEnabled
   * @return directAccessGrantsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDirectAccessGrantsEnabled() {
    return directAccessGrantsEnabled;
  }

  public void setDirectAccessGrantsEnabled(Boolean directAccessGrantsEnabled) {
    this.directAccessGrantsEnabled = directAccessGrantsEnabled;
  }


  public ClientRepresentation enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ClientRepresentation frontchannelLogout(Boolean frontchannelLogout) {
    this.frontchannelLogout = frontchannelLogout;
    return this;
  }

  /**
   * Get frontchannelLogout
   * @return frontchannelLogout
   */
  @javax.annotation.Nullable
  public Boolean getFrontchannelLogout() {
    return frontchannelLogout;
  }

  public void setFrontchannelLogout(Boolean frontchannelLogout) {
    this.frontchannelLogout = frontchannelLogout;
  }


  public ClientRepresentation fullScopeAllowed(Boolean fullScopeAllowed) {
    this.fullScopeAllowed = fullScopeAllowed;
    return this;
  }

  /**
   * Get fullScopeAllowed
   * @return fullScopeAllowed
   */
  @javax.annotation.Nullable
  public Boolean getFullScopeAllowed() {
    return fullScopeAllowed;
  }

  public void setFullScopeAllowed(Boolean fullScopeAllowed) {
    this.fullScopeAllowed = fullScopeAllowed;
  }


  public ClientRepresentation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ClientRepresentation implicitFlowEnabled(Boolean implicitFlowEnabled) {
    this.implicitFlowEnabled = implicitFlowEnabled;
    return this;
  }

  /**
   * Get implicitFlowEnabled
   * @return implicitFlowEnabled
   */
  @javax.annotation.Nullable
  public Boolean getImplicitFlowEnabled() {
    return implicitFlowEnabled;
  }

  public void setImplicitFlowEnabled(Boolean implicitFlowEnabled) {
    this.implicitFlowEnabled = implicitFlowEnabled;
  }


  public ClientRepresentation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ClientRepresentation nodeReRegistrationTimeout(Integer nodeReRegistrationTimeout) {
    this.nodeReRegistrationTimeout = nodeReRegistrationTimeout;
    return this;
  }

  /**
   * Get nodeReRegistrationTimeout
   * @return nodeReRegistrationTimeout
   */
  @javax.annotation.Nullable
  public Integer getNodeReRegistrationTimeout() {
    return nodeReRegistrationTimeout;
  }

  public void setNodeReRegistrationTimeout(Integer nodeReRegistrationTimeout) {
    this.nodeReRegistrationTimeout = nodeReRegistrationTimeout;
  }


  public ClientRepresentation notBefore(Integer notBefore) {
    this.notBefore = notBefore;
    return this;
  }

  /**
   * Get notBefore
   * @return notBefore
   */
  @javax.annotation.Nullable
  public Integer getNotBefore() {
    return notBefore;
  }

  public void setNotBefore(Integer notBefore) {
    this.notBefore = notBefore;
  }


  public ClientRepresentation optionalClientScopes(List<String> optionalClientScopes) {
    this.optionalClientScopes = optionalClientScopes;
    return this;
  }

  public ClientRepresentation addOptionalClientScopesItem(String optionalClientScopesItem) {
    if (this.optionalClientScopes == null) {
      this.optionalClientScopes = new ArrayList<>();
    }
    this.optionalClientScopes.add(optionalClientScopesItem);
    return this;
  }

  /**
   * Get optionalClientScopes
   * @return optionalClientScopes
   */
  @javax.annotation.Nullable
  public List<String> getOptionalClientScopes() {
    return optionalClientScopes;
  }

  public void setOptionalClientScopes(List<String> optionalClientScopes) {
    this.optionalClientScopes = optionalClientScopes;
  }


  public ClientRepresentation origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public ClientRepresentation protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public ClientRepresentation protocolMappers(List<ProtocolMapperRepresentation> protocolMappers) {
    this.protocolMappers = protocolMappers;
    return this;
  }

  public ClientRepresentation addProtocolMappersItem(ProtocolMapperRepresentation protocolMappersItem) {
    if (this.protocolMappers == null) {
      this.protocolMappers = new ArrayList<>();
    }
    this.protocolMappers.add(protocolMappersItem);
    return this;
  }

  /**
   * Get protocolMappers
   * @return protocolMappers
   */
  @javax.annotation.Nullable
  public List<ProtocolMapperRepresentation> getProtocolMappers() {
    return protocolMappers;
  }

  public void setProtocolMappers(List<ProtocolMapperRepresentation> protocolMappers) {
    this.protocolMappers = protocolMappers;
  }


  public ClientRepresentation publicClient(Boolean publicClient) {
    this.publicClient = publicClient;
    return this;
  }

  /**
   * Get publicClient
   * @return publicClient
   */
  @javax.annotation.Nullable
  public Boolean getPublicClient() {
    return publicClient;
  }

  public void setPublicClient(Boolean publicClient) {
    this.publicClient = publicClient;
  }


  public ClientRepresentation redirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  public ClientRepresentation addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

  /**
   * Get redirectUris
   * @return redirectUris
   */
  @javax.annotation.Nullable
  public List<String> getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }


  public ClientRepresentation registeredNodes(Map<String, Object> registeredNodes) {
    this.registeredNodes = registeredNodes;
    return this;
  }

  public ClientRepresentation putRegisteredNodesItem(String key, Object registeredNodesItem) {
    if (this.registeredNodes == null) {
      this.registeredNodes = new HashMap<>();
    }
    this.registeredNodes.put(key, registeredNodesItem);
    return this;
  }

  /**
   * Get registeredNodes
   * @return registeredNodes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getRegisteredNodes() {
    return registeredNodes;
  }

  public void setRegisteredNodes(Map<String, Object> registeredNodes) {
    this.registeredNodes = registeredNodes;
  }


  public ClientRepresentation registrationAccessToken(String registrationAccessToken) {
    this.registrationAccessToken = registrationAccessToken;
    return this;
  }

  /**
   * Get registrationAccessToken
   * @return registrationAccessToken
   */
  @javax.annotation.Nullable
  public String getRegistrationAccessToken() {
    return registrationAccessToken;
  }

  public void setRegistrationAccessToken(String registrationAccessToken) {
    this.registrationAccessToken = registrationAccessToken;
  }


  public ClientRepresentation rootUrl(String rootUrl) {
    this.rootUrl = rootUrl;
    return this;
  }

  /**
   * Get rootUrl
   * @return rootUrl
   */
  @javax.annotation.Nullable
  public String getRootUrl() {
    return rootUrl;
  }

  public void setRootUrl(String rootUrl) {
    this.rootUrl = rootUrl;
  }


  public ClientRepresentation secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public ClientRepresentation serviceAccountsEnabled(Boolean serviceAccountsEnabled) {
    this.serviceAccountsEnabled = serviceAccountsEnabled;
    return this;
  }

  /**
   * Get serviceAccountsEnabled
   * @return serviceAccountsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getServiceAccountsEnabled() {
    return serviceAccountsEnabled;
  }

  public void setServiceAccountsEnabled(Boolean serviceAccountsEnabled) {
    this.serviceAccountsEnabled = serviceAccountsEnabled;
  }


  public ClientRepresentation standardFlowEnabled(Boolean standardFlowEnabled) {
    this.standardFlowEnabled = standardFlowEnabled;
    return this;
  }

  /**
   * Get standardFlowEnabled
   * @return standardFlowEnabled
   */
  @javax.annotation.Nullable
  public Boolean getStandardFlowEnabled() {
    return standardFlowEnabled;
  }

  public void setStandardFlowEnabled(Boolean standardFlowEnabled) {
    this.standardFlowEnabled = standardFlowEnabled;
  }


  public ClientRepresentation surrogateAuthRequired(Boolean surrogateAuthRequired) {
    this.surrogateAuthRequired = surrogateAuthRequired;
    return this;
  }

  /**
   * Get surrogateAuthRequired
   * @return surrogateAuthRequired
   */
  @javax.annotation.Nullable
  public Boolean getSurrogateAuthRequired() {
    return surrogateAuthRequired;
  }

  public void setSurrogateAuthRequired(Boolean surrogateAuthRequired) {
    this.surrogateAuthRequired = surrogateAuthRequired;
  }


  public ClientRepresentation webOrigins(List<String> webOrigins) {
    this.webOrigins = webOrigins;
    return this;
  }

  public ClientRepresentation addWebOriginsItem(String webOriginsItem) {
    if (this.webOrigins == null) {
      this.webOrigins = new ArrayList<>();
    }
    this.webOrigins.add(webOriginsItem);
    return this;
  }

  /**
   * Get webOrigins
   * @return webOrigins
   */
  @javax.annotation.Nullable
  public List<String> getWebOrigins() {
    return webOrigins;
  }

  public void setWebOrigins(List<String> webOrigins) {
    this.webOrigins = webOrigins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientRepresentation clientRepresentation = (ClientRepresentation) o;
    return Objects.equals(this.access, clientRepresentation.access) &&
        Objects.equals(this.adminUrl, clientRepresentation.adminUrl) &&
        Objects.equals(this.alwaysDisplayInConsole, clientRepresentation.alwaysDisplayInConsole) &&
        Objects.equals(this.attributes, clientRepresentation.attributes) &&
        Objects.equals(this.authenticationFlowBindingOverrides, clientRepresentation.authenticationFlowBindingOverrides) &&
        Objects.equals(this.authorizationServicesEnabled, clientRepresentation.authorizationServicesEnabled) &&
        Objects.equals(this.authorizationSettings, clientRepresentation.authorizationSettings) &&
        Objects.equals(this.baseUrl, clientRepresentation.baseUrl) &&
        Objects.equals(this.bearerOnly, clientRepresentation.bearerOnly) &&
        Objects.equals(this.clientAuthenticatorType, clientRepresentation.clientAuthenticatorType) &&
        Objects.equals(this.clientId, clientRepresentation.clientId) &&
        Objects.equals(this.consentRequired, clientRepresentation.consentRequired) &&
        Objects.equals(this.defaultClientScopes, clientRepresentation.defaultClientScopes) &&
        Objects.equals(this.defaultRoles, clientRepresentation.defaultRoles) &&
        Objects.equals(this.description, clientRepresentation.description) &&
        Objects.equals(this.directAccessGrantsEnabled, clientRepresentation.directAccessGrantsEnabled) &&
        Objects.equals(this.enabled, clientRepresentation.enabled) &&
        Objects.equals(this.frontchannelLogout, clientRepresentation.frontchannelLogout) &&
        Objects.equals(this.fullScopeAllowed, clientRepresentation.fullScopeAllowed) &&
        Objects.equals(this.id, clientRepresentation.id) &&
        Objects.equals(this.implicitFlowEnabled, clientRepresentation.implicitFlowEnabled) &&
        Objects.equals(this.name, clientRepresentation.name) &&
        Objects.equals(this.nodeReRegistrationTimeout, clientRepresentation.nodeReRegistrationTimeout) &&
        Objects.equals(this.notBefore, clientRepresentation.notBefore) &&
        Objects.equals(this.optionalClientScopes, clientRepresentation.optionalClientScopes) &&
        Objects.equals(this.origin, clientRepresentation.origin) &&
        Objects.equals(this.protocol, clientRepresentation.protocol) &&
        Objects.equals(this.protocolMappers, clientRepresentation.protocolMappers) &&
        Objects.equals(this.publicClient, clientRepresentation.publicClient) &&
        Objects.equals(this.redirectUris, clientRepresentation.redirectUris) &&
        Objects.equals(this.registeredNodes, clientRepresentation.registeredNodes) &&
        Objects.equals(this.registrationAccessToken, clientRepresentation.registrationAccessToken) &&
        Objects.equals(this.rootUrl, clientRepresentation.rootUrl) &&
        Objects.equals(this.secret, clientRepresentation.secret) &&
        Objects.equals(this.serviceAccountsEnabled, clientRepresentation.serviceAccountsEnabled) &&
        Objects.equals(this.standardFlowEnabled, clientRepresentation.standardFlowEnabled) &&
        Objects.equals(this.surrogateAuthRequired, clientRepresentation.surrogateAuthRequired) &&
        Objects.equals(this.webOrigins, clientRepresentation.webOrigins);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, adminUrl, alwaysDisplayInConsole, attributes, authenticationFlowBindingOverrides, authorizationServicesEnabled, authorizationSettings, baseUrl, bearerOnly, clientAuthenticatorType, clientId, consentRequired, defaultClientScopes, defaultRoles, description, directAccessGrantsEnabled, enabled, frontchannelLogout, fullScopeAllowed, id, implicitFlowEnabled, name, nodeReRegistrationTimeout, notBefore, optionalClientScopes, origin, protocol, protocolMappers, publicClient, redirectUris, registeredNodes, registrationAccessToken, rootUrl, secret, serviceAccountsEnabled, standardFlowEnabled, surrogateAuthRequired, webOrigins);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientRepresentation {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    adminUrl: ").append(toIndentedString(adminUrl)).append("\n");
    sb.append("    alwaysDisplayInConsole: ").append(toIndentedString(alwaysDisplayInConsole)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    authenticationFlowBindingOverrides: ").append(toIndentedString(authenticationFlowBindingOverrides)).append("\n");
    sb.append("    authorizationServicesEnabled: ").append(toIndentedString(authorizationServicesEnabled)).append("\n");
    sb.append("    authorizationSettings: ").append(toIndentedString(authorizationSettings)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    bearerOnly: ").append(toIndentedString(bearerOnly)).append("\n");
    sb.append("    clientAuthenticatorType: ").append(toIndentedString(clientAuthenticatorType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    consentRequired: ").append(toIndentedString(consentRequired)).append("\n");
    sb.append("    defaultClientScopes: ").append(toIndentedString(defaultClientScopes)).append("\n");
    sb.append("    defaultRoles: ").append(toIndentedString(defaultRoles)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    directAccessGrantsEnabled: ").append(toIndentedString(directAccessGrantsEnabled)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    frontchannelLogout: ").append(toIndentedString(frontchannelLogout)).append("\n");
    sb.append("    fullScopeAllowed: ").append(toIndentedString(fullScopeAllowed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    implicitFlowEnabled: ").append(toIndentedString(implicitFlowEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeReRegistrationTimeout: ").append(toIndentedString(nodeReRegistrationTimeout)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    optionalClientScopes: ").append(toIndentedString(optionalClientScopes)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    protocolMappers: ").append(toIndentedString(protocolMappers)).append("\n");
    sb.append("    publicClient: ").append(toIndentedString(publicClient)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    registeredNodes: ").append(toIndentedString(registeredNodes)).append("\n");
    sb.append("    registrationAccessToken: ").append(toIndentedString(registrationAccessToken)).append("\n");
    sb.append("    rootUrl: ").append(toIndentedString(rootUrl)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    serviceAccountsEnabled: ").append(toIndentedString(serviceAccountsEnabled)).append("\n");
    sb.append("    standardFlowEnabled: ").append(toIndentedString(standardFlowEnabled)).append("\n");
    sb.append("    surrogateAuthRequired: ").append(toIndentedString(surrogateAuthRequired)).append("\n");
    sb.append("    webOrigins: ").append(toIndentedString(webOrigins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("adminUrl");
    openapiFields.add("alwaysDisplayInConsole");
    openapiFields.add("attributes");
    openapiFields.add("authenticationFlowBindingOverrides");
    openapiFields.add("authorizationServicesEnabled");
    openapiFields.add("authorizationSettings");
    openapiFields.add("baseUrl");
    openapiFields.add("bearerOnly");
    openapiFields.add("clientAuthenticatorType");
    openapiFields.add("clientId");
    openapiFields.add("consentRequired");
    openapiFields.add("defaultClientScopes");
    openapiFields.add("defaultRoles");
    openapiFields.add("description");
    openapiFields.add("directAccessGrantsEnabled");
    openapiFields.add("enabled");
    openapiFields.add("frontchannelLogout");
    openapiFields.add("fullScopeAllowed");
    openapiFields.add("id");
    openapiFields.add("implicitFlowEnabled");
    openapiFields.add("name");
    openapiFields.add("nodeReRegistrationTimeout");
    openapiFields.add("notBefore");
    openapiFields.add("optionalClientScopes");
    openapiFields.add("origin");
    openapiFields.add("protocol");
    openapiFields.add("protocolMappers");
    openapiFields.add("publicClient");
    openapiFields.add("redirectUris");
    openapiFields.add("registeredNodes");
    openapiFields.add("registrationAccessToken");
    openapiFields.add("rootUrl");
    openapiFields.add("secret");
    openapiFields.add("serviceAccountsEnabled");
    openapiFields.add("standardFlowEnabled");
    openapiFields.add("surrogateAuthRequired");
    openapiFields.add("webOrigins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientRepresentation is not found in the empty JSON string", ClientRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adminUrl") != null && !jsonObj.get("adminUrl").isJsonNull()) && !jsonObj.get("adminUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminUrl").toString()));
      }
      // validate the optional field `authorizationSettings`
      if (jsonObj.get("authorizationSettings") != null && !jsonObj.get("authorizationSettings").isJsonNull()) {
        ResourceServerRepresentation.validateJsonElement(jsonObj.get("authorizationSettings"));
      }
      if ((jsonObj.get("baseUrl") != null && !jsonObj.get("baseUrl").isJsonNull()) && !jsonObj.get("baseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseUrl").toString()));
      }
      if ((jsonObj.get("clientAuthenticatorType") != null && !jsonObj.get("clientAuthenticatorType").isJsonNull()) && !jsonObj.get("clientAuthenticatorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAuthenticatorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAuthenticatorType").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultClientScopes") != null && !jsonObj.get("defaultClientScopes").isJsonNull() && !jsonObj.get("defaultClientScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultClientScopes` to be an array in the JSON string but got `%s`", jsonObj.get("defaultClientScopes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultRoles") != null && !jsonObj.get("defaultRoles").isJsonNull() && !jsonObj.get("defaultRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultRoles` to be an array in the JSON string but got `%s`", jsonObj.get("defaultRoles").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("optionalClientScopes") != null && !jsonObj.get("optionalClientScopes").isJsonNull() && !jsonObj.get("optionalClientScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionalClientScopes` to be an array in the JSON string but got `%s`", jsonObj.get("optionalClientScopes").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if (jsonObj.get("protocolMappers") != null && !jsonObj.get("protocolMappers").isJsonNull()) {
        JsonArray jsonArrayprotocolMappers = jsonObj.getAsJsonArray("protocolMappers");
        if (jsonArrayprotocolMappers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("protocolMappers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `protocolMappers` to be an array in the JSON string but got `%s`", jsonObj.get("protocolMappers").toString()));
          }

          // validate the optional field `protocolMappers` (array)
          for (int i = 0; i < jsonArrayprotocolMappers.size(); i++) {
            ProtocolMapperRepresentation.validateJsonElement(jsonArrayprotocolMappers.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirectUris") != null && !jsonObj.get("redirectUris").isJsonNull() && !jsonObj.get("redirectUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUris` to be an array in the JSON string but got `%s`", jsonObj.get("redirectUris").toString()));
      }
      if ((jsonObj.get("registrationAccessToken") != null && !jsonObj.get("registrationAccessToken").isJsonNull()) && !jsonObj.get("registrationAccessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationAccessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationAccessToken").toString()));
      }
      if ((jsonObj.get("rootUrl") != null && !jsonObj.get("rootUrl").isJsonNull()) && !jsonObj.get("rootUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootUrl").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webOrigins") != null && !jsonObj.get("webOrigins").isJsonNull() && !jsonObj.get("webOrigins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webOrigins` to be an array in the JSON string but got `%s`", jsonObj.get("webOrigins").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientRepresentation>() {
           @Override
           public void write(JsonWriter out, ClientRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientRepresentation
   * @throws IOException if the JSON string is invalid with respect to ClientRepresentation
   */
  public static ClientRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientRepresentation.class);
  }

  /**
   * Convert an instance of ClientRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

