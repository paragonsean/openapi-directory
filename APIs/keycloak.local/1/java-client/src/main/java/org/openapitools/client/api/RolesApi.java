/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GroupRepresentation;
import org.openapitools.client.model.ManagementPermissionReference;
import org.openapitools.client.model.RoleRepresentation;
import org.openapitools.client.model.UserRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RolesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for realmClientsIdRolesGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param briefRepresentation  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesGetCall(String realm, String id, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesGetValidateBeforeCall(String realm, String id, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesGet(Async)");
        }

        return realmClientsIdRolesGetCall(realm, id, briefRepresentation, first, max, search, _callback);

    }

    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param briefRepresentation  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmClientsIdRolesGet(String realm, String id, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmClientsIdRolesGetWithHttpInfo(realm, id, briefRepresentation, first, max, search);
        return localVarResp.getData();
    }

    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param briefRepresentation  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmClientsIdRolesGetWithHttpInfo(String realm, String id, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesGetValidateBeforeCall(realm, id, briefRepresentation, first, max, search, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for the realm or client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param briefRepresentation  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesGetAsync(String realm, String id, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesGetValidateBeforeCall(realm, id, briefRepresentation, first, max, search, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesPost
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesPostCall(String realm, String id, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesPostValidateBeforeCall(String realm, String id, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesPost(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmClientsIdRolesPost(Async)");
        }

        return realmClientsIdRolesPostCall(realm, id, roleRepresentation, _callback);

    }

    /**
     * Create a new role for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientsIdRolesPost(String realm, String id, RoleRepresentation roleRepresentation) throws ApiException {
        realmClientsIdRolesPostWithHttpInfo(realm, id, roleRepresentation);
    }

    /**
     * Create a new role for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientsIdRolesPostWithHttpInfo(String realm, String id, RoleRepresentation roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesPostValidateBeforeCall(realm, id, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new role for the realm or client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesPostAsync(String realm, String id, RoleRepresentation roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesPostValidateBeforeCall(realm, id, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameCompositesClientsClientGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param client  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesClientsClientGetCall(String realm, String id, String roleName, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}/composites/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameCompositesClientsClientGetValidateBeforeCall(String realm, String id, String roleName, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesClientsClientGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesClientsClientGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesClientsClientGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling realmClientsIdRolesRoleNameCompositesClientsClientGet(Async)");
        }

        return realmClientsIdRolesRoleNameCompositesClientsClientGetCall(realm, id, roleName, client, _callback);

    }

    /**
     * An app-level roles for the specified app for the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param client  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmClientsIdRolesRoleNameCompositesClientsClientGet(String realm, String id, String roleName, String client) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmClientsIdRolesRoleNameCompositesClientsClientGetWithHttpInfo(realm, id, roleName, client);
        return localVarResp.getData();
    }

    /**
     * An app-level roles for the specified app for the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param client  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmClientsIdRolesRoleNameCompositesClientsClientGetWithHttpInfo(String realm, String id, String roleName, String client) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesClientsClientGetValidateBeforeCall(realm, id, roleName, client, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * An app-level roles for the specified app for the role’s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param client  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesClientsClientGetAsync(String realm, String id, String roleName, String client, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesClientsClientGetValidateBeforeCall(realm, id, roleName, client, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameCompositesDelete
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation roles to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesDeleteCall(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameCompositesDeleteValidateBeforeCall(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesDelete(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesDelete(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmClientsIdRolesRoleNameCompositesDelete(Async)");
        }

        return realmClientsIdRolesRoleNameCompositesDeleteCall(realm, id, roleName, roleRepresentation, _callback);

    }

    /**
     * Remove roles from the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation roles to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientsIdRolesRoleNameCompositesDelete(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        realmClientsIdRolesRoleNameCompositesDeleteWithHttpInfo(realm, id, roleName, roleRepresentation);
    }

    /**
     * Remove roles from the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation roles to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientsIdRolesRoleNameCompositesDeleteWithHttpInfo(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesDeleteValidateBeforeCall(realm, id, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove roles from the role’s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation roles to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesDeleteAsync(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesDeleteValidateBeforeCall(realm, id, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameCompositesGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesGetCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameCompositesGetValidateBeforeCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesGet(Async)");
        }

        return realmClientsIdRolesRoleNameCompositesGetCall(realm, id, roleName, _callback);

    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmClientsIdRolesRoleNameCompositesGet(String realm, String id, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmClientsIdRolesRoleNameCompositesGetWithHttpInfo(realm, id, roleName);
        return localVarResp.getData();
    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmClientsIdRolesRoleNameCompositesGetWithHttpInfo(String realm, String id, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesGetValidateBeforeCall(realm, id, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get composites of the role (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesGetAsync(String realm, String id, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesGetValidateBeforeCall(realm, id, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameCompositesPost
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesPostCall(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameCompositesPostValidateBeforeCall(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesPost(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesPost(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmClientsIdRolesRoleNameCompositesPost(Async)");
        }

        return realmClientsIdRolesRoleNameCompositesPostCall(realm, id, roleName, roleRepresentation, _callback);

    }

    /**
     * Add a composite to the role
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientsIdRolesRoleNameCompositesPost(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        realmClientsIdRolesRoleNameCompositesPostWithHttpInfo(realm, id, roleName, roleRepresentation);
    }

    /**
     * Add a composite to the role
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientsIdRolesRoleNameCompositesPostWithHttpInfo(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesPostValidateBeforeCall(realm, id, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a composite to the role (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesPostAsync(String realm, String id, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesPostValidateBeforeCall(realm, id, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameCompositesRealmGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesRealmGetCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}/composites/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameCompositesRealmGetValidateBeforeCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesRealmGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesRealmGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesRealmGet(Async)");
        }

        return realmClientsIdRolesRoleNameCompositesRealmGetCall(realm, id, roleName, _callback);

    }

    /**
     * Get realm-level roles of the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmClientsIdRolesRoleNameCompositesRealmGet(String realm, String id, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmClientsIdRolesRoleNameCompositesRealmGetWithHttpInfo(realm, id, roleName);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles of the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmClientsIdRolesRoleNameCompositesRealmGetWithHttpInfo(String realm, String id, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesRealmGetValidateBeforeCall(realm, id, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles of the role’s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameCompositesRealmGetAsync(String realm, String id, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameCompositesRealmGetValidateBeforeCall(realm, id, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameDelete
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameDeleteCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameDeleteValidateBeforeCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameDelete(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameDelete(Async)");
        }

        return realmClientsIdRolesRoleNameDeleteCall(realm, id, roleName, _callback);

    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientsIdRolesRoleNameDelete(String realm, String id, String roleName) throws ApiException {
        realmClientsIdRolesRoleNameDeleteWithHttpInfo(realm, id, roleName);
    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientsIdRolesRoleNameDeleteWithHttpInfo(String realm, String id, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameDeleteValidateBeforeCall(realm, id, roleName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameDeleteAsync(String realm, String id, String roleName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameDeleteValidateBeforeCall(realm, id, roleName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameGetCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameGetValidateBeforeCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameGet(Async)");
        }

        return realmClientsIdRolesRoleNameGetCall(realm, id, roleName, _callback);

    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @return RoleRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public RoleRepresentation realmClientsIdRolesRoleNameGet(String realm, String id, String roleName) throws ApiException {
        ApiResponse<RoleRepresentation> localVarResp = realmClientsIdRolesRoleNameGetWithHttpInfo(realm, id, roleName);
        return localVarResp.getData();
    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @return ApiResponse&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleRepresentation> realmClientsIdRolesRoleNameGetWithHttpInfo(String realm, String id, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameGetValidateBeforeCall(realm, id, roleName, null);
        Type localVarReturnType = new TypeToken<RoleRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameGetAsync(String realm, String id, String roleName, final ApiCallback<RoleRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameGetValidateBeforeCall(realm, id, roleName, _callback);
        Type localVarReturnType = new TypeToken<RoleRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameGroupsGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param briefRepresentation if false, return a full representation of the GroupRepresentation objects (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameGroupsGetCall(String realm, String id, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}/groups"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameGroupsGetValidateBeforeCall(String realm, String id, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameGroupsGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameGroupsGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameGroupsGet(Async)");
        }

        return realmClientsIdRolesRoleNameGroupsGetCall(realm, id, roleName, briefRepresentation, first, max, _callback);

    }

    /**
     * Return List of Groups that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param briefRepresentation if false, return a full representation of the GroupRepresentation objects (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @return List&lt;GroupRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRepresentation> realmClientsIdRolesRoleNameGroupsGet(String realm, String id, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        ApiResponse<List<GroupRepresentation>> localVarResp = realmClientsIdRolesRoleNameGroupsGetWithHttpInfo(realm, id, roleName, briefRepresentation, first, max);
        return localVarResp.getData();
    }

    /**
     * Return List of Groups that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param briefRepresentation if false, return a full representation of the GroupRepresentation objects (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @return ApiResponse&lt;List&lt;GroupRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRepresentation>> realmClientsIdRolesRoleNameGroupsGetWithHttpInfo(String realm, String id, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameGroupsGetValidateBeforeCall(realm, id, roleName, briefRepresentation, first, max, null);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return List of Groups that have the specified role name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param briefRepresentation if false, return a full representation of the GroupRepresentation objects (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameGroupsGetAsync(String realm, String id, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback<List<GroupRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameGroupsGetValidateBeforeCall(realm, id, roleName, briefRepresentation, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameManagementPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameManagementPermissionsGetCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameManagementPermissionsGetValidateBeforeCall(String realm, String id, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameManagementPermissionsGet(Async)");
        }

        return realmClientsIdRolesRoleNameManagementPermissionsGetCall(realm, id, roleName, _callback);

    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference realmClientsIdRolesRoleNameManagementPermissionsGet(String realm, String id, String roleName) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = realmClientsIdRolesRoleNameManagementPermissionsGetWithHttpInfo(realm, id, roleName);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> realmClientsIdRolesRoleNameManagementPermissionsGetWithHttpInfo(String realm, String id, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameManagementPermissionsGetValidateBeforeCall(realm, id, roleName, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameManagementPermissionsGetAsync(String realm, String id, String roleName, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameManagementPermissionsGetValidateBeforeCall(realm, id, roleName, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameManagementPermissionsPut
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameManagementPermissionsPutCall(String realm, String id, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementPermissionReference;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameManagementPermissionsPutValidateBeforeCall(String realm, String id, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'managementPermissionReference' is set
        if (managementPermissionReference == null) {
            throw new ApiException("Missing the required parameter 'managementPermissionReference' when calling realmClientsIdRolesRoleNameManagementPermissionsPut(Async)");
        }

        return realmClientsIdRolesRoleNameManagementPermissionsPutCall(realm, id, roleName, managementPermissionReference, _callback);

    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference realmClientsIdRolesRoleNameManagementPermissionsPut(String realm, String id, String roleName, ManagementPermissionReference managementPermissionReference) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = realmClientsIdRolesRoleNameManagementPermissionsPutWithHttpInfo(realm, id, roleName, managementPermissionReference);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> realmClientsIdRolesRoleNameManagementPermissionsPutWithHttpInfo(String realm, String id, String roleName, ManagementPermissionReference managementPermissionReference) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameManagementPermissionsPutValidateBeforeCall(realm, id, roleName, managementPermissionReference, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameManagementPermissionsPutAsync(String realm, String id, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameManagementPermissionsPutValidateBeforeCall(realm, id, roleName, managementPermissionReference, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNamePut
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNamePutCall(String realm, String id, String roleName, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNamePutValidateBeforeCall(String realm, String id, String roleName, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNamePut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNamePut(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNamePut(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmClientsIdRolesRoleNamePut(Async)");
        }

        return realmClientsIdRolesRoleNamePutCall(realm, id, roleName, roleRepresentation, _callback);

    }

    /**
     * Update a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmClientsIdRolesRoleNamePut(String realm, String id, String roleName, RoleRepresentation roleRepresentation) throws ApiException {
        realmClientsIdRolesRoleNamePutWithHttpInfo(realm, id, roleName, roleRepresentation);
    }

    /**
     * Update a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmClientsIdRolesRoleNamePutWithHttpInfo(String realm, String id, String roleName, RoleRepresentation roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNamePutValidateBeforeCall(realm, id, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNamePutAsync(String realm, String id, String roleName, RoleRepresentation roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNamePutValidateBeforeCall(realm, id, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmClientsIdRolesRoleNameUsersGet
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param first  (optional)
     * @param max  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameUsersGetCall(String realm, String id, String roleName, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/clients/{id}/roles/{role-name}/users"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmClientsIdRolesRoleNameUsersGetValidateBeforeCall(String realm, String id, String roleName, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameUsersGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameUsersGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameUsersGet(Async)");
        }

        return realmClientsIdRolesRoleNameUsersGetCall(realm, id, roleName, first, max, _callback);

    }

    /**
     * Return List of Users that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param first  (optional)
     * @param max  (optional)
     * @return List&lt;UserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<UserRepresentation> realmClientsIdRolesRoleNameUsersGet(String realm, String id, String roleName, Integer first, Integer max) throws ApiException {
        ApiResponse<List<UserRepresentation>> localVarResp = realmClientsIdRolesRoleNameUsersGetWithHttpInfo(realm, id, roleName, first, max);
        return localVarResp.getData();
    }

    /**
     * Return List of Users that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param first  (optional)
     * @param max  (optional)
     * @return ApiResponse&lt;List&lt;UserRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserRepresentation>> realmClientsIdRolesRoleNameUsersGetWithHttpInfo(String realm, String id, String roleName, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameUsersGetValidateBeforeCall(realm, id, roleName, first, max, null);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return List of Users that have the specified role name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id id of client (not client-id) (required)
     * @param roleName  (required)
     * @param first  (optional)
     * @param max  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmClientsIdRolesRoleNameUsersGetAsync(String realm, String id, String roleName, Integer first, Integer max, final ApiCallback<List<UserRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmClientsIdRolesRoleNameUsersGetValidateBeforeCall(realm, id, roleName, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesGet
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesGetCall(String realm, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/roles"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesGetValidateBeforeCall(String realm, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesGet(Async)");
        }

        return realmRolesGetCall(realm, briefRepresentation, first, max, search, _callback);

    }

    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmRolesGet(String realm, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmRolesGetWithHttpInfo(realm, briefRepresentation, first, max, search);
        return localVarResp.getData();
    }

    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmRolesGetWithHttpInfo(String realm, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        okhttp3.Call localVarCall = realmRolesGetValidateBeforeCall(realm, briefRepresentation, first, max, search, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for the realm or client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesGetAsync(String realm, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesGetValidateBeforeCall(realm, briefRepresentation, first, max, search, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesPost
     * @param realm realm name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesPostCall(String realm, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/roles"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesPostValidateBeforeCall(String realm, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesPost(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmRolesPost(Async)");
        }

        return realmRolesPostCall(realm, roleRepresentation, _callback);

    }

    /**
     * Create a new role for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param roleRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmRolesPost(String realm, RoleRepresentation roleRepresentation) throws ApiException {
        realmRolesPostWithHttpInfo(realm, roleRepresentation);
    }

    /**
     * Create a new role for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param roleRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmRolesPostWithHttpInfo(String realm, RoleRepresentation roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmRolesPostValidateBeforeCall(realm, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new role for the realm or client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesPostAsync(String realm, RoleRepresentation roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesPostValidateBeforeCall(realm, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameCompositesClientsClientGet
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param client  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesClientsClientGetCall(String realm, String roleName, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}/composites/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameCompositesClientsClientGetValidateBeforeCall(String realm, String roleName, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesClientsClientGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesClientsClientGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling realmRolesRoleNameCompositesClientsClientGet(Async)");
        }

        return realmRolesRoleNameCompositesClientsClientGetCall(realm, roleName, client, _callback);

    }

    /**
     * An app-level roles for the specified app for the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param client  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmRolesRoleNameCompositesClientsClientGet(String realm, String roleName, String client) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmRolesRoleNameCompositesClientsClientGetWithHttpInfo(realm, roleName, client);
        return localVarResp.getData();
    }

    /**
     * An app-level roles for the specified app for the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param client  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmRolesRoleNameCompositesClientsClientGetWithHttpInfo(String realm, String roleName, String client) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameCompositesClientsClientGetValidateBeforeCall(realm, roleName, client, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * An app-level roles for the specified app for the role’s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param client  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesClientsClientGetAsync(String realm, String roleName, String client, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameCompositesClientsClientGetValidateBeforeCall(realm, roleName, client, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameCompositesDelete
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation roles to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesDeleteCall(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameCompositesDeleteValidateBeforeCall(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesDelete(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesDelete(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmRolesRoleNameCompositesDelete(Async)");
        }

        return realmRolesRoleNameCompositesDeleteCall(realm, roleName, roleRepresentation, _callback);

    }

    /**
     * Remove roles from the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation roles to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmRolesRoleNameCompositesDelete(String realm, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        realmRolesRoleNameCompositesDeleteWithHttpInfo(realm, roleName, roleRepresentation);
    }

    /**
     * Remove roles from the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation roles to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmRolesRoleNameCompositesDeleteWithHttpInfo(String realm, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameCompositesDeleteValidateBeforeCall(realm, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove roles from the role’s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation roles to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesDeleteAsync(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameCompositesDeleteValidateBeforeCall(realm, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameCompositesGet
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesGetCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameCompositesGetValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesGet(Async)");
        }

        return realmRolesRoleNameCompositesGetCall(realm, roleName, _callback);

    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmRolesRoleNameCompositesGet(String realm, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmRolesRoleNameCompositesGetWithHttpInfo(realm, roleName);
        return localVarResp.getData();
    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmRolesRoleNameCompositesGetWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameCompositesGetValidateBeforeCall(realm, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get composites of the role (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesGetAsync(String realm, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameCompositesGetValidateBeforeCall(realm, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameCompositesPost
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesPostCall(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameCompositesPostValidateBeforeCall(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesPost(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesPost(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmRolesRoleNameCompositesPost(Async)");
        }

        return realmRolesRoleNameCompositesPostCall(realm, roleName, roleRepresentation, _callback);

    }

    /**
     * Add a composite to the role
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmRolesRoleNameCompositesPost(String realm, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        realmRolesRoleNameCompositesPostWithHttpInfo(realm, roleName, roleRepresentation);
    }

    /**
     * Add a composite to the role
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmRolesRoleNameCompositesPostWithHttpInfo(String realm, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameCompositesPostValidateBeforeCall(realm, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a composite to the role (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesPostAsync(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameCompositesPostValidateBeforeCall(realm, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameCompositesRealmGet
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesRealmGetCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}/composites/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameCompositesRealmGetValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesRealmGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesRealmGet(Async)");
        }

        return realmRolesRoleNameCompositesRealmGetCall(realm, roleName, _callback);

    }

    /**
     * Get realm-level roles of the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> realmRolesRoleNameCompositesRealmGet(String realm, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = realmRolesRoleNameCompositesRealmGetWithHttpInfo(realm, roleName);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles of the role’s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> realmRolesRoleNameCompositesRealmGetWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameCompositesRealmGetValidateBeforeCall(realm, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles of the role’s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameCompositesRealmGetAsync(String realm, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameCompositesRealmGetValidateBeforeCall(realm, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameDelete
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameDeleteCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameDeleteValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameDelete(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameDelete(Async)");
        }

        return realmRolesRoleNameDeleteCall(realm, roleName, _callback);

    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmRolesRoleNameDelete(String realm, String roleName) throws ApiException {
        realmRolesRoleNameDeleteWithHttpInfo(realm, roleName);
    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmRolesRoleNameDeleteWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameDeleteValidateBeforeCall(realm, roleName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameDeleteAsync(String realm, String roleName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameDeleteValidateBeforeCall(realm, roleName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameGet
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameGetCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameGetValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameGet(Async)");
        }

        return realmRolesRoleNameGetCall(realm, roleName, _callback);

    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @return RoleRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public RoleRepresentation realmRolesRoleNameGet(String realm, String roleName) throws ApiException {
        ApiResponse<RoleRepresentation> localVarResp = realmRolesRoleNameGetWithHttpInfo(realm, roleName);
        return localVarResp.getData();
    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @return ApiResponse&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleRepresentation> realmRolesRoleNameGetWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameGetValidateBeforeCall(realm, roleName, null);
        Type localVarReturnType = new TypeToken<RoleRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameGetAsync(String realm, String roleName, final ApiCallback<RoleRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameGetValidateBeforeCall(realm, roleName, _callback);
        Type localVarReturnType = new TypeToken<RoleRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameGroupsGet
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param briefRepresentation if false, return a full representation of the GroupRepresentation objects (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameGroupsGetCall(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}/groups"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameGroupsGetValidateBeforeCall(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameGroupsGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameGroupsGet(Async)");
        }

        return realmRolesRoleNameGroupsGetCall(realm, roleName, briefRepresentation, first, max, _callback);

    }

    /**
     * Return List of Groups that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param briefRepresentation if false, return a full representation of the GroupRepresentation objects (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @return List&lt;GroupRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRepresentation> realmRolesRoleNameGroupsGet(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        ApiResponse<List<GroupRepresentation>> localVarResp = realmRolesRoleNameGroupsGetWithHttpInfo(realm, roleName, briefRepresentation, first, max);
        return localVarResp.getData();
    }

    /**
     * Return List of Groups that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param briefRepresentation if false, return a full representation of the GroupRepresentation objects (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @return ApiResponse&lt;List&lt;GroupRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRepresentation>> realmRolesRoleNameGroupsGetWithHttpInfo(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameGroupsGetValidateBeforeCall(realm, roleName, briefRepresentation, first, max, null);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return List of Groups that have the specified role name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param briefRepresentation if false, return a full representation of the GroupRepresentation objects (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameGroupsGetAsync(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback<List<GroupRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameGroupsGetValidateBeforeCall(realm, roleName, briefRepresentation, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameManagementPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameManagementPermissionsGetCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameManagementPermissionsGetValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameManagementPermissionsGet(Async)");
        }

        return realmRolesRoleNameManagementPermissionsGetCall(realm, roleName, _callback);

    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference realmRolesRoleNameManagementPermissionsGet(String realm, String roleName) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = realmRolesRoleNameManagementPermissionsGetWithHttpInfo(realm, roleName);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> realmRolesRoleNameManagementPermissionsGetWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameManagementPermissionsGetValidateBeforeCall(realm, roleName, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameManagementPermissionsGetAsync(String realm, String roleName, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameManagementPermissionsGetValidateBeforeCall(realm, roleName, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameManagementPermissionsPut
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameManagementPermissionsPutCall(String realm, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementPermissionReference;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameManagementPermissionsPutValidateBeforeCall(String realm, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'managementPermissionReference' is set
        if (managementPermissionReference == null) {
            throw new ApiException("Missing the required parameter 'managementPermissionReference' when calling realmRolesRoleNameManagementPermissionsPut(Async)");
        }

        return realmRolesRoleNameManagementPermissionsPutCall(realm, roleName, managementPermissionReference, _callback);

    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference realmRolesRoleNameManagementPermissionsPut(String realm, String roleName, ManagementPermissionReference managementPermissionReference) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = realmRolesRoleNameManagementPermissionsPutWithHttpInfo(realm, roleName, managementPermissionReference);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> realmRolesRoleNameManagementPermissionsPutWithHttpInfo(String realm, String roleName, ManagementPermissionReference managementPermissionReference) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameManagementPermissionsPutValidateBeforeCall(realm, roleName, managementPermissionReference, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameManagementPermissionsPutAsync(String realm, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameManagementPermissionsPutValidateBeforeCall(realm, roleName, managementPermissionReference, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNamePut
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNamePutCall(String realm, String roleName, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNamePutValidateBeforeCall(String realm, String roleName, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNamePut(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNamePut(Async)");
        }

        // verify the required parameter 'roleRepresentation' is set
        if (roleRepresentation == null) {
            throw new ApiException("Missing the required parameter 'roleRepresentation' when calling realmRolesRoleNamePut(Async)");
        }

        return realmRolesRoleNamePutCall(realm, roleName, roleRepresentation, _callback);

    }

    /**
     * Update a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void realmRolesRoleNamePut(String realm, String roleName, RoleRepresentation roleRepresentation) throws ApiException {
        realmRolesRoleNamePutWithHttpInfo(realm, roleName, roleRepresentation);
    }

    /**
     * Update a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> realmRolesRoleNamePutWithHttpInfo(String realm, String roleName, RoleRepresentation roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNamePutValidateBeforeCall(realm, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role’s name (not id!) (required)
     * @param roleRepresentation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNamePutAsync(String realm, String roleName, RoleRepresentation roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNamePutValidateBeforeCall(realm, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for realmRolesRoleNameUsersGet
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param first  (optional)
     * @param max  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameUsersGetCall(String realm, String roleName, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{realm}/roles/{role-name}/users"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call realmRolesRoleNameUsersGetValidateBeforeCall(String realm, String roleName, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling realmRolesRoleNameUsersGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling realmRolesRoleNameUsersGet(Async)");
        }

        return realmRolesRoleNameUsersGetCall(realm, roleName, first, max, _callback);

    }

    /**
     * Return List of Users that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param first  (optional)
     * @param max  (optional)
     * @return List&lt;UserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public List<UserRepresentation> realmRolesRoleNameUsersGet(String realm, String roleName, Integer first, Integer max) throws ApiException {
        ApiResponse<List<UserRepresentation>> localVarResp = realmRolesRoleNameUsersGetWithHttpInfo(realm, roleName, first, max);
        return localVarResp.getData();
    }

    /**
     * Return List of Users that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param first  (optional)
     * @param max  (optional)
     * @return ApiResponse&lt;List&lt;UserRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserRepresentation>> realmRolesRoleNameUsersGetWithHttpInfo(String realm, String roleName, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = realmRolesRoleNameUsersGetValidateBeforeCall(realm, roleName, first, max, null);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return List of Users that have the specified role name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param first  (optional)
     * @param max  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call realmRolesRoleNameUsersGetAsync(String realm, String roleName, Integer first, Integer max, final ApiCallback<List<UserRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = realmRolesRoleNameUsersGetValidateBeforeCall(realm, roleName, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
