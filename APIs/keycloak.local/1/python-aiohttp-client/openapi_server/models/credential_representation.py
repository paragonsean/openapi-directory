# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredentialRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: int=None, credential_data: str=None, id: str=None, priority: int=None, secret_data: str=None, temporary: bool=None, type: str=None, user_label: str=None, value: str=None):
        """CredentialRepresentation - a model defined in OpenAPI

        :param created_date: The created_date of this CredentialRepresentation.
        :param credential_data: The credential_data of this CredentialRepresentation.
        :param id: The id of this CredentialRepresentation.
        :param priority: The priority of this CredentialRepresentation.
        :param secret_data: The secret_data of this CredentialRepresentation.
        :param temporary: The temporary of this CredentialRepresentation.
        :param type: The type of this CredentialRepresentation.
        :param user_label: The user_label of this CredentialRepresentation.
        :param value: The value of this CredentialRepresentation.
        """
        self.openapi_types = {
            'created_date': int,
            'credential_data': str,
            'id': str,
            'priority': int,
            'secret_data': str,
            'temporary': bool,
            'type': str,
            'user_label': str,
            'value': str
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'credential_data': 'credentialData',
            'id': 'id',
            'priority': 'priority',
            'secret_data': 'secretData',
            'temporary': 'temporary',
            'type': 'type',
            'user_label': 'userLabel',
            'value': 'value'
        }

        self._created_date = created_date
        self._credential_data = credential_data
        self._id = id
        self._priority = priority
        self._secret_data = secret_data
        self._temporary = temporary
        self._type = type
        self._user_label = user_label
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredentialRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CredentialRepresentation of this CredentialRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this CredentialRepresentation.


        :return: The created_date of this CredentialRepresentation.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CredentialRepresentation.


        :param created_date: The created_date of this CredentialRepresentation.
        :type created_date: int
        """

        self._created_date = created_date

    @property
    def credential_data(self):
        """Gets the credential_data of this CredentialRepresentation.


        :return: The credential_data of this CredentialRepresentation.
        :rtype: str
        """
        return self._credential_data

    @credential_data.setter
    def credential_data(self, credential_data):
        """Sets the credential_data of this CredentialRepresentation.


        :param credential_data: The credential_data of this CredentialRepresentation.
        :type credential_data: str
        """

        self._credential_data = credential_data

    @property
    def id(self):
        """Gets the id of this CredentialRepresentation.


        :return: The id of this CredentialRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CredentialRepresentation.


        :param id: The id of this CredentialRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def priority(self):
        """Gets the priority of this CredentialRepresentation.


        :return: The priority of this CredentialRepresentation.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CredentialRepresentation.


        :param priority: The priority of this CredentialRepresentation.
        :type priority: int
        """

        self._priority = priority

    @property
    def secret_data(self):
        """Gets the secret_data of this CredentialRepresentation.


        :return: The secret_data of this CredentialRepresentation.
        :rtype: str
        """
        return self._secret_data

    @secret_data.setter
    def secret_data(self, secret_data):
        """Sets the secret_data of this CredentialRepresentation.


        :param secret_data: The secret_data of this CredentialRepresentation.
        :type secret_data: str
        """

        self._secret_data = secret_data

    @property
    def temporary(self):
        """Gets the temporary of this CredentialRepresentation.


        :return: The temporary of this CredentialRepresentation.
        :rtype: bool
        """
        return self._temporary

    @temporary.setter
    def temporary(self, temporary):
        """Sets the temporary of this CredentialRepresentation.


        :param temporary: The temporary of this CredentialRepresentation.
        :type temporary: bool
        """

        self._temporary = temporary

    @property
    def type(self):
        """Gets the type of this CredentialRepresentation.


        :return: The type of this CredentialRepresentation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CredentialRepresentation.


        :param type: The type of this CredentialRepresentation.
        :type type: str
        """

        self._type = type

    @property
    def user_label(self):
        """Gets the user_label of this CredentialRepresentation.


        :return: The user_label of this CredentialRepresentation.
        :rtype: str
        """
        return self._user_label

    @user_label.setter
    def user_label(self, user_label):
        """Sets the user_label of this CredentialRepresentation.


        :param user_label: The user_label of this CredentialRepresentation.
        :type user_label: str
        """

        self._user_label = user_label

    @property
    def value(self):
        """Gets the value of this CredentialRepresentation.


        :return: The value of this CredentialRepresentation.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CredentialRepresentation.


        :param value: The value of this CredentialRepresentation.
        :type value: str
        """

        self._value = value
