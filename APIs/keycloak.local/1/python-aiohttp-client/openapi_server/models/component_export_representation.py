# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.multivalued_hash_map import MultivaluedHashMap
from openapi_server import util


class ComponentExportRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: MultivaluedHashMap=None, id: str=None, name: str=None, provider_id: str=None, sub_components: MultivaluedHashMap=None, sub_type: str=None):
        """ComponentExportRepresentation - a model defined in OpenAPI

        :param config: The config of this ComponentExportRepresentation.
        :param id: The id of this ComponentExportRepresentation.
        :param name: The name of this ComponentExportRepresentation.
        :param provider_id: The provider_id of this ComponentExportRepresentation.
        :param sub_components: The sub_components of this ComponentExportRepresentation.
        :param sub_type: The sub_type of this ComponentExportRepresentation.
        """
        self.openapi_types = {
            'config': MultivaluedHashMap,
            'id': str,
            'name': str,
            'provider_id': str,
            'sub_components': MultivaluedHashMap,
            'sub_type': str
        }

        self.attribute_map = {
            'config': 'config',
            'id': 'id',
            'name': 'name',
            'provider_id': 'providerId',
            'sub_components': 'subComponents',
            'sub_type': 'subType'
        }

        self._config = config
        self._id = id
        self._name = name
        self._provider_id = provider_id
        self._sub_components = sub_components
        self._sub_type = sub_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentExportRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentExportRepresentation of this ComponentExportRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this ComponentExportRepresentation.


        :return: The config of this ComponentExportRepresentation.
        :rtype: MultivaluedHashMap
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ComponentExportRepresentation.


        :param config: The config of this ComponentExportRepresentation.
        :type config: MultivaluedHashMap
        """

        self._config = config

    @property
    def id(self):
        """Gets the id of this ComponentExportRepresentation.


        :return: The id of this ComponentExportRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComponentExportRepresentation.


        :param id: The id of this ComponentExportRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ComponentExportRepresentation.


        :return: The name of this ComponentExportRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComponentExportRepresentation.


        :param name: The name of this ComponentExportRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def provider_id(self):
        """Gets the provider_id of this ComponentExportRepresentation.


        :return: The provider_id of this ComponentExportRepresentation.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this ComponentExportRepresentation.


        :param provider_id: The provider_id of this ComponentExportRepresentation.
        :type provider_id: str
        """

        self._provider_id = provider_id

    @property
    def sub_components(self):
        """Gets the sub_components of this ComponentExportRepresentation.


        :return: The sub_components of this ComponentExportRepresentation.
        :rtype: MultivaluedHashMap
        """
        return self._sub_components

    @sub_components.setter
    def sub_components(self, sub_components):
        """Sets the sub_components of this ComponentExportRepresentation.


        :param sub_components: The sub_components of this ComponentExportRepresentation.
        :type sub_components: MultivaluedHashMap
        """

        self._sub_components = sub_components

    @property
    def sub_type(self):
        """Gets the sub_type of this ComponentExportRepresentation.


        :return: The sub_type of this ComponentExportRepresentation.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this ComponentExportRepresentation.


        :param sub_type: The sub_type of this ComponentExportRepresentation.
        :type sub_type: str
        """

        self._sub_type = sub_type
