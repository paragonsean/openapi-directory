# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScopeMappingRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client: str=None, client_scope: str=None, roles: List[str]=None, _self: str=None):
        """ScopeMappingRepresentation - a model defined in OpenAPI

        :param client: The client of this ScopeMappingRepresentation.
        :param client_scope: The client_scope of this ScopeMappingRepresentation.
        :param roles: The roles of this ScopeMappingRepresentation.
        :param _self: The _self of this ScopeMappingRepresentation.
        """
        self.openapi_types = {
            'client': str,
            'client_scope': str,
            'roles': List[str],
            '_self': str
        }

        self.attribute_map = {
            'client': 'client',
            'client_scope': 'clientScope',
            'roles': 'roles',
            '_self': 'self'
        }

        self._client = client
        self._client_scope = client_scope
        self._roles = roles
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScopeMappingRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScopeMappingRepresentation of this ScopeMappingRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client(self):
        """Gets the client of this ScopeMappingRepresentation.


        :return: The client of this ScopeMappingRepresentation.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ScopeMappingRepresentation.


        :param client: The client of this ScopeMappingRepresentation.
        :type client: str
        """

        self._client = client

    @property
    def client_scope(self):
        """Gets the client_scope of this ScopeMappingRepresentation.


        :return: The client_scope of this ScopeMappingRepresentation.
        :rtype: str
        """
        return self._client_scope

    @client_scope.setter
    def client_scope(self, client_scope):
        """Sets the client_scope of this ScopeMappingRepresentation.


        :param client_scope: The client_scope of this ScopeMappingRepresentation.
        :type client_scope: str
        """

        self._client_scope = client_scope

    @property
    def roles(self):
        """Gets the roles of this ScopeMappingRepresentation.


        :return: The roles of this ScopeMappingRepresentation.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ScopeMappingRepresentation.


        :param roles: The roles of this ScopeMappingRepresentation.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def _self(self):
        """Gets the _self of this ScopeMappingRepresentation.


        :return: The _self of this ScopeMappingRepresentation.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ScopeMappingRepresentation.


        :param _self: The _self of this ScopeMappingRepresentation.
        :type _self: str
        """

        self.__self = _self
