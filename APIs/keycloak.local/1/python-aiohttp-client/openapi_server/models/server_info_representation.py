# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.memory_info_representation import MemoryInfoRepresentation
from openapi_server.models.password_policy_type_representation import PasswordPolicyTypeRepresentation
from openapi_server.models.profile_info_representation import ProfileInfoRepresentation
from openapi_server.models.system_info_representation import SystemInfoRepresentation
from openapi_server import util


class ServerInfoRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, builtin_protocol_mappers: Dict[str, object]=None, client_importers: List[Dict[str, object]]=None, client_installations: Dict[str, object]=None, component_types: Dict[str, object]=None, enums: Dict[str, object]=None, identity_providers: List[Dict[str, object]]=None, memory_info: MemoryInfoRepresentation=None, password_policies: List[PasswordPolicyTypeRepresentation]=None, profile_info: ProfileInfoRepresentation=None, protocol_mapper_types: Dict[str, object]=None, providers: Dict[str, object]=None, social_providers: List[Dict[str, object]]=None, system_info: SystemInfoRepresentation=None, themes: Dict[str, object]=None):
        """ServerInfoRepresentation - a model defined in OpenAPI

        :param builtin_protocol_mappers: The builtin_protocol_mappers of this ServerInfoRepresentation.
        :param client_importers: The client_importers of this ServerInfoRepresentation.
        :param client_installations: The client_installations of this ServerInfoRepresentation.
        :param component_types: The component_types of this ServerInfoRepresentation.
        :param enums: The enums of this ServerInfoRepresentation.
        :param identity_providers: The identity_providers of this ServerInfoRepresentation.
        :param memory_info: The memory_info of this ServerInfoRepresentation.
        :param password_policies: The password_policies of this ServerInfoRepresentation.
        :param profile_info: The profile_info of this ServerInfoRepresentation.
        :param protocol_mapper_types: The protocol_mapper_types of this ServerInfoRepresentation.
        :param providers: The providers of this ServerInfoRepresentation.
        :param social_providers: The social_providers of this ServerInfoRepresentation.
        :param system_info: The system_info of this ServerInfoRepresentation.
        :param themes: The themes of this ServerInfoRepresentation.
        """
        self.openapi_types = {
            'builtin_protocol_mappers': Dict[str, object],
            'client_importers': List[Dict[str, object]],
            'client_installations': Dict[str, object],
            'component_types': Dict[str, object],
            'enums': Dict[str, object],
            'identity_providers': List[Dict[str, object]],
            'memory_info': MemoryInfoRepresentation,
            'password_policies': List[PasswordPolicyTypeRepresentation],
            'profile_info': ProfileInfoRepresentation,
            'protocol_mapper_types': Dict[str, object],
            'providers': Dict[str, object],
            'social_providers': List[Dict[str, object]],
            'system_info': SystemInfoRepresentation,
            'themes': Dict[str, object]
        }

        self.attribute_map = {
            'builtin_protocol_mappers': 'builtinProtocolMappers',
            'client_importers': 'clientImporters',
            'client_installations': 'clientInstallations',
            'component_types': 'componentTypes',
            'enums': 'enums',
            'identity_providers': 'identityProviders',
            'memory_info': 'memoryInfo',
            'password_policies': 'passwordPolicies',
            'profile_info': 'profileInfo',
            'protocol_mapper_types': 'protocolMapperTypes',
            'providers': 'providers',
            'social_providers': 'socialProviders',
            'system_info': 'systemInfo',
            'themes': 'themes'
        }

        self._builtin_protocol_mappers = builtin_protocol_mappers
        self._client_importers = client_importers
        self._client_installations = client_installations
        self._component_types = component_types
        self._enums = enums
        self._identity_providers = identity_providers
        self._memory_info = memory_info
        self._password_policies = password_policies
        self._profile_info = profile_info
        self._protocol_mapper_types = protocol_mapper_types
        self._providers = providers
        self._social_providers = social_providers
        self._system_info = system_info
        self._themes = themes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerInfoRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerInfoRepresentation of this ServerInfoRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def builtin_protocol_mappers(self):
        """Gets the builtin_protocol_mappers of this ServerInfoRepresentation.


        :return: The builtin_protocol_mappers of this ServerInfoRepresentation.
        :rtype: Dict[str, object]
        """
        return self._builtin_protocol_mappers

    @builtin_protocol_mappers.setter
    def builtin_protocol_mappers(self, builtin_protocol_mappers):
        """Sets the builtin_protocol_mappers of this ServerInfoRepresentation.


        :param builtin_protocol_mappers: The builtin_protocol_mappers of this ServerInfoRepresentation.
        :type builtin_protocol_mappers: Dict[str, object]
        """

        self._builtin_protocol_mappers = builtin_protocol_mappers

    @property
    def client_importers(self):
        """Gets the client_importers of this ServerInfoRepresentation.


        :return: The client_importers of this ServerInfoRepresentation.
        :rtype: List[Dict[str, object]]
        """
        return self._client_importers

    @client_importers.setter
    def client_importers(self, client_importers):
        """Sets the client_importers of this ServerInfoRepresentation.


        :param client_importers: The client_importers of this ServerInfoRepresentation.
        :type client_importers: List[Dict[str, object]]
        """

        self._client_importers = client_importers

    @property
    def client_installations(self):
        """Gets the client_installations of this ServerInfoRepresentation.


        :return: The client_installations of this ServerInfoRepresentation.
        :rtype: Dict[str, object]
        """
        return self._client_installations

    @client_installations.setter
    def client_installations(self, client_installations):
        """Sets the client_installations of this ServerInfoRepresentation.


        :param client_installations: The client_installations of this ServerInfoRepresentation.
        :type client_installations: Dict[str, object]
        """

        self._client_installations = client_installations

    @property
    def component_types(self):
        """Gets the component_types of this ServerInfoRepresentation.


        :return: The component_types of this ServerInfoRepresentation.
        :rtype: Dict[str, object]
        """
        return self._component_types

    @component_types.setter
    def component_types(self, component_types):
        """Sets the component_types of this ServerInfoRepresentation.


        :param component_types: The component_types of this ServerInfoRepresentation.
        :type component_types: Dict[str, object]
        """

        self._component_types = component_types

    @property
    def enums(self):
        """Gets the enums of this ServerInfoRepresentation.


        :return: The enums of this ServerInfoRepresentation.
        :rtype: Dict[str, object]
        """
        return self._enums

    @enums.setter
    def enums(self, enums):
        """Sets the enums of this ServerInfoRepresentation.


        :param enums: The enums of this ServerInfoRepresentation.
        :type enums: Dict[str, object]
        """

        self._enums = enums

    @property
    def identity_providers(self):
        """Gets the identity_providers of this ServerInfoRepresentation.


        :return: The identity_providers of this ServerInfoRepresentation.
        :rtype: List[Dict[str, object]]
        """
        return self._identity_providers

    @identity_providers.setter
    def identity_providers(self, identity_providers):
        """Sets the identity_providers of this ServerInfoRepresentation.


        :param identity_providers: The identity_providers of this ServerInfoRepresentation.
        :type identity_providers: List[Dict[str, object]]
        """

        self._identity_providers = identity_providers

    @property
    def memory_info(self):
        """Gets the memory_info of this ServerInfoRepresentation.


        :return: The memory_info of this ServerInfoRepresentation.
        :rtype: MemoryInfoRepresentation
        """
        return self._memory_info

    @memory_info.setter
    def memory_info(self, memory_info):
        """Sets the memory_info of this ServerInfoRepresentation.


        :param memory_info: The memory_info of this ServerInfoRepresentation.
        :type memory_info: MemoryInfoRepresentation
        """

        self._memory_info = memory_info

    @property
    def password_policies(self):
        """Gets the password_policies of this ServerInfoRepresentation.


        :return: The password_policies of this ServerInfoRepresentation.
        :rtype: List[PasswordPolicyTypeRepresentation]
        """
        return self._password_policies

    @password_policies.setter
    def password_policies(self, password_policies):
        """Sets the password_policies of this ServerInfoRepresentation.


        :param password_policies: The password_policies of this ServerInfoRepresentation.
        :type password_policies: List[PasswordPolicyTypeRepresentation]
        """

        self._password_policies = password_policies

    @property
    def profile_info(self):
        """Gets the profile_info of this ServerInfoRepresentation.


        :return: The profile_info of this ServerInfoRepresentation.
        :rtype: ProfileInfoRepresentation
        """
        return self._profile_info

    @profile_info.setter
    def profile_info(self, profile_info):
        """Sets the profile_info of this ServerInfoRepresentation.


        :param profile_info: The profile_info of this ServerInfoRepresentation.
        :type profile_info: ProfileInfoRepresentation
        """

        self._profile_info = profile_info

    @property
    def protocol_mapper_types(self):
        """Gets the protocol_mapper_types of this ServerInfoRepresentation.


        :return: The protocol_mapper_types of this ServerInfoRepresentation.
        :rtype: Dict[str, object]
        """
        return self._protocol_mapper_types

    @protocol_mapper_types.setter
    def protocol_mapper_types(self, protocol_mapper_types):
        """Sets the protocol_mapper_types of this ServerInfoRepresentation.


        :param protocol_mapper_types: The protocol_mapper_types of this ServerInfoRepresentation.
        :type protocol_mapper_types: Dict[str, object]
        """

        self._protocol_mapper_types = protocol_mapper_types

    @property
    def providers(self):
        """Gets the providers of this ServerInfoRepresentation.


        :return: The providers of this ServerInfoRepresentation.
        :rtype: Dict[str, object]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this ServerInfoRepresentation.


        :param providers: The providers of this ServerInfoRepresentation.
        :type providers: Dict[str, object]
        """

        self._providers = providers

    @property
    def social_providers(self):
        """Gets the social_providers of this ServerInfoRepresentation.


        :return: The social_providers of this ServerInfoRepresentation.
        :rtype: List[Dict[str, object]]
        """
        return self._social_providers

    @social_providers.setter
    def social_providers(self, social_providers):
        """Sets the social_providers of this ServerInfoRepresentation.


        :param social_providers: The social_providers of this ServerInfoRepresentation.
        :type social_providers: List[Dict[str, object]]
        """

        self._social_providers = social_providers

    @property
    def system_info(self):
        """Gets the system_info of this ServerInfoRepresentation.


        :return: The system_info of this ServerInfoRepresentation.
        :rtype: SystemInfoRepresentation
        """
        return self._system_info

    @system_info.setter
    def system_info(self, system_info):
        """Sets the system_info of this ServerInfoRepresentation.


        :param system_info: The system_info of this ServerInfoRepresentation.
        :type system_info: SystemInfoRepresentation
        """

        self._system_info = system_info

    @property
    def themes(self):
        """Gets the themes of this ServerInfoRepresentation.


        :return: The themes of this ServerInfoRepresentation.
        :rtype: Dict[str, object]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this ServerInfoRepresentation.


        :param themes: The themes of this ServerInfoRepresentation.
        :type themes: Dict[str, object]
        """

        self._themes = themes
