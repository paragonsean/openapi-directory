# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_property_representation import ConfigPropertyRepresentation
from openapi_server import util


class ComponentTypeRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, help_text: str=None, id: str=None, metadata: Dict[str, object]=None, properties: List[ConfigPropertyRepresentation]=None):
        """ComponentTypeRepresentation - a model defined in OpenAPI

        :param help_text: The help_text of this ComponentTypeRepresentation.
        :param id: The id of this ComponentTypeRepresentation.
        :param metadata: The metadata of this ComponentTypeRepresentation.
        :param properties: The properties of this ComponentTypeRepresentation.
        """
        self.openapi_types = {
            'help_text': str,
            'id': str,
            'metadata': Dict[str, object],
            'properties': List[ConfigPropertyRepresentation]
        }

        self.attribute_map = {
            'help_text': 'helpText',
            'id': 'id',
            'metadata': 'metadata',
            'properties': 'properties'
        }

        self._help_text = help_text
        self._id = id
        self._metadata = metadata
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentTypeRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentTypeRepresentation of this ComponentTypeRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def help_text(self):
        """Gets the help_text of this ComponentTypeRepresentation.


        :return: The help_text of this ComponentTypeRepresentation.
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this ComponentTypeRepresentation.


        :param help_text: The help_text of this ComponentTypeRepresentation.
        :type help_text: str
        """

        self._help_text = help_text

    @property
    def id(self):
        """Gets the id of this ComponentTypeRepresentation.


        :return: The id of this ComponentTypeRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComponentTypeRepresentation.


        :param id: The id of this ComponentTypeRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this ComponentTypeRepresentation.


        :return: The metadata of this ComponentTypeRepresentation.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ComponentTypeRepresentation.


        :param metadata: The metadata of this ComponentTypeRepresentation.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def properties(self):
        """Gets the properties of this ComponentTypeRepresentation.


        :return: The properties of this ComponentTypeRepresentation.
        :rtype: List[ConfigPropertyRepresentation]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ComponentTypeRepresentation.


        :param properties: The properties of this ComponentTypeRepresentation.
        :type properties: List[ConfigPropertyRepresentation]
        """

        self._properties = properties
