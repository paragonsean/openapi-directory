# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.role_representation import RoleRepresentation
from openapi_server import util


class ClientMappingsRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client: str=None, id: str=None, mappings: List[RoleRepresentation]=None):
        """ClientMappingsRepresentation - a model defined in OpenAPI

        :param client: The client of this ClientMappingsRepresentation.
        :param id: The id of this ClientMappingsRepresentation.
        :param mappings: The mappings of this ClientMappingsRepresentation.
        """
        self.openapi_types = {
            'client': str,
            'id': str,
            'mappings': List[RoleRepresentation]
        }

        self.attribute_map = {
            'client': 'client',
            'id': 'id',
            'mappings': 'mappings'
        }

        self._client = client
        self._id = id
        self._mappings = mappings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientMappingsRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientMappingsRepresentation of this ClientMappingsRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client(self):
        """Gets the client of this ClientMappingsRepresentation.


        :return: The client of this ClientMappingsRepresentation.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ClientMappingsRepresentation.


        :param client: The client of this ClientMappingsRepresentation.
        :type client: str
        """

        self._client = client

    @property
    def id(self):
        """Gets the id of this ClientMappingsRepresentation.


        :return: The id of this ClientMappingsRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientMappingsRepresentation.


        :param id: The id of this ClientMappingsRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def mappings(self):
        """Gets the mappings of this ClientMappingsRepresentation.


        :return: The mappings of this ClientMappingsRepresentation.
        :rtype: List[RoleRepresentation]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this ClientMappingsRepresentation.


        :param mappings: The mappings of this ClientMappingsRepresentation.
        :type mappings: List[RoleRepresentation]
        """

        self._mappings = mappings
