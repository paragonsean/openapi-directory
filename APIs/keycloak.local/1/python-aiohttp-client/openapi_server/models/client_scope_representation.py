# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protocol_mapper_representation import ProtocolMapperRepresentation
from openapi_server import util


class ClientScopeRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, object]=None, description: str=None, id: str=None, name: str=None, protocol: str=None, protocol_mappers: List[ProtocolMapperRepresentation]=None):
        """ClientScopeRepresentation - a model defined in OpenAPI

        :param attributes: The attributes of this ClientScopeRepresentation.
        :param description: The description of this ClientScopeRepresentation.
        :param id: The id of this ClientScopeRepresentation.
        :param name: The name of this ClientScopeRepresentation.
        :param protocol: The protocol of this ClientScopeRepresentation.
        :param protocol_mappers: The protocol_mappers of this ClientScopeRepresentation.
        """
        self.openapi_types = {
            'attributes': Dict[str, object],
            'description': str,
            'id': str,
            'name': str,
            'protocol': str,
            'protocol_mappers': List[ProtocolMapperRepresentation]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'protocol': 'protocol',
            'protocol_mappers': 'protocolMappers'
        }

        self._attributes = attributes
        self._description = description
        self._id = id
        self._name = name
        self._protocol = protocol
        self._protocol_mappers = protocol_mappers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientScopeRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientScopeRepresentation of this ClientScopeRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ClientScopeRepresentation.


        :return: The attributes of this ClientScopeRepresentation.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ClientScopeRepresentation.


        :param attributes: The attributes of this ClientScopeRepresentation.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def description(self):
        """Gets the description of this ClientScopeRepresentation.


        :return: The description of this ClientScopeRepresentation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClientScopeRepresentation.


        :param description: The description of this ClientScopeRepresentation.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ClientScopeRepresentation.


        :return: The id of this ClientScopeRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientScopeRepresentation.


        :param id: The id of this ClientScopeRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ClientScopeRepresentation.


        :return: The name of this ClientScopeRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientScopeRepresentation.


        :param name: The name of this ClientScopeRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this ClientScopeRepresentation.


        :return: The protocol of this ClientScopeRepresentation.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ClientScopeRepresentation.


        :param protocol: The protocol of this ClientScopeRepresentation.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def protocol_mappers(self):
        """Gets the protocol_mappers of this ClientScopeRepresentation.


        :return: The protocol_mappers of this ClientScopeRepresentation.
        :rtype: List[ProtocolMapperRepresentation]
        """
        return self._protocol_mappers

    @protocol_mappers.setter
    def protocol_mappers(self, protocol_mappers):
        """Sets the protocol_mappers of this ClientScopeRepresentation.


        :param protocol_mappers: The protocol_mappers of this ClientScopeRepresentation.
        :type protocol_mappers: List[ProtocolMapperRepresentation]
        """

        self._protocol_mappers = protocol_mappers
