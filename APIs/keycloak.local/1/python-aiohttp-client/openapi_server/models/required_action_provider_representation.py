# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequiredActionProviderRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, config: Dict[str, object]=None, default_action: bool=None, enabled: bool=None, name: str=None, priority: int=None, provider_id: str=None):
        """RequiredActionProviderRepresentation - a model defined in OpenAPI

        :param alias: The alias of this RequiredActionProviderRepresentation.
        :param config: The config of this RequiredActionProviderRepresentation.
        :param default_action: The default_action of this RequiredActionProviderRepresentation.
        :param enabled: The enabled of this RequiredActionProviderRepresentation.
        :param name: The name of this RequiredActionProviderRepresentation.
        :param priority: The priority of this RequiredActionProviderRepresentation.
        :param provider_id: The provider_id of this RequiredActionProviderRepresentation.
        """
        self.openapi_types = {
            'alias': str,
            'config': Dict[str, object],
            'default_action': bool,
            'enabled': bool,
            'name': str,
            'priority': int,
            'provider_id': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'config': 'config',
            'default_action': 'defaultAction',
            'enabled': 'enabled',
            'name': 'name',
            'priority': 'priority',
            'provider_id': 'providerId'
        }

        self._alias = alias
        self._config = config
        self._default_action = default_action
        self._enabled = enabled
        self._name = name
        self._priority = priority
        self._provider_id = provider_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequiredActionProviderRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequiredActionProviderRepresentation of this RequiredActionProviderRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this RequiredActionProviderRepresentation.


        :return: The alias of this RequiredActionProviderRepresentation.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this RequiredActionProviderRepresentation.


        :param alias: The alias of this RequiredActionProviderRepresentation.
        :type alias: str
        """

        self._alias = alias

    @property
    def config(self):
        """Gets the config of this RequiredActionProviderRepresentation.


        :return: The config of this RequiredActionProviderRepresentation.
        :rtype: Dict[str, object]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this RequiredActionProviderRepresentation.


        :param config: The config of this RequiredActionProviderRepresentation.
        :type config: Dict[str, object]
        """

        self._config = config

    @property
    def default_action(self):
        """Gets the default_action of this RequiredActionProviderRepresentation.


        :return: The default_action of this RequiredActionProviderRepresentation.
        :rtype: bool
        """
        return self._default_action

    @default_action.setter
    def default_action(self, default_action):
        """Sets the default_action of this RequiredActionProviderRepresentation.


        :param default_action: The default_action of this RequiredActionProviderRepresentation.
        :type default_action: bool
        """

        self._default_action = default_action

    @property
    def enabled(self):
        """Gets the enabled of this RequiredActionProviderRepresentation.


        :return: The enabled of this RequiredActionProviderRepresentation.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RequiredActionProviderRepresentation.


        :param enabled: The enabled of this RequiredActionProviderRepresentation.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this RequiredActionProviderRepresentation.


        :return: The name of this RequiredActionProviderRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RequiredActionProviderRepresentation.


        :param name: The name of this RequiredActionProviderRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this RequiredActionProviderRepresentation.


        :return: The priority of this RequiredActionProviderRepresentation.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RequiredActionProviderRepresentation.


        :param priority: The priority of this RequiredActionProviderRepresentation.
        :type priority: int
        """

        self._priority = priority

    @property
    def provider_id(self):
        """Gets the provider_id of this RequiredActionProviderRepresentation.


        :return: The provider_id of this RequiredActionProviderRepresentation.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this RequiredActionProviderRepresentation.


        :param provider_id: The provider_id of this RequiredActionProviderRepresentation.
        :type provider_id: str
        """

        self._provider_id = provider_id
