# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_representation import PolicyRepresentation
from openapi_server.models.resource_representation import ResourceRepresentation
from openapi_server.models.scope_representation import ScopeRepresentation
from openapi_server import util


class ResourceServerRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_remote_resource_management: bool=None, client_id: str=None, decision_strategy: str=None, id: str=None, name: str=None, policies: List[PolicyRepresentation]=None, policy_enforcement_mode: str=None, resources: List[ResourceRepresentation]=None, scopes: List[ScopeRepresentation]=None):
        """ResourceServerRepresentation - a model defined in OpenAPI

        :param allow_remote_resource_management: The allow_remote_resource_management of this ResourceServerRepresentation.
        :param client_id: The client_id of this ResourceServerRepresentation.
        :param decision_strategy: The decision_strategy of this ResourceServerRepresentation.
        :param id: The id of this ResourceServerRepresentation.
        :param name: The name of this ResourceServerRepresentation.
        :param policies: The policies of this ResourceServerRepresentation.
        :param policy_enforcement_mode: The policy_enforcement_mode of this ResourceServerRepresentation.
        :param resources: The resources of this ResourceServerRepresentation.
        :param scopes: The scopes of this ResourceServerRepresentation.
        """
        self.openapi_types = {
            'allow_remote_resource_management': bool,
            'client_id': str,
            'decision_strategy': str,
            'id': str,
            'name': str,
            'policies': List[PolicyRepresentation],
            'policy_enforcement_mode': str,
            'resources': List[ResourceRepresentation],
            'scopes': List[ScopeRepresentation]
        }

        self.attribute_map = {
            'allow_remote_resource_management': 'allowRemoteResourceManagement',
            'client_id': 'clientId',
            'decision_strategy': 'decisionStrategy',
            'id': 'id',
            'name': 'name',
            'policies': 'policies',
            'policy_enforcement_mode': 'policyEnforcementMode',
            'resources': 'resources',
            'scopes': 'scopes'
        }

        self._allow_remote_resource_management = allow_remote_resource_management
        self._client_id = client_id
        self._decision_strategy = decision_strategy
        self._id = id
        self._name = name
        self._policies = policies
        self._policy_enforcement_mode = policy_enforcement_mode
        self._resources = resources
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceServerRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceServerRepresentation of this ResourceServerRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_remote_resource_management(self):
        """Gets the allow_remote_resource_management of this ResourceServerRepresentation.


        :return: The allow_remote_resource_management of this ResourceServerRepresentation.
        :rtype: bool
        """
        return self._allow_remote_resource_management

    @allow_remote_resource_management.setter
    def allow_remote_resource_management(self, allow_remote_resource_management):
        """Sets the allow_remote_resource_management of this ResourceServerRepresentation.


        :param allow_remote_resource_management: The allow_remote_resource_management of this ResourceServerRepresentation.
        :type allow_remote_resource_management: bool
        """

        self._allow_remote_resource_management = allow_remote_resource_management

    @property
    def client_id(self):
        """Gets the client_id of this ResourceServerRepresentation.


        :return: The client_id of this ResourceServerRepresentation.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ResourceServerRepresentation.


        :param client_id: The client_id of this ResourceServerRepresentation.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def decision_strategy(self):
        """Gets the decision_strategy of this ResourceServerRepresentation.


        :return: The decision_strategy of this ResourceServerRepresentation.
        :rtype: str
        """
        return self._decision_strategy

    @decision_strategy.setter
    def decision_strategy(self, decision_strategy):
        """Sets the decision_strategy of this ResourceServerRepresentation.


        :param decision_strategy: The decision_strategy of this ResourceServerRepresentation.
        :type decision_strategy: str
        """
        allowed_values = ["AFFIRMATIVE", "UNANIMOUS", "CONSENSUS"]  # noqa: E501
        if decision_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `decision_strategy` ({0}), must be one of {1}"
                .format(decision_strategy, allowed_values)
            )

        self._decision_strategy = decision_strategy

    @property
    def id(self):
        """Gets the id of this ResourceServerRepresentation.


        :return: The id of this ResourceServerRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceServerRepresentation.


        :param id: The id of this ResourceServerRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ResourceServerRepresentation.


        :return: The name of this ResourceServerRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceServerRepresentation.


        :param name: The name of this ResourceServerRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def policies(self):
        """Gets the policies of this ResourceServerRepresentation.


        :return: The policies of this ResourceServerRepresentation.
        :rtype: List[PolicyRepresentation]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this ResourceServerRepresentation.


        :param policies: The policies of this ResourceServerRepresentation.
        :type policies: List[PolicyRepresentation]
        """

        self._policies = policies

    @property
    def policy_enforcement_mode(self):
        """Gets the policy_enforcement_mode of this ResourceServerRepresentation.


        :return: The policy_enforcement_mode of this ResourceServerRepresentation.
        :rtype: str
        """
        return self._policy_enforcement_mode

    @policy_enforcement_mode.setter
    def policy_enforcement_mode(self, policy_enforcement_mode):
        """Sets the policy_enforcement_mode of this ResourceServerRepresentation.


        :param policy_enforcement_mode: The policy_enforcement_mode of this ResourceServerRepresentation.
        :type policy_enforcement_mode: str
        """
        allowed_values = ["ENFORCING", "PERMISSIVE", "DISABLED"]  # noqa: E501
        if policy_enforcement_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_enforcement_mode` ({0}), must be one of {1}"
                .format(policy_enforcement_mode, allowed_values)
            )

        self._policy_enforcement_mode = policy_enforcement_mode

    @property
    def resources(self):
        """Gets the resources of this ResourceServerRepresentation.


        :return: The resources of this ResourceServerRepresentation.
        :rtype: List[ResourceRepresentation]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ResourceServerRepresentation.


        :param resources: The resources of this ResourceServerRepresentation.
        :type resources: List[ResourceRepresentation]
        """

        self._resources = resources

    @property
    def scopes(self):
        """Gets the scopes of this ResourceServerRepresentation.


        :return: The scopes of this ResourceServerRepresentation.
        :rtype: List[ScopeRepresentation]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ResourceServerRepresentation.


        :param scopes: The scopes of this ResourceServerRepresentation.
        :type scopes: List[ScopeRepresentation]
        """

        self._scopes = scopes
