# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RealmEventsConfigRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_events_details_enabled: bool=None, admin_events_enabled: bool=None, enabled_event_types: List[str]=None, events_enabled: bool=None, events_expiration: int=None, events_listeners: List[str]=None):
        """RealmEventsConfigRepresentation - a model defined in OpenAPI

        :param admin_events_details_enabled: The admin_events_details_enabled of this RealmEventsConfigRepresentation.
        :param admin_events_enabled: The admin_events_enabled of this RealmEventsConfigRepresentation.
        :param enabled_event_types: The enabled_event_types of this RealmEventsConfigRepresentation.
        :param events_enabled: The events_enabled of this RealmEventsConfigRepresentation.
        :param events_expiration: The events_expiration of this RealmEventsConfigRepresentation.
        :param events_listeners: The events_listeners of this RealmEventsConfigRepresentation.
        """
        self.openapi_types = {
            'admin_events_details_enabled': bool,
            'admin_events_enabled': bool,
            'enabled_event_types': List[str],
            'events_enabled': bool,
            'events_expiration': int,
            'events_listeners': List[str]
        }

        self.attribute_map = {
            'admin_events_details_enabled': 'adminEventsDetailsEnabled',
            'admin_events_enabled': 'adminEventsEnabled',
            'enabled_event_types': 'enabledEventTypes',
            'events_enabled': 'eventsEnabled',
            'events_expiration': 'eventsExpiration',
            'events_listeners': 'eventsListeners'
        }

        self._admin_events_details_enabled = admin_events_details_enabled
        self._admin_events_enabled = admin_events_enabled
        self._enabled_event_types = enabled_event_types
        self._events_enabled = events_enabled
        self._events_expiration = events_expiration
        self._events_listeners = events_listeners

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealmEventsConfigRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RealmEventsConfigRepresentation of this RealmEventsConfigRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_events_details_enabled(self):
        """Gets the admin_events_details_enabled of this RealmEventsConfigRepresentation.


        :return: The admin_events_details_enabled of this RealmEventsConfigRepresentation.
        :rtype: bool
        """
        return self._admin_events_details_enabled

    @admin_events_details_enabled.setter
    def admin_events_details_enabled(self, admin_events_details_enabled):
        """Sets the admin_events_details_enabled of this RealmEventsConfigRepresentation.


        :param admin_events_details_enabled: The admin_events_details_enabled of this RealmEventsConfigRepresentation.
        :type admin_events_details_enabled: bool
        """

        self._admin_events_details_enabled = admin_events_details_enabled

    @property
    def admin_events_enabled(self):
        """Gets the admin_events_enabled of this RealmEventsConfigRepresentation.


        :return: The admin_events_enabled of this RealmEventsConfigRepresentation.
        :rtype: bool
        """
        return self._admin_events_enabled

    @admin_events_enabled.setter
    def admin_events_enabled(self, admin_events_enabled):
        """Sets the admin_events_enabled of this RealmEventsConfigRepresentation.


        :param admin_events_enabled: The admin_events_enabled of this RealmEventsConfigRepresentation.
        :type admin_events_enabled: bool
        """

        self._admin_events_enabled = admin_events_enabled

    @property
    def enabled_event_types(self):
        """Gets the enabled_event_types of this RealmEventsConfigRepresentation.


        :return: The enabled_event_types of this RealmEventsConfigRepresentation.
        :rtype: List[str]
        """
        return self._enabled_event_types

    @enabled_event_types.setter
    def enabled_event_types(self, enabled_event_types):
        """Sets the enabled_event_types of this RealmEventsConfigRepresentation.


        :param enabled_event_types: The enabled_event_types of this RealmEventsConfigRepresentation.
        :type enabled_event_types: List[str]
        """

        self._enabled_event_types = enabled_event_types

    @property
    def events_enabled(self):
        """Gets the events_enabled of this RealmEventsConfigRepresentation.


        :return: The events_enabled of this RealmEventsConfigRepresentation.
        :rtype: bool
        """
        return self._events_enabled

    @events_enabled.setter
    def events_enabled(self, events_enabled):
        """Sets the events_enabled of this RealmEventsConfigRepresentation.


        :param events_enabled: The events_enabled of this RealmEventsConfigRepresentation.
        :type events_enabled: bool
        """

        self._events_enabled = events_enabled

    @property
    def events_expiration(self):
        """Gets the events_expiration of this RealmEventsConfigRepresentation.


        :return: The events_expiration of this RealmEventsConfigRepresentation.
        :rtype: int
        """
        return self._events_expiration

    @events_expiration.setter
    def events_expiration(self, events_expiration):
        """Sets the events_expiration of this RealmEventsConfigRepresentation.


        :param events_expiration: The events_expiration of this RealmEventsConfigRepresentation.
        :type events_expiration: int
        """

        self._events_expiration = events_expiration

    @property
    def events_listeners(self):
        """Gets the events_listeners of this RealmEventsConfigRepresentation.


        :return: The events_listeners of this RealmEventsConfigRepresentation.
        :rtype: List[str]
        """
        return self._events_listeners

    @events_listeners.setter
    def events_listeners(self, events_listeners):
        """Sets the events_listeners of this RealmEventsConfigRepresentation.


        :param events_listeners: The events_listeners of this RealmEventsConfigRepresentation.
        :type events_listeners: List[str]
        """

        self._events_listeners = events_listeners
