# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SynchronizationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added: int=None, failed: int=None, ignored: bool=None, removed: int=None, status: str=None, updated: int=None):
        """SynchronizationResult - a model defined in OpenAPI

        :param added: The added of this SynchronizationResult.
        :param failed: The failed of this SynchronizationResult.
        :param ignored: The ignored of this SynchronizationResult.
        :param removed: The removed of this SynchronizationResult.
        :param status: The status of this SynchronizationResult.
        :param updated: The updated of this SynchronizationResult.
        """
        self.openapi_types = {
            'added': int,
            'failed': int,
            'ignored': bool,
            'removed': int,
            'status': str,
            'updated': int
        }

        self.attribute_map = {
            'added': 'added',
            'failed': 'failed',
            'ignored': 'ignored',
            'removed': 'removed',
            'status': 'status',
            'updated': 'updated'
        }

        self._added = added
        self._failed = failed
        self._ignored = ignored
        self._removed = removed
        self._status = status
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SynchronizationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SynchronizationResult of this SynchronizationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added(self):
        """Gets the added of this SynchronizationResult.


        :return: The added of this SynchronizationResult.
        :rtype: int
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this SynchronizationResult.


        :param added: The added of this SynchronizationResult.
        :type added: int
        """

        self._added = added

    @property
    def failed(self):
        """Gets the failed of this SynchronizationResult.


        :return: The failed of this SynchronizationResult.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this SynchronizationResult.


        :param failed: The failed of this SynchronizationResult.
        :type failed: int
        """

        self._failed = failed

    @property
    def ignored(self):
        """Gets the ignored of this SynchronizationResult.


        :return: The ignored of this SynchronizationResult.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this SynchronizationResult.


        :param ignored: The ignored of this SynchronizationResult.
        :type ignored: bool
        """

        self._ignored = ignored

    @property
    def removed(self):
        """Gets the removed of this SynchronizationResult.


        :return: The removed of this SynchronizationResult.
        :rtype: int
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this SynchronizationResult.


        :param removed: The removed of this SynchronizationResult.
        :type removed: int
        """

        self._removed = removed

    @property
    def status(self):
        """Gets the status of this SynchronizationResult.


        :return: The status of this SynchronizationResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SynchronizationResult.


        :param status: The status of this SynchronizationResult.
        :type status: str
        """

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this SynchronizationResult.


        :return: The updated of this SynchronizationResult.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SynchronizationResult.


        :param updated: The updated of this SynchronizationResult.
        :type updated: int
        """

        self._updated = updated
