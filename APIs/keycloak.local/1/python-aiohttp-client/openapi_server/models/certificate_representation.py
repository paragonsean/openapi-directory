# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, kid: str=None, private_key: str=None, public_key: str=None):
        """CertificateRepresentation - a model defined in OpenAPI

        :param certificate: The certificate of this CertificateRepresentation.
        :param kid: The kid of this CertificateRepresentation.
        :param private_key: The private_key of this CertificateRepresentation.
        :param public_key: The public_key of this CertificateRepresentation.
        """
        self.openapi_types = {
            'certificate': str,
            'kid': str,
            'private_key': str,
            'public_key': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'kid': 'kid',
            'private_key': 'privateKey',
            'public_key': 'publicKey'
        }

        self._certificate = certificate
        self._kid = kid
        self._private_key = private_key
        self._public_key = public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateRepresentation of this CertificateRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this CertificateRepresentation.


        :return: The certificate of this CertificateRepresentation.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CertificateRepresentation.


        :param certificate: The certificate of this CertificateRepresentation.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def kid(self):
        """Gets the kid of this CertificateRepresentation.


        :return: The kid of this CertificateRepresentation.
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this CertificateRepresentation.


        :param kid: The kid of this CertificateRepresentation.
        :type kid: str
        """

        self._kid = kid

    @property
    def private_key(self):
        """Gets the private_key of this CertificateRepresentation.


        :return: The private_key of this CertificateRepresentation.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this CertificateRepresentation.


        :param private_key: The private_key of this CertificateRepresentation.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this CertificateRepresentation.


        :return: The public_key of this CertificateRepresentation.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this CertificateRepresentation.


        :param public_key: The public_key of this CertificateRepresentation.
        :type public_key: str
        """

        self._public_key = public_key
