# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: Dict[str, object]=None, attributes: Dict[str, object]=None, client_roles: Dict[str, object]=None, id: str=None, name: str=None, path: str=None, realm_roles: List[str]=None, sub_groups: List[GroupRepresentation]=None):
        """GroupRepresentation - a model defined in OpenAPI

        :param access: The access of this GroupRepresentation.
        :param attributes: The attributes of this GroupRepresentation.
        :param client_roles: The client_roles of this GroupRepresentation.
        :param id: The id of this GroupRepresentation.
        :param name: The name of this GroupRepresentation.
        :param path: The path of this GroupRepresentation.
        :param realm_roles: The realm_roles of this GroupRepresentation.
        :param sub_groups: The sub_groups of this GroupRepresentation.
        """
        self.openapi_types = {
            'access': Dict[str, object],
            'attributes': Dict[str, object],
            'client_roles': Dict[str, object],
            'id': str,
            'name': str,
            'path': str,
            'realm_roles': List[str],
            'sub_groups': List[GroupRepresentation]
        }

        self.attribute_map = {
            'access': 'access',
            'attributes': 'attributes',
            'client_roles': 'clientRoles',
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'realm_roles': 'realmRoles',
            'sub_groups': 'subGroups'
        }

        self._access = access
        self._attributes = attributes
        self._client_roles = client_roles
        self._id = id
        self._name = name
        self._path = path
        self._realm_roles = realm_roles
        self._sub_groups = sub_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupRepresentation of this GroupRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this GroupRepresentation.


        :return: The access of this GroupRepresentation.
        :rtype: Dict[str, object]
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this GroupRepresentation.


        :param access: The access of this GroupRepresentation.
        :type access: Dict[str, object]
        """

        self._access = access

    @property
    def attributes(self):
        """Gets the attributes of this GroupRepresentation.


        :return: The attributes of this GroupRepresentation.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GroupRepresentation.


        :param attributes: The attributes of this GroupRepresentation.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def client_roles(self):
        """Gets the client_roles of this GroupRepresentation.


        :return: The client_roles of this GroupRepresentation.
        :rtype: Dict[str, object]
        """
        return self._client_roles

    @client_roles.setter
    def client_roles(self, client_roles):
        """Sets the client_roles of this GroupRepresentation.


        :param client_roles: The client_roles of this GroupRepresentation.
        :type client_roles: Dict[str, object]
        """

        self._client_roles = client_roles

    @property
    def id(self):
        """Gets the id of this GroupRepresentation.


        :return: The id of this GroupRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupRepresentation.


        :param id: The id of this GroupRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GroupRepresentation.


        :return: The name of this GroupRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupRepresentation.


        :param name: The name of this GroupRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this GroupRepresentation.


        :return: The path of this GroupRepresentation.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GroupRepresentation.


        :param path: The path of this GroupRepresentation.
        :type path: str
        """

        self._path = path

    @property
    def realm_roles(self):
        """Gets the realm_roles of this GroupRepresentation.


        :return: The realm_roles of this GroupRepresentation.
        :rtype: List[str]
        """
        return self._realm_roles

    @realm_roles.setter
    def realm_roles(self, realm_roles):
        """Sets the realm_roles of this GroupRepresentation.


        :param realm_roles: The realm_roles of this GroupRepresentation.
        :type realm_roles: List[str]
        """

        self._realm_roles = realm_roles

    @property
    def sub_groups(self):
        """Gets the sub_groups of this GroupRepresentation.


        :return: The sub_groups of this GroupRepresentation.
        :rtype: List[GroupRepresentation]
        """
        return self._sub_groups

    @sub_groups.setter
    def sub_groups(self, sub_groups):
        """Sets the sub_groups of this GroupRepresentation.


        :param sub_groups: The sub_groups of this GroupRepresentation.
        :type sub_groups: List[GroupRepresentation]
        """

        self._sub_groups = sub_groups
