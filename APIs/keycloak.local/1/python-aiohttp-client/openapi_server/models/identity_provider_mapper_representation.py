# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentityProviderMapperRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: Dict[str, object]=None, id: str=None, identity_provider_alias: str=None, identity_provider_mapper: str=None, name: str=None):
        """IdentityProviderMapperRepresentation - a model defined in OpenAPI

        :param config: The config of this IdentityProviderMapperRepresentation.
        :param id: The id of this IdentityProviderMapperRepresentation.
        :param identity_provider_alias: The identity_provider_alias of this IdentityProviderMapperRepresentation.
        :param identity_provider_mapper: The identity_provider_mapper of this IdentityProviderMapperRepresentation.
        :param name: The name of this IdentityProviderMapperRepresentation.
        """
        self.openapi_types = {
            'config': Dict[str, object],
            'id': str,
            'identity_provider_alias': str,
            'identity_provider_mapper': str,
            'name': str
        }

        self.attribute_map = {
            'config': 'config',
            'id': 'id',
            'identity_provider_alias': 'identityProviderAlias',
            'identity_provider_mapper': 'identityProviderMapper',
            'name': 'name'
        }

        self._config = config
        self._id = id
        self._identity_provider_alias = identity_provider_alias
        self._identity_provider_mapper = identity_provider_mapper
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityProviderMapperRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityProviderMapperRepresentation of this IdentityProviderMapperRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this IdentityProviderMapperRepresentation.


        :return: The config of this IdentityProviderMapperRepresentation.
        :rtype: Dict[str, object]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this IdentityProviderMapperRepresentation.


        :param config: The config of this IdentityProviderMapperRepresentation.
        :type config: Dict[str, object]
        """

        self._config = config

    @property
    def id(self):
        """Gets the id of this IdentityProviderMapperRepresentation.


        :return: The id of this IdentityProviderMapperRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IdentityProviderMapperRepresentation.


        :param id: The id of this IdentityProviderMapperRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def identity_provider_alias(self):
        """Gets the identity_provider_alias of this IdentityProviderMapperRepresentation.


        :return: The identity_provider_alias of this IdentityProviderMapperRepresentation.
        :rtype: str
        """
        return self._identity_provider_alias

    @identity_provider_alias.setter
    def identity_provider_alias(self, identity_provider_alias):
        """Sets the identity_provider_alias of this IdentityProviderMapperRepresentation.


        :param identity_provider_alias: The identity_provider_alias of this IdentityProviderMapperRepresentation.
        :type identity_provider_alias: str
        """

        self._identity_provider_alias = identity_provider_alias

    @property
    def identity_provider_mapper(self):
        """Gets the identity_provider_mapper of this IdentityProviderMapperRepresentation.


        :return: The identity_provider_mapper of this IdentityProviderMapperRepresentation.
        :rtype: str
        """
        return self._identity_provider_mapper

    @identity_provider_mapper.setter
    def identity_provider_mapper(self, identity_provider_mapper):
        """Sets the identity_provider_mapper of this IdentityProviderMapperRepresentation.


        :param identity_provider_mapper: The identity_provider_mapper of this IdentityProviderMapperRepresentation.
        :type identity_provider_mapper: str
        """

        self._identity_provider_mapper = identity_provider_mapper

    @property
    def name(self):
        """Gets the name of this IdentityProviderMapperRepresentation.


        :return: The name of this IdentityProviderMapperRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IdentityProviderMapperRepresentation.


        :param name: The name of this IdentityProviderMapperRepresentation.
        :type name: str
        """

        self._name = name
