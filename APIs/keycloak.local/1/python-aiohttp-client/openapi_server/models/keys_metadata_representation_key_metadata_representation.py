# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeysMetadataRepresentationKeyMetadataRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, certificate: str=None, kid: str=None, provider_id: str=None, provider_priority: int=None, public_key: str=None, status: str=None, type: str=None):
        """KeysMetadataRepresentationKeyMetadataRepresentation - a model defined in OpenAPI

        :param algorithm: The algorithm of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :param certificate: The certificate of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :param kid: The kid of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :param provider_id: The provider_id of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :param provider_priority: The provider_priority of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :param public_key: The public_key of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :param status: The status of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :param type: The type of this KeysMetadataRepresentationKeyMetadataRepresentation.
        """
        self.openapi_types = {
            'algorithm': str,
            'certificate': str,
            'kid': str,
            'provider_id': str,
            'provider_priority': int,
            'public_key': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'certificate': 'certificate',
            'kid': 'kid',
            'provider_id': 'providerId',
            'provider_priority': 'providerPriority',
            'public_key': 'publicKey',
            'status': 'status',
            'type': 'type'
        }

        self._algorithm = algorithm
        self._certificate = certificate
        self._kid = kid
        self._provider_id = provider_id
        self._provider_priority = provider_priority
        self._public_key = public_key
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeysMetadataRepresentationKeyMetadataRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeysMetadataRepresentation-KeyMetadataRepresentation of this KeysMetadataRepresentationKeyMetadataRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :return: The algorithm of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :param algorithm: The algorithm of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :type algorithm: str
        """

        self._algorithm = algorithm

    @property
    def certificate(self):
        """Gets the certificate of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :return: The certificate of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :param certificate: The certificate of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def kid(self):
        """Gets the kid of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :return: The kid of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :param kid: The kid of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :type kid: str
        """

        self._kid = kid

    @property
    def provider_id(self):
        """Gets the provider_id of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :return: The provider_id of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :param provider_id: The provider_id of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :type provider_id: str
        """

        self._provider_id = provider_id

    @property
    def provider_priority(self):
        """Gets the provider_priority of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :return: The provider_priority of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :rtype: int
        """
        return self._provider_priority

    @provider_priority.setter
    def provider_priority(self, provider_priority):
        """Sets the provider_priority of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :param provider_priority: The provider_priority of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :type provider_priority: int
        """

        self._provider_priority = provider_priority

    @property
    def public_key(self):
        """Gets the public_key of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :return: The public_key of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :param public_key: The public_key of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def status(self):
        """Gets the status of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :return: The status of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :param status: The status of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :return: The type of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KeysMetadataRepresentationKeyMetadataRepresentation.


        :param type: The type of this KeysMetadataRepresentationKeyMetadataRepresentation.
        :type type: str
        """

        self._type = type
