# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigPropertyRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_value: object=None, help_text: str=None, label: str=None, name: str=None, options: List[str]=None, secret: bool=None, type: str=None):
        """ConfigPropertyRepresentation - a model defined in OpenAPI

        :param default_value: The default_value of this ConfigPropertyRepresentation.
        :param help_text: The help_text of this ConfigPropertyRepresentation.
        :param label: The label of this ConfigPropertyRepresentation.
        :param name: The name of this ConfigPropertyRepresentation.
        :param options: The options of this ConfigPropertyRepresentation.
        :param secret: The secret of this ConfigPropertyRepresentation.
        :param type: The type of this ConfigPropertyRepresentation.
        """
        self.openapi_types = {
            'default_value': object,
            'help_text': str,
            'label': str,
            'name': str,
            'options': List[str],
            'secret': bool,
            'type': str
        }

        self.attribute_map = {
            'default_value': 'defaultValue',
            'help_text': 'helpText',
            'label': 'label',
            'name': 'name',
            'options': 'options',
            'secret': 'secret',
            'type': 'type'
        }

        self._default_value = default_value
        self._help_text = help_text
        self._label = label
        self._name = name
        self._options = options
        self._secret = secret
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigPropertyRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigPropertyRepresentation of this ConfigPropertyRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_value(self):
        """Gets the default_value of this ConfigPropertyRepresentation.


        :return: The default_value of this ConfigPropertyRepresentation.
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ConfigPropertyRepresentation.


        :param default_value: The default_value of this ConfigPropertyRepresentation.
        :type default_value: object
        """

        self._default_value = default_value

    @property
    def help_text(self):
        """Gets the help_text of this ConfigPropertyRepresentation.


        :return: The help_text of this ConfigPropertyRepresentation.
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this ConfigPropertyRepresentation.


        :param help_text: The help_text of this ConfigPropertyRepresentation.
        :type help_text: str
        """

        self._help_text = help_text

    @property
    def label(self):
        """Gets the label of this ConfigPropertyRepresentation.


        :return: The label of this ConfigPropertyRepresentation.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ConfigPropertyRepresentation.


        :param label: The label of this ConfigPropertyRepresentation.
        :type label: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this ConfigPropertyRepresentation.


        :return: The name of this ConfigPropertyRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigPropertyRepresentation.


        :param name: The name of this ConfigPropertyRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this ConfigPropertyRepresentation.


        :return: The options of this ConfigPropertyRepresentation.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ConfigPropertyRepresentation.


        :param options: The options of this ConfigPropertyRepresentation.
        :type options: List[str]
        """

        self._options = options

    @property
    def secret(self):
        """Gets the secret of this ConfigPropertyRepresentation.


        :return: The secret of this ConfigPropertyRepresentation.
        :rtype: bool
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ConfigPropertyRepresentation.


        :param secret: The secret of this ConfigPropertyRepresentation.
        :type secret: bool
        """

        self._secret = secret

    @property
    def type(self):
        """Gets the type of this ConfigPropertyRepresentation.


        :return: The type of this ConfigPropertyRepresentation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigPropertyRepresentation.


        :param type: The type of this ConfigPropertyRepresentation.
        :type type: str
        """

        self._type = type
