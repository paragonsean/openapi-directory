# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MultivaluedHashMap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, empty: bool=None, load_factor: float=None, threshold: int=None):
        """MultivaluedHashMap - a model defined in OpenAPI

        :param empty: The empty of this MultivaluedHashMap.
        :param load_factor: The load_factor of this MultivaluedHashMap.
        :param threshold: The threshold of this MultivaluedHashMap.
        """
        self.openapi_types = {
            'empty': bool,
            'load_factor': float,
            'threshold': int
        }

        self.attribute_map = {
            'empty': 'empty',
            'load_factor': 'loadFactor',
            'threshold': 'threshold'
        }

        self._empty = empty
        self._load_factor = load_factor
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultivaluedHashMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultivaluedHashMap of this MultivaluedHashMap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def empty(self):
        """Gets the empty of this MultivaluedHashMap.


        :return: The empty of this MultivaluedHashMap.
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this MultivaluedHashMap.


        :param empty: The empty of this MultivaluedHashMap.
        :type empty: bool
        """

        self._empty = empty

    @property
    def load_factor(self):
        """Gets the load_factor of this MultivaluedHashMap.


        :return: The load_factor of this MultivaluedHashMap.
        :rtype: float
        """
        return self._load_factor

    @load_factor.setter
    def load_factor(self, load_factor):
        """Sets the load_factor of this MultivaluedHashMap.


        :param load_factor: The load_factor of this MultivaluedHashMap.
        :type load_factor: float
        """

        self._load_factor = load_factor

    @property
    def threshold(self):
        """Gets the threshold of this MultivaluedHashMap.


        :return: The threshold of this MultivaluedHashMap.
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this MultivaluedHashMap.


        :param threshold: The threshold of this MultivaluedHashMap.
        :type threshold: int
        """

        self._threshold = threshold
