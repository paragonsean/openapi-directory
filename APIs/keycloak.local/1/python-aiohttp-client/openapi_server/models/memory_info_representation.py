# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MemoryInfoRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, free: int=None, free_formated: str=None, free_percentage: int=None, total: int=None, total_formated: str=None, used: int=None, used_formated: str=None):
        """MemoryInfoRepresentation - a model defined in OpenAPI

        :param free: The free of this MemoryInfoRepresentation.
        :param free_formated: The free_formated of this MemoryInfoRepresentation.
        :param free_percentage: The free_percentage of this MemoryInfoRepresentation.
        :param total: The total of this MemoryInfoRepresentation.
        :param total_formated: The total_formated of this MemoryInfoRepresentation.
        :param used: The used of this MemoryInfoRepresentation.
        :param used_formated: The used_formated of this MemoryInfoRepresentation.
        """
        self.openapi_types = {
            'free': int,
            'free_formated': str,
            'free_percentage': int,
            'total': int,
            'total_formated': str,
            'used': int,
            'used_formated': str
        }

        self.attribute_map = {
            'free': 'free',
            'free_formated': 'freeFormated',
            'free_percentage': 'freePercentage',
            'total': 'total',
            'total_formated': 'totalFormated',
            'used': 'used',
            'used_formated': 'usedFormated'
        }

        self._free = free
        self._free_formated = free_formated
        self._free_percentage = free_percentage
        self._total = total
        self._total_formated = total_formated
        self._used = used
        self._used_formated = used_formated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemoryInfoRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemoryInfoRepresentation of this MemoryInfoRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def free(self):
        """Gets the free of this MemoryInfoRepresentation.


        :return: The free of this MemoryInfoRepresentation.
        :rtype: int
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this MemoryInfoRepresentation.


        :param free: The free of this MemoryInfoRepresentation.
        :type free: int
        """

        self._free = free

    @property
    def free_formated(self):
        """Gets the free_formated of this MemoryInfoRepresentation.


        :return: The free_formated of this MemoryInfoRepresentation.
        :rtype: str
        """
        return self._free_formated

    @free_formated.setter
    def free_formated(self, free_formated):
        """Sets the free_formated of this MemoryInfoRepresentation.


        :param free_formated: The free_formated of this MemoryInfoRepresentation.
        :type free_formated: str
        """

        self._free_formated = free_formated

    @property
    def free_percentage(self):
        """Gets the free_percentage of this MemoryInfoRepresentation.


        :return: The free_percentage of this MemoryInfoRepresentation.
        :rtype: int
        """
        return self._free_percentage

    @free_percentage.setter
    def free_percentage(self, free_percentage):
        """Sets the free_percentage of this MemoryInfoRepresentation.


        :param free_percentage: The free_percentage of this MemoryInfoRepresentation.
        :type free_percentage: int
        """

        self._free_percentage = free_percentage

    @property
    def total(self):
        """Gets the total of this MemoryInfoRepresentation.


        :return: The total of this MemoryInfoRepresentation.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this MemoryInfoRepresentation.


        :param total: The total of this MemoryInfoRepresentation.
        :type total: int
        """

        self._total = total

    @property
    def total_formated(self):
        """Gets the total_formated of this MemoryInfoRepresentation.


        :return: The total_formated of this MemoryInfoRepresentation.
        :rtype: str
        """
        return self._total_formated

    @total_formated.setter
    def total_formated(self, total_formated):
        """Sets the total_formated of this MemoryInfoRepresentation.


        :param total_formated: The total_formated of this MemoryInfoRepresentation.
        :type total_formated: str
        """

        self._total_formated = total_formated

    @property
    def used(self):
        """Gets the used of this MemoryInfoRepresentation.


        :return: The used of this MemoryInfoRepresentation.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this MemoryInfoRepresentation.


        :param used: The used of this MemoryInfoRepresentation.
        :type used: int
        """

        self._used = used

    @property
    def used_formated(self):
        """Gets the used_formated of this MemoryInfoRepresentation.


        :return: The used_formated of this MemoryInfoRepresentation.
        :rtype: str
        """
        return self._used_formated

    @used_formated.setter
    def used_formated(self, used_formated):
        """Sets the used_formated of this MemoryInfoRepresentation.


        :param used_formated: The used_formated of this MemoryInfoRepresentation.
        :type used_formated: str
        """

        self._used_formated = used_formated
