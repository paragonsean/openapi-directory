# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileInfoRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled_features: List[str]=None, experimental_features: List[str]=None, name: str=None, preview_features: List[str]=None):
        """ProfileInfoRepresentation - a model defined in OpenAPI

        :param disabled_features: The disabled_features of this ProfileInfoRepresentation.
        :param experimental_features: The experimental_features of this ProfileInfoRepresentation.
        :param name: The name of this ProfileInfoRepresentation.
        :param preview_features: The preview_features of this ProfileInfoRepresentation.
        """
        self.openapi_types = {
            'disabled_features': List[str],
            'experimental_features': List[str],
            'name': str,
            'preview_features': List[str]
        }

        self.attribute_map = {
            'disabled_features': 'disabledFeatures',
            'experimental_features': 'experimentalFeatures',
            'name': 'name',
            'preview_features': 'previewFeatures'
        }

        self._disabled_features = disabled_features
        self._experimental_features = experimental_features
        self._name = name
        self._preview_features = preview_features

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileInfoRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileInfoRepresentation of this ProfileInfoRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled_features(self):
        """Gets the disabled_features of this ProfileInfoRepresentation.


        :return: The disabled_features of this ProfileInfoRepresentation.
        :rtype: List[str]
        """
        return self._disabled_features

    @disabled_features.setter
    def disabled_features(self, disabled_features):
        """Sets the disabled_features of this ProfileInfoRepresentation.


        :param disabled_features: The disabled_features of this ProfileInfoRepresentation.
        :type disabled_features: List[str]
        """

        self._disabled_features = disabled_features

    @property
    def experimental_features(self):
        """Gets the experimental_features of this ProfileInfoRepresentation.


        :return: The experimental_features of this ProfileInfoRepresentation.
        :rtype: List[str]
        """
        return self._experimental_features

    @experimental_features.setter
    def experimental_features(self, experimental_features):
        """Sets the experimental_features of this ProfileInfoRepresentation.


        :param experimental_features: The experimental_features of this ProfileInfoRepresentation.
        :type experimental_features: List[str]
        """

        self._experimental_features = experimental_features

    @property
    def name(self):
        """Gets the name of this ProfileInfoRepresentation.


        :return: The name of this ProfileInfoRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProfileInfoRepresentation.


        :param name: The name of this ProfileInfoRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def preview_features(self):
        """Gets the preview_features of this ProfileInfoRepresentation.


        :return: The preview_features of this ProfileInfoRepresentation.
        :rtype: List[str]
        """
        return self._preview_features

    @preview_features.setter
    def preview_features(self, preview_features):
        """Sets the preview_features of this ProfileInfoRepresentation.


        :param preview_features: The preview_features of this ProfileInfoRepresentation.
        :type preview_features: List[str]
        """

        self._preview_features = preview_features
