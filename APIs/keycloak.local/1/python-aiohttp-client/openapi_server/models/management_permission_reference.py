# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagementPermissionReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, resource: str=None, scope_permissions: Dict[str, object]=None):
        """ManagementPermissionReference - a model defined in OpenAPI

        :param enabled: The enabled of this ManagementPermissionReference.
        :param resource: The resource of this ManagementPermissionReference.
        :param scope_permissions: The scope_permissions of this ManagementPermissionReference.
        """
        self.openapi_types = {
            'enabled': bool,
            'resource': str,
            'scope_permissions': Dict[str, object]
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'resource': 'resource',
            'scope_permissions': 'scopePermissions'
        }

        self._enabled = enabled
        self._resource = resource
        self._scope_permissions = scope_permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagementPermissionReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagementPermissionReference of this ManagementPermissionReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ManagementPermissionReference.


        :return: The enabled of this ManagementPermissionReference.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ManagementPermissionReference.


        :param enabled: The enabled of this ManagementPermissionReference.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def resource(self):
        """Gets the resource of this ManagementPermissionReference.


        :return: The resource of this ManagementPermissionReference.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ManagementPermissionReference.


        :param resource: The resource of this ManagementPermissionReference.
        :type resource: str
        """

        self._resource = resource

    @property
    def scope_permissions(self):
        """Gets the scope_permissions of this ManagementPermissionReference.


        :return: The scope_permissions of this ManagementPermissionReference.
        :rtype: Dict[str, object]
        """
        return self._scope_permissions

    @scope_permissions.setter
    def scope_permissions(self, scope_permissions):
        """Sets the scope_permissions of this ManagementPermissionReference.


        :param scope_permissions: The scope_permissions of this ManagementPermissionReference.
        :type scope_permissions: Dict[str, object]
        """

        self._scope_permissions = scope_permissions
