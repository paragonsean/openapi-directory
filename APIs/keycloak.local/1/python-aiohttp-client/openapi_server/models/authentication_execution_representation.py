# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthenticationExecutionRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticator: str=None, authenticator_config: str=None, authenticator_flow: bool=None, autheticator_flow: bool=None, flow_id: str=None, id: str=None, parent_flow: str=None, priority: int=None, requirement: str=None):
        """AuthenticationExecutionRepresentation - a model defined in OpenAPI

        :param authenticator: The authenticator of this AuthenticationExecutionRepresentation.
        :param authenticator_config: The authenticator_config of this AuthenticationExecutionRepresentation.
        :param authenticator_flow: The authenticator_flow of this AuthenticationExecutionRepresentation.
        :param autheticator_flow: The autheticator_flow of this AuthenticationExecutionRepresentation.
        :param flow_id: The flow_id of this AuthenticationExecutionRepresentation.
        :param id: The id of this AuthenticationExecutionRepresentation.
        :param parent_flow: The parent_flow of this AuthenticationExecutionRepresentation.
        :param priority: The priority of this AuthenticationExecutionRepresentation.
        :param requirement: The requirement of this AuthenticationExecutionRepresentation.
        """
        self.openapi_types = {
            'authenticator': str,
            'authenticator_config': str,
            'authenticator_flow': bool,
            'autheticator_flow': bool,
            'flow_id': str,
            'id': str,
            'parent_flow': str,
            'priority': int,
            'requirement': str
        }

        self.attribute_map = {
            'authenticator': 'authenticator',
            'authenticator_config': 'authenticatorConfig',
            'authenticator_flow': 'authenticatorFlow',
            'autheticator_flow': 'autheticatorFlow',
            'flow_id': 'flowId',
            'id': 'id',
            'parent_flow': 'parentFlow',
            'priority': 'priority',
            'requirement': 'requirement'
        }

        self._authenticator = authenticator
        self._authenticator_config = authenticator_config
        self._authenticator_flow = authenticator_flow
        self._autheticator_flow = autheticator_flow
        self._flow_id = flow_id
        self._id = id
        self._parent_flow = parent_flow
        self._priority = priority
        self._requirement = requirement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationExecutionRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationExecutionRepresentation of this AuthenticationExecutionRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticator(self):
        """Gets the authenticator of this AuthenticationExecutionRepresentation.


        :return: The authenticator of this AuthenticationExecutionRepresentation.
        :rtype: str
        """
        return self._authenticator

    @authenticator.setter
    def authenticator(self, authenticator):
        """Sets the authenticator of this AuthenticationExecutionRepresentation.


        :param authenticator: The authenticator of this AuthenticationExecutionRepresentation.
        :type authenticator: str
        """

        self._authenticator = authenticator

    @property
    def authenticator_config(self):
        """Gets the authenticator_config of this AuthenticationExecutionRepresentation.


        :return: The authenticator_config of this AuthenticationExecutionRepresentation.
        :rtype: str
        """
        return self._authenticator_config

    @authenticator_config.setter
    def authenticator_config(self, authenticator_config):
        """Sets the authenticator_config of this AuthenticationExecutionRepresentation.


        :param authenticator_config: The authenticator_config of this AuthenticationExecutionRepresentation.
        :type authenticator_config: str
        """

        self._authenticator_config = authenticator_config

    @property
    def authenticator_flow(self):
        """Gets the authenticator_flow of this AuthenticationExecutionRepresentation.


        :return: The authenticator_flow of this AuthenticationExecutionRepresentation.
        :rtype: bool
        """
        return self._authenticator_flow

    @authenticator_flow.setter
    def authenticator_flow(self, authenticator_flow):
        """Sets the authenticator_flow of this AuthenticationExecutionRepresentation.


        :param authenticator_flow: The authenticator_flow of this AuthenticationExecutionRepresentation.
        :type authenticator_flow: bool
        """

        self._authenticator_flow = authenticator_flow

    @property
    def autheticator_flow(self):
        """Gets the autheticator_flow of this AuthenticationExecutionRepresentation.


        :return: The autheticator_flow of this AuthenticationExecutionRepresentation.
        :rtype: bool
        """
        return self._autheticator_flow

    @autheticator_flow.setter
    def autheticator_flow(self, autheticator_flow):
        """Sets the autheticator_flow of this AuthenticationExecutionRepresentation.


        :param autheticator_flow: The autheticator_flow of this AuthenticationExecutionRepresentation.
        :type autheticator_flow: bool
        """

        self._autheticator_flow = autheticator_flow

    @property
    def flow_id(self):
        """Gets the flow_id of this AuthenticationExecutionRepresentation.


        :return: The flow_id of this AuthenticationExecutionRepresentation.
        :rtype: str
        """
        return self._flow_id

    @flow_id.setter
    def flow_id(self, flow_id):
        """Sets the flow_id of this AuthenticationExecutionRepresentation.


        :param flow_id: The flow_id of this AuthenticationExecutionRepresentation.
        :type flow_id: str
        """

        self._flow_id = flow_id

    @property
    def id(self):
        """Gets the id of this AuthenticationExecutionRepresentation.


        :return: The id of this AuthenticationExecutionRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthenticationExecutionRepresentation.


        :param id: The id of this AuthenticationExecutionRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def parent_flow(self):
        """Gets the parent_flow of this AuthenticationExecutionRepresentation.


        :return: The parent_flow of this AuthenticationExecutionRepresentation.
        :rtype: str
        """
        return self._parent_flow

    @parent_flow.setter
    def parent_flow(self, parent_flow):
        """Sets the parent_flow of this AuthenticationExecutionRepresentation.


        :param parent_flow: The parent_flow of this AuthenticationExecutionRepresentation.
        :type parent_flow: str
        """

        self._parent_flow = parent_flow

    @property
    def priority(self):
        """Gets the priority of this AuthenticationExecutionRepresentation.


        :return: The priority of this AuthenticationExecutionRepresentation.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AuthenticationExecutionRepresentation.


        :param priority: The priority of this AuthenticationExecutionRepresentation.
        :type priority: int
        """

        self._priority = priority

    @property
    def requirement(self):
        """Gets the requirement of this AuthenticationExecutionRepresentation.


        :return: The requirement of this AuthenticationExecutionRepresentation.
        :rtype: str
        """
        return self._requirement

    @requirement.setter
    def requirement(self, requirement):
        """Sets the requirement of this AuthenticationExecutionRepresentation.


        :param requirement: The requirement of this AuthenticationExecutionRepresentation.
        :type requirement: str
        """

        self._requirement = requirement
