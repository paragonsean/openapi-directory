# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_representation import PolicyRepresentation
from openapi_server.models.resource_representation import ResourceRepresentation
from openapi_server import util


class ScopeRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, icon_uri: str=None, id: str=None, name: str=None, policies: List[PolicyRepresentation]=None, resources: List[ResourceRepresentation]=None):
        """ScopeRepresentation - a model defined in OpenAPI

        :param display_name: The display_name of this ScopeRepresentation.
        :param icon_uri: The icon_uri of this ScopeRepresentation.
        :param id: The id of this ScopeRepresentation.
        :param name: The name of this ScopeRepresentation.
        :param policies: The policies of this ScopeRepresentation.
        :param resources: The resources of this ScopeRepresentation.
        """
        self.openapi_types = {
            'display_name': str,
            'icon_uri': str,
            'id': str,
            'name': str,
            'policies': List[PolicyRepresentation],
            'resources': List[ResourceRepresentation]
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'icon_uri': 'iconUri',
            'id': 'id',
            'name': 'name',
            'policies': 'policies',
            'resources': 'resources'
        }

        self._display_name = display_name
        self._icon_uri = icon_uri
        self._id = id
        self._name = name
        self._policies = policies
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScopeRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScopeRepresentation of this ScopeRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ScopeRepresentation.


        :return: The display_name of this ScopeRepresentation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ScopeRepresentation.


        :param display_name: The display_name of this ScopeRepresentation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def icon_uri(self):
        """Gets the icon_uri of this ScopeRepresentation.


        :return: The icon_uri of this ScopeRepresentation.
        :rtype: str
        """
        return self._icon_uri

    @icon_uri.setter
    def icon_uri(self, icon_uri):
        """Sets the icon_uri of this ScopeRepresentation.


        :param icon_uri: The icon_uri of this ScopeRepresentation.
        :type icon_uri: str
        """

        self._icon_uri = icon_uri

    @property
    def id(self):
        """Gets the id of this ScopeRepresentation.


        :return: The id of this ScopeRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScopeRepresentation.


        :param id: The id of this ScopeRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ScopeRepresentation.


        :return: The name of this ScopeRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScopeRepresentation.


        :param name: The name of this ScopeRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def policies(self):
        """Gets the policies of this ScopeRepresentation.


        :return: The policies of this ScopeRepresentation.
        :rtype: List[PolicyRepresentation]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this ScopeRepresentation.


        :param policies: The policies of this ScopeRepresentation.
        :type policies: List[PolicyRepresentation]
        """

        self._policies = policies

    @property
    def resources(self):
        """Gets the resources of this ScopeRepresentation.


        :return: The resources of this ScopeRepresentation.
        :rtype: List[ResourceRepresentation]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ScopeRepresentation.


        :param resources: The resources of this ScopeRepresentation.
        :type resources: List[ResourceRepresentation]
        """

        self._resources = resources
