# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PasswordPolicyTypeRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_type: str=None, default_value: str=None, display_name: str=None, id: str=None, multiple_supported: bool=None):
        """PasswordPolicyTypeRepresentation - a model defined in OpenAPI

        :param config_type: The config_type of this PasswordPolicyTypeRepresentation.
        :param default_value: The default_value of this PasswordPolicyTypeRepresentation.
        :param display_name: The display_name of this PasswordPolicyTypeRepresentation.
        :param id: The id of this PasswordPolicyTypeRepresentation.
        :param multiple_supported: The multiple_supported of this PasswordPolicyTypeRepresentation.
        """
        self.openapi_types = {
            'config_type': str,
            'default_value': str,
            'display_name': str,
            'id': str,
            'multiple_supported': bool
        }

        self.attribute_map = {
            'config_type': 'configType',
            'default_value': 'defaultValue',
            'display_name': 'displayName',
            'id': 'id',
            'multiple_supported': 'multipleSupported'
        }

        self._config_type = config_type
        self._default_value = default_value
        self._display_name = display_name
        self._id = id
        self._multiple_supported = multiple_supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordPolicyTypeRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordPolicyTypeRepresentation of this PasswordPolicyTypeRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_type(self):
        """Gets the config_type of this PasswordPolicyTypeRepresentation.


        :return: The config_type of this PasswordPolicyTypeRepresentation.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this PasswordPolicyTypeRepresentation.


        :param config_type: The config_type of this PasswordPolicyTypeRepresentation.
        :type config_type: str
        """

        self._config_type = config_type

    @property
    def default_value(self):
        """Gets the default_value of this PasswordPolicyTypeRepresentation.


        :return: The default_value of this PasswordPolicyTypeRepresentation.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this PasswordPolicyTypeRepresentation.


        :param default_value: The default_value of this PasswordPolicyTypeRepresentation.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def display_name(self):
        """Gets the display_name of this PasswordPolicyTypeRepresentation.


        :return: The display_name of this PasswordPolicyTypeRepresentation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PasswordPolicyTypeRepresentation.


        :param display_name: The display_name of this PasswordPolicyTypeRepresentation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this PasswordPolicyTypeRepresentation.


        :return: The id of this PasswordPolicyTypeRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PasswordPolicyTypeRepresentation.


        :param id: The id of this PasswordPolicyTypeRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def multiple_supported(self):
        """Gets the multiple_supported of this PasswordPolicyTypeRepresentation.


        :return: The multiple_supported of this PasswordPolicyTypeRepresentation.
        :rtype: bool
        """
        return self._multiple_supported

    @multiple_supported.setter
    def multiple_supported(self, multiple_supported):
        """Sets the multiple_supported of this PasswordPolicyTypeRepresentation.


        :param multiple_supported: The multiple_supported of this PasswordPolicyTypeRepresentation.
        :type multiple_supported: bool
        """

        self._multiple_supported = multiple_supported
