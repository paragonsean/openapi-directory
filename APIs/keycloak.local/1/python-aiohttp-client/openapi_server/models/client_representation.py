# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protocol_mapper_representation import ProtocolMapperRepresentation
from openapi_server.models.resource_server_representation import ResourceServerRepresentation
from openapi_server import util


class ClientRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: Dict[str, object]=None, admin_url: str=None, always_display_in_console: bool=None, attributes: Dict[str, object]=None, authentication_flow_binding_overrides: Dict[str, object]=None, authorization_services_enabled: bool=None, authorization_settings: ResourceServerRepresentation=None, base_url: str=None, bearer_only: bool=None, client_authenticator_type: str=None, client_id: str=None, consent_required: bool=None, default_client_scopes: List[str]=None, default_roles: List[str]=None, description: str=None, direct_access_grants_enabled: bool=None, enabled: bool=None, frontchannel_logout: bool=None, full_scope_allowed: bool=None, id: str=None, implicit_flow_enabled: bool=None, name: str=None, node_re_registration_timeout: int=None, not_before: int=None, optional_client_scopes: List[str]=None, origin: str=None, protocol: str=None, protocol_mappers: List[ProtocolMapperRepresentation]=None, public_client: bool=None, redirect_uris: List[str]=None, registered_nodes: Dict[str, object]=None, registration_access_token: str=None, root_url: str=None, secret: str=None, service_accounts_enabled: bool=None, standard_flow_enabled: bool=None, surrogate_auth_required: bool=None, web_origins: List[str]=None):
        """ClientRepresentation - a model defined in OpenAPI

        :param access: The access of this ClientRepresentation.
        :param admin_url: The admin_url of this ClientRepresentation.
        :param always_display_in_console: The always_display_in_console of this ClientRepresentation.
        :param attributes: The attributes of this ClientRepresentation.
        :param authentication_flow_binding_overrides: The authentication_flow_binding_overrides of this ClientRepresentation.
        :param authorization_services_enabled: The authorization_services_enabled of this ClientRepresentation.
        :param authorization_settings: The authorization_settings of this ClientRepresentation.
        :param base_url: The base_url of this ClientRepresentation.
        :param bearer_only: The bearer_only of this ClientRepresentation.
        :param client_authenticator_type: The client_authenticator_type of this ClientRepresentation.
        :param client_id: The client_id of this ClientRepresentation.
        :param consent_required: The consent_required of this ClientRepresentation.
        :param default_client_scopes: The default_client_scopes of this ClientRepresentation.
        :param default_roles: The default_roles of this ClientRepresentation.
        :param description: The description of this ClientRepresentation.
        :param direct_access_grants_enabled: The direct_access_grants_enabled of this ClientRepresentation.
        :param enabled: The enabled of this ClientRepresentation.
        :param frontchannel_logout: The frontchannel_logout of this ClientRepresentation.
        :param full_scope_allowed: The full_scope_allowed of this ClientRepresentation.
        :param id: The id of this ClientRepresentation.
        :param implicit_flow_enabled: The implicit_flow_enabled of this ClientRepresentation.
        :param name: The name of this ClientRepresentation.
        :param node_re_registration_timeout: The node_re_registration_timeout of this ClientRepresentation.
        :param not_before: The not_before of this ClientRepresentation.
        :param optional_client_scopes: The optional_client_scopes of this ClientRepresentation.
        :param origin: The origin of this ClientRepresentation.
        :param protocol: The protocol of this ClientRepresentation.
        :param protocol_mappers: The protocol_mappers of this ClientRepresentation.
        :param public_client: The public_client of this ClientRepresentation.
        :param redirect_uris: The redirect_uris of this ClientRepresentation.
        :param registered_nodes: The registered_nodes of this ClientRepresentation.
        :param registration_access_token: The registration_access_token of this ClientRepresentation.
        :param root_url: The root_url of this ClientRepresentation.
        :param secret: The secret of this ClientRepresentation.
        :param service_accounts_enabled: The service_accounts_enabled of this ClientRepresentation.
        :param standard_flow_enabled: The standard_flow_enabled of this ClientRepresentation.
        :param surrogate_auth_required: The surrogate_auth_required of this ClientRepresentation.
        :param web_origins: The web_origins of this ClientRepresentation.
        """
        self.openapi_types = {
            'access': Dict[str, object],
            'admin_url': str,
            'always_display_in_console': bool,
            'attributes': Dict[str, object],
            'authentication_flow_binding_overrides': Dict[str, object],
            'authorization_services_enabled': bool,
            'authorization_settings': ResourceServerRepresentation,
            'base_url': str,
            'bearer_only': bool,
            'client_authenticator_type': str,
            'client_id': str,
            'consent_required': bool,
            'default_client_scopes': List[str],
            'default_roles': List[str],
            'description': str,
            'direct_access_grants_enabled': bool,
            'enabled': bool,
            'frontchannel_logout': bool,
            'full_scope_allowed': bool,
            'id': str,
            'implicit_flow_enabled': bool,
            'name': str,
            'node_re_registration_timeout': int,
            'not_before': int,
            'optional_client_scopes': List[str],
            'origin': str,
            'protocol': str,
            'protocol_mappers': List[ProtocolMapperRepresentation],
            'public_client': bool,
            'redirect_uris': List[str],
            'registered_nodes': Dict[str, object],
            'registration_access_token': str,
            'root_url': str,
            'secret': str,
            'service_accounts_enabled': bool,
            'standard_flow_enabled': bool,
            'surrogate_auth_required': bool,
            'web_origins': List[str]
        }

        self.attribute_map = {
            'access': 'access',
            'admin_url': 'adminUrl',
            'always_display_in_console': 'alwaysDisplayInConsole',
            'attributes': 'attributes',
            'authentication_flow_binding_overrides': 'authenticationFlowBindingOverrides',
            'authorization_services_enabled': 'authorizationServicesEnabled',
            'authorization_settings': 'authorizationSettings',
            'base_url': 'baseUrl',
            'bearer_only': 'bearerOnly',
            'client_authenticator_type': 'clientAuthenticatorType',
            'client_id': 'clientId',
            'consent_required': 'consentRequired',
            'default_client_scopes': 'defaultClientScopes',
            'default_roles': 'defaultRoles',
            'description': 'description',
            'direct_access_grants_enabled': 'directAccessGrantsEnabled',
            'enabled': 'enabled',
            'frontchannel_logout': 'frontchannelLogout',
            'full_scope_allowed': 'fullScopeAllowed',
            'id': 'id',
            'implicit_flow_enabled': 'implicitFlowEnabled',
            'name': 'name',
            'node_re_registration_timeout': 'nodeReRegistrationTimeout',
            'not_before': 'notBefore',
            'optional_client_scopes': 'optionalClientScopes',
            'origin': 'origin',
            'protocol': 'protocol',
            'protocol_mappers': 'protocolMappers',
            'public_client': 'publicClient',
            'redirect_uris': 'redirectUris',
            'registered_nodes': 'registeredNodes',
            'registration_access_token': 'registrationAccessToken',
            'root_url': 'rootUrl',
            'secret': 'secret',
            'service_accounts_enabled': 'serviceAccountsEnabled',
            'standard_flow_enabled': 'standardFlowEnabled',
            'surrogate_auth_required': 'surrogateAuthRequired',
            'web_origins': 'webOrigins'
        }

        self._access = access
        self._admin_url = admin_url
        self._always_display_in_console = always_display_in_console
        self._attributes = attributes
        self._authentication_flow_binding_overrides = authentication_flow_binding_overrides
        self._authorization_services_enabled = authorization_services_enabled
        self._authorization_settings = authorization_settings
        self._base_url = base_url
        self._bearer_only = bearer_only
        self._client_authenticator_type = client_authenticator_type
        self._client_id = client_id
        self._consent_required = consent_required
        self._default_client_scopes = default_client_scopes
        self._default_roles = default_roles
        self._description = description
        self._direct_access_grants_enabled = direct_access_grants_enabled
        self._enabled = enabled
        self._frontchannel_logout = frontchannel_logout
        self._full_scope_allowed = full_scope_allowed
        self._id = id
        self._implicit_flow_enabled = implicit_flow_enabled
        self._name = name
        self._node_re_registration_timeout = node_re_registration_timeout
        self._not_before = not_before
        self._optional_client_scopes = optional_client_scopes
        self._origin = origin
        self._protocol = protocol
        self._protocol_mappers = protocol_mappers
        self._public_client = public_client
        self._redirect_uris = redirect_uris
        self._registered_nodes = registered_nodes
        self._registration_access_token = registration_access_token
        self._root_url = root_url
        self._secret = secret
        self._service_accounts_enabled = service_accounts_enabled
        self._standard_flow_enabled = standard_flow_enabled
        self._surrogate_auth_required = surrogate_auth_required
        self._web_origins = web_origins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientRepresentation of this ClientRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this ClientRepresentation.


        :return: The access of this ClientRepresentation.
        :rtype: Dict[str, object]
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this ClientRepresentation.


        :param access: The access of this ClientRepresentation.
        :type access: Dict[str, object]
        """

        self._access = access

    @property
    def admin_url(self):
        """Gets the admin_url of this ClientRepresentation.


        :return: The admin_url of this ClientRepresentation.
        :rtype: str
        """
        return self._admin_url

    @admin_url.setter
    def admin_url(self, admin_url):
        """Sets the admin_url of this ClientRepresentation.


        :param admin_url: The admin_url of this ClientRepresentation.
        :type admin_url: str
        """

        self._admin_url = admin_url

    @property
    def always_display_in_console(self):
        """Gets the always_display_in_console of this ClientRepresentation.


        :return: The always_display_in_console of this ClientRepresentation.
        :rtype: bool
        """
        return self._always_display_in_console

    @always_display_in_console.setter
    def always_display_in_console(self, always_display_in_console):
        """Sets the always_display_in_console of this ClientRepresentation.


        :param always_display_in_console: The always_display_in_console of this ClientRepresentation.
        :type always_display_in_console: bool
        """

        self._always_display_in_console = always_display_in_console

    @property
    def attributes(self):
        """Gets the attributes of this ClientRepresentation.


        :return: The attributes of this ClientRepresentation.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ClientRepresentation.


        :param attributes: The attributes of this ClientRepresentation.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def authentication_flow_binding_overrides(self):
        """Gets the authentication_flow_binding_overrides of this ClientRepresentation.


        :return: The authentication_flow_binding_overrides of this ClientRepresentation.
        :rtype: Dict[str, object]
        """
        return self._authentication_flow_binding_overrides

    @authentication_flow_binding_overrides.setter
    def authentication_flow_binding_overrides(self, authentication_flow_binding_overrides):
        """Sets the authentication_flow_binding_overrides of this ClientRepresentation.


        :param authentication_flow_binding_overrides: The authentication_flow_binding_overrides of this ClientRepresentation.
        :type authentication_flow_binding_overrides: Dict[str, object]
        """

        self._authentication_flow_binding_overrides = authentication_flow_binding_overrides

    @property
    def authorization_services_enabled(self):
        """Gets the authorization_services_enabled of this ClientRepresentation.


        :return: The authorization_services_enabled of this ClientRepresentation.
        :rtype: bool
        """
        return self._authorization_services_enabled

    @authorization_services_enabled.setter
    def authorization_services_enabled(self, authorization_services_enabled):
        """Sets the authorization_services_enabled of this ClientRepresentation.


        :param authorization_services_enabled: The authorization_services_enabled of this ClientRepresentation.
        :type authorization_services_enabled: bool
        """

        self._authorization_services_enabled = authorization_services_enabled

    @property
    def authorization_settings(self):
        """Gets the authorization_settings of this ClientRepresentation.


        :return: The authorization_settings of this ClientRepresentation.
        :rtype: ResourceServerRepresentation
        """
        return self._authorization_settings

    @authorization_settings.setter
    def authorization_settings(self, authorization_settings):
        """Sets the authorization_settings of this ClientRepresentation.


        :param authorization_settings: The authorization_settings of this ClientRepresentation.
        :type authorization_settings: ResourceServerRepresentation
        """

        self._authorization_settings = authorization_settings

    @property
    def base_url(self):
        """Gets the base_url of this ClientRepresentation.


        :return: The base_url of this ClientRepresentation.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ClientRepresentation.


        :param base_url: The base_url of this ClientRepresentation.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def bearer_only(self):
        """Gets the bearer_only of this ClientRepresentation.


        :return: The bearer_only of this ClientRepresentation.
        :rtype: bool
        """
        return self._bearer_only

    @bearer_only.setter
    def bearer_only(self, bearer_only):
        """Sets the bearer_only of this ClientRepresentation.


        :param bearer_only: The bearer_only of this ClientRepresentation.
        :type bearer_only: bool
        """

        self._bearer_only = bearer_only

    @property
    def client_authenticator_type(self):
        """Gets the client_authenticator_type of this ClientRepresentation.


        :return: The client_authenticator_type of this ClientRepresentation.
        :rtype: str
        """
        return self._client_authenticator_type

    @client_authenticator_type.setter
    def client_authenticator_type(self, client_authenticator_type):
        """Sets the client_authenticator_type of this ClientRepresentation.


        :param client_authenticator_type: The client_authenticator_type of this ClientRepresentation.
        :type client_authenticator_type: str
        """

        self._client_authenticator_type = client_authenticator_type

    @property
    def client_id(self):
        """Gets the client_id of this ClientRepresentation.


        :return: The client_id of this ClientRepresentation.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ClientRepresentation.


        :param client_id: The client_id of this ClientRepresentation.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def consent_required(self):
        """Gets the consent_required of this ClientRepresentation.


        :return: The consent_required of this ClientRepresentation.
        :rtype: bool
        """
        return self._consent_required

    @consent_required.setter
    def consent_required(self, consent_required):
        """Sets the consent_required of this ClientRepresentation.


        :param consent_required: The consent_required of this ClientRepresentation.
        :type consent_required: bool
        """

        self._consent_required = consent_required

    @property
    def default_client_scopes(self):
        """Gets the default_client_scopes of this ClientRepresentation.


        :return: The default_client_scopes of this ClientRepresentation.
        :rtype: List[str]
        """
        return self._default_client_scopes

    @default_client_scopes.setter
    def default_client_scopes(self, default_client_scopes):
        """Sets the default_client_scopes of this ClientRepresentation.


        :param default_client_scopes: The default_client_scopes of this ClientRepresentation.
        :type default_client_scopes: List[str]
        """

        self._default_client_scopes = default_client_scopes

    @property
    def default_roles(self):
        """Gets the default_roles of this ClientRepresentation.


        :return: The default_roles of this ClientRepresentation.
        :rtype: List[str]
        """
        return self._default_roles

    @default_roles.setter
    def default_roles(self, default_roles):
        """Sets the default_roles of this ClientRepresentation.


        :param default_roles: The default_roles of this ClientRepresentation.
        :type default_roles: List[str]
        """

        self._default_roles = default_roles

    @property
    def description(self):
        """Gets the description of this ClientRepresentation.


        :return: The description of this ClientRepresentation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClientRepresentation.


        :param description: The description of this ClientRepresentation.
        :type description: str
        """

        self._description = description

    @property
    def direct_access_grants_enabled(self):
        """Gets the direct_access_grants_enabled of this ClientRepresentation.


        :return: The direct_access_grants_enabled of this ClientRepresentation.
        :rtype: bool
        """
        return self._direct_access_grants_enabled

    @direct_access_grants_enabled.setter
    def direct_access_grants_enabled(self, direct_access_grants_enabled):
        """Sets the direct_access_grants_enabled of this ClientRepresentation.


        :param direct_access_grants_enabled: The direct_access_grants_enabled of this ClientRepresentation.
        :type direct_access_grants_enabled: bool
        """

        self._direct_access_grants_enabled = direct_access_grants_enabled

    @property
    def enabled(self):
        """Gets the enabled of this ClientRepresentation.


        :return: The enabled of this ClientRepresentation.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ClientRepresentation.


        :param enabled: The enabled of this ClientRepresentation.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def frontchannel_logout(self):
        """Gets the frontchannel_logout of this ClientRepresentation.


        :return: The frontchannel_logout of this ClientRepresentation.
        :rtype: bool
        """
        return self._frontchannel_logout

    @frontchannel_logout.setter
    def frontchannel_logout(self, frontchannel_logout):
        """Sets the frontchannel_logout of this ClientRepresentation.


        :param frontchannel_logout: The frontchannel_logout of this ClientRepresentation.
        :type frontchannel_logout: bool
        """

        self._frontchannel_logout = frontchannel_logout

    @property
    def full_scope_allowed(self):
        """Gets the full_scope_allowed of this ClientRepresentation.


        :return: The full_scope_allowed of this ClientRepresentation.
        :rtype: bool
        """
        return self._full_scope_allowed

    @full_scope_allowed.setter
    def full_scope_allowed(self, full_scope_allowed):
        """Sets the full_scope_allowed of this ClientRepresentation.


        :param full_scope_allowed: The full_scope_allowed of this ClientRepresentation.
        :type full_scope_allowed: bool
        """

        self._full_scope_allowed = full_scope_allowed

    @property
    def id(self):
        """Gets the id of this ClientRepresentation.


        :return: The id of this ClientRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientRepresentation.


        :param id: The id of this ClientRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def implicit_flow_enabled(self):
        """Gets the implicit_flow_enabled of this ClientRepresentation.


        :return: The implicit_flow_enabled of this ClientRepresentation.
        :rtype: bool
        """
        return self._implicit_flow_enabled

    @implicit_flow_enabled.setter
    def implicit_flow_enabled(self, implicit_flow_enabled):
        """Sets the implicit_flow_enabled of this ClientRepresentation.


        :param implicit_flow_enabled: The implicit_flow_enabled of this ClientRepresentation.
        :type implicit_flow_enabled: bool
        """

        self._implicit_flow_enabled = implicit_flow_enabled

    @property
    def name(self):
        """Gets the name of this ClientRepresentation.


        :return: The name of this ClientRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientRepresentation.


        :param name: The name of this ClientRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def node_re_registration_timeout(self):
        """Gets the node_re_registration_timeout of this ClientRepresentation.


        :return: The node_re_registration_timeout of this ClientRepresentation.
        :rtype: int
        """
        return self._node_re_registration_timeout

    @node_re_registration_timeout.setter
    def node_re_registration_timeout(self, node_re_registration_timeout):
        """Sets the node_re_registration_timeout of this ClientRepresentation.


        :param node_re_registration_timeout: The node_re_registration_timeout of this ClientRepresentation.
        :type node_re_registration_timeout: int
        """

        self._node_re_registration_timeout = node_re_registration_timeout

    @property
    def not_before(self):
        """Gets the not_before of this ClientRepresentation.


        :return: The not_before of this ClientRepresentation.
        :rtype: int
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this ClientRepresentation.


        :param not_before: The not_before of this ClientRepresentation.
        :type not_before: int
        """

        self._not_before = not_before

    @property
    def optional_client_scopes(self):
        """Gets the optional_client_scopes of this ClientRepresentation.


        :return: The optional_client_scopes of this ClientRepresentation.
        :rtype: List[str]
        """
        return self._optional_client_scopes

    @optional_client_scopes.setter
    def optional_client_scopes(self, optional_client_scopes):
        """Sets the optional_client_scopes of this ClientRepresentation.


        :param optional_client_scopes: The optional_client_scopes of this ClientRepresentation.
        :type optional_client_scopes: List[str]
        """

        self._optional_client_scopes = optional_client_scopes

    @property
    def origin(self):
        """Gets the origin of this ClientRepresentation.


        :return: The origin of this ClientRepresentation.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ClientRepresentation.


        :param origin: The origin of this ClientRepresentation.
        :type origin: str
        """

        self._origin = origin

    @property
    def protocol(self):
        """Gets the protocol of this ClientRepresentation.


        :return: The protocol of this ClientRepresentation.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ClientRepresentation.


        :param protocol: The protocol of this ClientRepresentation.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def protocol_mappers(self):
        """Gets the protocol_mappers of this ClientRepresentation.


        :return: The protocol_mappers of this ClientRepresentation.
        :rtype: List[ProtocolMapperRepresentation]
        """
        return self._protocol_mappers

    @protocol_mappers.setter
    def protocol_mappers(self, protocol_mappers):
        """Sets the protocol_mappers of this ClientRepresentation.


        :param protocol_mappers: The protocol_mappers of this ClientRepresentation.
        :type protocol_mappers: List[ProtocolMapperRepresentation]
        """

        self._protocol_mappers = protocol_mappers

    @property
    def public_client(self):
        """Gets the public_client of this ClientRepresentation.


        :return: The public_client of this ClientRepresentation.
        :rtype: bool
        """
        return self._public_client

    @public_client.setter
    def public_client(self, public_client):
        """Sets the public_client of this ClientRepresentation.


        :param public_client: The public_client of this ClientRepresentation.
        :type public_client: bool
        """

        self._public_client = public_client

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this ClientRepresentation.


        :return: The redirect_uris of this ClientRepresentation.
        :rtype: List[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this ClientRepresentation.


        :param redirect_uris: The redirect_uris of this ClientRepresentation.
        :type redirect_uris: List[str]
        """

        self._redirect_uris = redirect_uris

    @property
    def registered_nodes(self):
        """Gets the registered_nodes of this ClientRepresentation.


        :return: The registered_nodes of this ClientRepresentation.
        :rtype: Dict[str, object]
        """
        return self._registered_nodes

    @registered_nodes.setter
    def registered_nodes(self, registered_nodes):
        """Sets the registered_nodes of this ClientRepresentation.


        :param registered_nodes: The registered_nodes of this ClientRepresentation.
        :type registered_nodes: Dict[str, object]
        """

        self._registered_nodes = registered_nodes

    @property
    def registration_access_token(self):
        """Gets the registration_access_token of this ClientRepresentation.


        :return: The registration_access_token of this ClientRepresentation.
        :rtype: str
        """
        return self._registration_access_token

    @registration_access_token.setter
    def registration_access_token(self, registration_access_token):
        """Sets the registration_access_token of this ClientRepresentation.


        :param registration_access_token: The registration_access_token of this ClientRepresentation.
        :type registration_access_token: str
        """

        self._registration_access_token = registration_access_token

    @property
    def root_url(self):
        """Gets the root_url of this ClientRepresentation.


        :return: The root_url of this ClientRepresentation.
        :rtype: str
        """
        return self._root_url

    @root_url.setter
    def root_url(self, root_url):
        """Sets the root_url of this ClientRepresentation.


        :param root_url: The root_url of this ClientRepresentation.
        :type root_url: str
        """

        self._root_url = root_url

    @property
    def secret(self):
        """Gets the secret of this ClientRepresentation.


        :return: The secret of this ClientRepresentation.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ClientRepresentation.


        :param secret: The secret of this ClientRepresentation.
        :type secret: str
        """

        self._secret = secret

    @property
    def service_accounts_enabled(self):
        """Gets the service_accounts_enabled of this ClientRepresentation.


        :return: The service_accounts_enabled of this ClientRepresentation.
        :rtype: bool
        """
        return self._service_accounts_enabled

    @service_accounts_enabled.setter
    def service_accounts_enabled(self, service_accounts_enabled):
        """Sets the service_accounts_enabled of this ClientRepresentation.


        :param service_accounts_enabled: The service_accounts_enabled of this ClientRepresentation.
        :type service_accounts_enabled: bool
        """

        self._service_accounts_enabled = service_accounts_enabled

    @property
    def standard_flow_enabled(self):
        """Gets the standard_flow_enabled of this ClientRepresentation.


        :return: The standard_flow_enabled of this ClientRepresentation.
        :rtype: bool
        """
        return self._standard_flow_enabled

    @standard_flow_enabled.setter
    def standard_flow_enabled(self, standard_flow_enabled):
        """Sets the standard_flow_enabled of this ClientRepresentation.


        :param standard_flow_enabled: The standard_flow_enabled of this ClientRepresentation.
        :type standard_flow_enabled: bool
        """

        self._standard_flow_enabled = standard_flow_enabled

    @property
    def surrogate_auth_required(self):
        """Gets the surrogate_auth_required of this ClientRepresentation.


        :return: The surrogate_auth_required of this ClientRepresentation.
        :rtype: bool
        """
        return self._surrogate_auth_required

    @surrogate_auth_required.setter
    def surrogate_auth_required(self, surrogate_auth_required):
        """Sets the surrogate_auth_required of this ClientRepresentation.


        :param surrogate_auth_required: The surrogate_auth_required of this ClientRepresentation.
        :type surrogate_auth_required: bool
        """

        self._surrogate_auth_required = surrogate_auth_required

    @property
    def web_origins(self):
        """Gets the web_origins of this ClientRepresentation.


        :return: The web_origins of this ClientRepresentation.
        :rtype: List[str]
        """
        return self._web_origins

    @web_origins.setter
    def web_origins(self, web_origins):
        """Sets the web_origins of this ClientRepresentation.


        :param web_origins: The web_origins of this ClientRepresentation.
        :type web_origins: List[str]
        """

        self._web_origins = web_origins
