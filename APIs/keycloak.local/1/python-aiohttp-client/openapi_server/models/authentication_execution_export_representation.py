# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthenticationExecutionExportRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticator: str=None, authenticator_config: str=None, authenticator_flow: bool=None, autheticator_flow: bool=None, flow_alias: str=None, priority: int=None, requirement: str=None, user_setup_allowed: bool=None):
        """AuthenticationExecutionExportRepresentation - a model defined in OpenAPI

        :param authenticator: The authenticator of this AuthenticationExecutionExportRepresentation.
        :param authenticator_config: The authenticator_config of this AuthenticationExecutionExportRepresentation.
        :param authenticator_flow: The authenticator_flow of this AuthenticationExecutionExportRepresentation.
        :param autheticator_flow: The autheticator_flow of this AuthenticationExecutionExportRepresentation.
        :param flow_alias: The flow_alias of this AuthenticationExecutionExportRepresentation.
        :param priority: The priority of this AuthenticationExecutionExportRepresentation.
        :param requirement: The requirement of this AuthenticationExecutionExportRepresentation.
        :param user_setup_allowed: The user_setup_allowed of this AuthenticationExecutionExportRepresentation.
        """
        self.openapi_types = {
            'authenticator': str,
            'authenticator_config': str,
            'authenticator_flow': bool,
            'autheticator_flow': bool,
            'flow_alias': str,
            'priority': int,
            'requirement': str,
            'user_setup_allowed': bool
        }

        self.attribute_map = {
            'authenticator': 'authenticator',
            'authenticator_config': 'authenticatorConfig',
            'authenticator_flow': 'authenticatorFlow',
            'autheticator_flow': 'autheticatorFlow',
            'flow_alias': 'flowAlias',
            'priority': 'priority',
            'requirement': 'requirement',
            'user_setup_allowed': 'userSetupAllowed'
        }

        self._authenticator = authenticator
        self._authenticator_config = authenticator_config
        self._authenticator_flow = authenticator_flow
        self._autheticator_flow = autheticator_flow
        self._flow_alias = flow_alias
        self._priority = priority
        self._requirement = requirement
        self._user_setup_allowed = user_setup_allowed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationExecutionExportRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationExecutionExportRepresentation of this AuthenticationExecutionExportRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticator(self):
        """Gets the authenticator of this AuthenticationExecutionExportRepresentation.


        :return: The authenticator of this AuthenticationExecutionExportRepresentation.
        :rtype: str
        """
        return self._authenticator

    @authenticator.setter
    def authenticator(self, authenticator):
        """Sets the authenticator of this AuthenticationExecutionExportRepresentation.


        :param authenticator: The authenticator of this AuthenticationExecutionExportRepresentation.
        :type authenticator: str
        """

        self._authenticator = authenticator

    @property
    def authenticator_config(self):
        """Gets the authenticator_config of this AuthenticationExecutionExportRepresentation.


        :return: The authenticator_config of this AuthenticationExecutionExportRepresentation.
        :rtype: str
        """
        return self._authenticator_config

    @authenticator_config.setter
    def authenticator_config(self, authenticator_config):
        """Sets the authenticator_config of this AuthenticationExecutionExportRepresentation.


        :param authenticator_config: The authenticator_config of this AuthenticationExecutionExportRepresentation.
        :type authenticator_config: str
        """

        self._authenticator_config = authenticator_config

    @property
    def authenticator_flow(self):
        """Gets the authenticator_flow of this AuthenticationExecutionExportRepresentation.


        :return: The authenticator_flow of this AuthenticationExecutionExportRepresentation.
        :rtype: bool
        """
        return self._authenticator_flow

    @authenticator_flow.setter
    def authenticator_flow(self, authenticator_flow):
        """Sets the authenticator_flow of this AuthenticationExecutionExportRepresentation.


        :param authenticator_flow: The authenticator_flow of this AuthenticationExecutionExportRepresentation.
        :type authenticator_flow: bool
        """

        self._authenticator_flow = authenticator_flow

    @property
    def autheticator_flow(self):
        """Gets the autheticator_flow of this AuthenticationExecutionExportRepresentation.


        :return: The autheticator_flow of this AuthenticationExecutionExportRepresentation.
        :rtype: bool
        """
        return self._autheticator_flow

    @autheticator_flow.setter
    def autheticator_flow(self, autheticator_flow):
        """Sets the autheticator_flow of this AuthenticationExecutionExportRepresentation.


        :param autheticator_flow: The autheticator_flow of this AuthenticationExecutionExportRepresentation.
        :type autheticator_flow: bool
        """

        self._autheticator_flow = autheticator_flow

    @property
    def flow_alias(self):
        """Gets the flow_alias of this AuthenticationExecutionExportRepresentation.


        :return: The flow_alias of this AuthenticationExecutionExportRepresentation.
        :rtype: str
        """
        return self._flow_alias

    @flow_alias.setter
    def flow_alias(self, flow_alias):
        """Sets the flow_alias of this AuthenticationExecutionExportRepresentation.


        :param flow_alias: The flow_alias of this AuthenticationExecutionExportRepresentation.
        :type flow_alias: str
        """

        self._flow_alias = flow_alias

    @property
    def priority(self):
        """Gets the priority of this AuthenticationExecutionExportRepresentation.


        :return: The priority of this AuthenticationExecutionExportRepresentation.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AuthenticationExecutionExportRepresentation.


        :param priority: The priority of this AuthenticationExecutionExportRepresentation.
        :type priority: int
        """

        self._priority = priority

    @property
    def requirement(self):
        """Gets the requirement of this AuthenticationExecutionExportRepresentation.


        :return: The requirement of this AuthenticationExecutionExportRepresentation.
        :rtype: str
        """
        return self._requirement

    @requirement.setter
    def requirement(self, requirement):
        """Sets the requirement of this AuthenticationExecutionExportRepresentation.


        :param requirement: The requirement of this AuthenticationExecutionExportRepresentation.
        :type requirement: str
        """

        self._requirement = requirement

    @property
    def user_setup_allowed(self):
        """Gets the user_setup_allowed of this AuthenticationExecutionExportRepresentation.


        :return: The user_setup_allowed of this AuthenticationExecutionExportRepresentation.
        :rtype: bool
        """
        return self._user_setup_allowed

    @user_setup_allowed.setter
    def user_setup_allowed(self, user_setup_allowed):
        """Sets the user_setup_allowed of this AuthenticationExecutionExportRepresentation.


        :param user_setup_allowed: The user_setup_allowed of this AuthenticationExecutionExportRepresentation.
        :type user_setup_allowed: bool
        """

        self._user_setup_allowed = user_setup_allowed
