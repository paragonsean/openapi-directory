# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credential_representation import CredentialRepresentation
from openapi_server.models.federated_identity_representation import FederatedIdentityRepresentation
from openapi_server.models.user_consent_representation import UserConsentRepresentation
from openapi_server import util


class UserRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: Dict[str, object]=None, attributes: Dict[str, object]=None, client_consents: List[UserConsentRepresentation]=None, client_roles: Dict[str, object]=None, created_timestamp: int=None, credentials: List[CredentialRepresentation]=None, disableable_credential_types: List[str]=None, email: str=None, email_verified: bool=None, enabled: bool=None, federated_identities: List[FederatedIdentityRepresentation]=None, federation_link: str=None, first_name: str=None, groups: List[str]=None, id: str=None, last_name: str=None, not_before: int=None, origin: str=None, realm_roles: List[str]=None, required_actions: List[str]=None, _self: str=None, service_account_client_id: str=None, username: str=None):
        """UserRepresentation - a model defined in OpenAPI

        :param access: The access of this UserRepresentation.
        :param attributes: The attributes of this UserRepresentation.
        :param client_consents: The client_consents of this UserRepresentation.
        :param client_roles: The client_roles of this UserRepresentation.
        :param created_timestamp: The created_timestamp of this UserRepresentation.
        :param credentials: The credentials of this UserRepresentation.
        :param disableable_credential_types: The disableable_credential_types of this UserRepresentation.
        :param email: The email of this UserRepresentation.
        :param email_verified: The email_verified of this UserRepresentation.
        :param enabled: The enabled of this UserRepresentation.
        :param federated_identities: The federated_identities of this UserRepresentation.
        :param federation_link: The federation_link of this UserRepresentation.
        :param first_name: The first_name of this UserRepresentation.
        :param groups: The groups of this UserRepresentation.
        :param id: The id of this UserRepresentation.
        :param last_name: The last_name of this UserRepresentation.
        :param not_before: The not_before of this UserRepresentation.
        :param origin: The origin of this UserRepresentation.
        :param realm_roles: The realm_roles of this UserRepresentation.
        :param required_actions: The required_actions of this UserRepresentation.
        :param _self: The _self of this UserRepresentation.
        :param service_account_client_id: The service_account_client_id of this UserRepresentation.
        :param username: The username of this UserRepresentation.
        """
        self.openapi_types = {
            'access': Dict[str, object],
            'attributes': Dict[str, object],
            'client_consents': List[UserConsentRepresentation],
            'client_roles': Dict[str, object],
            'created_timestamp': int,
            'credentials': List[CredentialRepresentation],
            'disableable_credential_types': List[str],
            'email': str,
            'email_verified': bool,
            'enabled': bool,
            'federated_identities': List[FederatedIdentityRepresentation],
            'federation_link': str,
            'first_name': str,
            'groups': List[str],
            'id': str,
            'last_name': str,
            'not_before': int,
            'origin': str,
            'realm_roles': List[str],
            'required_actions': List[str],
            '_self': str,
            'service_account_client_id': str,
            'username': str
        }

        self.attribute_map = {
            'access': 'access',
            'attributes': 'attributes',
            'client_consents': 'clientConsents',
            'client_roles': 'clientRoles',
            'created_timestamp': 'createdTimestamp',
            'credentials': 'credentials',
            'disableable_credential_types': 'disableableCredentialTypes',
            'email': 'email',
            'email_verified': 'emailVerified',
            'enabled': 'enabled',
            'federated_identities': 'federatedIdentities',
            'federation_link': 'federationLink',
            'first_name': 'firstName',
            'groups': 'groups',
            'id': 'id',
            'last_name': 'lastName',
            'not_before': 'notBefore',
            'origin': 'origin',
            'realm_roles': 'realmRoles',
            'required_actions': 'requiredActions',
            '_self': 'self',
            'service_account_client_id': 'serviceAccountClientId',
            'username': 'username'
        }

        self._access = access
        self._attributes = attributes
        self._client_consents = client_consents
        self._client_roles = client_roles
        self._created_timestamp = created_timestamp
        self._credentials = credentials
        self._disableable_credential_types = disableable_credential_types
        self._email = email
        self._email_verified = email_verified
        self._enabled = enabled
        self._federated_identities = federated_identities
        self._federation_link = federation_link
        self._first_name = first_name
        self._groups = groups
        self._id = id
        self._last_name = last_name
        self._not_before = not_before
        self._origin = origin
        self._realm_roles = realm_roles
        self._required_actions = required_actions
        self.__self = _self
        self._service_account_client_id = service_account_client_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserRepresentation of this UserRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this UserRepresentation.


        :return: The access of this UserRepresentation.
        :rtype: Dict[str, object]
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this UserRepresentation.


        :param access: The access of this UserRepresentation.
        :type access: Dict[str, object]
        """

        self._access = access

    @property
    def attributes(self):
        """Gets the attributes of this UserRepresentation.


        :return: The attributes of this UserRepresentation.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this UserRepresentation.


        :param attributes: The attributes of this UserRepresentation.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def client_consents(self):
        """Gets the client_consents of this UserRepresentation.


        :return: The client_consents of this UserRepresentation.
        :rtype: List[UserConsentRepresentation]
        """
        return self._client_consents

    @client_consents.setter
    def client_consents(self, client_consents):
        """Sets the client_consents of this UserRepresentation.


        :param client_consents: The client_consents of this UserRepresentation.
        :type client_consents: List[UserConsentRepresentation]
        """

        self._client_consents = client_consents

    @property
    def client_roles(self):
        """Gets the client_roles of this UserRepresentation.


        :return: The client_roles of this UserRepresentation.
        :rtype: Dict[str, object]
        """
        return self._client_roles

    @client_roles.setter
    def client_roles(self, client_roles):
        """Sets the client_roles of this UserRepresentation.


        :param client_roles: The client_roles of this UserRepresentation.
        :type client_roles: Dict[str, object]
        """

        self._client_roles = client_roles

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this UserRepresentation.


        :return: The created_timestamp of this UserRepresentation.
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this UserRepresentation.


        :param created_timestamp: The created_timestamp of this UserRepresentation.
        :type created_timestamp: int
        """

        self._created_timestamp = created_timestamp

    @property
    def credentials(self):
        """Gets the credentials of this UserRepresentation.


        :return: The credentials of this UserRepresentation.
        :rtype: List[CredentialRepresentation]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this UserRepresentation.


        :param credentials: The credentials of this UserRepresentation.
        :type credentials: List[CredentialRepresentation]
        """

        self._credentials = credentials

    @property
    def disableable_credential_types(self):
        """Gets the disableable_credential_types of this UserRepresentation.


        :return: The disableable_credential_types of this UserRepresentation.
        :rtype: List[str]
        """
        return self._disableable_credential_types

    @disableable_credential_types.setter
    def disableable_credential_types(self, disableable_credential_types):
        """Sets the disableable_credential_types of this UserRepresentation.


        :param disableable_credential_types: The disableable_credential_types of this UserRepresentation.
        :type disableable_credential_types: List[str]
        """

        self._disableable_credential_types = disableable_credential_types

    @property
    def email(self):
        """Gets the email of this UserRepresentation.


        :return: The email of this UserRepresentation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserRepresentation.


        :param email: The email of this UserRepresentation.
        :type email: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this UserRepresentation.


        :return: The email_verified of this UserRepresentation.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this UserRepresentation.


        :param email_verified: The email_verified of this UserRepresentation.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def enabled(self):
        """Gets the enabled of this UserRepresentation.


        :return: The enabled of this UserRepresentation.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserRepresentation.


        :param enabled: The enabled of this UserRepresentation.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def federated_identities(self):
        """Gets the federated_identities of this UserRepresentation.


        :return: The federated_identities of this UserRepresentation.
        :rtype: List[FederatedIdentityRepresentation]
        """
        return self._federated_identities

    @federated_identities.setter
    def federated_identities(self, federated_identities):
        """Sets the federated_identities of this UserRepresentation.


        :param federated_identities: The federated_identities of this UserRepresentation.
        :type federated_identities: List[FederatedIdentityRepresentation]
        """

        self._federated_identities = federated_identities

    @property
    def federation_link(self):
        """Gets the federation_link of this UserRepresentation.


        :return: The federation_link of this UserRepresentation.
        :rtype: str
        """
        return self._federation_link

    @federation_link.setter
    def federation_link(self, federation_link):
        """Sets the federation_link of this UserRepresentation.


        :param federation_link: The federation_link of this UserRepresentation.
        :type federation_link: str
        """

        self._federation_link = federation_link

    @property
    def first_name(self):
        """Gets the first_name of this UserRepresentation.


        :return: The first_name of this UserRepresentation.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserRepresentation.


        :param first_name: The first_name of this UserRepresentation.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def groups(self):
        """Gets the groups of this UserRepresentation.


        :return: The groups of this UserRepresentation.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserRepresentation.


        :param groups: The groups of this UserRepresentation.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this UserRepresentation.


        :return: The id of this UserRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRepresentation.


        :param id: The id of this UserRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this UserRepresentation.


        :return: The last_name of this UserRepresentation.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserRepresentation.


        :param last_name: The last_name of this UserRepresentation.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def not_before(self):
        """Gets the not_before of this UserRepresentation.


        :return: The not_before of this UserRepresentation.
        :rtype: int
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this UserRepresentation.


        :param not_before: The not_before of this UserRepresentation.
        :type not_before: int
        """

        self._not_before = not_before

    @property
    def origin(self):
        """Gets the origin of this UserRepresentation.


        :return: The origin of this UserRepresentation.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this UserRepresentation.


        :param origin: The origin of this UserRepresentation.
        :type origin: str
        """

        self._origin = origin

    @property
    def realm_roles(self):
        """Gets the realm_roles of this UserRepresentation.


        :return: The realm_roles of this UserRepresentation.
        :rtype: List[str]
        """
        return self._realm_roles

    @realm_roles.setter
    def realm_roles(self, realm_roles):
        """Sets the realm_roles of this UserRepresentation.


        :param realm_roles: The realm_roles of this UserRepresentation.
        :type realm_roles: List[str]
        """

        self._realm_roles = realm_roles

    @property
    def required_actions(self):
        """Gets the required_actions of this UserRepresentation.


        :return: The required_actions of this UserRepresentation.
        :rtype: List[str]
        """
        return self._required_actions

    @required_actions.setter
    def required_actions(self, required_actions):
        """Sets the required_actions of this UserRepresentation.


        :param required_actions: The required_actions of this UserRepresentation.
        :type required_actions: List[str]
        """

        self._required_actions = required_actions

    @property
    def _self(self):
        """Gets the _self of this UserRepresentation.


        :return: The _self of this UserRepresentation.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this UserRepresentation.


        :param _self: The _self of this UserRepresentation.
        :type _self: str
        """

        self.__self = _self

    @property
    def service_account_client_id(self):
        """Gets the service_account_client_id of this UserRepresentation.


        :return: The service_account_client_id of this UserRepresentation.
        :rtype: str
        """
        return self._service_account_client_id

    @service_account_client_id.setter
    def service_account_client_id(self, service_account_client_id):
        """Sets the service_account_client_id of this UserRepresentation.


        :param service_account_client_id: The service_account_client_id of this UserRepresentation.
        :type service_account_client_id: str
        """

        self._service_account_client_id = service_account_client_id

    @property
    def username(self):
        """Gets the username of this UserRepresentation.


        :return: The username of this UserRepresentation.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserRepresentation.


        :param username: The username of this UserRepresentation.
        :type username: str
        """

        self._username = username
