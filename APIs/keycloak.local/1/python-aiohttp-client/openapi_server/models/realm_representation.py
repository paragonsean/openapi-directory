# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_flow_representation import AuthenticationFlowRepresentation
from openapi_server.models.authenticator_config_representation import AuthenticatorConfigRepresentation
from openapi_server.models.client_representation import ClientRepresentation
from openapi_server.models.client_scope_representation import ClientScopeRepresentation
from openapi_server.models.group_representation import GroupRepresentation
from openapi_server.models.identity_provider_mapper_representation import IdentityProviderMapperRepresentation
from openapi_server.models.identity_provider_representation import IdentityProviderRepresentation
from openapi_server.models.multivalued_hash_map import MultivaluedHashMap
from openapi_server.models.protocol_mapper_representation import ProtocolMapperRepresentation
from openapi_server.models.required_action_provider_representation import RequiredActionProviderRepresentation
from openapi_server.models.roles_representation import RolesRepresentation
from openapi_server.models.scope_mapping_representation import ScopeMappingRepresentation
from openapi_server.models.user_federation_mapper_representation import UserFederationMapperRepresentation
from openapi_server.models.user_federation_provider_representation import UserFederationProviderRepresentation
from openapi_server.models.user_representation import UserRepresentation
from openapi_server import util


class RealmRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_code_lifespan: int=None, access_code_lifespan_login: int=None, access_code_lifespan_user_action: int=None, access_token_lifespan: int=None, access_token_lifespan_for_implicit_flow: int=None, account_theme: str=None, action_token_generated_by_admin_lifespan: int=None, action_token_generated_by_user_lifespan: int=None, admin_events_details_enabled: bool=None, admin_events_enabled: bool=None, admin_theme: str=None, attributes: Dict[str, object]=None, authentication_flows: List[AuthenticationFlowRepresentation]=None, authenticator_config: List[AuthenticatorConfigRepresentation]=None, browser_flow: str=None, browser_security_headers: Dict[str, object]=None, brute_force_protected: bool=None, client_authentication_flow: str=None, client_scope_mappings: Dict[str, object]=None, client_scopes: List[ClientScopeRepresentation]=None, client_session_idle_timeout: int=None, client_session_max_lifespan: int=None, clients: List[ClientRepresentation]=None, components: MultivaluedHashMap=None, default_default_client_scopes: List[str]=None, default_groups: List[str]=None, default_locale: str=None, default_optional_client_scopes: List[str]=None, default_roles: List[str]=None, default_signature_algorithm: str=None, direct_grant_flow: str=None, display_name: str=None, display_name_html: str=None, docker_authentication_flow: str=None, duplicate_emails_allowed: bool=None, edit_username_allowed: bool=None, email_theme: str=None, enabled: bool=None, enabled_event_types: List[str]=None, events_enabled: bool=None, events_expiration: int=None, events_listeners: List[str]=None, failure_factor: int=None, federated_users: List[UserRepresentation]=None, groups: List[GroupRepresentation]=None, id: str=None, identity_provider_mappers: List[IdentityProviderMapperRepresentation]=None, identity_providers: List[IdentityProviderRepresentation]=None, internationalization_enabled: bool=None, keycloak_version: str=None, login_theme: str=None, login_with_email_allowed: bool=None, max_delta_time_seconds: int=None, max_failure_wait_seconds: int=None, minimum_quick_login_wait_seconds: int=None, not_before: int=None, offline_session_idle_timeout: int=None, offline_session_max_lifespan: int=None, offline_session_max_lifespan_enabled: bool=None, otp_policy_algorithm: str=None, otp_policy_digits: int=None, otp_policy_initial_counter: int=None, otp_policy_look_ahead_window: int=None, otp_policy_period: int=None, otp_policy_type: str=None, otp_supported_applications: List[str]=None, password_policy: str=None, permanent_lockout: bool=None, protocol_mappers: List[ProtocolMapperRepresentation]=None, quick_login_check_milli_seconds: int=None, realm: str=None, refresh_token_max_reuse: int=None, registration_allowed: bool=None, registration_email_as_username: bool=None, registration_flow: str=None, remember_me: bool=None, required_actions: List[RequiredActionProviderRepresentation]=None, reset_credentials_flow: str=None, reset_password_allowed: bool=None, revoke_refresh_token: bool=None, roles: RolesRepresentation=None, scope_mappings: List[ScopeMappingRepresentation]=None, smtp_server: Dict[str, object]=None, ssl_required: str=None, sso_session_idle_timeout: int=None, sso_session_idle_timeout_remember_me: int=None, sso_session_max_lifespan: int=None, sso_session_max_lifespan_remember_me: int=None, supported_locales: List[str]=None, user_federation_mappers: List[UserFederationMapperRepresentation]=None, user_federation_providers: List[UserFederationProviderRepresentation]=None, user_managed_access_allowed: bool=None, users: List[UserRepresentation]=None, verify_email: bool=None, wait_increment_seconds: int=None, web_authn_policy_acceptable_aaguids: List[str]=None, web_authn_policy_attestation_conveyance_preference: str=None, web_authn_policy_authenticator_attachment: str=None, web_authn_policy_avoid_same_authenticator_register: bool=None, web_authn_policy_create_timeout: int=None, web_authn_policy_passwordless_acceptable_aaguids: List[str]=None, web_authn_policy_passwordless_attestation_conveyance_preference: str=None, web_authn_policy_passwordless_authenticator_attachment: str=None, web_authn_policy_passwordless_avoid_same_authenticator_register: bool=None, web_authn_policy_passwordless_create_timeout: int=None, web_authn_policy_passwordless_require_resident_key: str=None, web_authn_policy_passwordless_rp_entity_name: str=None, web_authn_policy_passwordless_rp_id: str=None, web_authn_policy_passwordless_signature_algorithms: List[str]=None, web_authn_policy_passwordless_user_verification_requirement: str=None, web_authn_policy_require_resident_key: str=None, web_authn_policy_rp_entity_name: str=None, web_authn_policy_rp_id: str=None, web_authn_policy_signature_algorithms: List[str]=None, web_authn_policy_user_verification_requirement: str=None):
        """RealmRepresentation - a model defined in OpenAPI

        :param access_code_lifespan: The access_code_lifespan of this RealmRepresentation.
        :param access_code_lifespan_login: The access_code_lifespan_login of this RealmRepresentation.
        :param access_code_lifespan_user_action: The access_code_lifespan_user_action of this RealmRepresentation.
        :param access_token_lifespan: The access_token_lifespan of this RealmRepresentation.
        :param access_token_lifespan_for_implicit_flow: The access_token_lifespan_for_implicit_flow of this RealmRepresentation.
        :param account_theme: The account_theme of this RealmRepresentation.
        :param action_token_generated_by_admin_lifespan: The action_token_generated_by_admin_lifespan of this RealmRepresentation.
        :param action_token_generated_by_user_lifespan: The action_token_generated_by_user_lifespan of this RealmRepresentation.
        :param admin_events_details_enabled: The admin_events_details_enabled of this RealmRepresentation.
        :param admin_events_enabled: The admin_events_enabled of this RealmRepresentation.
        :param admin_theme: The admin_theme of this RealmRepresentation.
        :param attributes: The attributes of this RealmRepresentation.
        :param authentication_flows: The authentication_flows of this RealmRepresentation.
        :param authenticator_config: The authenticator_config of this RealmRepresentation.
        :param browser_flow: The browser_flow of this RealmRepresentation.
        :param browser_security_headers: The browser_security_headers of this RealmRepresentation.
        :param brute_force_protected: The brute_force_protected of this RealmRepresentation.
        :param client_authentication_flow: The client_authentication_flow of this RealmRepresentation.
        :param client_scope_mappings: The client_scope_mappings of this RealmRepresentation.
        :param client_scopes: The client_scopes of this RealmRepresentation.
        :param client_session_idle_timeout: The client_session_idle_timeout of this RealmRepresentation.
        :param client_session_max_lifespan: The client_session_max_lifespan of this RealmRepresentation.
        :param clients: The clients of this RealmRepresentation.
        :param components: The components of this RealmRepresentation.
        :param default_default_client_scopes: The default_default_client_scopes of this RealmRepresentation.
        :param default_groups: The default_groups of this RealmRepresentation.
        :param default_locale: The default_locale of this RealmRepresentation.
        :param default_optional_client_scopes: The default_optional_client_scopes of this RealmRepresentation.
        :param default_roles: The default_roles of this RealmRepresentation.
        :param default_signature_algorithm: The default_signature_algorithm of this RealmRepresentation.
        :param direct_grant_flow: The direct_grant_flow of this RealmRepresentation.
        :param display_name: The display_name of this RealmRepresentation.
        :param display_name_html: The display_name_html of this RealmRepresentation.
        :param docker_authentication_flow: The docker_authentication_flow of this RealmRepresentation.
        :param duplicate_emails_allowed: The duplicate_emails_allowed of this RealmRepresentation.
        :param edit_username_allowed: The edit_username_allowed of this RealmRepresentation.
        :param email_theme: The email_theme of this RealmRepresentation.
        :param enabled: The enabled of this RealmRepresentation.
        :param enabled_event_types: The enabled_event_types of this RealmRepresentation.
        :param events_enabled: The events_enabled of this RealmRepresentation.
        :param events_expiration: The events_expiration of this RealmRepresentation.
        :param events_listeners: The events_listeners of this RealmRepresentation.
        :param failure_factor: The failure_factor of this RealmRepresentation.
        :param federated_users: The federated_users of this RealmRepresentation.
        :param groups: The groups of this RealmRepresentation.
        :param id: The id of this RealmRepresentation.
        :param identity_provider_mappers: The identity_provider_mappers of this RealmRepresentation.
        :param identity_providers: The identity_providers of this RealmRepresentation.
        :param internationalization_enabled: The internationalization_enabled of this RealmRepresentation.
        :param keycloak_version: The keycloak_version of this RealmRepresentation.
        :param login_theme: The login_theme of this RealmRepresentation.
        :param login_with_email_allowed: The login_with_email_allowed of this RealmRepresentation.
        :param max_delta_time_seconds: The max_delta_time_seconds of this RealmRepresentation.
        :param max_failure_wait_seconds: The max_failure_wait_seconds of this RealmRepresentation.
        :param minimum_quick_login_wait_seconds: The minimum_quick_login_wait_seconds of this RealmRepresentation.
        :param not_before: The not_before of this RealmRepresentation.
        :param offline_session_idle_timeout: The offline_session_idle_timeout of this RealmRepresentation.
        :param offline_session_max_lifespan: The offline_session_max_lifespan of this RealmRepresentation.
        :param offline_session_max_lifespan_enabled: The offline_session_max_lifespan_enabled of this RealmRepresentation.
        :param otp_policy_algorithm: The otp_policy_algorithm of this RealmRepresentation.
        :param otp_policy_digits: The otp_policy_digits of this RealmRepresentation.
        :param otp_policy_initial_counter: The otp_policy_initial_counter of this RealmRepresentation.
        :param otp_policy_look_ahead_window: The otp_policy_look_ahead_window of this RealmRepresentation.
        :param otp_policy_period: The otp_policy_period of this RealmRepresentation.
        :param otp_policy_type: The otp_policy_type of this RealmRepresentation.
        :param otp_supported_applications: The otp_supported_applications of this RealmRepresentation.
        :param password_policy: The password_policy of this RealmRepresentation.
        :param permanent_lockout: The permanent_lockout of this RealmRepresentation.
        :param protocol_mappers: The protocol_mappers of this RealmRepresentation.
        :param quick_login_check_milli_seconds: The quick_login_check_milli_seconds of this RealmRepresentation.
        :param realm: The realm of this RealmRepresentation.
        :param refresh_token_max_reuse: The refresh_token_max_reuse of this RealmRepresentation.
        :param registration_allowed: The registration_allowed of this RealmRepresentation.
        :param registration_email_as_username: The registration_email_as_username of this RealmRepresentation.
        :param registration_flow: The registration_flow of this RealmRepresentation.
        :param remember_me: The remember_me of this RealmRepresentation.
        :param required_actions: The required_actions of this RealmRepresentation.
        :param reset_credentials_flow: The reset_credentials_flow of this RealmRepresentation.
        :param reset_password_allowed: The reset_password_allowed of this RealmRepresentation.
        :param revoke_refresh_token: The revoke_refresh_token of this RealmRepresentation.
        :param roles: The roles of this RealmRepresentation.
        :param scope_mappings: The scope_mappings of this RealmRepresentation.
        :param smtp_server: The smtp_server of this RealmRepresentation.
        :param ssl_required: The ssl_required of this RealmRepresentation.
        :param sso_session_idle_timeout: The sso_session_idle_timeout of this RealmRepresentation.
        :param sso_session_idle_timeout_remember_me: The sso_session_idle_timeout_remember_me of this RealmRepresentation.
        :param sso_session_max_lifespan: The sso_session_max_lifespan of this RealmRepresentation.
        :param sso_session_max_lifespan_remember_me: The sso_session_max_lifespan_remember_me of this RealmRepresentation.
        :param supported_locales: The supported_locales of this RealmRepresentation.
        :param user_federation_mappers: The user_federation_mappers of this RealmRepresentation.
        :param user_federation_providers: The user_federation_providers of this RealmRepresentation.
        :param user_managed_access_allowed: The user_managed_access_allowed of this RealmRepresentation.
        :param users: The users of this RealmRepresentation.
        :param verify_email: The verify_email of this RealmRepresentation.
        :param wait_increment_seconds: The wait_increment_seconds of this RealmRepresentation.
        :param web_authn_policy_acceptable_aaguids: The web_authn_policy_acceptable_aaguids of this RealmRepresentation.
        :param web_authn_policy_attestation_conveyance_preference: The web_authn_policy_attestation_conveyance_preference of this RealmRepresentation.
        :param web_authn_policy_authenticator_attachment: The web_authn_policy_authenticator_attachment of this RealmRepresentation.
        :param web_authn_policy_avoid_same_authenticator_register: The web_authn_policy_avoid_same_authenticator_register of this RealmRepresentation.
        :param web_authn_policy_create_timeout: The web_authn_policy_create_timeout of this RealmRepresentation.
        :param web_authn_policy_passwordless_acceptable_aaguids: The web_authn_policy_passwordless_acceptable_aaguids of this RealmRepresentation.
        :param web_authn_policy_passwordless_attestation_conveyance_preference: The web_authn_policy_passwordless_attestation_conveyance_preference of this RealmRepresentation.
        :param web_authn_policy_passwordless_authenticator_attachment: The web_authn_policy_passwordless_authenticator_attachment of this RealmRepresentation.
        :param web_authn_policy_passwordless_avoid_same_authenticator_register: The web_authn_policy_passwordless_avoid_same_authenticator_register of this RealmRepresentation.
        :param web_authn_policy_passwordless_create_timeout: The web_authn_policy_passwordless_create_timeout of this RealmRepresentation.
        :param web_authn_policy_passwordless_require_resident_key: The web_authn_policy_passwordless_require_resident_key of this RealmRepresentation.
        :param web_authn_policy_passwordless_rp_entity_name: The web_authn_policy_passwordless_rp_entity_name of this RealmRepresentation.
        :param web_authn_policy_passwordless_rp_id: The web_authn_policy_passwordless_rp_id of this RealmRepresentation.
        :param web_authn_policy_passwordless_signature_algorithms: The web_authn_policy_passwordless_signature_algorithms of this RealmRepresentation.
        :param web_authn_policy_passwordless_user_verification_requirement: The web_authn_policy_passwordless_user_verification_requirement of this RealmRepresentation.
        :param web_authn_policy_require_resident_key: The web_authn_policy_require_resident_key of this RealmRepresentation.
        :param web_authn_policy_rp_entity_name: The web_authn_policy_rp_entity_name of this RealmRepresentation.
        :param web_authn_policy_rp_id: The web_authn_policy_rp_id of this RealmRepresentation.
        :param web_authn_policy_signature_algorithms: The web_authn_policy_signature_algorithms of this RealmRepresentation.
        :param web_authn_policy_user_verification_requirement: The web_authn_policy_user_verification_requirement of this RealmRepresentation.
        """
        self.openapi_types = {
            'access_code_lifespan': int,
            'access_code_lifespan_login': int,
            'access_code_lifespan_user_action': int,
            'access_token_lifespan': int,
            'access_token_lifespan_for_implicit_flow': int,
            'account_theme': str,
            'action_token_generated_by_admin_lifespan': int,
            'action_token_generated_by_user_lifespan': int,
            'admin_events_details_enabled': bool,
            'admin_events_enabled': bool,
            'admin_theme': str,
            'attributes': Dict[str, object],
            'authentication_flows': List[AuthenticationFlowRepresentation],
            'authenticator_config': List[AuthenticatorConfigRepresentation],
            'browser_flow': str,
            'browser_security_headers': Dict[str, object],
            'brute_force_protected': bool,
            'client_authentication_flow': str,
            'client_scope_mappings': Dict[str, object],
            'client_scopes': List[ClientScopeRepresentation],
            'client_session_idle_timeout': int,
            'client_session_max_lifespan': int,
            'clients': List[ClientRepresentation],
            'components': MultivaluedHashMap,
            'default_default_client_scopes': List[str],
            'default_groups': List[str],
            'default_locale': str,
            'default_optional_client_scopes': List[str],
            'default_roles': List[str],
            'default_signature_algorithm': str,
            'direct_grant_flow': str,
            'display_name': str,
            'display_name_html': str,
            'docker_authentication_flow': str,
            'duplicate_emails_allowed': bool,
            'edit_username_allowed': bool,
            'email_theme': str,
            'enabled': bool,
            'enabled_event_types': List[str],
            'events_enabled': bool,
            'events_expiration': int,
            'events_listeners': List[str],
            'failure_factor': int,
            'federated_users': List[UserRepresentation],
            'groups': List[GroupRepresentation],
            'id': str,
            'identity_provider_mappers': List[IdentityProviderMapperRepresentation],
            'identity_providers': List[IdentityProviderRepresentation],
            'internationalization_enabled': bool,
            'keycloak_version': str,
            'login_theme': str,
            'login_with_email_allowed': bool,
            'max_delta_time_seconds': int,
            'max_failure_wait_seconds': int,
            'minimum_quick_login_wait_seconds': int,
            'not_before': int,
            'offline_session_idle_timeout': int,
            'offline_session_max_lifespan': int,
            'offline_session_max_lifespan_enabled': bool,
            'otp_policy_algorithm': str,
            'otp_policy_digits': int,
            'otp_policy_initial_counter': int,
            'otp_policy_look_ahead_window': int,
            'otp_policy_period': int,
            'otp_policy_type': str,
            'otp_supported_applications': List[str],
            'password_policy': str,
            'permanent_lockout': bool,
            'protocol_mappers': List[ProtocolMapperRepresentation],
            'quick_login_check_milli_seconds': int,
            'realm': str,
            'refresh_token_max_reuse': int,
            'registration_allowed': bool,
            'registration_email_as_username': bool,
            'registration_flow': str,
            'remember_me': bool,
            'required_actions': List[RequiredActionProviderRepresentation],
            'reset_credentials_flow': str,
            'reset_password_allowed': bool,
            'revoke_refresh_token': bool,
            'roles': RolesRepresentation,
            'scope_mappings': List[ScopeMappingRepresentation],
            'smtp_server': Dict[str, object],
            'ssl_required': str,
            'sso_session_idle_timeout': int,
            'sso_session_idle_timeout_remember_me': int,
            'sso_session_max_lifespan': int,
            'sso_session_max_lifespan_remember_me': int,
            'supported_locales': List[str],
            'user_federation_mappers': List[UserFederationMapperRepresentation],
            'user_federation_providers': List[UserFederationProviderRepresentation],
            'user_managed_access_allowed': bool,
            'users': List[UserRepresentation],
            'verify_email': bool,
            'wait_increment_seconds': int,
            'web_authn_policy_acceptable_aaguids': List[str],
            'web_authn_policy_attestation_conveyance_preference': str,
            'web_authn_policy_authenticator_attachment': str,
            'web_authn_policy_avoid_same_authenticator_register': bool,
            'web_authn_policy_create_timeout': int,
            'web_authn_policy_passwordless_acceptable_aaguids': List[str],
            'web_authn_policy_passwordless_attestation_conveyance_preference': str,
            'web_authn_policy_passwordless_authenticator_attachment': str,
            'web_authn_policy_passwordless_avoid_same_authenticator_register': bool,
            'web_authn_policy_passwordless_create_timeout': int,
            'web_authn_policy_passwordless_require_resident_key': str,
            'web_authn_policy_passwordless_rp_entity_name': str,
            'web_authn_policy_passwordless_rp_id': str,
            'web_authn_policy_passwordless_signature_algorithms': List[str],
            'web_authn_policy_passwordless_user_verification_requirement': str,
            'web_authn_policy_require_resident_key': str,
            'web_authn_policy_rp_entity_name': str,
            'web_authn_policy_rp_id': str,
            'web_authn_policy_signature_algorithms': List[str],
            'web_authn_policy_user_verification_requirement': str
        }

        self.attribute_map = {
            'access_code_lifespan': 'accessCodeLifespan',
            'access_code_lifespan_login': 'accessCodeLifespanLogin',
            'access_code_lifespan_user_action': 'accessCodeLifespanUserAction',
            'access_token_lifespan': 'accessTokenLifespan',
            'access_token_lifespan_for_implicit_flow': 'accessTokenLifespanForImplicitFlow',
            'account_theme': 'accountTheme',
            'action_token_generated_by_admin_lifespan': 'actionTokenGeneratedByAdminLifespan',
            'action_token_generated_by_user_lifespan': 'actionTokenGeneratedByUserLifespan',
            'admin_events_details_enabled': 'adminEventsDetailsEnabled',
            'admin_events_enabled': 'adminEventsEnabled',
            'admin_theme': 'adminTheme',
            'attributes': 'attributes',
            'authentication_flows': 'authenticationFlows',
            'authenticator_config': 'authenticatorConfig',
            'browser_flow': 'browserFlow',
            'browser_security_headers': 'browserSecurityHeaders',
            'brute_force_protected': 'bruteForceProtected',
            'client_authentication_flow': 'clientAuthenticationFlow',
            'client_scope_mappings': 'clientScopeMappings',
            'client_scopes': 'clientScopes',
            'client_session_idle_timeout': 'clientSessionIdleTimeout',
            'client_session_max_lifespan': 'clientSessionMaxLifespan',
            'clients': 'clients',
            'components': 'components',
            'default_default_client_scopes': 'defaultDefaultClientScopes',
            'default_groups': 'defaultGroups',
            'default_locale': 'defaultLocale',
            'default_optional_client_scopes': 'defaultOptionalClientScopes',
            'default_roles': 'defaultRoles',
            'default_signature_algorithm': 'defaultSignatureAlgorithm',
            'direct_grant_flow': 'directGrantFlow',
            'display_name': 'displayName',
            'display_name_html': 'displayNameHtml',
            'docker_authentication_flow': 'dockerAuthenticationFlow',
            'duplicate_emails_allowed': 'duplicateEmailsAllowed',
            'edit_username_allowed': 'editUsernameAllowed',
            'email_theme': 'emailTheme',
            'enabled': 'enabled',
            'enabled_event_types': 'enabledEventTypes',
            'events_enabled': 'eventsEnabled',
            'events_expiration': 'eventsExpiration',
            'events_listeners': 'eventsListeners',
            'failure_factor': 'failureFactor',
            'federated_users': 'federatedUsers',
            'groups': 'groups',
            'id': 'id',
            'identity_provider_mappers': 'identityProviderMappers',
            'identity_providers': 'identityProviders',
            'internationalization_enabled': 'internationalizationEnabled',
            'keycloak_version': 'keycloakVersion',
            'login_theme': 'loginTheme',
            'login_with_email_allowed': 'loginWithEmailAllowed',
            'max_delta_time_seconds': 'maxDeltaTimeSeconds',
            'max_failure_wait_seconds': 'maxFailureWaitSeconds',
            'minimum_quick_login_wait_seconds': 'minimumQuickLoginWaitSeconds',
            'not_before': 'notBefore',
            'offline_session_idle_timeout': 'offlineSessionIdleTimeout',
            'offline_session_max_lifespan': 'offlineSessionMaxLifespan',
            'offline_session_max_lifespan_enabled': 'offlineSessionMaxLifespanEnabled',
            'otp_policy_algorithm': 'otpPolicyAlgorithm',
            'otp_policy_digits': 'otpPolicyDigits',
            'otp_policy_initial_counter': 'otpPolicyInitialCounter',
            'otp_policy_look_ahead_window': 'otpPolicyLookAheadWindow',
            'otp_policy_period': 'otpPolicyPeriod',
            'otp_policy_type': 'otpPolicyType',
            'otp_supported_applications': 'otpSupportedApplications',
            'password_policy': 'passwordPolicy',
            'permanent_lockout': 'permanentLockout',
            'protocol_mappers': 'protocolMappers',
            'quick_login_check_milli_seconds': 'quickLoginCheckMilliSeconds',
            'realm': 'realm',
            'refresh_token_max_reuse': 'refreshTokenMaxReuse',
            'registration_allowed': 'registrationAllowed',
            'registration_email_as_username': 'registrationEmailAsUsername',
            'registration_flow': 'registrationFlow',
            'remember_me': 'rememberMe',
            'required_actions': 'requiredActions',
            'reset_credentials_flow': 'resetCredentialsFlow',
            'reset_password_allowed': 'resetPasswordAllowed',
            'revoke_refresh_token': 'revokeRefreshToken',
            'roles': 'roles',
            'scope_mappings': 'scopeMappings',
            'smtp_server': 'smtpServer',
            'ssl_required': 'sslRequired',
            'sso_session_idle_timeout': 'ssoSessionIdleTimeout',
            'sso_session_idle_timeout_remember_me': 'ssoSessionIdleTimeoutRememberMe',
            'sso_session_max_lifespan': 'ssoSessionMaxLifespan',
            'sso_session_max_lifespan_remember_me': 'ssoSessionMaxLifespanRememberMe',
            'supported_locales': 'supportedLocales',
            'user_federation_mappers': 'userFederationMappers',
            'user_federation_providers': 'userFederationProviders',
            'user_managed_access_allowed': 'userManagedAccessAllowed',
            'users': 'users',
            'verify_email': 'verifyEmail',
            'wait_increment_seconds': 'waitIncrementSeconds',
            'web_authn_policy_acceptable_aaguids': 'webAuthnPolicyAcceptableAaguids',
            'web_authn_policy_attestation_conveyance_preference': 'webAuthnPolicyAttestationConveyancePreference',
            'web_authn_policy_authenticator_attachment': 'webAuthnPolicyAuthenticatorAttachment',
            'web_authn_policy_avoid_same_authenticator_register': 'webAuthnPolicyAvoidSameAuthenticatorRegister',
            'web_authn_policy_create_timeout': 'webAuthnPolicyCreateTimeout',
            'web_authn_policy_passwordless_acceptable_aaguids': 'webAuthnPolicyPasswordlessAcceptableAaguids',
            'web_authn_policy_passwordless_attestation_conveyance_preference': 'webAuthnPolicyPasswordlessAttestationConveyancePreference',
            'web_authn_policy_passwordless_authenticator_attachment': 'webAuthnPolicyPasswordlessAuthenticatorAttachment',
            'web_authn_policy_passwordless_avoid_same_authenticator_register': 'webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister',
            'web_authn_policy_passwordless_create_timeout': 'webAuthnPolicyPasswordlessCreateTimeout',
            'web_authn_policy_passwordless_require_resident_key': 'webAuthnPolicyPasswordlessRequireResidentKey',
            'web_authn_policy_passwordless_rp_entity_name': 'webAuthnPolicyPasswordlessRpEntityName',
            'web_authn_policy_passwordless_rp_id': 'webAuthnPolicyPasswordlessRpId',
            'web_authn_policy_passwordless_signature_algorithms': 'webAuthnPolicyPasswordlessSignatureAlgorithms',
            'web_authn_policy_passwordless_user_verification_requirement': 'webAuthnPolicyPasswordlessUserVerificationRequirement',
            'web_authn_policy_require_resident_key': 'webAuthnPolicyRequireResidentKey',
            'web_authn_policy_rp_entity_name': 'webAuthnPolicyRpEntityName',
            'web_authn_policy_rp_id': 'webAuthnPolicyRpId',
            'web_authn_policy_signature_algorithms': 'webAuthnPolicySignatureAlgorithms',
            'web_authn_policy_user_verification_requirement': 'webAuthnPolicyUserVerificationRequirement'
        }

        self._access_code_lifespan = access_code_lifespan
        self._access_code_lifespan_login = access_code_lifespan_login
        self._access_code_lifespan_user_action = access_code_lifespan_user_action
        self._access_token_lifespan = access_token_lifespan
        self._access_token_lifespan_for_implicit_flow = access_token_lifespan_for_implicit_flow
        self._account_theme = account_theme
        self._action_token_generated_by_admin_lifespan = action_token_generated_by_admin_lifespan
        self._action_token_generated_by_user_lifespan = action_token_generated_by_user_lifespan
        self._admin_events_details_enabled = admin_events_details_enabled
        self._admin_events_enabled = admin_events_enabled
        self._admin_theme = admin_theme
        self._attributes = attributes
        self._authentication_flows = authentication_flows
        self._authenticator_config = authenticator_config
        self._browser_flow = browser_flow
        self._browser_security_headers = browser_security_headers
        self._brute_force_protected = brute_force_protected
        self._client_authentication_flow = client_authentication_flow
        self._client_scope_mappings = client_scope_mappings
        self._client_scopes = client_scopes
        self._client_session_idle_timeout = client_session_idle_timeout
        self._client_session_max_lifespan = client_session_max_lifespan
        self._clients = clients
        self._components = components
        self._default_default_client_scopes = default_default_client_scopes
        self._default_groups = default_groups
        self._default_locale = default_locale
        self._default_optional_client_scopes = default_optional_client_scopes
        self._default_roles = default_roles
        self._default_signature_algorithm = default_signature_algorithm
        self._direct_grant_flow = direct_grant_flow
        self._display_name = display_name
        self._display_name_html = display_name_html
        self._docker_authentication_flow = docker_authentication_flow
        self._duplicate_emails_allowed = duplicate_emails_allowed
        self._edit_username_allowed = edit_username_allowed
        self._email_theme = email_theme
        self._enabled = enabled
        self._enabled_event_types = enabled_event_types
        self._events_enabled = events_enabled
        self._events_expiration = events_expiration
        self._events_listeners = events_listeners
        self._failure_factor = failure_factor
        self._federated_users = federated_users
        self._groups = groups
        self._id = id
        self._identity_provider_mappers = identity_provider_mappers
        self._identity_providers = identity_providers
        self._internationalization_enabled = internationalization_enabled
        self._keycloak_version = keycloak_version
        self._login_theme = login_theme
        self._login_with_email_allowed = login_with_email_allowed
        self._max_delta_time_seconds = max_delta_time_seconds
        self._max_failure_wait_seconds = max_failure_wait_seconds
        self._minimum_quick_login_wait_seconds = minimum_quick_login_wait_seconds
        self._not_before = not_before
        self._offline_session_idle_timeout = offline_session_idle_timeout
        self._offline_session_max_lifespan = offline_session_max_lifespan
        self._offline_session_max_lifespan_enabled = offline_session_max_lifespan_enabled
        self._otp_policy_algorithm = otp_policy_algorithm
        self._otp_policy_digits = otp_policy_digits
        self._otp_policy_initial_counter = otp_policy_initial_counter
        self._otp_policy_look_ahead_window = otp_policy_look_ahead_window
        self._otp_policy_period = otp_policy_period
        self._otp_policy_type = otp_policy_type
        self._otp_supported_applications = otp_supported_applications
        self._password_policy = password_policy
        self._permanent_lockout = permanent_lockout
        self._protocol_mappers = protocol_mappers
        self._quick_login_check_milli_seconds = quick_login_check_milli_seconds
        self._realm = realm
        self._refresh_token_max_reuse = refresh_token_max_reuse
        self._registration_allowed = registration_allowed
        self._registration_email_as_username = registration_email_as_username
        self._registration_flow = registration_flow
        self._remember_me = remember_me
        self._required_actions = required_actions
        self._reset_credentials_flow = reset_credentials_flow
        self._reset_password_allowed = reset_password_allowed
        self._revoke_refresh_token = revoke_refresh_token
        self._roles = roles
        self._scope_mappings = scope_mappings
        self._smtp_server = smtp_server
        self._ssl_required = ssl_required
        self._sso_session_idle_timeout = sso_session_idle_timeout
        self._sso_session_idle_timeout_remember_me = sso_session_idle_timeout_remember_me
        self._sso_session_max_lifespan = sso_session_max_lifespan
        self._sso_session_max_lifespan_remember_me = sso_session_max_lifespan_remember_me
        self._supported_locales = supported_locales
        self._user_federation_mappers = user_federation_mappers
        self._user_federation_providers = user_federation_providers
        self._user_managed_access_allowed = user_managed_access_allowed
        self._users = users
        self._verify_email = verify_email
        self._wait_increment_seconds = wait_increment_seconds
        self._web_authn_policy_acceptable_aaguids = web_authn_policy_acceptable_aaguids
        self._web_authn_policy_attestation_conveyance_preference = web_authn_policy_attestation_conveyance_preference
        self._web_authn_policy_authenticator_attachment = web_authn_policy_authenticator_attachment
        self._web_authn_policy_avoid_same_authenticator_register = web_authn_policy_avoid_same_authenticator_register
        self._web_authn_policy_create_timeout = web_authn_policy_create_timeout
        self._web_authn_policy_passwordless_acceptable_aaguids = web_authn_policy_passwordless_acceptable_aaguids
        self._web_authn_policy_passwordless_attestation_conveyance_preference = web_authn_policy_passwordless_attestation_conveyance_preference
        self._web_authn_policy_passwordless_authenticator_attachment = web_authn_policy_passwordless_authenticator_attachment
        self._web_authn_policy_passwordless_avoid_same_authenticator_register = web_authn_policy_passwordless_avoid_same_authenticator_register
        self._web_authn_policy_passwordless_create_timeout = web_authn_policy_passwordless_create_timeout
        self._web_authn_policy_passwordless_require_resident_key = web_authn_policy_passwordless_require_resident_key
        self._web_authn_policy_passwordless_rp_entity_name = web_authn_policy_passwordless_rp_entity_name
        self._web_authn_policy_passwordless_rp_id = web_authn_policy_passwordless_rp_id
        self._web_authn_policy_passwordless_signature_algorithms = web_authn_policy_passwordless_signature_algorithms
        self._web_authn_policy_passwordless_user_verification_requirement = web_authn_policy_passwordless_user_verification_requirement
        self._web_authn_policy_require_resident_key = web_authn_policy_require_resident_key
        self._web_authn_policy_rp_entity_name = web_authn_policy_rp_entity_name
        self._web_authn_policy_rp_id = web_authn_policy_rp_id
        self._web_authn_policy_signature_algorithms = web_authn_policy_signature_algorithms
        self._web_authn_policy_user_verification_requirement = web_authn_policy_user_verification_requirement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealmRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RealmRepresentation of this RealmRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_code_lifespan(self):
        """Gets the access_code_lifespan of this RealmRepresentation.


        :return: The access_code_lifespan of this RealmRepresentation.
        :rtype: int
        """
        return self._access_code_lifespan

    @access_code_lifespan.setter
    def access_code_lifespan(self, access_code_lifespan):
        """Sets the access_code_lifespan of this RealmRepresentation.


        :param access_code_lifespan: The access_code_lifespan of this RealmRepresentation.
        :type access_code_lifespan: int
        """

        self._access_code_lifespan = access_code_lifespan

    @property
    def access_code_lifespan_login(self):
        """Gets the access_code_lifespan_login of this RealmRepresentation.


        :return: The access_code_lifespan_login of this RealmRepresentation.
        :rtype: int
        """
        return self._access_code_lifespan_login

    @access_code_lifespan_login.setter
    def access_code_lifespan_login(self, access_code_lifespan_login):
        """Sets the access_code_lifespan_login of this RealmRepresentation.


        :param access_code_lifespan_login: The access_code_lifespan_login of this RealmRepresentation.
        :type access_code_lifespan_login: int
        """

        self._access_code_lifespan_login = access_code_lifespan_login

    @property
    def access_code_lifespan_user_action(self):
        """Gets the access_code_lifespan_user_action of this RealmRepresentation.


        :return: The access_code_lifespan_user_action of this RealmRepresentation.
        :rtype: int
        """
        return self._access_code_lifespan_user_action

    @access_code_lifespan_user_action.setter
    def access_code_lifespan_user_action(self, access_code_lifespan_user_action):
        """Sets the access_code_lifespan_user_action of this RealmRepresentation.


        :param access_code_lifespan_user_action: The access_code_lifespan_user_action of this RealmRepresentation.
        :type access_code_lifespan_user_action: int
        """

        self._access_code_lifespan_user_action = access_code_lifespan_user_action

    @property
    def access_token_lifespan(self):
        """Gets the access_token_lifespan of this RealmRepresentation.


        :return: The access_token_lifespan of this RealmRepresentation.
        :rtype: int
        """
        return self._access_token_lifespan

    @access_token_lifespan.setter
    def access_token_lifespan(self, access_token_lifespan):
        """Sets the access_token_lifespan of this RealmRepresentation.


        :param access_token_lifespan: The access_token_lifespan of this RealmRepresentation.
        :type access_token_lifespan: int
        """

        self._access_token_lifespan = access_token_lifespan

    @property
    def access_token_lifespan_for_implicit_flow(self):
        """Gets the access_token_lifespan_for_implicit_flow of this RealmRepresentation.


        :return: The access_token_lifespan_for_implicit_flow of this RealmRepresentation.
        :rtype: int
        """
        return self._access_token_lifespan_for_implicit_flow

    @access_token_lifespan_for_implicit_flow.setter
    def access_token_lifespan_for_implicit_flow(self, access_token_lifespan_for_implicit_flow):
        """Sets the access_token_lifespan_for_implicit_flow of this RealmRepresentation.


        :param access_token_lifespan_for_implicit_flow: The access_token_lifespan_for_implicit_flow of this RealmRepresentation.
        :type access_token_lifespan_for_implicit_flow: int
        """

        self._access_token_lifespan_for_implicit_flow = access_token_lifespan_for_implicit_flow

    @property
    def account_theme(self):
        """Gets the account_theme of this RealmRepresentation.


        :return: The account_theme of this RealmRepresentation.
        :rtype: str
        """
        return self._account_theme

    @account_theme.setter
    def account_theme(self, account_theme):
        """Sets the account_theme of this RealmRepresentation.


        :param account_theme: The account_theme of this RealmRepresentation.
        :type account_theme: str
        """

        self._account_theme = account_theme

    @property
    def action_token_generated_by_admin_lifespan(self):
        """Gets the action_token_generated_by_admin_lifespan of this RealmRepresentation.


        :return: The action_token_generated_by_admin_lifespan of this RealmRepresentation.
        :rtype: int
        """
        return self._action_token_generated_by_admin_lifespan

    @action_token_generated_by_admin_lifespan.setter
    def action_token_generated_by_admin_lifespan(self, action_token_generated_by_admin_lifespan):
        """Sets the action_token_generated_by_admin_lifespan of this RealmRepresentation.


        :param action_token_generated_by_admin_lifespan: The action_token_generated_by_admin_lifespan of this RealmRepresentation.
        :type action_token_generated_by_admin_lifespan: int
        """

        self._action_token_generated_by_admin_lifespan = action_token_generated_by_admin_lifespan

    @property
    def action_token_generated_by_user_lifespan(self):
        """Gets the action_token_generated_by_user_lifespan of this RealmRepresentation.


        :return: The action_token_generated_by_user_lifespan of this RealmRepresentation.
        :rtype: int
        """
        return self._action_token_generated_by_user_lifespan

    @action_token_generated_by_user_lifespan.setter
    def action_token_generated_by_user_lifespan(self, action_token_generated_by_user_lifespan):
        """Sets the action_token_generated_by_user_lifespan of this RealmRepresentation.


        :param action_token_generated_by_user_lifespan: The action_token_generated_by_user_lifespan of this RealmRepresentation.
        :type action_token_generated_by_user_lifespan: int
        """

        self._action_token_generated_by_user_lifespan = action_token_generated_by_user_lifespan

    @property
    def admin_events_details_enabled(self):
        """Gets the admin_events_details_enabled of this RealmRepresentation.


        :return: The admin_events_details_enabled of this RealmRepresentation.
        :rtype: bool
        """
        return self._admin_events_details_enabled

    @admin_events_details_enabled.setter
    def admin_events_details_enabled(self, admin_events_details_enabled):
        """Sets the admin_events_details_enabled of this RealmRepresentation.


        :param admin_events_details_enabled: The admin_events_details_enabled of this RealmRepresentation.
        :type admin_events_details_enabled: bool
        """

        self._admin_events_details_enabled = admin_events_details_enabled

    @property
    def admin_events_enabled(self):
        """Gets the admin_events_enabled of this RealmRepresentation.


        :return: The admin_events_enabled of this RealmRepresentation.
        :rtype: bool
        """
        return self._admin_events_enabled

    @admin_events_enabled.setter
    def admin_events_enabled(self, admin_events_enabled):
        """Sets the admin_events_enabled of this RealmRepresentation.


        :param admin_events_enabled: The admin_events_enabled of this RealmRepresentation.
        :type admin_events_enabled: bool
        """

        self._admin_events_enabled = admin_events_enabled

    @property
    def admin_theme(self):
        """Gets the admin_theme of this RealmRepresentation.


        :return: The admin_theme of this RealmRepresentation.
        :rtype: str
        """
        return self._admin_theme

    @admin_theme.setter
    def admin_theme(self, admin_theme):
        """Sets the admin_theme of this RealmRepresentation.


        :param admin_theme: The admin_theme of this RealmRepresentation.
        :type admin_theme: str
        """

        self._admin_theme = admin_theme

    @property
    def attributes(self):
        """Gets the attributes of this RealmRepresentation.


        :return: The attributes of this RealmRepresentation.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this RealmRepresentation.


        :param attributes: The attributes of this RealmRepresentation.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def authentication_flows(self):
        """Gets the authentication_flows of this RealmRepresentation.


        :return: The authentication_flows of this RealmRepresentation.
        :rtype: List[AuthenticationFlowRepresentation]
        """
        return self._authentication_flows

    @authentication_flows.setter
    def authentication_flows(self, authentication_flows):
        """Sets the authentication_flows of this RealmRepresentation.


        :param authentication_flows: The authentication_flows of this RealmRepresentation.
        :type authentication_flows: List[AuthenticationFlowRepresentation]
        """

        self._authentication_flows = authentication_flows

    @property
    def authenticator_config(self):
        """Gets the authenticator_config of this RealmRepresentation.


        :return: The authenticator_config of this RealmRepresentation.
        :rtype: List[AuthenticatorConfigRepresentation]
        """
        return self._authenticator_config

    @authenticator_config.setter
    def authenticator_config(self, authenticator_config):
        """Sets the authenticator_config of this RealmRepresentation.


        :param authenticator_config: The authenticator_config of this RealmRepresentation.
        :type authenticator_config: List[AuthenticatorConfigRepresentation]
        """

        self._authenticator_config = authenticator_config

    @property
    def browser_flow(self):
        """Gets the browser_flow of this RealmRepresentation.


        :return: The browser_flow of this RealmRepresentation.
        :rtype: str
        """
        return self._browser_flow

    @browser_flow.setter
    def browser_flow(self, browser_flow):
        """Sets the browser_flow of this RealmRepresentation.


        :param browser_flow: The browser_flow of this RealmRepresentation.
        :type browser_flow: str
        """

        self._browser_flow = browser_flow

    @property
    def browser_security_headers(self):
        """Gets the browser_security_headers of this RealmRepresentation.


        :return: The browser_security_headers of this RealmRepresentation.
        :rtype: Dict[str, object]
        """
        return self._browser_security_headers

    @browser_security_headers.setter
    def browser_security_headers(self, browser_security_headers):
        """Sets the browser_security_headers of this RealmRepresentation.


        :param browser_security_headers: The browser_security_headers of this RealmRepresentation.
        :type browser_security_headers: Dict[str, object]
        """

        self._browser_security_headers = browser_security_headers

    @property
    def brute_force_protected(self):
        """Gets the brute_force_protected of this RealmRepresentation.


        :return: The brute_force_protected of this RealmRepresentation.
        :rtype: bool
        """
        return self._brute_force_protected

    @brute_force_protected.setter
    def brute_force_protected(self, brute_force_protected):
        """Sets the brute_force_protected of this RealmRepresentation.


        :param brute_force_protected: The brute_force_protected of this RealmRepresentation.
        :type brute_force_protected: bool
        """

        self._brute_force_protected = brute_force_protected

    @property
    def client_authentication_flow(self):
        """Gets the client_authentication_flow of this RealmRepresentation.


        :return: The client_authentication_flow of this RealmRepresentation.
        :rtype: str
        """
        return self._client_authentication_flow

    @client_authentication_flow.setter
    def client_authentication_flow(self, client_authentication_flow):
        """Sets the client_authentication_flow of this RealmRepresentation.


        :param client_authentication_flow: The client_authentication_flow of this RealmRepresentation.
        :type client_authentication_flow: str
        """

        self._client_authentication_flow = client_authentication_flow

    @property
    def client_scope_mappings(self):
        """Gets the client_scope_mappings of this RealmRepresentation.


        :return: The client_scope_mappings of this RealmRepresentation.
        :rtype: Dict[str, object]
        """
        return self._client_scope_mappings

    @client_scope_mappings.setter
    def client_scope_mappings(self, client_scope_mappings):
        """Sets the client_scope_mappings of this RealmRepresentation.


        :param client_scope_mappings: The client_scope_mappings of this RealmRepresentation.
        :type client_scope_mappings: Dict[str, object]
        """

        self._client_scope_mappings = client_scope_mappings

    @property
    def client_scopes(self):
        """Gets the client_scopes of this RealmRepresentation.


        :return: The client_scopes of this RealmRepresentation.
        :rtype: List[ClientScopeRepresentation]
        """
        return self._client_scopes

    @client_scopes.setter
    def client_scopes(self, client_scopes):
        """Sets the client_scopes of this RealmRepresentation.


        :param client_scopes: The client_scopes of this RealmRepresentation.
        :type client_scopes: List[ClientScopeRepresentation]
        """

        self._client_scopes = client_scopes

    @property
    def client_session_idle_timeout(self):
        """Gets the client_session_idle_timeout of this RealmRepresentation.


        :return: The client_session_idle_timeout of this RealmRepresentation.
        :rtype: int
        """
        return self._client_session_idle_timeout

    @client_session_idle_timeout.setter
    def client_session_idle_timeout(self, client_session_idle_timeout):
        """Sets the client_session_idle_timeout of this RealmRepresentation.


        :param client_session_idle_timeout: The client_session_idle_timeout of this RealmRepresentation.
        :type client_session_idle_timeout: int
        """

        self._client_session_idle_timeout = client_session_idle_timeout

    @property
    def client_session_max_lifespan(self):
        """Gets the client_session_max_lifespan of this RealmRepresentation.


        :return: The client_session_max_lifespan of this RealmRepresentation.
        :rtype: int
        """
        return self._client_session_max_lifespan

    @client_session_max_lifespan.setter
    def client_session_max_lifespan(self, client_session_max_lifespan):
        """Sets the client_session_max_lifespan of this RealmRepresentation.


        :param client_session_max_lifespan: The client_session_max_lifespan of this RealmRepresentation.
        :type client_session_max_lifespan: int
        """

        self._client_session_max_lifespan = client_session_max_lifespan

    @property
    def clients(self):
        """Gets the clients of this RealmRepresentation.


        :return: The clients of this RealmRepresentation.
        :rtype: List[ClientRepresentation]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this RealmRepresentation.


        :param clients: The clients of this RealmRepresentation.
        :type clients: List[ClientRepresentation]
        """

        self._clients = clients

    @property
    def components(self):
        """Gets the components of this RealmRepresentation.


        :return: The components of this RealmRepresentation.
        :rtype: MultivaluedHashMap
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this RealmRepresentation.


        :param components: The components of this RealmRepresentation.
        :type components: MultivaluedHashMap
        """

        self._components = components

    @property
    def default_default_client_scopes(self):
        """Gets the default_default_client_scopes of this RealmRepresentation.


        :return: The default_default_client_scopes of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._default_default_client_scopes

    @default_default_client_scopes.setter
    def default_default_client_scopes(self, default_default_client_scopes):
        """Sets the default_default_client_scopes of this RealmRepresentation.


        :param default_default_client_scopes: The default_default_client_scopes of this RealmRepresentation.
        :type default_default_client_scopes: List[str]
        """

        self._default_default_client_scopes = default_default_client_scopes

    @property
    def default_groups(self):
        """Gets the default_groups of this RealmRepresentation.


        :return: The default_groups of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._default_groups

    @default_groups.setter
    def default_groups(self, default_groups):
        """Sets the default_groups of this RealmRepresentation.


        :param default_groups: The default_groups of this RealmRepresentation.
        :type default_groups: List[str]
        """

        self._default_groups = default_groups

    @property
    def default_locale(self):
        """Gets the default_locale of this RealmRepresentation.


        :return: The default_locale of this RealmRepresentation.
        :rtype: str
        """
        return self._default_locale

    @default_locale.setter
    def default_locale(self, default_locale):
        """Sets the default_locale of this RealmRepresentation.


        :param default_locale: The default_locale of this RealmRepresentation.
        :type default_locale: str
        """

        self._default_locale = default_locale

    @property
    def default_optional_client_scopes(self):
        """Gets the default_optional_client_scopes of this RealmRepresentation.


        :return: The default_optional_client_scopes of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._default_optional_client_scopes

    @default_optional_client_scopes.setter
    def default_optional_client_scopes(self, default_optional_client_scopes):
        """Sets the default_optional_client_scopes of this RealmRepresentation.


        :param default_optional_client_scopes: The default_optional_client_scopes of this RealmRepresentation.
        :type default_optional_client_scopes: List[str]
        """

        self._default_optional_client_scopes = default_optional_client_scopes

    @property
    def default_roles(self):
        """Gets the default_roles of this RealmRepresentation.


        :return: The default_roles of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._default_roles

    @default_roles.setter
    def default_roles(self, default_roles):
        """Sets the default_roles of this RealmRepresentation.


        :param default_roles: The default_roles of this RealmRepresentation.
        :type default_roles: List[str]
        """

        self._default_roles = default_roles

    @property
    def default_signature_algorithm(self):
        """Gets the default_signature_algorithm of this RealmRepresentation.


        :return: The default_signature_algorithm of this RealmRepresentation.
        :rtype: str
        """
        return self._default_signature_algorithm

    @default_signature_algorithm.setter
    def default_signature_algorithm(self, default_signature_algorithm):
        """Sets the default_signature_algorithm of this RealmRepresentation.


        :param default_signature_algorithm: The default_signature_algorithm of this RealmRepresentation.
        :type default_signature_algorithm: str
        """

        self._default_signature_algorithm = default_signature_algorithm

    @property
    def direct_grant_flow(self):
        """Gets the direct_grant_flow of this RealmRepresentation.


        :return: The direct_grant_flow of this RealmRepresentation.
        :rtype: str
        """
        return self._direct_grant_flow

    @direct_grant_flow.setter
    def direct_grant_flow(self, direct_grant_flow):
        """Sets the direct_grant_flow of this RealmRepresentation.


        :param direct_grant_flow: The direct_grant_flow of this RealmRepresentation.
        :type direct_grant_flow: str
        """

        self._direct_grant_flow = direct_grant_flow

    @property
    def display_name(self):
        """Gets the display_name of this RealmRepresentation.


        :return: The display_name of this RealmRepresentation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RealmRepresentation.


        :param display_name: The display_name of this RealmRepresentation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def display_name_html(self):
        """Gets the display_name_html of this RealmRepresentation.


        :return: The display_name_html of this RealmRepresentation.
        :rtype: str
        """
        return self._display_name_html

    @display_name_html.setter
    def display_name_html(self, display_name_html):
        """Sets the display_name_html of this RealmRepresentation.


        :param display_name_html: The display_name_html of this RealmRepresentation.
        :type display_name_html: str
        """

        self._display_name_html = display_name_html

    @property
    def docker_authentication_flow(self):
        """Gets the docker_authentication_flow of this RealmRepresentation.


        :return: The docker_authentication_flow of this RealmRepresentation.
        :rtype: str
        """
        return self._docker_authentication_flow

    @docker_authentication_flow.setter
    def docker_authentication_flow(self, docker_authentication_flow):
        """Sets the docker_authentication_flow of this RealmRepresentation.


        :param docker_authentication_flow: The docker_authentication_flow of this RealmRepresentation.
        :type docker_authentication_flow: str
        """

        self._docker_authentication_flow = docker_authentication_flow

    @property
    def duplicate_emails_allowed(self):
        """Gets the duplicate_emails_allowed of this RealmRepresentation.


        :return: The duplicate_emails_allowed of this RealmRepresentation.
        :rtype: bool
        """
        return self._duplicate_emails_allowed

    @duplicate_emails_allowed.setter
    def duplicate_emails_allowed(self, duplicate_emails_allowed):
        """Sets the duplicate_emails_allowed of this RealmRepresentation.


        :param duplicate_emails_allowed: The duplicate_emails_allowed of this RealmRepresentation.
        :type duplicate_emails_allowed: bool
        """

        self._duplicate_emails_allowed = duplicate_emails_allowed

    @property
    def edit_username_allowed(self):
        """Gets the edit_username_allowed of this RealmRepresentation.


        :return: The edit_username_allowed of this RealmRepresentation.
        :rtype: bool
        """
        return self._edit_username_allowed

    @edit_username_allowed.setter
    def edit_username_allowed(self, edit_username_allowed):
        """Sets the edit_username_allowed of this RealmRepresentation.


        :param edit_username_allowed: The edit_username_allowed of this RealmRepresentation.
        :type edit_username_allowed: bool
        """

        self._edit_username_allowed = edit_username_allowed

    @property
    def email_theme(self):
        """Gets the email_theme of this RealmRepresentation.


        :return: The email_theme of this RealmRepresentation.
        :rtype: str
        """
        return self._email_theme

    @email_theme.setter
    def email_theme(self, email_theme):
        """Sets the email_theme of this RealmRepresentation.


        :param email_theme: The email_theme of this RealmRepresentation.
        :type email_theme: str
        """

        self._email_theme = email_theme

    @property
    def enabled(self):
        """Gets the enabled of this RealmRepresentation.


        :return: The enabled of this RealmRepresentation.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RealmRepresentation.


        :param enabled: The enabled of this RealmRepresentation.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def enabled_event_types(self):
        """Gets the enabled_event_types of this RealmRepresentation.


        :return: The enabled_event_types of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._enabled_event_types

    @enabled_event_types.setter
    def enabled_event_types(self, enabled_event_types):
        """Sets the enabled_event_types of this RealmRepresentation.


        :param enabled_event_types: The enabled_event_types of this RealmRepresentation.
        :type enabled_event_types: List[str]
        """

        self._enabled_event_types = enabled_event_types

    @property
    def events_enabled(self):
        """Gets the events_enabled of this RealmRepresentation.


        :return: The events_enabled of this RealmRepresentation.
        :rtype: bool
        """
        return self._events_enabled

    @events_enabled.setter
    def events_enabled(self, events_enabled):
        """Sets the events_enabled of this RealmRepresentation.


        :param events_enabled: The events_enabled of this RealmRepresentation.
        :type events_enabled: bool
        """

        self._events_enabled = events_enabled

    @property
    def events_expiration(self):
        """Gets the events_expiration of this RealmRepresentation.


        :return: The events_expiration of this RealmRepresentation.
        :rtype: int
        """
        return self._events_expiration

    @events_expiration.setter
    def events_expiration(self, events_expiration):
        """Sets the events_expiration of this RealmRepresentation.


        :param events_expiration: The events_expiration of this RealmRepresentation.
        :type events_expiration: int
        """

        self._events_expiration = events_expiration

    @property
    def events_listeners(self):
        """Gets the events_listeners of this RealmRepresentation.


        :return: The events_listeners of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._events_listeners

    @events_listeners.setter
    def events_listeners(self, events_listeners):
        """Sets the events_listeners of this RealmRepresentation.


        :param events_listeners: The events_listeners of this RealmRepresentation.
        :type events_listeners: List[str]
        """

        self._events_listeners = events_listeners

    @property
    def failure_factor(self):
        """Gets the failure_factor of this RealmRepresentation.


        :return: The failure_factor of this RealmRepresentation.
        :rtype: int
        """
        return self._failure_factor

    @failure_factor.setter
    def failure_factor(self, failure_factor):
        """Sets the failure_factor of this RealmRepresentation.


        :param failure_factor: The failure_factor of this RealmRepresentation.
        :type failure_factor: int
        """

        self._failure_factor = failure_factor

    @property
    def federated_users(self):
        """Gets the federated_users of this RealmRepresentation.


        :return: The federated_users of this RealmRepresentation.
        :rtype: List[UserRepresentation]
        """
        return self._federated_users

    @federated_users.setter
    def federated_users(self, federated_users):
        """Sets the federated_users of this RealmRepresentation.


        :param federated_users: The federated_users of this RealmRepresentation.
        :type federated_users: List[UserRepresentation]
        """

        self._federated_users = federated_users

    @property
    def groups(self):
        """Gets the groups of this RealmRepresentation.


        :return: The groups of this RealmRepresentation.
        :rtype: List[GroupRepresentation]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this RealmRepresentation.


        :param groups: The groups of this RealmRepresentation.
        :type groups: List[GroupRepresentation]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this RealmRepresentation.


        :return: The id of this RealmRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RealmRepresentation.


        :param id: The id of this RealmRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def identity_provider_mappers(self):
        """Gets the identity_provider_mappers of this RealmRepresentation.


        :return: The identity_provider_mappers of this RealmRepresentation.
        :rtype: List[IdentityProviderMapperRepresentation]
        """
        return self._identity_provider_mappers

    @identity_provider_mappers.setter
    def identity_provider_mappers(self, identity_provider_mappers):
        """Sets the identity_provider_mappers of this RealmRepresentation.


        :param identity_provider_mappers: The identity_provider_mappers of this RealmRepresentation.
        :type identity_provider_mappers: List[IdentityProviderMapperRepresentation]
        """

        self._identity_provider_mappers = identity_provider_mappers

    @property
    def identity_providers(self):
        """Gets the identity_providers of this RealmRepresentation.


        :return: The identity_providers of this RealmRepresentation.
        :rtype: List[IdentityProviderRepresentation]
        """
        return self._identity_providers

    @identity_providers.setter
    def identity_providers(self, identity_providers):
        """Sets the identity_providers of this RealmRepresentation.


        :param identity_providers: The identity_providers of this RealmRepresentation.
        :type identity_providers: List[IdentityProviderRepresentation]
        """

        self._identity_providers = identity_providers

    @property
    def internationalization_enabled(self):
        """Gets the internationalization_enabled of this RealmRepresentation.


        :return: The internationalization_enabled of this RealmRepresentation.
        :rtype: bool
        """
        return self._internationalization_enabled

    @internationalization_enabled.setter
    def internationalization_enabled(self, internationalization_enabled):
        """Sets the internationalization_enabled of this RealmRepresentation.


        :param internationalization_enabled: The internationalization_enabled of this RealmRepresentation.
        :type internationalization_enabled: bool
        """

        self._internationalization_enabled = internationalization_enabled

    @property
    def keycloak_version(self):
        """Gets the keycloak_version of this RealmRepresentation.


        :return: The keycloak_version of this RealmRepresentation.
        :rtype: str
        """
        return self._keycloak_version

    @keycloak_version.setter
    def keycloak_version(self, keycloak_version):
        """Sets the keycloak_version of this RealmRepresentation.


        :param keycloak_version: The keycloak_version of this RealmRepresentation.
        :type keycloak_version: str
        """

        self._keycloak_version = keycloak_version

    @property
    def login_theme(self):
        """Gets the login_theme of this RealmRepresentation.


        :return: The login_theme of this RealmRepresentation.
        :rtype: str
        """
        return self._login_theme

    @login_theme.setter
    def login_theme(self, login_theme):
        """Sets the login_theme of this RealmRepresentation.


        :param login_theme: The login_theme of this RealmRepresentation.
        :type login_theme: str
        """

        self._login_theme = login_theme

    @property
    def login_with_email_allowed(self):
        """Gets the login_with_email_allowed of this RealmRepresentation.


        :return: The login_with_email_allowed of this RealmRepresentation.
        :rtype: bool
        """
        return self._login_with_email_allowed

    @login_with_email_allowed.setter
    def login_with_email_allowed(self, login_with_email_allowed):
        """Sets the login_with_email_allowed of this RealmRepresentation.


        :param login_with_email_allowed: The login_with_email_allowed of this RealmRepresentation.
        :type login_with_email_allowed: bool
        """

        self._login_with_email_allowed = login_with_email_allowed

    @property
    def max_delta_time_seconds(self):
        """Gets the max_delta_time_seconds of this RealmRepresentation.


        :return: The max_delta_time_seconds of this RealmRepresentation.
        :rtype: int
        """
        return self._max_delta_time_seconds

    @max_delta_time_seconds.setter
    def max_delta_time_seconds(self, max_delta_time_seconds):
        """Sets the max_delta_time_seconds of this RealmRepresentation.


        :param max_delta_time_seconds: The max_delta_time_seconds of this RealmRepresentation.
        :type max_delta_time_seconds: int
        """

        self._max_delta_time_seconds = max_delta_time_seconds

    @property
    def max_failure_wait_seconds(self):
        """Gets the max_failure_wait_seconds of this RealmRepresentation.


        :return: The max_failure_wait_seconds of this RealmRepresentation.
        :rtype: int
        """
        return self._max_failure_wait_seconds

    @max_failure_wait_seconds.setter
    def max_failure_wait_seconds(self, max_failure_wait_seconds):
        """Sets the max_failure_wait_seconds of this RealmRepresentation.


        :param max_failure_wait_seconds: The max_failure_wait_seconds of this RealmRepresentation.
        :type max_failure_wait_seconds: int
        """

        self._max_failure_wait_seconds = max_failure_wait_seconds

    @property
    def minimum_quick_login_wait_seconds(self):
        """Gets the minimum_quick_login_wait_seconds of this RealmRepresentation.


        :return: The minimum_quick_login_wait_seconds of this RealmRepresentation.
        :rtype: int
        """
        return self._minimum_quick_login_wait_seconds

    @minimum_quick_login_wait_seconds.setter
    def minimum_quick_login_wait_seconds(self, minimum_quick_login_wait_seconds):
        """Sets the minimum_quick_login_wait_seconds of this RealmRepresentation.


        :param minimum_quick_login_wait_seconds: The minimum_quick_login_wait_seconds of this RealmRepresentation.
        :type minimum_quick_login_wait_seconds: int
        """

        self._minimum_quick_login_wait_seconds = minimum_quick_login_wait_seconds

    @property
    def not_before(self):
        """Gets the not_before of this RealmRepresentation.


        :return: The not_before of this RealmRepresentation.
        :rtype: int
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this RealmRepresentation.


        :param not_before: The not_before of this RealmRepresentation.
        :type not_before: int
        """

        self._not_before = not_before

    @property
    def offline_session_idle_timeout(self):
        """Gets the offline_session_idle_timeout of this RealmRepresentation.


        :return: The offline_session_idle_timeout of this RealmRepresentation.
        :rtype: int
        """
        return self._offline_session_idle_timeout

    @offline_session_idle_timeout.setter
    def offline_session_idle_timeout(self, offline_session_idle_timeout):
        """Sets the offline_session_idle_timeout of this RealmRepresentation.


        :param offline_session_idle_timeout: The offline_session_idle_timeout of this RealmRepresentation.
        :type offline_session_idle_timeout: int
        """

        self._offline_session_idle_timeout = offline_session_idle_timeout

    @property
    def offline_session_max_lifespan(self):
        """Gets the offline_session_max_lifespan of this RealmRepresentation.


        :return: The offline_session_max_lifespan of this RealmRepresentation.
        :rtype: int
        """
        return self._offline_session_max_lifespan

    @offline_session_max_lifespan.setter
    def offline_session_max_lifespan(self, offline_session_max_lifespan):
        """Sets the offline_session_max_lifespan of this RealmRepresentation.


        :param offline_session_max_lifespan: The offline_session_max_lifespan of this RealmRepresentation.
        :type offline_session_max_lifespan: int
        """

        self._offline_session_max_lifespan = offline_session_max_lifespan

    @property
    def offline_session_max_lifespan_enabled(self):
        """Gets the offline_session_max_lifespan_enabled of this RealmRepresentation.


        :return: The offline_session_max_lifespan_enabled of this RealmRepresentation.
        :rtype: bool
        """
        return self._offline_session_max_lifespan_enabled

    @offline_session_max_lifespan_enabled.setter
    def offline_session_max_lifespan_enabled(self, offline_session_max_lifespan_enabled):
        """Sets the offline_session_max_lifespan_enabled of this RealmRepresentation.


        :param offline_session_max_lifespan_enabled: The offline_session_max_lifespan_enabled of this RealmRepresentation.
        :type offline_session_max_lifespan_enabled: bool
        """

        self._offline_session_max_lifespan_enabled = offline_session_max_lifespan_enabled

    @property
    def otp_policy_algorithm(self):
        """Gets the otp_policy_algorithm of this RealmRepresentation.


        :return: The otp_policy_algorithm of this RealmRepresentation.
        :rtype: str
        """
        return self._otp_policy_algorithm

    @otp_policy_algorithm.setter
    def otp_policy_algorithm(self, otp_policy_algorithm):
        """Sets the otp_policy_algorithm of this RealmRepresentation.


        :param otp_policy_algorithm: The otp_policy_algorithm of this RealmRepresentation.
        :type otp_policy_algorithm: str
        """

        self._otp_policy_algorithm = otp_policy_algorithm

    @property
    def otp_policy_digits(self):
        """Gets the otp_policy_digits of this RealmRepresentation.


        :return: The otp_policy_digits of this RealmRepresentation.
        :rtype: int
        """
        return self._otp_policy_digits

    @otp_policy_digits.setter
    def otp_policy_digits(self, otp_policy_digits):
        """Sets the otp_policy_digits of this RealmRepresentation.


        :param otp_policy_digits: The otp_policy_digits of this RealmRepresentation.
        :type otp_policy_digits: int
        """

        self._otp_policy_digits = otp_policy_digits

    @property
    def otp_policy_initial_counter(self):
        """Gets the otp_policy_initial_counter of this RealmRepresentation.


        :return: The otp_policy_initial_counter of this RealmRepresentation.
        :rtype: int
        """
        return self._otp_policy_initial_counter

    @otp_policy_initial_counter.setter
    def otp_policy_initial_counter(self, otp_policy_initial_counter):
        """Sets the otp_policy_initial_counter of this RealmRepresentation.


        :param otp_policy_initial_counter: The otp_policy_initial_counter of this RealmRepresentation.
        :type otp_policy_initial_counter: int
        """

        self._otp_policy_initial_counter = otp_policy_initial_counter

    @property
    def otp_policy_look_ahead_window(self):
        """Gets the otp_policy_look_ahead_window of this RealmRepresentation.


        :return: The otp_policy_look_ahead_window of this RealmRepresentation.
        :rtype: int
        """
        return self._otp_policy_look_ahead_window

    @otp_policy_look_ahead_window.setter
    def otp_policy_look_ahead_window(self, otp_policy_look_ahead_window):
        """Sets the otp_policy_look_ahead_window of this RealmRepresentation.


        :param otp_policy_look_ahead_window: The otp_policy_look_ahead_window of this RealmRepresentation.
        :type otp_policy_look_ahead_window: int
        """

        self._otp_policy_look_ahead_window = otp_policy_look_ahead_window

    @property
    def otp_policy_period(self):
        """Gets the otp_policy_period of this RealmRepresentation.


        :return: The otp_policy_period of this RealmRepresentation.
        :rtype: int
        """
        return self._otp_policy_period

    @otp_policy_period.setter
    def otp_policy_period(self, otp_policy_period):
        """Sets the otp_policy_period of this RealmRepresentation.


        :param otp_policy_period: The otp_policy_period of this RealmRepresentation.
        :type otp_policy_period: int
        """

        self._otp_policy_period = otp_policy_period

    @property
    def otp_policy_type(self):
        """Gets the otp_policy_type of this RealmRepresentation.


        :return: The otp_policy_type of this RealmRepresentation.
        :rtype: str
        """
        return self._otp_policy_type

    @otp_policy_type.setter
    def otp_policy_type(self, otp_policy_type):
        """Sets the otp_policy_type of this RealmRepresentation.


        :param otp_policy_type: The otp_policy_type of this RealmRepresentation.
        :type otp_policy_type: str
        """

        self._otp_policy_type = otp_policy_type

    @property
    def otp_supported_applications(self):
        """Gets the otp_supported_applications of this RealmRepresentation.


        :return: The otp_supported_applications of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._otp_supported_applications

    @otp_supported_applications.setter
    def otp_supported_applications(self, otp_supported_applications):
        """Sets the otp_supported_applications of this RealmRepresentation.


        :param otp_supported_applications: The otp_supported_applications of this RealmRepresentation.
        :type otp_supported_applications: List[str]
        """

        self._otp_supported_applications = otp_supported_applications

    @property
    def password_policy(self):
        """Gets the password_policy of this RealmRepresentation.


        :return: The password_policy of this RealmRepresentation.
        :rtype: str
        """
        return self._password_policy

    @password_policy.setter
    def password_policy(self, password_policy):
        """Sets the password_policy of this RealmRepresentation.


        :param password_policy: The password_policy of this RealmRepresentation.
        :type password_policy: str
        """

        self._password_policy = password_policy

    @property
    def permanent_lockout(self):
        """Gets the permanent_lockout of this RealmRepresentation.


        :return: The permanent_lockout of this RealmRepresentation.
        :rtype: bool
        """
        return self._permanent_lockout

    @permanent_lockout.setter
    def permanent_lockout(self, permanent_lockout):
        """Sets the permanent_lockout of this RealmRepresentation.


        :param permanent_lockout: The permanent_lockout of this RealmRepresentation.
        :type permanent_lockout: bool
        """

        self._permanent_lockout = permanent_lockout

    @property
    def protocol_mappers(self):
        """Gets the protocol_mappers of this RealmRepresentation.


        :return: The protocol_mappers of this RealmRepresentation.
        :rtype: List[ProtocolMapperRepresentation]
        """
        return self._protocol_mappers

    @protocol_mappers.setter
    def protocol_mappers(self, protocol_mappers):
        """Sets the protocol_mappers of this RealmRepresentation.


        :param protocol_mappers: The protocol_mappers of this RealmRepresentation.
        :type protocol_mappers: List[ProtocolMapperRepresentation]
        """

        self._protocol_mappers = protocol_mappers

    @property
    def quick_login_check_milli_seconds(self):
        """Gets the quick_login_check_milli_seconds of this RealmRepresentation.


        :return: The quick_login_check_milli_seconds of this RealmRepresentation.
        :rtype: int
        """
        return self._quick_login_check_milli_seconds

    @quick_login_check_milli_seconds.setter
    def quick_login_check_milli_seconds(self, quick_login_check_milli_seconds):
        """Sets the quick_login_check_milli_seconds of this RealmRepresentation.


        :param quick_login_check_milli_seconds: The quick_login_check_milli_seconds of this RealmRepresentation.
        :type quick_login_check_milli_seconds: int
        """

        self._quick_login_check_milli_seconds = quick_login_check_milli_seconds

    @property
    def realm(self):
        """Gets the realm of this RealmRepresentation.


        :return: The realm of this RealmRepresentation.
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this RealmRepresentation.


        :param realm: The realm of this RealmRepresentation.
        :type realm: str
        """

        self._realm = realm

    @property
    def refresh_token_max_reuse(self):
        """Gets the refresh_token_max_reuse of this RealmRepresentation.


        :return: The refresh_token_max_reuse of this RealmRepresentation.
        :rtype: int
        """
        return self._refresh_token_max_reuse

    @refresh_token_max_reuse.setter
    def refresh_token_max_reuse(self, refresh_token_max_reuse):
        """Sets the refresh_token_max_reuse of this RealmRepresentation.


        :param refresh_token_max_reuse: The refresh_token_max_reuse of this RealmRepresentation.
        :type refresh_token_max_reuse: int
        """

        self._refresh_token_max_reuse = refresh_token_max_reuse

    @property
    def registration_allowed(self):
        """Gets the registration_allowed of this RealmRepresentation.


        :return: The registration_allowed of this RealmRepresentation.
        :rtype: bool
        """
        return self._registration_allowed

    @registration_allowed.setter
    def registration_allowed(self, registration_allowed):
        """Sets the registration_allowed of this RealmRepresentation.


        :param registration_allowed: The registration_allowed of this RealmRepresentation.
        :type registration_allowed: bool
        """

        self._registration_allowed = registration_allowed

    @property
    def registration_email_as_username(self):
        """Gets the registration_email_as_username of this RealmRepresentation.


        :return: The registration_email_as_username of this RealmRepresentation.
        :rtype: bool
        """
        return self._registration_email_as_username

    @registration_email_as_username.setter
    def registration_email_as_username(self, registration_email_as_username):
        """Sets the registration_email_as_username of this RealmRepresentation.


        :param registration_email_as_username: The registration_email_as_username of this RealmRepresentation.
        :type registration_email_as_username: bool
        """

        self._registration_email_as_username = registration_email_as_username

    @property
    def registration_flow(self):
        """Gets the registration_flow of this RealmRepresentation.


        :return: The registration_flow of this RealmRepresentation.
        :rtype: str
        """
        return self._registration_flow

    @registration_flow.setter
    def registration_flow(self, registration_flow):
        """Sets the registration_flow of this RealmRepresentation.


        :param registration_flow: The registration_flow of this RealmRepresentation.
        :type registration_flow: str
        """

        self._registration_flow = registration_flow

    @property
    def remember_me(self):
        """Gets the remember_me of this RealmRepresentation.


        :return: The remember_me of this RealmRepresentation.
        :rtype: bool
        """
        return self._remember_me

    @remember_me.setter
    def remember_me(self, remember_me):
        """Sets the remember_me of this RealmRepresentation.


        :param remember_me: The remember_me of this RealmRepresentation.
        :type remember_me: bool
        """

        self._remember_me = remember_me

    @property
    def required_actions(self):
        """Gets the required_actions of this RealmRepresentation.


        :return: The required_actions of this RealmRepresentation.
        :rtype: List[RequiredActionProviderRepresentation]
        """
        return self._required_actions

    @required_actions.setter
    def required_actions(self, required_actions):
        """Sets the required_actions of this RealmRepresentation.


        :param required_actions: The required_actions of this RealmRepresentation.
        :type required_actions: List[RequiredActionProviderRepresentation]
        """

        self._required_actions = required_actions

    @property
    def reset_credentials_flow(self):
        """Gets the reset_credentials_flow of this RealmRepresentation.


        :return: The reset_credentials_flow of this RealmRepresentation.
        :rtype: str
        """
        return self._reset_credentials_flow

    @reset_credentials_flow.setter
    def reset_credentials_flow(self, reset_credentials_flow):
        """Sets the reset_credentials_flow of this RealmRepresentation.


        :param reset_credentials_flow: The reset_credentials_flow of this RealmRepresentation.
        :type reset_credentials_flow: str
        """

        self._reset_credentials_flow = reset_credentials_flow

    @property
    def reset_password_allowed(self):
        """Gets the reset_password_allowed of this RealmRepresentation.


        :return: The reset_password_allowed of this RealmRepresentation.
        :rtype: bool
        """
        return self._reset_password_allowed

    @reset_password_allowed.setter
    def reset_password_allowed(self, reset_password_allowed):
        """Sets the reset_password_allowed of this RealmRepresentation.


        :param reset_password_allowed: The reset_password_allowed of this RealmRepresentation.
        :type reset_password_allowed: bool
        """

        self._reset_password_allowed = reset_password_allowed

    @property
    def revoke_refresh_token(self):
        """Gets the revoke_refresh_token of this RealmRepresentation.


        :return: The revoke_refresh_token of this RealmRepresentation.
        :rtype: bool
        """
        return self._revoke_refresh_token

    @revoke_refresh_token.setter
    def revoke_refresh_token(self, revoke_refresh_token):
        """Sets the revoke_refresh_token of this RealmRepresentation.


        :param revoke_refresh_token: The revoke_refresh_token of this RealmRepresentation.
        :type revoke_refresh_token: bool
        """

        self._revoke_refresh_token = revoke_refresh_token

    @property
    def roles(self):
        """Gets the roles of this RealmRepresentation.


        :return: The roles of this RealmRepresentation.
        :rtype: RolesRepresentation
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this RealmRepresentation.


        :param roles: The roles of this RealmRepresentation.
        :type roles: RolesRepresentation
        """

        self._roles = roles

    @property
    def scope_mappings(self):
        """Gets the scope_mappings of this RealmRepresentation.


        :return: The scope_mappings of this RealmRepresentation.
        :rtype: List[ScopeMappingRepresentation]
        """
        return self._scope_mappings

    @scope_mappings.setter
    def scope_mappings(self, scope_mappings):
        """Sets the scope_mappings of this RealmRepresentation.


        :param scope_mappings: The scope_mappings of this RealmRepresentation.
        :type scope_mappings: List[ScopeMappingRepresentation]
        """

        self._scope_mappings = scope_mappings

    @property
    def smtp_server(self):
        """Gets the smtp_server of this RealmRepresentation.


        :return: The smtp_server of this RealmRepresentation.
        :rtype: Dict[str, object]
        """
        return self._smtp_server

    @smtp_server.setter
    def smtp_server(self, smtp_server):
        """Sets the smtp_server of this RealmRepresentation.


        :param smtp_server: The smtp_server of this RealmRepresentation.
        :type smtp_server: Dict[str, object]
        """

        self._smtp_server = smtp_server

    @property
    def ssl_required(self):
        """Gets the ssl_required of this RealmRepresentation.


        :return: The ssl_required of this RealmRepresentation.
        :rtype: str
        """
        return self._ssl_required

    @ssl_required.setter
    def ssl_required(self, ssl_required):
        """Sets the ssl_required of this RealmRepresentation.


        :param ssl_required: The ssl_required of this RealmRepresentation.
        :type ssl_required: str
        """

        self._ssl_required = ssl_required

    @property
    def sso_session_idle_timeout(self):
        """Gets the sso_session_idle_timeout of this RealmRepresentation.


        :return: The sso_session_idle_timeout of this RealmRepresentation.
        :rtype: int
        """
        return self._sso_session_idle_timeout

    @sso_session_idle_timeout.setter
    def sso_session_idle_timeout(self, sso_session_idle_timeout):
        """Sets the sso_session_idle_timeout of this RealmRepresentation.


        :param sso_session_idle_timeout: The sso_session_idle_timeout of this RealmRepresentation.
        :type sso_session_idle_timeout: int
        """

        self._sso_session_idle_timeout = sso_session_idle_timeout

    @property
    def sso_session_idle_timeout_remember_me(self):
        """Gets the sso_session_idle_timeout_remember_me of this RealmRepresentation.


        :return: The sso_session_idle_timeout_remember_me of this RealmRepresentation.
        :rtype: int
        """
        return self._sso_session_idle_timeout_remember_me

    @sso_session_idle_timeout_remember_me.setter
    def sso_session_idle_timeout_remember_me(self, sso_session_idle_timeout_remember_me):
        """Sets the sso_session_idle_timeout_remember_me of this RealmRepresentation.


        :param sso_session_idle_timeout_remember_me: The sso_session_idle_timeout_remember_me of this RealmRepresentation.
        :type sso_session_idle_timeout_remember_me: int
        """

        self._sso_session_idle_timeout_remember_me = sso_session_idle_timeout_remember_me

    @property
    def sso_session_max_lifespan(self):
        """Gets the sso_session_max_lifespan of this RealmRepresentation.


        :return: The sso_session_max_lifespan of this RealmRepresentation.
        :rtype: int
        """
        return self._sso_session_max_lifespan

    @sso_session_max_lifespan.setter
    def sso_session_max_lifespan(self, sso_session_max_lifespan):
        """Sets the sso_session_max_lifespan of this RealmRepresentation.


        :param sso_session_max_lifespan: The sso_session_max_lifespan of this RealmRepresentation.
        :type sso_session_max_lifespan: int
        """

        self._sso_session_max_lifespan = sso_session_max_lifespan

    @property
    def sso_session_max_lifespan_remember_me(self):
        """Gets the sso_session_max_lifespan_remember_me of this RealmRepresentation.


        :return: The sso_session_max_lifespan_remember_me of this RealmRepresentation.
        :rtype: int
        """
        return self._sso_session_max_lifespan_remember_me

    @sso_session_max_lifespan_remember_me.setter
    def sso_session_max_lifespan_remember_me(self, sso_session_max_lifespan_remember_me):
        """Sets the sso_session_max_lifespan_remember_me of this RealmRepresentation.


        :param sso_session_max_lifespan_remember_me: The sso_session_max_lifespan_remember_me of this RealmRepresentation.
        :type sso_session_max_lifespan_remember_me: int
        """

        self._sso_session_max_lifespan_remember_me = sso_session_max_lifespan_remember_me

    @property
    def supported_locales(self):
        """Gets the supported_locales of this RealmRepresentation.


        :return: The supported_locales of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._supported_locales

    @supported_locales.setter
    def supported_locales(self, supported_locales):
        """Sets the supported_locales of this RealmRepresentation.


        :param supported_locales: The supported_locales of this RealmRepresentation.
        :type supported_locales: List[str]
        """

        self._supported_locales = supported_locales

    @property
    def user_federation_mappers(self):
        """Gets the user_federation_mappers of this RealmRepresentation.


        :return: The user_federation_mappers of this RealmRepresentation.
        :rtype: List[UserFederationMapperRepresentation]
        """
        return self._user_federation_mappers

    @user_federation_mappers.setter
    def user_federation_mappers(self, user_federation_mappers):
        """Sets the user_federation_mappers of this RealmRepresentation.


        :param user_federation_mappers: The user_federation_mappers of this RealmRepresentation.
        :type user_federation_mappers: List[UserFederationMapperRepresentation]
        """

        self._user_federation_mappers = user_federation_mappers

    @property
    def user_federation_providers(self):
        """Gets the user_federation_providers of this RealmRepresentation.


        :return: The user_federation_providers of this RealmRepresentation.
        :rtype: List[UserFederationProviderRepresentation]
        """
        return self._user_federation_providers

    @user_federation_providers.setter
    def user_federation_providers(self, user_federation_providers):
        """Sets the user_federation_providers of this RealmRepresentation.


        :param user_federation_providers: The user_federation_providers of this RealmRepresentation.
        :type user_federation_providers: List[UserFederationProviderRepresentation]
        """

        self._user_federation_providers = user_federation_providers

    @property
    def user_managed_access_allowed(self):
        """Gets the user_managed_access_allowed of this RealmRepresentation.


        :return: The user_managed_access_allowed of this RealmRepresentation.
        :rtype: bool
        """
        return self._user_managed_access_allowed

    @user_managed_access_allowed.setter
    def user_managed_access_allowed(self, user_managed_access_allowed):
        """Sets the user_managed_access_allowed of this RealmRepresentation.


        :param user_managed_access_allowed: The user_managed_access_allowed of this RealmRepresentation.
        :type user_managed_access_allowed: bool
        """

        self._user_managed_access_allowed = user_managed_access_allowed

    @property
    def users(self):
        """Gets the users of this RealmRepresentation.


        :return: The users of this RealmRepresentation.
        :rtype: List[UserRepresentation]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this RealmRepresentation.


        :param users: The users of this RealmRepresentation.
        :type users: List[UserRepresentation]
        """

        self._users = users

    @property
    def verify_email(self):
        """Gets the verify_email of this RealmRepresentation.


        :return: The verify_email of this RealmRepresentation.
        :rtype: bool
        """
        return self._verify_email

    @verify_email.setter
    def verify_email(self, verify_email):
        """Sets the verify_email of this RealmRepresentation.


        :param verify_email: The verify_email of this RealmRepresentation.
        :type verify_email: bool
        """

        self._verify_email = verify_email

    @property
    def wait_increment_seconds(self):
        """Gets the wait_increment_seconds of this RealmRepresentation.


        :return: The wait_increment_seconds of this RealmRepresentation.
        :rtype: int
        """
        return self._wait_increment_seconds

    @wait_increment_seconds.setter
    def wait_increment_seconds(self, wait_increment_seconds):
        """Sets the wait_increment_seconds of this RealmRepresentation.


        :param wait_increment_seconds: The wait_increment_seconds of this RealmRepresentation.
        :type wait_increment_seconds: int
        """

        self._wait_increment_seconds = wait_increment_seconds

    @property
    def web_authn_policy_acceptable_aaguids(self):
        """Gets the web_authn_policy_acceptable_aaguids of this RealmRepresentation.


        :return: The web_authn_policy_acceptable_aaguids of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._web_authn_policy_acceptable_aaguids

    @web_authn_policy_acceptable_aaguids.setter
    def web_authn_policy_acceptable_aaguids(self, web_authn_policy_acceptable_aaguids):
        """Sets the web_authn_policy_acceptable_aaguids of this RealmRepresentation.


        :param web_authn_policy_acceptable_aaguids: The web_authn_policy_acceptable_aaguids of this RealmRepresentation.
        :type web_authn_policy_acceptable_aaguids: List[str]
        """

        self._web_authn_policy_acceptable_aaguids = web_authn_policy_acceptable_aaguids

    @property
    def web_authn_policy_attestation_conveyance_preference(self):
        """Gets the web_authn_policy_attestation_conveyance_preference of this RealmRepresentation.


        :return: The web_authn_policy_attestation_conveyance_preference of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_attestation_conveyance_preference

    @web_authn_policy_attestation_conveyance_preference.setter
    def web_authn_policy_attestation_conveyance_preference(self, web_authn_policy_attestation_conveyance_preference):
        """Sets the web_authn_policy_attestation_conveyance_preference of this RealmRepresentation.


        :param web_authn_policy_attestation_conveyance_preference: The web_authn_policy_attestation_conveyance_preference of this RealmRepresentation.
        :type web_authn_policy_attestation_conveyance_preference: str
        """

        self._web_authn_policy_attestation_conveyance_preference = web_authn_policy_attestation_conveyance_preference

    @property
    def web_authn_policy_authenticator_attachment(self):
        """Gets the web_authn_policy_authenticator_attachment of this RealmRepresentation.


        :return: The web_authn_policy_authenticator_attachment of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_authenticator_attachment

    @web_authn_policy_authenticator_attachment.setter
    def web_authn_policy_authenticator_attachment(self, web_authn_policy_authenticator_attachment):
        """Sets the web_authn_policy_authenticator_attachment of this RealmRepresentation.


        :param web_authn_policy_authenticator_attachment: The web_authn_policy_authenticator_attachment of this RealmRepresentation.
        :type web_authn_policy_authenticator_attachment: str
        """

        self._web_authn_policy_authenticator_attachment = web_authn_policy_authenticator_attachment

    @property
    def web_authn_policy_avoid_same_authenticator_register(self):
        """Gets the web_authn_policy_avoid_same_authenticator_register of this RealmRepresentation.


        :return: The web_authn_policy_avoid_same_authenticator_register of this RealmRepresentation.
        :rtype: bool
        """
        return self._web_authn_policy_avoid_same_authenticator_register

    @web_authn_policy_avoid_same_authenticator_register.setter
    def web_authn_policy_avoid_same_authenticator_register(self, web_authn_policy_avoid_same_authenticator_register):
        """Sets the web_authn_policy_avoid_same_authenticator_register of this RealmRepresentation.


        :param web_authn_policy_avoid_same_authenticator_register: The web_authn_policy_avoid_same_authenticator_register of this RealmRepresentation.
        :type web_authn_policy_avoid_same_authenticator_register: bool
        """

        self._web_authn_policy_avoid_same_authenticator_register = web_authn_policy_avoid_same_authenticator_register

    @property
    def web_authn_policy_create_timeout(self):
        """Gets the web_authn_policy_create_timeout of this RealmRepresentation.


        :return: The web_authn_policy_create_timeout of this RealmRepresentation.
        :rtype: int
        """
        return self._web_authn_policy_create_timeout

    @web_authn_policy_create_timeout.setter
    def web_authn_policy_create_timeout(self, web_authn_policy_create_timeout):
        """Sets the web_authn_policy_create_timeout of this RealmRepresentation.


        :param web_authn_policy_create_timeout: The web_authn_policy_create_timeout of this RealmRepresentation.
        :type web_authn_policy_create_timeout: int
        """

        self._web_authn_policy_create_timeout = web_authn_policy_create_timeout

    @property
    def web_authn_policy_passwordless_acceptable_aaguids(self):
        """Gets the web_authn_policy_passwordless_acceptable_aaguids of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_acceptable_aaguids of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._web_authn_policy_passwordless_acceptable_aaguids

    @web_authn_policy_passwordless_acceptable_aaguids.setter
    def web_authn_policy_passwordless_acceptable_aaguids(self, web_authn_policy_passwordless_acceptable_aaguids):
        """Sets the web_authn_policy_passwordless_acceptable_aaguids of this RealmRepresentation.


        :param web_authn_policy_passwordless_acceptable_aaguids: The web_authn_policy_passwordless_acceptable_aaguids of this RealmRepresentation.
        :type web_authn_policy_passwordless_acceptable_aaguids: List[str]
        """

        self._web_authn_policy_passwordless_acceptable_aaguids = web_authn_policy_passwordless_acceptable_aaguids

    @property
    def web_authn_policy_passwordless_attestation_conveyance_preference(self):
        """Gets the web_authn_policy_passwordless_attestation_conveyance_preference of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_attestation_conveyance_preference of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_passwordless_attestation_conveyance_preference

    @web_authn_policy_passwordless_attestation_conveyance_preference.setter
    def web_authn_policy_passwordless_attestation_conveyance_preference(self, web_authn_policy_passwordless_attestation_conveyance_preference):
        """Sets the web_authn_policy_passwordless_attestation_conveyance_preference of this RealmRepresentation.


        :param web_authn_policy_passwordless_attestation_conveyance_preference: The web_authn_policy_passwordless_attestation_conveyance_preference of this RealmRepresentation.
        :type web_authn_policy_passwordless_attestation_conveyance_preference: str
        """

        self._web_authn_policy_passwordless_attestation_conveyance_preference = web_authn_policy_passwordless_attestation_conveyance_preference

    @property
    def web_authn_policy_passwordless_authenticator_attachment(self):
        """Gets the web_authn_policy_passwordless_authenticator_attachment of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_authenticator_attachment of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_passwordless_authenticator_attachment

    @web_authn_policy_passwordless_authenticator_attachment.setter
    def web_authn_policy_passwordless_authenticator_attachment(self, web_authn_policy_passwordless_authenticator_attachment):
        """Sets the web_authn_policy_passwordless_authenticator_attachment of this RealmRepresentation.


        :param web_authn_policy_passwordless_authenticator_attachment: The web_authn_policy_passwordless_authenticator_attachment of this RealmRepresentation.
        :type web_authn_policy_passwordless_authenticator_attachment: str
        """

        self._web_authn_policy_passwordless_authenticator_attachment = web_authn_policy_passwordless_authenticator_attachment

    @property
    def web_authn_policy_passwordless_avoid_same_authenticator_register(self):
        """Gets the web_authn_policy_passwordless_avoid_same_authenticator_register of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_avoid_same_authenticator_register of this RealmRepresentation.
        :rtype: bool
        """
        return self._web_authn_policy_passwordless_avoid_same_authenticator_register

    @web_authn_policy_passwordless_avoid_same_authenticator_register.setter
    def web_authn_policy_passwordless_avoid_same_authenticator_register(self, web_authn_policy_passwordless_avoid_same_authenticator_register):
        """Sets the web_authn_policy_passwordless_avoid_same_authenticator_register of this RealmRepresentation.


        :param web_authn_policy_passwordless_avoid_same_authenticator_register: The web_authn_policy_passwordless_avoid_same_authenticator_register of this RealmRepresentation.
        :type web_authn_policy_passwordless_avoid_same_authenticator_register: bool
        """

        self._web_authn_policy_passwordless_avoid_same_authenticator_register = web_authn_policy_passwordless_avoid_same_authenticator_register

    @property
    def web_authn_policy_passwordless_create_timeout(self):
        """Gets the web_authn_policy_passwordless_create_timeout of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_create_timeout of this RealmRepresentation.
        :rtype: int
        """
        return self._web_authn_policy_passwordless_create_timeout

    @web_authn_policy_passwordless_create_timeout.setter
    def web_authn_policy_passwordless_create_timeout(self, web_authn_policy_passwordless_create_timeout):
        """Sets the web_authn_policy_passwordless_create_timeout of this RealmRepresentation.


        :param web_authn_policy_passwordless_create_timeout: The web_authn_policy_passwordless_create_timeout of this RealmRepresentation.
        :type web_authn_policy_passwordless_create_timeout: int
        """

        self._web_authn_policy_passwordless_create_timeout = web_authn_policy_passwordless_create_timeout

    @property
    def web_authn_policy_passwordless_require_resident_key(self):
        """Gets the web_authn_policy_passwordless_require_resident_key of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_require_resident_key of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_passwordless_require_resident_key

    @web_authn_policy_passwordless_require_resident_key.setter
    def web_authn_policy_passwordless_require_resident_key(self, web_authn_policy_passwordless_require_resident_key):
        """Sets the web_authn_policy_passwordless_require_resident_key of this RealmRepresentation.


        :param web_authn_policy_passwordless_require_resident_key: The web_authn_policy_passwordless_require_resident_key of this RealmRepresentation.
        :type web_authn_policy_passwordless_require_resident_key: str
        """

        self._web_authn_policy_passwordless_require_resident_key = web_authn_policy_passwordless_require_resident_key

    @property
    def web_authn_policy_passwordless_rp_entity_name(self):
        """Gets the web_authn_policy_passwordless_rp_entity_name of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_rp_entity_name of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_passwordless_rp_entity_name

    @web_authn_policy_passwordless_rp_entity_name.setter
    def web_authn_policy_passwordless_rp_entity_name(self, web_authn_policy_passwordless_rp_entity_name):
        """Sets the web_authn_policy_passwordless_rp_entity_name of this RealmRepresentation.


        :param web_authn_policy_passwordless_rp_entity_name: The web_authn_policy_passwordless_rp_entity_name of this RealmRepresentation.
        :type web_authn_policy_passwordless_rp_entity_name: str
        """

        self._web_authn_policy_passwordless_rp_entity_name = web_authn_policy_passwordless_rp_entity_name

    @property
    def web_authn_policy_passwordless_rp_id(self):
        """Gets the web_authn_policy_passwordless_rp_id of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_rp_id of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_passwordless_rp_id

    @web_authn_policy_passwordless_rp_id.setter
    def web_authn_policy_passwordless_rp_id(self, web_authn_policy_passwordless_rp_id):
        """Sets the web_authn_policy_passwordless_rp_id of this RealmRepresentation.


        :param web_authn_policy_passwordless_rp_id: The web_authn_policy_passwordless_rp_id of this RealmRepresentation.
        :type web_authn_policy_passwordless_rp_id: str
        """

        self._web_authn_policy_passwordless_rp_id = web_authn_policy_passwordless_rp_id

    @property
    def web_authn_policy_passwordless_signature_algorithms(self):
        """Gets the web_authn_policy_passwordless_signature_algorithms of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_signature_algorithms of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._web_authn_policy_passwordless_signature_algorithms

    @web_authn_policy_passwordless_signature_algorithms.setter
    def web_authn_policy_passwordless_signature_algorithms(self, web_authn_policy_passwordless_signature_algorithms):
        """Sets the web_authn_policy_passwordless_signature_algorithms of this RealmRepresentation.


        :param web_authn_policy_passwordless_signature_algorithms: The web_authn_policy_passwordless_signature_algorithms of this RealmRepresentation.
        :type web_authn_policy_passwordless_signature_algorithms: List[str]
        """

        self._web_authn_policy_passwordless_signature_algorithms = web_authn_policy_passwordless_signature_algorithms

    @property
    def web_authn_policy_passwordless_user_verification_requirement(self):
        """Gets the web_authn_policy_passwordless_user_verification_requirement of this RealmRepresentation.


        :return: The web_authn_policy_passwordless_user_verification_requirement of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_passwordless_user_verification_requirement

    @web_authn_policy_passwordless_user_verification_requirement.setter
    def web_authn_policy_passwordless_user_verification_requirement(self, web_authn_policy_passwordless_user_verification_requirement):
        """Sets the web_authn_policy_passwordless_user_verification_requirement of this RealmRepresentation.


        :param web_authn_policy_passwordless_user_verification_requirement: The web_authn_policy_passwordless_user_verification_requirement of this RealmRepresentation.
        :type web_authn_policy_passwordless_user_verification_requirement: str
        """

        self._web_authn_policy_passwordless_user_verification_requirement = web_authn_policy_passwordless_user_verification_requirement

    @property
    def web_authn_policy_require_resident_key(self):
        """Gets the web_authn_policy_require_resident_key of this RealmRepresentation.


        :return: The web_authn_policy_require_resident_key of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_require_resident_key

    @web_authn_policy_require_resident_key.setter
    def web_authn_policy_require_resident_key(self, web_authn_policy_require_resident_key):
        """Sets the web_authn_policy_require_resident_key of this RealmRepresentation.


        :param web_authn_policy_require_resident_key: The web_authn_policy_require_resident_key of this RealmRepresentation.
        :type web_authn_policy_require_resident_key: str
        """

        self._web_authn_policy_require_resident_key = web_authn_policy_require_resident_key

    @property
    def web_authn_policy_rp_entity_name(self):
        """Gets the web_authn_policy_rp_entity_name of this RealmRepresentation.


        :return: The web_authn_policy_rp_entity_name of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_rp_entity_name

    @web_authn_policy_rp_entity_name.setter
    def web_authn_policy_rp_entity_name(self, web_authn_policy_rp_entity_name):
        """Sets the web_authn_policy_rp_entity_name of this RealmRepresentation.


        :param web_authn_policy_rp_entity_name: The web_authn_policy_rp_entity_name of this RealmRepresentation.
        :type web_authn_policy_rp_entity_name: str
        """

        self._web_authn_policy_rp_entity_name = web_authn_policy_rp_entity_name

    @property
    def web_authn_policy_rp_id(self):
        """Gets the web_authn_policy_rp_id of this RealmRepresentation.


        :return: The web_authn_policy_rp_id of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_rp_id

    @web_authn_policy_rp_id.setter
    def web_authn_policy_rp_id(self, web_authn_policy_rp_id):
        """Sets the web_authn_policy_rp_id of this RealmRepresentation.


        :param web_authn_policy_rp_id: The web_authn_policy_rp_id of this RealmRepresentation.
        :type web_authn_policy_rp_id: str
        """

        self._web_authn_policy_rp_id = web_authn_policy_rp_id

    @property
    def web_authn_policy_signature_algorithms(self):
        """Gets the web_authn_policy_signature_algorithms of this RealmRepresentation.


        :return: The web_authn_policy_signature_algorithms of this RealmRepresentation.
        :rtype: List[str]
        """
        return self._web_authn_policy_signature_algorithms

    @web_authn_policy_signature_algorithms.setter
    def web_authn_policy_signature_algorithms(self, web_authn_policy_signature_algorithms):
        """Sets the web_authn_policy_signature_algorithms of this RealmRepresentation.


        :param web_authn_policy_signature_algorithms: The web_authn_policy_signature_algorithms of this RealmRepresentation.
        :type web_authn_policy_signature_algorithms: List[str]
        """

        self._web_authn_policy_signature_algorithms = web_authn_policy_signature_algorithms

    @property
    def web_authn_policy_user_verification_requirement(self):
        """Gets the web_authn_policy_user_verification_requirement of this RealmRepresentation.


        :return: The web_authn_policy_user_verification_requirement of this RealmRepresentation.
        :rtype: str
        """
        return self._web_authn_policy_user_verification_requirement

    @web_authn_policy_user_verification_requirement.setter
    def web_authn_policy_user_verification_requirement(self, web_authn_policy_user_verification_requirement):
        """Sets the web_authn_policy_user_verification_requirement of this RealmRepresentation.


        :param web_authn_policy_user_verification_requirement: The web_authn_policy_user_verification_requirement of this RealmRepresentation.
        :type web_authn_policy_user_verification_requirement: str
        """

        self._web_authn_policy_user_verification_requirement = web_authn_policy_user_verification_requirement
