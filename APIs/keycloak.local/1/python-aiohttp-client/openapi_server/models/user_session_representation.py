# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserSessionRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clients: Dict[str, object]=None, id: str=None, ip_address: str=None, last_access: int=None, start: int=None, user_id: str=None, username: str=None):
        """UserSessionRepresentation - a model defined in OpenAPI

        :param clients: The clients of this UserSessionRepresentation.
        :param id: The id of this UserSessionRepresentation.
        :param ip_address: The ip_address of this UserSessionRepresentation.
        :param last_access: The last_access of this UserSessionRepresentation.
        :param start: The start of this UserSessionRepresentation.
        :param user_id: The user_id of this UserSessionRepresentation.
        :param username: The username of this UserSessionRepresentation.
        """
        self.openapi_types = {
            'clients': Dict[str, object],
            'id': str,
            'ip_address': str,
            'last_access': int,
            'start': int,
            'user_id': str,
            'username': str
        }

        self.attribute_map = {
            'clients': 'clients',
            'id': 'id',
            'ip_address': 'ipAddress',
            'last_access': 'lastAccess',
            'start': 'start',
            'user_id': 'userId',
            'username': 'username'
        }

        self._clients = clients
        self._id = id
        self._ip_address = ip_address
        self._last_access = last_access
        self._start = start
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserSessionRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserSessionRepresentation of this UserSessionRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clients(self):
        """Gets the clients of this UserSessionRepresentation.


        :return: The clients of this UserSessionRepresentation.
        :rtype: Dict[str, object]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this UserSessionRepresentation.


        :param clients: The clients of this UserSessionRepresentation.
        :type clients: Dict[str, object]
        """

        self._clients = clients

    @property
    def id(self):
        """Gets the id of this UserSessionRepresentation.


        :return: The id of this UserSessionRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSessionRepresentation.


        :param id: The id of this UserSessionRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this UserSessionRepresentation.


        :return: The ip_address of this UserSessionRepresentation.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this UserSessionRepresentation.


        :param ip_address: The ip_address of this UserSessionRepresentation.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def last_access(self):
        """Gets the last_access of this UserSessionRepresentation.


        :return: The last_access of this UserSessionRepresentation.
        :rtype: int
        """
        return self._last_access

    @last_access.setter
    def last_access(self, last_access):
        """Sets the last_access of this UserSessionRepresentation.


        :param last_access: The last_access of this UserSessionRepresentation.
        :type last_access: int
        """

        self._last_access = last_access

    @property
    def start(self):
        """Gets the start of this UserSessionRepresentation.


        :return: The start of this UserSessionRepresentation.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this UserSessionRepresentation.


        :param start: The start of this UserSessionRepresentation.
        :type start: int
        """

        self._start = start

    @property
    def user_id(self):
        """Gets the user_id of this UserSessionRepresentation.


        :return: The user_id of this UserSessionRepresentation.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserSessionRepresentation.


        :param user_id: The user_id of this UserSessionRepresentation.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this UserSessionRepresentation.


        :return: The username of this UserSessionRepresentation.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserSessionRepresentation.


        :param username: The username of this UserSessionRepresentation.
        :type username: str
        """

        self._username = username
