# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserFederationProviderRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changed_sync_period: int=None, config: Dict[str, object]=None, display_name: str=None, full_sync_period: int=None, id: str=None, last_sync: int=None, priority: int=None, provider_name: str=None):
        """UserFederationProviderRepresentation - a model defined in OpenAPI

        :param changed_sync_period: The changed_sync_period of this UserFederationProviderRepresentation.
        :param config: The config of this UserFederationProviderRepresentation.
        :param display_name: The display_name of this UserFederationProviderRepresentation.
        :param full_sync_period: The full_sync_period of this UserFederationProviderRepresentation.
        :param id: The id of this UserFederationProviderRepresentation.
        :param last_sync: The last_sync of this UserFederationProviderRepresentation.
        :param priority: The priority of this UserFederationProviderRepresentation.
        :param provider_name: The provider_name of this UserFederationProviderRepresentation.
        """
        self.openapi_types = {
            'changed_sync_period': int,
            'config': Dict[str, object],
            'display_name': str,
            'full_sync_period': int,
            'id': str,
            'last_sync': int,
            'priority': int,
            'provider_name': str
        }

        self.attribute_map = {
            'changed_sync_period': 'changedSyncPeriod',
            'config': 'config',
            'display_name': 'displayName',
            'full_sync_period': 'fullSyncPeriod',
            'id': 'id',
            'last_sync': 'lastSync',
            'priority': 'priority',
            'provider_name': 'providerName'
        }

        self._changed_sync_period = changed_sync_period
        self._config = config
        self._display_name = display_name
        self._full_sync_period = full_sync_period
        self._id = id
        self._last_sync = last_sync
        self._priority = priority
        self._provider_name = provider_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserFederationProviderRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserFederationProviderRepresentation of this UserFederationProviderRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changed_sync_period(self):
        """Gets the changed_sync_period of this UserFederationProviderRepresentation.


        :return: The changed_sync_period of this UserFederationProviderRepresentation.
        :rtype: int
        """
        return self._changed_sync_period

    @changed_sync_period.setter
    def changed_sync_period(self, changed_sync_period):
        """Sets the changed_sync_period of this UserFederationProviderRepresentation.


        :param changed_sync_period: The changed_sync_period of this UserFederationProviderRepresentation.
        :type changed_sync_period: int
        """

        self._changed_sync_period = changed_sync_period

    @property
    def config(self):
        """Gets the config of this UserFederationProviderRepresentation.


        :return: The config of this UserFederationProviderRepresentation.
        :rtype: Dict[str, object]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this UserFederationProviderRepresentation.


        :param config: The config of this UserFederationProviderRepresentation.
        :type config: Dict[str, object]
        """

        self._config = config

    @property
    def display_name(self):
        """Gets the display_name of this UserFederationProviderRepresentation.


        :return: The display_name of this UserFederationProviderRepresentation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserFederationProviderRepresentation.


        :param display_name: The display_name of this UserFederationProviderRepresentation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def full_sync_period(self):
        """Gets the full_sync_period of this UserFederationProviderRepresentation.


        :return: The full_sync_period of this UserFederationProviderRepresentation.
        :rtype: int
        """
        return self._full_sync_period

    @full_sync_period.setter
    def full_sync_period(self, full_sync_period):
        """Sets the full_sync_period of this UserFederationProviderRepresentation.


        :param full_sync_period: The full_sync_period of this UserFederationProviderRepresentation.
        :type full_sync_period: int
        """

        self._full_sync_period = full_sync_period

    @property
    def id(self):
        """Gets the id of this UserFederationProviderRepresentation.


        :return: The id of this UserFederationProviderRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserFederationProviderRepresentation.


        :param id: The id of this UserFederationProviderRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def last_sync(self):
        """Gets the last_sync of this UserFederationProviderRepresentation.


        :return: The last_sync of this UserFederationProviderRepresentation.
        :rtype: int
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this UserFederationProviderRepresentation.


        :param last_sync: The last_sync of this UserFederationProviderRepresentation.
        :type last_sync: int
        """

        self._last_sync = last_sync

    @property
    def priority(self):
        """Gets the priority of this UserFederationProviderRepresentation.


        :return: The priority of this UserFederationProviderRepresentation.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this UserFederationProviderRepresentation.


        :param priority: The priority of this UserFederationProviderRepresentation.
        :type priority: int
        """

        self._priority = priority

    @property
    def provider_name(self):
        """Gets the provider_name of this UserFederationProviderRepresentation.


        :return: The provider_name of this UserFederationProviderRepresentation.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this UserFederationProviderRepresentation.


        :param provider_name: The provider_name of this UserFederationProviderRepresentation.
        :type provider_name: str
        """

        self._provider_name = provider_name
