# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scope_representation import ScopeRepresentation
from openapi_server import util


class ResourceRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, object]=None, display_name: str=None, icon_uri: str=None, id: str=None, name: str=None, owner_managed_access: bool=None, scopes: List[ScopeRepresentation]=None, type: str=None, uris: List[str]=None):
        """ResourceRepresentation - a model defined in OpenAPI

        :param attributes: The attributes of this ResourceRepresentation.
        :param display_name: The display_name of this ResourceRepresentation.
        :param icon_uri: The icon_uri of this ResourceRepresentation.
        :param id: The id of this ResourceRepresentation.
        :param name: The name of this ResourceRepresentation.
        :param owner_managed_access: The owner_managed_access of this ResourceRepresentation.
        :param scopes: The scopes of this ResourceRepresentation.
        :param type: The type of this ResourceRepresentation.
        :param uris: The uris of this ResourceRepresentation.
        """
        self.openapi_types = {
            'attributes': Dict[str, object],
            'display_name': str,
            'icon_uri': str,
            'id': str,
            'name': str,
            'owner_managed_access': bool,
            'scopes': List[ScopeRepresentation],
            'type': str,
            'uris': List[str]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'display_name': 'displayName',
            'icon_uri': 'icon_uri',
            'id': 'id',
            'name': 'name',
            'owner_managed_access': 'ownerManagedAccess',
            'scopes': 'scopes',
            'type': 'type',
            'uris': 'uris'
        }

        self._attributes = attributes
        self._display_name = display_name
        self._icon_uri = icon_uri
        self._id = id
        self._name = name
        self._owner_managed_access = owner_managed_access
        self._scopes = scopes
        self._type = type
        self._uris = uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceRepresentation of this ResourceRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ResourceRepresentation.


        :return: The attributes of this ResourceRepresentation.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ResourceRepresentation.


        :param attributes: The attributes of this ResourceRepresentation.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def display_name(self):
        """Gets the display_name of this ResourceRepresentation.


        :return: The display_name of this ResourceRepresentation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ResourceRepresentation.


        :param display_name: The display_name of this ResourceRepresentation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def icon_uri(self):
        """Gets the icon_uri of this ResourceRepresentation.


        :return: The icon_uri of this ResourceRepresentation.
        :rtype: str
        """
        return self._icon_uri

    @icon_uri.setter
    def icon_uri(self, icon_uri):
        """Sets the icon_uri of this ResourceRepresentation.


        :param icon_uri: The icon_uri of this ResourceRepresentation.
        :type icon_uri: str
        """

        self._icon_uri = icon_uri

    @property
    def id(self):
        """Gets the id of this ResourceRepresentation.


        :return: The id of this ResourceRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceRepresentation.


        :param id: The id of this ResourceRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ResourceRepresentation.


        :return: The name of this ResourceRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceRepresentation.


        :param name: The name of this ResourceRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def owner_managed_access(self):
        """Gets the owner_managed_access of this ResourceRepresentation.


        :return: The owner_managed_access of this ResourceRepresentation.
        :rtype: bool
        """
        return self._owner_managed_access

    @owner_managed_access.setter
    def owner_managed_access(self, owner_managed_access):
        """Sets the owner_managed_access of this ResourceRepresentation.


        :param owner_managed_access: The owner_managed_access of this ResourceRepresentation.
        :type owner_managed_access: bool
        """

        self._owner_managed_access = owner_managed_access

    @property
    def scopes(self):
        """Gets the scopes of this ResourceRepresentation.


        :return: The scopes of this ResourceRepresentation.
        :rtype: List[ScopeRepresentation]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ResourceRepresentation.


        :param scopes: The scopes of this ResourceRepresentation.
        :type scopes: List[ScopeRepresentation]
        """

        self._scopes = scopes

    @property
    def type(self):
        """Gets the type of this ResourceRepresentation.


        :return: The type of this ResourceRepresentation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResourceRepresentation.


        :param type: The type of this ResourceRepresentation.
        :type type: str
        """

        self._type = type

    @property
    def uris(self):
        """Gets the uris of this ResourceRepresentation.


        :return: The uris of this ResourceRepresentation.
        :rtype: List[str]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this ResourceRepresentation.


        :param uris: The uris of this ResourceRepresentation.
        :type uris: List[str]
        """

        self._uris = uris
