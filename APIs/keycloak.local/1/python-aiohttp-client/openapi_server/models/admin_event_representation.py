# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_details_representation import AuthDetailsRepresentation
from openapi_server import util


class AdminEventRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_details: AuthDetailsRepresentation=None, error: str=None, operation_type: str=None, realm_id: str=None, representation: str=None, _resource_path: str=None, resource_type: str=None, time: int=None):
        """AdminEventRepresentation - a model defined in OpenAPI

        :param auth_details: The auth_details of this AdminEventRepresentation.
        :param error: The error of this AdminEventRepresentation.
        :param operation_type: The operation_type of this AdminEventRepresentation.
        :param realm_id: The realm_id of this AdminEventRepresentation.
        :param representation: The representation of this AdminEventRepresentation.
        :param _resource_path: The _resource_path of this AdminEventRepresentation.
        :param resource_type: The resource_type of this AdminEventRepresentation.
        :param time: The time of this AdminEventRepresentation.
        """
        self.openapi_types = {
            'auth_details': AuthDetailsRepresentation,
            'error': str,
            'operation_type': str,
            'realm_id': str,
            'representation': str,
            '_resource_path': str,
            'resource_type': str,
            'time': int
        }

        self.attribute_map = {
            'auth_details': 'authDetails',
            'error': 'error',
            'operation_type': 'operationType',
            'realm_id': 'realmId',
            'representation': 'representation',
            '_resource_path': 'resourcePath',
            'resource_type': 'resourceType',
            'time': 'time'
        }

        self._auth_details = auth_details
        self._error = error
        self._operation_type = operation_type
        self._realm_id = realm_id
        self._representation = representation
        self.__resource_path = _resource_path
        self._resource_type = resource_type
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminEventRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminEventRepresentation of this AdminEventRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_details(self):
        """Gets the auth_details of this AdminEventRepresentation.


        :return: The auth_details of this AdminEventRepresentation.
        :rtype: AuthDetailsRepresentation
        """
        return self._auth_details

    @auth_details.setter
    def auth_details(self, auth_details):
        """Sets the auth_details of this AdminEventRepresentation.


        :param auth_details: The auth_details of this AdminEventRepresentation.
        :type auth_details: AuthDetailsRepresentation
        """

        self._auth_details = auth_details

    @property
    def error(self):
        """Gets the error of this AdminEventRepresentation.


        :return: The error of this AdminEventRepresentation.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AdminEventRepresentation.


        :param error: The error of this AdminEventRepresentation.
        :type error: str
        """

        self._error = error

    @property
    def operation_type(self):
        """Gets the operation_type of this AdminEventRepresentation.


        :return: The operation_type of this AdminEventRepresentation.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this AdminEventRepresentation.


        :param operation_type: The operation_type of this AdminEventRepresentation.
        :type operation_type: str
        """

        self._operation_type = operation_type

    @property
    def realm_id(self):
        """Gets the realm_id of this AdminEventRepresentation.


        :return: The realm_id of this AdminEventRepresentation.
        :rtype: str
        """
        return self._realm_id

    @realm_id.setter
    def realm_id(self, realm_id):
        """Sets the realm_id of this AdminEventRepresentation.


        :param realm_id: The realm_id of this AdminEventRepresentation.
        :type realm_id: str
        """

        self._realm_id = realm_id

    @property
    def representation(self):
        """Gets the representation of this AdminEventRepresentation.


        :return: The representation of this AdminEventRepresentation.
        :rtype: str
        """
        return self._representation

    @representation.setter
    def representation(self, representation):
        """Sets the representation of this AdminEventRepresentation.


        :param representation: The representation of this AdminEventRepresentation.
        :type representation: str
        """

        self._representation = representation

    @property
    def _resource_path(self):
        """Gets the _resource_path of this AdminEventRepresentation.


        :return: The _resource_path of this AdminEventRepresentation.
        :rtype: str
        """
        return self.__resource_path

    @_resource_path.setter
    def _resource_path(self, _resource_path):
        """Sets the _resource_path of this AdminEventRepresentation.


        :param _resource_path: The _resource_path of this AdminEventRepresentation.
        :type _resource_path: str
        """

        self.__resource_path = _resource_path

    @property
    def resource_type(self):
        """Gets the resource_type of this AdminEventRepresentation.


        :return: The resource_type of this AdminEventRepresentation.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AdminEventRepresentation.


        :param resource_type: The resource_type of this AdminEventRepresentation.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def time(self):
        """Gets the time of this AdminEventRepresentation.


        :return: The time of this AdminEventRepresentation.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AdminEventRepresentation.


        :param time: The time of this AdminEventRepresentation.
        :type time: int
        """

        self._time = time
