# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client_representation import ClientRepresentation
from openapi_server.models.group_representation import GroupRepresentation
from openapi_server.models.identity_provider_representation import IdentityProviderRepresentation
from openapi_server.models.roles_representation import RolesRepresentation
from openapi_server.models.user_representation import UserRepresentation
from openapi_server import util


class PartialImportRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clients: List[ClientRepresentation]=None, groups: List[GroupRepresentation]=None, identity_providers: List[IdentityProviderRepresentation]=None, if_resource_exists: str=None, policy: str=None, roles: RolesRepresentation=None, users: List[UserRepresentation]=None):
        """PartialImportRepresentation - a model defined in OpenAPI

        :param clients: The clients of this PartialImportRepresentation.
        :param groups: The groups of this PartialImportRepresentation.
        :param identity_providers: The identity_providers of this PartialImportRepresentation.
        :param if_resource_exists: The if_resource_exists of this PartialImportRepresentation.
        :param policy: The policy of this PartialImportRepresentation.
        :param roles: The roles of this PartialImportRepresentation.
        :param users: The users of this PartialImportRepresentation.
        """
        self.openapi_types = {
            'clients': List[ClientRepresentation],
            'groups': List[GroupRepresentation],
            'identity_providers': List[IdentityProviderRepresentation],
            'if_resource_exists': str,
            'policy': str,
            'roles': RolesRepresentation,
            'users': List[UserRepresentation]
        }

        self.attribute_map = {
            'clients': 'clients',
            'groups': 'groups',
            'identity_providers': 'identityProviders',
            'if_resource_exists': 'ifResourceExists',
            'policy': 'policy',
            'roles': 'roles',
            'users': 'users'
        }

        self._clients = clients
        self._groups = groups
        self._identity_providers = identity_providers
        self._if_resource_exists = if_resource_exists
        self._policy = policy
        self._roles = roles
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartialImportRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartialImportRepresentation of this PartialImportRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clients(self):
        """Gets the clients of this PartialImportRepresentation.


        :return: The clients of this PartialImportRepresentation.
        :rtype: List[ClientRepresentation]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this PartialImportRepresentation.


        :param clients: The clients of this PartialImportRepresentation.
        :type clients: List[ClientRepresentation]
        """

        self._clients = clients

    @property
    def groups(self):
        """Gets the groups of this PartialImportRepresentation.


        :return: The groups of this PartialImportRepresentation.
        :rtype: List[GroupRepresentation]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this PartialImportRepresentation.


        :param groups: The groups of this PartialImportRepresentation.
        :type groups: List[GroupRepresentation]
        """

        self._groups = groups

    @property
    def identity_providers(self):
        """Gets the identity_providers of this PartialImportRepresentation.


        :return: The identity_providers of this PartialImportRepresentation.
        :rtype: List[IdentityProviderRepresentation]
        """
        return self._identity_providers

    @identity_providers.setter
    def identity_providers(self, identity_providers):
        """Sets the identity_providers of this PartialImportRepresentation.


        :param identity_providers: The identity_providers of this PartialImportRepresentation.
        :type identity_providers: List[IdentityProviderRepresentation]
        """

        self._identity_providers = identity_providers

    @property
    def if_resource_exists(self):
        """Gets the if_resource_exists of this PartialImportRepresentation.


        :return: The if_resource_exists of this PartialImportRepresentation.
        :rtype: str
        """
        return self._if_resource_exists

    @if_resource_exists.setter
    def if_resource_exists(self, if_resource_exists):
        """Sets the if_resource_exists of this PartialImportRepresentation.


        :param if_resource_exists: The if_resource_exists of this PartialImportRepresentation.
        :type if_resource_exists: str
        """

        self._if_resource_exists = if_resource_exists

    @property
    def policy(self):
        """Gets the policy of this PartialImportRepresentation.


        :return: The policy of this PartialImportRepresentation.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PartialImportRepresentation.


        :param policy: The policy of this PartialImportRepresentation.
        :type policy: str
        """
        allowed_values = ["SKIP", "OVERWRITE", "FAIL"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def roles(self):
        """Gets the roles of this PartialImportRepresentation.


        :return: The roles of this PartialImportRepresentation.
        :rtype: RolesRepresentation
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this PartialImportRepresentation.


        :param roles: The roles of this PartialImportRepresentation.
        :type roles: RolesRepresentation
        """

        self._roles = roles

    @property
    def users(self):
        """Gets the users of this PartialImportRepresentation.


        :return: The users of this PartialImportRepresentation.
        :rtype: List[UserRepresentation]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this PartialImportRepresentation.


        :param users: The users of this PartialImportRepresentation.
        :type users: List[UserRepresentation]
        """

        self._users = users
