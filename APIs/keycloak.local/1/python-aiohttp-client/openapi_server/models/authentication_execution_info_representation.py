# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthenticationExecutionInfoRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, authentication_config: str=None, authentication_flow: bool=None, configurable: bool=None, display_name: str=None, flow_id: str=None, id: str=None, index: int=None, level: int=None, provider_id: str=None, requirement: str=None, requirement_choices: List[str]=None):
        """AuthenticationExecutionInfoRepresentation - a model defined in OpenAPI

        :param alias: The alias of this AuthenticationExecutionInfoRepresentation.
        :param authentication_config: The authentication_config of this AuthenticationExecutionInfoRepresentation.
        :param authentication_flow: The authentication_flow of this AuthenticationExecutionInfoRepresentation.
        :param configurable: The configurable of this AuthenticationExecutionInfoRepresentation.
        :param display_name: The display_name of this AuthenticationExecutionInfoRepresentation.
        :param flow_id: The flow_id of this AuthenticationExecutionInfoRepresentation.
        :param id: The id of this AuthenticationExecutionInfoRepresentation.
        :param index: The index of this AuthenticationExecutionInfoRepresentation.
        :param level: The level of this AuthenticationExecutionInfoRepresentation.
        :param provider_id: The provider_id of this AuthenticationExecutionInfoRepresentation.
        :param requirement: The requirement of this AuthenticationExecutionInfoRepresentation.
        :param requirement_choices: The requirement_choices of this AuthenticationExecutionInfoRepresentation.
        """
        self.openapi_types = {
            'alias': str,
            'authentication_config': str,
            'authentication_flow': bool,
            'configurable': bool,
            'display_name': str,
            'flow_id': str,
            'id': str,
            'index': int,
            'level': int,
            'provider_id': str,
            'requirement': str,
            'requirement_choices': List[str]
        }

        self.attribute_map = {
            'alias': 'alias',
            'authentication_config': 'authenticationConfig',
            'authentication_flow': 'authenticationFlow',
            'configurable': 'configurable',
            'display_name': 'displayName',
            'flow_id': 'flowId',
            'id': 'id',
            'index': 'index',
            'level': 'level',
            'provider_id': 'providerId',
            'requirement': 'requirement',
            'requirement_choices': 'requirementChoices'
        }

        self._alias = alias
        self._authentication_config = authentication_config
        self._authentication_flow = authentication_flow
        self._configurable = configurable
        self._display_name = display_name
        self._flow_id = flow_id
        self._id = id
        self._index = index
        self._level = level
        self._provider_id = provider_id
        self._requirement = requirement
        self._requirement_choices = requirement_choices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationExecutionInfoRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationExecutionInfoRepresentation of this AuthenticationExecutionInfoRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this AuthenticationExecutionInfoRepresentation.


        :return: The alias of this AuthenticationExecutionInfoRepresentation.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this AuthenticationExecutionInfoRepresentation.


        :param alias: The alias of this AuthenticationExecutionInfoRepresentation.
        :type alias: str
        """

        self._alias = alias

    @property
    def authentication_config(self):
        """Gets the authentication_config of this AuthenticationExecutionInfoRepresentation.


        :return: The authentication_config of this AuthenticationExecutionInfoRepresentation.
        :rtype: str
        """
        return self._authentication_config

    @authentication_config.setter
    def authentication_config(self, authentication_config):
        """Sets the authentication_config of this AuthenticationExecutionInfoRepresentation.


        :param authentication_config: The authentication_config of this AuthenticationExecutionInfoRepresentation.
        :type authentication_config: str
        """

        self._authentication_config = authentication_config

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this AuthenticationExecutionInfoRepresentation.


        :return: The authentication_flow of this AuthenticationExecutionInfoRepresentation.
        :rtype: bool
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this AuthenticationExecutionInfoRepresentation.


        :param authentication_flow: The authentication_flow of this AuthenticationExecutionInfoRepresentation.
        :type authentication_flow: bool
        """

        self._authentication_flow = authentication_flow

    @property
    def configurable(self):
        """Gets the configurable of this AuthenticationExecutionInfoRepresentation.


        :return: The configurable of this AuthenticationExecutionInfoRepresentation.
        :rtype: bool
        """
        return self._configurable

    @configurable.setter
    def configurable(self, configurable):
        """Sets the configurable of this AuthenticationExecutionInfoRepresentation.


        :param configurable: The configurable of this AuthenticationExecutionInfoRepresentation.
        :type configurable: bool
        """

        self._configurable = configurable

    @property
    def display_name(self):
        """Gets the display_name of this AuthenticationExecutionInfoRepresentation.


        :return: The display_name of this AuthenticationExecutionInfoRepresentation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AuthenticationExecutionInfoRepresentation.


        :param display_name: The display_name of this AuthenticationExecutionInfoRepresentation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def flow_id(self):
        """Gets the flow_id of this AuthenticationExecutionInfoRepresentation.


        :return: The flow_id of this AuthenticationExecutionInfoRepresentation.
        :rtype: str
        """
        return self._flow_id

    @flow_id.setter
    def flow_id(self, flow_id):
        """Sets the flow_id of this AuthenticationExecutionInfoRepresentation.


        :param flow_id: The flow_id of this AuthenticationExecutionInfoRepresentation.
        :type flow_id: str
        """

        self._flow_id = flow_id

    @property
    def id(self):
        """Gets the id of this AuthenticationExecutionInfoRepresentation.


        :return: The id of this AuthenticationExecutionInfoRepresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthenticationExecutionInfoRepresentation.


        :param id: The id of this AuthenticationExecutionInfoRepresentation.
        :type id: str
        """

        self._id = id

    @property
    def index(self):
        """Gets the index of this AuthenticationExecutionInfoRepresentation.


        :return: The index of this AuthenticationExecutionInfoRepresentation.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AuthenticationExecutionInfoRepresentation.


        :param index: The index of this AuthenticationExecutionInfoRepresentation.
        :type index: int
        """

        self._index = index

    @property
    def level(self):
        """Gets the level of this AuthenticationExecutionInfoRepresentation.


        :return: The level of this AuthenticationExecutionInfoRepresentation.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AuthenticationExecutionInfoRepresentation.


        :param level: The level of this AuthenticationExecutionInfoRepresentation.
        :type level: int
        """

        self._level = level

    @property
    def provider_id(self):
        """Gets the provider_id of this AuthenticationExecutionInfoRepresentation.


        :return: The provider_id of this AuthenticationExecutionInfoRepresentation.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this AuthenticationExecutionInfoRepresentation.


        :param provider_id: The provider_id of this AuthenticationExecutionInfoRepresentation.
        :type provider_id: str
        """

        self._provider_id = provider_id

    @property
    def requirement(self):
        """Gets the requirement of this AuthenticationExecutionInfoRepresentation.


        :return: The requirement of this AuthenticationExecutionInfoRepresentation.
        :rtype: str
        """
        return self._requirement

    @requirement.setter
    def requirement(self, requirement):
        """Sets the requirement of this AuthenticationExecutionInfoRepresentation.


        :param requirement: The requirement of this AuthenticationExecutionInfoRepresentation.
        :type requirement: str
        """

        self._requirement = requirement

    @property
    def requirement_choices(self):
        """Gets the requirement_choices of this AuthenticationExecutionInfoRepresentation.


        :return: The requirement_choices of this AuthenticationExecutionInfoRepresentation.
        :rtype: List[str]
        """
        return self._requirement_choices

    @requirement_choices.setter
    def requirement_choices(self, requirement_choices):
        """Sets the requirement_choices of this AuthenticationExecutionInfoRepresentation.


        :param requirement_choices: The requirement_choices of this AuthenticationExecutionInfoRepresentation.
        :type requirement_choices: List[str]
        """

        self._requirement_choices = requirement_choices
