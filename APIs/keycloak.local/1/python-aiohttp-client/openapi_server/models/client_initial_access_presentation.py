# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientInitialAccessPresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, expiration: int=None, id: str=None, remaining_count: int=None, timestamp: int=None, token: str=None):
        """ClientInitialAccessPresentation - a model defined in OpenAPI

        :param count: The count of this ClientInitialAccessPresentation.
        :param expiration: The expiration of this ClientInitialAccessPresentation.
        :param id: The id of this ClientInitialAccessPresentation.
        :param remaining_count: The remaining_count of this ClientInitialAccessPresentation.
        :param timestamp: The timestamp of this ClientInitialAccessPresentation.
        :param token: The token of this ClientInitialAccessPresentation.
        """
        self.openapi_types = {
            'count': int,
            'expiration': int,
            'id': str,
            'remaining_count': int,
            'timestamp': int,
            'token': str
        }

        self.attribute_map = {
            'count': 'count',
            'expiration': 'expiration',
            'id': 'id',
            'remaining_count': 'remainingCount',
            'timestamp': 'timestamp',
            'token': 'token'
        }

        self._count = count
        self._expiration = expiration
        self._id = id
        self._remaining_count = remaining_count
        self._timestamp = timestamp
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientInitialAccessPresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientInitialAccessPresentation of this ClientInitialAccessPresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ClientInitialAccessPresentation.


        :return: The count of this ClientInitialAccessPresentation.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ClientInitialAccessPresentation.


        :param count: The count of this ClientInitialAccessPresentation.
        :type count: int
        """

        self._count = count

    @property
    def expiration(self):
        """Gets the expiration of this ClientInitialAccessPresentation.


        :return: The expiration of this ClientInitialAccessPresentation.
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ClientInitialAccessPresentation.


        :param expiration: The expiration of this ClientInitialAccessPresentation.
        :type expiration: int
        """

        self._expiration = expiration

    @property
    def id(self):
        """Gets the id of this ClientInitialAccessPresentation.


        :return: The id of this ClientInitialAccessPresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientInitialAccessPresentation.


        :param id: The id of this ClientInitialAccessPresentation.
        :type id: str
        """

        self._id = id

    @property
    def remaining_count(self):
        """Gets the remaining_count of this ClientInitialAccessPresentation.


        :return: The remaining_count of this ClientInitialAccessPresentation.
        :rtype: int
        """
        return self._remaining_count

    @remaining_count.setter
    def remaining_count(self, remaining_count):
        """Sets the remaining_count of this ClientInitialAccessPresentation.


        :param remaining_count: The remaining_count of this ClientInitialAccessPresentation.
        :type remaining_count: int
        """

        self._remaining_count = remaining_count

    @property
    def timestamp(self):
        """Gets the timestamp of this ClientInitialAccessPresentation.


        :return: The timestamp of this ClientInitialAccessPresentation.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ClientInitialAccessPresentation.


        :param timestamp: The timestamp of this ClientInitialAccessPresentation.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def token(self):
        """Gets the token of this ClientInitialAccessPresentation.


        :return: The token of this ClientInitialAccessPresentation.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ClientInitialAccessPresentation.


        :param token: The token of this ClientInitialAccessPresentation.
        :type token: str
        """

        self._token = token
