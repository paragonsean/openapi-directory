/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GroupRepresentation from '../model/GroupRepresentation';
import ManagementPermissionReference from '../model/ManagementPermissionReference';
import UserRepresentation from '../model/UserRepresentation';

/**
* Groups service.
* @module api/GroupsApi
* @version 1
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmGroupsCountGet operation.
     * @callback module:api/GroupsApi~realmGroupsCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the groups counts.
     * @param {String} realm realm name (not id!)
     * @param {Object} opts Optional parameters
     * @param {String} [search] 
     * @param {Boolean} [top] 
     * @param {module:api/GroupsApi~realmGroupsCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    realmGroupsCountGet(realm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsCountGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
        'search': opts['search'],
        'top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/{realm}/groups/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsGet operation.
     * @callback module:api/GroupsApi~realmGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group hierarchy.
     * @param {String} realm realm name (not id!)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [briefRepresentation] 
     * @param {Number} [first] 
     * @param {Number} [max] 
     * @param {String} [search] 
     * @param {module:api/GroupsApi~realmGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupRepresentation>}
     */
    realmGroupsGet(realm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
        'briefRepresentation': opts['briefRepresentation'],
        'first': opts['first'],
        'max': opts['max'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupRepresentation];
      return this.apiClient.callApi(
        '/{realm}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdChildrenPost operation.
     * @callback module:api/GroupsApi~realmGroupsIdChildrenPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set or create child.
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:model/GroupRepresentation} groupRepresentation 
     * @param {module:api/GroupsApi~realmGroupsIdChildrenPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmGroupsIdChildrenPost(realm, id, groupRepresentation, callback) {
      let postBody = groupRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdChildrenPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdChildrenPost");
      }
      // verify the required parameter 'groupRepresentation' is set
      if (groupRepresentation === undefined || groupRepresentation === null) {
        throw new Error("Missing the required parameter 'groupRepresentation' when calling realmGroupsIdChildrenPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdDelete operation.
     * @callback module:api/GroupsApi~realmGroupsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/GroupsApi~realmGroupsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmGroupsIdDelete(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdGet operation.
     * @callback module:api/GroupsApi~realmGroupsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/GroupsApi~realmGroupsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupRepresentation}
     */
    realmGroupsIdGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupRepresentation;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdManagementPermissionsGet operation.
     * @callback module:api/GroupsApi~realmGroupsIdManagementPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/GroupsApi~realmGroupsIdManagementPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmGroupsIdManagementPermissionsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdManagementPermissionsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdManagementPermissionsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/management/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdManagementPermissionsPut operation.
     * @callback module:api/GroupsApi~realmGroupsIdManagementPermissionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:model/ManagementPermissionReference} managementPermissionReference 
     * @param {module:api/GroupsApi~realmGroupsIdManagementPermissionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmGroupsIdManagementPermissionsPut(realm, id, managementPermissionReference, callback) {
      let postBody = managementPermissionReference;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdManagementPermissionsPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdManagementPermissionsPut");
      }
      // verify the required parameter 'managementPermissionReference' is set
      if (managementPermissionReference === undefined || managementPermissionReference === null) {
        throw new Error("Missing the required parameter 'managementPermissionReference' when calling realmGroupsIdManagementPermissionsPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/management/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdMembersGet operation.
     * @callback module:api/GroupsApi~realmGroupsIdMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users   Returns a list of users, filtered according to query parameters
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [briefRepresentation] Only return basic information (only guaranteed to return id, username, created, first and last name,  email, enabled state, email verification state, federation link, and access.  Note that it means that namely user attributes, required actions, and not before are not returned.)
     * @param {Number} [first] Pagination offset
     * @param {Number} [max] Maximum results size (defaults to 100)
     * @param {module:api/GroupsApi~realmGroupsIdMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserRepresentation>}
     */
    realmGroupsIdMembersGet(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdMembersGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdMembersGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'briefRepresentation': opts['briefRepresentation'],
        'first': opts['first'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserRepresentation];
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdPut operation.
     * @callback module:api/GroupsApi~realmGroupsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update group, ignores subgroups.
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:model/GroupRepresentation} groupRepresentation 
     * @param {module:api/GroupsApi~realmGroupsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmGroupsIdPut(realm, id, groupRepresentation, callback) {
      let postBody = groupRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdPut");
      }
      // verify the required parameter 'groupRepresentation' is set
      if (groupRepresentation === undefined || groupRepresentation === null) {
        throw new Error("Missing the required parameter 'groupRepresentation' when calling realmGroupsIdPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsPost operation.
     * @callback module:api/GroupsApi~realmGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create or add a top level realm groupSet or create child.
     * @param {String} realm realm name (not id!)
     * @param {module:model/GroupRepresentation} groupRepresentation 
     * @param {module:api/GroupsApi~realmGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmGroupsPost(realm, groupRepresentation, callback) {
      let postBody = groupRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsPost");
      }
      // verify the required parameter 'groupRepresentation' is set
      if (groupRepresentation === undefined || groupRepresentation === null) {
        throw new Error("Missing the required parameter 'groupRepresentation' when calling realmGroupsPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
