/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GroupRepresentation from '../model/GroupRepresentation';
import ManagementPermissionReference from '../model/ManagementPermissionReference';
import RoleRepresentation from '../model/RoleRepresentation';
import UserRepresentation from '../model/UserRepresentation';

/**
* Roles service.
* @module api/RolesApi
* @version 1
*/
export default class RolesApi {

    /**
    * Constructs a new RolesApi. 
    * @alias module:api/RolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmClientsIdRolesGet operation.
     * @callback module:api/RolesApi~realmClientsIdRolesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles for the realm or client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [briefRepresentation] 
     * @param {Number} [first] 
     * @param {Number} [max] 
     * @param {String} [search] 
     * @param {module:api/RolesApi~realmClientsIdRolesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdRolesGet(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'briefRepresentation': opts['briefRepresentation'],
        'first': opts['first'],
        'max': opts['max'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesPost operation.
     * @callback module:api/RolesApi~realmClientsIdRolesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new role for the realm or client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:model/RoleRepresentation} roleRepresentation 
     * @param {module:api/RolesApi~realmClientsIdRolesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdRolesPost(realm, id, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientsIdRolesPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameCompositesClientsClientGet operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameCompositesClientsClientGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An app-level roles for the specified app for the role’s composite
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName role’s name (not id!)
     * @param {String} client 
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameCompositesClientsClientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdRolesRoleNameCompositesClientsClientGet(realm, id, roleName, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesClientsClientGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesClientsClientGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesClientsClientGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientsIdRolesRoleNameCompositesClientsClientGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}/composites/clients/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameCompositesDelete operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameCompositesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove roles from the role’s composite
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName role’s name (not id!)
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation roles to remove
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameCompositesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdRolesRoleNameCompositesDelete(realm, id, roleName, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesDelete");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientsIdRolesRoleNameCompositesDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}/composites', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameCompositesGet operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameCompositesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get composites of the role
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName role’s name (not id!)
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameCompositesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdRolesRoleNameCompositesGet(realm, id, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}/composites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameCompositesPost operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameCompositesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a composite to the role
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName role’s name (not id!)
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameCompositesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdRolesRoleNameCompositesPost(realm, id, roleName, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesPost");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientsIdRolesRoleNameCompositesPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}/composites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameCompositesRealmGet operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameCompositesRealmGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level roles of the role’s composite
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName role’s name (not id!)
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameCompositesRealmGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdRolesRoleNameCompositesRealmGet(realm, id, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameCompositesRealmGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameCompositesRealmGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameCompositesRealmGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}/composites/realm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameDelete operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role by name
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName role’s name (not id!)
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdRolesRoleNameDelete(realm, id, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameDelete");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameGet operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role by name
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName role’s name (not id!)
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleRepresentation}
     */
    realmClientsIdRolesRoleNameGet(realm, id, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameGroupsGet operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return List of Groups that have the specified role name
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [briefRepresentation] if false, return a full representation of the GroupRepresentation objects
     * @param {Number} [first] 
     * @param {Number} [max] 
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupRepresentation>}
     */
    realmClientsIdRolesRoleNameGroupsGet(realm, id, roleName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameGroupsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameGroupsGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameGroupsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
        'briefRepresentation': opts['briefRepresentation'],
        'first': opts['first'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameManagementPermissionsGet operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameManagementPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName 
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameManagementPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmClientsIdRolesRoleNameManagementPermissionsGet(realm, id, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameManagementPermissionsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameManagementPermissionsGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameManagementPermissionsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}/management/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameManagementPermissionsPut operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameManagementPermissionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName 
     * @param {module:model/ManagementPermissionReference} managementPermissionReference 
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameManagementPermissionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmClientsIdRolesRoleNameManagementPermissionsPut(realm, id, roleName, managementPermissionReference, callback) {
      let postBody = managementPermissionReference;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameManagementPermissionsPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameManagementPermissionsPut");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameManagementPermissionsPut");
      }
      // verify the required parameter 'managementPermissionReference' is set
      if (managementPermissionReference === undefined || managementPermissionReference === null) {
        throw new Error("Missing the required parameter 'managementPermissionReference' when calling realmClientsIdRolesRoleNameManagementPermissionsPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}/management/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNamePut operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role by name
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName role’s name (not id!)
     * @param {module:model/RoleRepresentation} roleRepresentation 
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdRolesRoleNamePut(realm, id, roleName, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNamePut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNamePut");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNamePut");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientsIdRolesRoleNamePut");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRolesRoleNameUsersGet operation.
     * @callback module:api/RolesApi~realmClientsIdRolesRoleNameUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return List of Users that have the specified role name
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleName 
     * @param {Object} opts Optional parameters
     * @param {Number} [first] 
     * @param {Number} [max] 
     * @param {module:api/RolesApi~realmClientsIdRolesRoleNameUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserRepresentation>}
     */
    realmClientsIdRolesRoleNameUsersGet(realm, id, roleName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRolesRoleNameUsersGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRolesRoleNameUsersGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmClientsIdRolesRoleNameUsersGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'role-name': roleName
      };
      let queryParams = {
        'first': opts['first'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/roles/{role-name}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesGet operation.
     * @callback module:api/RolesApi~realmRolesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles for the realm or client
     * @param {String} realm realm name (not id!)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [briefRepresentation] 
     * @param {Number} [first] 
     * @param {Number} [max] 
     * @param {String} [search] 
     * @param {module:api/RolesApi~realmRolesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmRolesGet(realm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
        'briefRepresentation': opts['briefRepresentation'],
        'first': opts['first'],
        'max': opts['max'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesPost operation.
     * @callback module:api/RolesApi~realmRolesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new role for the realm or client
     * @param {String} realm realm name (not id!)
     * @param {module:model/RoleRepresentation} roleRepresentation 
     * @param {module:api/RolesApi~realmRolesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmRolesPost(realm, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmRolesPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameCompositesClientsClientGet operation.
     * @callback module:api/RolesApi~realmRolesRoleNameCompositesClientsClientGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An app-level roles for the specified app for the role’s composite
     * @param {String} realm realm name (not id!)
     * @param {String} roleName role’s name (not id!)
     * @param {String} client 
     * @param {module:api/RolesApi~realmRolesRoleNameCompositesClientsClientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmRolesRoleNameCompositesClientsClientGet(realm, roleName, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesClientsClientGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesClientsClientGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmRolesRoleNameCompositesClientsClientGet");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}/composites/clients/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameCompositesDelete operation.
     * @callback module:api/RolesApi~realmRolesRoleNameCompositesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove roles from the role’s composite
     * @param {String} realm realm name (not id!)
     * @param {String} roleName role’s name (not id!)
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation roles to remove
     * @param {module:api/RolesApi~realmRolesRoleNameCompositesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmRolesRoleNameCompositesDelete(realm, roleName, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesDelete");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmRolesRoleNameCompositesDelete");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}/composites', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameCompositesGet operation.
     * @callback module:api/RolesApi~realmRolesRoleNameCompositesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get composites of the role
     * @param {String} realm realm name (not id!)
     * @param {String} roleName role’s name (not id!)
     * @param {module:api/RolesApi~realmRolesRoleNameCompositesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmRolesRoleNameCompositesGet(realm, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesGet");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}/composites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameCompositesPost operation.
     * @callback module:api/RolesApi~realmRolesRoleNameCompositesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a composite to the role
     * @param {String} realm realm name (not id!)
     * @param {String} roleName role’s name (not id!)
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/RolesApi~realmRolesRoleNameCompositesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmRolesRoleNameCompositesPost(realm, roleName, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesPost");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmRolesRoleNameCompositesPost");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}/composites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameCompositesRealmGet operation.
     * @callback module:api/RolesApi~realmRolesRoleNameCompositesRealmGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level roles of the role’s composite
     * @param {String} realm realm name (not id!)
     * @param {String} roleName role’s name (not id!)
     * @param {module:api/RolesApi~realmRolesRoleNameCompositesRealmGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmRolesRoleNameCompositesRealmGet(realm, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameCompositesRealmGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameCompositesRealmGet");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}/composites/realm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameDelete operation.
     * @callback module:api/RolesApi~realmRolesRoleNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role by name
     * @param {String} realm realm name (not id!)
     * @param {String} roleName role’s name (not id!)
     * @param {module:api/RolesApi~realmRolesRoleNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmRolesRoleNameDelete(realm, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameDelete");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameDelete");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameGet operation.
     * @callback module:api/RolesApi~realmRolesRoleNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role by name
     * @param {String} realm realm name (not id!)
     * @param {String} roleName role’s name (not id!)
     * @param {module:api/RolesApi~realmRolesRoleNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleRepresentation}
     */
    realmRolesRoleNameGet(realm, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameGet");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleRepresentation;
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameGroupsGet operation.
     * @callback module:api/RolesApi~realmRolesRoleNameGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return List of Groups that have the specified role name
     * @param {String} realm realm name (not id!)
     * @param {String} roleName 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [briefRepresentation] if false, return a full representation of the GroupRepresentation objects
     * @param {Number} [first] 
     * @param {Number} [max] 
     * @param {module:api/RolesApi~realmRolesRoleNameGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupRepresentation>}
     */
    realmRolesRoleNameGroupsGet(realm, roleName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameGroupsGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameGroupsGet");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
        'briefRepresentation': opts['briefRepresentation'],
        'first': opts['first'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupRepresentation];
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameManagementPermissionsGet operation.
     * @callback module:api/RolesApi~realmRolesRoleNameManagementPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} roleName 
     * @param {module:api/RolesApi~realmRolesRoleNameManagementPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmRolesRoleNameManagementPermissionsGet(realm, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameManagementPermissionsGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameManagementPermissionsGet");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}/management/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameManagementPermissionsPut operation.
     * @callback module:api/RolesApi~realmRolesRoleNameManagementPermissionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} roleName 
     * @param {module:model/ManagementPermissionReference} managementPermissionReference 
     * @param {module:api/RolesApi~realmRolesRoleNameManagementPermissionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmRolesRoleNameManagementPermissionsPut(realm, roleName, managementPermissionReference, callback) {
      let postBody = managementPermissionReference;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameManagementPermissionsPut");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameManagementPermissionsPut");
      }
      // verify the required parameter 'managementPermissionReference' is set
      if (managementPermissionReference === undefined || managementPermissionReference === null) {
        throw new Error("Missing the required parameter 'managementPermissionReference' when calling realmRolesRoleNameManagementPermissionsPut");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}/management/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNamePut operation.
     * @callback module:api/RolesApi~realmRolesRoleNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role by name
     * @param {String} realm realm name (not id!)
     * @param {String} roleName role’s name (not id!)
     * @param {module:model/RoleRepresentation} roleRepresentation 
     * @param {module:api/RolesApi~realmRolesRoleNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmRolesRoleNamePut(realm, roleName, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNamePut");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNamePut");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmRolesRoleNamePut");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesRoleNameUsersGet operation.
     * @callback module:api/RolesApi~realmRolesRoleNameUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return List of Users that have the specified role name
     * @param {String} realm realm name (not id!)
     * @param {String} roleName 
     * @param {Object} opts Optional parameters
     * @param {Number} [first] 
     * @param {Number} [max] 
     * @param {module:api/RolesApi~realmRolesRoleNameUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserRepresentation>}
     */
    realmRolesRoleNameUsersGet(realm, roleName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesRoleNameUsersGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling realmRolesRoleNameUsersGet");
      }

      let pathParams = {
        'realm': realm,
        'role-name': roleName
      };
      let queryParams = {
        'first': opts['first'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserRepresentation];
      return this.apiClient.callApi(
        '/{realm}/roles/{role-name}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
