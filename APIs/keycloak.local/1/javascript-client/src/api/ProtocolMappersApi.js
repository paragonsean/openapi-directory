/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProtocolMapperRepresentation from '../model/ProtocolMapperRepresentation';

/**
* ProtocolMappers service.
* @module api/ProtocolMappersApi
* @version 1
*/
export default class ProtocolMappersApi {

    /**
    * Constructs a new ProtocolMappersApi. 
    * @alias module:api/ProtocolMappersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmClientScopesId1ProtocolMappersModelsId2Delete operation.
     * @callback module:api/ProtocolMappersApi~realmClientScopesId1ProtocolMappersModelsId2DeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the mapper
     * @param {String} realm realm name (not id!)
     * @param {String} id1 
     * @param {String} id2 
     * @param {module:api/ProtocolMappersApi~realmClientScopesId1ProtocolMappersModelsId2DeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesId1ProtocolMappersModelsId2Delete(realm, id1, id2, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesId1ProtocolMappersModelsId2Delete");
      }
      // verify the required parameter 'id1' is set
      if (id1 === undefined || id1 === null) {
        throw new Error("Missing the required parameter 'id1' when calling realmClientScopesId1ProtocolMappersModelsId2Delete");
      }
      // verify the required parameter 'id2' is set
      if (id2 === undefined || id2 === null) {
        throw new Error("Missing the required parameter 'id2' when calling realmClientScopesId1ProtocolMappersModelsId2Delete");
      }

      let pathParams = {
        'realm': realm,
        'id1': id1,
        'id2': id2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesId1ProtocolMappersModelsId2Get operation.
     * @callback module:api/ProtocolMappersApi~realmClientScopesId1ProtocolMappersModelsId2GetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtocolMapperRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mapper by id
     * @param {String} realm realm name (not id!)
     * @param {String} id1 
     * @param {String} id2 
     * @param {module:api/ProtocolMappersApi~realmClientScopesId1ProtocolMappersModelsId2GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtocolMapperRepresentation}
     */
    realmClientScopesId1ProtocolMappersModelsId2Get(realm, id1, id2, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesId1ProtocolMappersModelsId2Get");
      }
      // verify the required parameter 'id1' is set
      if (id1 === undefined || id1 === null) {
        throw new Error("Missing the required parameter 'id1' when calling realmClientScopesId1ProtocolMappersModelsId2Get");
      }
      // verify the required parameter 'id2' is set
      if (id2 === undefined || id2 === null) {
        throw new Error("Missing the required parameter 'id2' when calling realmClientScopesId1ProtocolMappersModelsId2Get");
      }

      let pathParams = {
        'realm': realm,
        'id1': id1,
        'id2': id2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtocolMapperRepresentation;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesId1ProtocolMappersModelsId2Put operation.
     * @callback module:api/ProtocolMappersApi~realmClientScopesId1ProtocolMappersModelsId2PutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the mapper
     * @param {String} realm realm name (not id!)
     * @param {String} id1 
     * @param {String} id2 
     * @param {module:model/ProtocolMapperRepresentation} protocolMapperRepresentation 
     * @param {module:api/ProtocolMappersApi~realmClientScopesId1ProtocolMappersModelsId2PutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesId1ProtocolMappersModelsId2Put(realm, id1, id2, protocolMapperRepresentation, callback) {
      let postBody = protocolMapperRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesId1ProtocolMappersModelsId2Put");
      }
      // verify the required parameter 'id1' is set
      if (id1 === undefined || id1 === null) {
        throw new Error("Missing the required parameter 'id1' when calling realmClientScopesId1ProtocolMappersModelsId2Put");
      }
      // verify the required parameter 'id2' is set
      if (id2 === undefined || id2 === null) {
        throw new Error("Missing the required parameter 'id2' when calling realmClientScopesId1ProtocolMappersModelsId2Put");
      }
      // verify the required parameter 'protocolMapperRepresentation' is set
      if (protocolMapperRepresentation === undefined || protocolMapperRepresentation === null) {
        throw new Error("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientScopesId1ProtocolMappersModelsId2Put");
      }

      let pathParams = {
        'realm': realm,
        'id1': id1,
        'id2': id2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdProtocolMappersAddModelsPost operation.
     * @callback module:api/ProtocolMappersApi~realmClientScopesIdProtocolMappersAddModelsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple mappers
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {Array.<module:model/ProtocolMapperRepresentation>} protocolMapperRepresentation 
     * @param {module:api/ProtocolMappersApi~realmClientScopesIdProtocolMappersAddModelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesIdProtocolMappersAddModelsPost(realm, id, protocolMapperRepresentation, callback) {
      let postBody = protocolMapperRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdProtocolMappersAddModelsPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdProtocolMappersAddModelsPost");
      }
      // verify the required parameter 'protocolMapperRepresentation' is set
      if (protocolMapperRepresentation === undefined || protocolMapperRepresentation === null) {
        throw new Error("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientScopesIdProtocolMappersAddModelsPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/protocol-mappers/add-models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdProtocolMappersModelsGet operation.
     * @callback module:api/ProtocolMappersApi~realmClientScopesIdProtocolMappersModelsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProtocolMapperRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mappers
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {module:api/ProtocolMappersApi~realmClientScopesIdProtocolMappersModelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProtocolMapperRepresentation>}
     */
    realmClientScopesIdProtocolMappersModelsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdProtocolMappersModelsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdProtocolMappersModelsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProtocolMapperRepresentation];
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/protocol-mappers/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdProtocolMappersModelsPost operation.
     * @callback module:api/ProtocolMappersApi~realmClientScopesIdProtocolMappersModelsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a mapper
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {module:model/ProtocolMapperRepresentation} protocolMapperRepresentation 
     * @param {module:api/ProtocolMappersApi~realmClientScopesIdProtocolMappersModelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesIdProtocolMappersModelsPost(realm, id, protocolMapperRepresentation, callback) {
      let postBody = protocolMapperRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdProtocolMappersModelsPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdProtocolMappersModelsPost");
      }
      // verify the required parameter 'protocolMapperRepresentation' is set
      if (protocolMapperRepresentation === undefined || protocolMapperRepresentation === null) {
        throw new Error("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientScopesIdProtocolMappersModelsPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/protocol-mappers/models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdProtocolMappersProtocolProtocolGet operation.
     * @callback module:api/ProtocolMappersApi~realmClientScopesIdProtocolMappersProtocolProtocolGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProtocolMapperRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mappers by name for a specific protocol
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {String} protocol 
     * @param {module:api/ProtocolMappersApi~realmClientScopesIdProtocolMappersProtocolProtocolGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProtocolMapperRepresentation>}
     */
    realmClientScopesIdProtocolMappersProtocolProtocolGet(realm, id, protocol, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdProtocolMappersProtocolProtocolGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdProtocolMappersProtocolProtocolGet");
      }
      // verify the required parameter 'protocol' is set
      if (protocol === undefined || protocol === null) {
        throw new Error("Missing the required parameter 'protocol' when calling realmClientScopesIdProtocolMappersProtocolProtocolGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'protocol': protocol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProtocolMapperRepresentation];
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsId1ProtocolMappersModelsId2Delete operation.
     * @callback module:api/ProtocolMappersApi~realmClientsId1ProtocolMappersModelsId2DeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the mapper
     * @param {String} realm realm name (not id!)
     * @param {String} id1 
     * @param {String} id2 
     * @param {module:api/ProtocolMappersApi~realmClientsId1ProtocolMappersModelsId2DeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsId1ProtocolMappersModelsId2Delete(realm, id1, id2, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsId1ProtocolMappersModelsId2Delete");
      }
      // verify the required parameter 'id1' is set
      if (id1 === undefined || id1 === null) {
        throw new Error("Missing the required parameter 'id1' when calling realmClientsId1ProtocolMappersModelsId2Delete");
      }
      // verify the required parameter 'id2' is set
      if (id2 === undefined || id2 === null) {
        throw new Error("Missing the required parameter 'id2' when calling realmClientsId1ProtocolMappersModelsId2Delete");
      }

      let pathParams = {
        'realm': realm,
        'id1': id1,
        'id2': id2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id1}/protocol-mappers/models/{id2}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsId1ProtocolMappersModelsId2Get operation.
     * @callback module:api/ProtocolMappersApi~realmClientsId1ProtocolMappersModelsId2GetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtocolMapperRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mapper by id
     * @param {String} realm realm name (not id!)
     * @param {String} id1 
     * @param {String} id2 
     * @param {module:api/ProtocolMappersApi~realmClientsId1ProtocolMappersModelsId2GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtocolMapperRepresentation}
     */
    realmClientsId1ProtocolMappersModelsId2Get(realm, id1, id2, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsId1ProtocolMappersModelsId2Get");
      }
      // verify the required parameter 'id1' is set
      if (id1 === undefined || id1 === null) {
        throw new Error("Missing the required parameter 'id1' when calling realmClientsId1ProtocolMappersModelsId2Get");
      }
      // verify the required parameter 'id2' is set
      if (id2 === undefined || id2 === null) {
        throw new Error("Missing the required parameter 'id2' when calling realmClientsId1ProtocolMappersModelsId2Get");
      }

      let pathParams = {
        'realm': realm,
        'id1': id1,
        'id2': id2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtocolMapperRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id1}/protocol-mappers/models/{id2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsId1ProtocolMappersModelsId2Put operation.
     * @callback module:api/ProtocolMappersApi~realmClientsId1ProtocolMappersModelsId2PutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the mapper
     * @param {String} realm realm name (not id!)
     * @param {String} id1 
     * @param {String} id2 
     * @param {module:model/ProtocolMapperRepresentation} protocolMapperRepresentation 
     * @param {module:api/ProtocolMappersApi~realmClientsId1ProtocolMappersModelsId2PutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsId1ProtocolMappersModelsId2Put(realm, id1, id2, protocolMapperRepresentation, callback) {
      let postBody = protocolMapperRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsId1ProtocolMappersModelsId2Put");
      }
      // verify the required parameter 'id1' is set
      if (id1 === undefined || id1 === null) {
        throw new Error("Missing the required parameter 'id1' when calling realmClientsId1ProtocolMappersModelsId2Put");
      }
      // verify the required parameter 'id2' is set
      if (id2 === undefined || id2 === null) {
        throw new Error("Missing the required parameter 'id2' when calling realmClientsId1ProtocolMappersModelsId2Put");
      }
      // verify the required parameter 'protocolMapperRepresentation' is set
      if (protocolMapperRepresentation === undefined || protocolMapperRepresentation === null) {
        throw new Error("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientsId1ProtocolMappersModelsId2Put");
      }

      let pathParams = {
        'realm': realm,
        'id1': id1,
        'id2': id2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id1}/protocol-mappers/models/{id2}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdProtocolMappersAddModelsPost operation.
     * @callback module:api/ProtocolMappersApi~realmClientsIdProtocolMappersAddModelsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple mappers
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {Array.<module:model/ProtocolMapperRepresentation>} protocolMapperRepresentation 
     * @param {module:api/ProtocolMappersApi~realmClientsIdProtocolMappersAddModelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdProtocolMappersAddModelsPost(realm, id, protocolMapperRepresentation, callback) {
      let postBody = protocolMapperRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdProtocolMappersAddModelsPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdProtocolMappersAddModelsPost");
      }
      // verify the required parameter 'protocolMapperRepresentation' is set
      if (protocolMapperRepresentation === undefined || protocolMapperRepresentation === null) {
        throw new Error("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientsIdProtocolMappersAddModelsPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/protocol-mappers/add-models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdProtocolMappersModelsGet operation.
     * @callback module:api/ProtocolMappersApi~realmClientsIdProtocolMappersModelsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProtocolMapperRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mappers
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ProtocolMappersApi~realmClientsIdProtocolMappersModelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProtocolMapperRepresentation>}
     */
    realmClientsIdProtocolMappersModelsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdProtocolMappersModelsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdProtocolMappersModelsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProtocolMapperRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/protocol-mappers/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdProtocolMappersModelsPost operation.
     * @callback module:api/ProtocolMappersApi~realmClientsIdProtocolMappersModelsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a mapper
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:model/ProtocolMapperRepresentation} protocolMapperRepresentation 
     * @param {module:api/ProtocolMappersApi~realmClientsIdProtocolMappersModelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdProtocolMappersModelsPost(realm, id, protocolMapperRepresentation, callback) {
      let postBody = protocolMapperRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdProtocolMappersModelsPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdProtocolMappersModelsPost");
      }
      // verify the required parameter 'protocolMapperRepresentation' is set
      if (protocolMapperRepresentation === undefined || protocolMapperRepresentation === null) {
        throw new Error("Missing the required parameter 'protocolMapperRepresentation' when calling realmClientsIdProtocolMappersModelsPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/protocol-mappers/models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdProtocolMappersProtocolProtocolGet operation.
     * @callback module:api/ProtocolMappersApi~realmClientsIdProtocolMappersProtocolProtocolGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProtocolMapperRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mappers by name for a specific protocol
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} protocol 
     * @param {module:api/ProtocolMappersApi~realmClientsIdProtocolMappersProtocolProtocolGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProtocolMapperRepresentation>}
     */
    realmClientsIdProtocolMappersProtocolProtocolGet(realm, id, protocol, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdProtocolMappersProtocolProtocolGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdProtocolMappersProtocolProtocolGet");
      }
      // verify the required parameter 'protocol' is set
      if (protocol === undefined || protocol === null) {
        throw new Error("Missing the required parameter 'protocol' when calling realmClientsIdProtocolMappersProtocolProtocolGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'protocol': protocol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProtocolMapperRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
