/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientScopeRepresentation from '../model/ClientScopeRepresentation';

/**
* ClientScopes service.
* @module api/ClientScopesApi
* @version 1
*/
export default class ClientScopesApi {

    /**
    * Constructs a new ClientScopesApi. 
    * @alias module:api/ClientScopesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmClientScopesGet operation.
     * @callback module:api/ClientScopesApi~realmClientScopesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClientScopeRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client scopes belonging to the realm   Returns a list of client scopes belonging to the realm
     * @param {String} realm realm name (not id!)
     * @param {module:api/ClientScopesApi~realmClientScopesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClientScopeRepresentation>}
     */
    realmClientScopesGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClientScopeRepresentation];
      return this.apiClient.callApi(
        '/{realm}/client-scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdDelete operation.
     * @callback module:api/ClientScopesApi~realmClientScopesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the client scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {module:api/ClientScopesApi~realmClientScopesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesIdDelete(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdGet operation.
     * @callback module:api/ClientScopesApi~realmClientScopesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientScopeRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get representation of the client scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {module:api/ClientScopesApi~realmClientScopesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientScopeRepresentation}
     */
    realmClientScopesIdGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientScopeRepresentation;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdPut operation.
     * @callback module:api/ClientScopesApi~realmClientScopesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the client scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {module:model/ClientScopeRepresentation} clientScopeRepresentation 
     * @param {module:api/ClientScopesApi~realmClientScopesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesIdPut(realm, id, clientScopeRepresentation, callback) {
      let postBody = clientScopeRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdPut");
      }
      // verify the required parameter 'clientScopeRepresentation' is set
      if (clientScopeRepresentation === undefined || clientScopeRepresentation === null) {
        throw new Error("Missing the required parameter 'clientScopeRepresentation' when calling realmClientScopesIdPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesPost operation.
     * @callback module:api/ClientScopesApi~realmClientScopesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new client scope   Client Scopeâ€™s name must be unique!
     * @param {String} realm realm name (not id!)
     * @param {module:model/ClientScopeRepresentation} clientScopeRepresentation 
     * @param {module:api/ClientScopesApi~realmClientScopesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesPost(realm, clientScopeRepresentation, callback) {
      let postBody = clientScopeRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesPost");
      }
      // verify the required parameter 'clientScopeRepresentation' is set
      if (clientScopeRepresentation === undefined || clientScopeRepresentation === null) {
        throw new Error("Missing the required parameter 'clientScopeRepresentation' when calling realmClientScopesPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
