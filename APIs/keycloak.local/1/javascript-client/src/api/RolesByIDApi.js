/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManagementPermissionReference from '../model/ManagementPermissionReference';
import RoleRepresentation from '../model/RoleRepresentation';

/**
* RolesByID service.
* @module api/RolesByIDApi
* @version 1
*/
export default class RolesByIDApi {

    /**
    * Constructs a new RolesByIDApi. 
    * @alias module:api/RolesByIDApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdCompositesClientsClientGet operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesClientsClientGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client-level roles for the client that are in the role’s composite
     * @param {String} realm realm name (not id!)
     * @param {String} roleId 
     * @param {String} client 
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesClientsClientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmRolesByIdRoleIdCompositesClientsClientGet(realm, roleId, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdCompositesClientsClientGet");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdCompositesClientsClientGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmRolesByIdRoleIdCompositesClientsClientGet");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}/composites/clients/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdCompositesDelete operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a set of roles from the role’s composite
     * @param {String} realm realm name (not id!)
     * @param {String} roleId Role id
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation A set of roles to be removed
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmRolesByIdRoleIdCompositesDelete(realm, roleId, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdCompositesDelete");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdCompositesDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmRolesByIdRoleIdCompositesDelete");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}/composites', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdCompositesGet operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role’s children   Returns a set of role’s children provided the role is a composite.
     * @param {String} realm realm name (not id!)
     * @param {String} roleId Role id
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmRolesByIdRoleIdCompositesGet(realm, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdCompositesGet");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdCompositesGet");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}/composites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdCompositesPost operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make the role a composite role by associating some child roles
     * @param {String} realm realm name (not id!)
     * @param {String} roleId Role id
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmRolesByIdRoleIdCompositesPost(realm, roleId, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdCompositesPost");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdCompositesPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmRolesByIdRoleIdCompositesPost");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}/composites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdCompositesRealmGet operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesRealmGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level roles that are in the role’s composite
     * @param {String} realm realm name (not id!)
     * @param {String} roleId 
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdCompositesRealmGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmRolesByIdRoleIdCompositesRealmGet(realm, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdCompositesRealmGet");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdCompositesRealmGet");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}/composites/realm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdDelete operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the role
     * @param {String} realm realm name (not id!)
     * @param {String} roleId id of role
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmRolesByIdRoleIdDelete(realm, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdDelete");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdGet operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific role’s representation
     * @param {String} realm realm name (not id!)
     * @param {String} roleId id of role
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleRepresentation}
     */
    realmRolesByIdRoleIdGet(realm, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdGet");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdGet");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleRepresentation;
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdManagementPermissionsGet operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdManagementPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} roleId 
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdManagementPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmRolesByIdRoleIdManagementPermissionsGet(realm, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdManagementPermissionsGet");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdManagementPermissionsGet");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}/management/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdManagementPermissionsPut operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdManagementPermissionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} roleId 
     * @param {module:model/ManagementPermissionReference} managementPermissionReference 
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdManagementPermissionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmRolesByIdRoleIdManagementPermissionsPut(realm, roleId, managementPermissionReference, callback) {
      let postBody = managementPermissionReference;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdManagementPermissionsPut");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdManagementPermissionsPut");
      }
      // verify the required parameter 'managementPermissionReference' is set
      if (managementPermissionReference === undefined || managementPermissionReference === null) {
        throw new Error("Missing the required parameter 'managementPermissionReference' when calling realmRolesByIdRoleIdManagementPermissionsPut");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}/management/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmRolesByIdRoleIdPut operation.
     * @callback module:api/RolesByIDApi~realmRolesByIdRoleIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the role
     * @param {String} realm realm name (not id!)
     * @param {String} roleId id of role
     * @param {module:model/RoleRepresentation} roleRepresentation 
     * @param {module:api/RolesByIDApi~realmRolesByIdRoleIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmRolesByIdRoleIdPut(realm, roleId, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmRolesByIdRoleIdPut");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling realmRolesByIdRoleIdPut");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmRolesByIdRoleIdPut");
      }

      let pathParams = {
        'realm': realm,
        'role-id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/roles-by-id/{role-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
