/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificateRepresentation from '../model/CertificateRepresentation';
import KeyStoreConfig from '../model/KeyStoreConfig';

/**
* ClientAttributeCertificate service.
* @module api/ClientAttributeCertificateApi
* @version 1
*/
export default class ClientAttributeCertificateApi {

    /**
    * Constructs a new ClientAttributeCertificateApi. 
    * @alias module:api/ClientAttributeCertificateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmClientsIdCertificatesAttrDownloadPost operation.
     * @callback module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrDownloadPostCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a keystore file for the client, containing private key and public certificate
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} attr 
     * @param {module:model/KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
     * @param {module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrDownloadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    realmClientsIdCertificatesAttrDownloadPost(realm, id, attr, keyStoreConfig, callback) {
      let postBody = keyStoreConfig;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdCertificatesAttrDownloadPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdCertificatesAttrDownloadPost");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling realmClientsIdCertificatesAttrDownloadPost");
      }
      // verify the required parameter 'keyStoreConfig' is set
      if (keyStoreConfig === undefined || keyStoreConfig === null) {
        throw new Error("Missing the required parameter 'keyStoreConfig' when calling realmClientsIdCertificatesAttrDownloadPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'attr': attr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/certificates/{attr}/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdCertificatesAttrGenerateAndDownloadPost operation.
     * @callback module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrGenerateAndDownloadPostCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} attr 
     * @param {module:model/KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
     * @param {module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrGenerateAndDownloadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    realmClientsIdCertificatesAttrGenerateAndDownloadPost(realm, id, attr, keyStoreConfig, callback) {
      let postBody = keyStoreConfig;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdCertificatesAttrGenerateAndDownloadPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdCertificatesAttrGenerateAndDownloadPost");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling realmClientsIdCertificatesAttrGenerateAndDownloadPost");
      }
      // verify the required parameter 'keyStoreConfig' is set
      if (keyStoreConfig === undefined || keyStoreConfig === null) {
        throw new Error("Missing the required parameter 'keyStoreConfig' when calling realmClientsIdCertificatesAttrGenerateAndDownloadPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'attr': attr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/certificates/{attr}/generate-and-download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdCertificatesAttrGeneratePost operation.
     * @callback module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrGeneratePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new certificate with new key pair
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} attr 
     * @param {module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrGeneratePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateRepresentation}
     */
    realmClientsIdCertificatesAttrGeneratePost(realm, id, attr, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdCertificatesAttrGeneratePost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdCertificatesAttrGeneratePost");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling realmClientsIdCertificatesAttrGeneratePost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'attr': attr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/certificates/{attr}/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdCertificatesAttrGet operation.
     * @callback module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get key info
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} attr 
     * @param {module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateRepresentation}
     */
    realmClientsIdCertificatesAttrGet(realm, id, attr, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdCertificatesAttrGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdCertificatesAttrGet");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling realmClientsIdCertificatesAttrGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'attr': attr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/certificates/{attr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdCertificatesAttrUploadCertificatePost operation.
     * @callback module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrUploadCertificatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload only certificate, not private key
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} attr 
     * @param {module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrUploadCertificatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateRepresentation}
     */
    realmClientsIdCertificatesAttrUploadCertificatePost(realm, id, attr, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdCertificatesAttrUploadCertificatePost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdCertificatesAttrUploadCertificatePost");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling realmClientsIdCertificatesAttrUploadCertificatePost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'attr': attr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/certificates/{attr}/upload-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdCertificatesAttrUploadPost operation.
     * @callback module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrUploadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload certificate and eventually private key
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} attr 
     * @param {module:api/ClientAttributeCertificateApi~realmClientsIdCertificatesAttrUploadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateRepresentation}
     */
    realmClientsIdCertificatesAttrUploadPost(realm, id, attr, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdCertificatesAttrUploadPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdCertificatesAttrUploadPost");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling realmClientsIdCertificatesAttrUploadPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'attr': attr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/certificates/{attr}/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
