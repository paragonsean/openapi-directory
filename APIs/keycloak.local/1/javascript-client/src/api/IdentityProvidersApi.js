/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IdentityProviderMapperRepresentation from '../model/IdentityProviderMapperRepresentation';
import IdentityProviderRepresentation from '../model/IdentityProviderRepresentation';
import ManagementPermissionReference from '../model/ManagementPermissionReference';

/**
* IdentityProviders service.
* @module api/IdentityProvidersApi
* @version 1
*/
export default class IdentityProvidersApi {

    /**
    * Constructs a new IdentityProvidersApi. 
    * @alias module:api/IdentityProvidersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmIdentityProviderImportConfigPost operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderImportConfigPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import identity provider from uploaded JSON file
     * @param {String} realm realm name (not id!)
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderImportConfigPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    realmIdentityProviderImportConfigPost(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderImportConfigPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/{realm}/identity-provider/import-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasDelete operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmIdentityProviderInstancesAliasDelete(realm, alias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasDelete");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasDelete");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasExportGet operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasExportGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export public broker configuration for identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {Object} opts Optional parameters
     * @param {String} [format] Format to use
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmIdentityProviderInstancesAliasExportGet(realm, alias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasExportGet");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasExportGet");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasGet operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityProviderRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityProviderRepresentation}
     */
    realmIdentityProviderInstancesAliasGet(realm, alias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasGet");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasGet");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdentityProviderRepresentation;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasManagementPermissionsGet operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasManagementPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasManagementPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmIdentityProviderInstancesAliasManagementPermissionsGet(realm, alias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasManagementPermissionsGet");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasManagementPermissionsGet");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}/management/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasManagementPermissionsPut operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasManagementPermissionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {module:model/ManagementPermissionReference} managementPermissionReference 
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasManagementPermissionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmIdentityProviderInstancesAliasManagementPermissionsPut(realm, alias, managementPermissionReference, callback) {
      let postBody = managementPermissionReference;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasManagementPermissionsPut");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasManagementPermissionsPut");
      }
      // verify the required parameter 'managementPermissionReference' is set
      if (managementPermissionReference === undefined || managementPermissionReference === null) {
        throw new Error("Missing the required parameter 'managementPermissionReference' when calling realmIdentityProviderInstancesAliasManagementPermissionsPut");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}/management/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasMapperTypesGet operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMapperTypesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mapper types for identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMapperTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmIdentityProviderInstancesAliasMapperTypesGet(realm, alias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMapperTypesGet");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMapperTypesGet");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}/mapper-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasMappersGet operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IdentityProviderMapperRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mappers for identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IdentityProviderMapperRepresentation>}
     */
    realmIdentityProviderInstancesAliasMappersGet(realm, alias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersGet");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersGet");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IdentityProviderMapperRepresentation];
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}/mappers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasMappersIdDelete operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a mapper for the identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {String} id Mapper id
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmIdentityProviderInstancesAliasMappersIdDelete(realm, alias, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersIdDelete");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmIdentityProviderInstancesAliasMappersIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}/mappers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasMappersIdGet operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityProviderMapperRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mapper by id for the identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {String} id Mapper id
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityProviderMapperRepresentation}
     */
    realmIdentityProviderInstancesAliasMappersIdGet(realm, alias, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersIdGet");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmIdentityProviderInstancesAliasMappersIdGet");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdentityProviderMapperRepresentation;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}/mappers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasMappersIdPut operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a mapper for the identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {String} id Mapper id
     * @param {module:model/IdentityProviderMapperRepresentation} identityProviderMapperRepresentation 
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmIdentityProviderInstancesAliasMappersIdPut(realm, alias, id, identityProviderMapperRepresentation, callback) {
      let postBody = identityProviderMapperRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersIdPut");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmIdentityProviderInstancesAliasMappersIdPut");
      }
      // verify the required parameter 'identityProviderMapperRepresentation' is set
      if (identityProviderMapperRepresentation === undefined || identityProviderMapperRepresentation === null) {
        throw new Error("Missing the required parameter 'identityProviderMapperRepresentation' when calling realmIdentityProviderInstancesAliasMappersIdPut");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}/mappers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasMappersPost operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a mapper to identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {module:model/IdentityProviderMapperRepresentation} identityProviderMapperRepresentation 
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasMappersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmIdentityProviderInstancesAliasMappersPost(realm, alias, identityProviderMapperRepresentation, callback) {
      let postBody = identityProviderMapperRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasMappersPost");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasMappersPost");
      }
      // verify the required parameter 'identityProviderMapperRepresentation' is set
      if (identityProviderMapperRepresentation === undefined || identityProviderMapperRepresentation === null) {
        throw new Error("Missing the required parameter 'identityProviderMapperRepresentation' when calling realmIdentityProviderInstancesAliasMappersPost");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}/mappers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesAliasPut operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the identity provider
     * @param {String} realm realm name (not id!)
     * @param {String} alias 
     * @param {module:model/IdentityProviderRepresentation} identityProviderRepresentation 
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesAliasPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmIdentityProviderInstancesAliasPut(realm, alias, identityProviderRepresentation, callback) {
      let postBody = identityProviderRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesAliasPut");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmIdentityProviderInstancesAliasPut");
      }
      // verify the required parameter 'identityProviderRepresentation' is set
      if (identityProviderRepresentation === undefined || identityProviderRepresentation === null) {
        throw new Error("Missing the required parameter 'identityProviderRepresentation' when calling realmIdentityProviderInstancesAliasPut");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances/{alias}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesGet operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IdentityProviderRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get identity providers
     * @param {String} realm realm name (not id!)
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IdentityProviderRepresentation>}
     */
    realmIdentityProviderInstancesGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IdentityProviderRepresentation];
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderInstancesPost operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new identity provider
     * @param {String} realm realm name (not id!)
     * @param {module:model/IdentityProviderRepresentation} identityProviderRepresentation JSON body
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmIdentityProviderInstancesPost(realm, identityProviderRepresentation, callback) {
      let postBody = identityProviderRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderInstancesPost");
      }
      // verify the required parameter 'identityProviderRepresentation' is set
      if (identityProviderRepresentation === undefined || identityProviderRepresentation === null) {
        throw new Error("Missing the required parameter 'identityProviderRepresentation' when calling realmIdentityProviderInstancesPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmIdentityProviderProvidersProviderIdGet operation.
     * @callback module:api/IdentityProvidersApi~realmIdentityProviderProvidersProviderIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get identity providers
     * @param {String} realm realm name (not id!)
     * @param {String} providerId Provider id
     * @param {module:api/IdentityProvidersApi~realmIdentityProviderProvidersProviderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmIdentityProviderProvidersProviderIdGet(realm, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmIdentityProviderProvidersProviderIdGet");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling realmIdentityProviderProvidersProviderIdGet");
      }

      let pathParams = {
        'realm': realm,
        'provider_id': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/identity-provider/providers/{provider_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
