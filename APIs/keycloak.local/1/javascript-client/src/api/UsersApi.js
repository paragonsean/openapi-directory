/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CredentialRepresentation from '../model/CredentialRepresentation';
import FederatedIdentityRepresentation from '../model/FederatedIdentityRepresentation';
import GroupRepresentation from '../model/GroupRepresentation';
import UserRepresentation from '../model/UserRepresentation';
import UserSessionRepresentation from '../model/UserSessionRepresentation';

/**
* Users service.
* @module api/UsersApi
* @version 1
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmUsersCountGet operation.
     * @callback module:api/UsersApi~realmUsersCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of users that match the given criteria.
     * @param {String} realm realm name (not id!)
     * @param {Object} opts Optional parameters
     * @param {String} [email] email filter
     * @param {String} [firstName] first name filter
     * @param {String} [lastName] last name filter
     * @param {String} [search] arbitrary search string for all the fields below
     * @param {String} [username] username filter
     * @param {module:api/UsersApi~realmUsersCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    realmUsersCountGet(realm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersCountGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
        'email': opts['email'],
        'firstName': opts['firstName'],
        'lastName': opts['lastName'],
        'search': opts['search'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{realm}/users/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersGet operation.
     * @callback module:api/UsersApi~realmUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users   Returns a list of users, filtered according to query parameters
     * @param {String} realm realm name (not id!)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [briefRepresentation] 
     * @param {String} [email] 
     * @param {Number} [first] 
     * @param {String} [firstName] 
     * @param {String} [lastName] 
     * @param {Number} [max] Maximum results size (defaults to 100)
     * @param {String} [search] A String contained in username, first or last name, or email
     * @param {String} [username] 
     * @param {module:api/UsersApi~realmUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserRepresentation>}
     */
    realmUsersGet(realm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
        'briefRepresentation': opts['briefRepresentation'],
        'email': opts['email'],
        'first': opts['first'],
        'firstName': opts['firstName'],
        'lastName': opts['lastName'],
        'max': opts['max'],
        'search': opts['search'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdConfiguredUserStorageCredentialTypesGet operation.
     * @callback module:api/UsersApi~realmUsersIdConfiguredUserStorageCredentialTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return credential types, which are provided by the user storage where user is stored.
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/UsersApi~realmUsersIdConfiguredUserStorageCredentialTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    realmUsersIdConfiguredUserStorageCredentialTypesGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdConfiguredUserStorageCredentialTypesGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdConfiguredUserStorageCredentialTypesGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/configured-user-storage-credential-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdConsentsClientDelete operation.
     * @callback module:api/UsersApi~realmUsersIdConsentsClientDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke consent and offline tokens for particular client from user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} client Client id
     * @param {module:api/UsersApi~realmUsersIdConsentsClientDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdConsentsClientDelete(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdConsentsClientDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdConsentsClientDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmUsersIdConsentsClientDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/consents/{client}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdConsentsGet operation.
     * @callback module:api/UsersApi~realmUsersIdConsentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consents granted by the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/UsersApi~realmUsersIdConsentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: Object}>}
     */
    realmUsersIdConsentsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdConsentsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdConsentsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/consents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdCredentialsCredentialIdDelete operation.
     * @callback module:api/UsersApi~realmUsersIdCredentialsCredentialIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a credential for a user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} credentialId 
     * @param {module:api/UsersApi~realmUsersIdCredentialsCredentialIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdCredentialsCredentialIdDelete(realm, id, credentialId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdCredentialsCredentialIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdCredentialsCredentialIdDelete");
      }
      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling realmUsersIdCredentialsCredentialIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'credentialId': credentialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/credentials/{credentialId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost operation.
     * @callback module:api/UsersApi~realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move a credential to a position behind another credential
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} credentialId The credential to move
     * @param {String} newPreviousCredentialId The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.
     * @param {module:api/UsersApi~realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(realm, id, credentialId, newPreviousCredentialId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost");
      }
      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost");
      }
      // verify the required parameter 'newPreviousCredentialId' is set
      if (newPreviousCredentialId === undefined || newPreviousCredentialId === null) {
        throw new Error("Missing the required parameter 'newPreviousCredentialId' when calling realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'credentialId': credentialId,
        'newPreviousCredentialId': newPreviousCredentialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdCredentialsCredentialIdMoveToFirstPost operation.
     * @callback module:api/UsersApi~realmUsersIdCredentialsCredentialIdMoveToFirstPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move a credential to a first position in the credentials list of the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} credentialId The credential to move
     * @param {module:api/UsersApi~realmUsersIdCredentialsCredentialIdMoveToFirstPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdCredentialsCredentialIdMoveToFirstPost(realm, id, credentialId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdCredentialsCredentialIdMoveToFirstPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdCredentialsCredentialIdMoveToFirstPost");
      }
      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling realmUsersIdCredentialsCredentialIdMoveToFirstPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'credentialId': credentialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/credentials/{credentialId}/moveToFirst', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdCredentialsCredentialIdUserLabelPut operation.
     * @callback module:api/UsersApi~realmUsersIdCredentialsCredentialIdUserLabelPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a credential label for a user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} credentialId 
     * @param {String} body 
     * @param {module:api/UsersApi~realmUsersIdCredentialsCredentialIdUserLabelPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdCredentialsCredentialIdUserLabelPut(realm, id, credentialId, body, callback) {
      let postBody = body;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdCredentialsCredentialIdUserLabelPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdCredentialsCredentialIdUserLabelPut");
      }
      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling realmUsersIdCredentialsCredentialIdUserLabelPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling realmUsersIdCredentialsCredentialIdUserLabelPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'credentialId': credentialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/credentials/{credentialId}/userLabel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdCredentialsGet operation.
     * @callback module:api/UsersApi~realmUsersIdCredentialsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CredentialRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/UsersApi~realmUsersIdCredentialsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CredentialRepresentation>}
     */
    realmUsersIdCredentialsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdCredentialsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdCredentialsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CredentialRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdDelete operation.
     * @callback module:api/UsersApi~realmUsersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/UsersApi~realmUsersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdDelete(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdDisableCredentialTypesPut operation.
     * @callback module:api/UsersApi~realmUsersIdDisableCredentialTypesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable all credentials for a user of a specific type
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {Array.<String>} requestBody 
     * @param {module:api/UsersApi~realmUsersIdDisableCredentialTypesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdDisableCredentialTypesPut(realm, id, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdDisableCredentialTypesPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdDisableCredentialTypesPut");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling realmUsersIdDisableCredentialTypesPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/disable-credential-types', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdExecuteActionsEmailPut operation.
     * @callback module:api/UsersApi~realmUsersIdExecuteActionsEmailPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {Array.<String>} requestBody required actions the user needs to complete
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Client id
     * @param {Number} [lifespan] Number of seconds after which the generated token expires
     * @param {String} [redirectUri] Redirect uri
     * @param {module:api/UsersApi~realmUsersIdExecuteActionsEmailPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdExecuteActionsEmailPut(realm, id, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdExecuteActionsEmailPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdExecuteActionsEmailPut");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling realmUsersIdExecuteActionsEmailPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'client_id': opts['clientId'],
        'lifespan': opts['lifespan'],
        'redirect_uri': opts['redirectUri']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/execute-actions-email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdFederatedIdentityGet operation.
     * @callback module:api/UsersApi~realmUsersIdFederatedIdentityGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FederatedIdentityRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get social logins associated with the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/UsersApi~realmUsersIdFederatedIdentityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FederatedIdentityRepresentation>}
     */
    realmUsersIdFederatedIdentityGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdFederatedIdentityGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdFederatedIdentityGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FederatedIdentityRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/federated-identity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdFederatedIdentityProviderDelete operation.
     * @callback module:api/UsersApi~realmUsersIdFederatedIdentityProviderDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a social login provider from user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} provider Social login provider id
     * @param {module:api/UsersApi~realmUsersIdFederatedIdentityProviderDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdFederatedIdentityProviderDelete(realm, id, provider, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdFederatedIdentityProviderDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdFederatedIdentityProviderDelete");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling realmUsersIdFederatedIdentityProviderDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/federated-identity/{provider}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdFederatedIdentityProviderPost operation.
     * @callback module:api/UsersApi~realmUsersIdFederatedIdentityProviderPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a social login provider to the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} provider Social login provider id
     * @param {module:model/FederatedIdentityRepresentation} federatedIdentityRepresentation 
     * @param {module:api/UsersApi~realmUsersIdFederatedIdentityProviderPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdFederatedIdentityProviderPost(realm, id, provider, federatedIdentityRepresentation, callback) {
      let postBody = federatedIdentityRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdFederatedIdentityProviderPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdFederatedIdentityProviderPost");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling realmUsersIdFederatedIdentityProviderPost");
      }
      // verify the required parameter 'federatedIdentityRepresentation' is set
      if (federatedIdentityRepresentation === undefined || federatedIdentityRepresentation === null) {
        throw new Error("Missing the required parameter 'federatedIdentityRepresentation' when calling realmUsersIdFederatedIdentityProviderPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/federated-identity/{provider}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdGet operation.
     * @callback module:api/UsersApi~realmUsersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get representation of the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/UsersApi~realmUsersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRepresentation}
     */
    realmUsersIdGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserRepresentation;
      return this.apiClient.callApi(
        '/{realm}/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdGroupsCountGet operation.
     * @callback module:api/UsersApi~realmUsersIdGroupsCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {Object} opts Optional parameters
     * @param {String} [search] 
     * @param {module:api/UsersApi~realmUsersIdGroupsCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    realmUsersIdGroupsCountGet(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdGroupsCountGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdGroupsCountGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/{realm}/users/{id}/groups/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdGroupsGet operation.
     * @callback module:api/UsersApi~realmUsersIdGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [briefRepresentation] 
     * @param {Number} [first] 
     * @param {Number} [max] 
     * @param {String} [search] 
     * @param {module:api/UsersApi~realmUsersIdGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupRepresentation>}
     */
    realmUsersIdGroupsGet(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdGroupsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdGroupsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'briefRepresentation': opts['briefRepresentation'],
        'first': opts['first'],
        'max': opts['max'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdGroupsGroupIdDelete operation.
     * @callback module:api/UsersApi~realmUsersIdGroupsGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} groupId 
     * @param {module:api/UsersApi~realmUsersIdGroupsGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdGroupsGroupIdDelete(realm, id, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdGroupsGroupIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdGroupsGroupIdDelete");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling realmUsersIdGroupsGroupIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdGroupsGroupIdPut operation.
     * @callback module:api/UsersApi~realmUsersIdGroupsGroupIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} groupId 
     * @param {module:api/UsersApi~realmUsersIdGroupsGroupIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdGroupsGroupIdPut(realm, id, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdGroupsGroupIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdGroupsGroupIdPut");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling realmUsersIdGroupsGroupIdPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdImpersonationPost operation.
     * @callback module:api/UsersApi~realmUsersIdImpersonationPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Impersonate the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/UsersApi~realmUsersIdImpersonationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    realmUsersIdImpersonationPost(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdImpersonationPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdImpersonationPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/{realm}/users/{id}/impersonation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdLogoutPost operation.
     * @callback module:api/UsersApi~realmUsersIdLogoutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/UsersApi~realmUsersIdLogoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdLogoutPost(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdLogoutPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdLogoutPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdOfflineSessionsClientIdGet operation.
     * @callback module:api/UsersApi~realmUsersIdOfflineSessionsClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSessionRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get offline sessions associated with the user and client
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} clientId 
     * @param {module:api/UsersApi~realmUsersIdOfflineSessionsClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSessionRepresentation>}
     */
    realmUsersIdOfflineSessionsClientIdGet(realm, id, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdOfflineSessionsClientIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdOfflineSessionsClientIdGet");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling realmUsersIdOfflineSessionsClientIdGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSessionRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/offline-sessions/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdPut operation.
     * @callback module:api/UsersApi~realmUsersIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:model/UserRepresentation} userRepresentation 
     * @param {module:api/UsersApi~realmUsersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdPut(realm, id, userRepresentation, callback) {
      let postBody = userRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdPut");
      }
      // verify the required parameter 'userRepresentation' is set
      if (userRepresentation === undefined || userRepresentation === null) {
        throw new Error("Missing the required parameter 'userRepresentation' when calling realmUsersIdPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdResetPasswordPut operation.
     * @callback module:api/UsersApi~realmUsersIdResetPasswordPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set up a new password for the user.
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:model/CredentialRepresentation} credentialRepresentation The representation must contain a rawPassword with the plain-text password
     * @param {module:api/UsersApi~realmUsersIdResetPasswordPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdResetPasswordPut(realm, id, credentialRepresentation, callback) {
      let postBody = credentialRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdResetPasswordPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdResetPasswordPut");
      }
      // verify the required parameter 'credentialRepresentation' is set
      if (credentialRepresentation === undefined || credentialRepresentation === null) {
        throw new Error("Missing the required parameter 'credentialRepresentation' when calling realmUsersIdResetPasswordPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/reset-password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdSendVerifyEmailPut operation.
     * @callback module:api/UsersApi~realmUsersIdSendVerifyEmailPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an email-verification email to the user   An email contains a link the user can click to verify their email address.
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Client id
     * @param {String} [redirectUri] Redirect uri
     * @param {module:api/UsersApi~realmUsersIdSendVerifyEmailPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdSendVerifyEmailPut(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdSendVerifyEmailPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdSendVerifyEmailPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'client_id': opts['clientId'],
        'redirect_uri': opts['redirectUri']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/send-verify-email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdSessionsGet operation.
     * @callback module:api/UsersApi~realmUsersIdSessionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSessionRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sessions associated with the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/UsersApi~realmUsersIdSessionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSessionRepresentation>}
     */
    realmUsersIdSessionsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdSessionsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdSessionsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSessionRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersPost operation.
     * @callback module:api/UsersApi~realmUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user   Username must be unique.
     * @param {String} realm realm name (not id!)
     * @param {module:model/UserRepresentation} userRepresentation 
     * @param {module:api/UsersApi~realmUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersPost(realm, userRepresentation, callback) {
      let postBody = userRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersPost");
      }
      // verify the required parameter 'userRepresentation' is set
      if (userRepresentation === undefined || userRepresentation === null) {
        throw new Error("Missing the required parameter 'userRepresentation' when calling realmUsersPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
