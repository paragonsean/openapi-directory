/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RoleRepresentation from '../model/RoleRepresentation';

/**
* ClientRoleMappings service.
* @module api/ClientRoleMappingsApi
* @version 1
*/
export default class ClientRoleMappingsApi {

    /**
    * Constructs a new ClientRoleMappingsApi. 
    * @alias module:api/ClientRoleMappingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsClientsClientAvailableGet operation.
     * @callback module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available client-level roles that can be mapped to the user
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {String} client 
     * @param {module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmGroupsIdRoleMappingsClientsClientAvailableGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsClientsClientAvailableGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsClientsClientAvailableGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmGroupsIdRoleMappingsClientsClientAvailableGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/clients/{client}/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsClientsClientCompositeGet operation.
     * @callback module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientCompositeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective client-level role mappings   This recurses any composite roles
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {String} client 
     * @param {module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientCompositeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmGroupsIdRoleMappingsClientsClientCompositeGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsClientsClientCompositeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsClientsClientCompositeGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmGroupsIdRoleMappingsClientsClientCompositeGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/clients/{client}/composite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsClientsClientDelete operation.
     * @callback module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete client-level roles from user role mapping
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {String} client 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmGroupsIdRoleMappingsClientsClientDelete(realm, id, client, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsClientsClientDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsClientsClientDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmGroupsIdRoleMappingsClientsClientDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmGroupsIdRoleMappingsClientsClientDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/clients/{client}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsClientsClientGet operation.
     * @callback module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client-level role mappings for the user, and the app
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {String} client 
     * @param {module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmGroupsIdRoleMappingsClientsClientGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsClientsClientGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsClientsClientGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmGroupsIdRoleMappingsClientsClientGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/clients/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsClientsClientPost operation.
     * @callback module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add client-level roles to the user role mapping
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {String} client 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ClientRoleMappingsApi~realmGroupsIdRoleMappingsClientsClientPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmGroupsIdRoleMappingsClientsClientPost(realm, id, client, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsClientsClientPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsClientsClientPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmGroupsIdRoleMappingsClientsClientPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmGroupsIdRoleMappingsClientsClientPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/clients/{client}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsClientsClientAvailableGet operation.
     * @callback module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available client-level roles that can be mapped to the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} client 
     * @param {module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmUsersIdRoleMappingsClientsClientAvailableGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsClientsClientAvailableGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsClientsClientAvailableGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmUsersIdRoleMappingsClientsClientAvailableGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/clients/{client}/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsClientsClientCompositeGet operation.
     * @callback module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientCompositeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective client-level role mappings   This recurses any composite roles
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} client 
     * @param {module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientCompositeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmUsersIdRoleMappingsClientsClientCompositeGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsClientsClientCompositeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsClientsClientCompositeGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmUsersIdRoleMappingsClientsClientCompositeGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/clients/{client}/composite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsClientsClientDelete operation.
     * @callback module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete client-level roles from user role mapping
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} client 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdRoleMappingsClientsClientDelete(realm, id, client, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsClientsClientDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsClientsClientDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmUsersIdRoleMappingsClientsClientDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmUsersIdRoleMappingsClientsClientDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/clients/{client}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsClientsClientGet operation.
     * @callback module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client-level role mappings for the user, and the app
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} client 
     * @param {module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmUsersIdRoleMappingsClientsClientGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsClientsClientGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsClientsClientGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmUsersIdRoleMappingsClientsClientGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/clients/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsClientsClientPost operation.
     * @callback module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add client-level roles to the user role mapping
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {String} client 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ClientRoleMappingsApi~realmUsersIdRoleMappingsClientsClientPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdRoleMappingsClientsClientPost(realm, id, client, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsClientsClientPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsClientsClientPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmUsersIdRoleMappingsClientsClientPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmUsersIdRoleMappingsClientsClientPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/clients/{client}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
