/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminEventRepresentation from '../model/AdminEventRepresentation';
import ClientRepresentation from '../model/ClientRepresentation';
import ClientScopeRepresentation from '../model/ClientScopeRepresentation';
import EventRepresentation from '../model/EventRepresentation';
import GroupRepresentation from '../model/GroupRepresentation';
import ManagementPermissionReference from '../model/ManagementPermissionReference';
import PartialImportRepresentation from '../model/PartialImportRepresentation';
import RealmEventsConfigRepresentation from '../model/RealmEventsConfigRepresentation';
import RealmRepresentation from '../model/RealmRepresentation';
import TestLdapConnectionRepresentation from '../model/TestLdapConnectionRepresentation';

/**
* RealmsAdmin service.
* @module api/RealmsAdminApi
* @version 1
*/
export default class RealmsAdminApi {

    /**
    * Constructs a new RealmsAdminApi. 
    * @alias module:api/RealmsAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmAdminEventsDelete operation.
     * @callback module:api/RealmsAdminApi~realmAdminEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all admin events
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmAdminEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAdminEventsDelete(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAdminEventsDelete");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/admin-events', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAdminEventsGet operation.
     * @callback module:api/RealmsAdminApi~realmAdminEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdminEventRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
     * @param {String} realm realm name (not id!)
     * @param {Object} opts Optional parameters
     * @param {String} [authClient] 
     * @param {String} [authIpAddress] 
     * @param {String} [authRealm] 
     * @param {String} [authUser] user id
     * @param {String} [dateFrom] 
     * @param {String} [dateTo] 
     * @param {Number} [first] 
     * @param {Number} [max] Maximum results size (defaults to 100)
     * @param {Array.<String>} [operationTypes] 
     * @param {String} [resourcePath] 
     * @param {Array.<String>} [resourceTypes] 
     * @param {module:api/RealmsAdminApi~realmAdminEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdminEventRepresentation>}
     */
    realmAdminEventsGet(realm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAdminEventsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
        'authClient': opts['authClient'],
        'authIpAddress': opts['authIpAddress'],
        'authRealm': opts['authRealm'],
        'authUser': opts['authUser'],
        'dateFrom': opts['dateFrom'],
        'dateTo': opts['dateTo'],
        'first': opts['first'],
        'max': opts['max'],
        'operationTypes': this.apiClient.buildCollectionParam(opts['operationTypes'], 'multi'),
        'resourcePath': opts['resourcePath'],
        'resourceTypes': this.apiClient.buildCollectionParam(opts['resourceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AdminEventRepresentation];
      return this.apiClient.callApi(
        '/{realm}/admin-events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClearKeysCachePost operation.
     * @callback module:api/RealmsAdminApi~realmClearKeysCachePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear cache of external public keys (Public keys of clients or Identity providers)
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmClearKeysCachePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClearKeysCachePost(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClearKeysCachePost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clear-keys-cache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClearRealmCachePost operation.
     * @callback module:api/RealmsAdminApi~realmClearRealmCachePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear realm cache
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmClearRealmCachePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClearRealmCachePost(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClearRealmCachePost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clear-realm-cache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClearUserCachePost operation.
     * @callback module:api/RealmsAdminApi~realmClearUserCachePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear user cache
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmClearUserCachePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClearUserCachePost(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClearUserCachePost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clear-user-cache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientDescriptionConverterPost operation.
     * @callback module:api/RealmsAdminApi~realmClientDescriptionConverterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Base path for importing clients under this realm.
     * @param {String} realm realm name (not id!)
     * @param {String} body 
     * @param {module:api/RealmsAdminApi~realmClientDescriptionConverterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientRepresentation}
     */
    realmClientDescriptionConverterPost(realm, body, callback) {
      let postBody = body;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientDescriptionConverterPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling realmClientDescriptionConverterPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = ClientRepresentation;
      return this.apiClient.callApi(
        '/{realm}/client-description-converter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientSessionStatsGet operation.
     * @callback module:api/RealmsAdminApi~realmClientSessionStatsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client session stats   Returns a JSON map.
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmClientSessionStatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: Object}>}
     */
    realmClientSessionStatsGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientSessionStatsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];
      return this.apiClient.callApi(
        '/{realm}/client-session-stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmCredentialRegistratorsGet operation.
     * @callback module:api/RealmsAdminApi~realmCredentialRegistratorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmCredentialRegistratorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    realmCredentialRegistratorsGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmCredentialRegistratorsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/{realm}/credential-registrators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDefaultDefaultClientScopesClientScopeIdDelete operation.
     * @callback module:api/RealmsAdminApi~realmDefaultDefaultClientScopesClientScopeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} clientScopeId 
     * @param {module:api/RealmsAdminApi~realmDefaultDefaultClientScopesClientScopeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmDefaultDefaultClientScopesClientScopeIdDelete(realm, clientScopeId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDefaultDefaultClientScopesClientScopeIdDelete");
      }
      // verify the required parameter 'clientScopeId' is set
      if (clientScopeId === undefined || clientScopeId === null) {
        throw new Error("Missing the required parameter 'clientScopeId' when calling realmDefaultDefaultClientScopesClientScopeIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'clientScopeId': clientScopeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/default-default-client-scopes/{clientScopeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDefaultDefaultClientScopesClientScopeIdPut operation.
     * @callback module:api/RealmsAdminApi~realmDefaultDefaultClientScopesClientScopeIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} clientScopeId 
     * @param {module:api/RealmsAdminApi~realmDefaultDefaultClientScopesClientScopeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmDefaultDefaultClientScopesClientScopeIdPut(realm, clientScopeId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDefaultDefaultClientScopesClientScopeIdPut");
      }
      // verify the required parameter 'clientScopeId' is set
      if (clientScopeId === undefined || clientScopeId === null) {
        throw new Error("Missing the required parameter 'clientScopeId' when calling realmDefaultDefaultClientScopesClientScopeIdPut");
      }

      let pathParams = {
        'realm': realm,
        'clientScopeId': clientScopeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/default-default-client-scopes/{clientScopeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDefaultDefaultClientScopesGet operation.
     * @callback module:api/RealmsAdminApi~realmDefaultDefaultClientScopesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClientScopeRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm default client scopes.
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmDefaultDefaultClientScopesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClientScopeRepresentation>}
     */
    realmDefaultDefaultClientScopesGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDefaultDefaultClientScopesGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClientScopeRepresentation];
      return this.apiClient.callApi(
        '/{realm}/default-default-client-scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDefaultGroupsGet operation.
     * @callback module:api/RealmsAdminApi~realmDefaultGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group hierarchy.
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmDefaultGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupRepresentation>}
     */
    realmDefaultGroupsGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDefaultGroupsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupRepresentation];
      return this.apiClient.callApi(
        '/{realm}/default-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDefaultGroupsGroupIdDelete operation.
     * @callback module:api/RealmsAdminApi~realmDefaultGroupsGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} groupId 
     * @param {module:api/RealmsAdminApi~realmDefaultGroupsGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmDefaultGroupsGroupIdDelete(realm, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDefaultGroupsGroupIdDelete");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling realmDefaultGroupsGroupIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/default-groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDefaultGroupsGroupIdPut operation.
     * @callback module:api/RealmsAdminApi~realmDefaultGroupsGroupIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} groupId 
     * @param {module:api/RealmsAdminApi~realmDefaultGroupsGroupIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmDefaultGroupsGroupIdPut(realm, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDefaultGroupsGroupIdPut");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling realmDefaultGroupsGroupIdPut");
      }

      let pathParams = {
        'realm': realm,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/default-groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDefaultOptionalClientScopesClientScopeIdDelete operation.
     * @callback module:api/RealmsAdminApi~realmDefaultOptionalClientScopesClientScopeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} clientScopeId 
     * @param {module:api/RealmsAdminApi~realmDefaultOptionalClientScopesClientScopeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmDefaultOptionalClientScopesClientScopeIdDelete(realm, clientScopeId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDefaultOptionalClientScopesClientScopeIdDelete");
      }
      // verify the required parameter 'clientScopeId' is set
      if (clientScopeId === undefined || clientScopeId === null) {
        throw new Error("Missing the required parameter 'clientScopeId' when calling realmDefaultOptionalClientScopesClientScopeIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'clientScopeId': clientScopeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/default-optional-client-scopes/{clientScopeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDefaultOptionalClientScopesClientScopeIdPut operation.
     * @callback module:api/RealmsAdminApi~realmDefaultOptionalClientScopesClientScopeIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} clientScopeId 
     * @param {module:api/RealmsAdminApi~realmDefaultOptionalClientScopesClientScopeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmDefaultOptionalClientScopesClientScopeIdPut(realm, clientScopeId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDefaultOptionalClientScopesClientScopeIdPut");
      }
      // verify the required parameter 'clientScopeId' is set
      if (clientScopeId === undefined || clientScopeId === null) {
        throw new Error("Missing the required parameter 'clientScopeId' when calling realmDefaultOptionalClientScopesClientScopeIdPut");
      }

      let pathParams = {
        'realm': realm,
        'clientScopeId': clientScopeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/default-optional-client-scopes/{clientScopeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDefaultOptionalClientScopesGet operation.
     * @callback module:api/RealmsAdminApi~realmDefaultOptionalClientScopesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClientScopeRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm optional client scopes.
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmDefaultOptionalClientScopesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClientScopeRepresentation>}
     */
    realmDefaultOptionalClientScopesGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDefaultOptionalClientScopesGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClientScopeRepresentation];
      return this.apiClient.callApi(
        '/{realm}/default-optional-client-scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmDelete operation.
     * @callback module:api/RealmsAdminApi~realmDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the realm
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmDelete(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmDelete");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmEventsConfigGet operation.
     * @callback module:api/RealmsAdminApi~realmEventsConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealmEventsConfigRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the events provider configuration   Returns JSON object with events provider configuration
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmEventsConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealmEventsConfigRepresentation}
     */
    realmEventsConfigGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmEventsConfigGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RealmEventsConfigRepresentation;
      return this.apiClient.callApi(
        '/{realm}/events/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmEventsConfigPut operation.
     * @callback module:api/RealmsAdminApi~realmEventsConfigPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the events provider   Change the events provider and/or its configuration
     * @param {String} realm realm name (not id!)
     * @param {module:model/RealmEventsConfigRepresentation} realmEventsConfigRepresentation 
     * @param {module:api/RealmsAdminApi~realmEventsConfigPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmEventsConfigPut(realm, realmEventsConfigRepresentation, callback) {
      let postBody = realmEventsConfigRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmEventsConfigPut");
      }
      // verify the required parameter 'realmEventsConfigRepresentation' is set
      if (realmEventsConfigRepresentation === undefined || realmEventsConfigRepresentation === null) {
        throw new Error("Missing the required parameter 'realmEventsConfigRepresentation' when calling realmEventsConfigPut");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/events/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmEventsDelete operation.
     * @callback module:api/RealmsAdminApi~realmEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all events
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmEventsDelete(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmEventsDelete");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/events', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmEventsGet operation.
     * @callback module:api/RealmsAdminApi~realmEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events   Returns all events, or filters them based on URL query parameters listed here
     * @param {String} realm realm name (not id!)
     * @param {Object} opts Optional parameters
     * @param {String} [client] App or oauth client name
     * @param {String} [dateFrom] From date
     * @param {String} [dateTo] To date
     * @param {Number} [first] Paging offset
     * @param {String} [ipAddress] IP address
     * @param {Number} [max] Maximum results size (defaults to 100)
     * @param {Array.<String>} [type] The types of events to return
     * @param {String} [user] User id
     * @param {module:api/RealmsAdminApi~realmEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventRepresentation>}
     */
    realmEventsGet(realm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmEventsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
        'client': opts['client'],
        'dateFrom': opts['dateFrom'],
        'dateTo': opts['dateTo'],
        'first': opts['first'],
        'ipAddress': opts['ipAddress'],
        'max': opts['max'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventRepresentation];
      return this.apiClient.callApi(
        '/{realm}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGet operation.
     * @callback module:api/RealmsAdminApi~realmGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealmRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the top-level representation of the realm   It will not include nested information like User and Client representations.
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealmRepresentation}
     */
    realmGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RealmRepresentation;
      return this.apiClient.callApi(
        '/{realm}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupByPathPathGet operation.
     * @callback module:api/RealmsAdminApi~realmGroupByPathPathGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} path 
     * @param {module:api/RealmsAdminApi~realmGroupByPathPathGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupRepresentation}
     */
    realmGroupByPathPathGet(realm, path, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupByPathPathGet");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling realmGroupByPathPathGet");
      }

      let pathParams = {
        'realm': realm,
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupRepresentation;
      return this.apiClient.callApi(
        '/{realm}/group-by-path/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmLogoutAllPost operation.
     * @callback module:api/RealmsAdminApi~realmLogoutAllPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes all user sessions.
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmLogoutAllPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmLogoutAllPost(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmLogoutAllPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/logout-all', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmPartialExportPost operation.
     * @callback module:api/RealmsAdminApi~realmPartialExportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealmRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial export of existing realm into a JSON file.
     * @param {String} realm realm name (not id!)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [exportClients] 
     * @param {Boolean} [exportGroupsAndRoles] 
     * @param {module:api/RealmsAdminApi~realmPartialExportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealmRepresentation}
     */
    realmPartialExportPost(realm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmPartialExportPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
        'exportClients': opts['exportClients'],
        'exportGroupsAndRoles': opts['exportGroupsAndRoles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RealmRepresentation;
      return this.apiClient.callApi(
        '/{realm}/partial-export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmPartialImportPost operation.
     * @callback module:api/RealmsAdminApi~realmPartialImportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial import from a JSON file to an existing realm.
     * @param {String} realm realm name (not id!)
     * @param {module:model/PartialImportRepresentation} partialImportRepresentation 
     * @param {module:api/RealmsAdminApi~realmPartialImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmPartialImportPost(realm, partialImportRepresentation, callback) {
      let postBody = partialImportRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmPartialImportPost");
      }
      // verify the required parameter 'partialImportRepresentation' is set
      if (partialImportRepresentation === undefined || partialImportRepresentation === null) {
        throw new Error("Missing the required parameter 'partialImportRepresentation' when calling realmPartialImportPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/partialImport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmPushRevocationPost operation.
     * @callback module:api/RealmsAdminApi~realmPushRevocationPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Push the realm’s revocation policy to any client that has an admin url associated with it.
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmPushRevocationPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmPushRevocationPost(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmPushRevocationPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/push-revocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmPut operation.
     * @callback module:api/RealmsAdminApi~realmPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
     * @param {String} realm realm name (not id!)
     * @param {module:model/RealmRepresentation} realmRepresentation 
     * @param {module:api/RealmsAdminApi~realmPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmPut(realm, realmRepresentation, callback) {
      let postBody = realmRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmPut");
      }
      // verify the required parameter 'realmRepresentation' is set
      if (realmRepresentation === undefined || realmRepresentation === null) {
        throw new Error("Missing the required parameter 'realmRepresentation' when calling realmPut");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmSessionsSessionDelete operation.
     * @callback module:api/RealmsAdminApi~realmSessionsSessionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a specific user session.
     * @param {String} realm realm name (not id!)
     * @param {String} session 
     * @param {module:api/RealmsAdminApi~realmSessionsSessionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmSessionsSessionDelete(realm, session, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmSessionsSessionDelete");
      }
      // verify the required parameter 'session' is set
      if (session === undefined || session === null) {
        throw new Error("Missing the required parameter 'session' when calling realmSessionsSessionDelete");
      }

      let pathParams = {
        'realm': realm,
        'session': session
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/sessions/{session}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmTestLDAPConnectionPost operation.
     * @callback module:api/RealmsAdminApi~realmTestLDAPConnectionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test LDAP connection
     * @param {String} realm realm name (not id!)
     * @param {module:model/TestLdapConnectionRepresentation} testLdapConnectionRepresentation 
     * @param {module:api/RealmsAdminApi~realmTestLDAPConnectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmTestLDAPConnectionPost(realm, testLdapConnectionRepresentation, callback) {
      let postBody = testLdapConnectionRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmTestLDAPConnectionPost");
      }
      // verify the required parameter 'testLdapConnectionRepresentation' is set
      if (testLdapConnectionRepresentation === undefined || testLdapConnectionRepresentation === null) {
        throw new Error("Missing the required parameter 'testLdapConnectionRepresentation' when calling realmTestLDAPConnectionPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/testLDAPConnection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmTestSMTPConnectionPost operation.
     * @callback module:api/RealmsAdminApi~realmTestSMTPConnectionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {Object.<String, {String: Object}>} requestBody 
     * @param {module:api/RealmsAdminApi~realmTestSMTPConnectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmTestSMTPConnectionPost(realm, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmTestSMTPConnectionPost");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling realmTestSMTPConnectionPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/testSMTPConnection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersManagementPermissionsGet operation.
     * @callback module:api/RealmsAdminApi~realmUsersManagementPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {module:api/RealmsAdminApi~realmUsersManagementPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmUsersManagementPermissionsGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersManagementPermissionsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/users-management-permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersManagementPermissionsPut operation.
     * @callback module:api/RealmsAdminApi~realmUsersManagementPermissionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {module:model/ManagementPermissionReference} managementPermissionReference 
     * @param {module:api/RealmsAdminApi~realmUsersManagementPermissionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmUsersManagementPermissionsPut(realm, managementPermissionReference, callback) {
      let postBody = managementPermissionReference;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersManagementPermissionsPut");
      }
      // verify the required parameter 'managementPermissionReference' is set
      if (managementPermissionReference === undefined || managementPermissionReference === null) {
        throw new Error("Missing the required parameter 'managementPermissionReference' when calling realmUsersManagementPermissionsPut");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/users-management-permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rootPost operation.
     * @callback module:api/RealmsAdminApi~rootPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a realm   Imports a realm from a full representation of that realm.
     * @param {module:model/RealmRepresentation} realmRepresentation JSON representation of the realm
     * @param {module:api/RealmsAdminApi~rootPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rootPost(realmRepresentation, callback) {
      let postBody = realmRepresentation;
      // verify the required parameter 'realmRepresentation' is set
      if (realmRepresentation === undefined || realmRepresentation === null) {
        throw new Error("Missing the required parameter 'realmRepresentation' when calling rootPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
