/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MappingsRepresentation from '../model/MappingsRepresentation';
import RoleRepresentation from '../model/RoleRepresentation';

/**
* RoleMapper service.
* @module api/RoleMapperApi
* @version 1
*/
export default class RoleMapperApi {

    /**
    * Constructs a new RoleMapperApi. 
    * @alias module:api/RoleMapperApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsGet operation.
     * @callback module:api/RoleMapperApi~realmGroupsIdRoleMappingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MappingsRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role mappings
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/RoleMapperApi~realmGroupsIdRoleMappingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MappingsRepresentation}
     */
    realmGroupsIdRoleMappingsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MappingsRepresentation;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsRealmAvailableGet operation.
     * @callback module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level roles that can be mapped
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmGroupsIdRoleMappingsRealmAvailableGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmAvailableGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmAvailableGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/realm/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsRealmCompositeGet operation.
     * @callback module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmCompositeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmCompositeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmGroupsIdRoleMappingsRealmCompositeGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmCompositeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmCompositeGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/realm/composite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsRealmDelete operation.
     * @callback module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete realm-level role mappings
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmGroupsIdRoleMappingsRealmDelete(realm, id, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmGroupsIdRoleMappingsRealmDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/realm', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsRealmGet operation.
     * @callback module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level role mappings
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmGroupsIdRoleMappingsRealmGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/realm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmGroupsIdRoleMappingsRealmPost operation.
     * @callback module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add realm-level role mappings to the user
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation Roles to add
     * @param {module:api/RoleMapperApi~realmGroupsIdRoleMappingsRealmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmGroupsIdRoleMappingsRealmPost(realm, id, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmGroupsIdRoleMappingsRealmPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmGroupsIdRoleMappingsRealmPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmGroupsIdRoleMappingsRealmPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/groups/{id}/role-mappings/realm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsGet operation.
     * @callback module:api/RoleMapperApi~realmUsersIdRoleMappingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MappingsRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role mappings
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/RoleMapperApi~realmUsersIdRoleMappingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MappingsRepresentation}
     */
    realmUsersIdRoleMappingsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MappingsRepresentation;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsRealmAvailableGet operation.
     * @callback module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level roles that can be mapped
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmUsersIdRoleMappingsRealmAvailableGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmAvailableGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmAvailableGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/realm/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsRealmCompositeGet operation.
     * @callback module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmCompositeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmCompositeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmUsersIdRoleMappingsRealmCompositeGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmCompositeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmCompositeGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/realm/composite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsRealmDelete operation.
     * @callback module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete realm-level role mappings
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdRoleMappingsRealmDelete(realm, id, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmUsersIdRoleMappingsRealmDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/realm', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsRealmGet operation.
     * @callback module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level role mappings
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmUsersIdRoleMappingsRealmGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/realm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUsersIdRoleMappingsRealmPost operation.
     * @callback module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add realm-level role mappings to the user
     * @param {String} realm realm name (not id!)
     * @param {String} id User id
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation Roles to add
     * @param {module:api/RoleMapperApi~realmUsersIdRoleMappingsRealmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUsersIdRoleMappingsRealmPost(realm, id, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUsersIdRoleMappingsRealmPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUsersIdRoleMappingsRealmPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmUsersIdRoleMappingsRealmPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/users/{id}/role-mappings/realm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
