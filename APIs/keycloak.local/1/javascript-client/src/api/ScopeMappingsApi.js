/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MappingsRepresentation from '../model/MappingsRepresentation';
import RoleRepresentation from '../model/RoleRepresentation';

/**
* ScopeMappings service.
* @module api/ScopeMappingsApi
* @version 1
*/
export default class ScopeMappingsApi {

    /**
    * Constructs a new ScopeMappingsApi. 
    * @alias module:api/ScopeMappingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsClientsClientAvailableGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {String} client 
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientScopesIdScopeMappingsClientsClientAvailableGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsClientsClientAvailableGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsClientsClientAvailableGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientScopesIdScopeMappingsClientsClientAvailableGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsClientsClientCompositeGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientCompositeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {String} client 
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientCompositeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientScopesIdScopeMappingsClientsClientCompositeGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsClientsClientCompositeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsClientsClientCompositeGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientScopesIdScopeMappingsClientsClientCompositeGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsClientsClientDelete operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove client-level roles from the client’s scope.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {String} client 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesIdScopeMappingsClientsClientDelete(realm, id, client, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsClientsClientDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsClientsClientDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientScopesIdScopeMappingsClientsClientDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientScopesIdScopeMappingsClientsClientDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsClientsClientGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the roles associated with a client’s scope   Returns roles for the client.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {String} client 
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientScopesIdScopeMappingsClientsClientGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsClientsClientGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsClientsClientGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientScopesIdScopeMappingsClientsClientGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsClientsClientPost operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add client-level roles to the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {String} client 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsClientsClientPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesIdScopeMappingsClientsClientPost(realm, id, client, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsClientsClientPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsClientsClientPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientScopesIdScopeMappingsClientsClientPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientScopesIdScopeMappingsClientsClientPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MappingsRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all scope mappings for the client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MappingsRepresentation}
     */
    realmClientScopesIdScopeMappingsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MappingsRepresentation;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsRealmAvailableGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level roles that are available to attach to this client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientScopesIdScopeMappingsRealmAvailableGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsRealmAvailableGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsRealmAvailableGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/realm/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsRealmCompositeGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmCompositeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmCompositeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientScopesIdScopeMappingsRealmCompositeGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsRealmCompositeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsRealmCompositeGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/realm/composite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsRealmDelete operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a set of realm-level roles from the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesIdScopeMappingsRealmDelete(realm, id, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsRealmDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsRealmDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientScopesIdScopeMappingsRealmDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/realm', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsRealmGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level roles associated with the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientScopesIdScopeMappingsRealmGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsRealmGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsRealmGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/realm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientScopesIdScopeMappingsRealmPost operation.
     * @callback module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a set of realm-level roles to the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client scope (not name)
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ScopeMappingsApi~realmClientScopesIdScopeMappingsRealmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientScopesIdScopeMappingsRealmPost(realm, id, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientScopesIdScopeMappingsRealmPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientScopesIdScopeMappingsRealmPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientScopesIdScopeMappingsRealmPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/client-scopes/{id}/scope-mappings/realm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsClientsClientAvailableGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} client 
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdScopeMappingsClientsClientAvailableGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsClientsClientAvailableGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsClientsClientAvailableGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientsIdScopeMappingsClientsClientAvailableGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/clients/{client}/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsClientsClientCompositeGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientCompositeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} client 
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientCompositeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdScopeMappingsClientsClientCompositeGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsClientsClientCompositeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsClientsClientCompositeGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientsIdScopeMappingsClientsClientCompositeGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/clients/{client}/composite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsClientsClientDelete operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove client-level roles from the client’s scope.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} client 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdScopeMappingsClientsClientDelete(realm, id, client, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsClientsClientDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsClientsClientDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientsIdScopeMappingsClientsClientDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientsIdScopeMappingsClientsClientDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/clients/{client}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsClientsClientGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the roles associated with a client’s scope   Returns roles for the client.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} client 
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdScopeMappingsClientsClientGet(realm, id, client, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsClientsClientGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsClientsClientGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientsIdScopeMappingsClientsClientGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/clients/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsClientsClientPost operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add client-level roles to the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} client 
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsClientsClientPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdScopeMappingsClientsClientPost(realm, id, client, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsClientsClientPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsClientsClientPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling realmClientsIdScopeMappingsClientsClientPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientsIdScopeMappingsClientsClientPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/clients/{client}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MappingsRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all scope mappings for the client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MappingsRepresentation}
     */
    realmClientsIdScopeMappingsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MappingsRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsRealmAvailableGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level roles that are available to attach to this client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdScopeMappingsRealmAvailableGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsRealmAvailableGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsRealmAvailableGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/realm/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsRealmCompositeGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmCompositeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmCompositeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdScopeMappingsRealmCompositeGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsRealmCompositeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsRealmCompositeGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/realm/composite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsRealmDelete operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a set of realm-level roles from the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdScopeMappingsRealmDelete(realm, id, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsRealmDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsRealmDelete");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientsIdScopeMappingsRealmDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/realm', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsRealmGet operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get realm-level roles associated with the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdScopeMappingsRealmGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsRealmGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsRealmGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/realm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdScopeMappingsRealmPost operation.
     * @callback module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a set of realm-level roles to the client’s scope
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {Array.<module:model/RoleRepresentation>} roleRepresentation 
     * @param {module:api/ScopeMappingsApi~realmClientsIdScopeMappingsRealmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdScopeMappingsRealmPost(realm, id, roleRepresentation, callback) {
      let postBody = roleRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdScopeMappingsRealmPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdScopeMappingsRealmPost");
      }
      // verify the required parameter 'roleRepresentation' is set
      if (roleRepresentation === undefined || roleRepresentation === null) {
        throw new Error("Missing the required parameter 'roleRepresentation' when calling realmClientsIdScopeMappingsRealmPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/scope-mappings/realm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
