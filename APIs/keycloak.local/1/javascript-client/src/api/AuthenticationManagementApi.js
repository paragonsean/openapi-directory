/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthenticationExecutionInfoRepresentation from '../model/AuthenticationExecutionInfoRepresentation';
import AuthenticationExecutionRepresentation from '../model/AuthenticationExecutionRepresentation';
import AuthenticationFlowRepresentation from '../model/AuthenticationFlowRepresentation';
import AuthenticatorConfigInfoRepresentation from '../model/AuthenticatorConfigInfoRepresentation';
import AuthenticatorConfigRepresentation from '../model/AuthenticatorConfigRepresentation';
import RequiredActionProviderRepresentation from '../model/RequiredActionProviderRepresentation';

/**
* AuthenticationManagement service.
* @module api/AuthenticationManagementApi
* @version 1
*/
export default class AuthenticationManagementApi {

    /**
    * Constructs a new AuthenticationManagementApi. 
    * @alias module:api/AuthenticationManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmAuthenticationAuthenticatorProvidersGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationAuthenticatorProvidersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authenticator providers   Returns a list of authenticator providers.
     * @param {String} realm realm name (not id!)
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationAuthenticatorProvidersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: Object}>}
     */
    realmAuthenticationAuthenticatorProvidersGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationAuthenticatorProvidersGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];
      return this.apiClient.callApi(
        '/{realm}/authentication/authenticator-providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationClientAuthenticatorProvidersGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationClientAuthenticatorProvidersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client authenticator providers   Returns a list of client authenticator providers.
     * @param {String} realm realm name (not id!)
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationClientAuthenticatorProvidersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: Object}>}
     */
    realmAuthenticationClientAuthenticatorProvidersGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationClientAuthenticatorProvidersGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];
      return this.apiClient.callApi(
        '/{realm}/authentication/client-authenticator-providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationConfigDescriptionProviderIdGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationConfigDescriptionProviderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticatorConfigInfoRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authenticator providerâ€™s configuration description
     * @param {String} realm realm name (not id!)
     * @param {String} providerId 
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationConfigDescriptionProviderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticatorConfigInfoRepresentation}
     */
    realmAuthenticationConfigDescriptionProviderIdGet(realm, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationConfigDescriptionProviderIdGet");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling realmAuthenticationConfigDescriptionProviderIdGet");
      }

      let pathParams = {
        'realm': realm,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticatorConfigInfoRepresentation;
      return this.apiClient.callApi(
        '/{realm}/authentication/config-description/{providerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationConfigIdDelete operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationConfigIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete authenticator configuration
     * @param {String} realm realm name (not id!)
     * @param {String} id Configuration id
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationConfigIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationConfigIdDelete(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationConfigIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmAuthenticationConfigIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/config/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationConfigIdGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationConfigIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticatorConfigRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authenticator configuration
     * @param {String} realm realm name (not id!)
     * @param {String} id Configuration id
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationConfigIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticatorConfigRepresentation}
     */
    realmAuthenticationConfigIdGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationConfigIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmAuthenticationConfigIdGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticatorConfigRepresentation;
      return this.apiClient.callApi(
        '/{realm}/authentication/config/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationConfigIdPut operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationConfigIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update authenticator configuration
     * @param {String} realm realm name (not id!)
     * @param {String} id Configuration id
     * @param {module:model/AuthenticatorConfigRepresentation} authenticatorConfigRepresentation JSON describing new state of authenticator configuration
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationConfigIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationConfigIdPut(realm, id, authenticatorConfigRepresentation, callback) {
      let postBody = authenticatorConfigRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationConfigIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmAuthenticationConfigIdPut");
      }
      // verify the required parameter 'authenticatorConfigRepresentation' is set
      if (authenticatorConfigRepresentation === undefined || authenticatorConfigRepresentation === null) {
        throw new Error("Missing the required parameter 'authenticatorConfigRepresentation' when calling realmAuthenticationConfigIdPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/config/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationExecutionsExecutionIdConfigPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdConfigPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update execution with new configuration
     * @param {String} realm realm name (not id!)
     * @param {String} executionId Execution id
     * @param {module:model/AuthenticatorConfigRepresentation} authenticatorConfigRepresentation JSON with new configuration
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdConfigPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationExecutionsExecutionIdConfigPost(realm, executionId, authenticatorConfigRepresentation, callback) {
      let postBody = authenticatorConfigRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdConfigPost");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdConfigPost");
      }
      // verify the required parameter 'authenticatorConfigRepresentation' is set
      if (authenticatorConfigRepresentation === undefined || authenticatorConfigRepresentation === null) {
        throw new Error("Missing the required parameter 'authenticatorConfigRepresentation' when calling realmAuthenticationExecutionsExecutionIdConfigPost");
      }

      let pathParams = {
        'realm': realm,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/executions/{executionId}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationExecutionsExecutionIdDelete operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete execution
     * @param {String} realm realm name (not id!)
     * @param {String} executionId Execution id
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationExecutionsExecutionIdDelete(realm, executionId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdDelete");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/executions/{executionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationExecutionsExecutionIdGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Single Execution
     * @param {String} realm realm name (not id!)
     * @param {String} executionId Execution id
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationExecutionsExecutionIdGet(realm, executionId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdGet");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdGet");
      }

      let pathParams = {
        'realm': realm,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/executions/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationExecutionsExecutionIdLowerPriorityPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdLowerPriorityPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lower executionâ€™s priority
     * @param {String} realm realm name (not id!)
     * @param {String} executionId Execution id
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdLowerPriorityPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationExecutionsExecutionIdLowerPriorityPost(realm, executionId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdLowerPriorityPost");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdLowerPriorityPost");
      }

      let pathParams = {
        'realm': realm,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/executions/{executionId}/lower-priority', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationExecutionsExecutionIdRaisePriorityPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdRaisePriorityPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Raise executionâ€™s priority
     * @param {String} realm realm name (not id!)
     * @param {String} executionId Execution id
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationExecutionsExecutionIdRaisePriorityPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationExecutionsExecutionIdRaisePriorityPost(realm, executionId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsExecutionIdRaisePriorityPost");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling realmAuthenticationExecutionsExecutionIdRaisePriorityPost");
      }

      let pathParams = {
        'realm': realm,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/executions/{executionId}/raise-priority', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationExecutionsPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationExecutionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new authentication execution
     * @param {String} realm realm name (not id!)
     * @param {module:model/AuthenticationExecutionRepresentation} authenticationExecutionRepresentation JSON model describing authentication execution
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationExecutionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationExecutionsPost(realm, authenticationExecutionRepresentation, callback) {
      let postBody = authenticationExecutionRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationExecutionsPost");
      }
      // verify the required parameter 'authenticationExecutionRepresentation' is set
      if (authenticationExecutionRepresentation === undefined || authenticationExecutionRepresentation === null) {
        throw new Error("Missing the required parameter 'authenticationExecutionRepresentation' when calling realmAuthenticationExecutionsPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/executions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsFlowAliasCopyPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasCopyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object
     * @param {String} realm realm name (not id!)
     * @param {String} flowAlias Name of the existing authentication flow
     * @param {Object.<String, {String: Object}>} requestBody JSON containing 'newName' attribute
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasCopyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationFlowsFlowAliasCopyPost(realm, flowAlias, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasCopyPost");
      }
      // verify the required parameter 'flowAlias' is set
      if (flowAlias === undefined || flowAlias === null) {
        throw new Error("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasCopyPost");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling realmAuthenticationFlowsFlowAliasCopyPost");
      }

      let pathParams = {
        'realm': realm,
        'flowAlias': flowAlias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/flows/{flowAlias}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsFlowAliasExecutionsExecutionPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasExecutionsExecutionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new authentication execution to a flow
     * @param {String} realm realm name (not id!)
     * @param {String} flowAlias Alias of parent flow
     * @param {Object.<String, {String: Object}>} requestBody New execution JSON data containing 'provider' attribute
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasExecutionsExecutionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(realm, flowAlias, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost");
      }
      // verify the required parameter 'flowAlias' is set
      if (flowAlias === undefined || flowAlias === null) {
        throw new Error("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost");
      }

      let pathParams = {
        'realm': realm,
        'flowAlias': flowAlias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/flows/{flowAlias}/executions/execution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsFlowAliasExecutionsFlowPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasExecutionsFlowPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new flow with new execution to existing flow
     * @param {String} realm realm name (not id!)
     * @param {String} flowAlias Alias of parent authentication flow
     * @param {Object.<String, {String: Object}>} requestBody New authentication flow / execution JSON data containing 'alias', 'type', 'provider', and 'description' attributes
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasExecutionsFlowPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationFlowsFlowAliasExecutionsFlowPost(realm, flowAlias, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost");
      }
      // verify the required parameter 'flowAlias' is set
      if (flowAlias === undefined || flowAlias === null) {
        throw new Error("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost");
      }

      let pathParams = {
        'realm': realm,
        'flowAlias': flowAlias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/flows/{flowAlias}/executions/flow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsFlowAliasExecutionsGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasExecutionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authentication executions for a flow
     * @param {String} realm realm name (not id!)
     * @param {String} flowAlias Flow alias
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasExecutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationFlowsFlowAliasExecutionsGet(realm, flowAlias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasExecutionsGet");
      }
      // verify the required parameter 'flowAlias' is set
      if (flowAlias === undefined || flowAlias === null) {
        throw new Error("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasExecutionsGet");
      }

      let pathParams = {
        'realm': realm,
        'flowAlias': flowAlias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/flows/{flowAlias}/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsFlowAliasExecutionsPut operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasExecutionsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update authentication executions of a flow
     * @param {String} realm realm name (not id!)
     * @param {String} flowAlias Flow alias
     * @param {module:model/AuthenticationExecutionInfoRepresentation} authenticationExecutionInfoRepresentation 
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsFlowAliasExecutionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationFlowsFlowAliasExecutionsPut(realm, flowAlias, authenticationExecutionInfoRepresentation, callback) {
      let postBody = authenticationExecutionInfoRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsFlowAliasExecutionsPut");
      }
      // verify the required parameter 'flowAlias' is set
      if (flowAlias === undefined || flowAlias === null) {
        throw new Error("Missing the required parameter 'flowAlias' when calling realmAuthenticationFlowsFlowAliasExecutionsPut");
      }
      // verify the required parameter 'authenticationExecutionInfoRepresentation' is set
      if (authenticationExecutionInfoRepresentation === undefined || authenticationExecutionInfoRepresentation === null) {
        throw new Error("Missing the required parameter 'authenticationExecutionInfoRepresentation' when calling realmAuthenticationFlowsFlowAliasExecutionsPut");
      }

      let pathParams = {
        'realm': realm,
        'flowAlias': flowAlias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/flows/{flowAlias}/executions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuthenticationFlowRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authentication flows   Returns a list of authentication flows.
     * @param {String} realm realm name (not id!)
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuthenticationFlowRepresentation>}
     */
    realmAuthenticationFlowsGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AuthenticationFlowRepresentation];
      return this.apiClient.callApi(
        '/{realm}/authentication/flows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsIdDelete operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an authentication flow
     * @param {String} realm realm name (not id!)
     * @param {String} id Flow id
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationFlowsIdDelete(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmAuthenticationFlowsIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/flows/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsIdGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationFlowRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authentication flow for id
     * @param {String} realm realm name (not id!)
     * @param {String} id Flow id
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationFlowRepresentation}
     */
    realmAuthenticationFlowsIdGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmAuthenticationFlowsIdGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationFlowRepresentation;
      return this.apiClient.callApi(
        '/{realm}/authentication/flows/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsIdPut operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an authentication flow
     * @param {String} realm realm name (not id!)
     * @param {String} id Flow id
     * @param {module:model/AuthenticationFlowRepresentation} authenticationFlowRepresentation Authentication flow representation
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationFlowsIdPut(realm, id, authenticationFlowRepresentation, callback) {
      let postBody = authenticationFlowRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmAuthenticationFlowsIdPut");
      }
      // verify the required parameter 'authenticationFlowRepresentation' is set
      if (authenticationFlowRepresentation === undefined || authenticationFlowRepresentation === null) {
        throw new Error("Missing the required parameter 'authenticationFlowRepresentation' when calling realmAuthenticationFlowsIdPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/flows/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFlowsPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFlowsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new authentication flow
     * @param {String} realm realm name (not id!)
     * @param {module:model/AuthenticationFlowRepresentation} authenticationFlowRepresentation Authentication flow representation
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFlowsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationFlowsPost(realm, authenticationFlowRepresentation, callback) {
      let postBody = authenticationFlowRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFlowsPost");
      }
      // verify the required parameter 'authenticationFlowRepresentation' is set
      if (authenticationFlowRepresentation === undefined || authenticationFlowRepresentation === null) {
        throw new Error("Missing the required parameter 'authenticationFlowRepresentation' when calling realmAuthenticationFlowsPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/flows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFormActionProvidersGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFormActionProvidersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get form action providers   Returns a list of form action providers.
     * @param {String} realm realm name (not id!)
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFormActionProvidersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: Object}>}
     */
    realmAuthenticationFormActionProvidersGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFormActionProvidersGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];
      return this.apiClient.callApi(
        '/{realm}/authentication/form-action-providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationFormProvidersGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationFormProvidersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get form providers   Returns a list of form providers.
     * @param {String} realm realm name (not id!)
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationFormProvidersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: Object}>}
     */
    realmAuthenticationFormProvidersGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationFormProvidersGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];
      return this.apiClient.callApi(
        '/{realm}/authentication/form-providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationPerClientConfigDescriptionGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationPerClientConfigDescriptionGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration descriptions for all clients
     * @param {String} realm realm name (not id!)
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationPerClientConfigDescriptionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    realmAuthenticationPerClientConfigDescriptionGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationPerClientConfigDescriptionGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/{realm}/authentication/per-client-config-description', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationRegisterRequiredActionPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationRegisterRequiredActionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new required actions
     * @param {String} realm realm name (not id!)
     * @param {Object.<String, {String: Object}>} requestBody JSON containing 'providerId', and 'name' attributes.
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationRegisterRequiredActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationRegisterRequiredActionPost(realm, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationRegisterRequiredActionPost");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling realmAuthenticationRegisterRequiredActionPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/register-required-action', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationRequiredActionsAliasDelete operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete required action
     * @param {String} realm realm name (not id!)
     * @param {String} alias Alias of required action
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationRequiredActionsAliasDelete(realm, alias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasDelete");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasDelete");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/required-actions/{alias}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationRequiredActionsAliasGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequiredActionProviderRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get required action for alias
     * @param {String} realm realm name (not id!)
     * @param {String} alias Alias of required action
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequiredActionProviderRepresentation}
     */
    realmAuthenticationRequiredActionsAliasGet(realm, alias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasGet");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasGet");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequiredActionProviderRepresentation;
      return this.apiClient.callApi(
        '/{realm}/authentication/required-actions/{alias}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationRequiredActionsAliasLowerPriorityPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasLowerPriorityPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lower required actionâ€™s priority
     * @param {String} realm realm name (not id!)
     * @param {String} alias Alias of required action
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasLowerPriorityPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationRequiredActionsAliasLowerPriorityPost(realm, alias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasLowerPriorityPost");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasLowerPriorityPost");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/required-actions/{alias}/lower-priority', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationRequiredActionsAliasPut operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update required action
     * @param {String} realm realm name (not id!)
     * @param {String} alias Alias of required action
     * @param {module:model/RequiredActionProviderRepresentation} requiredActionProviderRepresentation JSON describing new state of required action
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationRequiredActionsAliasPut(realm, alias, requiredActionProviderRepresentation, callback) {
      let postBody = requiredActionProviderRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasPut");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasPut");
      }
      // verify the required parameter 'requiredActionProviderRepresentation' is set
      if (requiredActionProviderRepresentation === undefined || requiredActionProviderRepresentation === null) {
        throw new Error("Missing the required parameter 'requiredActionProviderRepresentation' when calling realmAuthenticationRequiredActionsAliasPut");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/required-actions/{alias}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationRequiredActionsAliasRaisePriorityPost operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasRaisePriorityPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Raise required actionâ€™s priority
     * @param {String} realm realm name (not id!)
     * @param {String} alias Alias of required action
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsAliasRaisePriorityPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmAuthenticationRequiredActionsAliasRaisePriorityPost(realm, alias, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsAliasRaisePriorityPost");
      }
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling realmAuthenticationRequiredActionsAliasRaisePriorityPost");
      }

      let pathParams = {
        'realm': realm,
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/authentication/required-actions/{alias}/raise-priority', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationRequiredActionsGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RequiredActionProviderRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get required actions   Returns a list of required actions.
     * @param {String} realm realm name (not id!)
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationRequiredActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RequiredActionProviderRepresentation>}
     */
    realmAuthenticationRequiredActionsGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationRequiredActionsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RequiredActionProviderRepresentation];
      return this.apiClient.callApi(
        '/{realm}/authentication/required-actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmAuthenticationUnregisteredRequiredActionsGet operation.
     * @callback module:api/AuthenticationManagementApi~realmAuthenticationUnregisteredRequiredActionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get unregistered required actions   Returns a list of unregistered required actions.
     * @param {String} realm realm name (not id!)
     * @param {module:api/AuthenticationManagementApi~realmAuthenticationUnregisteredRequiredActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: Object}>}
     */
    realmAuthenticationUnregisteredRequiredActionsGet(realm, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmAuthenticationUnregisteredRequiredActionsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];
      return this.apiClient.callApi(
        '/{realm}/authentication/unregistered-required-actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
