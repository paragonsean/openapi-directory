/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SynchronizationResult from '../model/SynchronizationResult';

/**
* UserStorageProvider service.
* @module api/UserStorageProviderApi
* @version 1
*/
export default class UserStorageProviderApi {

    /**
    * Constructs a new UserStorageProviderApi. 
    * @alias module:api/UserStorageProviderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the idNameGet operation.
     * @callback module:api/UserStorageProviderApi~idNameGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328
     * @param {String} id 
     * @param {module:api/UserStorageProviderApi~idNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    idNameGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idNameGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/{id}/name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUserStorageIdNameGet operation.
     * @callback module:api/UserStorageProviderApi~realmUserStorageIdNameGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/UserStorageProviderApi~realmUserStorageIdNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    realmUserStorageIdNameGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUserStorageIdNameGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUserStorageIdNameGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/{realm}/user-storage/{id}/name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUserStorageIdRemoveImportedUsersPost operation.
     * @callback module:api/UserStorageProviderApi~realmUserStorageIdRemoveImportedUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove imported users
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/UserStorageProviderApi~realmUserStorageIdRemoveImportedUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUserStorageIdRemoveImportedUsersPost(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUserStorageIdRemoveImportedUsersPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUserStorageIdRemoveImportedUsersPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/user-storage/{id}/remove-imported-users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUserStorageIdSyncPost operation.
     * @callback module:api/UserStorageProviderApi~realmUserStorageIdSyncPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynchronizationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger sync of users   Action can be \"triggerFullSync\" or \"triggerChangedUsersSync\"
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [action] 
     * @param {module:api/UserStorageProviderApi~realmUserStorageIdSyncPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynchronizationResult}
     */
    realmUserStorageIdSyncPost(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUserStorageIdSyncPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUserStorageIdSyncPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SynchronizationResult;
      return this.apiClient.callApi(
        '/{realm}/user-storage/{id}/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUserStorageIdUnlinkUsersPost operation.
     * @callback module:api/UserStorageProviderApi~realmUserStorageIdUnlinkUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlink imported users from a storage provider
     * @param {String} realm realm name (not id!)
     * @param {String} id 
     * @param {module:api/UserStorageProviderApi~realmUserStorageIdUnlinkUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmUserStorageIdUnlinkUsersPost(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUserStorageIdUnlinkUsersPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUserStorageIdUnlinkUsersPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/user-storage/{id}/unlink-users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmUserStorageParentIdMappersIdSyncPost operation.
     * @callback module:api/UserStorageProviderApi~realmUserStorageParentIdMappersIdSyncPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynchronizationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger sync of mapper data related to ldap mapper (roles, groups, …​)   direction is \"fedToKeycloak\" or \"keycloakToFed\"
     * @param {String} realm realm name (not id!)
     * @param {String} parentId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [direction] 
     * @param {module:api/UserStorageProviderApi~realmUserStorageParentIdMappersIdSyncPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynchronizationResult}
     */
    realmUserStorageParentIdMappersIdSyncPost(realm, parentId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmUserStorageParentIdMappersIdSyncPost");
      }
      // verify the required parameter 'parentId' is set
      if (parentId === undefined || parentId === null) {
        throw new Error("Missing the required parameter 'parentId' when calling realmUserStorageParentIdMappersIdSyncPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmUserStorageParentIdMappersIdSyncPost");
      }

      let pathParams = {
        'realm': realm,
        'parentId': parentId,
        'id': id
      };
      let queryParams = {
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SynchronizationResult;
      return this.apiClient.callApi(
        '/{realm}/user-storage/{parentId}/mappers/{id}/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
