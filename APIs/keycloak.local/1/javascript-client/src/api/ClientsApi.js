/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessToken from '../model/AccessToken';
import ClientRepresentation from '../model/ClientRepresentation';
import ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation from '../model/ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation';
import ClientScopeRepresentation from '../model/ClientScopeRepresentation';
import CredentialRepresentation from '../model/CredentialRepresentation';
import GlobalRequestResult from '../model/GlobalRequestResult';
import ManagementPermissionReference from '../model/ManagementPermissionReference';
import RoleRepresentation from '../model/RoleRepresentation';
import UserRepresentation from '../model/UserRepresentation';
import UserSessionRepresentation from '../model/UserSessionRepresentation';

/**
* Clients service.
* @module api/ClientsApi
* @version 1
*/
export default class ClientsApi {

    /**
    * Constructs a new ClientsApi. 
    * @alias module:api/ClientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realmClientsGet operation.
     * @callback module:api/ClientsApi~realmClientsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClientRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get clients belonging to the realm   Returns a list of clients belonging to the realm
     * @param {String} realm realm name (not id!)
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] filter by clientId
     * @param {Number} [first] the first result
     * @param {Number} [max] the max results to return
     * @param {Boolean} [search] whether this is a search query or a getClientById query
     * @param {Boolean} [viewableOnly] filter clients that cannot be viewed in full by admin
     * @param {module:api/ClientsApi~realmClientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClientRepresentation>}
     */
    realmClientsGet(realm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsGet");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'first': opts['first'],
        'max': opts['max'],
        'search': opts['search'],
        'viewableOnly': opts['viewableOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClientRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdClientSecretGet operation.
     * @callback module:api/ClientsApi~realmClientsIdClientSecretGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the client secret
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdClientSecretGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialRepresentation}
     */
    realmClientsIdClientSecretGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdClientSecretGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdClientSecretGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CredentialRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/client-secret', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdClientSecretPost operation.
     * @callback module:api/ClientsApi~realmClientsIdClientSecretPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new secret for the client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdClientSecretPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialRepresentation}
     */
    realmClientsIdClientSecretPost(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdClientSecretPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdClientSecretPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CredentialRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/client-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdDefaultClientScopesClientScopeIdDelete operation.
     * @callback module:api/ClientsApi~realmClientsIdDefaultClientScopesClientScopeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} clientScopeId 
     * @param {module:api/ClientsApi~realmClientsIdDefaultClientScopesClientScopeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdDefaultClientScopesClientScopeIdDelete(realm, id, clientScopeId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdDefaultClientScopesClientScopeIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdDefaultClientScopesClientScopeIdDelete");
      }
      // verify the required parameter 'clientScopeId' is set
      if (clientScopeId === undefined || clientScopeId === null) {
        throw new Error("Missing the required parameter 'clientScopeId' when calling realmClientsIdDefaultClientScopesClientScopeIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'clientScopeId': clientScopeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdDefaultClientScopesClientScopeIdPut operation.
     * @callback module:api/ClientsApi~realmClientsIdDefaultClientScopesClientScopeIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} clientScopeId 
     * @param {module:api/ClientsApi~realmClientsIdDefaultClientScopesClientScopeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdDefaultClientScopesClientScopeIdPut(realm, id, clientScopeId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdDefaultClientScopesClientScopeIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdDefaultClientScopesClientScopeIdPut");
      }
      // verify the required parameter 'clientScopeId' is set
      if (clientScopeId === undefined || clientScopeId === null) {
        throw new Error("Missing the required parameter 'clientScopeId' when calling realmClientsIdDefaultClientScopesClientScopeIdPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'clientScopeId': clientScopeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdDefaultClientScopesGet operation.
     * @callback module:api/ClientsApi~realmClientsIdDefaultClientScopesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClientScopeRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default client scopes.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdDefaultClientScopesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClientScopeRepresentation>}
     */
    realmClientsIdDefaultClientScopesGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdDefaultClientScopesGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdDefaultClientScopesGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClientScopeRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/default-client-scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdDelete operation.
     * @callback module:api/ClientsApi~realmClientsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdDelete(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdEvaluateScopesGenerateExampleAccessTokenGet operation.
     * @callback module:api/ClientsApi~realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create JSON with payload of example access token
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {Object} opts Optional parameters
     * @param {String} [scope] 
     * @param {String} [userId] 
     * @param {module:api/ClientsApi~realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    realmClientsIdEvaluateScopesGenerateExampleAccessTokenGet(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdEvaluateScopesGenerateExampleAccessTokenGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdEvaluateScopesGenerateExampleAccessTokenGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'scope': opts['scope'],
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessToken;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdEvaluateScopesProtocolMappersGet operation.
     * @callback module:api/ClientsApi~realmClientsIdEvaluateScopesProtocolMappersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {Object} opts Optional parameters
     * @param {String} [scope] 
     * @param {module:api/ClientsApi~realmClientsIdEvaluateScopesProtocolMappersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation>}
     */
    realmClientsIdEvaluateScopesProtocolMappersGet(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdEvaluateScopesProtocolMappersGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdEvaluateScopesProtocolMappersGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/evaluate-scopes/protocol-mappers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGet operation.
     * @callback module:api/ClientsApi~realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleContainerId either realm name OR client UUID
     * @param {Object} opts Optional parameters
     * @param {String} [scope] 
     * @param {module:api/ClientsApi~realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(realm, id, roleContainerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGet");
      }
      // verify the required parameter 'roleContainerId' is set
      if (roleContainerId === undefined || roleContainerId === null) {
        throw new Error("Missing the required parameter 'roleContainerId' when calling realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'roleContainerId': roleContainerId
      };
      let queryParams = {
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet operation.
     * @callback module:api/ClientsApi~realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} roleContainerId either realm name OR client UUID
     * @param {Object} opts Optional parameters
     * @param {String} [scope] 
     * @param {module:api/ClientsApi~realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleRepresentation>}
     */
    realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(realm, id, roleContainerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet");
      }
      // verify the required parameter 'roleContainerId' is set
      if (roleContainerId === undefined || roleContainerId === null) {
        throw new Error("Missing the required parameter 'roleContainerId' when calling realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'roleContainerId': roleContainerId
      };
      let queryParams = {
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdGet operation.
     * @callback module:api/ClientsApi~realmClientsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get representation of the client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientRepresentation}
     */
    realmClientsIdGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdInstallationProvidersProviderIdGet operation.
     * @callback module:api/ClientsApi~realmClientsIdInstallationProvidersProviderIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} providerId 
     * @param {module:api/ClientsApi~realmClientsIdInstallationProvidersProviderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdInstallationProvidersProviderIdGet(realm, id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdInstallationProvidersProviderIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdInstallationProvidersProviderIdGet");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling realmClientsIdInstallationProvidersProviderIdGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/installation/providers/{providerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdManagementPermissionsGet operation.
     * @callback module:api/ClientsApi~realmClientsIdManagementPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdManagementPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmClientsIdManagementPermissionsGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdManagementPermissionsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdManagementPermissionsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/management/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdManagementPermissionsPut operation.
     * @callback module:api/ClientsApi~realmClientsIdManagementPermissionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPermissionReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:model/ManagementPermissionReference} managementPermissionReference 
     * @param {module:api/ClientsApi~realmClientsIdManagementPermissionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPermissionReference}
     */
    realmClientsIdManagementPermissionsPut(realm, id, managementPermissionReference, callback) {
      let postBody = managementPermissionReference;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdManagementPermissionsPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdManagementPermissionsPut");
      }
      // verify the required parameter 'managementPermissionReference' is set
      if (managementPermissionReference === undefined || managementPermissionReference === null) {
        throw new Error("Missing the required parameter 'managementPermissionReference' when calling realmClientsIdManagementPermissionsPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementPermissionReference;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/management/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdNodesNodeDelete operation.
     * @callback module:api/ClientsApi~realmClientsIdNodesNodeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister a cluster node from the client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} node 
     * @param {module:api/ClientsApi~realmClientsIdNodesNodeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdNodesNodeDelete(realm, id, node, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdNodesNodeDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdNodesNodeDelete");
      }
      // verify the required parameter 'node' is set
      if (node === undefined || node === null) {
        throw new Error("Missing the required parameter 'node' when calling realmClientsIdNodesNodeDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'node': node
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/nodes/{node}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdNodesPost operation.
     * @callback module:api/ClientsApi~realmClientsIdNodesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {Object.<String, {String: Object}>} requestBody 
     * @param {module:api/ClientsApi~realmClientsIdNodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdNodesPost(realm, id, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdNodesPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdNodesPost");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling realmClientsIdNodesPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/nodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdOfflineSessionCountGet operation.
     * @callback module:api/ClientsApi~realmClientsIdOfflineSessionCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get application offline session count   Returns a number of offline user sessions associated with this client   {      \"count\": number  }
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdOfflineSessionCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    realmClientsIdOfflineSessionCountGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdOfflineSessionCountGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdOfflineSessionCountGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/offline-session-count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdOfflineSessionsGet operation.
     * @callback module:api/ClientsApi~realmClientsIdOfflineSessionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSessionRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get offline sessions for client   Returns a list of offline user sessions associated with this client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {Object} opts Optional parameters
     * @param {Number} [first] Paging offset
     * @param {Number} [max] Maximum results size (defaults to 100)
     * @param {module:api/ClientsApi~realmClientsIdOfflineSessionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSessionRepresentation>}
     */
    realmClientsIdOfflineSessionsGet(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdOfflineSessionsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdOfflineSessionsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'first': opts['first'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSessionRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/offline-sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdOptionalClientScopesClientScopeIdDelete operation.
     * @callback module:api/ClientsApi~realmClientsIdOptionalClientScopesClientScopeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} clientScopeId 
     * @param {module:api/ClientsApi~realmClientsIdOptionalClientScopesClientScopeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdOptionalClientScopesClientScopeIdDelete(realm, id, clientScopeId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdOptionalClientScopesClientScopeIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdOptionalClientScopesClientScopeIdDelete");
      }
      // verify the required parameter 'clientScopeId' is set
      if (clientScopeId === undefined || clientScopeId === null) {
        throw new Error("Missing the required parameter 'clientScopeId' when calling realmClientsIdOptionalClientScopesClientScopeIdDelete");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'clientScopeId': clientScopeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdOptionalClientScopesClientScopeIdPut operation.
     * @callback module:api/ClientsApi~realmClientsIdOptionalClientScopesClientScopeIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {String} clientScopeId 
     * @param {module:api/ClientsApi~realmClientsIdOptionalClientScopesClientScopeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdOptionalClientScopesClientScopeIdPut(realm, id, clientScopeId, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdOptionalClientScopesClientScopeIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdOptionalClientScopesClientScopeIdPut");
      }
      // verify the required parameter 'clientScopeId' is set
      if (clientScopeId === undefined || clientScopeId === null) {
        throw new Error("Missing the required parameter 'clientScopeId' when calling realmClientsIdOptionalClientScopesClientScopeIdPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id,
        'clientScopeId': clientScopeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdOptionalClientScopesGet operation.
     * @callback module:api/ClientsApi~realmClientsIdOptionalClientScopesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClientScopeRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get optional client scopes.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdOptionalClientScopesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClientScopeRepresentation>}
     */
    realmClientsIdOptionalClientScopesGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdOptionalClientScopesGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdOptionalClientScopesGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClientScopeRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/optional-client-scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdPushRevocationPost operation.
     * @callback module:api/ClientsApi~realmClientsIdPushRevocationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalRequestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdPushRevocationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalRequestResult}
     */
    realmClientsIdPushRevocationPost(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdPushRevocationPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdPushRevocationPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GlobalRequestResult;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/push-revocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdPut operation.
     * @callback module:api/ClientsApi~realmClientsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:model/ClientRepresentation} clientRepresentation 
     * @param {module:api/ClientsApi~realmClientsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsIdPut(realm, id, clientRepresentation, callback) {
      let postBody = clientRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdPut");
      }
      // verify the required parameter 'clientRepresentation' is set
      if (clientRepresentation === undefined || clientRepresentation === null) {
        throw new Error("Missing the required parameter 'clientRepresentation' when calling realmClientsIdPut");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdRegistrationAccessTokenPost operation.
     * @callback module:api/ClientsApi~realmClientsIdRegistrationAccessTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new registration access token for the client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdRegistrationAccessTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientRepresentation}
     */
    realmClientsIdRegistrationAccessTokenPost(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdRegistrationAccessTokenPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdRegistrationAccessTokenPost");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/registration-access-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdServiceAccountUserGet operation.
     * @callback module:api/ClientsApi~realmClientsIdServiceAccountUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user dedicated to the service account
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdServiceAccountUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRepresentation}
     */
    realmClientsIdServiceAccountUserGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdServiceAccountUserGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdServiceAccountUserGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserRepresentation;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/service-account-user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdSessionCountGet operation.
     * @callback module:api/ClientsApi~realmClientsIdSessionCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get application session count   Returns a number of user sessions associated with this client   {      \"count\": number  }
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdSessionCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    realmClientsIdSessionCountGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdSessionCountGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdSessionCountGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/session-count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdTestNodesAvailableGet operation.
     * @callback module:api/ClientsApi~realmClientsIdTestNodesAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalRequestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {module:api/ClientsApi~realmClientsIdTestNodesAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalRequestResult}
     */
    realmClientsIdTestNodesAvailableGet(realm, id, callback) {
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdTestNodesAvailableGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdTestNodesAvailableGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GlobalRequestResult;
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/test-nodes-available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsIdUserSessionsGet operation.
     * @callback module:api/ClientsApi~realmClientsIdUserSessionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSessionRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user sessions for client   Returns a list of user sessions associated with this client
     * @param {String} realm realm name (not id!)
     * @param {String} id id of client (not client-id)
     * @param {Object} opts Optional parameters
     * @param {Number} [first] Paging offset
     * @param {Number} [max] Maximum results size (defaults to 100)
     * @param {module:api/ClientsApi~realmClientsIdUserSessionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSessionRepresentation>}
     */
    realmClientsIdUserSessionsGet(realm, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsIdUserSessionsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realmClientsIdUserSessionsGet");
      }

      let pathParams = {
        'realm': realm,
        'id': id
      };
      let queryParams = {
        'first': opts['first'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSessionRepresentation];
      return this.apiClient.callApi(
        '/{realm}/clients/{id}/user-sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realmClientsPost operation.
     * @callback module:api/ClientsApi~realmClientsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new client   Client’s client_id must be unique!
     * @param {String} realm realm name (not id!)
     * @param {module:model/ClientRepresentation} clientRepresentation 
     * @param {module:api/ClientsApi~realmClientsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realmClientsPost(realm, clientRepresentation, callback) {
      let postBody = clientRepresentation;
      // verify the required parameter 'realm' is set
      if (realm === undefined || realm === null) {
        throw new Error("Missing the required parameter 'realm' when calling realmClientsPost");
      }
      // verify the required parameter 'clientRepresentation' is set
      if (clientRepresentation === undefined || clientRepresentation === null) {
        throw new Error("Missing the required parameter 'clientRepresentation' when calling realmClientsPost");
      }

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{realm}/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
