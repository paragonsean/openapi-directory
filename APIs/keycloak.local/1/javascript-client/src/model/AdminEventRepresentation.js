/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthDetailsRepresentation from './AuthDetailsRepresentation';

/**
 * The AdminEventRepresentation model module.
 * @module model/AdminEventRepresentation
 * @version 1
 */
class AdminEventRepresentation {
    /**
     * Constructs a new <code>AdminEventRepresentation</code>.
     * @alias module:model/AdminEventRepresentation
     */
    constructor() { 
        
        AdminEventRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdminEventRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdminEventRepresentation} obj Optional instance to populate.
     * @return {module:model/AdminEventRepresentation} The populated <code>AdminEventRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdminEventRepresentation();

            if (data.hasOwnProperty('authDetails')) {
                obj['authDetails'] = AuthDetailsRepresentation.constructFromObject(data['authDetails']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
            if (data.hasOwnProperty('realmId')) {
                obj['realmId'] = ApiClient.convertToType(data['realmId'], 'String');
            }
            if (data.hasOwnProperty('representation')) {
                obj['representation'] = ApiClient.convertToType(data['representation'], 'String');
            }
            if (data.hasOwnProperty('resourcePath')) {
                obj['resourcePath'] = ApiClient.convertToType(data['resourcePath'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdminEventRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdminEventRepresentation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authDetails`
        if (data['authDetails']) { // data not null
          AuthDetailsRepresentation.validateJSON(data['authDetails']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }
        // ensure the json data is a string
        if (data['realmId'] && !(typeof data['realmId'] === 'string' || data['realmId'] instanceof String)) {
            throw new Error("Expected the field `realmId` to be a primitive type in the JSON string but got " + data['realmId']);
        }
        // ensure the json data is a string
        if (data['representation'] && !(typeof data['representation'] === 'string' || data['representation'] instanceof String)) {
            throw new Error("Expected the field `representation` to be a primitive type in the JSON string but got " + data['representation']);
        }
        // ensure the json data is a string
        if (data['resourcePath'] && !(typeof data['resourcePath'] === 'string' || data['resourcePath'] instanceof String)) {
            throw new Error("Expected the field `resourcePath` to be a primitive type in the JSON string but got " + data['resourcePath']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }

        return true;
    }


}



/**
 * @member {module:model/AuthDetailsRepresentation} authDetails
 */
AdminEventRepresentation.prototype['authDetails'] = undefined;

/**
 * @member {String} error
 */
AdminEventRepresentation.prototype['error'] = undefined;

/**
 * @member {String} operationType
 */
AdminEventRepresentation.prototype['operationType'] = undefined;

/**
 * @member {String} realmId
 */
AdminEventRepresentation.prototype['realmId'] = undefined;

/**
 * @member {String} representation
 */
AdminEventRepresentation.prototype['representation'] = undefined;

/**
 * @member {String} resourcePath
 */
AdminEventRepresentation.prototype['resourcePath'] = undefined;

/**
 * @member {String} resourceType
 */
AdminEventRepresentation.prototype['resourceType'] = undefined;

/**
 * @member {Number} time
 */
AdminEventRepresentation.prototype['time'] = undefined;






export default AdminEventRepresentation;

