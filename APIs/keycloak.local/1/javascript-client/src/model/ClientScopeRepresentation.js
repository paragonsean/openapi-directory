/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProtocolMapperRepresentation from './ProtocolMapperRepresentation';

/**
 * The ClientScopeRepresentation model module.
 * @module model/ClientScopeRepresentation
 * @version 1
 */
class ClientScopeRepresentation {
    /**
     * Constructs a new <code>ClientScopeRepresentation</code>.
     * @alias module:model/ClientScopeRepresentation
     */
    constructor() { 
        
        ClientScopeRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClientScopeRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientScopeRepresentation} obj Optional instance to populate.
     * @return {module:model/ClientScopeRepresentation} The populated <code>ClientScopeRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientScopeRepresentation();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('protocolMappers')) {
                obj['protocolMappers'] = ApiClient.convertToType(data['protocolMappers'], [ProtocolMapperRepresentation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientScopeRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientScopeRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        if (data['protocolMappers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['protocolMappers'])) {
                throw new Error("Expected the field `protocolMappers` to be an array in the JSON data but got " + data['protocolMappers']);
            }
            // validate the optional field `protocolMappers` (array)
            for (const item of data['protocolMappers']) {
                ProtocolMapperRepresentation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Object.<String, Object>} attributes
 */
ClientScopeRepresentation.prototype['attributes'] = undefined;

/**
 * @member {String} description
 */
ClientScopeRepresentation.prototype['description'] = undefined;

/**
 * @member {String} id
 */
ClientScopeRepresentation.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ClientScopeRepresentation.prototype['name'] = undefined;

/**
 * @member {String} protocol
 */
ClientScopeRepresentation.prototype['protocol'] = undefined;

/**
 * @member {Array.<module:model/ProtocolMapperRepresentation>} protocolMappers
 */
ClientScopeRepresentation.prototype['protocolMappers'] = undefined;






export default ClientScopeRepresentation;

