/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigPropertyRepresentation from './ConfigPropertyRepresentation';

/**
 * The AuthenticatorConfigInfoRepresentation model module.
 * @module model/AuthenticatorConfigInfoRepresentation
 * @version 1
 */
class AuthenticatorConfigInfoRepresentation {
    /**
     * Constructs a new <code>AuthenticatorConfigInfoRepresentation</code>.
     * @alias module:model/AuthenticatorConfigInfoRepresentation
     */
    constructor() { 
        
        AuthenticatorConfigInfoRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthenticatorConfigInfoRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthenticatorConfigInfoRepresentation} obj Optional instance to populate.
     * @return {module:model/AuthenticatorConfigInfoRepresentation} The populated <code>AuthenticatorConfigInfoRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthenticatorConfigInfoRepresentation();

            if (data.hasOwnProperty('helpText')) {
                obj['helpText'] = ApiClient.convertToType(data['helpText'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [ConfigPropertyRepresentation]);
            }
            if (data.hasOwnProperty('providerId')) {
                obj['providerId'] = ApiClient.convertToType(data['providerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthenticatorConfigInfoRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthenticatorConfigInfoRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['helpText'] && !(typeof data['helpText'] === 'string' || data['helpText'] instanceof String)) {
            throw new Error("Expected the field `helpText` to be a primitive type in the JSON string but got " + data['helpText']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                ConfigPropertyRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['providerId'] && !(typeof data['providerId'] === 'string' || data['providerId'] instanceof String)) {
            throw new Error("Expected the field `providerId` to be a primitive type in the JSON string but got " + data['providerId']);
        }

        return true;
    }


}



/**
 * @member {String} helpText
 */
AuthenticatorConfigInfoRepresentation.prototype['helpText'] = undefined;

/**
 * @member {String} name
 */
AuthenticatorConfigInfoRepresentation.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/ConfigPropertyRepresentation>} properties
 */
AuthenticatorConfigInfoRepresentation.prototype['properties'] = undefined;

/**
 * @member {String} providerId
 */
AuthenticatorConfigInfoRepresentation.prototype['providerId'] = undefined;






export default AuthenticatorConfigInfoRepresentation;

