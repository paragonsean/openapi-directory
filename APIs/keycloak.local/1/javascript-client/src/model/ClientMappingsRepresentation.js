/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RoleRepresentation from './RoleRepresentation';

/**
 * The ClientMappingsRepresentation model module.
 * @module model/ClientMappingsRepresentation
 * @version 1
 */
class ClientMappingsRepresentation {
    /**
     * Constructs a new <code>ClientMappingsRepresentation</code>.
     * @alias module:model/ClientMappingsRepresentation
     */
    constructor() { 
        
        ClientMappingsRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClientMappingsRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientMappingsRepresentation} obj Optional instance to populate.
     * @return {module:model/ClientMappingsRepresentation} The populated <code>ClientMappingsRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientMappingsRepresentation();

            if (data.hasOwnProperty('client')) {
                obj['client'] = ApiClient.convertToType(data['client'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mappings')) {
                obj['mappings'] = ApiClient.convertToType(data['mappings'], [RoleRepresentation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientMappingsRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientMappingsRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['client'] && !(typeof data['client'] === 'string' || data['client'] instanceof String)) {
            throw new Error("Expected the field `client` to be a primitive type in the JSON string but got " + data['client']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['mappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mappings'])) {
                throw new Error("Expected the field `mappings` to be an array in the JSON data but got " + data['mappings']);
            }
            // validate the optional field `mappings` (array)
            for (const item of data['mappings']) {
                RoleRepresentation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} client
 */
ClientMappingsRepresentation.prototype['client'] = undefined;

/**
 * @member {String} id
 */
ClientMappingsRepresentation.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/RoleRepresentation>} mappings
 */
ClientMappingsRepresentation.prototype['mappings'] = undefined;






export default ClientMappingsRepresentation;

