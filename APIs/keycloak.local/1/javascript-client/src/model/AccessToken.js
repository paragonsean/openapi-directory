/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessTokenAccess from './AccessTokenAccess';
import AccessTokenAuthorization from './AccessTokenAuthorization';
import AccessTokenCertConf from './AccessTokenCertConf';
import AddressClaimSet from './AddressClaimSet';

/**
 * The AccessToken model module.
 * @module model/AccessToken
 * @version 1
 */
class AccessToken {
    /**
     * Constructs a new <code>AccessToken</code>.
     * @alias module:model/AccessToken
     */
    constructor() { 
        
        AccessToken.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccessToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccessToken} obj Optional instance to populate.
     * @return {module:model/AccessToken} The populated <code>AccessToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessToken();

            if (data.hasOwnProperty('acr')) {
                obj['acr'] = ApiClient.convertToType(data['acr'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = AddressClaimSet.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('allowed-origins')) {
                obj['allowed-origins'] = ApiClient.convertToType(data['allowed-origins'], ['String']);
            }
            if (data.hasOwnProperty('at_hash')) {
                obj['at_hash'] = ApiClient.convertToType(data['at_hash'], 'String');
            }
            if (data.hasOwnProperty('auth_time')) {
                obj['auth_time'] = ApiClient.convertToType(data['auth_time'], 'Number');
            }
            if (data.hasOwnProperty('authorization')) {
                obj['authorization'] = AccessTokenAuthorization.constructFromObject(data['authorization']);
            }
            if (data.hasOwnProperty('azp')) {
                obj['azp'] = ApiClient.convertToType(data['azp'], 'String');
            }
            if (data.hasOwnProperty('birthdate')) {
                obj['birthdate'] = ApiClient.convertToType(data['birthdate'], 'String');
            }
            if (data.hasOwnProperty('c_hash')) {
                obj['c_hash'] = ApiClient.convertToType(data['c_hash'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('claims_locales')) {
                obj['claims_locales'] = ApiClient.convertToType(data['claims_locales'], 'String');
            }
            if (data.hasOwnProperty('cnf')) {
                obj['cnf'] = AccessTokenCertConf.constructFromObject(data['cnf']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('email_verified')) {
                obj['email_verified'] = ApiClient.convertToType(data['email_verified'], 'Boolean');
            }
            if (data.hasOwnProperty('exp')) {
                obj['exp'] = ApiClient.convertToType(data['exp'], 'Number');
            }
            if (data.hasOwnProperty('family_name')) {
                obj['family_name'] = ApiClient.convertToType(data['family_name'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('given_name')) {
                obj['given_name'] = ApiClient.convertToType(data['given_name'], 'String');
            }
            if (data.hasOwnProperty('iat')) {
                obj['iat'] = ApiClient.convertToType(data['iat'], 'Number');
            }
            if (data.hasOwnProperty('iss')) {
                obj['iss'] = ApiClient.convertToType(data['iss'], 'String');
            }
            if (data.hasOwnProperty('jti')) {
                obj['jti'] = ApiClient.convertToType(data['jti'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('middle_name')) {
                obj['middle_name'] = ApiClient.convertToType(data['middle_name'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nbf')) {
                obj['nbf'] = ApiClient.convertToType(data['nbf'], 'Number');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('otherClaims')) {
                obj['otherClaims'] = ApiClient.convertToType(data['otherClaims'], {'String': Object});
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('phone_number_verified')) {
                obj['phone_number_verified'] = ApiClient.convertToType(data['phone_number_verified'], 'Boolean');
            }
            if (data.hasOwnProperty('picture')) {
                obj['picture'] = ApiClient.convertToType(data['picture'], 'String');
            }
            if (data.hasOwnProperty('preferred_username')) {
                obj['preferred_username'] = ApiClient.convertToType(data['preferred_username'], 'String');
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = ApiClient.convertToType(data['profile'], 'String');
            }
            if (data.hasOwnProperty('realm_access')) {
                obj['realm_access'] = AccessTokenAccess.constructFromObject(data['realm_access']);
            }
            if (data.hasOwnProperty('s_hash')) {
                obj['s_hash'] = ApiClient.convertToType(data['s_hash'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('session_state')) {
                obj['session_state'] = ApiClient.convertToType(data['session_state'], 'String');
            }
            if (data.hasOwnProperty('sub')) {
                obj['sub'] = ApiClient.convertToType(data['sub'], 'String');
            }
            if (data.hasOwnProperty('trusted-certs')) {
                obj['trusted-certs'] = ApiClient.convertToType(data['trusted-certs'], ['String']);
            }
            if (data.hasOwnProperty('typ')) {
                obj['typ'] = ApiClient.convertToType(data['typ'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Number');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('zoneinfo')) {
                obj['zoneinfo'] = ApiClient.convertToType(data['zoneinfo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccessToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccessToken</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acr'] && !(typeof data['acr'] === 'string' || data['acr'] instanceof String)) {
            throw new Error("Expected the field `acr` to be a primitive type in the JSON string but got " + data['acr']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          AddressClaimSet.validateJSON(data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed-origins'])) {
            throw new Error("Expected the field `allowed-origins` to be an array in the JSON data but got " + data['allowed-origins']);
        }
        // ensure the json data is a string
        if (data['at_hash'] && !(typeof data['at_hash'] === 'string' || data['at_hash'] instanceof String)) {
            throw new Error("Expected the field `at_hash` to be a primitive type in the JSON string but got " + data['at_hash']);
        }
        // validate the optional field `authorization`
        if (data['authorization']) { // data not null
          AccessTokenAuthorization.validateJSON(data['authorization']);
        }
        // ensure the json data is a string
        if (data['azp'] && !(typeof data['azp'] === 'string' || data['azp'] instanceof String)) {
            throw new Error("Expected the field `azp` to be a primitive type in the JSON string but got " + data['azp']);
        }
        // ensure the json data is a string
        if (data['birthdate'] && !(typeof data['birthdate'] === 'string' || data['birthdate'] instanceof String)) {
            throw new Error("Expected the field `birthdate` to be a primitive type in the JSON string but got " + data['birthdate']);
        }
        // ensure the json data is a string
        if (data['c_hash'] && !(typeof data['c_hash'] === 'string' || data['c_hash'] instanceof String)) {
            throw new Error("Expected the field `c_hash` to be a primitive type in the JSON string but got " + data['c_hash']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['claims_locales'] && !(typeof data['claims_locales'] === 'string' || data['claims_locales'] instanceof String)) {
            throw new Error("Expected the field `claims_locales` to be a primitive type in the JSON string but got " + data['claims_locales']);
        }
        // validate the optional field `cnf`
        if (data['cnf']) { // data not null
          AccessTokenCertConf.validateJSON(data['cnf']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['family_name'] && !(typeof data['family_name'] === 'string' || data['family_name'] instanceof String)) {
            throw new Error("Expected the field `family_name` to be a primitive type in the JSON string but got " + data['family_name']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['given_name'] && !(typeof data['given_name'] === 'string' || data['given_name'] instanceof String)) {
            throw new Error("Expected the field `given_name` to be a primitive type in the JSON string but got " + data['given_name']);
        }
        // ensure the json data is a string
        if (data['iss'] && !(typeof data['iss'] === 'string' || data['iss'] instanceof String)) {
            throw new Error("Expected the field `iss` to be a primitive type in the JSON string but got " + data['iss']);
        }
        // ensure the json data is a string
        if (data['jti'] && !(typeof data['jti'] === 'string' || data['jti'] instanceof String)) {
            throw new Error("Expected the field `jti` to be a primitive type in the JSON string but got " + data['jti']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['middle_name'] && !(typeof data['middle_name'] === 'string' || data['middle_name'] instanceof String)) {
            throw new Error("Expected the field `middle_name` to be a primitive type in the JSON string but got " + data['middle_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
            throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }
        // ensure the json data is a string
        if (data['picture'] && !(typeof data['picture'] === 'string' || data['picture'] instanceof String)) {
            throw new Error("Expected the field `picture` to be a primitive type in the JSON string but got " + data['picture']);
        }
        // ensure the json data is a string
        if (data['preferred_username'] && !(typeof data['preferred_username'] === 'string' || data['preferred_username'] instanceof String)) {
            throw new Error("Expected the field `preferred_username` to be a primitive type in the JSON string but got " + data['preferred_username']);
        }
        // ensure the json data is a string
        if (data['profile'] && !(typeof data['profile'] === 'string' || data['profile'] instanceof String)) {
            throw new Error("Expected the field `profile` to be a primitive type in the JSON string but got " + data['profile']);
        }
        // validate the optional field `realm_access`
        if (data['realm_access']) { // data not null
          AccessTokenAccess.validateJSON(data['realm_access']);
        }
        // ensure the json data is a string
        if (data['s_hash'] && !(typeof data['s_hash'] === 'string' || data['s_hash'] instanceof String)) {
            throw new Error("Expected the field `s_hash` to be a primitive type in the JSON string but got " + data['s_hash']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['session_state'] && !(typeof data['session_state'] === 'string' || data['session_state'] instanceof String)) {
            throw new Error("Expected the field `session_state` to be a primitive type in the JSON string but got " + data['session_state']);
        }
        // ensure the json data is a string
        if (data['sub'] && !(typeof data['sub'] === 'string' || data['sub'] instanceof String)) {
            throw new Error("Expected the field `sub` to be a primitive type in the JSON string but got " + data['sub']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['trusted-certs'])) {
            throw new Error("Expected the field `trusted-certs` to be an array in the JSON data but got " + data['trusted-certs']);
        }
        // ensure the json data is a string
        if (data['typ'] && !(typeof data['typ'] === 'string' || data['typ'] instanceof String)) {
            throw new Error("Expected the field `typ` to be a primitive type in the JSON string but got " + data['typ']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['zoneinfo'] && !(typeof data['zoneinfo'] === 'string' || data['zoneinfo'] instanceof String)) {
            throw new Error("Expected the field `zoneinfo` to be a primitive type in the JSON string but got " + data['zoneinfo']);
        }

        return true;
    }


}



/**
 * @member {String} acr
 */
AccessToken.prototype['acr'] = undefined;

/**
 * @member {module:model/AddressClaimSet} address
 */
AccessToken.prototype['address'] = undefined;

/**
 * @member {Array.<String>} allowed-origins
 */
AccessToken.prototype['allowed-origins'] = undefined;

/**
 * @member {String} at_hash
 */
AccessToken.prototype['at_hash'] = undefined;

/**
 * @member {Number} auth_time
 */
AccessToken.prototype['auth_time'] = undefined;

/**
 * @member {module:model/AccessTokenAuthorization} authorization
 */
AccessToken.prototype['authorization'] = undefined;

/**
 * @member {String} azp
 */
AccessToken.prototype['azp'] = undefined;

/**
 * @member {String} birthdate
 */
AccessToken.prototype['birthdate'] = undefined;

/**
 * @member {String} c_hash
 */
AccessToken.prototype['c_hash'] = undefined;

/**
 * @member {module:model/AccessToken.CategoryEnum} category
 */
AccessToken.prototype['category'] = undefined;

/**
 * @member {String} claims_locales
 */
AccessToken.prototype['claims_locales'] = undefined;

/**
 * @member {module:model/AccessTokenCertConf} cnf
 */
AccessToken.prototype['cnf'] = undefined;

/**
 * @member {String} email
 */
AccessToken.prototype['email'] = undefined;

/**
 * @member {Boolean} email_verified
 */
AccessToken.prototype['email_verified'] = undefined;

/**
 * @member {Number} exp
 */
AccessToken.prototype['exp'] = undefined;

/**
 * @member {String} family_name
 */
AccessToken.prototype['family_name'] = undefined;

/**
 * @member {String} gender
 */
AccessToken.prototype['gender'] = undefined;

/**
 * @member {String} given_name
 */
AccessToken.prototype['given_name'] = undefined;

/**
 * @member {Number} iat
 */
AccessToken.prototype['iat'] = undefined;

/**
 * @member {String} iss
 */
AccessToken.prototype['iss'] = undefined;

/**
 * @member {String} jti
 */
AccessToken.prototype['jti'] = undefined;

/**
 * @member {String} locale
 */
AccessToken.prototype['locale'] = undefined;

/**
 * @member {String} middle_name
 */
AccessToken.prototype['middle_name'] = undefined;

/**
 * @member {String} name
 */
AccessToken.prototype['name'] = undefined;

/**
 * @member {Number} nbf
 */
AccessToken.prototype['nbf'] = undefined;

/**
 * @member {String} nickname
 */
AccessToken.prototype['nickname'] = undefined;

/**
 * @member {String} nonce
 */
AccessToken.prototype['nonce'] = undefined;

/**
 * @member {Object.<String, Object>} otherClaims
 */
AccessToken.prototype['otherClaims'] = undefined;

/**
 * @member {String} phone_number
 */
AccessToken.prototype['phone_number'] = undefined;

/**
 * @member {Boolean} phone_number_verified
 */
AccessToken.prototype['phone_number_verified'] = undefined;

/**
 * @member {String} picture
 */
AccessToken.prototype['picture'] = undefined;

/**
 * @member {String} preferred_username
 */
AccessToken.prototype['preferred_username'] = undefined;

/**
 * @member {String} profile
 */
AccessToken.prototype['profile'] = undefined;

/**
 * @member {module:model/AccessTokenAccess} realm_access
 */
AccessToken.prototype['realm_access'] = undefined;

/**
 * @member {String} s_hash
 */
AccessToken.prototype['s_hash'] = undefined;

/**
 * @member {String} scope
 */
AccessToken.prototype['scope'] = undefined;

/**
 * @member {String} session_state
 */
AccessToken.prototype['session_state'] = undefined;

/**
 * @member {String} sub
 */
AccessToken.prototype['sub'] = undefined;

/**
 * @member {Array.<String>} trusted-certs
 */
AccessToken.prototype['trusted-certs'] = undefined;

/**
 * @member {String} typ
 */
AccessToken.prototype['typ'] = undefined;

/**
 * @member {Number} updated_at
 */
AccessToken.prototype['updated_at'] = undefined;

/**
 * @member {String} website
 */
AccessToken.prototype['website'] = undefined;

/**
 * @member {String} zoneinfo
 */
AccessToken.prototype['zoneinfo'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
AccessToken['CategoryEnum'] = {

    /**
     * value: "INTERNAL"
     * @const
     */
    "INTERNAL": "INTERNAL",

    /**
     * value: "ACCESS"
     * @const
     */
    "ACCESS": "ACCESS",

    /**
     * value: "ID"
     * @const
     */
    "ID": "ID",

    /**
     * value: "ADMIN"
     * @const
     */
    "ADMIN": "ADMIN",

    /**
     * value: "USERINFO"
     * @const
     */
    "USERINFO": "USERINFO"
};



export default AccessToken;

