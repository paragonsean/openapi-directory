/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScopeRepresentation from './ScopeRepresentation';

/**
 * The ResourceRepresentation model module.
 * @module model/ResourceRepresentation
 * @version 1
 */
class ResourceRepresentation {
    /**
     * Constructs a new <code>ResourceRepresentation</code>.
     * @alias module:model/ResourceRepresentation
     */
    constructor() { 
        
        ResourceRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceRepresentation} obj Optional instance to populate.
     * @return {module:model/ResourceRepresentation} The populated <code>ResourceRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceRepresentation();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('icon_uri')) {
                obj['icon_uri'] = ApiClient.convertToType(data['icon_uri'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerManagedAccess')) {
                obj['ownerManagedAccess'] = ApiClient.convertToType(data['ownerManagedAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], [ScopeRepresentation]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uris')) {
                obj['uris'] = ApiClient.convertToType(data['uris'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['icon_uri'] && !(typeof data['icon_uri'] === 'string' || data['icon_uri'] instanceof String)) {
            throw new Error("Expected the field `icon_uri` to be a primitive type in the JSON string but got " + data['icon_uri']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['scopes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scopes'])) {
                throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
            }
            // validate the optional field `scopes` (array)
            for (const item of data['scopes']) {
                ScopeRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uris'])) {
            throw new Error("Expected the field `uris` to be an array in the JSON data but got " + data['uris']);
        }

        return true;
    }


}



/**
 * @member {Object.<String, Object>} attributes
 */
ResourceRepresentation.prototype['attributes'] = undefined;

/**
 * @member {String} displayName
 */
ResourceRepresentation.prototype['displayName'] = undefined;

/**
 * @member {String} icon_uri
 */
ResourceRepresentation.prototype['icon_uri'] = undefined;

/**
 * @member {String} id
 */
ResourceRepresentation.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ResourceRepresentation.prototype['name'] = undefined;

/**
 * @member {Boolean} ownerManagedAccess
 */
ResourceRepresentation.prototype['ownerManagedAccess'] = undefined;

/**
 * @member {Array.<module:model/ScopeRepresentation>} scopes
 */
ResourceRepresentation.prototype['scopes'] = undefined;

/**
 * @member {String} type
 */
ResourceRepresentation.prototype['type'] = undefined;

/**
 * @member {Array.<String>} uris
 */
ResourceRepresentation.prototype['uris'] = undefined;






export default ResourceRepresentation;

