/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthenticationExecutionInfoRepresentation model module.
 * @module model/AuthenticationExecutionInfoRepresentation
 * @version 1
 */
class AuthenticationExecutionInfoRepresentation {
    /**
     * Constructs a new <code>AuthenticationExecutionInfoRepresentation</code>.
     * @alias module:model/AuthenticationExecutionInfoRepresentation
     */
    constructor() { 
        
        AuthenticationExecutionInfoRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthenticationExecutionInfoRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthenticationExecutionInfoRepresentation} obj Optional instance to populate.
     * @return {module:model/AuthenticationExecutionInfoRepresentation} The populated <code>AuthenticationExecutionInfoRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthenticationExecutionInfoRepresentation();

            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('authenticationConfig')) {
                obj['authenticationConfig'] = ApiClient.convertToType(data['authenticationConfig'], 'String');
            }
            if (data.hasOwnProperty('authenticationFlow')) {
                obj['authenticationFlow'] = ApiClient.convertToType(data['authenticationFlow'], 'Boolean');
            }
            if (data.hasOwnProperty('configurable')) {
                obj['configurable'] = ApiClient.convertToType(data['configurable'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('flowId')) {
                obj['flowId'] = ApiClient.convertToType(data['flowId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
            if (data.hasOwnProperty('providerId')) {
                obj['providerId'] = ApiClient.convertToType(data['providerId'], 'String');
            }
            if (data.hasOwnProperty('requirement')) {
                obj['requirement'] = ApiClient.convertToType(data['requirement'], 'String');
            }
            if (data.hasOwnProperty('requirementChoices')) {
                obj['requirementChoices'] = ApiClient.convertToType(data['requirementChoices'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthenticationExecutionInfoRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthenticationExecutionInfoRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // ensure the json data is a string
        if (data['authenticationConfig'] && !(typeof data['authenticationConfig'] === 'string' || data['authenticationConfig'] instanceof String)) {
            throw new Error("Expected the field `authenticationConfig` to be a primitive type in the JSON string but got " + data['authenticationConfig']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['flowId'] && !(typeof data['flowId'] === 'string' || data['flowId'] instanceof String)) {
            throw new Error("Expected the field `flowId` to be a primitive type in the JSON string but got " + data['flowId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['providerId'] && !(typeof data['providerId'] === 'string' || data['providerId'] instanceof String)) {
            throw new Error("Expected the field `providerId` to be a primitive type in the JSON string but got " + data['providerId']);
        }
        // ensure the json data is a string
        if (data['requirement'] && !(typeof data['requirement'] === 'string' || data['requirement'] instanceof String)) {
            throw new Error("Expected the field `requirement` to be a primitive type in the JSON string but got " + data['requirement']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requirementChoices'])) {
            throw new Error("Expected the field `requirementChoices` to be an array in the JSON data but got " + data['requirementChoices']);
        }

        return true;
    }


}



/**
 * @member {String} alias
 */
AuthenticationExecutionInfoRepresentation.prototype['alias'] = undefined;

/**
 * @member {String} authenticationConfig
 */
AuthenticationExecutionInfoRepresentation.prototype['authenticationConfig'] = undefined;

/**
 * @member {Boolean} authenticationFlow
 */
AuthenticationExecutionInfoRepresentation.prototype['authenticationFlow'] = undefined;

/**
 * @member {Boolean} configurable
 */
AuthenticationExecutionInfoRepresentation.prototype['configurable'] = undefined;

/**
 * @member {String} displayName
 */
AuthenticationExecutionInfoRepresentation.prototype['displayName'] = undefined;

/**
 * @member {String} flowId
 */
AuthenticationExecutionInfoRepresentation.prototype['flowId'] = undefined;

/**
 * @member {String} id
 */
AuthenticationExecutionInfoRepresentation.prototype['id'] = undefined;

/**
 * @member {Number} index
 */
AuthenticationExecutionInfoRepresentation.prototype['index'] = undefined;

/**
 * @member {Number} level
 */
AuthenticationExecutionInfoRepresentation.prototype['level'] = undefined;

/**
 * @member {String} providerId
 */
AuthenticationExecutionInfoRepresentation.prototype['providerId'] = undefined;

/**
 * @member {String} requirement
 */
AuthenticationExecutionInfoRepresentation.prototype['requirement'] = undefined;

/**
 * @member {Array.<String>} requirementChoices
 */
AuthenticationExecutionInfoRepresentation.prototype['requirementChoices'] = undefined;






export default AuthenticationExecutionInfoRepresentation;

