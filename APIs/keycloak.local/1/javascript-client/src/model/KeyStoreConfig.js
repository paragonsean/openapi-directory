/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyStoreConfig model module.
 * @module model/KeyStoreConfig
 * @version 1
 */
class KeyStoreConfig {
    /**
     * Constructs a new <code>KeyStoreConfig</code>.
     * @alias module:model/KeyStoreConfig
     */
    constructor() { 
        
        KeyStoreConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyStoreConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyStoreConfig} obj Optional instance to populate.
     * @return {module:model/KeyStoreConfig} The populated <code>KeyStoreConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyStoreConfig();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('keyAlias')) {
                obj['keyAlias'] = ApiClient.convertToType(data['keyAlias'], 'String');
            }
            if (data.hasOwnProperty('keyPassword')) {
                obj['keyPassword'] = ApiClient.convertToType(data['keyPassword'], 'String');
            }
            if (data.hasOwnProperty('realmAlias')) {
                obj['realmAlias'] = ApiClient.convertToType(data['realmAlias'], 'String');
            }
            if (data.hasOwnProperty('realmCertificate')) {
                obj['realmCertificate'] = ApiClient.convertToType(data['realmCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('storePassword')) {
                obj['storePassword'] = ApiClient.convertToType(data['storePassword'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyStoreConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyStoreConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['keyAlias'] && !(typeof data['keyAlias'] === 'string' || data['keyAlias'] instanceof String)) {
            throw new Error("Expected the field `keyAlias` to be a primitive type in the JSON string but got " + data['keyAlias']);
        }
        // ensure the json data is a string
        if (data['keyPassword'] && !(typeof data['keyPassword'] === 'string' || data['keyPassword'] instanceof String)) {
            throw new Error("Expected the field `keyPassword` to be a primitive type in the JSON string but got " + data['keyPassword']);
        }
        // ensure the json data is a string
        if (data['realmAlias'] && !(typeof data['realmAlias'] === 'string' || data['realmAlias'] instanceof String)) {
            throw new Error("Expected the field `realmAlias` to be a primitive type in the JSON string but got " + data['realmAlias']);
        }
        // ensure the json data is a string
        if (data['storePassword'] && !(typeof data['storePassword'] === 'string' || data['storePassword'] instanceof String)) {
            throw new Error("Expected the field `storePassword` to be a primitive type in the JSON string but got " + data['storePassword']);
        }

        return true;
    }


}



/**
 * @member {String} format
 */
KeyStoreConfig.prototype['format'] = undefined;

/**
 * @member {String} keyAlias
 */
KeyStoreConfig.prototype['keyAlias'] = undefined;

/**
 * @member {String} keyPassword
 */
KeyStoreConfig.prototype['keyPassword'] = undefined;

/**
 * @member {String} realmAlias
 */
KeyStoreConfig.prototype['realmAlias'] = undefined;

/**
 * @member {Boolean} realmCertificate
 */
KeyStoreConfig.prototype['realmCertificate'] = undefined;

/**
 * @member {String} storePassword
 */
KeyStoreConfig.prototype['storePassword'] = undefined;






export default KeyStoreConfig;

