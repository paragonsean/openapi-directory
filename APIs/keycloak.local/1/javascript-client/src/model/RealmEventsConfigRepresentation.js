/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RealmEventsConfigRepresentation model module.
 * @module model/RealmEventsConfigRepresentation
 * @version 1
 */
class RealmEventsConfigRepresentation {
    /**
     * Constructs a new <code>RealmEventsConfigRepresentation</code>.
     * @alias module:model/RealmEventsConfigRepresentation
     */
    constructor() { 
        
        RealmEventsConfigRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RealmEventsConfigRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RealmEventsConfigRepresentation} obj Optional instance to populate.
     * @return {module:model/RealmEventsConfigRepresentation} The populated <code>RealmEventsConfigRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RealmEventsConfigRepresentation();

            if (data.hasOwnProperty('adminEventsDetailsEnabled')) {
                obj['adminEventsDetailsEnabled'] = ApiClient.convertToType(data['adminEventsDetailsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('adminEventsEnabled')) {
                obj['adminEventsEnabled'] = ApiClient.convertToType(data['adminEventsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('enabledEventTypes')) {
                obj['enabledEventTypes'] = ApiClient.convertToType(data['enabledEventTypes'], ['String']);
            }
            if (data.hasOwnProperty('eventsEnabled')) {
                obj['eventsEnabled'] = ApiClient.convertToType(data['eventsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('eventsExpiration')) {
                obj['eventsExpiration'] = ApiClient.convertToType(data['eventsExpiration'], 'Number');
            }
            if (data.hasOwnProperty('eventsListeners')) {
                obj['eventsListeners'] = ApiClient.convertToType(data['eventsListeners'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RealmEventsConfigRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RealmEventsConfigRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['enabledEventTypes'])) {
            throw new Error("Expected the field `enabledEventTypes` to be an array in the JSON data but got " + data['enabledEventTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['eventsListeners'])) {
            throw new Error("Expected the field `eventsListeners` to be an array in the JSON data but got " + data['eventsListeners']);
        }

        return true;
    }


}



/**
 * @member {Boolean} adminEventsDetailsEnabled
 */
RealmEventsConfigRepresentation.prototype['adminEventsDetailsEnabled'] = undefined;

/**
 * @member {Boolean} adminEventsEnabled
 */
RealmEventsConfigRepresentation.prototype['adminEventsEnabled'] = undefined;

/**
 * @member {Array.<String>} enabledEventTypes
 */
RealmEventsConfigRepresentation.prototype['enabledEventTypes'] = undefined;

/**
 * @member {Boolean} eventsEnabled
 */
RealmEventsConfigRepresentation.prototype['eventsEnabled'] = undefined;

/**
 * @member {Number} eventsExpiration
 */
RealmEventsConfigRepresentation.prototype['eventsExpiration'] = undefined;

/**
 * @member {Array.<String>} eventsListeners
 */
RealmEventsConfigRepresentation.prototype['eventsListeners'] = undefined;






export default RealmEventsConfigRepresentation;

