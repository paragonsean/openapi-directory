/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthDetailsRepresentation model module.
 * @module model/AuthDetailsRepresentation
 * @version 1
 */
class AuthDetailsRepresentation {
    /**
     * Constructs a new <code>AuthDetailsRepresentation</code>.
     * @alias module:model/AuthDetailsRepresentation
     */
    constructor() { 
        
        AuthDetailsRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthDetailsRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthDetailsRepresentation} obj Optional instance to populate.
     * @return {module:model/AuthDetailsRepresentation} The populated <code>AuthDetailsRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthDetailsRepresentation();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('realmId')) {
                obj['realmId'] = ApiClient.convertToType(data['realmId'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthDetailsRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthDetailsRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['realmId'] && !(typeof data['realmId'] === 'string' || data['realmId'] instanceof String)) {
            throw new Error("Expected the field `realmId` to be a primitive type in the JSON string but got " + data['realmId']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {String} clientId
 */
AuthDetailsRepresentation.prototype['clientId'] = undefined;

/**
 * @member {String} ipAddress
 */
AuthDetailsRepresentation.prototype['ipAddress'] = undefined;

/**
 * @member {String} realmId
 */
AuthDetailsRepresentation.prototype['realmId'] = undefined;

/**
 * @member {String} userId
 */
AuthDetailsRepresentation.prototype['userId'] = undefined;






export default AuthDetailsRepresentation;

