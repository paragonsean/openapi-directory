/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CredentialRepresentation from './CredentialRepresentation';
import FederatedIdentityRepresentation from './FederatedIdentityRepresentation';
import UserConsentRepresentation from './UserConsentRepresentation';

/**
 * The UserRepresentation model module.
 * @module model/UserRepresentation
 * @version 1
 */
class UserRepresentation {
    /**
     * Constructs a new <code>UserRepresentation</code>.
     * @alias module:model/UserRepresentation
     */
    constructor() { 
        
        UserRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserRepresentation} obj Optional instance to populate.
     * @return {module:model/UserRepresentation} The populated <code>UserRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserRepresentation();

            if (data.hasOwnProperty('access')) {
                obj['access'] = ApiClient.convertToType(data['access'], {'String': Object});
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
            if (data.hasOwnProperty('clientConsents')) {
                obj['clientConsents'] = ApiClient.convertToType(data['clientConsents'], [UserConsentRepresentation]);
            }
            if (data.hasOwnProperty('clientRoles')) {
                obj['clientRoles'] = ApiClient.convertToType(data['clientRoles'], {'String': Object});
            }
            if (data.hasOwnProperty('createdTimestamp')) {
                obj['createdTimestamp'] = ApiClient.convertToType(data['createdTimestamp'], 'Number');
            }
            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = ApiClient.convertToType(data['credentials'], [CredentialRepresentation]);
            }
            if (data.hasOwnProperty('disableableCredentialTypes')) {
                obj['disableableCredentialTypes'] = ApiClient.convertToType(data['disableableCredentialTypes'], ['String']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('emailVerified')) {
                obj['emailVerified'] = ApiClient.convertToType(data['emailVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('federatedIdentities')) {
                obj['federatedIdentities'] = ApiClient.convertToType(data['federatedIdentities'], [FederatedIdentityRepresentation]);
            }
            if (data.hasOwnProperty('federationLink')) {
                obj['federationLink'] = ApiClient.convertToType(data['federationLink'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('notBefore')) {
                obj['notBefore'] = ApiClient.convertToType(data['notBefore'], 'Number');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('realmRoles')) {
                obj['realmRoles'] = ApiClient.convertToType(data['realmRoles'], ['String']);
            }
            if (data.hasOwnProperty('requiredActions')) {
                obj['requiredActions'] = ApiClient.convertToType(data['requiredActions'], ['String']);
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountClientId')) {
                obj['serviceAccountClientId'] = ApiClient.convertToType(data['serviceAccountClientId'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserRepresentation</code>.
     */
    static validateJSON(data) {
        if (data['clientConsents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientConsents'])) {
                throw new Error("Expected the field `clientConsents` to be an array in the JSON data but got " + data['clientConsents']);
            }
            // validate the optional field `clientConsents` (array)
            for (const item of data['clientConsents']) {
                UserConsentRepresentation.validateJSON(item);
            };
        }
        if (data['credentials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['credentials'])) {
                throw new Error("Expected the field `credentials` to be an array in the JSON data but got " + data['credentials']);
            }
            // validate the optional field `credentials` (array)
            for (const item of data['credentials']) {
                CredentialRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['disableableCredentialTypes'])) {
            throw new Error("Expected the field `disableableCredentialTypes` to be an array in the JSON data but got " + data['disableableCredentialTypes']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        if (data['federatedIdentities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['federatedIdentities'])) {
                throw new Error("Expected the field `federatedIdentities` to be an array in the JSON data but got " + data['federatedIdentities']);
            }
            // validate the optional field `federatedIdentities` (array)
            for (const item of data['federatedIdentities']) {
                FederatedIdentityRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['federationLink'] && !(typeof data['federationLink'] === 'string' || data['federationLink'] instanceof String)) {
            throw new Error("Expected the field `federationLink` to be a primitive type in the JSON string but got " + data['federationLink']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['realmRoles'])) {
            throw new Error("Expected the field `realmRoles` to be an array in the JSON data but got " + data['realmRoles']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requiredActions'])) {
            throw new Error("Expected the field `requiredActions` to be an array in the JSON data but got " + data['requiredActions']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        // ensure the json data is a string
        if (data['serviceAccountClientId'] && !(typeof data['serviceAccountClientId'] === 'string' || data['serviceAccountClientId'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountClientId` to be a primitive type in the JSON string but got " + data['serviceAccountClientId']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {Object.<String, Object>} access
 */
UserRepresentation.prototype['access'] = undefined;

/**
 * @member {Object.<String, Object>} attributes
 */
UserRepresentation.prototype['attributes'] = undefined;

/**
 * @member {Array.<module:model/UserConsentRepresentation>} clientConsents
 */
UserRepresentation.prototype['clientConsents'] = undefined;

/**
 * @member {Object.<String, Object>} clientRoles
 */
UserRepresentation.prototype['clientRoles'] = undefined;

/**
 * @member {Number} createdTimestamp
 */
UserRepresentation.prototype['createdTimestamp'] = undefined;

/**
 * @member {Array.<module:model/CredentialRepresentation>} credentials
 */
UserRepresentation.prototype['credentials'] = undefined;

/**
 * @member {Array.<String>} disableableCredentialTypes
 */
UserRepresentation.prototype['disableableCredentialTypes'] = undefined;

/**
 * @member {String} email
 */
UserRepresentation.prototype['email'] = undefined;

/**
 * @member {Boolean} emailVerified
 */
UserRepresentation.prototype['emailVerified'] = undefined;

/**
 * @member {Boolean} enabled
 */
UserRepresentation.prototype['enabled'] = undefined;

/**
 * @member {Array.<module:model/FederatedIdentityRepresentation>} federatedIdentities
 */
UserRepresentation.prototype['federatedIdentities'] = undefined;

/**
 * @member {String} federationLink
 */
UserRepresentation.prototype['federationLink'] = undefined;

/**
 * @member {String} firstName
 */
UserRepresentation.prototype['firstName'] = undefined;

/**
 * @member {Array.<String>} groups
 */
UserRepresentation.prototype['groups'] = undefined;

/**
 * @member {String} id
 */
UserRepresentation.prototype['id'] = undefined;

/**
 * @member {String} lastName
 */
UserRepresentation.prototype['lastName'] = undefined;

/**
 * @member {Number} notBefore
 */
UserRepresentation.prototype['notBefore'] = undefined;

/**
 * @member {String} origin
 */
UserRepresentation.prototype['origin'] = undefined;

/**
 * @member {Array.<String>} realmRoles
 */
UserRepresentation.prototype['realmRoles'] = undefined;

/**
 * @member {Array.<String>} requiredActions
 */
UserRepresentation.prototype['requiredActions'] = undefined;

/**
 * @member {String} self
 */
UserRepresentation.prototype['self'] = undefined;

/**
 * @member {String} serviceAccountClientId
 */
UserRepresentation.prototype['serviceAccountClientId'] = undefined;

/**
 * @member {String} username
 */
UserRepresentation.prototype['username'] = undefined;






export default UserRepresentation;

