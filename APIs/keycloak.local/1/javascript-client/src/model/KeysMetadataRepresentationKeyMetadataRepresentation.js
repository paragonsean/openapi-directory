/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeysMetadataRepresentationKeyMetadataRepresentation model module.
 * @module model/KeysMetadataRepresentationKeyMetadataRepresentation
 * @version 1
 */
class KeysMetadataRepresentationKeyMetadataRepresentation {
    /**
     * Constructs a new <code>KeysMetadataRepresentationKeyMetadataRepresentation</code>.
     * @alias module:model/KeysMetadataRepresentationKeyMetadataRepresentation
     */
    constructor() { 
        
        KeysMetadataRepresentationKeyMetadataRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeysMetadataRepresentationKeyMetadataRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeysMetadataRepresentationKeyMetadataRepresentation} obj Optional instance to populate.
     * @return {module:model/KeysMetadataRepresentationKeyMetadataRepresentation} The populated <code>KeysMetadataRepresentationKeyMetadataRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeysMetadataRepresentationKeyMetadataRepresentation();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
            if (data.hasOwnProperty('kid')) {
                obj['kid'] = ApiClient.convertToType(data['kid'], 'String');
            }
            if (data.hasOwnProperty('providerId')) {
                obj['providerId'] = ApiClient.convertToType(data['providerId'], 'String');
            }
            if (data.hasOwnProperty('providerPriority')) {
                obj['providerPriority'] = ApiClient.convertToType(data['providerPriority'], 'Number');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeysMetadataRepresentationKeyMetadataRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeysMetadataRepresentationKeyMetadataRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }
        // ensure the json data is a string
        if (data['kid'] && !(typeof data['kid'] === 'string' || data['kid'] instanceof String)) {
            throw new Error("Expected the field `kid` to be a primitive type in the JSON string but got " + data['kid']);
        }
        // ensure the json data is a string
        if (data['providerId'] && !(typeof data['providerId'] === 'string' || data['providerId'] instanceof String)) {
            throw new Error("Expected the field `providerId` to be a primitive type in the JSON string but got " + data['providerId']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} algorithm
 */
KeysMetadataRepresentationKeyMetadataRepresentation.prototype['algorithm'] = undefined;

/**
 * @member {String} certificate
 */
KeysMetadataRepresentationKeyMetadataRepresentation.prototype['certificate'] = undefined;

/**
 * @member {String} kid
 */
KeysMetadataRepresentationKeyMetadataRepresentation.prototype['kid'] = undefined;

/**
 * @member {String} providerId
 */
KeysMetadataRepresentationKeyMetadataRepresentation.prototype['providerId'] = undefined;

/**
 * @member {Number} providerPriority
 */
KeysMetadataRepresentationKeyMetadataRepresentation.prototype['providerPriority'] = undefined;

/**
 * @member {String} publicKey
 */
KeysMetadataRepresentationKeyMetadataRepresentation.prototype['publicKey'] = undefined;

/**
 * @member {String} status
 */
KeysMetadataRepresentationKeyMetadataRepresentation.prototype['status'] = undefined;

/**
 * @member {String} type
 */
KeysMetadataRepresentationKeyMetadataRepresentation.prototype['type'] = undefined;






export default KeysMetadataRepresentationKeyMetadataRepresentation;

