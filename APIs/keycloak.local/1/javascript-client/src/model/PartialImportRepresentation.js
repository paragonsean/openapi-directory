/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClientRepresentation from './ClientRepresentation';
import GroupRepresentation from './GroupRepresentation';
import IdentityProviderRepresentation from './IdentityProviderRepresentation';
import RolesRepresentation from './RolesRepresentation';
import UserRepresentation from './UserRepresentation';

/**
 * The PartialImportRepresentation model module.
 * @module model/PartialImportRepresentation
 * @version 1
 */
class PartialImportRepresentation {
    /**
     * Constructs a new <code>PartialImportRepresentation</code>.
     * @alias module:model/PartialImportRepresentation
     */
    constructor() { 
        
        PartialImportRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PartialImportRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartialImportRepresentation} obj Optional instance to populate.
     * @return {module:model/PartialImportRepresentation} The populated <code>PartialImportRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartialImportRepresentation();

            if (data.hasOwnProperty('clients')) {
                obj['clients'] = ApiClient.convertToType(data['clients'], [ClientRepresentation]);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [GroupRepresentation]);
            }
            if (data.hasOwnProperty('identityProviders')) {
                obj['identityProviders'] = ApiClient.convertToType(data['identityProviders'], [IdentityProviderRepresentation]);
            }
            if (data.hasOwnProperty('ifResourceExists')) {
                obj['ifResourceExists'] = ApiClient.convertToType(data['ifResourceExists'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ApiClient.convertToType(data['policy'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = RolesRepresentation.constructFromObject(data['roles']);
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [UserRepresentation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartialImportRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartialImportRepresentation</code>.
     */
    static validateJSON(data) {
        if (data['clients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clients'])) {
                throw new Error("Expected the field `clients` to be an array in the JSON data but got " + data['clients']);
            }
            // validate the optional field `clients` (array)
            for (const item of data['clients']) {
                ClientRepresentation.validateJSON(item);
            };
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                GroupRepresentation.validateJSON(item);
            };
        }
        if (data['identityProviders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identityProviders'])) {
                throw new Error("Expected the field `identityProviders` to be an array in the JSON data but got " + data['identityProviders']);
            }
            // validate the optional field `identityProviders` (array)
            for (const item of data['identityProviders']) {
                IdentityProviderRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ifResourceExists'] && !(typeof data['ifResourceExists'] === 'string' || data['ifResourceExists'] instanceof String)) {
            throw new Error("Expected the field `ifResourceExists` to be a primitive type in the JSON string but got " + data['ifResourceExists']);
        }
        // ensure the json data is a string
        if (data['policy'] && !(typeof data['policy'] === 'string' || data['policy'] instanceof String)) {
            throw new Error("Expected the field `policy` to be a primitive type in the JSON string but got " + data['policy']);
        }
        // validate the optional field `roles`
        if (data['roles']) { // data not null
          RolesRepresentation.validateJSON(data['roles']);
        }
        if (data['users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users'])) {
                throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
            }
            // validate the optional field `users` (array)
            for (const item of data['users']) {
                UserRepresentation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ClientRepresentation>} clients
 */
PartialImportRepresentation.prototype['clients'] = undefined;

/**
 * @member {Array.<module:model/GroupRepresentation>} groups
 */
PartialImportRepresentation.prototype['groups'] = undefined;

/**
 * @member {Array.<module:model/IdentityProviderRepresentation>} identityProviders
 */
PartialImportRepresentation.prototype['identityProviders'] = undefined;

/**
 * @member {String} ifResourceExists
 */
PartialImportRepresentation.prototype['ifResourceExists'] = undefined;

/**
 * @member {module:model/PartialImportRepresentation.PolicyEnum} policy
 */
PartialImportRepresentation.prototype['policy'] = undefined;

/**
 * @member {module:model/RolesRepresentation} roles
 */
PartialImportRepresentation.prototype['roles'] = undefined;

/**
 * @member {Array.<module:model/UserRepresentation>} users
 */
PartialImportRepresentation.prototype['users'] = undefined;





/**
 * Allowed values for the <code>policy</code> property.
 * @enum {String}
 * @readonly
 */
PartialImportRepresentation['PolicyEnum'] = {

    /**
     * value: "SKIP"
     * @const
     */
    "SKIP": "SKIP",

    /**
     * value: "OVERWRITE"
     * @const
     */
    "OVERWRITE": "OVERWRITE",

    /**
     * value: "FAIL"
     * @const
     */
    "FAIL": "FAIL"
};



export default PartialImportRepresentation;

