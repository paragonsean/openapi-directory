/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateRepresentation model module.
 * @module model/CertificateRepresentation
 * @version 1
 */
class CertificateRepresentation {
    /**
     * Constructs a new <code>CertificateRepresentation</code>.
     * @alias module:model/CertificateRepresentation
     */
    constructor() { 
        
        CertificateRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateRepresentation} obj Optional instance to populate.
     * @return {module:model/CertificateRepresentation} The populated <code>CertificateRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateRepresentation();

            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
            if (data.hasOwnProperty('kid')) {
                obj['kid'] = ApiClient.convertToType(data['kid'], 'String');
            }
            if (data.hasOwnProperty('privateKey')) {
                obj['privateKey'] = ApiClient.convertToType(data['privateKey'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }
        // ensure the json data is a string
        if (data['kid'] && !(typeof data['kid'] === 'string' || data['kid'] instanceof String)) {
            throw new Error("Expected the field `kid` to be a primitive type in the JSON string but got " + data['kid']);
        }
        // ensure the json data is a string
        if (data['privateKey'] && !(typeof data['privateKey'] === 'string' || data['privateKey'] instanceof String)) {
            throw new Error("Expected the field `privateKey` to be a primitive type in the JSON string but got " + data['privateKey']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }

        return true;
    }


}



/**
 * @member {String} certificate
 */
CertificateRepresentation.prototype['certificate'] = undefined;

/**
 * @member {String} kid
 */
CertificateRepresentation.prototype['kid'] = undefined;

/**
 * @member {String} privateKey
 */
CertificateRepresentation.prototype['privateKey'] = undefined;

/**
 * @member {String} publicKey
 */
CertificateRepresentation.prototype['publicKey'] = undefined;






export default CertificateRepresentation;

