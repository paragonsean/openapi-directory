/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyRepresentation from './PolicyRepresentation';
import ResourceRepresentation from './ResourceRepresentation';
import ScopeRepresentation from './ScopeRepresentation';

/**
 * The ResourceServerRepresentation model module.
 * @module model/ResourceServerRepresentation
 * @version 1
 */
class ResourceServerRepresentation {
    /**
     * Constructs a new <code>ResourceServerRepresentation</code>.
     * @alias module:model/ResourceServerRepresentation
     */
    constructor() { 
        
        ResourceServerRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceServerRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceServerRepresentation} obj Optional instance to populate.
     * @return {module:model/ResourceServerRepresentation} The populated <code>ResourceServerRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceServerRepresentation();

            if (data.hasOwnProperty('allowRemoteResourceManagement')) {
                obj['allowRemoteResourceManagement'] = ApiClient.convertToType(data['allowRemoteResourceManagement'], 'Boolean');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('decisionStrategy')) {
                obj['decisionStrategy'] = ApiClient.convertToType(data['decisionStrategy'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = ApiClient.convertToType(data['policies'], [PolicyRepresentation]);
            }
            if (data.hasOwnProperty('policyEnforcementMode')) {
                obj['policyEnforcementMode'] = ApiClient.convertToType(data['policyEnforcementMode'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [ResourceRepresentation]);
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], [ScopeRepresentation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceServerRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceServerRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['decisionStrategy'] && !(typeof data['decisionStrategy'] === 'string' || data['decisionStrategy'] instanceof String)) {
            throw new Error("Expected the field `decisionStrategy` to be a primitive type in the JSON string but got " + data['decisionStrategy']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policies'])) {
                throw new Error("Expected the field `policies` to be an array in the JSON data but got " + data['policies']);
            }
            // validate the optional field `policies` (array)
            for (const item of data['policies']) {
                PolicyRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['policyEnforcementMode'] && !(typeof data['policyEnforcementMode'] === 'string' || data['policyEnforcementMode'] instanceof String)) {
            throw new Error("Expected the field `policyEnforcementMode` to be a primitive type in the JSON string but got " + data['policyEnforcementMode']);
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                ResourceRepresentation.validateJSON(item);
            };
        }
        if (data['scopes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scopes'])) {
                throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
            }
            // validate the optional field `scopes` (array)
            for (const item of data['scopes']) {
                ScopeRepresentation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Boolean} allowRemoteResourceManagement
 */
ResourceServerRepresentation.prototype['allowRemoteResourceManagement'] = undefined;

/**
 * @member {String} clientId
 */
ResourceServerRepresentation.prototype['clientId'] = undefined;

/**
 * @member {module:model/ResourceServerRepresentation.DecisionStrategyEnum} decisionStrategy
 */
ResourceServerRepresentation.prototype['decisionStrategy'] = undefined;

/**
 * @member {String} id
 */
ResourceServerRepresentation.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ResourceServerRepresentation.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/PolicyRepresentation>} policies
 */
ResourceServerRepresentation.prototype['policies'] = undefined;

/**
 * @member {module:model/ResourceServerRepresentation.PolicyEnforcementModeEnum} policyEnforcementMode
 */
ResourceServerRepresentation.prototype['policyEnforcementMode'] = undefined;

/**
 * @member {Array.<module:model/ResourceRepresentation>} resources
 */
ResourceServerRepresentation.prototype['resources'] = undefined;

/**
 * @member {Array.<module:model/ScopeRepresentation>} scopes
 */
ResourceServerRepresentation.prototype['scopes'] = undefined;





/**
 * Allowed values for the <code>decisionStrategy</code> property.
 * @enum {String}
 * @readonly
 */
ResourceServerRepresentation['DecisionStrategyEnum'] = {

    /**
     * value: "AFFIRMATIVE"
     * @const
     */
    "AFFIRMATIVE": "AFFIRMATIVE",

    /**
     * value: "UNANIMOUS"
     * @const
     */
    "UNANIMOUS": "UNANIMOUS",

    /**
     * value: "CONSENSUS"
     * @const
     */
    "CONSENSUS": "CONSENSUS"
};


/**
 * Allowed values for the <code>policyEnforcementMode</code> property.
 * @enum {String}
 * @readonly
 */
ResourceServerRepresentation['PolicyEnforcementModeEnum'] = {

    /**
     * value: "ENFORCING"
     * @const
     */
    "ENFORCING": "ENFORCING",

    /**
     * value: "PERMISSIVE"
     * @const
     */
    "PERMISSIVE": "PERMISSIVE",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};



export default ResourceServerRepresentation;

