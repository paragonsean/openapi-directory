/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthenticationFlowRepresentation from './AuthenticationFlowRepresentation';
import AuthenticatorConfigRepresentation from './AuthenticatorConfigRepresentation';
import ClientRepresentation from './ClientRepresentation';
import ClientScopeRepresentation from './ClientScopeRepresentation';
import GroupRepresentation from './GroupRepresentation';
import IdentityProviderMapperRepresentation from './IdentityProviderMapperRepresentation';
import IdentityProviderRepresentation from './IdentityProviderRepresentation';
import MultivaluedHashMap from './MultivaluedHashMap';
import ProtocolMapperRepresentation from './ProtocolMapperRepresentation';
import RequiredActionProviderRepresentation from './RequiredActionProviderRepresentation';
import RolesRepresentation from './RolesRepresentation';
import ScopeMappingRepresentation from './ScopeMappingRepresentation';
import UserFederationMapperRepresentation from './UserFederationMapperRepresentation';
import UserFederationProviderRepresentation from './UserFederationProviderRepresentation';
import UserRepresentation from './UserRepresentation';

/**
 * The RealmRepresentation model module.
 * @module model/RealmRepresentation
 * @version 1
 */
class RealmRepresentation {
    /**
     * Constructs a new <code>RealmRepresentation</code>.
     * @alias module:model/RealmRepresentation
     */
    constructor() { 
        
        RealmRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RealmRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RealmRepresentation} obj Optional instance to populate.
     * @return {module:model/RealmRepresentation} The populated <code>RealmRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RealmRepresentation();

            if (data.hasOwnProperty('accessCodeLifespan')) {
                obj['accessCodeLifespan'] = ApiClient.convertToType(data['accessCodeLifespan'], 'Number');
            }
            if (data.hasOwnProperty('accessCodeLifespanLogin')) {
                obj['accessCodeLifespanLogin'] = ApiClient.convertToType(data['accessCodeLifespanLogin'], 'Number');
            }
            if (data.hasOwnProperty('accessCodeLifespanUserAction')) {
                obj['accessCodeLifespanUserAction'] = ApiClient.convertToType(data['accessCodeLifespanUserAction'], 'Number');
            }
            if (data.hasOwnProperty('accessTokenLifespan')) {
                obj['accessTokenLifespan'] = ApiClient.convertToType(data['accessTokenLifespan'], 'Number');
            }
            if (data.hasOwnProperty('accessTokenLifespanForImplicitFlow')) {
                obj['accessTokenLifespanForImplicitFlow'] = ApiClient.convertToType(data['accessTokenLifespanForImplicitFlow'], 'Number');
            }
            if (data.hasOwnProperty('accountTheme')) {
                obj['accountTheme'] = ApiClient.convertToType(data['accountTheme'], 'String');
            }
            if (data.hasOwnProperty('actionTokenGeneratedByAdminLifespan')) {
                obj['actionTokenGeneratedByAdminLifespan'] = ApiClient.convertToType(data['actionTokenGeneratedByAdminLifespan'], 'Number');
            }
            if (data.hasOwnProperty('actionTokenGeneratedByUserLifespan')) {
                obj['actionTokenGeneratedByUserLifespan'] = ApiClient.convertToType(data['actionTokenGeneratedByUserLifespan'], 'Number');
            }
            if (data.hasOwnProperty('adminEventsDetailsEnabled')) {
                obj['adminEventsDetailsEnabled'] = ApiClient.convertToType(data['adminEventsDetailsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('adminEventsEnabled')) {
                obj['adminEventsEnabled'] = ApiClient.convertToType(data['adminEventsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('adminTheme')) {
                obj['adminTheme'] = ApiClient.convertToType(data['adminTheme'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
            if (data.hasOwnProperty('authenticationFlows')) {
                obj['authenticationFlows'] = ApiClient.convertToType(data['authenticationFlows'], [AuthenticationFlowRepresentation]);
            }
            if (data.hasOwnProperty('authenticatorConfig')) {
                obj['authenticatorConfig'] = ApiClient.convertToType(data['authenticatorConfig'], [AuthenticatorConfigRepresentation]);
            }
            if (data.hasOwnProperty('browserFlow')) {
                obj['browserFlow'] = ApiClient.convertToType(data['browserFlow'], 'String');
            }
            if (data.hasOwnProperty('browserSecurityHeaders')) {
                obj['browserSecurityHeaders'] = ApiClient.convertToType(data['browserSecurityHeaders'], {'String': Object});
            }
            if (data.hasOwnProperty('bruteForceProtected')) {
                obj['bruteForceProtected'] = ApiClient.convertToType(data['bruteForceProtected'], 'Boolean');
            }
            if (data.hasOwnProperty('clientAuthenticationFlow')) {
                obj['clientAuthenticationFlow'] = ApiClient.convertToType(data['clientAuthenticationFlow'], 'String');
            }
            if (data.hasOwnProperty('clientScopeMappings')) {
                obj['clientScopeMappings'] = ApiClient.convertToType(data['clientScopeMappings'], {'String': Object});
            }
            if (data.hasOwnProperty('clientScopes')) {
                obj['clientScopes'] = ApiClient.convertToType(data['clientScopes'], [ClientScopeRepresentation]);
            }
            if (data.hasOwnProperty('clientSessionIdleTimeout')) {
                obj['clientSessionIdleTimeout'] = ApiClient.convertToType(data['clientSessionIdleTimeout'], 'Number');
            }
            if (data.hasOwnProperty('clientSessionMaxLifespan')) {
                obj['clientSessionMaxLifespan'] = ApiClient.convertToType(data['clientSessionMaxLifespan'], 'Number');
            }
            if (data.hasOwnProperty('clients')) {
                obj['clients'] = ApiClient.convertToType(data['clients'], [ClientRepresentation]);
            }
            if (data.hasOwnProperty('components')) {
                obj['components'] = MultivaluedHashMap.constructFromObject(data['components']);
            }
            if (data.hasOwnProperty('defaultDefaultClientScopes')) {
                obj['defaultDefaultClientScopes'] = ApiClient.convertToType(data['defaultDefaultClientScopes'], ['String']);
            }
            if (data.hasOwnProperty('defaultGroups')) {
                obj['defaultGroups'] = ApiClient.convertToType(data['defaultGroups'], ['String']);
            }
            if (data.hasOwnProperty('defaultLocale')) {
                obj['defaultLocale'] = ApiClient.convertToType(data['defaultLocale'], 'String');
            }
            if (data.hasOwnProperty('defaultOptionalClientScopes')) {
                obj['defaultOptionalClientScopes'] = ApiClient.convertToType(data['defaultOptionalClientScopes'], ['String']);
            }
            if (data.hasOwnProperty('defaultRoles')) {
                obj['defaultRoles'] = ApiClient.convertToType(data['defaultRoles'], ['String']);
            }
            if (data.hasOwnProperty('defaultSignatureAlgorithm')) {
                obj['defaultSignatureAlgorithm'] = ApiClient.convertToType(data['defaultSignatureAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('directGrantFlow')) {
                obj['directGrantFlow'] = ApiClient.convertToType(data['directGrantFlow'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('displayNameHtml')) {
                obj['displayNameHtml'] = ApiClient.convertToType(data['displayNameHtml'], 'String');
            }
            if (data.hasOwnProperty('dockerAuthenticationFlow')) {
                obj['dockerAuthenticationFlow'] = ApiClient.convertToType(data['dockerAuthenticationFlow'], 'String');
            }
            if (data.hasOwnProperty('duplicateEmailsAllowed')) {
                obj['duplicateEmailsAllowed'] = ApiClient.convertToType(data['duplicateEmailsAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('editUsernameAllowed')) {
                obj['editUsernameAllowed'] = ApiClient.convertToType(data['editUsernameAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('emailTheme')) {
                obj['emailTheme'] = ApiClient.convertToType(data['emailTheme'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('enabledEventTypes')) {
                obj['enabledEventTypes'] = ApiClient.convertToType(data['enabledEventTypes'], ['String']);
            }
            if (data.hasOwnProperty('eventsEnabled')) {
                obj['eventsEnabled'] = ApiClient.convertToType(data['eventsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('eventsExpiration')) {
                obj['eventsExpiration'] = ApiClient.convertToType(data['eventsExpiration'], 'Number');
            }
            if (data.hasOwnProperty('eventsListeners')) {
                obj['eventsListeners'] = ApiClient.convertToType(data['eventsListeners'], ['String']);
            }
            if (data.hasOwnProperty('failureFactor')) {
                obj['failureFactor'] = ApiClient.convertToType(data['failureFactor'], 'Number');
            }
            if (data.hasOwnProperty('federatedUsers')) {
                obj['federatedUsers'] = ApiClient.convertToType(data['federatedUsers'], [UserRepresentation]);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [GroupRepresentation]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('identityProviderMappers')) {
                obj['identityProviderMappers'] = ApiClient.convertToType(data['identityProviderMappers'], [IdentityProviderMapperRepresentation]);
            }
            if (data.hasOwnProperty('identityProviders')) {
                obj['identityProviders'] = ApiClient.convertToType(data['identityProviders'], [IdentityProviderRepresentation]);
            }
            if (data.hasOwnProperty('internationalizationEnabled')) {
                obj['internationalizationEnabled'] = ApiClient.convertToType(data['internationalizationEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('keycloakVersion')) {
                obj['keycloakVersion'] = ApiClient.convertToType(data['keycloakVersion'], 'String');
            }
            if (data.hasOwnProperty('loginTheme')) {
                obj['loginTheme'] = ApiClient.convertToType(data['loginTheme'], 'String');
            }
            if (data.hasOwnProperty('loginWithEmailAllowed')) {
                obj['loginWithEmailAllowed'] = ApiClient.convertToType(data['loginWithEmailAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('maxDeltaTimeSeconds')) {
                obj['maxDeltaTimeSeconds'] = ApiClient.convertToType(data['maxDeltaTimeSeconds'], 'Number');
            }
            if (data.hasOwnProperty('maxFailureWaitSeconds')) {
                obj['maxFailureWaitSeconds'] = ApiClient.convertToType(data['maxFailureWaitSeconds'], 'Number');
            }
            if (data.hasOwnProperty('minimumQuickLoginWaitSeconds')) {
                obj['minimumQuickLoginWaitSeconds'] = ApiClient.convertToType(data['minimumQuickLoginWaitSeconds'], 'Number');
            }
            if (data.hasOwnProperty('notBefore')) {
                obj['notBefore'] = ApiClient.convertToType(data['notBefore'], 'Number');
            }
            if (data.hasOwnProperty('offlineSessionIdleTimeout')) {
                obj['offlineSessionIdleTimeout'] = ApiClient.convertToType(data['offlineSessionIdleTimeout'], 'Number');
            }
            if (data.hasOwnProperty('offlineSessionMaxLifespan')) {
                obj['offlineSessionMaxLifespan'] = ApiClient.convertToType(data['offlineSessionMaxLifespan'], 'Number');
            }
            if (data.hasOwnProperty('offlineSessionMaxLifespanEnabled')) {
                obj['offlineSessionMaxLifespanEnabled'] = ApiClient.convertToType(data['offlineSessionMaxLifespanEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('otpPolicyAlgorithm')) {
                obj['otpPolicyAlgorithm'] = ApiClient.convertToType(data['otpPolicyAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('otpPolicyDigits')) {
                obj['otpPolicyDigits'] = ApiClient.convertToType(data['otpPolicyDigits'], 'Number');
            }
            if (data.hasOwnProperty('otpPolicyInitialCounter')) {
                obj['otpPolicyInitialCounter'] = ApiClient.convertToType(data['otpPolicyInitialCounter'], 'Number');
            }
            if (data.hasOwnProperty('otpPolicyLookAheadWindow')) {
                obj['otpPolicyLookAheadWindow'] = ApiClient.convertToType(data['otpPolicyLookAheadWindow'], 'Number');
            }
            if (data.hasOwnProperty('otpPolicyPeriod')) {
                obj['otpPolicyPeriod'] = ApiClient.convertToType(data['otpPolicyPeriod'], 'Number');
            }
            if (data.hasOwnProperty('otpPolicyType')) {
                obj['otpPolicyType'] = ApiClient.convertToType(data['otpPolicyType'], 'String');
            }
            if (data.hasOwnProperty('otpSupportedApplications')) {
                obj['otpSupportedApplications'] = ApiClient.convertToType(data['otpSupportedApplications'], ['String']);
            }
            if (data.hasOwnProperty('passwordPolicy')) {
                obj['passwordPolicy'] = ApiClient.convertToType(data['passwordPolicy'], 'String');
            }
            if (data.hasOwnProperty('permanentLockout')) {
                obj['permanentLockout'] = ApiClient.convertToType(data['permanentLockout'], 'Boolean');
            }
            if (data.hasOwnProperty('protocolMappers')) {
                obj['protocolMappers'] = ApiClient.convertToType(data['protocolMappers'], [ProtocolMapperRepresentation]);
            }
            if (data.hasOwnProperty('quickLoginCheckMilliSeconds')) {
                obj['quickLoginCheckMilliSeconds'] = ApiClient.convertToType(data['quickLoginCheckMilliSeconds'], 'Number');
            }
            if (data.hasOwnProperty('realm')) {
                obj['realm'] = ApiClient.convertToType(data['realm'], 'String');
            }
            if (data.hasOwnProperty('refreshTokenMaxReuse')) {
                obj['refreshTokenMaxReuse'] = ApiClient.convertToType(data['refreshTokenMaxReuse'], 'Number');
            }
            if (data.hasOwnProperty('registrationAllowed')) {
                obj['registrationAllowed'] = ApiClient.convertToType(data['registrationAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('registrationEmailAsUsername')) {
                obj['registrationEmailAsUsername'] = ApiClient.convertToType(data['registrationEmailAsUsername'], 'Boolean');
            }
            if (data.hasOwnProperty('registrationFlow')) {
                obj['registrationFlow'] = ApiClient.convertToType(data['registrationFlow'], 'String');
            }
            if (data.hasOwnProperty('rememberMe')) {
                obj['rememberMe'] = ApiClient.convertToType(data['rememberMe'], 'Boolean');
            }
            if (data.hasOwnProperty('requiredActions')) {
                obj['requiredActions'] = ApiClient.convertToType(data['requiredActions'], [RequiredActionProviderRepresentation]);
            }
            if (data.hasOwnProperty('resetCredentialsFlow')) {
                obj['resetCredentialsFlow'] = ApiClient.convertToType(data['resetCredentialsFlow'], 'String');
            }
            if (data.hasOwnProperty('resetPasswordAllowed')) {
                obj['resetPasswordAllowed'] = ApiClient.convertToType(data['resetPasswordAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('revokeRefreshToken')) {
                obj['revokeRefreshToken'] = ApiClient.convertToType(data['revokeRefreshToken'], 'Boolean');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = RolesRepresentation.constructFromObject(data['roles']);
            }
            if (data.hasOwnProperty('scopeMappings')) {
                obj['scopeMappings'] = ApiClient.convertToType(data['scopeMappings'], [ScopeMappingRepresentation]);
            }
            if (data.hasOwnProperty('smtpServer')) {
                obj['smtpServer'] = ApiClient.convertToType(data['smtpServer'], {'String': Object});
            }
            if (data.hasOwnProperty('sslRequired')) {
                obj['sslRequired'] = ApiClient.convertToType(data['sslRequired'], 'String');
            }
            if (data.hasOwnProperty('ssoSessionIdleTimeout')) {
                obj['ssoSessionIdleTimeout'] = ApiClient.convertToType(data['ssoSessionIdleTimeout'], 'Number');
            }
            if (data.hasOwnProperty('ssoSessionIdleTimeoutRememberMe')) {
                obj['ssoSessionIdleTimeoutRememberMe'] = ApiClient.convertToType(data['ssoSessionIdleTimeoutRememberMe'], 'Number');
            }
            if (data.hasOwnProperty('ssoSessionMaxLifespan')) {
                obj['ssoSessionMaxLifespan'] = ApiClient.convertToType(data['ssoSessionMaxLifespan'], 'Number');
            }
            if (data.hasOwnProperty('ssoSessionMaxLifespanRememberMe')) {
                obj['ssoSessionMaxLifespanRememberMe'] = ApiClient.convertToType(data['ssoSessionMaxLifespanRememberMe'], 'Number');
            }
            if (data.hasOwnProperty('supportedLocales')) {
                obj['supportedLocales'] = ApiClient.convertToType(data['supportedLocales'], ['String']);
            }
            if (data.hasOwnProperty('userFederationMappers')) {
                obj['userFederationMappers'] = ApiClient.convertToType(data['userFederationMappers'], [UserFederationMapperRepresentation]);
            }
            if (data.hasOwnProperty('userFederationProviders')) {
                obj['userFederationProviders'] = ApiClient.convertToType(data['userFederationProviders'], [UserFederationProviderRepresentation]);
            }
            if (data.hasOwnProperty('userManagedAccessAllowed')) {
                obj['userManagedAccessAllowed'] = ApiClient.convertToType(data['userManagedAccessAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [UserRepresentation]);
            }
            if (data.hasOwnProperty('verifyEmail')) {
                obj['verifyEmail'] = ApiClient.convertToType(data['verifyEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('waitIncrementSeconds')) {
                obj['waitIncrementSeconds'] = ApiClient.convertToType(data['waitIncrementSeconds'], 'Number');
            }
            if (data.hasOwnProperty('webAuthnPolicyAcceptableAaguids')) {
                obj['webAuthnPolicyAcceptableAaguids'] = ApiClient.convertToType(data['webAuthnPolicyAcceptableAaguids'], ['String']);
            }
            if (data.hasOwnProperty('webAuthnPolicyAttestationConveyancePreference')) {
                obj['webAuthnPolicyAttestationConveyancePreference'] = ApiClient.convertToType(data['webAuthnPolicyAttestationConveyancePreference'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyAuthenticatorAttachment')) {
                obj['webAuthnPolicyAuthenticatorAttachment'] = ApiClient.convertToType(data['webAuthnPolicyAuthenticatorAttachment'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyAvoidSameAuthenticatorRegister')) {
                obj['webAuthnPolicyAvoidSameAuthenticatorRegister'] = ApiClient.convertToType(data['webAuthnPolicyAvoidSameAuthenticatorRegister'], 'Boolean');
            }
            if (data.hasOwnProperty('webAuthnPolicyCreateTimeout')) {
                obj['webAuthnPolicyCreateTimeout'] = ApiClient.convertToType(data['webAuthnPolicyCreateTimeout'], 'Number');
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessAcceptableAaguids')) {
                obj['webAuthnPolicyPasswordlessAcceptableAaguids'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessAcceptableAaguids'], ['String']);
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessAttestationConveyancePreference')) {
                obj['webAuthnPolicyPasswordlessAttestationConveyancePreference'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessAttestationConveyancePreference'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessAuthenticatorAttachment')) {
                obj['webAuthnPolicyPasswordlessAuthenticatorAttachment'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessAuthenticatorAttachment'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister')) {
                obj['webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister'], 'Boolean');
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessCreateTimeout')) {
                obj['webAuthnPolicyPasswordlessCreateTimeout'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessCreateTimeout'], 'Number');
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessRequireResidentKey')) {
                obj['webAuthnPolicyPasswordlessRequireResidentKey'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessRequireResidentKey'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessRpEntityName')) {
                obj['webAuthnPolicyPasswordlessRpEntityName'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessRpEntityName'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessRpId')) {
                obj['webAuthnPolicyPasswordlessRpId'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessRpId'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessSignatureAlgorithms')) {
                obj['webAuthnPolicyPasswordlessSignatureAlgorithms'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessSignatureAlgorithms'], ['String']);
            }
            if (data.hasOwnProperty('webAuthnPolicyPasswordlessUserVerificationRequirement')) {
                obj['webAuthnPolicyPasswordlessUserVerificationRequirement'] = ApiClient.convertToType(data['webAuthnPolicyPasswordlessUserVerificationRequirement'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyRequireResidentKey')) {
                obj['webAuthnPolicyRequireResidentKey'] = ApiClient.convertToType(data['webAuthnPolicyRequireResidentKey'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyRpEntityName')) {
                obj['webAuthnPolicyRpEntityName'] = ApiClient.convertToType(data['webAuthnPolicyRpEntityName'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicyRpId')) {
                obj['webAuthnPolicyRpId'] = ApiClient.convertToType(data['webAuthnPolicyRpId'], 'String');
            }
            if (data.hasOwnProperty('webAuthnPolicySignatureAlgorithms')) {
                obj['webAuthnPolicySignatureAlgorithms'] = ApiClient.convertToType(data['webAuthnPolicySignatureAlgorithms'], ['String']);
            }
            if (data.hasOwnProperty('webAuthnPolicyUserVerificationRequirement')) {
                obj['webAuthnPolicyUserVerificationRequirement'] = ApiClient.convertToType(data['webAuthnPolicyUserVerificationRequirement'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RealmRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RealmRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountTheme'] && !(typeof data['accountTheme'] === 'string' || data['accountTheme'] instanceof String)) {
            throw new Error("Expected the field `accountTheme` to be a primitive type in the JSON string but got " + data['accountTheme']);
        }
        // ensure the json data is a string
        if (data['adminTheme'] && !(typeof data['adminTheme'] === 'string' || data['adminTheme'] instanceof String)) {
            throw new Error("Expected the field `adminTheme` to be a primitive type in the JSON string but got " + data['adminTheme']);
        }
        if (data['authenticationFlows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authenticationFlows'])) {
                throw new Error("Expected the field `authenticationFlows` to be an array in the JSON data but got " + data['authenticationFlows']);
            }
            // validate the optional field `authenticationFlows` (array)
            for (const item of data['authenticationFlows']) {
                AuthenticationFlowRepresentation.validateJSON(item);
            };
        }
        if (data['authenticatorConfig']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authenticatorConfig'])) {
                throw new Error("Expected the field `authenticatorConfig` to be an array in the JSON data but got " + data['authenticatorConfig']);
            }
            // validate the optional field `authenticatorConfig` (array)
            for (const item of data['authenticatorConfig']) {
                AuthenticatorConfigRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['browserFlow'] && !(typeof data['browserFlow'] === 'string' || data['browserFlow'] instanceof String)) {
            throw new Error("Expected the field `browserFlow` to be a primitive type in the JSON string but got " + data['browserFlow']);
        }
        // ensure the json data is a string
        if (data['clientAuthenticationFlow'] && !(typeof data['clientAuthenticationFlow'] === 'string' || data['clientAuthenticationFlow'] instanceof String)) {
            throw new Error("Expected the field `clientAuthenticationFlow` to be a primitive type in the JSON string but got " + data['clientAuthenticationFlow']);
        }
        if (data['clientScopes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientScopes'])) {
                throw new Error("Expected the field `clientScopes` to be an array in the JSON data but got " + data['clientScopes']);
            }
            // validate the optional field `clientScopes` (array)
            for (const item of data['clientScopes']) {
                ClientScopeRepresentation.validateJSON(item);
            };
        }
        if (data['clients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clients'])) {
                throw new Error("Expected the field `clients` to be an array in the JSON data but got " + data['clients']);
            }
            // validate the optional field `clients` (array)
            for (const item of data['clients']) {
                ClientRepresentation.validateJSON(item);
            };
        }
        // validate the optional field `components`
        if (data['components']) { // data not null
          MultivaluedHashMap.validateJSON(data['components']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['defaultDefaultClientScopes'])) {
            throw new Error("Expected the field `defaultDefaultClientScopes` to be an array in the JSON data but got " + data['defaultDefaultClientScopes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['defaultGroups'])) {
            throw new Error("Expected the field `defaultGroups` to be an array in the JSON data but got " + data['defaultGroups']);
        }
        // ensure the json data is a string
        if (data['defaultLocale'] && !(typeof data['defaultLocale'] === 'string' || data['defaultLocale'] instanceof String)) {
            throw new Error("Expected the field `defaultLocale` to be a primitive type in the JSON string but got " + data['defaultLocale']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['defaultOptionalClientScopes'])) {
            throw new Error("Expected the field `defaultOptionalClientScopes` to be an array in the JSON data but got " + data['defaultOptionalClientScopes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['defaultRoles'])) {
            throw new Error("Expected the field `defaultRoles` to be an array in the JSON data but got " + data['defaultRoles']);
        }
        // ensure the json data is a string
        if (data['defaultSignatureAlgorithm'] && !(typeof data['defaultSignatureAlgorithm'] === 'string' || data['defaultSignatureAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `defaultSignatureAlgorithm` to be a primitive type in the JSON string but got " + data['defaultSignatureAlgorithm']);
        }
        // ensure the json data is a string
        if (data['directGrantFlow'] && !(typeof data['directGrantFlow'] === 'string' || data['directGrantFlow'] instanceof String)) {
            throw new Error("Expected the field `directGrantFlow` to be a primitive type in the JSON string but got " + data['directGrantFlow']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['displayNameHtml'] && !(typeof data['displayNameHtml'] === 'string' || data['displayNameHtml'] instanceof String)) {
            throw new Error("Expected the field `displayNameHtml` to be a primitive type in the JSON string but got " + data['displayNameHtml']);
        }
        // ensure the json data is a string
        if (data['dockerAuthenticationFlow'] && !(typeof data['dockerAuthenticationFlow'] === 'string' || data['dockerAuthenticationFlow'] instanceof String)) {
            throw new Error("Expected the field `dockerAuthenticationFlow` to be a primitive type in the JSON string but got " + data['dockerAuthenticationFlow']);
        }
        // ensure the json data is a string
        if (data['emailTheme'] && !(typeof data['emailTheme'] === 'string' || data['emailTheme'] instanceof String)) {
            throw new Error("Expected the field `emailTheme` to be a primitive type in the JSON string but got " + data['emailTheme']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enabledEventTypes'])) {
            throw new Error("Expected the field `enabledEventTypes` to be an array in the JSON data but got " + data['enabledEventTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['eventsListeners'])) {
            throw new Error("Expected the field `eventsListeners` to be an array in the JSON data but got " + data['eventsListeners']);
        }
        if (data['federatedUsers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['federatedUsers'])) {
                throw new Error("Expected the field `federatedUsers` to be an array in the JSON data but got " + data['federatedUsers']);
            }
            // validate the optional field `federatedUsers` (array)
            for (const item of data['federatedUsers']) {
                UserRepresentation.validateJSON(item);
            };
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                GroupRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['identityProviderMappers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identityProviderMappers'])) {
                throw new Error("Expected the field `identityProviderMappers` to be an array in the JSON data but got " + data['identityProviderMappers']);
            }
            // validate the optional field `identityProviderMappers` (array)
            for (const item of data['identityProviderMappers']) {
                IdentityProviderMapperRepresentation.validateJSON(item);
            };
        }
        if (data['identityProviders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identityProviders'])) {
                throw new Error("Expected the field `identityProviders` to be an array in the JSON data but got " + data['identityProviders']);
            }
            // validate the optional field `identityProviders` (array)
            for (const item of data['identityProviders']) {
                IdentityProviderRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['keycloakVersion'] && !(typeof data['keycloakVersion'] === 'string' || data['keycloakVersion'] instanceof String)) {
            throw new Error("Expected the field `keycloakVersion` to be a primitive type in the JSON string but got " + data['keycloakVersion']);
        }
        // ensure the json data is a string
        if (data['loginTheme'] && !(typeof data['loginTheme'] === 'string' || data['loginTheme'] instanceof String)) {
            throw new Error("Expected the field `loginTheme` to be a primitive type in the JSON string but got " + data['loginTheme']);
        }
        // ensure the json data is a string
        if (data['otpPolicyAlgorithm'] && !(typeof data['otpPolicyAlgorithm'] === 'string' || data['otpPolicyAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `otpPolicyAlgorithm` to be a primitive type in the JSON string but got " + data['otpPolicyAlgorithm']);
        }
        // ensure the json data is a string
        if (data['otpPolicyType'] && !(typeof data['otpPolicyType'] === 'string' || data['otpPolicyType'] instanceof String)) {
            throw new Error("Expected the field `otpPolicyType` to be a primitive type in the JSON string but got " + data['otpPolicyType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['otpSupportedApplications'])) {
            throw new Error("Expected the field `otpSupportedApplications` to be an array in the JSON data but got " + data['otpSupportedApplications']);
        }
        // ensure the json data is a string
        if (data['passwordPolicy'] && !(typeof data['passwordPolicy'] === 'string' || data['passwordPolicy'] instanceof String)) {
            throw new Error("Expected the field `passwordPolicy` to be a primitive type in the JSON string but got " + data['passwordPolicy']);
        }
        if (data['protocolMappers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['protocolMappers'])) {
                throw new Error("Expected the field `protocolMappers` to be an array in the JSON data but got " + data['protocolMappers']);
            }
            // validate the optional field `protocolMappers` (array)
            for (const item of data['protocolMappers']) {
                ProtocolMapperRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['realm'] && !(typeof data['realm'] === 'string' || data['realm'] instanceof String)) {
            throw new Error("Expected the field `realm` to be a primitive type in the JSON string but got " + data['realm']);
        }
        // ensure the json data is a string
        if (data['registrationFlow'] && !(typeof data['registrationFlow'] === 'string' || data['registrationFlow'] instanceof String)) {
            throw new Error("Expected the field `registrationFlow` to be a primitive type in the JSON string but got " + data['registrationFlow']);
        }
        if (data['requiredActions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requiredActions'])) {
                throw new Error("Expected the field `requiredActions` to be an array in the JSON data but got " + data['requiredActions']);
            }
            // validate the optional field `requiredActions` (array)
            for (const item of data['requiredActions']) {
                RequiredActionProviderRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resetCredentialsFlow'] && !(typeof data['resetCredentialsFlow'] === 'string' || data['resetCredentialsFlow'] instanceof String)) {
            throw new Error("Expected the field `resetCredentialsFlow` to be a primitive type in the JSON string but got " + data['resetCredentialsFlow']);
        }
        // validate the optional field `roles`
        if (data['roles']) { // data not null
          RolesRepresentation.validateJSON(data['roles']);
        }
        if (data['scopeMappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scopeMappings'])) {
                throw new Error("Expected the field `scopeMappings` to be an array in the JSON data but got " + data['scopeMappings']);
            }
            // validate the optional field `scopeMappings` (array)
            for (const item of data['scopeMappings']) {
                ScopeMappingRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sslRequired'] && !(typeof data['sslRequired'] === 'string' || data['sslRequired'] instanceof String)) {
            throw new Error("Expected the field `sslRequired` to be a primitive type in the JSON string but got " + data['sslRequired']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedLocales'])) {
            throw new Error("Expected the field `supportedLocales` to be an array in the JSON data but got " + data['supportedLocales']);
        }
        if (data['userFederationMappers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userFederationMappers'])) {
                throw new Error("Expected the field `userFederationMappers` to be an array in the JSON data but got " + data['userFederationMappers']);
            }
            // validate the optional field `userFederationMappers` (array)
            for (const item of data['userFederationMappers']) {
                UserFederationMapperRepresentation.validateJSON(item);
            };
        }
        if (data['userFederationProviders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userFederationProviders'])) {
                throw new Error("Expected the field `userFederationProviders` to be an array in the JSON data but got " + data['userFederationProviders']);
            }
            // validate the optional field `userFederationProviders` (array)
            for (const item of data['userFederationProviders']) {
                UserFederationProviderRepresentation.validateJSON(item);
            };
        }
        if (data['users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users'])) {
                throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
            }
            // validate the optional field `users` (array)
            for (const item of data['users']) {
                UserRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['webAuthnPolicyAcceptableAaguids'])) {
            throw new Error("Expected the field `webAuthnPolicyAcceptableAaguids` to be an array in the JSON data but got " + data['webAuthnPolicyAcceptableAaguids']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyAttestationConveyancePreference'] && !(typeof data['webAuthnPolicyAttestationConveyancePreference'] === 'string' || data['webAuthnPolicyAttestationConveyancePreference'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyAttestationConveyancePreference` to be a primitive type in the JSON string but got " + data['webAuthnPolicyAttestationConveyancePreference']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyAuthenticatorAttachment'] && !(typeof data['webAuthnPolicyAuthenticatorAttachment'] === 'string' || data['webAuthnPolicyAuthenticatorAttachment'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyAuthenticatorAttachment` to be a primitive type in the JSON string but got " + data['webAuthnPolicyAuthenticatorAttachment']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['webAuthnPolicyPasswordlessAcceptableAaguids'])) {
            throw new Error("Expected the field `webAuthnPolicyPasswordlessAcceptableAaguids` to be an array in the JSON data but got " + data['webAuthnPolicyPasswordlessAcceptableAaguids']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyPasswordlessAttestationConveyancePreference'] && !(typeof data['webAuthnPolicyPasswordlessAttestationConveyancePreference'] === 'string' || data['webAuthnPolicyPasswordlessAttestationConveyancePreference'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyPasswordlessAttestationConveyancePreference` to be a primitive type in the JSON string but got " + data['webAuthnPolicyPasswordlessAttestationConveyancePreference']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyPasswordlessAuthenticatorAttachment'] && !(typeof data['webAuthnPolicyPasswordlessAuthenticatorAttachment'] === 'string' || data['webAuthnPolicyPasswordlessAuthenticatorAttachment'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyPasswordlessAuthenticatorAttachment` to be a primitive type in the JSON string but got " + data['webAuthnPolicyPasswordlessAuthenticatorAttachment']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyPasswordlessRequireResidentKey'] && !(typeof data['webAuthnPolicyPasswordlessRequireResidentKey'] === 'string' || data['webAuthnPolicyPasswordlessRequireResidentKey'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyPasswordlessRequireResidentKey` to be a primitive type in the JSON string but got " + data['webAuthnPolicyPasswordlessRequireResidentKey']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyPasswordlessRpEntityName'] && !(typeof data['webAuthnPolicyPasswordlessRpEntityName'] === 'string' || data['webAuthnPolicyPasswordlessRpEntityName'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyPasswordlessRpEntityName` to be a primitive type in the JSON string but got " + data['webAuthnPolicyPasswordlessRpEntityName']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyPasswordlessRpId'] && !(typeof data['webAuthnPolicyPasswordlessRpId'] === 'string' || data['webAuthnPolicyPasswordlessRpId'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyPasswordlessRpId` to be a primitive type in the JSON string but got " + data['webAuthnPolicyPasswordlessRpId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['webAuthnPolicyPasswordlessSignatureAlgorithms'])) {
            throw new Error("Expected the field `webAuthnPolicyPasswordlessSignatureAlgorithms` to be an array in the JSON data but got " + data['webAuthnPolicyPasswordlessSignatureAlgorithms']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyPasswordlessUserVerificationRequirement'] && !(typeof data['webAuthnPolicyPasswordlessUserVerificationRequirement'] === 'string' || data['webAuthnPolicyPasswordlessUserVerificationRequirement'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyPasswordlessUserVerificationRequirement` to be a primitive type in the JSON string but got " + data['webAuthnPolicyPasswordlessUserVerificationRequirement']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyRequireResidentKey'] && !(typeof data['webAuthnPolicyRequireResidentKey'] === 'string' || data['webAuthnPolicyRequireResidentKey'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyRequireResidentKey` to be a primitive type in the JSON string but got " + data['webAuthnPolicyRequireResidentKey']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyRpEntityName'] && !(typeof data['webAuthnPolicyRpEntityName'] === 'string' || data['webAuthnPolicyRpEntityName'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyRpEntityName` to be a primitive type in the JSON string but got " + data['webAuthnPolicyRpEntityName']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyRpId'] && !(typeof data['webAuthnPolicyRpId'] === 'string' || data['webAuthnPolicyRpId'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyRpId` to be a primitive type in the JSON string but got " + data['webAuthnPolicyRpId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['webAuthnPolicySignatureAlgorithms'])) {
            throw new Error("Expected the field `webAuthnPolicySignatureAlgorithms` to be an array in the JSON data but got " + data['webAuthnPolicySignatureAlgorithms']);
        }
        // ensure the json data is a string
        if (data['webAuthnPolicyUserVerificationRequirement'] && !(typeof data['webAuthnPolicyUserVerificationRequirement'] === 'string' || data['webAuthnPolicyUserVerificationRequirement'] instanceof String)) {
            throw new Error("Expected the field `webAuthnPolicyUserVerificationRequirement` to be a primitive type in the JSON string but got " + data['webAuthnPolicyUserVerificationRequirement']);
        }

        return true;
    }


}



/**
 * @member {Number} accessCodeLifespan
 */
RealmRepresentation.prototype['accessCodeLifespan'] = undefined;

/**
 * @member {Number} accessCodeLifespanLogin
 */
RealmRepresentation.prototype['accessCodeLifespanLogin'] = undefined;

/**
 * @member {Number} accessCodeLifespanUserAction
 */
RealmRepresentation.prototype['accessCodeLifespanUserAction'] = undefined;

/**
 * @member {Number} accessTokenLifespan
 */
RealmRepresentation.prototype['accessTokenLifespan'] = undefined;

/**
 * @member {Number} accessTokenLifespanForImplicitFlow
 */
RealmRepresentation.prototype['accessTokenLifespanForImplicitFlow'] = undefined;

/**
 * @member {String} accountTheme
 */
RealmRepresentation.prototype['accountTheme'] = undefined;

/**
 * @member {Number} actionTokenGeneratedByAdminLifespan
 */
RealmRepresentation.prototype['actionTokenGeneratedByAdminLifespan'] = undefined;

/**
 * @member {Number} actionTokenGeneratedByUserLifespan
 */
RealmRepresentation.prototype['actionTokenGeneratedByUserLifespan'] = undefined;

/**
 * @member {Boolean} adminEventsDetailsEnabled
 */
RealmRepresentation.prototype['adminEventsDetailsEnabled'] = undefined;

/**
 * @member {Boolean} adminEventsEnabled
 */
RealmRepresentation.prototype['adminEventsEnabled'] = undefined;

/**
 * @member {String} adminTheme
 */
RealmRepresentation.prototype['adminTheme'] = undefined;

/**
 * @member {Object.<String, Object>} attributes
 */
RealmRepresentation.prototype['attributes'] = undefined;

/**
 * @member {Array.<module:model/AuthenticationFlowRepresentation>} authenticationFlows
 */
RealmRepresentation.prototype['authenticationFlows'] = undefined;

/**
 * @member {Array.<module:model/AuthenticatorConfigRepresentation>} authenticatorConfig
 */
RealmRepresentation.prototype['authenticatorConfig'] = undefined;

/**
 * @member {String} browserFlow
 */
RealmRepresentation.prototype['browserFlow'] = undefined;

/**
 * @member {Object.<String, Object>} browserSecurityHeaders
 */
RealmRepresentation.prototype['browserSecurityHeaders'] = undefined;

/**
 * @member {Boolean} bruteForceProtected
 */
RealmRepresentation.prototype['bruteForceProtected'] = undefined;

/**
 * @member {String} clientAuthenticationFlow
 */
RealmRepresentation.prototype['clientAuthenticationFlow'] = undefined;

/**
 * @member {Object.<String, Object>} clientScopeMappings
 */
RealmRepresentation.prototype['clientScopeMappings'] = undefined;

/**
 * @member {Array.<module:model/ClientScopeRepresentation>} clientScopes
 */
RealmRepresentation.prototype['clientScopes'] = undefined;

/**
 * @member {Number} clientSessionIdleTimeout
 */
RealmRepresentation.prototype['clientSessionIdleTimeout'] = undefined;

/**
 * @member {Number} clientSessionMaxLifespan
 */
RealmRepresentation.prototype['clientSessionMaxLifespan'] = undefined;

/**
 * @member {Array.<module:model/ClientRepresentation>} clients
 */
RealmRepresentation.prototype['clients'] = undefined;

/**
 * @member {module:model/MultivaluedHashMap} components
 */
RealmRepresentation.prototype['components'] = undefined;

/**
 * @member {Array.<String>} defaultDefaultClientScopes
 */
RealmRepresentation.prototype['defaultDefaultClientScopes'] = undefined;

/**
 * @member {Array.<String>} defaultGroups
 */
RealmRepresentation.prototype['defaultGroups'] = undefined;

/**
 * @member {String} defaultLocale
 */
RealmRepresentation.prototype['defaultLocale'] = undefined;

/**
 * @member {Array.<String>} defaultOptionalClientScopes
 */
RealmRepresentation.prototype['defaultOptionalClientScopes'] = undefined;

/**
 * @member {Array.<String>} defaultRoles
 */
RealmRepresentation.prototype['defaultRoles'] = undefined;

/**
 * @member {String} defaultSignatureAlgorithm
 */
RealmRepresentation.prototype['defaultSignatureAlgorithm'] = undefined;

/**
 * @member {String} directGrantFlow
 */
RealmRepresentation.prototype['directGrantFlow'] = undefined;

/**
 * @member {String} displayName
 */
RealmRepresentation.prototype['displayName'] = undefined;

/**
 * @member {String} displayNameHtml
 */
RealmRepresentation.prototype['displayNameHtml'] = undefined;

/**
 * @member {String} dockerAuthenticationFlow
 */
RealmRepresentation.prototype['dockerAuthenticationFlow'] = undefined;

/**
 * @member {Boolean} duplicateEmailsAllowed
 */
RealmRepresentation.prototype['duplicateEmailsAllowed'] = undefined;

/**
 * @member {Boolean} editUsernameAllowed
 */
RealmRepresentation.prototype['editUsernameAllowed'] = undefined;

/**
 * @member {String} emailTheme
 */
RealmRepresentation.prototype['emailTheme'] = undefined;

/**
 * @member {Boolean} enabled
 */
RealmRepresentation.prototype['enabled'] = undefined;

/**
 * @member {Array.<String>} enabledEventTypes
 */
RealmRepresentation.prototype['enabledEventTypes'] = undefined;

/**
 * @member {Boolean} eventsEnabled
 */
RealmRepresentation.prototype['eventsEnabled'] = undefined;

/**
 * @member {Number} eventsExpiration
 */
RealmRepresentation.prototype['eventsExpiration'] = undefined;

/**
 * @member {Array.<String>} eventsListeners
 */
RealmRepresentation.prototype['eventsListeners'] = undefined;

/**
 * @member {Number} failureFactor
 */
RealmRepresentation.prototype['failureFactor'] = undefined;

/**
 * @member {Array.<module:model/UserRepresentation>} federatedUsers
 */
RealmRepresentation.prototype['federatedUsers'] = undefined;

/**
 * @member {Array.<module:model/GroupRepresentation>} groups
 */
RealmRepresentation.prototype['groups'] = undefined;

/**
 * @member {String} id
 */
RealmRepresentation.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/IdentityProviderMapperRepresentation>} identityProviderMappers
 */
RealmRepresentation.prototype['identityProviderMappers'] = undefined;

/**
 * @member {Array.<module:model/IdentityProviderRepresentation>} identityProviders
 */
RealmRepresentation.prototype['identityProviders'] = undefined;

/**
 * @member {Boolean} internationalizationEnabled
 */
RealmRepresentation.prototype['internationalizationEnabled'] = undefined;

/**
 * @member {String} keycloakVersion
 */
RealmRepresentation.prototype['keycloakVersion'] = undefined;

/**
 * @member {String} loginTheme
 */
RealmRepresentation.prototype['loginTheme'] = undefined;

/**
 * @member {Boolean} loginWithEmailAllowed
 */
RealmRepresentation.prototype['loginWithEmailAllowed'] = undefined;

/**
 * @member {Number} maxDeltaTimeSeconds
 */
RealmRepresentation.prototype['maxDeltaTimeSeconds'] = undefined;

/**
 * @member {Number} maxFailureWaitSeconds
 */
RealmRepresentation.prototype['maxFailureWaitSeconds'] = undefined;

/**
 * @member {Number} minimumQuickLoginWaitSeconds
 */
RealmRepresentation.prototype['minimumQuickLoginWaitSeconds'] = undefined;

/**
 * @member {Number} notBefore
 */
RealmRepresentation.prototype['notBefore'] = undefined;

/**
 * @member {Number} offlineSessionIdleTimeout
 */
RealmRepresentation.prototype['offlineSessionIdleTimeout'] = undefined;

/**
 * @member {Number} offlineSessionMaxLifespan
 */
RealmRepresentation.prototype['offlineSessionMaxLifespan'] = undefined;

/**
 * @member {Boolean} offlineSessionMaxLifespanEnabled
 */
RealmRepresentation.prototype['offlineSessionMaxLifespanEnabled'] = undefined;

/**
 * @member {String} otpPolicyAlgorithm
 */
RealmRepresentation.prototype['otpPolicyAlgorithm'] = undefined;

/**
 * @member {Number} otpPolicyDigits
 */
RealmRepresentation.prototype['otpPolicyDigits'] = undefined;

/**
 * @member {Number} otpPolicyInitialCounter
 */
RealmRepresentation.prototype['otpPolicyInitialCounter'] = undefined;

/**
 * @member {Number} otpPolicyLookAheadWindow
 */
RealmRepresentation.prototype['otpPolicyLookAheadWindow'] = undefined;

/**
 * @member {Number} otpPolicyPeriod
 */
RealmRepresentation.prototype['otpPolicyPeriod'] = undefined;

/**
 * @member {String} otpPolicyType
 */
RealmRepresentation.prototype['otpPolicyType'] = undefined;

/**
 * @member {Array.<String>} otpSupportedApplications
 */
RealmRepresentation.prototype['otpSupportedApplications'] = undefined;

/**
 * @member {String} passwordPolicy
 */
RealmRepresentation.prototype['passwordPolicy'] = undefined;

/**
 * @member {Boolean} permanentLockout
 */
RealmRepresentation.prototype['permanentLockout'] = undefined;

/**
 * @member {Array.<module:model/ProtocolMapperRepresentation>} protocolMappers
 */
RealmRepresentation.prototype['protocolMappers'] = undefined;

/**
 * @member {Number} quickLoginCheckMilliSeconds
 */
RealmRepresentation.prototype['quickLoginCheckMilliSeconds'] = undefined;

/**
 * @member {String} realm
 */
RealmRepresentation.prototype['realm'] = undefined;

/**
 * @member {Number} refreshTokenMaxReuse
 */
RealmRepresentation.prototype['refreshTokenMaxReuse'] = undefined;

/**
 * @member {Boolean} registrationAllowed
 */
RealmRepresentation.prototype['registrationAllowed'] = undefined;

/**
 * @member {Boolean} registrationEmailAsUsername
 */
RealmRepresentation.prototype['registrationEmailAsUsername'] = undefined;

/**
 * @member {String} registrationFlow
 */
RealmRepresentation.prototype['registrationFlow'] = undefined;

/**
 * @member {Boolean} rememberMe
 */
RealmRepresentation.prototype['rememberMe'] = undefined;

/**
 * @member {Array.<module:model/RequiredActionProviderRepresentation>} requiredActions
 */
RealmRepresentation.prototype['requiredActions'] = undefined;

/**
 * @member {String} resetCredentialsFlow
 */
RealmRepresentation.prototype['resetCredentialsFlow'] = undefined;

/**
 * @member {Boolean} resetPasswordAllowed
 */
RealmRepresentation.prototype['resetPasswordAllowed'] = undefined;

/**
 * @member {Boolean} revokeRefreshToken
 */
RealmRepresentation.prototype['revokeRefreshToken'] = undefined;

/**
 * @member {module:model/RolesRepresentation} roles
 */
RealmRepresentation.prototype['roles'] = undefined;

/**
 * @member {Array.<module:model/ScopeMappingRepresentation>} scopeMappings
 */
RealmRepresentation.prototype['scopeMappings'] = undefined;

/**
 * @member {Object.<String, Object>} smtpServer
 */
RealmRepresentation.prototype['smtpServer'] = undefined;

/**
 * @member {String} sslRequired
 */
RealmRepresentation.prototype['sslRequired'] = undefined;

/**
 * @member {Number} ssoSessionIdleTimeout
 */
RealmRepresentation.prototype['ssoSessionIdleTimeout'] = undefined;

/**
 * @member {Number} ssoSessionIdleTimeoutRememberMe
 */
RealmRepresentation.prototype['ssoSessionIdleTimeoutRememberMe'] = undefined;

/**
 * @member {Number} ssoSessionMaxLifespan
 */
RealmRepresentation.prototype['ssoSessionMaxLifespan'] = undefined;

/**
 * @member {Number} ssoSessionMaxLifespanRememberMe
 */
RealmRepresentation.prototype['ssoSessionMaxLifespanRememberMe'] = undefined;

/**
 * @member {Array.<String>} supportedLocales
 */
RealmRepresentation.prototype['supportedLocales'] = undefined;

/**
 * @member {Array.<module:model/UserFederationMapperRepresentation>} userFederationMappers
 */
RealmRepresentation.prototype['userFederationMappers'] = undefined;

/**
 * @member {Array.<module:model/UserFederationProviderRepresentation>} userFederationProviders
 */
RealmRepresentation.prototype['userFederationProviders'] = undefined;

/**
 * @member {Boolean} userManagedAccessAllowed
 */
RealmRepresentation.prototype['userManagedAccessAllowed'] = undefined;

/**
 * @member {Array.<module:model/UserRepresentation>} users
 */
RealmRepresentation.prototype['users'] = undefined;

/**
 * @member {Boolean} verifyEmail
 */
RealmRepresentation.prototype['verifyEmail'] = undefined;

/**
 * @member {Number} waitIncrementSeconds
 */
RealmRepresentation.prototype['waitIncrementSeconds'] = undefined;

/**
 * @member {Array.<String>} webAuthnPolicyAcceptableAaguids
 */
RealmRepresentation.prototype['webAuthnPolicyAcceptableAaguids'] = undefined;

/**
 * @member {String} webAuthnPolicyAttestationConveyancePreference
 */
RealmRepresentation.prototype['webAuthnPolicyAttestationConveyancePreference'] = undefined;

/**
 * @member {String} webAuthnPolicyAuthenticatorAttachment
 */
RealmRepresentation.prototype['webAuthnPolicyAuthenticatorAttachment'] = undefined;

/**
 * @member {Boolean} webAuthnPolicyAvoidSameAuthenticatorRegister
 */
RealmRepresentation.prototype['webAuthnPolicyAvoidSameAuthenticatorRegister'] = undefined;

/**
 * @member {Number} webAuthnPolicyCreateTimeout
 */
RealmRepresentation.prototype['webAuthnPolicyCreateTimeout'] = undefined;

/**
 * @member {Array.<String>} webAuthnPolicyPasswordlessAcceptableAaguids
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessAcceptableAaguids'] = undefined;

/**
 * @member {String} webAuthnPolicyPasswordlessAttestationConveyancePreference
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessAttestationConveyancePreference'] = undefined;

/**
 * @member {String} webAuthnPolicyPasswordlessAuthenticatorAttachment
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessAuthenticatorAttachment'] = undefined;

/**
 * @member {Boolean} webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister'] = undefined;

/**
 * @member {Number} webAuthnPolicyPasswordlessCreateTimeout
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessCreateTimeout'] = undefined;

/**
 * @member {String} webAuthnPolicyPasswordlessRequireResidentKey
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessRequireResidentKey'] = undefined;

/**
 * @member {String} webAuthnPolicyPasswordlessRpEntityName
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessRpEntityName'] = undefined;

/**
 * @member {String} webAuthnPolicyPasswordlessRpId
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessRpId'] = undefined;

/**
 * @member {Array.<String>} webAuthnPolicyPasswordlessSignatureAlgorithms
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessSignatureAlgorithms'] = undefined;

/**
 * @member {String} webAuthnPolicyPasswordlessUserVerificationRequirement
 */
RealmRepresentation.prototype['webAuthnPolicyPasswordlessUserVerificationRequirement'] = undefined;

/**
 * @member {String} webAuthnPolicyRequireResidentKey
 */
RealmRepresentation.prototype['webAuthnPolicyRequireResidentKey'] = undefined;

/**
 * @member {String} webAuthnPolicyRpEntityName
 */
RealmRepresentation.prototype['webAuthnPolicyRpEntityName'] = undefined;

/**
 * @member {String} webAuthnPolicyRpId
 */
RealmRepresentation.prototype['webAuthnPolicyRpId'] = undefined;

/**
 * @member {Array.<String>} webAuthnPolicySignatureAlgorithms
 */
RealmRepresentation.prototype['webAuthnPolicySignatureAlgorithms'] = undefined;

/**
 * @member {String} webAuthnPolicyUserVerificationRequirement
 */
RealmRepresentation.prototype['webAuthnPolicyUserVerificationRequirement'] = undefined;






export default RealmRepresentation;

