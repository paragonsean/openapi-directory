/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CredentialRepresentation model module.
 * @module model/CredentialRepresentation
 * @version 1
 */
class CredentialRepresentation {
    /**
     * Constructs a new <code>CredentialRepresentation</code>.
     * @alias module:model/CredentialRepresentation
     */
    constructor() { 
        
        CredentialRepresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CredentialRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CredentialRepresentation} obj Optional instance to populate.
     * @return {module:model/CredentialRepresentation} The populated <code>CredentialRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CredentialRepresentation();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Number');
            }
            if (data.hasOwnProperty('credentialData')) {
                obj['credentialData'] = ApiClient.convertToType(data['credentialData'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('secretData')) {
                obj['secretData'] = ApiClient.convertToType(data['secretData'], 'String');
            }
            if (data.hasOwnProperty('temporary')) {
                obj['temporary'] = ApiClient.convertToType(data['temporary'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userLabel')) {
                obj['userLabel'] = ApiClient.convertToType(data['userLabel'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CredentialRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CredentialRepresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['credentialData'] && !(typeof data['credentialData'] === 'string' || data['credentialData'] instanceof String)) {
            throw new Error("Expected the field `credentialData` to be a primitive type in the JSON string but got " + data['credentialData']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['secretData'] && !(typeof data['secretData'] === 'string' || data['secretData'] instanceof String)) {
            throw new Error("Expected the field `secretData` to be a primitive type in the JSON string but got " + data['secretData']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userLabel'] && !(typeof data['userLabel'] === 'string' || data['userLabel'] instanceof String)) {
            throw new Error("Expected the field `userLabel` to be a primitive type in the JSON string but got " + data['userLabel']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {Number} createdDate
 */
CredentialRepresentation.prototype['createdDate'] = undefined;

/**
 * @member {String} credentialData
 */
CredentialRepresentation.prototype['credentialData'] = undefined;

/**
 * @member {String} id
 */
CredentialRepresentation.prototype['id'] = undefined;

/**
 * @member {Number} priority
 */
CredentialRepresentation.prototype['priority'] = undefined;

/**
 * @member {String} secretData
 */
CredentialRepresentation.prototype['secretData'] = undefined;

/**
 * @member {Boolean} temporary
 */
CredentialRepresentation.prototype['temporary'] = undefined;

/**
 * @member {String} type
 */
CredentialRepresentation.prototype['type'] = undefined;

/**
 * @member {String} userLabel
 */
CredentialRepresentation.prototype['userLabel'] = undefined;

/**
 * @member {String} value
 */
CredentialRepresentation.prototype['value'] = undefined;






export default CredentialRepresentation;

