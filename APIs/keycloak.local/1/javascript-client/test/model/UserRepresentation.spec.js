/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KeycloakAdminRestApi);
  }
}(this, function(expect, KeycloakAdminRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KeycloakAdminRestApi.UserRepresentation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserRepresentation', function() {
    it('should create an instance of UserRepresentation', function() {
      // uncomment below and update the code to test UserRepresentation
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be.a(KeycloakAdminRestApi.UserRepresentation);
    });

    it('should have the property access (base name: "access")', function() {
      // uncomment below and update the code to test the property access
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property clientConsents (base name: "clientConsents")', function() {
      // uncomment below and update the code to test the property clientConsents
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property clientRoles (base name: "clientRoles")', function() {
      // uncomment below and update the code to test the property clientRoles
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property createdTimestamp (base name: "createdTimestamp")', function() {
      // uncomment below and update the code to test the property createdTimestamp
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property credentials (base name: "credentials")', function() {
      // uncomment below and update the code to test the property credentials
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property disableableCredentialTypes (base name: "disableableCredentialTypes")', function() {
      // uncomment below and update the code to test the property disableableCredentialTypes
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property emailVerified (base name: "emailVerified")', function() {
      // uncomment below and update the code to test the property emailVerified
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property federatedIdentities (base name: "federatedIdentities")', function() {
      // uncomment below and update the code to test the property federatedIdentities
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property federationLink (base name: "federationLink")', function() {
      // uncomment below and update the code to test the property federationLink
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "firstName")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "lastName")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property notBefore (base name: "notBefore")', function() {
      // uncomment below and update the code to test the property notBefore
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property origin (base name: "origin")', function() {
      // uncomment below and update the code to test the property origin
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property realmRoles (base name: "realmRoles")', function() {
      // uncomment below and update the code to test the property realmRoles
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property requiredActions (base name: "requiredActions")', function() {
      // uncomment below and update the code to test the property requiredActions
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property self (base name: "self")', function() {
      // uncomment below and update the code to test the property self
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccountClientId (base name: "serviceAccountClientId")', function() {
      // uncomment below and update the code to test the property serviceAccountClientId
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new KeycloakAdminRestApi.UserRepresentation();
      //expect(instance).to.be();
    });

  });

}));
