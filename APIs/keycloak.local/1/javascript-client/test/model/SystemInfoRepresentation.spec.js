/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KeycloakAdminRestApi);
  }
}(this, function(expect, KeycloakAdminRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SystemInfoRepresentation', function() {
    it('should create an instance of SystemInfoRepresentation', function() {
      // uncomment below and update the code to test SystemInfoRepresentation
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be.a(KeycloakAdminRestApi.SystemInfoRepresentation);
    });

    it('should have the property fileEncoding (base name: "fileEncoding")', function() {
      // uncomment below and update the code to test the property fileEncoding
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property javaHome (base name: "javaHome")', function() {
      // uncomment below and update the code to test the property javaHome
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property javaRuntime (base name: "javaRuntime")', function() {
      // uncomment below and update the code to test the property javaRuntime
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property javaVendor (base name: "javaVendor")', function() {
      // uncomment below and update the code to test the property javaVendor
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property javaVersion (base name: "javaVersion")', function() {
      // uncomment below and update the code to test the property javaVersion
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property javaVm (base name: "javaVm")', function() {
      // uncomment below and update the code to test the property javaVm
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property javaVmVersion (base name: "javaVmVersion")', function() {
      // uncomment below and update the code to test the property javaVmVersion
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property osArchitecture (base name: "osArchitecture")', function() {
      // uncomment below and update the code to test the property osArchitecture
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property osName (base name: "osName")', function() {
      // uncomment below and update the code to test the property osName
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property osVersion (base name: "osVersion")', function() {
      // uncomment below and update the code to test the property osVersion
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property serverTime (base name: "serverTime")', function() {
      // uncomment below and update the code to test the property serverTime
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property uptime (base name: "uptime")', function() {
      // uncomment below and update the code to test the property uptime
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property uptimeMillis (base name: "uptimeMillis")', function() {
      // uncomment below and update the code to test the property uptimeMillis
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property userDir (base name: "userDir")', function() {
      // uncomment below and update the code to test the property userDir
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property userLocale (base name: "userLocale")', function() {
      // uncomment below and update the code to test the property userLocale
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property userName (base name: "userName")', function() {
      // uncomment below and update the code to test the property userName
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property userTimezone (base name: "userTimezone")', function() {
      // uncomment below and update the code to test the property userTimezone
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new KeycloakAdminRestApi.SystemInfoRepresentation();
      //expect(instance).to.be();
    });

  });

}));
