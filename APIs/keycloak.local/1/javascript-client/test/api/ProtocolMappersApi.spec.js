/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KeycloakAdminRestApi);
  }
}(this, function(expect, KeycloakAdminRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KeycloakAdminRestApi.ProtocolMappersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProtocolMappersApi', function() {
    describe('realmClientScopesId1ProtocolMappersModelsId2Delete', function() {
      it('should call realmClientScopesId1ProtocolMappersModelsId2Delete successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesId1ProtocolMappersModelsId2Delete
        //instance.realmClientScopesId1ProtocolMappersModelsId2Delete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesId1ProtocolMappersModelsId2Get', function() {
      it('should call realmClientScopesId1ProtocolMappersModelsId2Get successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesId1ProtocolMappersModelsId2Get
        //instance.realmClientScopesId1ProtocolMappersModelsId2Get(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesId1ProtocolMappersModelsId2Put', function() {
      it('should call realmClientScopesId1ProtocolMappersModelsId2Put successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesId1ProtocolMappersModelsId2Put
        //instance.realmClientScopesId1ProtocolMappersModelsId2Put(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdProtocolMappersAddModelsPost', function() {
      it('should call realmClientScopesIdProtocolMappersAddModelsPost successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdProtocolMappersAddModelsPost
        //instance.realmClientScopesIdProtocolMappersAddModelsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdProtocolMappersModelsGet', function() {
      it('should call realmClientScopesIdProtocolMappersModelsGet successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdProtocolMappersModelsGet
        //instance.realmClientScopesIdProtocolMappersModelsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdProtocolMappersModelsPost', function() {
      it('should call realmClientScopesIdProtocolMappersModelsPost successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdProtocolMappersModelsPost
        //instance.realmClientScopesIdProtocolMappersModelsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdProtocolMappersProtocolProtocolGet', function() {
      it('should call realmClientScopesIdProtocolMappersProtocolProtocolGet successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdProtocolMappersProtocolProtocolGet
        //instance.realmClientScopesIdProtocolMappersProtocolProtocolGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsId1ProtocolMappersModelsId2Delete', function() {
      it('should call realmClientsId1ProtocolMappersModelsId2Delete successfully', function(done) {
        //uncomment below and update the code to test realmClientsId1ProtocolMappersModelsId2Delete
        //instance.realmClientsId1ProtocolMappersModelsId2Delete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsId1ProtocolMappersModelsId2Get', function() {
      it('should call realmClientsId1ProtocolMappersModelsId2Get successfully', function(done) {
        //uncomment below and update the code to test realmClientsId1ProtocolMappersModelsId2Get
        //instance.realmClientsId1ProtocolMappersModelsId2Get(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsId1ProtocolMappersModelsId2Put', function() {
      it('should call realmClientsId1ProtocolMappersModelsId2Put successfully', function(done) {
        //uncomment below and update the code to test realmClientsId1ProtocolMappersModelsId2Put
        //instance.realmClientsId1ProtocolMappersModelsId2Put(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdProtocolMappersAddModelsPost', function() {
      it('should call realmClientsIdProtocolMappersAddModelsPost successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdProtocolMappersAddModelsPost
        //instance.realmClientsIdProtocolMappersAddModelsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdProtocolMappersModelsGet', function() {
      it('should call realmClientsIdProtocolMappersModelsGet successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdProtocolMappersModelsGet
        //instance.realmClientsIdProtocolMappersModelsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdProtocolMappersModelsPost', function() {
      it('should call realmClientsIdProtocolMappersModelsPost successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdProtocolMappersModelsPost
        //instance.realmClientsIdProtocolMappersModelsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdProtocolMappersProtocolProtocolGet', function() {
      it('should call realmClientsIdProtocolMappersProtocolProtocolGet successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdProtocolMappersProtocolProtocolGet
        //instance.realmClientsIdProtocolMappersProtocolProtocolGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
