/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KeycloakAdminRestApi);
  }
}(this, function(expect, KeycloakAdminRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KeycloakAdminRestApi.RealmsAdminApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RealmsAdminApi', function() {
    describe('realmAdminEventsDelete', function() {
      it('should call realmAdminEventsDelete successfully', function(done) {
        //uncomment below and update the code to test realmAdminEventsDelete
        //instance.realmAdminEventsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmAdminEventsGet', function() {
      it('should call realmAdminEventsGet successfully', function(done) {
        //uncomment below and update the code to test realmAdminEventsGet
        //instance.realmAdminEventsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClearKeysCachePost', function() {
      it('should call realmClearKeysCachePost successfully', function(done) {
        //uncomment below and update the code to test realmClearKeysCachePost
        //instance.realmClearKeysCachePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClearRealmCachePost', function() {
      it('should call realmClearRealmCachePost successfully', function(done) {
        //uncomment below and update the code to test realmClearRealmCachePost
        //instance.realmClearRealmCachePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClearUserCachePost', function() {
      it('should call realmClearUserCachePost successfully', function(done) {
        //uncomment below and update the code to test realmClearUserCachePost
        //instance.realmClearUserCachePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientDescriptionConverterPost', function() {
      it('should call realmClientDescriptionConverterPost successfully', function(done) {
        //uncomment below and update the code to test realmClientDescriptionConverterPost
        //instance.realmClientDescriptionConverterPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientSessionStatsGet', function() {
      it('should call realmClientSessionStatsGet successfully', function(done) {
        //uncomment below and update the code to test realmClientSessionStatsGet
        //instance.realmClientSessionStatsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmCredentialRegistratorsGet', function() {
      it('should call realmCredentialRegistratorsGet successfully', function(done) {
        //uncomment below and update the code to test realmCredentialRegistratorsGet
        //instance.realmCredentialRegistratorsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDefaultDefaultClientScopesClientScopeIdDelete', function() {
      it('should call realmDefaultDefaultClientScopesClientScopeIdDelete successfully', function(done) {
        //uncomment below and update the code to test realmDefaultDefaultClientScopesClientScopeIdDelete
        //instance.realmDefaultDefaultClientScopesClientScopeIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDefaultDefaultClientScopesClientScopeIdPut', function() {
      it('should call realmDefaultDefaultClientScopesClientScopeIdPut successfully', function(done) {
        //uncomment below and update the code to test realmDefaultDefaultClientScopesClientScopeIdPut
        //instance.realmDefaultDefaultClientScopesClientScopeIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDefaultDefaultClientScopesGet', function() {
      it('should call realmDefaultDefaultClientScopesGet successfully', function(done) {
        //uncomment below and update the code to test realmDefaultDefaultClientScopesGet
        //instance.realmDefaultDefaultClientScopesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDefaultGroupsGet', function() {
      it('should call realmDefaultGroupsGet successfully', function(done) {
        //uncomment below and update the code to test realmDefaultGroupsGet
        //instance.realmDefaultGroupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDefaultGroupsGroupIdDelete', function() {
      it('should call realmDefaultGroupsGroupIdDelete successfully', function(done) {
        //uncomment below and update the code to test realmDefaultGroupsGroupIdDelete
        //instance.realmDefaultGroupsGroupIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDefaultGroupsGroupIdPut', function() {
      it('should call realmDefaultGroupsGroupIdPut successfully', function(done) {
        //uncomment below and update the code to test realmDefaultGroupsGroupIdPut
        //instance.realmDefaultGroupsGroupIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDefaultOptionalClientScopesClientScopeIdDelete', function() {
      it('should call realmDefaultOptionalClientScopesClientScopeIdDelete successfully', function(done) {
        //uncomment below and update the code to test realmDefaultOptionalClientScopesClientScopeIdDelete
        //instance.realmDefaultOptionalClientScopesClientScopeIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDefaultOptionalClientScopesClientScopeIdPut', function() {
      it('should call realmDefaultOptionalClientScopesClientScopeIdPut successfully', function(done) {
        //uncomment below and update the code to test realmDefaultOptionalClientScopesClientScopeIdPut
        //instance.realmDefaultOptionalClientScopesClientScopeIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDefaultOptionalClientScopesGet', function() {
      it('should call realmDefaultOptionalClientScopesGet successfully', function(done) {
        //uncomment below and update the code to test realmDefaultOptionalClientScopesGet
        //instance.realmDefaultOptionalClientScopesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmDelete', function() {
      it('should call realmDelete successfully', function(done) {
        //uncomment below and update the code to test realmDelete
        //instance.realmDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmEventsConfigGet', function() {
      it('should call realmEventsConfigGet successfully', function(done) {
        //uncomment below and update the code to test realmEventsConfigGet
        //instance.realmEventsConfigGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmEventsConfigPut', function() {
      it('should call realmEventsConfigPut successfully', function(done) {
        //uncomment below and update the code to test realmEventsConfigPut
        //instance.realmEventsConfigPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmEventsDelete', function() {
      it('should call realmEventsDelete successfully', function(done) {
        //uncomment below and update the code to test realmEventsDelete
        //instance.realmEventsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmEventsGet', function() {
      it('should call realmEventsGet successfully', function(done) {
        //uncomment below and update the code to test realmEventsGet
        //instance.realmEventsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmGet', function() {
      it('should call realmGet successfully', function(done) {
        //uncomment below and update the code to test realmGet
        //instance.realmGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmGroupByPathPathGet', function() {
      it('should call realmGroupByPathPathGet successfully', function(done) {
        //uncomment below and update the code to test realmGroupByPathPathGet
        //instance.realmGroupByPathPathGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmLogoutAllPost', function() {
      it('should call realmLogoutAllPost successfully', function(done) {
        //uncomment below and update the code to test realmLogoutAllPost
        //instance.realmLogoutAllPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmPartialExportPost', function() {
      it('should call realmPartialExportPost successfully', function(done) {
        //uncomment below and update the code to test realmPartialExportPost
        //instance.realmPartialExportPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmPartialImportPost', function() {
      it('should call realmPartialImportPost successfully', function(done) {
        //uncomment below and update the code to test realmPartialImportPost
        //instance.realmPartialImportPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmPushRevocationPost', function() {
      it('should call realmPushRevocationPost successfully', function(done) {
        //uncomment below and update the code to test realmPushRevocationPost
        //instance.realmPushRevocationPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmPut', function() {
      it('should call realmPut successfully', function(done) {
        //uncomment below and update the code to test realmPut
        //instance.realmPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmSessionsSessionDelete', function() {
      it('should call realmSessionsSessionDelete successfully', function(done) {
        //uncomment below and update the code to test realmSessionsSessionDelete
        //instance.realmSessionsSessionDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmTestLDAPConnectionPost', function() {
      it('should call realmTestLDAPConnectionPost successfully', function(done) {
        //uncomment below and update the code to test realmTestLDAPConnectionPost
        //instance.realmTestLDAPConnectionPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmTestSMTPConnectionPost', function() {
      it('should call realmTestSMTPConnectionPost successfully', function(done) {
        //uncomment below and update the code to test realmTestSMTPConnectionPost
        //instance.realmTestSMTPConnectionPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmUsersManagementPermissionsGet', function() {
      it('should call realmUsersManagementPermissionsGet successfully', function(done) {
        //uncomment below and update the code to test realmUsersManagementPermissionsGet
        //instance.realmUsersManagementPermissionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmUsersManagementPermissionsPut', function() {
      it('should call realmUsersManagementPermissionsPut successfully', function(done) {
        //uncomment below and update the code to test realmUsersManagementPermissionsPut
        //instance.realmUsersManagementPermissionsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rootPost', function() {
      it('should call rootPost successfully', function(done) {
        //uncomment below and update the code to test rootPost
        //instance.rootPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
