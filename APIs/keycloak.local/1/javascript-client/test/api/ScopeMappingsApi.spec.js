/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KeycloakAdminRestApi);
  }
}(this, function(expect, KeycloakAdminRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KeycloakAdminRestApi.ScopeMappingsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ScopeMappingsApi', function() {
    describe('realmClientScopesIdScopeMappingsClientsClientAvailableGet', function() {
      it('should call realmClientScopesIdScopeMappingsClientsClientAvailableGet successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsClientsClientAvailableGet
        //instance.realmClientScopesIdScopeMappingsClientsClientAvailableGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsClientsClientCompositeGet', function() {
      it('should call realmClientScopesIdScopeMappingsClientsClientCompositeGet successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsClientsClientCompositeGet
        //instance.realmClientScopesIdScopeMappingsClientsClientCompositeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsClientsClientDelete', function() {
      it('should call realmClientScopesIdScopeMappingsClientsClientDelete successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsClientsClientDelete
        //instance.realmClientScopesIdScopeMappingsClientsClientDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsClientsClientGet', function() {
      it('should call realmClientScopesIdScopeMappingsClientsClientGet successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsClientsClientGet
        //instance.realmClientScopesIdScopeMappingsClientsClientGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsClientsClientPost', function() {
      it('should call realmClientScopesIdScopeMappingsClientsClientPost successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsClientsClientPost
        //instance.realmClientScopesIdScopeMappingsClientsClientPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsGet', function() {
      it('should call realmClientScopesIdScopeMappingsGet successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsGet
        //instance.realmClientScopesIdScopeMappingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsRealmAvailableGet', function() {
      it('should call realmClientScopesIdScopeMappingsRealmAvailableGet successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsRealmAvailableGet
        //instance.realmClientScopesIdScopeMappingsRealmAvailableGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsRealmCompositeGet', function() {
      it('should call realmClientScopesIdScopeMappingsRealmCompositeGet successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsRealmCompositeGet
        //instance.realmClientScopesIdScopeMappingsRealmCompositeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsRealmDelete', function() {
      it('should call realmClientScopesIdScopeMappingsRealmDelete successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsRealmDelete
        //instance.realmClientScopesIdScopeMappingsRealmDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsRealmGet', function() {
      it('should call realmClientScopesIdScopeMappingsRealmGet successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsRealmGet
        //instance.realmClientScopesIdScopeMappingsRealmGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientScopesIdScopeMappingsRealmPost', function() {
      it('should call realmClientScopesIdScopeMappingsRealmPost successfully', function(done) {
        //uncomment below and update the code to test realmClientScopesIdScopeMappingsRealmPost
        //instance.realmClientScopesIdScopeMappingsRealmPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsClientsClientAvailableGet', function() {
      it('should call realmClientsIdScopeMappingsClientsClientAvailableGet successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsClientsClientAvailableGet
        //instance.realmClientsIdScopeMappingsClientsClientAvailableGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsClientsClientCompositeGet', function() {
      it('should call realmClientsIdScopeMappingsClientsClientCompositeGet successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsClientsClientCompositeGet
        //instance.realmClientsIdScopeMappingsClientsClientCompositeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsClientsClientDelete', function() {
      it('should call realmClientsIdScopeMappingsClientsClientDelete successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsClientsClientDelete
        //instance.realmClientsIdScopeMappingsClientsClientDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsClientsClientGet', function() {
      it('should call realmClientsIdScopeMappingsClientsClientGet successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsClientsClientGet
        //instance.realmClientsIdScopeMappingsClientsClientGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsClientsClientPost', function() {
      it('should call realmClientsIdScopeMappingsClientsClientPost successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsClientsClientPost
        //instance.realmClientsIdScopeMappingsClientsClientPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsGet', function() {
      it('should call realmClientsIdScopeMappingsGet successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsGet
        //instance.realmClientsIdScopeMappingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsRealmAvailableGet', function() {
      it('should call realmClientsIdScopeMappingsRealmAvailableGet successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsRealmAvailableGet
        //instance.realmClientsIdScopeMappingsRealmAvailableGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsRealmCompositeGet', function() {
      it('should call realmClientsIdScopeMappingsRealmCompositeGet successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsRealmCompositeGet
        //instance.realmClientsIdScopeMappingsRealmCompositeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsRealmDelete', function() {
      it('should call realmClientsIdScopeMappingsRealmDelete successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsRealmDelete
        //instance.realmClientsIdScopeMappingsRealmDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsRealmGet', function() {
      it('should call realmClientsIdScopeMappingsRealmGet successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsRealmGet
        //instance.realmClientsIdScopeMappingsRealmGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('realmClientsIdScopeMappingsRealmPost', function() {
      it('should call realmClientsIdScopeMappingsRealmPost successfully', function(done) {
        //uncomment below and update the code to test realmClientsIdScopeMappingsRealmPost
        //instance.realmClientsIdScopeMappingsRealmPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
