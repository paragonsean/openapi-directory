/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationFlowRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationFlowRepresentation::OAIAuthenticationFlowRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationFlowRepresentation::OAIAuthenticationFlowRepresentation() {
    this->initializeModel();
}

OAIAuthenticationFlowRepresentation::~OAIAuthenticationFlowRepresentation() {}

void OAIAuthenticationFlowRepresentation::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_authentication_executions_isSet = false;
    m_authentication_executions_isValid = false;

    m_built_in_isSet = false;
    m_built_in_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_top_level_isSet = false;
    m_top_level_isValid = false;
}

void OAIAuthenticationFlowRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationFlowRepresentation::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_authentication_executions_isValid = ::OpenAPI::fromJsonValue(m_authentication_executions, json[QString("authenticationExecutions")]);
    m_authentication_executions_isSet = !json[QString("authenticationExecutions")].isNull() && m_authentication_executions_isValid;

    m_built_in_isValid = ::OpenAPI::fromJsonValue(m_built_in, json[QString("builtIn")]);
    m_built_in_isSet = !json[QString("builtIn")].isNull() && m_built_in_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_top_level_isValid = ::OpenAPI::fromJsonValue(m_top_level, json[QString("topLevel")]);
    m_top_level_isSet = !json[QString("topLevel")].isNull() && m_top_level_isValid;
}

QString OAIAuthenticationFlowRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationFlowRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_authentication_executions.size() > 0) {
        obj.insert(QString("authenticationExecutions"), ::OpenAPI::toJsonValue(m_authentication_executions));
    }
    if (m_built_in_isSet) {
        obj.insert(QString("builtIn"), ::OpenAPI::toJsonValue(m_built_in));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_top_level_isSet) {
        obj.insert(QString("topLevel"), ::OpenAPI::toJsonValue(m_top_level));
    }
    return obj;
}

QString OAIAuthenticationFlowRepresentation::getAlias() const {
    return m_alias;
}
void OAIAuthenticationFlowRepresentation::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIAuthenticationFlowRepresentation::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIAuthenticationFlowRepresentation::is_alias_Valid() const{
    return m_alias_isValid;
}

QList<OAIAuthenticationExecutionExportRepresentation> OAIAuthenticationFlowRepresentation::getAuthenticationExecutions() const {
    return m_authentication_executions;
}
void OAIAuthenticationFlowRepresentation::setAuthenticationExecutions(const QList<OAIAuthenticationExecutionExportRepresentation> &authentication_executions) {
    m_authentication_executions = authentication_executions;
    m_authentication_executions_isSet = true;
}

bool OAIAuthenticationFlowRepresentation::is_authentication_executions_Set() const{
    return m_authentication_executions_isSet;
}

bool OAIAuthenticationFlowRepresentation::is_authentication_executions_Valid() const{
    return m_authentication_executions_isValid;
}

bool OAIAuthenticationFlowRepresentation::isBuiltIn() const {
    return m_built_in;
}
void OAIAuthenticationFlowRepresentation::setBuiltIn(const bool &built_in) {
    m_built_in = built_in;
    m_built_in_isSet = true;
}

bool OAIAuthenticationFlowRepresentation::is_built_in_Set() const{
    return m_built_in_isSet;
}

bool OAIAuthenticationFlowRepresentation::is_built_in_Valid() const{
    return m_built_in_isValid;
}

QString OAIAuthenticationFlowRepresentation::getDescription() const {
    return m_description;
}
void OAIAuthenticationFlowRepresentation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAuthenticationFlowRepresentation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAuthenticationFlowRepresentation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAuthenticationFlowRepresentation::getId() const {
    return m_id;
}
void OAIAuthenticationFlowRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthenticationFlowRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthenticationFlowRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAuthenticationFlowRepresentation::getProviderId() const {
    return m_provider_id;
}
void OAIAuthenticationFlowRepresentation::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIAuthenticationFlowRepresentation::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIAuthenticationFlowRepresentation::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

bool OAIAuthenticationFlowRepresentation::isTopLevel() const {
    return m_top_level;
}
void OAIAuthenticationFlowRepresentation::setTopLevel(const bool &top_level) {
    m_top_level = top_level;
    m_top_level_isSet = true;
}

bool OAIAuthenticationFlowRepresentation::is_top_level_Set() const{
    return m_top_level_isSet;
}

bool OAIAuthenticationFlowRepresentation::is_top_level_Valid() const{
    return m_top_level_isValid;
}

bool OAIAuthenticationFlowRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_executions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_built_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationFlowRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
