/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICredentialRepresentation.h"
#include "OAIFederatedIdentityRepresentation.h"
#include "OAIGroupRepresentation.h"
#include "OAIUserRepresentation.h"
#include "OAIUserSessionRepresentation.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  email QString [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void realmUsersCountGet(const QString &realm, const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  brief_representation bool [optional]
    * @param[in]  email QString [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  search QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void realmUsersGet(const QString &realm, const ::OpenAPI::OptionalParam<bool> &brief_representation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdConfiguredUserStorageCredentialTypesGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmUsersIdConsentsClientDelete(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdConsentsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  credential_id QString [required]
    */
    virtual void realmUsersIdCredentialsCredentialIdDelete(const QString &realm, const QString &id, const QString &credential_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  credential_id QString [required]
    * @param[in]  new_previous_credential_id QString [required]
    */
    virtual void realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(const QString &realm, const QString &id, const QString &credential_id, const QString &new_previous_credential_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  credential_id QString [required]
    */
    virtual void realmUsersIdCredentialsCredentialIdMoveToFirstPost(const QString &realm, const QString &id, const QString &credential_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  credential_id QString [required]
    * @param[in]  body QString [required]
    */
    virtual void realmUsersIdCredentialsCredentialIdUserLabelPut(const QString &realm, const QString &id, const QString &credential_id, const QString &body);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdCredentialsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdDelete(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  request_body QList<QString> [required]
    */
    virtual void realmUsersIdDisableCredentialTypesPut(const QString &realm, const QString &id, const QList<QString> &request_body);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  request_body QList<QString> [required]
    * @param[in]  client_id QString [optional]
    * @param[in]  lifespan qint32 [optional]
    * @param[in]  redirect_uri QString [optional]
    */
    virtual void realmUsersIdExecuteActionsEmailPut(const QString &realm, const QString &id, const QList<QString> &request_body, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &lifespan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &redirect_uri = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdFederatedIdentityGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  provider QString [required]
    */
    virtual void realmUsersIdFederatedIdentityProviderDelete(const QString &realm, const QString &id, const QString &provider);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  provider QString [required]
    * @param[in]  oai_federated_identity_representation OAIFederatedIdentityRepresentation [required]
    */
    virtual void realmUsersIdFederatedIdentityProviderPost(const QString &realm, const QString &id, const QString &provider, const OAIFederatedIdentityRepresentation &oai_federated_identity_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  search QString [optional]
    */
    virtual void realmUsersIdGroupsCountGet(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  brief_representation bool [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  search QString [optional]
    */
    virtual void realmUsersIdGroupsGet(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<bool> &brief_representation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void realmUsersIdGroupsGroupIdDelete(const QString &realm, const QString &id, const QString &group_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void realmUsersIdGroupsGroupIdPut(const QString &realm, const QString &id, const QString &group_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdImpersonationPost(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdLogoutPost(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void realmUsersIdOfflineSessionsClientIdGet(const QString &realm, const QString &id, const QString &client_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_user_representation OAIUserRepresentation [required]
    */
    virtual void realmUsersIdPut(const QString &realm, const QString &id, const OAIUserRepresentation &oai_user_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_credential_representation OAICredentialRepresentation [required]
    */
    virtual void realmUsersIdResetPasswordPut(const QString &realm, const QString &id, const OAICredentialRepresentation &oai_credential_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client_id QString [optional]
    * @param[in]  redirect_uri QString [optional]
    */
    virtual void realmUsersIdSendVerifyEmailPut(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &redirect_uri = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdSessionsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_user_representation OAIUserRepresentation [required]
    */
    virtual void realmUsersPost(const QString &realm, const OAIUserRepresentation &oai_user_representation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmUsersCountGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdConfiguredUserStorageCredentialTypesGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdConsentsClientDeleteCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdConsentsGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdCredentialsCredentialIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdCredentialsCredentialIdMoveToFirstPostCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdCredentialsCredentialIdUserLabelPutCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdCredentialsGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdDisableCredentialTypesPutCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdExecuteActionsEmailPutCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdFederatedIdentityGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdFederatedIdentityProviderDeleteCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdFederatedIdentityProviderPostCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdGroupsCountGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdGroupsGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdGroupsGroupIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdGroupsGroupIdPutCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdImpersonationPostCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdLogoutPostCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdOfflineSessionsClientIdGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdPutCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdResetPasswordPutCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdSendVerifyEmailPutCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdSessionsGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmUsersCountGetSignal(qint32 summary);
    void realmUsersGetSignal(QList<OAIUserRepresentation> summary);
    void realmUsersIdConfiguredUserStorageCredentialTypesGetSignal(QList<QString> summary);
    void realmUsersIdConsentsClientDeleteSignal();
    void realmUsersIdConsentsGetSignal(QList<QMap<QString, QJsonValue>> summary);
    void realmUsersIdCredentialsCredentialIdDeleteSignal();
    void realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostSignal();
    void realmUsersIdCredentialsCredentialIdMoveToFirstPostSignal();
    void realmUsersIdCredentialsCredentialIdUserLabelPutSignal();
    void realmUsersIdCredentialsGetSignal(QList<OAICredentialRepresentation> summary);
    void realmUsersIdDeleteSignal();
    void realmUsersIdDisableCredentialTypesPutSignal();
    void realmUsersIdExecuteActionsEmailPutSignal();
    void realmUsersIdFederatedIdentityGetSignal(QList<OAIFederatedIdentityRepresentation> summary);
    void realmUsersIdFederatedIdentityProviderDeleteSignal();
    void realmUsersIdFederatedIdentityProviderPostSignal();
    void realmUsersIdGetSignal(OAIUserRepresentation summary);
    void realmUsersIdGroupsCountGetSignal(QMap<QString, QJsonValue> summary);
    void realmUsersIdGroupsGetSignal(QList<OAIGroupRepresentation> summary);
    void realmUsersIdGroupsGroupIdDeleteSignal();
    void realmUsersIdGroupsGroupIdPutSignal();
    void realmUsersIdImpersonationPostSignal(QMap<QString, QJsonValue> summary);
    void realmUsersIdLogoutPostSignal();
    void realmUsersIdOfflineSessionsClientIdGetSignal(QList<OAIUserSessionRepresentation> summary);
    void realmUsersIdPutSignal();
    void realmUsersIdResetPasswordPutSignal();
    void realmUsersIdSendVerifyEmailPutSignal();
    void realmUsersIdSessionsGetSignal(QList<OAIUserSessionRepresentation> summary);
    void realmUsersPostSignal();


    void realmUsersCountGetSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void realmUsersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserRepresentation> summary);
    void realmUsersIdConfiguredUserStorageCredentialTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void realmUsersIdConsentsClientDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdConsentsGetSignalFull(OAIHttpRequestWorker *worker, QList<QMap<QString, QJsonValue>> summary);
    void realmUsersIdCredentialsCredentialIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdCredentialsCredentialIdMoveToFirstPostSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdCredentialsCredentialIdUserLabelPutSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdCredentialsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICredentialRepresentation> summary);
    void realmUsersIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdDisableCredentialTypesPutSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdExecuteActionsEmailPutSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdFederatedIdentityGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFederatedIdentityRepresentation> summary);
    void realmUsersIdFederatedIdentityProviderDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdFederatedIdentityProviderPostSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdGetSignalFull(OAIHttpRequestWorker *worker, OAIUserRepresentation summary);
    void realmUsersIdGroupsCountGetSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void realmUsersIdGroupsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupRepresentation> summary);
    void realmUsersIdGroupsGroupIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdGroupsGroupIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdImpersonationPostSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void realmUsersIdLogoutPostSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdOfflineSessionsClientIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserSessionRepresentation> summary);
    void realmUsersIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdResetPasswordPutSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdSendVerifyEmailPutSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdSessionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserSessionRepresentation> summary);
    void realmUsersPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmUsersCountGetSignalError() instead")
    void realmUsersCountGetSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersCountGetSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersGetSignalError() instead")
    void realmUsersGetSignalE(QList<OAIUserRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersGetSignalError(QList<OAIUserRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdConfiguredUserStorageCredentialTypesGetSignalError() instead")
    void realmUsersIdConfiguredUserStorageCredentialTypesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdConfiguredUserStorageCredentialTypesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdConsentsClientDeleteSignalError() instead")
    void realmUsersIdConsentsClientDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdConsentsClientDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdConsentsGetSignalError() instead")
    void realmUsersIdConsentsGetSignalE(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdConsentsGetSignalError(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsCredentialIdDeleteSignalError() instead")
    void realmUsersIdCredentialsCredentialIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsCredentialIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostSignalError() instead")
    void realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsCredentialIdMoveToFirstPostSignalError() instead")
    void realmUsersIdCredentialsCredentialIdMoveToFirstPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsCredentialIdMoveToFirstPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsCredentialIdUserLabelPutSignalError() instead")
    void realmUsersIdCredentialsCredentialIdUserLabelPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsCredentialIdUserLabelPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsGetSignalError() instead")
    void realmUsersIdCredentialsGetSignalE(QList<OAICredentialRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsGetSignalError(QList<OAICredentialRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdDeleteSignalError() instead")
    void realmUsersIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdDisableCredentialTypesPutSignalError() instead")
    void realmUsersIdDisableCredentialTypesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdDisableCredentialTypesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdExecuteActionsEmailPutSignalError() instead")
    void realmUsersIdExecuteActionsEmailPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdExecuteActionsEmailPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdFederatedIdentityGetSignalError() instead")
    void realmUsersIdFederatedIdentityGetSignalE(QList<OAIFederatedIdentityRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdFederatedIdentityGetSignalError(QList<OAIFederatedIdentityRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdFederatedIdentityProviderDeleteSignalError() instead")
    void realmUsersIdFederatedIdentityProviderDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdFederatedIdentityProviderDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdFederatedIdentityProviderPostSignalError() instead")
    void realmUsersIdFederatedIdentityProviderPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdFederatedIdentityProviderPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGetSignalError() instead")
    void realmUsersIdGetSignalE(OAIUserRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGetSignalError(OAIUserRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGroupsCountGetSignalError() instead")
    void realmUsersIdGroupsCountGetSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGroupsCountGetSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGroupsGetSignalError() instead")
    void realmUsersIdGroupsGetSignalE(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGroupsGetSignalError(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGroupsGroupIdDeleteSignalError() instead")
    void realmUsersIdGroupsGroupIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGroupsGroupIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGroupsGroupIdPutSignalError() instead")
    void realmUsersIdGroupsGroupIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGroupsGroupIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdImpersonationPostSignalError() instead")
    void realmUsersIdImpersonationPostSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdImpersonationPostSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdLogoutPostSignalError() instead")
    void realmUsersIdLogoutPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdLogoutPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdOfflineSessionsClientIdGetSignalError() instead")
    void realmUsersIdOfflineSessionsClientIdGetSignalE(QList<OAIUserSessionRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdOfflineSessionsClientIdGetSignalError(QList<OAIUserSessionRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdPutSignalError() instead")
    void realmUsersIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdResetPasswordPutSignalError() instead")
    void realmUsersIdResetPasswordPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdResetPasswordPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdSendVerifyEmailPutSignalError() instead")
    void realmUsersIdSendVerifyEmailPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdSendVerifyEmailPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdSessionsGetSignalError() instead")
    void realmUsersIdSessionsGetSignalE(QList<OAIUserSessionRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdSessionsGetSignalError(QList<OAIUserSessionRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersPostSignalError() instead")
    void realmUsersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmUsersCountGetSignalErrorFull() instead")
    void realmUsersCountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersCountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersGetSignalErrorFull() instead")
    void realmUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdConfiguredUserStorageCredentialTypesGetSignalErrorFull() instead")
    void realmUsersIdConfiguredUserStorageCredentialTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdConfiguredUserStorageCredentialTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdConsentsClientDeleteSignalErrorFull() instead")
    void realmUsersIdConsentsClientDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdConsentsClientDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdConsentsGetSignalErrorFull() instead")
    void realmUsersIdConsentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdConsentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsCredentialIdDeleteSignalErrorFull() instead")
    void realmUsersIdCredentialsCredentialIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsCredentialIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostSignalErrorFull() instead")
    void realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsCredentialIdMoveToFirstPostSignalErrorFull() instead")
    void realmUsersIdCredentialsCredentialIdMoveToFirstPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsCredentialIdMoveToFirstPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsCredentialIdUserLabelPutSignalErrorFull() instead")
    void realmUsersIdCredentialsCredentialIdUserLabelPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsCredentialIdUserLabelPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdCredentialsGetSignalErrorFull() instead")
    void realmUsersIdCredentialsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdCredentialsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdDeleteSignalErrorFull() instead")
    void realmUsersIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdDisableCredentialTypesPutSignalErrorFull() instead")
    void realmUsersIdDisableCredentialTypesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdDisableCredentialTypesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdExecuteActionsEmailPutSignalErrorFull() instead")
    void realmUsersIdExecuteActionsEmailPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdExecuteActionsEmailPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdFederatedIdentityGetSignalErrorFull() instead")
    void realmUsersIdFederatedIdentityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdFederatedIdentityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdFederatedIdentityProviderDeleteSignalErrorFull() instead")
    void realmUsersIdFederatedIdentityProviderDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdFederatedIdentityProviderDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdFederatedIdentityProviderPostSignalErrorFull() instead")
    void realmUsersIdFederatedIdentityProviderPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdFederatedIdentityProviderPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGetSignalErrorFull() instead")
    void realmUsersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGroupsCountGetSignalErrorFull() instead")
    void realmUsersIdGroupsCountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGroupsCountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGroupsGetSignalErrorFull() instead")
    void realmUsersIdGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGroupsGroupIdDeleteSignalErrorFull() instead")
    void realmUsersIdGroupsGroupIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGroupsGroupIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdGroupsGroupIdPutSignalErrorFull() instead")
    void realmUsersIdGroupsGroupIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdGroupsGroupIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdImpersonationPostSignalErrorFull() instead")
    void realmUsersIdImpersonationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdImpersonationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdLogoutPostSignalErrorFull() instead")
    void realmUsersIdLogoutPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdLogoutPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdOfflineSessionsClientIdGetSignalErrorFull() instead")
    void realmUsersIdOfflineSessionsClientIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdOfflineSessionsClientIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdPutSignalErrorFull() instead")
    void realmUsersIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdResetPasswordPutSignalErrorFull() instead")
    void realmUsersIdResetPasswordPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdResetPasswordPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdSendVerifyEmailPutSignalErrorFull() instead")
    void realmUsersIdSendVerifyEmailPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdSendVerifyEmailPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdSessionsGetSignalErrorFull() instead")
    void realmUsersIdSessionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdSessionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersPostSignalErrorFull() instead")
    void realmUsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
