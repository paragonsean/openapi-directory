/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSessionRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSessionRepresentation::OAIUserSessionRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSessionRepresentation::OAIUserSessionRepresentation() {
    this->initializeModel();
}

OAIUserSessionRepresentation::~OAIUserSessionRepresentation() {}

void OAIUserSessionRepresentation::initializeModel() {

    m_clients_isSet = false;
    m_clients_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_access_isSet = false;
    m_last_access_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUserSessionRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSessionRepresentation::fromJsonObject(QJsonObject json) {

    m_clients_isValid = ::OpenAPI::fromJsonValue(m_clients, json[QString("clients")]);
    m_clients_isSet = !json[QString("clients")].isNull() && m_clients_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_last_access_isValid = ::OpenAPI::fromJsonValue(m_last_access, json[QString("lastAccess")]);
    m_last_access_isSet = !json[QString("lastAccess")].isNull() && m_last_access_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUserSessionRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSessionRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_clients.size() > 0) {
        obj.insert(QString("clients"), ::OpenAPI::toJsonValue(m_clients));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_access_isSet) {
        obj.insert(QString("lastAccess"), ::OpenAPI::toJsonValue(m_last_access));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIUserSessionRepresentation::getClients() const {
    return m_clients;
}
void OAIUserSessionRepresentation::setClients(const QMap<QString, QJsonValue> &clients) {
    m_clients = clients;
    m_clients_isSet = true;
}

bool OAIUserSessionRepresentation::is_clients_Set() const{
    return m_clients_isSet;
}

bool OAIUserSessionRepresentation::is_clients_Valid() const{
    return m_clients_isValid;
}

QString OAIUserSessionRepresentation::getId() const {
    return m_id;
}
void OAIUserSessionRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserSessionRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserSessionRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserSessionRepresentation::getIpAddress() const {
    return m_ip_address;
}
void OAIUserSessionRepresentation::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIUserSessionRepresentation::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIUserSessionRepresentation::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

qint64 OAIUserSessionRepresentation::getLastAccess() const {
    return m_last_access;
}
void OAIUserSessionRepresentation::setLastAccess(const qint64 &last_access) {
    m_last_access = last_access;
    m_last_access_isSet = true;
}

bool OAIUserSessionRepresentation::is_last_access_Set() const{
    return m_last_access_isSet;
}

bool OAIUserSessionRepresentation::is_last_access_Valid() const{
    return m_last_access_isValid;
}

qint64 OAIUserSessionRepresentation::getStart() const {
    return m_start;
}
void OAIUserSessionRepresentation::setStart(const qint64 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIUserSessionRepresentation::is_start_Set() const{
    return m_start_isSet;
}

bool OAIUserSessionRepresentation::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIUserSessionRepresentation::getUserId() const {
    return m_user_id;
}
void OAIUserSessionRepresentation::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserSessionRepresentation::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserSessionRepresentation::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIUserSessionRepresentation::getUsername() const {
    return m_username;
}
void OAIUserSessionRepresentation::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserSessionRepresentation::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserSessionRepresentation::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUserSessionRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSessionRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
