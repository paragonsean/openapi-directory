/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentRepresentation::OAIComponentRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentRepresentation::OAIComponentRepresentation() {
    this->initializeModel();
}

OAIComponentRepresentation::~OAIComponentRepresentation() {}

void OAIComponentRepresentation::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_provider_type_isSet = false;
    m_provider_type_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;
}

void OAIComponentRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentRepresentation::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_provider_type_isValid = ::OpenAPI::fromJsonValue(m_provider_type, json[QString("providerType")]);
    m_provider_type_isSet = !json[QString("providerType")].isNull() && m_provider_type_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;
}

QString OAIComponentRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_provider_type_isSet) {
        obj.insert(QString("providerType"), ::OpenAPI::toJsonValue(m_provider_type));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    return obj;
}

OAIMultivaluedHashMap OAIComponentRepresentation::getConfig() const {
    return m_config;
}
void OAIComponentRepresentation::setConfig(const OAIMultivaluedHashMap &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIComponentRepresentation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIComponentRepresentation::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIComponentRepresentation::getId() const {
    return m_id;
}
void OAIComponentRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComponentRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComponentRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIComponentRepresentation::getName() const {
    return m_name;
}
void OAIComponentRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComponentRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComponentRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIComponentRepresentation::getParentId() const {
    return m_parent_id;
}
void OAIComponentRepresentation::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIComponentRepresentation::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIComponentRepresentation::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIComponentRepresentation::getProviderId() const {
    return m_provider_id;
}
void OAIComponentRepresentation::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIComponentRepresentation::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIComponentRepresentation::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIComponentRepresentation::getProviderType() const {
    return m_provider_type;
}
void OAIComponentRepresentation::setProviderType(const QString &provider_type) {
    m_provider_type = provider_type;
    m_provider_type_isSet = true;
}

bool OAIComponentRepresentation::is_provider_type_Set() const{
    return m_provider_type_isSet;
}

bool OAIComponentRepresentation::is_provider_type_Valid() const{
    return m_provider_type_isValid;
}

QString OAIComponentRepresentation::getSubType() const {
    return m_sub_type;
}
void OAIComponentRepresentation::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAIComponentRepresentation::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAIComponentRepresentation::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

bool OAIComponentRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
