/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientAttributeCertificateApi_H
#define OAI_OAIClientAttributeCertificateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificateRepresentation.h"
#include "OAIKeyStoreConfig.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientAttributeCertificateApi : public QObject {
    Q_OBJECT

public:
    OAIClientAttributeCertificateApi(const int timeOut = 0);
    ~OAIClientAttributeCertificateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  attr QString [required]
    * @param[in]  oai_key_store_config OAIKeyStoreConfig [required]
    */
    virtual void realmClientsIdCertificatesAttrDownloadPost(const QString &realm, const QString &id, const QString &attr, const OAIKeyStoreConfig &oai_key_store_config);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  attr QString [required]
    * @param[in]  oai_key_store_config OAIKeyStoreConfig [required]
    */
    virtual void realmClientsIdCertificatesAttrGenerateAndDownloadPost(const QString &realm, const QString &id, const QString &attr, const OAIKeyStoreConfig &oai_key_store_config);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  attr QString [required]
    */
    virtual void realmClientsIdCertificatesAttrGeneratePost(const QString &realm, const QString &id, const QString &attr);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  attr QString [required]
    */
    virtual void realmClientsIdCertificatesAttrGet(const QString &realm, const QString &id, const QString &attr);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  attr QString [required]
    */
    virtual void realmClientsIdCertificatesAttrUploadCertificatePost(const QString &realm, const QString &id, const QString &attr);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  attr QString [required]
    */
    virtual void realmClientsIdCertificatesAttrUploadPost(const QString &realm, const QString &id, const QString &attr);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmClientsIdCertificatesAttrDownloadPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdCertificatesAttrGenerateAndDownloadPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdCertificatesAttrGeneratePostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdCertificatesAttrGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdCertificatesAttrUploadCertificatePostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdCertificatesAttrUploadPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmClientsIdCertificatesAttrDownloadPostSignal(QByteArray summary);
    void realmClientsIdCertificatesAttrGenerateAndDownloadPostSignal(QByteArray summary);
    void realmClientsIdCertificatesAttrGeneratePostSignal(OAICertificateRepresentation summary);
    void realmClientsIdCertificatesAttrGetSignal(OAICertificateRepresentation summary);
    void realmClientsIdCertificatesAttrUploadCertificatePostSignal(OAICertificateRepresentation summary);
    void realmClientsIdCertificatesAttrUploadPostSignal(OAICertificateRepresentation summary);


    void realmClientsIdCertificatesAttrDownloadPostSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void realmClientsIdCertificatesAttrGenerateAndDownloadPostSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void realmClientsIdCertificatesAttrGeneratePostSignalFull(OAIHttpRequestWorker *worker, OAICertificateRepresentation summary);
    void realmClientsIdCertificatesAttrGetSignalFull(OAIHttpRequestWorker *worker, OAICertificateRepresentation summary);
    void realmClientsIdCertificatesAttrUploadCertificatePostSignalFull(OAIHttpRequestWorker *worker, OAICertificateRepresentation summary);
    void realmClientsIdCertificatesAttrUploadPostSignalFull(OAIHttpRequestWorker *worker, OAICertificateRepresentation summary);

    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrDownloadPostSignalError() instead")
    void realmClientsIdCertificatesAttrDownloadPostSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrDownloadPostSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrGenerateAndDownloadPostSignalError() instead")
    void realmClientsIdCertificatesAttrGenerateAndDownloadPostSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrGenerateAndDownloadPostSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrGeneratePostSignalError() instead")
    void realmClientsIdCertificatesAttrGeneratePostSignalE(OAICertificateRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrGeneratePostSignalError(OAICertificateRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrGetSignalError() instead")
    void realmClientsIdCertificatesAttrGetSignalE(OAICertificateRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrGetSignalError(OAICertificateRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrUploadCertificatePostSignalError() instead")
    void realmClientsIdCertificatesAttrUploadCertificatePostSignalE(OAICertificateRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrUploadCertificatePostSignalError(OAICertificateRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrUploadPostSignalError() instead")
    void realmClientsIdCertificatesAttrUploadPostSignalE(OAICertificateRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrUploadPostSignalError(OAICertificateRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrDownloadPostSignalErrorFull() instead")
    void realmClientsIdCertificatesAttrDownloadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrDownloadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrGenerateAndDownloadPostSignalErrorFull() instead")
    void realmClientsIdCertificatesAttrGenerateAndDownloadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrGenerateAndDownloadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrGeneratePostSignalErrorFull() instead")
    void realmClientsIdCertificatesAttrGeneratePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrGeneratePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrGetSignalErrorFull() instead")
    void realmClientsIdCertificatesAttrGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrUploadCertificatePostSignalErrorFull() instead")
    void realmClientsIdCertificatesAttrUploadCertificatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrUploadCertificatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdCertificatesAttrUploadPostSignalErrorFull() instead")
    void realmClientsIdCertificatesAttrUploadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdCertificatesAttrUploadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
