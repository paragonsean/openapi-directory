/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestLdapConnectionRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestLdapConnectionRepresentation::OAITestLdapConnectionRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestLdapConnectionRepresentation::OAITestLdapConnectionRepresentation() {
    this->initializeModel();
}

OAITestLdapConnectionRepresentation::~OAITestLdapConnectionRepresentation() {}

void OAITestLdapConnectionRepresentation::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_bind_credential_isSet = false;
    m_bind_credential_isValid = false;

    m_bind_dn_isSet = false;
    m_bind_dn_isValid = false;

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_connection_timeout_isSet = false;
    m_connection_timeout_isValid = false;

    m_connection_url_isSet = false;
    m_connection_url_isValid = false;

    m_start_tls_isSet = false;
    m_start_tls_isValid = false;

    m_use_truststore_spi_isSet = false;
    m_use_truststore_spi_isValid = false;
}

void OAITestLdapConnectionRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestLdapConnectionRepresentation::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_bind_credential_isValid = ::OpenAPI::fromJsonValue(m_bind_credential, json[QString("bindCredential")]);
    m_bind_credential_isSet = !json[QString("bindCredential")].isNull() && m_bind_credential_isValid;

    m_bind_dn_isValid = ::OpenAPI::fromJsonValue(m_bind_dn, json[QString("bindDn")]);
    m_bind_dn_isSet = !json[QString("bindDn")].isNull() && m_bind_dn_isValid;

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("componentId")]);
    m_component_id_isSet = !json[QString("componentId")].isNull() && m_component_id_isValid;

    m_connection_timeout_isValid = ::OpenAPI::fromJsonValue(m_connection_timeout, json[QString("connectionTimeout")]);
    m_connection_timeout_isSet = !json[QString("connectionTimeout")].isNull() && m_connection_timeout_isValid;

    m_connection_url_isValid = ::OpenAPI::fromJsonValue(m_connection_url, json[QString("connectionUrl")]);
    m_connection_url_isSet = !json[QString("connectionUrl")].isNull() && m_connection_url_isValid;

    m_start_tls_isValid = ::OpenAPI::fromJsonValue(m_start_tls, json[QString("startTls")]);
    m_start_tls_isSet = !json[QString("startTls")].isNull() && m_start_tls_isValid;

    m_use_truststore_spi_isValid = ::OpenAPI::fromJsonValue(m_use_truststore_spi, json[QString("useTruststoreSpi")]);
    m_use_truststore_spi_isSet = !json[QString("useTruststoreSpi")].isNull() && m_use_truststore_spi_isValid;
}

QString OAITestLdapConnectionRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestLdapConnectionRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_bind_credential_isSet) {
        obj.insert(QString("bindCredential"), ::OpenAPI::toJsonValue(m_bind_credential));
    }
    if (m_bind_dn_isSet) {
        obj.insert(QString("bindDn"), ::OpenAPI::toJsonValue(m_bind_dn));
    }
    if (m_component_id_isSet) {
        obj.insert(QString("componentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_connection_timeout_isSet) {
        obj.insert(QString("connectionTimeout"), ::OpenAPI::toJsonValue(m_connection_timeout));
    }
    if (m_connection_url_isSet) {
        obj.insert(QString("connectionUrl"), ::OpenAPI::toJsonValue(m_connection_url));
    }
    if (m_start_tls_isSet) {
        obj.insert(QString("startTls"), ::OpenAPI::toJsonValue(m_start_tls));
    }
    if (m_use_truststore_spi_isSet) {
        obj.insert(QString("useTruststoreSpi"), ::OpenAPI::toJsonValue(m_use_truststore_spi));
    }
    return obj;
}

QString OAITestLdapConnectionRepresentation::getAction() const {
    return m_action;
}
void OAITestLdapConnectionRepresentation::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAITestLdapConnectionRepresentation::is_action_Set() const{
    return m_action_isSet;
}

bool OAITestLdapConnectionRepresentation::is_action_Valid() const{
    return m_action_isValid;
}

QString OAITestLdapConnectionRepresentation::getBindCredential() const {
    return m_bind_credential;
}
void OAITestLdapConnectionRepresentation::setBindCredential(const QString &bind_credential) {
    m_bind_credential = bind_credential;
    m_bind_credential_isSet = true;
}

bool OAITestLdapConnectionRepresentation::is_bind_credential_Set() const{
    return m_bind_credential_isSet;
}

bool OAITestLdapConnectionRepresentation::is_bind_credential_Valid() const{
    return m_bind_credential_isValid;
}

QString OAITestLdapConnectionRepresentation::getBindDn() const {
    return m_bind_dn;
}
void OAITestLdapConnectionRepresentation::setBindDn(const QString &bind_dn) {
    m_bind_dn = bind_dn;
    m_bind_dn_isSet = true;
}

bool OAITestLdapConnectionRepresentation::is_bind_dn_Set() const{
    return m_bind_dn_isSet;
}

bool OAITestLdapConnectionRepresentation::is_bind_dn_Valid() const{
    return m_bind_dn_isValid;
}

QString OAITestLdapConnectionRepresentation::getComponentId() const {
    return m_component_id;
}
void OAITestLdapConnectionRepresentation::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAITestLdapConnectionRepresentation::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAITestLdapConnectionRepresentation::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QString OAITestLdapConnectionRepresentation::getConnectionTimeout() const {
    return m_connection_timeout;
}
void OAITestLdapConnectionRepresentation::setConnectionTimeout(const QString &connection_timeout) {
    m_connection_timeout = connection_timeout;
    m_connection_timeout_isSet = true;
}

bool OAITestLdapConnectionRepresentation::is_connection_timeout_Set() const{
    return m_connection_timeout_isSet;
}

bool OAITestLdapConnectionRepresentation::is_connection_timeout_Valid() const{
    return m_connection_timeout_isValid;
}

QString OAITestLdapConnectionRepresentation::getConnectionUrl() const {
    return m_connection_url;
}
void OAITestLdapConnectionRepresentation::setConnectionUrl(const QString &connection_url) {
    m_connection_url = connection_url;
    m_connection_url_isSet = true;
}

bool OAITestLdapConnectionRepresentation::is_connection_url_Set() const{
    return m_connection_url_isSet;
}

bool OAITestLdapConnectionRepresentation::is_connection_url_Valid() const{
    return m_connection_url_isValid;
}

QString OAITestLdapConnectionRepresentation::getStartTls() const {
    return m_start_tls;
}
void OAITestLdapConnectionRepresentation::setStartTls(const QString &start_tls) {
    m_start_tls = start_tls;
    m_start_tls_isSet = true;
}

bool OAITestLdapConnectionRepresentation::is_start_tls_Set() const{
    return m_start_tls_isSet;
}

bool OAITestLdapConnectionRepresentation::is_start_tls_Valid() const{
    return m_start_tls_isValid;
}

QString OAITestLdapConnectionRepresentation::getUseTruststoreSpi() const {
    return m_use_truststore_spi;
}
void OAITestLdapConnectionRepresentation::setUseTruststoreSpi(const QString &use_truststore_spi) {
    m_use_truststore_spi = use_truststore_spi;
    m_use_truststore_spi_isSet = true;
}

bool OAITestLdapConnectionRepresentation::is_use_truststore_spi_Set() const{
    return m_use_truststore_spi_isSet;
}

bool OAITestLdapConnectionRepresentation::is_use_truststore_spi_Valid() const{
    return m_use_truststore_spi_isValid;
}

bool OAITestLdapConnectionRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bind_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bind_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_tls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_truststore_spi_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestLdapConnectionRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
