/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientMappingsRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientMappingsRepresentation::OAIClientMappingsRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientMappingsRepresentation::OAIClientMappingsRepresentation() {
    this->initializeModel();
}

OAIClientMappingsRepresentation::~OAIClientMappingsRepresentation() {}

void OAIClientMappingsRepresentation::initializeModel() {

    m_client_isSet = false;
    m_client_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mappings_isSet = false;
    m_mappings_isValid = false;
}

void OAIClientMappingsRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientMappingsRepresentation::fromJsonObject(QJsonObject json) {

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mappings_isValid = ::OpenAPI::fromJsonValue(m_mappings, json[QString("mappings")]);
    m_mappings_isSet = !json[QString("mappings")].isNull() && m_mappings_isValid;
}

QString OAIClientMappingsRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientMappingsRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_client_isSet) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mappings.size() > 0) {
        obj.insert(QString("mappings"), ::OpenAPI::toJsonValue(m_mappings));
    }
    return obj;
}

QString OAIClientMappingsRepresentation::getClient() const {
    return m_client;
}
void OAIClientMappingsRepresentation::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIClientMappingsRepresentation::is_client_Set() const{
    return m_client_isSet;
}

bool OAIClientMappingsRepresentation::is_client_Valid() const{
    return m_client_isValid;
}

QString OAIClientMappingsRepresentation::getId() const {
    return m_id;
}
void OAIClientMappingsRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClientMappingsRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClientMappingsRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIRoleRepresentation> OAIClientMappingsRepresentation::getMappings() const {
    return m_mappings;
}
void OAIClientMappingsRepresentation::setMappings(const QList<OAIRoleRepresentation> &mappings) {
    m_mappings = mappings;
    m_mappings_isSet = true;
}

bool OAIClientMappingsRepresentation::is_mappings_Set() const{
    return m_mappings_isSet;
}

bool OAIClientMappingsRepresentation::is_mappings_Valid() const{
    return m_mappings_isValid;
}

bool OAIClientMappingsRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientMappingsRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
