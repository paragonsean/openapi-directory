/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealmEventsConfigRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealmEventsConfigRepresentation::OAIRealmEventsConfigRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealmEventsConfigRepresentation::OAIRealmEventsConfigRepresentation() {
    this->initializeModel();
}

OAIRealmEventsConfigRepresentation::~OAIRealmEventsConfigRepresentation() {}

void OAIRealmEventsConfigRepresentation::initializeModel() {

    m_admin_events_details_enabled_isSet = false;
    m_admin_events_details_enabled_isValid = false;

    m_admin_events_enabled_isSet = false;
    m_admin_events_enabled_isValid = false;

    m_enabled_event_types_isSet = false;
    m_enabled_event_types_isValid = false;

    m_events_enabled_isSet = false;
    m_events_enabled_isValid = false;

    m_events_expiration_isSet = false;
    m_events_expiration_isValid = false;

    m_events_listeners_isSet = false;
    m_events_listeners_isValid = false;
}

void OAIRealmEventsConfigRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealmEventsConfigRepresentation::fromJsonObject(QJsonObject json) {

    m_admin_events_details_enabled_isValid = ::OpenAPI::fromJsonValue(m_admin_events_details_enabled, json[QString("adminEventsDetailsEnabled")]);
    m_admin_events_details_enabled_isSet = !json[QString("adminEventsDetailsEnabled")].isNull() && m_admin_events_details_enabled_isValid;

    m_admin_events_enabled_isValid = ::OpenAPI::fromJsonValue(m_admin_events_enabled, json[QString("adminEventsEnabled")]);
    m_admin_events_enabled_isSet = !json[QString("adminEventsEnabled")].isNull() && m_admin_events_enabled_isValid;

    m_enabled_event_types_isValid = ::OpenAPI::fromJsonValue(m_enabled_event_types, json[QString("enabledEventTypes")]);
    m_enabled_event_types_isSet = !json[QString("enabledEventTypes")].isNull() && m_enabled_event_types_isValid;

    m_events_enabled_isValid = ::OpenAPI::fromJsonValue(m_events_enabled, json[QString("eventsEnabled")]);
    m_events_enabled_isSet = !json[QString("eventsEnabled")].isNull() && m_events_enabled_isValid;

    m_events_expiration_isValid = ::OpenAPI::fromJsonValue(m_events_expiration, json[QString("eventsExpiration")]);
    m_events_expiration_isSet = !json[QString("eventsExpiration")].isNull() && m_events_expiration_isValid;

    m_events_listeners_isValid = ::OpenAPI::fromJsonValue(m_events_listeners, json[QString("eventsListeners")]);
    m_events_listeners_isSet = !json[QString("eventsListeners")].isNull() && m_events_listeners_isValid;
}

QString OAIRealmEventsConfigRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealmEventsConfigRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_events_details_enabled_isSet) {
        obj.insert(QString("adminEventsDetailsEnabled"), ::OpenAPI::toJsonValue(m_admin_events_details_enabled));
    }
    if (m_admin_events_enabled_isSet) {
        obj.insert(QString("adminEventsEnabled"), ::OpenAPI::toJsonValue(m_admin_events_enabled));
    }
    if (m_enabled_event_types.size() > 0) {
        obj.insert(QString("enabledEventTypes"), ::OpenAPI::toJsonValue(m_enabled_event_types));
    }
    if (m_events_enabled_isSet) {
        obj.insert(QString("eventsEnabled"), ::OpenAPI::toJsonValue(m_events_enabled));
    }
    if (m_events_expiration_isSet) {
        obj.insert(QString("eventsExpiration"), ::OpenAPI::toJsonValue(m_events_expiration));
    }
    if (m_events_listeners.size() > 0) {
        obj.insert(QString("eventsListeners"), ::OpenAPI::toJsonValue(m_events_listeners));
    }
    return obj;
}

bool OAIRealmEventsConfigRepresentation::isAdminEventsDetailsEnabled() const {
    return m_admin_events_details_enabled;
}
void OAIRealmEventsConfigRepresentation::setAdminEventsDetailsEnabled(const bool &admin_events_details_enabled) {
    m_admin_events_details_enabled = admin_events_details_enabled;
    m_admin_events_details_enabled_isSet = true;
}

bool OAIRealmEventsConfigRepresentation::is_admin_events_details_enabled_Set() const{
    return m_admin_events_details_enabled_isSet;
}

bool OAIRealmEventsConfigRepresentation::is_admin_events_details_enabled_Valid() const{
    return m_admin_events_details_enabled_isValid;
}

bool OAIRealmEventsConfigRepresentation::isAdminEventsEnabled() const {
    return m_admin_events_enabled;
}
void OAIRealmEventsConfigRepresentation::setAdminEventsEnabled(const bool &admin_events_enabled) {
    m_admin_events_enabled = admin_events_enabled;
    m_admin_events_enabled_isSet = true;
}

bool OAIRealmEventsConfigRepresentation::is_admin_events_enabled_Set() const{
    return m_admin_events_enabled_isSet;
}

bool OAIRealmEventsConfigRepresentation::is_admin_events_enabled_Valid() const{
    return m_admin_events_enabled_isValid;
}

QList<QString> OAIRealmEventsConfigRepresentation::getEnabledEventTypes() const {
    return m_enabled_event_types;
}
void OAIRealmEventsConfigRepresentation::setEnabledEventTypes(const QList<QString> &enabled_event_types) {
    m_enabled_event_types = enabled_event_types;
    m_enabled_event_types_isSet = true;
}

bool OAIRealmEventsConfigRepresentation::is_enabled_event_types_Set() const{
    return m_enabled_event_types_isSet;
}

bool OAIRealmEventsConfigRepresentation::is_enabled_event_types_Valid() const{
    return m_enabled_event_types_isValid;
}

bool OAIRealmEventsConfigRepresentation::isEventsEnabled() const {
    return m_events_enabled;
}
void OAIRealmEventsConfigRepresentation::setEventsEnabled(const bool &events_enabled) {
    m_events_enabled = events_enabled;
    m_events_enabled_isSet = true;
}

bool OAIRealmEventsConfigRepresentation::is_events_enabled_Set() const{
    return m_events_enabled_isSet;
}

bool OAIRealmEventsConfigRepresentation::is_events_enabled_Valid() const{
    return m_events_enabled_isValid;
}

qint64 OAIRealmEventsConfigRepresentation::getEventsExpiration() const {
    return m_events_expiration;
}
void OAIRealmEventsConfigRepresentation::setEventsExpiration(const qint64 &events_expiration) {
    m_events_expiration = events_expiration;
    m_events_expiration_isSet = true;
}

bool OAIRealmEventsConfigRepresentation::is_events_expiration_Set() const{
    return m_events_expiration_isSet;
}

bool OAIRealmEventsConfigRepresentation::is_events_expiration_Valid() const{
    return m_events_expiration_isValid;
}

QList<QString> OAIRealmEventsConfigRepresentation::getEventsListeners() const {
    return m_events_listeners;
}
void OAIRealmEventsConfigRepresentation::setEventsListeners(const QList<QString> &events_listeners) {
    m_events_listeners = events_listeners;
    m_events_listeners_isSet = true;
}

bool OAIRealmEventsConfigRepresentation::is_events_listeners_Set() const{
    return m_events_listeners_isSet;
}

bool OAIRealmEventsConfigRepresentation::is_events_listeners_Valid() const{
    return m_events_listeners_isValid;
}

bool OAIRealmEventsConfigRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_events_details_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_events_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_listeners.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealmEventsConfigRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
