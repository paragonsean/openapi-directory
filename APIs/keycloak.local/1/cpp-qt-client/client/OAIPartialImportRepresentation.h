/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPartialImportRepresentation.h
 *
 * 
 */

#ifndef OAIPartialImportRepresentation_H
#define OAIPartialImportRepresentation_H

#include <QJsonObject>

#include "OAIClientRepresentation.h"
#include "OAIGroupRepresentation.h"
#include "OAIIdentityProviderRepresentation.h"
#include "OAIRolesRepresentation.h"
#include "OAIUserRepresentation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClientRepresentation;
class OAIGroupRepresentation;
class OAIIdentityProviderRepresentation;
class OAIRolesRepresentation;
class OAIUserRepresentation;

class OAIPartialImportRepresentation : public OAIObject {
public:
    OAIPartialImportRepresentation();
    OAIPartialImportRepresentation(QString json);
    ~OAIPartialImportRepresentation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIClientRepresentation> getClients() const;
    void setClients(const QList<OAIClientRepresentation> &clients);
    bool is_clients_Set() const;
    bool is_clients_Valid() const;

    QList<OAIGroupRepresentation> getGroups() const;
    void setGroups(const QList<OAIGroupRepresentation> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    QList<OAIIdentityProviderRepresentation> getIdentityProviders() const;
    void setIdentityProviders(const QList<OAIIdentityProviderRepresentation> &identity_providers);
    bool is_identity_providers_Set() const;
    bool is_identity_providers_Valid() const;

    QString getIfResourceExists() const;
    void setIfResourceExists(const QString &if_resource_exists);
    bool is_if_resource_exists_Set() const;
    bool is_if_resource_exists_Valid() const;

    QString getPolicy() const;
    void setPolicy(const QString &policy);
    bool is_policy_Set() const;
    bool is_policy_Valid() const;

    OAIRolesRepresentation getRoles() const;
    void setRoles(const OAIRolesRepresentation &roles);
    bool is_roles_Set() const;
    bool is_roles_Valid() const;

    QList<OAIUserRepresentation> getUsers() const;
    void setUsers(const QList<OAIUserRepresentation> &users);
    bool is_users_Set() const;
    bool is_users_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIClientRepresentation> m_clients;
    bool m_clients_isSet;
    bool m_clients_isValid;

    QList<OAIGroupRepresentation> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    QList<OAIIdentityProviderRepresentation> m_identity_providers;
    bool m_identity_providers_isSet;
    bool m_identity_providers_isValid;

    QString m_if_resource_exists;
    bool m_if_resource_exists_isSet;
    bool m_if_resource_exists_isValid;

    QString m_policy;
    bool m_policy_isSet;
    bool m_policy_isValid;

    OAIRolesRepresentation m_roles;
    bool m_roles_isSet;
    bool m_roles_isValid;

    QList<OAIUserRepresentation> m_users;
    bool m_users_isSet;
    bool m_users_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPartialImportRepresentation)

#endif // OAIPartialImportRepresentation_H
