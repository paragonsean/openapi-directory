/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceServerRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceServerRepresentation::OAIResourceServerRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceServerRepresentation::OAIResourceServerRepresentation() {
    this->initializeModel();
}

OAIResourceServerRepresentation::~OAIResourceServerRepresentation() {}

void OAIResourceServerRepresentation::initializeModel() {

    m_allow_remote_resource_management_isSet = false;
    m_allow_remote_resource_management_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_decision_strategy_isSet = false;
    m_decision_strategy_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_policy_enforcement_mode_isSet = false;
    m_policy_enforcement_mode_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIResourceServerRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceServerRepresentation::fromJsonObject(QJsonObject json) {

    m_allow_remote_resource_management_isValid = ::OpenAPI::fromJsonValue(m_allow_remote_resource_management, json[QString("allowRemoteResourceManagement")]);
    m_allow_remote_resource_management_isSet = !json[QString("allowRemoteResourceManagement")].isNull() && m_allow_remote_resource_management_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_decision_strategy_isValid = ::OpenAPI::fromJsonValue(m_decision_strategy, json[QString("decisionStrategy")]);
    m_decision_strategy_isSet = !json[QString("decisionStrategy")].isNull() && m_decision_strategy_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_policy_enforcement_mode_isValid = ::OpenAPI::fromJsonValue(m_policy_enforcement_mode, json[QString("policyEnforcementMode")]);
    m_policy_enforcement_mode_isSet = !json[QString("policyEnforcementMode")].isNull() && m_policy_enforcement_mode_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIResourceServerRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceServerRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_remote_resource_management_isSet) {
        obj.insert(QString("allowRemoteResourceManagement"), ::OpenAPI::toJsonValue(m_allow_remote_resource_management));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_decision_strategy_isSet) {
        obj.insert(QString("decisionStrategy"), ::OpenAPI::toJsonValue(m_decision_strategy));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policies.size() > 0) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_policy_enforcement_mode_isSet) {
        obj.insert(QString("policyEnforcementMode"), ::OpenAPI::toJsonValue(m_policy_enforcement_mode));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

bool OAIResourceServerRepresentation::isAllowRemoteResourceManagement() const {
    return m_allow_remote_resource_management;
}
void OAIResourceServerRepresentation::setAllowRemoteResourceManagement(const bool &allow_remote_resource_management) {
    m_allow_remote_resource_management = allow_remote_resource_management;
    m_allow_remote_resource_management_isSet = true;
}

bool OAIResourceServerRepresentation::is_allow_remote_resource_management_Set() const{
    return m_allow_remote_resource_management_isSet;
}

bool OAIResourceServerRepresentation::is_allow_remote_resource_management_Valid() const{
    return m_allow_remote_resource_management_isValid;
}

QString OAIResourceServerRepresentation::getClientId() const {
    return m_client_id;
}
void OAIResourceServerRepresentation::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIResourceServerRepresentation::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIResourceServerRepresentation::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIResourceServerRepresentation::getDecisionStrategy() const {
    return m_decision_strategy;
}
void OAIResourceServerRepresentation::setDecisionStrategy(const QString &decision_strategy) {
    m_decision_strategy = decision_strategy;
    m_decision_strategy_isSet = true;
}

bool OAIResourceServerRepresentation::is_decision_strategy_Set() const{
    return m_decision_strategy_isSet;
}

bool OAIResourceServerRepresentation::is_decision_strategy_Valid() const{
    return m_decision_strategy_isValid;
}

QString OAIResourceServerRepresentation::getId() const {
    return m_id;
}
void OAIResourceServerRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceServerRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceServerRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResourceServerRepresentation::getName() const {
    return m_name;
}
void OAIResourceServerRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceServerRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceServerRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPolicyRepresentation> OAIResourceServerRepresentation::getPolicies() const {
    return m_policies;
}
void OAIResourceServerRepresentation::setPolicies(const QList<OAIPolicyRepresentation> &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIResourceServerRepresentation::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIResourceServerRepresentation::is_policies_Valid() const{
    return m_policies_isValid;
}

QString OAIResourceServerRepresentation::getPolicyEnforcementMode() const {
    return m_policy_enforcement_mode;
}
void OAIResourceServerRepresentation::setPolicyEnforcementMode(const QString &policy_enforcement_mode) {
    m_policy_enforcement_mode = policy_enforcement_mode;
    m_policy_enforcement_mode_isSet = true;
}

bool OAIResourceServerRepresentation::is_policy_enforcement_mode_Set() const{
    return m_policy_enforcement_mode_isSet;
}

bool OAIResourceServerRepresentation::is_policy_enforcement_mode_Valid() const{
    return m_policy_enforcement_mode_isValid;
}

QList<OAIResourceRepresentation> OAIResourceServerRepresentation::getResources() const {
    return m_resources;
}
void OAIResourceServerRepresentation::setResources(const QList<OAIResourceRepresentation> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIResourceServerRepresentation::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIResourceServerRepresentation::is_resources_Valid() const{
    return m_resources_isValid;
}

QList<OAIScopeRepresentation> OAIResourceServerRepresentation::getScopes() const {
    return m_scopes;
}
void OAIResourceServerRepresentation::setScopes(const QList<OAIScopeRepresentation> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIResourceServerRepresentation::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIResourceServerRepresentation::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIResourceServerRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_remote_resource_management_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_enforcement_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceServerRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
