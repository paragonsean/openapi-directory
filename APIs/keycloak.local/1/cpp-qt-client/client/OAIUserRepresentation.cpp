/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserRepresentation::OAIUserRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserRepresentation::OAIUserRepresentation() {
    this->initializeModel();
}

OAIUserRepresentation::~OAIUserRepresentation() {}

void OAIUserRepresentation::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_client_consents_isSet = false;
    m_client_consents_isValid = false;

    m_client_roles_isSet = false;
    m_client_roles_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_disableable_credential_types_isSet = false;
    m_disableable_credential_types_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_federated_identities_isSet = false;
    m_federated_identities_isValid = false;

    m_federation_link_isSet = false;
    m_federation_link_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_realm_roles_isSet = false;
    m_realm_roles_isValid = false;

    m_required_actions_isSet = false;
    m_required_actions_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_service_account_client_id_isSet = false;
    m_service_account_client_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUserRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserRepresentation::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_client_consents_isValid = ::OpenAPI::fromJsonValue(m_client_consents, json[QString("clientConsents")]);
    m_client_consents_isSet = !json[QString("clientConsents")].isNull() && m_client_consents_isValid;

    m_client_roles_isValid = ::OpenAPI::fromJsonValue(m_client_roles, json[QString("clientRoles")]);
    m_client_roles_isSet = !json[QString("clientRoles")].isNull() && m_client_roles_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("createdTimestamp")]);
    m_created_timestamp_isSet = !json[QString("createdTimestamp")].isNull() && m_created_timestamp_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_disableable_credential_types_isValid = ::OpenAPI::fromJsonValue(m_disableable_credential_types, json[QString("disableableCredentialTypes")]);
    m_disableable_credential_types_isSet = !json[QString("disableableCredentialTypes")].isNull() && m_disableable_credential_types_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(m_email_verified, json[QString("emailVerified")]);
    m_email_verified_isSet = !json[QString("emailVerified")].isNull() && m_email_verified_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_federated_identities_isValid = ::OpenAPI::fromJsonValue(m_federated_identities, json[QString("federatedIdentities")]);
    m_federated_identities_isSet = !json[QString("federatedIdentities")].isNull() && m_federated_identities_isValid;

    m_federation_link_isValid = ::OpenAPI::fromJsonValue(m_federation_link, json[QString("federationLink")]);
    m_federation_link_isSet = !json[QString("federationLink")].isNull() && m_federation_link_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("notBefore")]);
    m_not_before_isSet = !json[QString("notBefore")].isNull() && m_not_before_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_realm_roles_isValid = ::OpenAPI::fromJsonValue(m_realm_roles, json[QString("realmRoles")]);
    m_realm_roles_isSet = !json[QString("realmRoles")].isNull() && m_realm_roles_isValid;

    m_required_actions_isValid = ::OpenAPI::fromJsonValue(m_required_actions, json[QString("requiredActions")]);
    m_required_actions_isSet = !json[QString("requiredActions")].isNull() && m_required_actions_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_service_account_client_id_isValid = ::OpenAPI::fromJsonValue(m_service_account_client_id, json[QString("serviceAccountClientId")]);
    m_service_account_client_id_isSet = !json[QString("serviceAccountClientId")].isNull() && m_service_account_client_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUserRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_access.size() > 0) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_client_consents.size() > 0) {
        obj.insert(QString("clientConsents"), ::OpenAPI::toJsonValue(m_client_consents));
    }
    if (m_client_roles.size() > 0) {
        obj.insert(QString("clientRoles"), ::OpenAPI::toJsonValue(m_client_roles));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("createdTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_credentials.size() > 0) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_disableable_credential_types.size() > 0) {
        obj.insert(QString("disableableCredentialTypes"), ::OpenAPI::toJsonValue(m_disableable_credential_types));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("emailVerified"), ::OpenAPI::toJsonValue(m_email_verified));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_federated_identities.size() > 0) {
        obj.insert(QString("federatedIdentities"), ::OpenAPI::toJsonValue(m_federated_identities));
    }
    if (m_federation_link_isSet) {
        obj.insert(QString("federationLink"), ::OpenAPI::toJsonValue(m_federation_link));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("notBefore"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_realm_roles.size() > 0) {
        obj.insert(QString("realmRoles"), ::OpenAPI::toJsonValue(m_realm_roles));
    }
    if (m_required_actions.size() > 0) {
        obj.insert(QString("requiredActions"), ::OpenAPI::toJsonValue(m_required_actions));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_service_account_client_id_isSet) {
        obj.insert(QString("serviceAccountClientId"), ::OpenAPI::toJsonValue(m_service_account_client_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIUserRepresentation::getAccess() const {
    return m_access;
}
void OAIUserRepresentation::setAccess(const QMap<QString, QJsonValue> &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIUserRepresentation::is_access_Set() const{
    return m_access_isSet;
}

bool OAIUserRepresentation::is_access_Valid() const{
    return m_access_isValid;
}

QMap<QString, QJsonValue> OAIUserRepresentation::getAttributes() const {
    return m_attributes;
}
void OAIUserRepresentation::setAttributes(const QMap<QString, QJsonValue> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIUserRepresentation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIUserRepresentation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<OAIUserConsentRepresentation> OAIUserRepresentation::getClientConsents() const {
    return m_client_consents;
}
void OAIUserRepresentation::setClientConsents(const QList<OAIUserConsentRepresentation> &client_consents) {
    m_client_consents = client_consents;
    m_client_consents_isSet = true;
}

bool OAIUserRepresentation::is_client_consents_Set() const{
    return m_client_consents_isSet;
}

bool OAIUserRepresentation::is_client_consents_Valid() const{
    return m_client_consents_isValid;
}

QMap<QString, QJsonValue> OAIUserRepresentation::getClientRoles() const {
    return m_client_roles;
}
void OAIUserRepresentation::setClientRoles(const QMap<QString, QJsonValue> &client_roles) {
    m_client_roles = client_roles;
    m_client_roles_isSet = true;
}

bool OAIUserRepresentation::is_client_roles_Set() const{
    return m_client_roles_isSet;
}

bool OAIUserRepresentation::is_client_roles_Valid() const{
    return m_client_roles_isValid;
}

qint64 OAIUserRepresentation::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIUserRepresentation::setCreatedTimestamp(const qint64 &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIUserRepresentation::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIUserRepresentation::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QList<OAICredentialRepresentation> OAIUserRepresentation::getCredentials() const {
    return m_credentials;
}
void OAIUserRepresentation::setCredentials(const QList<OAICredentialRepresentation> &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIUserRepresentation::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIUserRepresentation::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QList<QString> OAIUserRepresentation::getDisableableCredentialTypes() const {
    return m_disableable_credential_types;
}
void OAIUserRepresentation::setDisableableCredentialTypes(const QList<QString> &disableable_credential_types) {
    m_disableable_credential_types = disableable_credential_types;
    m_disableable_credential_types_isSet = true;
}

bool OAIUserRepresentation::is_disableable_credential_types_Set() const{
    return m_disableable_credential_types_isSet;
}

bool OAIUserRepresentation::is_disableable_credential_types_Valid() const{
    return m_disableable_credential_types_isValid;
}

QString OAIUserRepresentation::getEmail() const {
    return m_email;
}
void OAIUserRepresentation::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserRepresentation::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserRepresentation::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUserRepresentation::isEmailVerified() const {
    return m_email_verified;
}
void OAIUserRepresentation::setEmailVerified(const bool &email_verified) {
    m_email_verified = email_verified;
    m_email_verified_isSet = true;
}

bool OAIUserRepresentation::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAIUserRepresentation::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

bool OAIUserRepresentation::isEnabled() const {
    return m_enabled;
}
void OAIUserRepresentation::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUserRepresentation::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUserRepresentation::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIFederatedIdentityRepresentation> OAIUserRepresentation::getFederatedIdentities() const {
    return m_federated_identities;
}
void OAIUserRepresentation::setFederatedIdentities(const QList<OAIFederatedIdentityRepresentation> &federated_identities) {
    m_federated_identities = federated_identities;
    m_federated_identities_isSet = true;
}

bool OAIUserRepresentation::is_federated_identities_Set() const{
    return m_federated_identities_isSet;
}

bool OAIUserRepresentation::is_federated_identities_Valid() const{
    return m_federated_identities_isValid;
}

QString OAIUserRepresentation::getFederationLink() const {
    return m_federation_link;
}
void OAIUserRepresentation::setFederationLink(const QString &federation_link) {
    m_federation_link = federation_link;
    m_federation_link_isSet = true;
}

bool OAIUserRepresentation::is_federation_link_Set() const{
    return m_federation_link_isSet;
}

bool OAIUserRepresentation::is_federation_link_Valid() const{
    return m_federation_link_isValid;
}

QString OAIUserRepresentation::getFirstName() const {
    return m_first_name;
}
void OAIUserRepresentation::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserRepresentation::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserRepresentation::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QList<QString> OAIUserRepresentation::getGroups() const {
    return m_groups;
}
void OAIUserRepresentation::setGroups(const QList<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIUserRepresentation::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIUserRepresentation::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIUserRepresentation::getId() const {
    return m_id;
}
void OAIUserRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserRepresentation::getLastName() const {
    return m_last_name;
}
void OAIUserRepresentation::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserRepresentation::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserRepresentation::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIUserRepresentation::getNotBefore() const {
    return m_not_before;
}
void OAIUserRepresentation::setNotBefore(const qint32 &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAIUserRepresentation::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAIUserRepresentation::is_not_before_Valid() const{
    return m_not_before_isValid;
}

QString OAIUserRepresentation::getOrigin() const {
    return m_origin;
}
void OAIUserRepresentation::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIUserRepresentation::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIUserRepresentation::is_origin_Valid() const{
    return m_origin_isValid;
}

QList<QString> OAIUserRepresentation::getRealmRoles() const {
    return m_realm_roles;
}
void OAIUserRepresentation::setRealmRoles(const QList<QString> &realm_roles) {
    m_realm_roles = realm_roles;
    m_realm_roles_isSet = true;
}

bool OAIUserRepresentation::is_realm_roles_Set() const{
    return m_realm_roles_isSet;
}

bool OAIUserRepresentation::is_realm_roles_Valid() const{
    return m_realm_roles_isValid;
}

QList<QString> OAIUserRepresentation::getRequiredActions() const {
    return m_required_actions;
}
void OAIUserRepresentation::setRequiredActions(const QList<QString> &required_actions) {
    m_required_actions = required_actions;
    m_required_actions_isSet = true;
}

bool OAIUserRepresentation::is_required_actions_Set() const{
    return m_required_actions_isSet;
}

bool OAIUserRepresentation::is_required_actions_Valid() const{
    return m_required_actions_isValid;
}

QString OAIUserRepresentation::getSelf() const {
    return m_self;
}
void OAIUserRepresentation::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIUserRepresentation::is_self_Set() const{
    return m_self_isSet;
}

bool OAIUserRepresentation::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIUserRepresentation::getServiceAccountClientId() const {
    return m_service_account_client_id;
}
void OAIUserRepresentation::setServiceAccountClientId(const QString &service_account_client_id) {
    m_service_account_client_id = service_account_client_id;
    m_service_account_client_id_isSet = true;
}

bool OAIUserRepresentation::is_service_account_client_id_Set() const{
    return m_service_account_client_id_isSet;
}

bool OAIUserRepresentation::is_service_account_client_id_Valid() const{
    return m_service_account_client_id_isValid;
}

QString OAIUserRepresentation::getUsername() const {
    return m_username;
}
void OAIUserRepresentation::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserRepresentation::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserRepresentation::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUserRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_consents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disableable_credential_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federated_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_federation_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
