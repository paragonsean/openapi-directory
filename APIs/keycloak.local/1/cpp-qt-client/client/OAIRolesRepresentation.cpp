/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRolesRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRolesRepresentation::OAIRolesRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRolesRepresentation::OAIRolesRepresentation() {
    this->initializeModel();
}

OAIRolesRepresentation::~OAIRolesRepresentation() {}

void OAIRolesRepresentation::initializeModel() {

    m_client_isSet = false;
    m_client_isValid = false;

    m_realm_isSet = false;
    m_realm_isValid = false;
}

void OAIRolesRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRolesRepresentation::fromJsonObject(QJsonObject json) {

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_realm_isValid = ::OpenAPI::fromJsonValue(m_realm, json[QString("realm")]);
    m_realm_isSet = !json[QString("realm")].isNull() && m_realm_isValid;
}

QString OAIRolesRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRolesRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_client.size() > 0) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_realm.size() > 0) {
        obj.insert(QString("realm"), ::OpenAPI::toJsonValue(m_realm));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIRolesRepresentation::getClient() const {
    return m_client;
}
void OAIRolesRepresentation::setClient(const QMap<QString, QJsonValue> &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIRolesRepresentation::is_client_Set() const{
    return m_client_isSet;
}

bool OAIRolesRepresentation::is_client_Valid() const{
    return m_client_isValid;
}

QList<OAIRoleRepresentation> OAIRolesRepresentation::getRealm() const {
    return m_realm;
}
void OAIRolesRepresentation::setRealm(const QList<OAIRoleRepresentation> &realm) {
    m_realm = realm;
    m_realm_isSet = true;
}

bool OAIRolesRepresentation::is_realm_Set() const{
    return m_realm_isSet;
}

bool OAIRolesRepresentation::is_realm_Valid() const{
    return m_realm_isValid;
}

bool OAIRolesRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRolesRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
