/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISystemInfoRepresentation.h
 *
 * 
 */

#ifndef OAISystemInfoRepresentation_H
#define OAISystemInfoRepresentation_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISystemInfoRepresentation : public OAIObject {
public:
    OAISystemInfoRepresentation();
    OAISystemInfoRepresentation(QString json);
    ~OAISystemInfoRepresentation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFileEncoding() const;
    void setFileEncoding(const QString &file_encoding);
    bool is_file_encoding_Set() const;
    bool is_file_encoding_Valid() const;

    QString getJavaHome() const;
    void setJavaHome(const QString &java_home);
    bool is_java_home_Set() const;
    bool is_java_home_Valid() const;

    QString getJavaRuntime() const;
    void setJavaRuntime(const QString &java_runtime);
    bool is_java_runtime_Set() const;
    bool is_java_runtime_Valid() const;

    QString getJavaVendor() const;
    void setJavaVendor(const QString &java_vendor);
    bool is_java_vendor_Set() const;
    bool is_java_vendor_Valid() const;

    QString getJavaVersion() const;
    void setJavaVersion(const QString &java_version);
    bool is_java_version_Set() const;
    bool is_java_version_Valid() const;

    QString getJavaVm() const;
    void setJavaVm(const QString &java_vm);
    bool is_java_vm_Set() const;
    bool is_java_vm_Valid() const;

    QString getJavaVmVersion() const;
    void setJavaVmVersion(const QString &java_vm_version);
    bool is_java_vm_version_Set() const;
    bool is_java_vm_version_Valid() const;

    QString getOsArchitecture() const;
    void setOsArchitecture(const QString &os_architecture);
    bool is_os_architecture_Set() const;
    bool is_os_architecture_Valid() const;

    QString getOsName() const;
    void setOsName(const QString &os_name);
    bool is_os_name_Set() const;
    bool is_os_name_Valid() const;

    QString getOsVersion() const;
    void setOsVersion(const QString &os_version);
    bool is_os_version_Set() const;
    bool is_os_version_Valid() const;

    QString getServerTime() const;
    void setServerTime(const QString &server_time);
    bool is_server_time_Set() const;
    bool is_server_time_Valid() const;

    QString getUptime() const;
    void setUptime(const QString &uptime);
    bool is_uptime_Set() const;
    bool is_uptime_Valid() const;

    qint64 getUptimeMillis() const;
    void setUptimeMillis(const qint64 &uptime_millis);
    bool is_uptime_millis_Set() const;
    bool is_uptime_millis_Valid() const;

    QString getUserDir() const;
    void setUserDir(const QString &user_dir);
    bool is_user_dir_Set() const;
    bool is_user_dir_Valid() const;

    QString getUserLocale() const;
    void setUserLocale(const QString &user_locale);
    bool is_user_locale_Set() const;
    bool is_user_locale_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    QString getUserTimezone() const;
    void setUserTimezone(const QString &user_timezone);
    bool is_user_timezone_Set() const;
    bool is_user_timezone_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_file_encoding;
    bool m_file_encoding_isSet;
    bool m_file_encoding_isValid;

    QString m_java_home;
    bool m_java_home_isSet;
    bool m_java_home_isValid;

    QString m_java_runtime;
    bool m_java_runtime_isSet;
    bool m_java_runtime_isValid;

    QString m_java_vendor;
    bool m_java_vendor_isSet;
    bool m_java_vendor_isValid;

    QString m_java_version;
    bool m_java_version_isSet;
    bool m_java_version_isValid;

    QString m_java_vm;
    bool m_java_vm_isSet;
    bool m_java_vm_isValid;

    QString m_java_vm_version;
    bool m_java_vm_version_isSet;
    bool m_java_vm_version_isValid;

    QString m_os_architecture;
    bool m_os_architecture_isSet;
    bool m_os_architecture_isValid;

    QString m_os_name;
    bool m_os_name_isSet;
    bool m_os_name_isValid;

    QString m_os_version;
    bool m_os_version_isSet;
    bool m_os_version_isValid;

    QString m_server_time;
    bool m_server_time_isSet;
    bool m_server_time_isValid;

    QString m_uptime;
    bool m_uptime_isSet;
    bool m_uptime_isValid;

    qint64 m_uptime_millis;
    bool m_uptime_millis_isSet;
    bool m_uptime_millis_isValid;

    QString m_user_dir;
    bool m_user_dir_isSet;
    bool m_user_dir_isValid;

    QString m_user_locale;
    bool m_user_locale_isSet;
    bool m_user_locale_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;

    QString m_user_timezone;
    bool m_user_timezone_isSet;
    bool m_user_timezone_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISystemInfoRepresentation)

#endif // OAISystemInfoRepresentation_H
