/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScopeMappingsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIScopeMappingsApi::OAIScopeMappingsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIScopeMappingsApi::~OAIScopeMappingsApi() {
}

void OAIScopeMappingsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://keycloak.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("realmClientScopesIdScopeMappingsClientsClientAvailableGet", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsClientsClientAvailableGet", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsClientsClientCompositeGet", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsClientsClientCompositeGet", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsClientsClientDelete", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsClientsClientDelete", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsClientsClientGet", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsClientsClientGet", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsClientsClientPost", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsClientsClientPost", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsGet", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsGet", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsRealmAvailableGet", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsRealmAvailableGet", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsRealmCompositeGet", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsRealmCompositeGet", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsRealmDelete", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsRealmDelete", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsRealmGet", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsRealmGet", 0);
    _serverConfigs.insert("realmClientScopesIdScopeMappingsRealmPost", defaultConf);
    _serverIndices.insert("realmClientScopesIdScopeMappingsRealmPost", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsClientsClientAvailableGet", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsClientsClientAvailableGet", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsClientsClientCompositeGet", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsClientsClientCompositeGet", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsClientsClientDelete", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsClientsClientDelete", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsClientsClientGet", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsClientsClientGet", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsClientsClientPost", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsClientsClientPost", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsGet", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsGet", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsRealmAvailableGet", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsRealmAvailableGet", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsRealmCompositeGet", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsRealmCompositeGet", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsRealmDelete", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsRealmDelete", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsRealmGet", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsRealmGet", 0);
    _serverConfigs.insert("realmClientsIdScopeMappingsRealmPost", defaultConf);
    _serverIndices.insert("realmClientsIdScopeMappingsRealmPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIScopeMappingsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIScopeMappingsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIScopeMappingsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIScopeMappingsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIScopeMappingsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIScopeMappingsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIScopeMappingsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIScopeMappingsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIScopeMappingsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIScopeMappingsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIScopeMappingsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIScopeMappingsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIScopeMappingsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIScopeMappingsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIScopeMappingsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIScopeMappingsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIScopeMappingsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIScopeMappingsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIScopeMappingsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientAvailableGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsClientsClientAvailableGet"][_serverIndices.value("realmClientScopesIdScopeMappingsClientsClientAvailableGet")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientAvailableGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientAvailableGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientAvailableGetSignal(output);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientCompositeGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsClientsClientCompositeGet"][_serverIndices.value("realmClientScopesIdScopeMappingsClientsClientCompositeGet")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientCompositeGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientCompositeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientCompositeGetSignal(output);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientDelete(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsClientsClientDelete"][_serverIndices.value("realmClientScopesIdScopeMappingsClientsClientDelete")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientDeleteCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientDeleteSignal();
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientDeleteSignalE(error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientDeleteSignalError(error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsClientsClientGet"][_serverIndices.value("realmClientScopesIdScopeMappingsClientsClientGet")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientGetSignal(output);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientPost(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsClientsClientPost"][_serverIndices.value("realmClientScopesIdScopeMappingsClientsClientPost")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientPostCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsClientsClientPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientPostSignal();
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientPostSignalE(error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsClientsClientPostSignalError(error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsClientsClientPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsGet"][_serverIndices.value("realmClientScopesIdScopeMappingsGet")].URL()+"/{realm}/client-scopes/{id}/scope-mappings");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMappingsRepresentation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsGetSignal(output);
        Q_EMIT realmClientScopesIdScopeMappingsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmAvailableGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsRealmAvailableGet"][_serverIndices.value("realmClientScopesIdScopeMappingsRealmAvailableGet")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/realm/available");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmAvailableGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmAvailableGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsRealmAvailableGetSignal(output);
        Q_EMIT realmClientScopesIdScopeMappingsRealmAvailableGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmAvailableGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmAvailableGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmAvailableGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmAvailableGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmCompositeGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsRealmCompositeGet"][_serverIndices.value("realmClientScopesIdScopeMappingsRealmCompositeGet")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/realm/composite");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmCompositeGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmCompositeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsRealmCompositeGetSignal(output);
        Q_EMIT realmClientScopesIdScopeMappingsRealmCompositeGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmCompositeGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmCompositeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmCompositeGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmCompositeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmDelete(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsRealmDelete"][_serverIndices.value("realmClientScopesIdScopeMappingsRealmDelete")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/realm");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmDeleteCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsRealmDeleteSignal();
        Q_EMIT realmClientScopesIdScopeMappingsRealmDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmDeleteSignalE(error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmDeleteSignalError(error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsRealmGet"][_serverIndices.value("realmClientScopesIdScopeMappingsRealmGet")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/realm");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsRealmGetSignal(output);
        Q_EMIT realmClientScopesIdScopeMappingsRealmGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmPost(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdScopeMappingsRealmPost"][_serverIndices.value("realmClientScopesIdScopeMappingsRealmPost")].URL()+"/{realm}/client-scopes/{id}/scope-mappings/realm");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmPostCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientScopesIdScopeMappingsRealmPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdScopeMappingsRealmPostSignal();
        Q_EMIT realmClientScopesIdScopeMappingsRealmPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmPostSignalE(error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdScopeMappingsRealmPostSignalError(error_type, error_str);
        Q_EMIT realmClientScopesIdScopeMappingsRealmPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientAvailableGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsClientsClientAvailableGet"][_serverIndices.value("realmClientsIdScopeMappingsClientsClientAvailableGet")].URL()+"/{realm}/clients/{id}/scope-mappings/clients/{client}/available");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientAvailableGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientAvailableGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsClientsClientAvailableGetSignal(output);
        Q_EMIT realmClientsIdScopeMappingsClientsClientAvailableGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientAvailableGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientAvailableGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientAvailableGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientAvailableGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientCompositeGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsClientsClientCompositeGet"][_serverIndices.value("realmClientsIdScopeMappingsClientsClientCompositeGet")].URL()+"/{realm}/clients/{id}/scope-mappings/clients/{client}/composite");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientCompositeGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientCompositeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsClientsClientCompositeGetSignal(output);
        Q_EMIT realmClientsIdScopeMappingsClientsClientCompositeGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientCompositeGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientCompositeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientCompositeGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientCompositeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientDelete(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsClientsClientDelete"][_serverIndices.value("realmClientsIdScopeMappingsClientsClientDelete")].URL()+"/{realm}/clients/{id}/scope-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientDeleteCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsClientsClientDeleteSignal();
        Q_EMIT realmClientsIdScopeMappingsClientsClientDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientDeleteSignalE(error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientDeleteSignalError(error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsClientsClientGet"][_serverIndices.value("realmClientsIdScopeMappingsClientsClientGet")].URL()+"/{realm}/clients/{id}/scope-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsClientsClientGetSignal(output);
        Q_EMIT realmClientsIdScopeMappingsClientsClientGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientPost(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsClientsClientPost"][_serverIndices.value("realmClientsIdScopeMappingsClientsClientPost")].URL()+"/{realm}/clients/{id}/scope-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientPostCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsClientsClientPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsClientsClientPostSignal();
        Q_EMIT realmClientsIdScopeMappingsClientsClientPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientPostSignalE(error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsClientsClientPostSignalError(error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsClientsClientPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsGet"][_serverIndices.value("realmClientsIdScopeMappingsGet")].URL()+"/{realm}/clients/{id}/scope-mappings");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMappingsRepresentation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsGetSignal(output);
        Q_EMIT realmClientsIdScopeMappingsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmAvailableGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsRealmAvailableGet"][_serverIndices.value("realmClientsIdScopeMappingsRealmAvailableGet")].URL()+"/{realm}/clients/{id}/scope-mappings/realm/available");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmAvailableGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmAvailableGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsRealmAvailableGetSignal(output);
        Q_EMIT realmClientsIdScopeMappingsRealmAvailableGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmAvailableGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmAvailableGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmAvailableGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmAvailableGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmCompositeGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsRealmCompositeGet"][_serverIndices.value("realmClientsIdScopeMappingsRealmCompositeGet")].URL()+"/{realm}/clients/{id}/scope-mappings/realm/composite");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmCompositeGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmCompositeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsRealmCompositeGetSignal(output);
        Q_EMIT realmClientsIdScopeMappingsRealmCompositeGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmCompositeGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmCompositeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmCompositeGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmCompositeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmDelete(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsRealmDelete"][_serverIndices.value("realmClientsIdScopeMappingsRealmDelete")].URL()+"/{realm}/clients/{id}/scope-mappings/realm");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmDeleteCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsRealmDeleteSignal();
        Q_EMIT realmClientsIdScopeMappingsRealmDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmDeleteSignalE(error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmDeleteSignalError(error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsRealmGet"][_serverIndices.value("realmClientsIdScopeMappingsRealmGet")].URL()+"/{realm}/clients/{id}/scope-mappings/realm");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmGetCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsRealmGetSignal(output);
        Q_EMIT realmClientsIdScopeMappingsRealmGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmPost(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmClientsIdScopeMappingsRealmPost"][_serverIndices.value("realmClientsIdScopeMappingsRealmPost")].URL()+"/{realm}/clients/{id}/scope-mappings/realm");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmPostCallback);
    connect(this, &OAIScopeMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScopeMappingsApi::realmClientsIdScopeMappingsRealmPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdScopeMappingsRealmPostSignal();
        Q_EMIT realmClientsIdScopeMappingsRealmPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmPostSignalE(error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdScopeMappingsRealmPostSignalError(error_type, error_str);
        Q_EMIT realmClientsIdScopeMappingsRealmPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScopeMappingsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
