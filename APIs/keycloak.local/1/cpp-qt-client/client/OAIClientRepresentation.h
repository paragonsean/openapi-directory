/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClientRepresentation.h
 *
 * 
 */

#ifndef OAIClientRepresentation_H
#define OAIClientRepresentation_H

#include <QJsonObject>

#include "OAIProtocolMapperRepresentation.h"
#include "OAIResourceServerRepresentation.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIResourceServerRepresentation;
class OAIProtocolMapperRepresentation;

class OAIClientRepresentation : public OAIObject {
public:
    OAIClientRepresentation();
    OAIClientRepresentation(QString json);
    ~OAIClientRepresentation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getAccess() const;
    void setAccess(const QMap<QString, QJsonValue> &access);
    bool is_access_Set() const;
    bool is_access_Valid() const;

    QString getAdminUrl() const;
    void setAdminUrl(const QString &admin_url);
    bool is_admin_url_Set() const;
    bool is_admin_url_Valid() const;

    bool isAlwaysDisplayInConsole() const;
    void setAlwaysDisplayInConsole(const bool &always_display_in_console);
    bool is_always_display_in_console_Set() const;
    bool is_always_display_in_console_Valid() const;

    QMap<QString, QJsonValue> getAttributes() const;
    void setAttributes(const QMap<QString, QJsonValue> &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QMap<QString, QJsonValue> getAuthenticationFlowBindingOverrides() const;
    void setAuthenticationFlowBindingOverrides(const QMap<QString, QJsonValue> &authentication_flow_binding_overrides);
    bool is_authentication_flow_binding_overrides_Set() const;
    bool is_authentication_flow_binding_overrides_Valid() const;

    bool isAuthorizationServicesEnabled() const;
    void setAuthorizationServicesEnabled(const bool &authorization_services_enabled);
    bool is_authorization_services_enabled_Set() const;
    bool is_authorization_services_enabled_Valid() const;

    OAIResourceServerRepresentation getAuthorizationSettings() const;
    void setAuthorizationSettings(const OAIResourceServerRepresentation &authorization_settings);
    bool is_authorization_settings_Set() const;
    bool is_authorization_settings_Valid() const;

    QString getBaseUrl() const;
    void setBaseUrl(const QString &base_url);
    bool is_base_url_Set() const;
    bool is_base_url_Valid() const;

    bool isBearerOnly() const;
    void setBearerOnly(const bool &bearer_only);
    bool is_bearer_only_Set() const;
    bool is_bearer_only_Valid() const;

    QString getClientAuthenticatorType() const;
    void setClientAuthenticatorType(const QString &client_authenticator_type);
    bool is_client_authenticator_type_Set() const;
    bool is_client_authenticator_type_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    bool isConsentRequired() const;
    void setConsentRequired(const bool &consent_required);
    bool is_consent_required_Set() const;
    bool is_consent_required_Valid() const;

    QList<QString> getDefaultClientScopes() const;
    void setDefaultClientScopes(const QList<QString> &default_client_scopes);
    bool is_default_client_scopes_Set() const;
    bool is_default_client_scopes_Valid() const;

    QList<QString> getDefaultRoles() const;
    void setDefaultRoles(const QList<QString> &default_roles);
    bool is_default_roles_Set() const;
    bool is_default_roles_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isDirectAccessGrantsEnabled() const;
    void setDirectAccessGrantsEnabled(const bool &direct_access_grants_enabled);
    bool is_direct_access_grants_enabled_Set() const;
    bool is_direct_access_grants_enabled_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    bool isFrontchannelLogout() const;
    void setFrontchannelLogout(const bool &frontchannel_logout);
    bool is_frontchannel_logout_Set() const;
    bool is_frontchannel_logout_Valid() const;

    bool isFullScopeAllowed() const;
    void setFullScopeAllowed(const bool &full_scope_allowed);
    bool is_full_scope_allowed_Set() const;
    bool is_full_scope_allowed_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isImplicitFlowEnabled() const;
    void setImplicitFlowEnabled(const bool &implicit_flow_enabled);
    bool is_implicit_flow_enabled_Set() const;
    bool is_implicit_flow_enabled_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getNodeReRegistrationTimeout() const;
    void setNodeReRegistrationTimeout(const qint32 &node_re_registration_timeout);
    bool is_node_re_registration_timeout_Set() const;
    bool is_node_re_registration_timeout_Valid() const;

    qint32 getNotBefore() const;
    void setNotBefore(const qint32 &not_before);
    bool is_not_before_Set() const;
    bool is_not_before_Valid() const;

    QList<QString> getOptionalClientScopes() const;
    void setOptionalClientScopes(const QList<QString> &optional_client_scopes);
    bool is_optional_client_scopes_Set() const;
    bool is_optional_client_scopes_Valid() const;

    QString getOrigin() const;
    void setOrigin(const QString &origin);
    bool is_origin_Set() const;
    bool is_origin_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QList<OAIProtocolMapperRepresentation> getProtocolMappers() const;
    void setProtocolMappers(const QList<OAIProtocolMapperRepresentation> &protocol_mappers);
    bool is_protocol_mappers_Set() const;
    bool is_protocol_mappers_Valid() const;

    bool isPublicClient() const;
    void setPublicClient(const bool &public_client);
    bool is_public_client_Set() const;
    bool is_public_client_Valid() const;

    QList<QString> getRedirectUris() const;
    void setRedirectUris(const QList<QString> &redirect_uris);
    bool is_redirect_uris_Set() const;
    bool is_redirect_uris_Valid() const;

    QMap<QString, QJsonValue> getRegisteredNodes() const;
    void setRegisteredNodes(const QMap<QString, QJsonValue> &registered_nodes);
    bool is_registered_nodes_Set() const;
    bool is_registered_nodes_Valid() const;

    QString getRegistrationAccessToken() const;
    void setRegistrationAccessToken(const QString &registration_access_token);
    bool is_registration_access_token_Set() const;
    bool is_registration_access_token_Valid() const;

    QString getRootUrl() const;
    void setRootUrl(const QString &root_url);
    bool is_root_url_Set() const;
    bool is_root_url_Valid() const;

    QString getSecret() const;
    void setSecret(const QString &secret);
    bool is_secret_Set() const;
    bool is_secret_Valid() const;

    bool isServiceAccountsEnabled() const;
    void setServiceAccountsEnabled(const bool &service_accounts_enabled);
    bool is_service_accounts_enabled_Set() const;
    bool is_service_accounts_enabled_Valid() const;

    bool isStandardFlowEnabled() const;
    void setStandardFlowEnabled(const bool &standard_flow_enabled);
    bool is_standard_flow_enabled_Set() const;
    bool is_standard_flow_enabled_Valid() const;

    bool isSurrogateAuthRequired() const;
    void setSurrogateAuthRequired(const bool &surrogate_auth_required);
    bool is_surrogate_auth_required_Set() const;
    bool is_surrogate_auth_required_Valid() const;

    QList<QString> getWebOrigins() const;
    void setWebOrigins(const QList<QString> &web_origins);
    bool is_web_origins_Set() const;
    bool is_web_origins_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_access;
    bool m_access_isSet;
    bool m_access_isValid;

    QString m_admin_url;
    bool m_admin_url_isSet;
    bool m_admin_url_isValid;

    bool m_always_display_in_console;
    bool m_always_display_in_console_isSet;
    bool m_always_display_in_console_isValid;

    QMap<QString, QJsonValue> m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QMap<QString, QJsonValue> m_authentication_flow_binding_overrides;
    bool m_authentication_flow_binding_overrides_isSet;
    bool m_authentication_flow_binding_overrides_isValid;

    bool m_authorization_services_enabled;
    bool m_authorization_services_enabled_isSet;
    bool m_authorization_services_enabled_isValid;

    OAIResourceServerRepresentation m_authorization_settings;
    bool m_authorization_settings_isSet;
    bool m_authorization_settings_isValid;

    QString m_base_url;
    bool m_base_url_isSet;
    bool m_base_url_isValid;

    bool m_bearer_only;
    bool m_bearer_only_isSet;
    bool m_bearer_only_isValid;

    QString m_client_authenticator_type;
    bool m_client_authenticator_type_isSet;
    bool m_client_authenticator_type_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    bool m_consent_required;
    bool m_consent_required_isSet;
    bool m_consent_required_isValid;

    QList<QString> m_default_client_scopes;
    bool m_default_client_scopes_isSet;
    bool m_default_client_scopes_isValid;

    QList<QString> m_default_roles;
    bool m_default_roles_isSet;
    bool m_default_roles_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_direct_access_grants_enabled;
    bool m_direct_access_grants_enabled_isSet;
    bool m_direct_access_grants_enabled_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    bool m_frontchannel_logout;
    bool m_frontchannel_logout_isSet;
    bool m_frontchannel_logout_isValid;

    bool m_full_scope_allowed;
    bool m_full_scope_allowed_isSet;
    bool m_full_scope_allowed_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_implicit_flow_enabled;
    bool m_implicit_flow_enabled_isSet;
    bool m_implicit_flow_enabled_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_node_re_registration_timeout;
    bool m_node_re_registration_timeout_isSet;
    bool m_node_re_registration_timeout_isValid;

    qint32 m_not_before;
    bool m_not_before_isSet;
    bool m_not_before_isValid;

    QList<QString> m_optional_client_scopes;
    bool m_optional_client_scopes_isSet;
    bool m_optional_client_scopes_isValid;

    QString m_origin;
    bool m_origin_isSet;
    bool m_origin_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QList<OAIProtocolMapperRepresentation> m_protocol_mappers;
    bool m_protocol_mappers_isSet;
    bool m_protocol_mappers_isValid;

    bool m_public_client;
    bool m_public_client_isSet;
    bool m_public_client_isValid;

    QList<QString> m_redirect_uris;
    bool m_redirect_uris_isSet;
    bool m_redirect_uris_isValid;

    QMap<QString, QJsonValue> m_registered_nodes;
    bool m_registered_nodes_isSet;
    bool m_registered_nodes_isValid;

    QString m_registration_access_token;
    bool m_registration_access_token_isSet;
    bool m_registration_access_token_isValid;

    QString m_root_url;
    bool m_root_url_isSet;
    bool m_root_url_isValid;

    QString m_secret;
    bool m_secret_isSet;
    bool m_secret_isValid;

    bool m_service_accounts_enabled;
    bool m_service_accounts_enabled_isSet;
    bool m_service_accounts_enabled_isValid;

    bool m_standard_flow_enabled;
    bool m_standard_flow_enabled_isSet;
    bool m_standard_flow_enabled_isValid;

    bool m_surrogate_auth_required;
    bool m_surrogate_auth_required_isSet;
    bool m_surrogate_auth_required_isValid;

    QList<QString> m_web_origins;
    bool m_web_origins_isSet;
    bool m_web_origins_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClientRepresentation)

#endif // OAIClientRepresentation_H
