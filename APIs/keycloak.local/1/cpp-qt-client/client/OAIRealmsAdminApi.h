/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRealmsAdminApi_H
#define OAI_OAIRealmsAdminApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdminEventRepresentation.h"
#include "OAIClientRepresentation.h"
#include "OAIClientScopeRepresentation.h"
#include "OAIEventRepresentation.h"
#include "OAIGroupRepresentation.h"
#include "OAIManagementPermissionReference.h"
#include "OAIPartialImportRepresentation.h"
#include "OAIRealmEventsConfigRepresentation.h"
#include "OAIRealmRepresentation.h"
#include "OAITestLdapConnectionRepresentation.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRealmsAdminApi : public QObject {
    Q_OBJECT

public:
    OAIRealmsAdminApi(const int timeOut = 0);
    ~OAIRealmsAdminApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmAdminEventsDelete(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  auth_client QString [optional]
    * @param[in]  auth_ip_address QString [optional]
    * @param[in]  auth_realm QString [optional]
    * @param[in]  auth_user QString [optional]
    * @param[in]  date_from QString [optional]
    * @param[in]  date_to QString [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  operation_types QList<QString> [optional]
    * @param[in]  resource_path QString [optional]
    * @param[in]  resource_types QList<QString> [optional]
    */
    virtual void realmAdminEventsGet(const QString &realm, const ::OpenAPI::OptionalParam<QString> &auth_client = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_realm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &operation_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &resource_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &resource_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmClearKeysCachePost(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmClearRealmCachePost(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmClearUserCachePost(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  body QString [required]
    */
    virtual void realmClientDescriptionConverterPost(const QString &realm, const QString &body);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmClientSessionStatsGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmCredentialRegistratorsGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  client_scope_id QString [required]
    */
    virtual void realmDefaultDefaultClientScopesClientScopeIdDelete(const QString &realm, const QString &client_scope_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  client_scope_id QString [required]
    */
    virtual void realmDefaultDefaultClientScopesClientScopeIdPut(const QString &realm, const QString &client_scope_id);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmDefaultDefaultClientScopesGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmDefaultGroupsGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void realmDefaultGroupsGroupIdDelete(const QString &realm, const QString &group_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void realmDefaultGroupsGroupIdPut(const QString &realm, const QString &group_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  client_scope_id QString [required]
    */
    virtual void realmDefaultOptionalClientScopesClientScopeIdDelete(const QString &realm, const QString &client_scope_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  client_scope_id QString [required]
    */
    virtual void realmDefaultOptionalClientScopesClientScopeIdPut(const QString &realm, const QString &client_scope_id);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmDefaultOptionalClientScopesGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmDelete(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmEventsConfigGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_realm_events_config_representation OAIRealmEventsConfigRepresentation [required]
    */
    virtual void realmEventsConfigPut(const QString &realm, const OAIRealmEventsConfigRepresentation &oai_realm_events_config_representation);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmEventsDelete(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  client QString [optional]
    * @param[in]  date_from QString [optional]
    * @param[in]  date_to QString [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  ip_address QString [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  type QList<QString> [optional]
    * @param[in]  user QString [optional]
    */
    virtual void realmEventsGet(const QString &realm, const ::OpenAPI::OptionalParam<QString> &client = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  path QString [required]
    */
    virtual void realmGroupByPathPathGet(const QString &realm, const QString &path);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmLogoutAllPost(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  export_clients bool [optional]
    * @param[in]  export_groups_and_roles bool [optional]
    */
    virtual void realmPartialExportPost(const QString &realm, const ::OpenAPI::OptionalParam<bool> &export_clients = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &export_groups_and_roles = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_partial_import_representation OAIPartialImportRepresentation [required]
    */
    virtual void realmPartialImportPost(const QString &realm, const OAIPartialImportRepresentation &oai_partial_import_representation);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmPushRevocationPost(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_realm_representation OAIRealmRepresentation [required]
    */
    virtual void realmPut(const QString &realm, const OAIRealmRepresentation &oai_realm_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  session QString [required]
    */
    virtual void realmSessionsSessionDelete(const QString &realm, const QString &session);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_test_ldap_connection_representation OAITestLdapConnectionRepresentation [required]
    */
    virtual void realmTestLDAPConnectionPost(const QString &realm, const OAITestLdapConnectionRepresentation &oai_test_ldap_connection_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    */
    virtual void realmTestSMTPConnectionPost(const QString &realm, const QMap<QString, QJsonValue> &request_body);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmUsersManagementPermissionsGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_management_permission_reference OAIManagementPermissionReference [required]
    */
    virtual void realmUsersManagementPermissionsPut(const QString &realm, const OAIManagementPermissionReference &oai_management_permission_reference);

    /**
    * @param[in]  oai_realm_representation OAIRealmRepresentation [required]
    */
    virtual void rootPost(const OAIRealmRepresentation &oai_realm_representation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmAdminEventsDeleteCallback(OAIHttpRequestWorker *worker);
    void realmAdminEventsGetCallback(OAIHttpRequestWorker *worker);
    void realmClearKeysCachePostCallback(OAIHttpRequestWorker *worker);
    void realmClearRealmCachePostCallback(OAIHttpRequestWorker *worker);
    void realmClearUserCachePostCallback(OAIHttpRequestWorker *worker);
    void realmClientDescriptionConverterPostCallback(OAIHttpRequestWorker *worker);
    void realmClientSessionStatsGetCallback(OAIHttpRequestWorker *worker);
    void realmCredentialRegistratorsGetCallback(OAIHttpRequestWorker *worker);
    void realmDefaultDefaultClientScopesClientScopeIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmDefaultDefaultClientScopesClientScopeIdPutCallback(OAIHttpRequestWorker *worker);
    void realmDefaultDefaultClientScopesGetCallback(OAIHttpRequestWorker *worker);
    void realmDefaultGroupsGetCallback(OAIHttpRequestWorker *worker);
    void realmDefaultGroupsGroupIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmDefaultGroupsGroupIdPutCallback(OAIHttpRequestWorker *worker);
    void realmDefaultOptionalClientScopesClientScopeIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmDefaultOptionalClientScopesClientScopeIdPutCallback(OAIHttpRequestWorker *worker);
    void realmDefaultOptionalClientScopesGetCallback(OAIHttpRequestWorker *worker);
    void realmDeleteCallback(OAIHttpRequestWorker *worker);
    void realmEventsConfigGetCallback(OAIHttpRequestWorker *worker);
    void realmEventsConfigPutCallback(OAIHttpRequestWorker *worker);
    void realmEventsDeleteCallback(OAIHttpRequestWorker *worker);
    void realmEventsGetCallback(OAIHttpRequestWorker *worker);
    void realmGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupByPathPathGetCallback(OAIHttpRequestWorker *worker);
    void realmLogoutAllPostCallback(OAIHttpRequestWorker *worker);
    void realmPartialExportPostCallback(OAIHttpRequestWorker *worker);
    void realmPartialImportPostCallback(OAIHttpRequestWorker *worker);
    void realmPushRevocationPostCallback(OAIHttpRequestWorker *worker);
    void realmPutCallback(OAIHttpRequestWorker *worker);
    void realmSessionsSessionDeleteCallback(OAIHttpRequestWorker *worker);
    void realmTestLDAPConnectionPostCallback(OAIHttpRequestWorker *worker);
    void realmTestSMTPConnectionPostCallback(OAIHttpRequestWorker *worker);
    void realmUsersManagementPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersManagementPermissionsPutCallback(OAIHttpRequestWorker *worker);
    void rootPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmAdminEventsDeleteSignal();
    void realmAdminEventsGetSignal(QList<OAIAdminEventRepresentation> summary);
    void realmClearKeysCachePostSignal();
    void realmClearRealmCachePostSignal();
    void realmClearUserCachePostSignal();
    void realmClientDescriptionConverterPostSignal(OAIClientRepresentation summary);
    void realmClientSessionStatsGetSignal(QList<QMap<QString, QJsonValue>> summary);
    void realmCredentialRegistratorsGetSignal(QList<QString> summary);
    void realmDefaultDefaultClientScopesClientScopeIdDeleteSignal();
    void realmDefaultDefaultClientScopesClientScopeIdPutSignal();
    void realmDefaultDefaultClientScopesGetSignal(QList<OAIClientScopeRepresentation> summary);
    void realmDefaultGroupsGetSignal(QList<OAIGroupRepresentation> summary);
    void realmDefaultGroupsGroupIdDeleteSignal();
    void realmDefaultGroupsGroupIdPutSignal();
    void realmDefaultOptionalClientScopesClientScopeIdDeleteSignal();
    void realmDefaultOptionalClientScopesClientScopeIdPutSignal();
    void realmDefaultOptionalClientScopesGetSignal(QList<OAIClientScopeRepresentation> summary);
    void realmDeleteSignal();
    void realmEventsConfigGetSignal(OAIRealmEventsConfigRepresentation summary);
    void realmEventsConfigPutSignal();
    void realmEventsDeleteSignal();
    void realmEventsGetSignal(QList<OAIEventRepresentation> summary);
    void realmGetSignal(OAIRealmRepresentation summary);
    void realmGroupByPathPathGetSignal(OAIGroupRepresentation summary);
    void realmLogoutAllPostSignal();
    void realmPartialExportPostSignal(OAIRealmRepresentation summary);
    void realmPartialImportPostSignal();
    void realmPushRevocationPostSignal();
    void realmPutSignal();
    void realmSessionsSessionDeleteSignal();
    void realmTestLDAPConnectionPostSignal();
    void realmTestSMTPConnectionPostSignal();
    void realmUsersManagementPermissionsGetSignal(OAIManagementPermissionReference summary);
    void realmUsersManagementPermissionsPutSignal(OAIManagementPermissionReference summary);
    void rootPostSignal();


    void realmAdminEventsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmAdminEventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdminEventRepresentation> summary);
    void realmClearKeysCachePostSignalFull(OAIHttpRequestWorker *worker);
    void realmClearRealmCachePostSignalFull(OAIHttpRequestWorker *worker);
    void realmClearUserCachePostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientDescriptionConverterPostSignalFull(OAIHttpRequestWorker *worker, OAIClientRepresentation summary);
    void realmClientSessionStatsGetSignalFull(OAIHttpRequestWorker *worker, QList<QMap<QString, QJsonValue>> summary);
    void realmCredentialRegistratorsGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void realmDefaultDefaultClientScopesClientScopeIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmDefaultDefaultClientScopesClientScopeIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmDefaultDefaultClientScopesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIClientScopeRepresentation> summary);
    void realmDefaultGroupsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupRepresentation> summary);
    void realmDefaultGroupsGroupIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmDefaultGroupsGroupIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmDefaultOptionalClientScopesClientScopeIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmDefaultOptionalClientScopesClientScopeIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmDefaultOptionalClientScopesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIClientScopeRepresentation> summary);
    void realmDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmEventsConfigGetSignalFull(OAIHttpRequestWorker *worker, OAIRealmEventsConfigRepresentation summary);
    void realmEventsConfigPutSignalFull(OAIHttpRequestWorker *worker);
    void realmEventsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmEventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEventRepresentation> summary);
    void realmGetSignalFull(OAIHttpRequestWorker *worker, OAIRealmRepresentation summary);
    void realmGroupByPathPathGetSignalFull(OAIHttpRequestWorker *worker, OAIGroupRepresentation summary);
    void realmLogoutAllPostSignalFull(OAIHttpRequestWorker *worker);
    void realmPartialExportPostSignalFull(OAIHttpRequestWorker *worker, OAIRealmRepresentation summary);
    void realmPartialImportPostSignalFull(OAIHttpRequestWorker *worker);
    void realmPushRevocationPostSignalFull(OAIHttpRequestWorker *worker);
    void realmPutSignalFull(OAIHttpRequestWorker *worker);
    void realmSessionsSessionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmTestLDAPConnectionPostSignalFull(OAIHttpRequestWorker *worker);
    void realmTestSMTPConnectionPostSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersManagementPermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmUsersManagementPermissionsPutSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void rootPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmAdminEventsDeleteSignalError() instead")
    void realmAdminEventsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAdminEventsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAdminEventsGetSignalError() instead")
    void realmAdminEventsGetSignalE(QList<OAIAdminEventRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAdminEventsGetSignalError(QList<OAIAdminEventRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClearKeysCachePostSignalError() instead")
    void realmClearKeysCachePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClearKeysCachePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClearRealmCachePostSignalError() instead")
    void realmClearRealmCachePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClearRealmCachePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClearUserCachePostSignalError() instead")
    void realmClearUserCachePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClearUserCachePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientDescriptionConverterPostSignalError() instead")
    void realmClientDescriptionConverterPostSignalE(OAIClientRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientDescriptionConverterPostSignalError(OAIClientRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientSessionStatsGetSignalError() instead")
    void realmClientSessionStatsGetSignalE(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientSessionStatsGetSignalError(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmCredentialRegistratorsGetSignalError() instead")
    void realmCredentialRegistratorsGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmCredentialRegistratorsGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultDefaultClientScopesClientScopeIdDeleteSignalError() instead")
    void realmDefaultDefaultClientScopesClientScopeIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultDefaultClientScopesClientScopeIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultDefaultClientScopesClientScopeIdPutSignalError() instead")
    void realmDefaultDefaultClientScopesClientScopeIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultDefaultClientScopesClientScopeIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultDefaultClientScopesGetSignalError() instead")
    void realmDefaultDefaultClientScopesGetSignalE(QList<OAIClientScopeRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultDefaultClientScopesGetSignalError(QList<OAIClientScopeRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultGroupsGetSignalError() instead")
    void realmDefaultGroupsGetSignalE(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultGroupsGetSignalError(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultGroupsGroupIdDeleteSignalError() instead")
    void realmDefaultGroupsGroupIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultGroupsGroupIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultGroupsGroupIdPutSignalError() instead")
    void realmDefaultGroupsGroupIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultGroupsGroupIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultOptionalClientScopesClientScopeIdDeleteSignalError() instead")
    void realmDefaultOptionalClientScopesClientScopeIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultOptionalClientScopesClientScopeIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultOptionalClientScopesClientScopeIdPutSignalError() instead")
    void realmDefaultOptionalClientScopesClientScopeIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultOptionalClientScopesClientScopeIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultOptionalClientScopesGetSignalError() instead")
    void realmDefaultOptionalClientScopesGetSignalE(QList<OAIClientScopeRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultOptionalClientScopesGetSignalError(QList<OAIClientScopeRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDeleteSignalError() instead")
    void realmDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmEventsConfigGetSignalError() instead")
    void realmEventsConfigGetSignalE(OAIRealmEventsConfigRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmEventsConfigGetSignalError(OAIRealmEventsConfigRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmEventsConfigPutSignalError() instead")
    void realmEventsConfigPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmEventsConfigPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmEventsDeleteSignalError() instead")
    void realmEventsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmEventsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmEventsGetSignalError() instead")
    void realmEventsGetSignalE(QList<OAIEventRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmEventsGetSignalError(QList<OAIEventRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGetSignalError() instead")
    void realmGetSignalE(OAIRealmRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGetSignalError(OAIRealmRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupByPathPathGetSignalError() instead")
    void realmGroupByPathPathGetSignalE(OAIGroupRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupByPathPathGetSignalError(OAIGroupRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmLogoutAllPostSignalError() instead")
    void realmLogoutAllPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmLogoutAllPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmPartialExportPostSignalError() instead")
    void realmPartialExportPostSignalE(OAIRealmRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmPartialExportPostSignalError(OAIRealmRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmPartialImportPostSignalError() instead")
    void realmPartialImportPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmPartialImportPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmPushRevocationPostSignalError() instead")
    void realmPushRevocationPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmPushRevocationPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmPutSignalError() instead")
    void realmPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmSessionsSessionDeleteSignalError() instead")
    void realmSessionsSessionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmSessionsSessionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmTestLDAPConnectionPostSignalError() instead")
    void realmTestLDAPConnectionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmTestLDAPConnectionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmTestSMTPConnectionPostSignalError() instead")
    void realmTestSMTPConnectionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmTestSMTPConnectionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersManagementPermissionsGetSignalError() instead")
    void realmUsersManagementPermissionsGetSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersManagementPermissionsGetSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersManagementPermissionsPutSignalError() instead")
    void realmUsersManagementPermissionsPutSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersManagementPermissionsPutSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rootPostSignalError() instead")
    void rootPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rootPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmAdminEventsDeleteSignalErrorFull() instead")
    void realmAdminEventsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAdminEventsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAdminEventsGetSignalErrorFull() instead")
    void realmAdminEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAdminEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClearKeysCachePostSignalErrorFull() instead")
    void realmClearKeysCachePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClearKeysCachePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClearRealmCachePostSignalErrorFull() instead")
    void realmClearRealmCachePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClearRealmCachePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClearUserCachePostSignalErrorFull() instead")
    void realmClearUserCachePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClearUserCachePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientDescriptionConverterPostSignalErrorFull() instead")
    void realmClientDescriptionConverterPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientDescriptionConverterPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientSessionStatsGetSignalErrorFull() instead")
    void realmClientSessionStatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientSessionStatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmCredentialRegistratorsGetSignalErrorFull() instead")
    void realmCredentialRegistratorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmCredentialRegistratorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultDefaultClientScopesClientScopeIdDeleteSignalErrorFull() instead")
    void realmDefaultDefaultClientScopesClientScopeIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultDefaultClientScopesClientScopeIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultDefaultClientScopesClientScopeIdPutSignalErrorFull() instead")
    void realmDefaultDefaultClientScopesClientScopeIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultDefaultClientScopesClientScopeIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultDefaultClientScopesGetSignalErrorFull() instead")
    void realmDefaultDefaultClientScopesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultDefaultClientScopesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultGroupsGetSignalErrorFull() instead")
    void realmDefaultGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultGroupsGroupIdDeleteSignalErrorFull() instead")
    void realmDefaultGroupsGroupIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultGroupsGroupIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultGroupsGroupIdPutSignalErrorFull() instead")
    void realmDefaultGroupsGroupIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultGroupsGroupIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultOptionalClientScopesClientScopeIdDeleteSignalErrorFull() instead")
    void realmDefaultOptionalClientScopesClientScopeIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultOptionalClientScopesClientScopeIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultOptionalClientScopesClientScopeIdPutSignalErrorFull() instead")
    void realmDefaultOptionalClientScopesClientScopeIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultOptionalClientScopesClientScopeIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDefaultOptionalClientScopesGetSignalErrorFull() instead")
    void realmDefaultOptionalClientScopesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDefaultOptionalClientScopesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmDeleteSignalErrorFull() instead")
    void realmDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmEventsConfigGetSignalErrorFull() instead")
    void realmEventsConfigGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmEventsConfigGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmEventsConfigPutSignalErrorFull() instead")
    void realmEventsConfigPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmEventsConfigPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmEventsDeleteSignalErrorFull() instead")
    void realmEventsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmEventsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmEventsGetSignalErrorFull() instead")
    void realmEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGetSignalErrorFull() instead")
    void realmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupByPathPathGetSignalErrorFull() instead")
    void realmGroupByPathPathGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupByPathPathGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmLogoutAllPostSignalErrorFull() instead")
    void realmLogoutAllPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmLogoutAllPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmPartialExportPostSignalErrorFull() instead")
    void realmPartialExportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmPartialExportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmPartialImportPostSignalErrorFull() instead")
    void realmPartialImportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmPartialImportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmPushRevocationPostSignalErrorFull() instead")
    void realmPushRevocationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmPushRevocationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmPutSignalErrorFull() instead")
    void realmPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmSessionsSessionDeleteSignalErrorFull() instead")
    void realmSessionsSessionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmSessionsSessionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmTestLDAPConnectionPostSignalErrorFull() instead")
    void realmTestLDAPConnectionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmTestLDAPConnectionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmTestSMTPConnectionPostSignalErrorFull() instead")
    void realmTestSMTPConnectionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmTestSMTPConnectionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersManagementPermissionsGetSignalErrorFull() instead")
    void realmUsersManagementPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersManagementPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersManagementPermissionsPutSignalErrorFull() instead")
    void realmUsersManagementPermissionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersManagementPermissionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rootPostSignalErrorFull() instead")
    void rootPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rootPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
