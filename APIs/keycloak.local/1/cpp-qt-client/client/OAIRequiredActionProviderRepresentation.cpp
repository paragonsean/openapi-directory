/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequiredActionProviderRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequiredActionProviderRepresentation::OAIRequiredActionProviderRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequiredActionProviderRepresentation::OAIRequiredActionProviderRepresentation() {
    this->initializeModel();
}

OAIRequiredActionProviderRepresentation::~OAIRequiredActionProviderRepresentation() {}

void OAIRequiredActionProviderRepresentation::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_default_action_isSet = false;
    m_default_action_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;
}

void OAIRequiredActionProviderRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequiredActionProviderRepresentation::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_default_action_isValid = ::OpenAPI::fromJsonValue(m_default_action, json[QString("defaultAction")]);
    m_default_action_isSet = !json[QString("defaultAction")].isNull() && m_default_action_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;
}

QString OAIRequiredActionProviderRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequiredActionProviderRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_default_action_isSet) {
        obj.insert(QString("defaultAction"), ::OpenAPI::toJsonValue(m_default_action));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    return obj;
}

QString OAIRequiredActionProviderRepresentation::getAlias() const {
    return m_alias;
}
void OAIRequiredActionProviderRepresentation::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIRequiredActionProviderRepresentation::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIRequiredActionProviderRepresentation::is_alias_Valid() const{
    return m_alias_isValid;
}

QMap<QString, QJsonValue> OAIRequiredActionProviderRepresentation::getConfig() const {
    return m_config;
}
void OAIRequiredActionProviderRepresentation::setConfig(const QMap<QString, QJsonValue> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIRequiredActionProviderRepresentation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIRequiredActionProviderRepresentation::is_config_Valid() const{
    return m_config_isValid;
}

bool OAIRequiredActionProviderRepresentation::isDefaultAction() const {
    return m_default_action;
}
void OAIRequiredActionProviderRepresentation::setDefaultAction(const bool &default_action) {
    m_default_action = default_action;
    m_default_action_isSet = true;
}

bool OAIRequiredActionProviderRepresentation::is_default_action_Set() const{
    return m_default_action_isSet;
}

bool OAIRequiredActionProviderRepresentation::is_default_action_Valid() const{
    return m_default_action_isValid;
}

bool OAIRequiredActionProviderRepresentation::isEnabled() const {
    return m_enabled;
}
void OAIRequiredActionProviderRepresentation::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIRequiredActionProviderRepresentation::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIRequiredActionProviderRepresentation::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIRequiredActionProviderRepresentation::getName() const {
    return m_name;
}
void OAIRequiredActionProviderRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRequiredActionProviderRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRequiredActionProviderRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRequiredActionProviderRepresentation::getPriority() const {
    return m_priority;
}
void OAIRequiredActionProviderRepresentation::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIRequiredActionProviderRepresentation::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIRequiredActionProviderRepresentation::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIRequiredActionProviderRepresentation::getProviderId() const {
    return m_provider_id;
}
void OAIRequiredActionProviderRepresentation::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIRequiredActionProviderRepresentation::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIRequiredActionProviderRepresentation::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

bool OAIRequiredActionProviderRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequiredActionProviderRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
