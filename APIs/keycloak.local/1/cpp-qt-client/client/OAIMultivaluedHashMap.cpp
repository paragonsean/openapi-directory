/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultivaluedHashMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultivaluedHashMap::OAIMultivaluedHashMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultivaluedHashMap::OAIMultivaluedHashMap() {
    this->initializeModel();
}

OAIMultivaluedHashMap::~OAIMultivaluedHashMap() {}

void OAIMultivaluedHashMap::initializeModel() {

    m_empty_isSet = false;
    m_empty_isValid = false;

    m_load_factor_isSet = false;
    m_load_factor_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAIMultivaluedHashMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultivaluedHashMap::fromJsonObject(QJsonObject json) {

    m_empty_isValid = ::OpenAPI::fromJsonValue(m_empty, json[QString("empty")]);
    m_empty_isSet = !json[QString("empty")].isNull() && m_empty_isValid;

    m_load_factor_isValid = ::OpenAPI::fromJsonValue(m_load_factor, json[QString("loadFactor")]);
    m_load_factor_isSet = !json[QString("loadFactor")].isNull() && m_load_factor_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;
}

QString OAIMultivaluedHashMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultivaluedHashMap::asJsonObject() const {
    QJsonObject obj;
    if (m_empty_isSet) {
        obj.insert(QString("empty"), ::OpenAPI::toJsonValue(m_empty));
    }
    if (m_load_factor_isSet) {
        obj.insert(QString("loadFactor"), ::OpenAPI::toJsonValue(m_load_factor));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

bool OAIMultivaluedHashMap::isEmpty() const {
    return m_empty;
}
void OAIMultivaluedHashMap::setEmpty(const bool &empty) {
    m_empty = empty;
    m_empty_isSet = true;
}

bool OAIMultivaluedHashMap::is_empty_Set() const{
    return m_empty_isSet;
}

bool OAIMultivaluedHashMap::is_empty_Valid() const{
    return m_empty_isValid;
}

float OAIMultivaluedHashMap::getLoadFactor() const {
    return m_load_factor;
}
void OAIMultivaluedHashMap::setLoadFactor(const float &load_factor) {
    m_load_factor = load_factor;
    m_load_factor_isSet = true;
}

bool OAIMultivaluedHashMap::is_load_factor_Set() const{
    return m_load_factor_isSet;
}

bool OAIMultivaluedHashMap::is_load_factor_Valid() const{
    return m_load_factor_isValid;
}

qint32 OAIMultivaluedHashMap::getThreshold() const {
    return m_threshold;
}
void OAIMultivaluedHashMap::setThreshold(const qint32 &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIMultivaluedHashMap::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIMultivaluedHashMap::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAIMultivaluedHashMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultivaluedHashMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
