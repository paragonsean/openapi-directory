/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRealmRepresentation.h
 *
 * 
 */

#ifndef OAIRealmRepresentation_H
#define OAIRealmRepresentation_H

#include <QJsonObject>

#include "OAIAuthenticationFlowRepresentation.h"
#include "OAIAuthenticatorConfigRepresentation.h"
#include "OAIClientRepresentation.h"
#include "OAIClientScopeRepresentation.h"
#include "OAIGroupRepresentation.h"
#include "OAIIdentityProviderMapperRepresentation.h"
#include "OAIIdentityProviderRepresentation.h"
#include "OAIMultivaluedHashMap.h"
#include "OAIProtocolMapperRepresentation.h"
#include "OAIRequiredActionProviderRepresentation.h"
#include "OAIRolesRepresentation.h"
#include "OAIScopeMappingRepresentation.h"
#include "OAIUserFederationMapperRepresentation.h"
#include "OAIUserFederationProviderRepresentation.h"
#include "OAIUserRepresentation.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuthenticationFlowRepresentation;
class OAIAuthenticatorConfigRepresentation;
class OAIClientScopeRepresentation;
class OAIClientRepresentation;
class OAIMultivaluedHashMap;
class OAIUserRepresentation;
class OAIGroupRepresentation;
class OAIIdentityProviderMapperRepresentation;
class OAIIdentityProviderRepresentation;
class OAIProtocolMapperRepresentation;
class OAIRequiredActionProviderRepresentation;
class OAIRolesRepresentation;
class OAIScopeMappingRepresentation;
class OAIUserFederationMapperRepresentation;
class OAIUserFederationProviderRepresentation;

class OAIRealmRepresentation : public OAIObject {
public:
    OAIRealmRepresentation();
    OAIRealmRepresentation(QString json);
    ~OAIRealmRepresentation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAccessCodeLifespan() const;
    void setAccessCodeLifespan(const qint32 &access_code_lifespan);
    bool is_access_code_lifespan_Set() const;
    bool is_access_code_lifespan_Valid() const;

    qint32 getAccessCodeLifespanLogin() const;
    void setAccessCodeLifespanLogin(const qint32 &access_code_lifespan_login);
    bool is_access_code_lifespan_login_Set() const;
    bool is_access_code_lifespan_login_Valid() const;

    qint32 getAccessCodeLifespanUserAction() const;
    void setAccessCodeLifespanUserAction(const qint32 &access_code_lifespan_user_action);
    bool is_access_code_lifespan_user_action_Set() const;
    bool is_access_code_lifespan_user_action_Valid() const;

    qint32 getAccessTokenLifespan() const;
    void setAccessTokenLifespan(const qint32 &access_token_lifespan);
    bool is_access_token_lifespan_Set() const;
    bool is_access_token_lifespan_Valid() const;

    qint32 getAccessTokenLifespanForImplicitFlow() const;
    void setAccessTokenLifespanForImplicitFlow(const qint32 &access_token_lifespan_for_implicit_flow);
    bool is_access_token_lifespan_for_implicit_flow_Set() const;
    bool is_access_token_lifespan_for_implicit_flow_Valid() const;

    QString getAccountTheme() const;
    void setAccountTheme(const QString &account_theme);
    bool is_account_theme_Set() const;
    bool is_account_theme_Valid() const;

    qint32 getActionTokenGeneratedByAdminLifespan() const;
    void setActionTokenGeneratedByAdminLifespan(const qint32 &action_token_generated_by_admin_lifespan);
    bool is_action_token_generated_by_admin_lifespan_Set() const;
    bool is_action_token_generated_by_admin_lifespan_Valid() const;

    qint32 getActionTokenGeneratedByUserLifespan() const;
    void setActionTokenGeneratedByUserLifespan(const qint32 &action_token_generated_by_user_lifespan);
    bool is_action_token_generated_by_user_lifespan_Set() const;
    bool is_action_token_generated_by_user_lifespan_Valid() const;

    bool isAdminEventsDetailsEnabled() const;
    void setAdminEventsDetailsEnabled(const bool &admin_events_details_enabled);
    bool is_admin_events_details_enabled_Set() const;
    bool is_admin_events_details_enabled_Valid() const;

    bool isAdminEventsEnabled() const;
    void setAdminEventsEnabled(const bool &admin_events_enabled);
    bool is_admin_events_enabled_Set() const;
    bool is_admin_events_enabled_Valid() const;

    QString getAdminTheme() const;
    void setAdminTheme(const QString &admin_theme);
    bool is_admin_theme_Set() const;
    bool is_admin_theme_Valid() const;

    QMap<QString, QJsonValue> getAttributes() const;
    void setAttributes(const QMap<QString, QJsonValue> &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QList<OAIAuthenticationFlowRepresentation> getAuthenticationFlows() const;
    void setAuthenticationFlows(const QList<OAIAuthenticationFlowRepresentation> &authentication_flows);
    bool is_authentication_flows_Set() const;
    bool is_authentication_flows_Valid() const;

    QList<OAIAuthenticatorConfigRepresentation> getAuthenticatorConfig() const;
    void setAuthenticatorConfig(const QList<OAIAuthenticatorConfigRepresentation> &authenticator_config);
    bool is_authenticator_config_Set() const;
    bool is_authenticator_config_Valid() const;

    QString getBrowserFlow() const;
    void setBrowserFlow(const QString &browser_flow);
    bool is_browser_flow_Set() const;
    bool is_browser_flow_Valid() const;

    QMap<QString, QJsonValue> getBrowserSecurityHeaders() const;
    void setBrowserSecurityHeaders(const QMap<QString, QJsonValue> &browser_security_headers);
    bool is_browser_security_headers_Set() const;
    bool is_browser_security_headers_Valid() const;

    bool isBruteForceProtected() const;
    void setBruteForceProtected(const bool &brute_force_protected);
    bool is_brute_force_protected_Set() const;
    bool is_brute_force_protected_Valid() const;

    QString getClientAuthenticationFlow() const;
    void setClientAuthenticationFlow(const QString &client_authentication_flow);
    bool is_client_authentication_flow_Set() const;
    bool is_client_authentication_flow_Valid() const;

    QMap<QString, QJsonValue> getClientScopeMappings() const;
    void setClientScopeMappings(const QMap<QString, QJsonValue> &client_scope_mappings);
    bool is_client_scope_mappings_Set() const;
    bool is_client_scope_mappings_Valid() const;

    QList<OAIClientScopeRepresentation> getClientScopes() const;
    void setClientScopes(const QList<OAIClientScopeRepresentation> &client_scopes);
    bool is_client_scopes_Set() const;
    bool is_client_scopes_Valid() const;

    qint32 getClientSessionIdleTimeout() const;
    void setClientSessionIdleTimeout(const qint32 &client_session_idle_timeout);
    bool is_client_session_idle_timeout_Set() const;
    bool is_client_session_idle_timeout_Valid() const;

    qint32 getClientSessionMaxLifespan() const;
    void setClientSessionMaxLifespan(const qint32 &client_session_max_lifespan);
    bool is_client_session_max_lifespan_Set() const;
    bool is_client_session_max_lifespan_Valid() const;

    QList<OAIClientRepresentation> getClients() const;
    void setClients(const QList<OAIClientRepresentation> &clients);
    bool is_clients_Set() const;
    bool is_clients_Valid() const;

    OAIMultivaluedHashMap getComponents() const;
    void setComponents(const OAIMultivaluedHashMap &components);
    bool is_components_Set() const;
    bool is_components_Valid() const;

    QList<QString> getDefaultDefaultClientScopes() const;
    void setDefaultDefaultClientScopes(const QList<QString> &default_default_client_scopes);
    bool is_default_default_client_scopes_Set() const;
    bool is_default_default_client_scopes_Valid() const;

    QList<QString> getDefaultGroups() const;
    void setDefaultGroups(const QList<QString> &default_groups);
    bool is_default_groups_Set() const;
    bool is_default_groups_Valid() const;

    QString getDefaultLocale() const;
    void setDefaultLocale(const QString &default_locale);
    bool is_default_locale_Set() const;
    bool is_default_locale_Valid() const;

    QList<QString> getDefaultOptionalClientScopes() const;
    void setDefaultOptionalClientScopes(const QList<QString> &default_optional_client_scopes);
    bool is_default_optional_client_scopes_Set() const;
    bool is_default_optional_client_scopes_Valid() const;

    QList<QString> getDefaultRoles() const;
    void setDefaultRoles(const QList<QString> &default_roles);
    bool is_default_roles_Set() const;
    bool is_default_roles_Valid() const;

    QString getDefaultSignatureAlgorithm() const;
    void setDefaultSignatureAlgorithm(const QString &default_signature_algorithm);
    bool is_default_signature_algorithm_Set() const;
    bool is_default_signature_algorithm_Valid() const;

    QString getDirectGrantFlow() const;
    void setDirectGrantFlow(const QString &direct_grant_flow);
    bool is_direct_grant_flow_Set() const;
    bool is_direct_grant_flow_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getDisplayNameHtml() const;
    void setDisplayNameHtml(const QString &display_name_html);
    bool is_display_name_html_Set() const;
    bool is_display_name_html_Valid() const;

    QString getDockerAuthenticationFlow() const;
    void setDockerAuthenticationFlow(const QString &docker_authentication_flow);
    bool is_docker_authentication_flow_Set() const;
    bool is_docker_authentication_flow_Valid() const;

    bool isDuplicateEmailsAllowed() const;
    void setDuplicateEmailsAllowed(const bool &duplicate_emails_allowed);
    bool is_duplicate_emails_allowed_Set() const;
    bool is_duplicate_emails_allowed_Valid() const;

    bool isEditUsernameAllowed() const;
    void setEditUsernameAllowed(const bool &edit_username_allowed);
    bool is_edit_username_allowed_Set() const;
    bool is_edit_username_allowed_Valid() const;

    QString getEmailTheme() const;
    void setEmailTheme(const QString &email_theme);
    bool is_email_theme_Set() const;
    bool is_email_theme_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QList<QString> getEnabledEventTypes() const;
    void setEnabledEventTypes(const QList<QString> &enabled_event_types);
    bool is_enabled_event_types_Set() const;
    bool is_enabled_event_types_Valid() const;

    bool isEventsEnabled() const;
    void setEventsEnabled(const bool &events_enabled);
    bool is_events_enabled_Set() const;
    bool is_events_enabled_Valid() const;

    qint64 getEventsExpiration() const;
    void setEventsExpiration(const qint64 &events_expiration);
    bool is_events_expiration_Set() const;
    bool is_events_expiration_Valid() const;

    QList<QString> getEventsListeners() const;
    void setEventsListeners(const QList<QString> &events_listeners);
    bool is_events_listeners_Set() const;
    bool is_events_listeners_Valid() const;

    qint32 getFailureFactor() const;
    void setFailureFactor(const qint32 &failure_factor);
    bool is_failure_factor_Set() const;
    bool is_failure_factor_Valid() const;

    QList<OAIUserRepresentation> getFederatedUsers() const;
    void setFederatedUsers(const QList<OAIUserRepresentation> &federated_users);
    bool is_federated_users_Set() const;
    bool is_federated_users_Valid() const;

    QList<OAIGroupRepresentation> getGroups() const;
    void setGroups(const QList<OAIGroupRepresentation> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIIdentityProviderMapperRepresentation> getIdentityProviderMappers() const;
    void setIdentityProviderMappers(const QList<OAIIdentityProviderMapperRepresentation> &identity_provider_mappers);
    bool is_identity_provider_mappers_Set() const;
    bool is_identity_provider_mappers_Valid() const;

    QList<OAIIdentityProviderRepresentation> getIdentityProviders() const;
    void setIdentityProviders(const QList<OAIIdentityProviderRepresentation> &identity_providers);
    bool is_identity_providers_Set() const;
    bool is_identity_providers_Valid() const;

    bool isInternationalizationEnabled() const;
    void setInternationalizationEnabled(const bool &internationalization_enabled);
    bool is_internationalization_enabled_Set() const;
    bool is_internationalization_enabled_Valid() const;

    QString getKeycloakVersion() const;
    void setKeycloakVersion(const QString &keycloak_version);
    bool is_keycloak_version_Set() const;
    bool is_keycloak_version_Valid() const;

    QString getLoginTheme() const;
    void setLoginTheme(const QString &login_theme);
    bool is_login_theme_Set() const;
    bool is_login_theme_Valid() const;

    bool isLoginWithEmailAllowed() const;
    void setLoginWithEmailAllowed(const bool &login_with_email_allowed);
    bool is_login_with_email_allowed_Set() const;
    bool is_login_with_email_allowed_Valid() const;

    qint32 getMaxDeltaTimeSeconds() const;
    void setMaxDeltaTimeSeconds(const qint32 &max_delta_time_seconds);
    bool is_max_delta_time_seconds_Set() const;
    bool is_max_delta_time_seconds_Valid() const;

    qint32 getMaxFailureWaitSeconds() const;
    void setMaxFailureWaitSeconds(const qint32 &max_failure_wait_seconds);
    bool is_max_failure_wait_seconds_Set() const;
    bool is_max_failure_wait_seconds_Valid() const;

    qint32 getMinimumQuickLoginWaitSeconds() const;
    void setMinimumQuickLoginWaitSeconds(const qint32 &minimum_quick_login_wait_seconds);
    bool is_minimum_quick_login_wait_seconds_Set() const;
    bool is_minimum_quick_login_wait_seconds_Valid() const;

    qint32 getNotBefore() const;
    void setNotBefore(const qint32 &not_before);
    bool is_not_before_Set() const;
    bool is_not_before_Valid() const;

    qint32 getOfflineSessionIdleTimeout() const;
    void setOfflineSessionIdleTimeout(const qint32 &offline_session_idle_timeout);
    bool is_offline_session_idle_timeout_Set() const;
    bool is_offline_session_idle_timeout_Valid() const;

    qint32 getOfflineSessionMaxLifespan() const;
    void setOfflineSessionMaxLifespan(const qint32 &offline_session_max_lifespan);
    bool is_offline_session_max_lifespan_Set() const;
    bool is_offline_session_max_lifespan_Valid() const;

    bool isOfflineSessionMaxLifespanEnabled() const;
    void setOfflineSessionMaxLifespanEnabled(const bool &offline_session_max_lifespan_enabled);
    bool is_offline_session_max_lifespan_enabled_Set() const;
    bool is_offline_session_max_lifespan_enabled_Valid() const;

    QString getOtpPolicyAlgorithm() const;
    void setOtpPolicyAlgorithm(const QString &otp_policy_algorithm);
    bool is_otp_policy_algorithm_Set() const;
    bool is_otp_policy_algorithm_Valid() const;

    qint32 getOtpPolicyDigits() const;
    void setOtpPolicyDigits(const qint32 &otp_policy_digits);
    bool is_otp_policy_digits_Set() const;
    bool is_otp_policy_digits_Valid() const;

    qint32 getOtpPolicyInitialCounter() const;
    void setOtpPolicyInitialCounter(const qint32 &otp_policy_initial_counter);
    bool is_otp_policy_initial_counter_Set() const;
    bool is_otp_policy_initial_counter_Valid() const;

    qint32 getOtpPolicyLookAheadWindow() const;
    void setOtpPolicyLookAheadWindow(const qint32 &otp_policy_look_ahead_window);
    bool is_otp_policy_look_ahead_window_Set() const;
    bool is_otp_policy_look_ahead_window_Valid() const;

    qint32 getOtpPolicyPeriod() const;
    void setOtpPolicyPeriod(const qint32 &otp_policy_period);
    bool is_otp_policy_period_Set() const;
    bool is_otp_policy_period_Valid() const;

    QString getOtpPolicyType() const;
    void setOtpPolicyType(const QString &otp_policy_type);
    bool is_otp_policy_type_Set() const;
    bool is_otp_policy_type_Valid() const;

    QList<QString> getOtpSupportedApplications() const;
    void setOtpSupportedApplications(const QList<QString> &otp_supported_applications);
    bool is_otp_supported_applications_Set() const;
    bool is_otp_supported_applications_Valid() const;

    QString getPasswordPolicy() const;
    void setPasswordPolicy(const QString &password_policy);
    bool is_password_policy_Set() const;
    bool is_password_policy_Valid() const;

    bool isPermanentLockout() const;
    void setPermanentLockout(const bool &permanent_lockout);
    bool is_permanent_lockout_Set() const;
    bool is_permanent_lockout_Valid() const;

    QList<OAIProtocolMapperRepresentation> getProtocolMappers() const;
    void setProtocolMappers(const QList<OAIProtocolMapperRepresentation> &protocol_mappers);
    bool is_protocol_mappers_Set() const;
    bool is_protocol_mappers_Valid() const;

    qint64 getQuickLoginCheckMilliSeconds() const;
    void setQuickLoginCheckMilliSeconds(const qint64 &quick_login_check_milli_seconds);
    bool is_quick_login_check_milli_seconds_Set() const;
    bool is_quick_login_check_milli_seconds_Valid() const;

    QString getRealm() const;
    void setRealm(const QString &realm);
    bool is_realm_Set() const;
    bool is_realm_Valid() const;

    qint32 getRefreshTokenMaxReuse() const;
    void setRefreshTokenMaxReuse(const qint32 &refresh_token_max_reuse);
    bool is_refresh_token_max_reuse_Set() const;
    bool is_refresh_token_max_reuse_Valid() const;

    bool isRegistrationAllowed() const;
    void setRegistrationAllowed(const bool &registration_allowed);
    bool is_registration_allowed_Set() const;
    bool is_registration_allowed_Valid() const;

    bool isRegistrationEmailAsUsername() const;
    void setRegistrationEmailAsUsername(const bool &registration_email_as_username);
    bool is_registration_email_as_username_Set() const;
    bool is_registration_email_as_username_Valid() const;

    QString getRegistrationFlow() const;
    void setRegistrationFlow(const QString &registration_flow);
    bool is_registration_flow_Set() const;
    bool is_registration_flow_Valid() const;

    bool isRememberMe() const;
    void setRememberMe(const bool &remember_me);
    bool is_remember_me_Set() const;
    bool is_remember_me_Valid() const;

    QList<OAIRequiredActionProviderRepresentation> getRequiredActions() const;
    void setRequiredActions(const QList<OAIRequiredActionProviderRepresentation> &required_actions);
    bool is_required_actions_Set() const;
    bool is_required_actions_Valid() const;

    QString getResetCredentialsFlow() const;
    void setResetCredentialsFlow(const QString &reset_credentials_flow);
    bool is_reset_credentials_flow_Set() const;
    bool is_reset_credentials_flow_Valid() const;

    bool isResetPasswordAllowed() const;
    void setResetPasswordAllowed(const bool &reset_password_allowed);
    bool is_reset_password_allowed_Set() const;
    bool is_reset_password_allowed_Valid() const;

    bool isRevokeRefreshToken() const;
    void setRevokeRefreshToken(const bool &revoke_refresh_token);
    bool is_revoke_refresh_token_Set() const;
    bool is_revoke_refresh_token_Valid() const;

    OAIRolesRepresentation getRoles() const;
    void setRoles(const OAIRolesRepresentation &roles);
    bool is_roles_Set() const;
    bool is_roles_Valid() const;

    QList<OAIScopeMappingRepresentation> getScopeMappings() const;
    void setScopeMappings(const QList<OAIScopeMappingRepresentation> &scope_mappings);
    bool is_scope_mappings_Set() const;
    bool is_scope_mappings_Valid() const;

    QMap<QString, QJsonValue> getSmtpServer() const;
    void setSmtpServer(const QMap<QString, QJsonValue> &smtp_server);
    bool is_smtp_server_Set() const;
    bool is_smtp_server_Valid() const;

    QString getSslRequired() const;
    void setSslRequired(const QString &ssl_required);
    bool is_ssl_required_Set() const;
    bool is_ssl_required_Valid() const;

    qint32 getSsoSessionIdleTimeout() const;
    void setSsoSessionIdleTimeout(const qint32 &sso_session_idle_timeout);
    bool is_sso_session_idle_timeout_Set() const;
    bool is_sso_session_idle_timeout_Valid() const;

    qint32 getSsoSessionIdleTimeoutRememberMe() const;
    void setSsoSessionIdleTimeoutRememberMe(const qint32 &sso_session_idle_timeout_remember_me);
    bool is_sso_session_idle_timeout_remember_me_Set() const;
    bool is_sso_session_idle_timeout_remember_me_Valid() const;

    qint32 getSsoSessionMaxLifespan() const;
    void setSsoSessionMaxLifespan(const qint32 &sso_session_max_lifespan);
    bool is_sso_session_max_lifespan_Set() const;
    bool is_sso_session_max_lifespan_Valid() const;

    qint32 getSsoSessionMaxLifespanRememberMe() const;
    void setSsoSessionMaxLifespanRememberMe(const qint32 &sso_session_max_lifespan_remember_me);
    bool is_sso_session_max_lifespan_remember_me_Set() const;
    bool is_sso_session_max_lifespan_remember_me_Valid() const;

    QList<QString> getSupportedLocales() const;
    void setSupportedLocales(const QList<QString> &supported_locales);
    bool is_supported_locales_Set() const;
    bool is_supported_locales_Valid() const;

    QList<OAIUserFederationMapperRepresentation> getUserFederationMappers() const;
    void setUserFederationMappers(const QList<OAIUserFederationMapperRepresentation> &user_federation_mappers);
    bool is_user_federation_mappers_Set() const;
    bool is_user_federation_mappers_Valid() const;

    QList<OAIUserFederationProviderRepresentation> getUserFederationProviders() const;
    void setUserFederationProviders(const QList<OAIUserFederationProviderRepresentation> &user_federation_providers);
    bool is_user_federation_providers_Set() const;
    bool is_user_federation_providers_Valid() const;

    bool isUserManagedAccessAllowed() const;
    void setUserManagedAccessAllowed(const bool &user_managed_access_allowed);
    bool is_user_managed_access_allowed_Set() const;
    bool is_user_managed_access_allowed_Valid() const;

    QList<OAIUserRepresentation> getUsers() const;
    void setUsers(const QList<OAIUserRepresentation> &users);
    bool is_users_Set() const;
    bool is_users_Valid() const;

    bool isVerifyEmail() const;
    void setVerifyEmail(const bool &verify_email);
    bool is_verify_email_Set() const;
    bool is_verify_email_Valid() const;

    qint32 getWaitIncrementSeconds() const;
    void setWaitIncrementSeconds(const qint32 &wait_increment_seconds);
    bool is_wait_increment_seconds_Set() const;
    bool is_wait_increment_seconds_Valid() const;

    QList<QString> getWebAuthnPolicyAcceptableAaguids() const;
    void setWebAuthnPolicyAcceptableAaguids(const QList<QString> &web_authn_policy_acceptable_aaguids);
    bool is_web_authn_policy_acceptable_aaguids_Set() const;
    bool is_web_authn_policy_acceptable_aaguids_Valid() const;

    QString getWebAuthnPolicyAttestationConveyancePreference() const;
    void setWebAuthnPolicyAttestationConveyancePreference(const QString &web_authn_policy_attestation_conveyance_preference);
    bool is_web_authn_policy_attestation_conveyance_preference_Set() const;
    bool is_web_authn_policy_attestation_conveyance_preference_Valid() const;

    QString getWebAuthnPolicyAuthenticatorAttachment() const;
    void setWebAuthnPolicyAuthenticatorAttachment(const QString &web_authn_policy_authenticator_attachment);
    bool is_web_authn_policy_authenticator_attachment_Set() const;
    bool is_web_authn_policy_authenticator_attachment_Valid() const;

    bool isWebAuthnPolicyAvoidSameAuthenticatorRegister() const;
    void setWebAuthnPolicyAvoidSameAuthenticatorRegister(const bool &web_authn_policy_avoid_same_authenticator_register);
    bool is_web_authn_policy_avoid_same_authenticator_register_Set() const;
    bool is_web_authn_policy_avoid_same_authenticator_register_Valid() const;

    qint32 getWebAuthnPolicyCreateTimeout() const;
    void setWebAuthnPolicyCreateTimeout(const qint32 &web_authn_policy_create_timeout);
    bool is_web_authn_policy_create_timeout_Set() const;
    bool is_web_authn_policy_create_timeout_Valid() const;

    QList<QString> getWebAuthnPolicyPasswordlessAcceptableAaguids() const;
    void setWebAuthnPolicyPasswordlessAcceptableAaguids(const QList<QString> &web_authn_policy_passwordless_acceptable_aaguids);
    bool is_web_authn_policy_passwordless_acceptable_aaguids_Set() const;
    bool is_web_authn_policy_passwordless_acceptable_aaguids_Valid() const;

    QString getWebAuthnPolicyPasswordlessAttestationConveyancePreference() const;
    void setWebAuthnPolicyPasswordlessAttestationConveyancePreference(const QString &web_authn_policy_passwordless_attestation_conveyance_preference);
    bool is_web_authn_policy_passwordless_attestation_conveyance_preference_Set() const;
    bool is_web_authn_policy_passwordless_attestation_conveyance_preference_Valid() const;

    QString getWebAuthnPolicyPasswordlessAuthenticatorAttachment() const;
    void setWebAuthnPolicyPasswordlessAuthenticatorAttachment(const QString &web_authn_policy_passwordless_authenticator_attachment);
    bool is_web_authn_policy_passwordless_authenticator_attachment_Set() const;
    bool is_web_authn_policy_passwordless_authenticator_attachment_Valid() const;

    bool isWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister() const;
    void setWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister(const bool &web_authn_policy_passwordless_avoid_same_authenticator_register);
    bool is_web_authn_policy_passwordless_avoid_same_authenticator_register_Set() const;
    bool is_web_authn_policy_passwordless_avoid_same_authenticator_register_Valid() const;

    qint32 getWebAuthnPolicyPasswordlessCreateTimeout() const;
    void setWebAuthnPolicyPasswordlessCreateTimeout(const qint32 &web_authn_policy_passwordless_create_timeout);
    bool is_web_authn_policy_passwordless_create_timeout_Set() const;
    bool is_web_authn_policy_passwordless_create_timeout_Valid() const;

    QString getWebAuthnPolicyPasswordlessRequireResidentKey() const;
    void setWebAuthnPolicyPasswordlessRequireResidentKey(const QString &web_authn_policy_passwordless_require_resident_key);
    bool is_web_authn_policy_passwordless_require_resident_key_Set() const;
    bool is_web_authn_policy_passwordless_require_resident_key_Valid() const;

    QString getWebAuthnPolicyPasswordlessRpEntityName() const;
    void setWebAuthnPolicyPasswordlessRpEntityName(const QString &web_authn_policy_passwordless_rp_entity_name);
    bool is_web_authn_policy_passwordless_rp_entity_name_Set() const;
    bool is_web_authn_policy_passwordless_rp_entity_name_Valid() const;

    QString getWebAuthnPolicyPasswordlessRpId() const;
    void setWebAuthnPolicyPasswordlessRpId(const QString &web_authn_policy_passwordless_rp_id);
    bool is_web_authn_policy_passwordless_rp_id_Set() const;
    bool is_web_authn_policy_passwordless_rp_id_Valid() const;

    QList<QString> getWebAuthnPolicyPasswordlessSignatureAlgorithms() const;
    void setWebAuthnPolicyPasswordlessSignatureAlgorithms(const QList<QString> &web_authn_policy_passwordless_signature_algorithms);
    bool is_web_authn_policy_passwordless_signature_algorithms_Set() const;
    bool is_web_authn_policy_passwordless_signature_algorithms_Valid() const;

    QString getWebAuthnPolicyPasswordlessUserVerificationRequirement() const;
    void setWebAuthnPolicyPasswordlessUserVerificationRequirement(const QString &web_authn_policy_passwordless_user_verification_requirement);
    bool is_web_authn_policy_passwordless_user_verification_requirement_Set() const;
    bool is_web_authn_policy_passwordless_user_verification_requirement_Valid() const;

    QString getWebAuthnPolicyRequireResidentKey() const;
    void setWebAuthnPolicyRequireResidentKey(const QString &web_authn_policy_require_resident_key);
    bool is_web_authn_policy_require_resident_key_Set() const;
    bool is_web_authn_policy_require_resident_key_Valid() const;

    QString getWebAuthnPolicyRpEntityName() const;
    void setWebAuthnPolicyRpEntityName(const QString &web_authn_policy_rp_entity_name);
    bool is_web_authn_policy_rp_entity_name_Set() const;
    bool is_web_authn_policy_rp_entity_name_Valid() const;

    QString getWebAuthnPolicyRpId() const;
    void setWebAuthnPolicyRpId(const QString &web_authn_policy_rp_id);
    bool is_web_authn_policy_rp_id_Set() const;
    bool is_web_authn_policy_rp_id_Valid() const;

    QList<QString> getWebAuthnPolicySignatureAlgorithms() const;
    void setWebAuthnPolicySignatureAlgorithms(const QList<QString> &web_authn_policy_signature_algorithms);
    bool is_web_authn_policy_signature_algorithms_Set() const;
    bool is_web_authn_policy_signature_algorithms_Valid() const;

    QString getWebAuthnPolicyUserVerificationRequirement() const;
    void setWebAuthnPolicyUserVerificationRequirement(const QString &web_authn_policy_user_verification_requirement);
    bool is_web_authn_policy_user_verification_requirement_Set() const;
    bool is_web_authn_policy_user_verification_requirement_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_access_code_lifespan;
    bool m_access_code_lifespan_isSet;
    bool m_access_code_lifespan_isValid;

    qint32 m_access_code_lifespan_login;
    bool m_access_code_lifespan_login_isSet;
    bool m_access_code_lifespan_login_isValid;

    qint32 m_access_code_lifespan_user_action;
    bool m_access_code_lifespan_user_action_isSet;
    bool m_access_code_lifespan_user_action_isValid;

    qint32 m_access_token_lifespan;
    bool m_access_token_lifespan_isSet;
    bool m_access_token_lifespan_isValid;

    qint32 m_access_token_lifespan_for_implicit_flow;
    bool m_access_token_lifespan_for_implicit_flow_isSet;
    bool m_access_token_lifespan_for_implicit_flow_isValid;

    QString m_account_theme;
    bool m_account_theme_isSet;
    bool m_account_theme_isValid;

    qint32 m_action_token_generated_by_admin_lifespan;
    bool m_action_token_generated_by_admin_lifespan_isSet;
    bool m_action_token_generated_by_admin_lifespan_isValid;

    qint32 m_action_token_generated_by_user_lifespan;
    bool m_action_token_generated_by_user_lifespan_isSet;
    bool m_action_token_generated_by_user_lifespan_isValid;

    bool m_admin_events_details_enabled;
    bool m_admin_events_details_enabled_isSet;
    bool m_admin_events_details_enabled_isValid;

    bool m_admin_events_enabled;
    bool m_admin_events_enabled_isSet;
    bool m_admin_events_enabled_isValid;

    QString m_admin_theme;
    bool m_admin_theme_isSet;
    bool m_admin_theme_isValid;

    QMap<QString, QJsonValue> m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QList<OAIAuthenticationFlowRepresentation> m_authentication_flows;
    bool m_authentication_flows_isSet;
    bool m_authentication_flows_isValid;

    QList<OAIAuthenticatorConfigRepresentation> m_authenticator_config;
    bool m_authenticator_config_isSet;
    bool m_authenticator_config_isValid;

    QString m_browser_flow;
    bool m_browser_flow_isSet;
    bool m_browser_flow_isValid;

    QMap<QString, QJsonValue> m_browser_security_headers;
    bool m_browser_security_headers_isSet;
    bool m_browser_security_headers_isValid;

    bool m_brute_force_protected;
    bool m_brute_force_protected_isSet;
    bool m_brute_force_protected_isValid;

    QString m_client_authentication_flow;
    bool m_client_authentication_flow_isSet;
    bool m_client_authentication_flow_isValid;

    QMap<QString, QJsonValue> m_client_scope_mappings;
    bool m_client_scope_mappings_isSet;
    bool m_client_scope_mappings_isValid;

    QList<OAIClientScopeRepresentation> m_client_scopes;
    bool m_client_scopes_isSet;
    bool m_client_scopes_isValid;

    qint32 m_client_session_idle_timeout;
    bool m_client_session_idle_timeout_isSet;
    bool m_client_session_idle_timeout_isValid;

    qint32 m_client_session_max_lifespan;
    bool m_client_session_max_lifespan_isSet;
    bool m_client_session_max_lifespan_isValid;

    QList<OAIClientRepresentation> m_clients;
    bool m_clients_isSet;
    bool m_clients_isValid;

    OAIMultivaluedHashMap m_components;
    bool m_components_isSet;
    bool m_components_isValid;

    QList<QString> m_default_default_client_scopes;
    bool m_default_default_client_scopes_isSet;
    bool m_default_default_client_scopes_isValid;

    QList<QString> m_default_groups;
    bool m_default_groups_isSet;
    bool m_default_groups_isValid;

    QString m_default_locale;
    bool m_default_locale_isSet;
    bool m_default_locale_isValid;

    QList<QString> m_default_optional_client_scopes;
    bool m_default_optional_client_scopes_isSet;
    bool m_default_optional_client_scopes_isValid;

    QList<QString> m_default_roles;
    bool m_default_roles_isSet;
    bool m_default_roles_isValid;

    QString m_default_signature_algorithm;
    bool m_default_signature_algorithm_isSet;
    bool m_default_signature_algorithm_isValid;

    QString m_direct_grant_flow;
    bool m_direct_grant_flow_isSet;
    bool m_direct_grant_flow_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_display_name_html;
    bool m_display_name_html_isSet;
    bool m_display_name_html_isValid;

    QString m_docker_authentication_flow;
    bool m_docker_authentication_flow_isSet;
    bool m_docker_authentication_flow_isValid;

    bool m_duplicate_emails_allowed;
    bool m_duplicate_emails_allowed_isSet;
    bool m_duplicate_emails_allowed_isValid;

    bool m_edit_username_allowed;
    bool m_edit_username_allowed_isSet;
    bool m_edit_username_allowed_isValid;

    QString m_email_theme;
    bool m_email_theme_isSet;
    bool m_email_theme_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QList<QString> m_enabled_event_types;
    bool m_enabled_event_types_isSet;
    bool m_enabled_event_types_isValid;

    bool m_events_enabled;
    bool m_events_enabled_isSet;
    bool m_events_enabled_isValid;

    qint64 m_events_expiration;
    bool m_events_expiration_isSet;
    bool m_events_expiration_isValid;

    QList<QString> m_events_listeners;
    bool m_events_listeners_isSet;
    bool m_events_listeners_isValid;

    qint32 m_failure_factor;
    bool m_failure_factor_isSet;
    bool m_failure_factor_isValid;

    QList<OAIUserRepresentation> m_federated_users;
    bool m_federated_users_isSet;
    bool m_federated_users_isValid;

    QList<OAIGroupRepresentation> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIIdentityProviderMapperRepresentation> m_identity_provider_mappers;
    bool m_identity_provider_mappers_isSet;
    bool m_identity_provider_mappers_isValid;

    QList<OAIIdentityProviderRepresentation> m_identity_providers;
    bool m_identity_providers_isSet;
    bool m_identity_providers_isValid;

    bool m_internationalization_enabled;
    bool m_internationalization_enabled_isSet;
    bool m_internationalization_enabled_isValid;

    QString m_keycloak_version;
    bool m_keycloak_version_isSet;
    bool m_keycloak_version_isValid;

    QString m_login_theme;
    bool m_login_theme_isSet;
    bool m_login_theme_isValid;

    bool m_login_with_email_allowed;
    bool m_login_with_email_allowed_isSet;
    bool m_login_with_email_allowed_isValid;

    qint32 m_max_delta_time_seconds;
    bool m_max_delta_time_seconds_isSet;
    bool m_max_delta_time_seconds_isValid;

    qint32 m_max_failure_wait_seconds;
    bool m_max_failure_wait_seconds_isSet;
    bool m_max_failure_wait_seconds_isValid;

    qint32 m_minimum_quick_login_wait_seconds;
    bool m_minimum_quick_login_wait_seconds_isSet;
    bool m_minimum_quick_login_wait_seconds_isValid;

    qint32 m_not_before;
    bool m_not_before_isSet;
    bool m_not_before_isValid;

    qint32 m_offline_session_idle_timeout;
    bool m_offline_session_idle_timeout_isSet;
    bool m_offline_session_idle_timeout_isValid;

    qint32 m_offline_session_max_lifespan;
    bool m_offline_session_max_lifespan_isSet;
    bool m_offline_session_max_lifespan_isValid;

    bool m_offline_session_max_lifespan_enabled;
    bool m_offline_session_max_lifespan_enabled_isSet;
    bool m_offline_session_max_lifespan_enabled_isValid;

    QString m_otp_policy_algorithm;
    bool m_otp_policy_algorithm_isSet;
    bool m_otp_policy_algorithm_isValid;

    qint32 m_otp_policy_digits;
    bool m_otp_policy_digits_isSet;
    bool m_otp_policy_digits_isValid;

    qint32 m_otp_policy_initial_counter;
    bool m_otp_policy_initial_counter_isSet;
    bool m_otp_policy_initial_counter_isValid;

    qint32 m_otp_policy_look_ahead_window;
    bool m_otp_policy_look_ahead_window_isSet;
    bool m_otp_policy_look_ahead_window_isValid;

    qint32 m_otp_policy_period;
    bool m_otp_policy_period_isSet;
    bool m_otp_policy_period_isValid;

    QString m_otp_policy_type;
    bool m_otp_policy_type_isSet;
    bool m_otp_policy_type_isValid;

    QList<QString> m_otp_supported_applications;
    bool m_otp_supported_applications_isSet;
    bool m_otp_supported_applications_isValid;

    QString m_password_policy;
    bool m_password_policy_isSet;
    bool m_password_policy_isValid;

    bool m_permanent_lockout;
    bool m_permanent_lockout_isSet;
    bool m_permanent_lockout_isValid;

    QList<OAIProtocolMapperRepresentation> m_protocol_mappers;
    bool m_protocol_mappers_isSet;
    bool m_protocol_mappers_isValid;

    qint64 m_quick_login_check_milli_seconds;
    bool m_quick_login_check_milli_seconds_isSet;
    bool m_quick_login_check_milli_seconds_isValid;

    QString m_realm;
    bool m_realm_isSet;
    bool m_realm_isValid;

    qint32 m_refresh_token_max_reuse;
    bool m_refresh_token_max_reuse_isSet;
    bool m_refresh_token_max_reuse_isValid;

    bool m_registration_allowed;
    bool m_registration_allowed_isSet;
    bool m_registration_allowed_isValid;

    bool m_registration_email_as_username;
    bool m_registration_email_as_username_isSet;
    bool m_registration_email_as_username_isValid;

    QString m_registration_flow;
    bool m_registration_flow_isSet;
    bool m_registration_flow_isValid;

    bool m_remember_me;
    bool m_remember_me_isSet;
    bool m_remember_me_isValid;

    QList<OAIRequiredActionProviderRepresentation> m_required_actions;
    bool m_required_actions_isSet;
    bool m_required_actions_isValid;

    QString m_reset_credentials_flow;
    bool m_reset_credentials_flow_isSet;
    bool m_reset_credentials_flow_isValid;

    bool m_reset_password_allowed;
    bool m_reset_password_allowed_isSet;
    bool m_reset_password_allowed_isValid;

    bool m_revoke_refresh_token;
    bool m_revoke_refresh_token_isSet;
    bool m_revoke_refresh_token_isValid;

    OAIRolesRepresentation m_roles;
    bool m_roles_isSet;
    bool m_roles_isValid;

    QList<OAIScopeMappingRepresentation> m_scope_mappings;
    bool m_scope_mappings_isSet;
    bool m_scope_mappings_isValid;

    QMap<QString, QJsonValue> m_smtp_server;
    bool m_smtp_server_isSet;
    bool m_smtp_server_isValid;

    QString m_ssl_required;
    bool m_ssl_required_isSet;
    bool m_ssl_required_isValid;

    qint32 m_sso_session_idle_timeout;
    bool m_sso_session_idle_timeout_isSet;
    bool m_sso_session_idle_timeout_isValid;

    qint32 m_sso_session_idle_timeout_remember_me;
    bool m_sso_session_idle_timeout_remember_me_isSet;
    bool m_sso_session_idle_timeout_remember_me_isValid;

    qint32 m_sso_session_max_lifespan;
    bool m_sso_session_max_lifespan_isSet;
    bool m_sso_session_max_lifespan_isValid;

    qint32 m_sso_session_max_lifespan_remember_me;
    bool m_sso_session_max_lifespan_remember_me_isSet;
    bool m_sso_session_max_lifespan_remember_me_isValid;

    QList<QString> m_supported_locales;
    bool m_supported_locales_isSet;
    bool m_supported_locales_isValid;

    QList<OAIUserFederationMapperRepresentation> m_user_federation_mappers;
    bool m_user_federation_mappers_isSet;
    bool m_user_federation_mappers_isValid;

    QList<OAIUserFederationProviderRepresentation> m_user_federation_providers;
    bool m_user_federation_providers_isSet;
    bool m_user_federation_providers_isValid;

    bool m_user_managed_access_allowed;
    bool m_user_managed_access_allowed_isSet;
    bool m_user_managed_access_allowed_isValid;

    QList<OAIUserRepresentation> m_users;
    bool m_users_isSet;
    bool m_users_isValid;

    bool m_verify_email;
    bool m_verify_email_isSet;
    bool m_verify_email_isValid;

    qint32 m_wait_increment_seconds;
    bool m_wait_increment_seconds_isSet;
    bool m_wait_increment_seconds_isValid;

    QList<QString> m_web_authn_policy_acceptable_aaguids;
    bool m_web_authn_policy_acceptable_aaguids_isSet;
    bool m_web_authn_policy_acceptable_aaguids_isValid;

    QString m_web_authn_policy_attestation_conveyance_preference;
    bool m_web_authn_policy_attestation_conveyance_preference_isSet;
    bool m_web_authn_policy_attestation_conveyance_preference_isValid;

    QString m_web_authn_policy_authenticator_attachment;
    bool m_web_authn_policy_authenticator_attachment_isSet;
    bool m_web_authn_policy_authenticator_attachment_isValid;

    bool m_web_authn_policy_avoid_same_authenticator_register;
    bool m_web_authn_policy_avoid_same_authenticator_register_isSet;
    bool m_web_authn_policy_avoid_same_authenticator_register_isValid;

    qint32 m_web_authn_policy_create_timeout;
    bool m_web_authn_policy_create_timeout_isSet;
    bool m_web_authn_policy_create_timeout_isValid;

    QList<QString> m_web_authn_policy_passwordless_acceptable_aaguids;
    bool m_web_authn_policy_passwordless_acceptable_aaguids_isSet;
    bool m_web_authn_policy_passwordless_acceptable_aaguids_isValid;

    QString m_web_authn_policy_passwordless_attestation_conveyance_preference;
    bool m_web_authn_policy_passwordless_attestation_conveyance_preference_isSet;
    bool m_web_authn_policy_passwordless_attestation_conveyance_preference_isValid;

    QString m_web_authn_policy_passwordless_authenticator_attachment;
    bool m_web_authn_policy_passwordless_authenticator_attachment_isSet;
    bool m_web_authn_policy_passwordless_authenticator_attachment_isValid;

    bool m_web_authn_policy_passwordless_avoid_same_authenticator_register;
    bool m_web_authn_policy_passwordless_avoid_same_authenticator_register_isSet;
    bool m_web_authn_policy_passwordless_avoid_same_authenticator_register_isValid;

    qint32 m_web_authn_policy_passwordless_create_timeout;
    bool m_web_authn_policy_passwordless_create_timeout_isSet;
    bool m_web_authn_policy_passwordless_create_timeout_isValid;

    QString m_web_authn_policy_passwordless_require_resident_key;
    bool m_web_authn_policy_passwordless_require_resident_key_isSet;
    bool m_web_authn_policy_passwordless_require_resident_key_isValid;

    QString m_web_authn_policy_passwordless_rp_entity_name;
    bool m_web_authn_policy_passwordless_rp_entity_name_isSet;
    bool m_web_authn_policy_passwordless_rp_entity_name_isValid;

    QString m_web_authn_policy_passwordless_rp_id;
    bool m_web_authn_policy_passwordless_rp_id_isSet;
    bool m_web_authn_policy_passwordless_rp_id_isValid;

    QList<QString> m_web_authn_policy_passwordless_signature_algorithms;
    bool m_web_authn_policy_passwordless_signature_algorithms_isSet;
    bool m_web_authn_policy_passwordless_signature_algorithms_isValid;

    QString m_web_authn_policy_passwordless_user_verification_requirement;
    bool m_web_authn_policy_passwordless_user_verification_requirement_isSet;
    bool m_web_authn_policy_passwordless_user_verification_requirement_isValid;

    QString m_web_authn_policy_require_resident_key;
    bool m_web_authn_policy_require_resident_key_isSet;
    bool m_web_authn_policy_require_resident_key_isValid;

    QString m_web_authn_policy_rp_entity_name;
    bool m_web_authn_policy_rp_entity_name_isSet;
    bool m_web_authn_policy_rp_entity_name_isValid;

    QString m_web_authn_policy_rp_id;
    bool m_web_authn_policy_rp_id_isSet;
    bool m_web_authn_policy_rp_id_isValid;

    QList<QString> m_web_authn_policy_signature_algorithms;
    bool m_web_authn_policy_signature_algorithms_isSet;
    bool m_web_authn_policy_signature_algorithms_isValid;

    QString m_web_authn_policy_user_verification_requirement;
    bool m_web_authn_policy_user_verification_requirement_isSet;
    bool m_web_authn_policy_user_verification_requirement_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRealmRepresentation)

#endif // OAIRealmRepresentation_H
