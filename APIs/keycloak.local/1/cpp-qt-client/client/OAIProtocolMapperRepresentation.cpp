/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtocolMapperRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtocolMapperRepresentation::OAIProtocolMapperRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtocolMapperRepresentation::OAIProtocolMapperRepresentation() {
    this->initializeModel();
}

OAIProtocolMapperRepresentation::~OAIProtocolMapperRepresentation() {}

void OAIProtocolMapperRepresentation::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_protocol_mapper_isSet = false;
    m_protocol_mapper_isValid = false;
}

void OAIProtocolMapperRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtocolMapperRepresentation::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_protocol_mapper_isValid = ::OpenAPI::fromJsonValue(m_protocol_mapper, json[QString("protocolMapper")]);
    m_protocol_mapper_isSet = !json[QString("protocolMapper")].isNull() && m_protocol_mapper_isValid;
}

QString OAIProtocolMapperRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtocolMapperRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_protocol_mapper_isSet) {
        obj.insert(QString("protocolMapper"), ::OpenAPI::toJsonValue(m_protocol_mapper));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIProtocolMapperRepresentation::getConfig() const {
    return m_config;
}
void OAIProtocolMapperRepresentation::setConfig(const QMap<QString, QJsonValue> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIProtocolMapperRepresentation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIProtocolMapperRepresentation::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIProtocolMapperRepresentation::getId() const {
    return m_id;
}
void OAIProtocolMapperRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProtocolMapperRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProtocolMapperRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProtocolMapperRepresentation::getName() const {
    return m_name;
}
void OAIProtocolMapperRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProtocolMapperRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProtocolMapperRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProtocolMapperRepresentation::getProtocol() const {
    return m_protocol;
}
void OAIProtocolMapperRepresentation::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIProtocolMapperRepresentation::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIProtocolMapperRepresentation::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIProtocolMapperRepresentation::getProtocolMapper() const {
    return m_protocol_mapper;
}
void OAIProtocolMapperRepresentation::setProtocolMapper(const QString &protocol_mapper) {
    m_protocol_mapper = protocol_mapper;
    m_protocol_mapper_isSet = true;
}

bool OAIProtocolMapperRepresentation::is_protocol_mapper_Set() const{
    return m_protocol_mapper_isSet;
}

bool OAIProtocolMapperRepresentation::is_protocol_mapper_Valid() const{
    return m_protocol_mapper_isValid;
}

bool OAIProtocolMapperRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_mapper_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtocolMapperRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
