/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeysMetadataRepresentation_KeyMetadataRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeysMetadataRepresentation_KeyMetadataRepresentation::OAIKeysMetadataRepresentation_KeyMetadataRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeysMetadataRepresentation_KeyMetadataRepresentation::OAIKeysMetadataRepresentation_KeyMetadataRepresentation() {
    this->initializeModel();
}

OAIKeysMetadataRepresentation_KeyMetadataRepresentation::~OAIKeysMetadataRepresentation_KeyMetadataRepresentation() {}

void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_kid_isSet = false;
    m_kid_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_provider_priority_isSet = false;
    m_provider_priority_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_kid_isValid = ::OpenAPI::fromJsonValue(m_kid, json[QString("kid")]);
    m_kid_isSet = !json[QString("kid")].isNull() && m_kid_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_provider_priority_isValid = ::OpenAPI::fromJsonValue(m_provider_priority, json[QString("providerPriority")]);
    m_provider_priority_isSet = !json[QString("providerPriority")].isNull() && m_provider_priority_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIKeysMetadataRepresentation_KeyMetadataRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeysMetadataRepresentation_KeyMetadataRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_kid_isSet) {
        obj.insert(QString("kid"), ::OpenAPI::toJsonValue(m_kid));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_provider_priority_isSet) {
        obj.insert(QString("providerPriority"), ::OpenAPI::toJsonValue(m_provider_priority));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIKeysMetadataRepresentation_KeyMetadataRepresentation::getAlgorithm() const {
    return m_algorithm;
}
void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QString OAIKeysMetadataRepresentation_KeyMetadataRepresentation::getCertificate() const {
    return m_certificate;
}
void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIKeysMetadataRepresentation_KeyMetadataRepresentation::getKid() const {
    return m_kid;
}
void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::setKid(const QString &kid) {
    m_kid = kid;
    m_kid_isSet = true;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_kid_Set() const{
    return m_kid_isSet;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_kid_Valid() const{
    return m_kid_isValid;
}

QString OAIKeysMetadataRepresentation_KeyMetadataRepresentation::getProviderId() const {
    return m_provider_id;
}
void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

qint64 OAIKeysMetadataRepresentation_KeyMetadataRepresentation::getProviderPriority() const {
    return m_provider_priority;
}
void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::setProviderPriority(const qint64 &provider_priority) {
    m_provider_priority = provider_priority;
    m_provider_priority_isSet = true;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_provider_priority_Set() const{
    return m_provider_priority_isSet;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_provider_priority_Valid() const{
    return m_provider_priority_isValid;
}

QString OAIKeysMetadataRepresentation_KeyMetadataRepresentation::getPublicKey() const {
    return m_public_key;
}
void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIKeysMetadataRepresentation_KeyMetadataRepresentation::getStatus() const {
    return m_status;
}
void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIKeysMetadataRepresentation_KeyMetadataRepresentation::getType() const {
    return m_type;
}
void OAIKeysMetadataRepresentation_KeyMetadataRepresentation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeysMetadataRepresentation_KeyMetadataRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
