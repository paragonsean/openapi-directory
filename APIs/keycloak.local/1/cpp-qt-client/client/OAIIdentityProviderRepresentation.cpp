/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityProviderRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityProviderRepresentation::OAIIdentityProviderRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityProviderRepresentation::OAIIdentityProviderRepresentation() {
    this->initializeModel();
}

OAIIdentityProviderRepresentation::~OAIIdentityProviderRepresentation() {}

void OAIIdentityProviderRepresentation::initializeModel() {

    m_add_read_token_role_on_create_isSet = false;
    m_add_read_token_role_on_create_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_first_broker_login_flow_alias_isSet = false;
    m_first_broker_login_flow_alias_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_link_only_isSet = false;
    m_link_only_isValid = false;

    m_post_broker_login_flow_alias_isSet = false;
    m_post_broker_login_flow_alias_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_store_token_isSet = false;
    m_store_token_isValid = false;

    m_trust_email_isSet = false;
    m_trust_email_isValid = false;
}

void OAIIdentityProviderRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityProviderRepresentation::fromJsonObject(QJsonObject json) {

    m_add_read_token_role_on_create_isValid = ::OpenAPI::fromJsonValue(m_add_read_token_role_on_create, json[QString("addReadTokenRoleOnCreate")]);
    m_add_read_token_role_on_create_isSet = !json[QString("addReadTokenRoleOnCreate")].isNull() && m_add_read_token_role_on_create_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_first_broker_login_flow_alias_isValid = ::OpenAPI::fromJsonValue(m_first_broker_login_flow_alias, json[QString("firstBrokerLoginFlowAlias")]);
    m_first_broker_login_flow_alias_isSet = !json[QString("firstBrokerLoginFlowAlias")].isNull() && m_first_broker_login_flow_alias_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalId")]);
    m_internal_id_isSet = !json[QString("internalId")].isNull() && m_internal_id_isValid;

    m_link_only_isValid = ::OpenAPI::fromJsonValue(m_link_only, json[QString("linkOnly")]);
    m_link_only_isSet = !json[QString("linkOnly")].isNull() && m_link_only_isValid;

    m_post_broker_login_flow_alias_isValid = ::OpenAPI::fromJsonValue(m_post_broker_login_flow_alias, json[QString("postBrokerLoginFlowAlias")]);
    m_post_broker_login_flow_alias_isSet = !json[QString("postBrokerLoginFlowAlias")].isNull() && m_post_broker_login_flow_alias_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_store_token_isValid = ::OpenAPI::fromJsonValue(m_store_token, json[QString("storeToken")]);
    m_store_token_isSet = !json[QString("storeToken")].isNull() && m_store_token_isValid;

    m_trust_email_isValid = ::OpenAPI::fromJsonValue(m_trust_email, json[QString("trustEmail")]);
    m_trust_email_isSet = !json[QString("trustEmail")].isNull() && m_trust_email_isValid;
}

QString OAIIdentityProviderRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityProviderRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_add_read_token_role_on_create_isSet) {
        obj.insert(QString("addReadTokenRoleOnCreate"), ::OpenAPI::toJsonValue(m_add_read_token_role_on_create));
    }
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_first_broker_login_flow_alias_isSet) {
        obj.insert(QString("firstBrokerLoginFlowAlias"), ::OpenAPI::toJsonValue(m_first_broker_login_flow_alias));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalId"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_link_only_isSet) {
        obj.insert(QString("linkOnly"), ::OpenAPI::toJsonValue(m_link_only));
    }
    if (m_post_broker_login_flow_alias_isSet) {
        obj.insert(QString("postBrokerLoginFlowAlias"), ::OpenAPI::toJsonValue(m_post_broker_login_flow_alias));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_store_token_isSet) {
        obj.insert(QString("storeToken"), ::OpenAPI::toJsonValue(m_store_token));
    }
    if (m_trust_email_isSet) {
        obj.insert(QString("trustEmail"), ::OpenAPI::toJsonValue(m_trust_email));
    }
    return obj;
}

bool OAIIdentityProviderRepresentation::isAddReadTokenRoleOnCreate() const {
    return m_add_read_token_role_on_create;
}
void OAIIdentityProviderRepresentation::setAddReadTokenRoleOnCreate(const bool &add_read_token_role_on_create) {
    m_add_read_token_role_on_create = add_read_token_role_on_create;
    m_add_read_token_role_on_create_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_add_read_token_role_on_create_Set() const{
    return m_add_read_token_role_on_create_isSet;
}

bool OAIIdentityProviderRepresentation::is_add_read_token_role_on_create_Valid() const{
    return m_add_read_token_role_on_create_isValid;
}

QString OAIIdentityProviderRepresentation::getAlias() const {
    return m_alias;
}
void OAIIdentityProviderRepresentation::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIIdentityProviderRepresentation::is_alias_Valid() const{
    return m_alias_isValid;
}

QMap<QString, QJsonValue> OAIIdentityProviderRepresentation::getConfig() const {
    return m_config;
}
void OAIIdentityProviderRepresentation::setConfig(const QMap<QString, QJsonValue> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIIdentityProviderRepresentation::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIIdentityProviderRepresentation::getDisplayName() const {
    return m_display_name;
}
void OAIIdentityProviderRepresentation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIIdentityProviderRepresentation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIIdentityProviderRepresentation::isEnabled() const {
    return m_enabled;
}
void OAIIdentityProviderRepresentation::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIIdentityProviderRepresentation::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIIdentityProviderRepresentation::getFirstBrokerLoginFlowAlias() const {
    return m_first_broker_login_flow_alias;
}
void OAIIdentityProviderRepresentation::setFirstBrokerLoginFlowAlias(const QString &first_broker_login_flow_alias) {
    m_first_broker_login_flow_alias = first_broker_login_flow_alias;
    m_first_broker_login_flow_alias_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_first_broker_login_flow_alias_Set() const{
    return m_first_broker_login_flow_alias_isSet;
}

bool OAIIdentityProviderRepresentation::is_first_broker_login_flow_alias_Valid() const{
    return m_first_broker_login_flow_alias_isValid;
}

QString OAIIdentityProviderRepresentation::getInternalId() const {
    return m_internal_id;
}
void OAIIdentityProviderRepresentation::setInternalId(const QString &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAIIdentityProviderRepresentation::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

bool OAIIdentityProviderRepresentation::isLinkOnly() const {
    return m_link_only;
}
void OAIIdentityProviderRepresentation::setLinkOnly(const bool &link_only) {
    m_link_only = link_only;
    m_link_only_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_link_only_Set() const{
    return m_link_only_isSet;
}

bool OAIIdentityProviderRepresentation::is_link_only_Valid() const{
    return m_link_only_isValid;
}

QString OAIIdentityProviderRepresentation::getPostBrokerLoginFlowAlias() const {
    return m_post_broker_login_flow_alias;
}
void OAIIdentityProviderRepresentation::setPostBrokerLoginFlowAlias(const QString &post_broker_login_flow_alias) {
    m_post_broker_login_flow_alias = post_broker_login_flow_alias;
    m_post_broker_login_flow_alias_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_post_broker_login_flow_alias_Set() const{
    return m_post_broker_login_flow_alias_isSet;
}

bool OAIIdentityProviderRepresentation::is_post_broker_login_flow_alias_Valid() const{
    return m_post_broker_login_flow_alias_isValid;
}

QString OAIIdentityProviderRepresentation::getProviderId() const {
    return m_provider_id;
}
void OAIIdentityProviderRepresentation::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIIdentityProviderRepresentation::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

bool OAIIdentityProviderRepresentation::isStoreToken() const {
    return m_store_token;
}
void OAIIdentityProviderRepresentation::setStoreToken(const bool &store_token) {
    m_store_token = store_token;
    m_store_token_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_store_token_Set() const{
    return m_store_token_isSet;
}

bool OAIIdentityProviderRepresentation::is_store_token_Valid() const{
    return m_store_token_isValid;
}

bool OAIIdentityProviderRepresentation::isTrustEmail() const {
    return m_trust_email;
}
void OAIIdentityProviderRepresentation::setTrustEmail(const bool &trust_email) {
    m_trust_email = trust_email;
    m_trust_email_isSet = true;
}

bool OAIIdentityProviderRepresentation::is_trust_email_Set() const{
    return m_trust_email_isSet;
}

bool OAIIdentityProviderRepresentation::is_trust_email_Valid() const{
    return m_trust_email_isValid;
}

bool OAIIdentityProviderRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_read_token_role_on_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_broker_login_flow_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_broker_login_flow_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityProviderRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
