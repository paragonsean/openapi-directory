/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceRepresentation::OAIResourceRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceRepresentation::OAIResourceRepresentation() {
    this->initializeModel();
}

OAIResourceRepresentation::~OAIResourceRepresentation() {}

void OAIResourceRepresentation::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_uri_isSet = false;
    m_icon_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_managed_access_isSet = false;
    m_owner_managed_access_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uris_isSet = false;
    m_uris_isValid = false;
}

void OAIResourceRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceRepresentation::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_icon_uri_isValid = ::OpenAPI::fromJsonValue(m_icon_uri, json[QString("icon_uri")]);
    m_icon_uri_isSet = !json[QString("icon_uri")].isNull() && m_icon_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_managed_access_isValid = ::OpenAPI::fromJsonValue(m_owner_managed_access, json[QString("ownerManagedAccess")]);
    m_owner_managed_access_isSet = !json[QString("ownerManagedAccess")].isNull() && m_owner_managed_access_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uris_isValid = ::OpenAPI::fromJsonValue(m_uris, json[QString("uris")]);
    m_uris_isSet = !json[QString("uris")].isNull() && m_uris_isValid;
}

QString OAIResourceRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_uri_isSet) {
        obj.insert(QString("icon_uri"), ::OpenAPI::toJsonValue(m_icon_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_managed_access_isSet) {
        obj.insert(QString("ownerManagedAccess"), ::OpenAPI::toJsonValue(m_owner_managed_access));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uris.size() > 0) {
        obj.insert(QString("uris"), ::OpenAPI::toJsonValue(m_uris));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIResourceRepresentation::getAttributes() const {
    return m_attributes;
}
void OAIResourceRepresentation::setAttributes(const QMap<QString, QJsonValue> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIResourceRepresentation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIResourceRepresentation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIResourceRepresentation::getDisplayName() const {
    return m_display_name;
}
void OAIResourceRepresentation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIResourceRepresentation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIResourceRepresentation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIResourceRepresentation::getIconUri() const {
    return m_icon_uri;
}
void OAIResourceRepresentation::setIconUri(const QString &icon_uri) {
    m_icon_uri = icon_uri;
    m_icon_uri_isSet = true;
}

bool OAIResourceRepresentation::is_icon_uri_Set() const{
    return m_icon_uri_isSet;
}

bool OAIResourceRepresentation::is_icon_uri_Valid() const{
    return m_icon_uri_isValid;
}

QString OAIResourceRepresentation::getId() const {
    return m_id;
}
void OAIResourceRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResourceRepresentation::getName() const {
    return m_name;
}
void OAIResourceRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIResourceRepresentation::isOwnerManagedAccess() const {
    return m_owner_managed_access;
}
void OAIResourceRepresentation::setOwnerManagedAccess(const bool &owner_managed_access) {
    m_owner_managed_access = owner_managed_access;
    m_owner_managed_access_isSet = true;
}

bool OAIResourceRepresentation::is_owner_managed_access_Set() const{
    return m_owner_managed_access_isSet;
}

bool OAIResourceRepresentation::is_owner_managed_access_Valid() const{
    return m_owner_managed_access_isValid;
}

QList<OAIScopeRepresentation> OAIResourceRepresentation::getScopes() const {
    return m_scopes;
}
void OAIResourceRepresentation::setScopes(const QList<OAIScopeRepresentation> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIResourceRepresentation::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIResourceRepresentation::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIResourceRepresentation::getType() const {
    return m_type;
}
void OAIResourceRepresentation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceRepresentation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceRepresentation::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIResourceRepresentation::getUris() const {
    return m_uris;
}
void OAIResourceRepresentation::setUris(const QList<QString> &uris) {
    m_uris = uris;
    m_uris_isSet = true;
}

bool OAIResourceRepresentation::is_uris_Set() const{
    return m_uris_isSet;
}

bool OAIResourceRepresentation::is_uris_Valid() const{
    return m_uris_isValid;
}

bool OAIResourceRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_managed_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
