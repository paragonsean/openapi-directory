/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientRoleMappingsApi_H
#define OAI_OAIClientRoleMappingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRoleRepresentation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientRoleMappingsApi : public QObject {
    Q_OBJECT

public:
    OAIClientRoleMappingsApi(const int timeOut = 0);
    ~OAIClientRoleMappingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmGroupsIdRoleMappingsClientsClientAvailableGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmGroupsIdRoleMappingsClientsClientCompositeGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmGroupsIdRoleMappingsClientsClientDelete(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmGroupsIdRoleMappingsClientsClientGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmGroupsIdRoleMappingsClientsClientPost(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmUsersIdRoleMappingsClientsClientAvailableGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmUsersIdRoleMappingsClientsClientCompositeGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmUsersIdRoleMappingsClientsClientDelete(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmUsersIdRoleMappingsClientsClientGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmUsersIdRoleMappingsClientsClientPost(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmGroupsIdRoleMappingsClientsClientAvailableGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsClientsClientCompositeGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsClientsClientDeleteCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsClientsClientGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsClientsClientPostCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsClientsClientAvailableGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsClientsClientCompositeGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsClientsClientDeleteCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsClientsClientGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsClientsClientPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmGroupsIdRoleMappingsClientsClientAvailableGetSignal(QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsClientsClientCompositeGetSignal(QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsClientsClientDeleteSignal();
    void realmGroupsIdRoleMappingsClientsClientGetSignal(QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsClientsClientPostSignal();
    void realmUsersIdRoleMappingsClientsClientAvailableGetSignal(QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsClientsClientCompositeGetSignal(QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsClientsClientDeleteSignal();
    void realmUsersIdRoleMappingsClientsClientGetSignal(QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsClientsClientPostSignal();


    void realmGroupsIdRoleMappingsClientsClientAvailableGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsClientsClientCompositeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsClientsClientDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsClientsClientGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsClientsClientPostSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsClientsClientAvailableGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsClientsClientCompositeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsClientsClientDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsClientsClientGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsClientsClientPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientAvailableGetSignalError() instead")
    void realmGroupsIdRoleMappingsClientsClientAvailableGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientAvailableGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientCompositeGetSignalError() instead")
    void realmGroupsIdRoleMappingsClientsClientCompositeGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientCompositeGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientDeleteSignalError() instead")
    void realmGroupsIdRoleMappingsClientsClientDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientGetSignalError() instead")
    void realmGroupsIdRoleMappingsClientsClientGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientPostSignalError() instead")
    void realmGroupsIdRoleMappingsClientsClientPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientAvailableGetSignalError() instead")
    void realmUsersIdRoleMappingsClientsClientAvailableGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientAvailableGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientCompositeGetSignalError() instead")
    void realmUsersIdRoleMappingsClientsClientCompositeGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientCompositeGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientDeleteSignalError() instead")
    void realmUsersIdRoleMappingsClientsClientDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientGetSignalError() instead")
    void realmUsersIdRoleMappingsClientsClientGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientPostSignalError() instead")
    void realmUsersIdRoleMappingsClientsClientPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientAvailableGetSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsClientsClientAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientCompositeGetSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsClientsClientCompositeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientCompositeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientDeleteSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsClientsClientDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientGetSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsClientsClientGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsClientsClientPostSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsClientsClientPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsClientsClientPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientAvailableGetSignalErrorFull() instead")
    void realmUsersIdRoleMappingsClientsClientAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientCompositeGetSignalErrorFull() instead")
    void realmUsersIdRoleMappingsClientsClientCompositeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientCompositeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientDeleteSignalErrorFull() instead")
    void realmUsersIdRoleMappingsClientsClientDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientGetSignalErrorFull() instead")
    void realmUsersIdRoleMappingsClientsClientGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsClientsClientPostSignalErrorFull() instead")
    void realmUsersIdRoleMappingsClientsClientPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsClientsClientPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
