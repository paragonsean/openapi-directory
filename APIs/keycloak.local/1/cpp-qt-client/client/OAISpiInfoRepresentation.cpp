/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpiInfoRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpiInfoRepresentation::OAISpiInfoRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpiInfoRepresentation::OAISpiInfoRepresentation() {
    this->initializeModel();
}

OAISpiInfoRepresentation::~OAISpiInfoRepresentation() {}

void OAISpiInfoRepresentation::initializeModel() {

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;
}

void OAISpiInfoRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpiInfoRepresentation::fromJsonObject(QJsonObject json) {

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;
}

QString OAISpiInfoRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpiInfoRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_providers.size() > 0) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    return obj;
}

bool OAISpiInfoRepresentation::isInternal() const {
    return m_internal;
}
void OAISpiInfoRepresentation::setInternal(const bool &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAISpiInfoRepresentation::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAISpiInfoRepresentation::is_internal_Valid() const{
    return m_internal_isValid;
}

QMap<QString, QJsonValue> OAISpiInfoRepresentation::getProviders() const {
    return m_providers;
}
void OAISpiInfoRepresentation::setProviders(const QMap<QString, QJsonValue> &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAISpiInfoRepresentation::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAISpiInfoRepresentation::is_providers_Valid() const{
    return m_providers_isValid;
}

bool OAISpiInfoRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpiInfoRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
