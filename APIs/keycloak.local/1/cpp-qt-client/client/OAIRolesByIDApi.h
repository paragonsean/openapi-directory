/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRolesByIDApi_H
#define OAI_OAIRolesByIDApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIManagementPermissionReference.h"
#include "OAIRoleRepresentation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRolesByIDApi : public QObject {
    Q_OBJECT

public:
    OAIRolesByIDApi(const int timeOut = 0);
    ~OAIRolesByIDApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmRolesByIdRoleIdCompositesClientsClientGet(const QString &realm, const QString &role_id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmRolesByIdRoleIdCompositesDelete(const QString &realm, const QString &role_id, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void realmRolesByIdRoleIdCompositesGet(const QString &realm, const QString &role_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmRolesByIdRoleIdCompositesPost(const QString &realm, const QString &role_id, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void realmRolesByIdRoleIdCompositesRealmGet(const QString &realm, const QString &role_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void realmRolesByIdRoleIdDelete(const QString &realm, const QString &role_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void realmRolesByIdRoleIdGet(const QString &realm, const QString &role_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void realmRolesByIdRoleIdManagementPermissionsGet(const QString &realm, const QString &role_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_management_permission_reference OAIManagementPermissionReference [required]
    */
    virtual void realmRolesByIdRoleIdManagementPermissionsPut(const QString &realm, const QString &role_id, const OAIManagementPermissionReference &oai_management_permission_reference);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_role_representation OAIRoleRepresentation [required]
    */
    virtual void realmRolesByIdRoleIdPut(const QString &realm, const QString &role_id, const OAIRoleRepresentation &oai_role_representation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmRolesByIdRoleIdCompositesClientsClientGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdCompositesDeleteCallback(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdCompositesGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdCompositesPostCallback(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdCompositesRealmGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdManagementPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdManagementPermissionsPutCallback(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmRolesByIdRoleIdCompositesClientsClientGetSignal(QList<OAIRoleRepresentation> summary);
    void realmRolesByIdRoleIdCompositesDeleteSignal();
    void realmRolesByIdRoleIdCompositesGetSignal(QList<OAIRoleRepresentation> summary);
    void realmRolesByIdRoleIdCompositesPostSignal();
    void realmRolesByIdRoleIdCompositesRealmGetSignal(QList<OAIRoleRepresentation> summary);
    void realmRolesByIdRoleIdDeleteSignal();
    void realmRolesByIdRoleIdGetSignal(OAIRoleRepresentation summary);
    void realmRolesByIdRoleIdManagementPermissionsGetSignal(OAIManagementPermissionReference summary);
    void realmRolesByIdRoleIdManagementPermissionsPutSignal(OAIManagementPermissionReference summary);
    void realmRolesByIdRoleIdPutSignal();


    void realmRolesByIdRoleIdCompositesClientsClientGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmRolesByIdRoleIdCompositesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdCompositesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmRolesByIdRoleIdCompositesPostSignalFull(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdCompositesRealmGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmRolesByIdRoleIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmRolesByIdRoleIdGetSignalFull(OAIHttpRequestWorker *worker, OAIRoleRepresentation summary);
    void realmRolesByIdRoleIdManagementPermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmRolesByIdRoleIdManagementPermissionsPutSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmRolesByIdRoleIdPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesClientsClientGetSignalError() instead")
    void realmRolesByIdRoleIdCompositesClientsClientGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesClientsClientGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesDeleteSignalError() instead")
    void realmRolesByIdRoleIdCompositesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesGetSignalError() instead")
    void realmRolesByIdRoleIdCompositesGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesPostSignalError() instead")
    void realmRolesByIdRoleIdCompositesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesRealmGetSignalError() instead")
    void realmRolesByIdRoleIdCompositesRealmGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesRealmGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdDeleteSignalError() instead")
    void realmRolesByIdRoleIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdGetSignalError() instead")
    void realmRolesByIdRoleIdGetSignalE(OAIRoleRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdGetSignalError(OAIRoleRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdManagementPermissionsGetSignalError() instead")
    void realmRolesByIdRoleIdManagementPermissionsGetSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdManagementPermissionsGetSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdManagementPermissionsPutSignalError() instead")
    void realmRolesByIdRoleIdManagementPermissionsPutSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdManagementPermissionsPutSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdPutSignalError() instead")
    void realmRolesByIdRoleIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesClientsClientGetSignalErrorFull() instead")
    void realmRolesByIdRoleIdCompositesClientsClientGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesClientsClientGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesDeleteSignalErrorFull() instead")
    void realmRolesByIdRoleIdCompositesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesGetSignalErrorFull() instead")
    void realmRolesByIdRoleIdCompositesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesPostSignalErrorFull() instead")
    void realmRolesByIdRoleIdCompositesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdCompositesRealmGetSignalErrorFull() instead")
    void realmRolesByIdRoleIdCompositesRealmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdCompositesRealmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdDeleteSignalErrorFull() instead")
    void realmRolesByIdRoleIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdGetSignalErrorFull() instead")
    void realmRolesByIdRoleIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdManagementPermissionsGetSignalErrorFull() instead")
    void realmRolesByIdRoleIdManagementPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdManagementPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdManagementPermissionsPutSignalErrorFull() instead")
    void realmRolesByIdRoleIdManagementPermissionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdManagementPermissionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesByIdRoleIdPutSignalErrorFull() instead")
    void realmRolesByIdRoleIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesByIdRoleIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
