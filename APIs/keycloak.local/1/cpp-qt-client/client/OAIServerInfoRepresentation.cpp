/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerInfoRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerInfoRepresentation::OAIServerInfoRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerInfoRepresentation::OAIServerInfoRepresentation() {
    this->initializeModel();
}

OAIServerInfoRepresentation::~OAIServerInfoRepresentation() {}

void OAIServerInfoRepresentation::initializeModel() {

    m_builtin_protocol_mappers_isSet = false;
    m_builtin_protocol_mappers_isValid = false;

    m_client_importers_isSet = false;
    m_client_importers_isValid = false;

    m_client_installations_isSet = false;
    m_client_installations_isValid = false;

    m_component_types_isSet = false;
    m_component_types_isValid = false;

    m_enums_isSet = false;
    m_enums_isValid = false;

    m_identity_providers_isSet = false;
    m_identity_providers_isValid = false;

    m_memory_info_isSet = false;
    m_memory_info_isValid = false;

    m_password_policies_isSet = false;
    m_password_policies_isValid = false;

    m_profile_info_isSet = false;
    m_profile_info_isValid = false;

    m_protocol_mapper_types_isSet = false;
    m_protocol_mapper_types_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_social_providers_isSet = false;
    m_social_providers_isValid = false;

    m_system_info_isSet = false;
    m_system_info_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;
}

void OAIServerInfoRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerInfoRepresentation::fromJsonObject(QJsonObject json) {

    m_builtin_protocol_mappers_isValid = ::OpenAPI::fromJsonValue(m_builtin_protocol_mappers, json[QString("builtinProtocolMappers")]);
    m_builtin_protocol_mappers_isSet = !json[QString("builtinProtocolMappers")].isNull() && m_builtin_protocol_mappers_isValid;

    if(json["clientImporters"].isArray()){
        auto arr = json["clientImporters"].toArray();
        m_client_importers_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_client_importers_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_client_importers_isSet = !jval.isNull() && m_client_importers_isValid;
                m_client_importers.push_back(item);
            }
        }
    }

    m_client_installations_isValid = ::OpenAPI::fromJsonValue(m_client_installations, json[QString("clientInstallations")]);
    m_client_installations_isSet = !json[QString("clientInstallations")].isNull() && m_client_installations_isValid;

    m_component_types_isValid = ::OpenAPI::fromJsonValue(m_component_types, json[QString("componentTypes")]);
    m_component_types_isSet = !json[QString("componentTypes")].isNull() && m_component_types_isValid;

    m_enums_isValid = ::OpenAPI::fromJsonValue(m_enums, json[QString("enums")]);
    m_enums_isSet = !json[QString("enums")].isNull() && m_enums_isValid;

    if(json["identityProviders"].isArray()){
        auto arr = json["identityProviders"].toArray();
        m_identity_providers_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_identity_providers_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_identity_providers_isSet = !jval.isNull() && m_identity_providers_isValid;
                m_identity_providers.push_back(item);
            }
        }
    }

    m_memory_info_isValid = ::OpenAPI::fromJsonValue(m_memory_info, json[QString("memoryInfo")]);
    m_memory_info_isSet = !json[QString("memoryInfo")].isNull() && m_memory_info_isValid;

    m_password_policies_isValid = ::OpenAPI::fromJsonValue(m_password_policies, json[QString("passwordPolicies")]);
    m_password_policies_isSet = !json[QString("passwordPolicies")].isNull() && m_password_policies_isValid;

    m_profile_info_isValid = ::OpenAPI::fromJsonValue(m_profile_info, json[QString("profileInfo")]);
    m_profile_info_isSet = !json[QString("profileInfo")].isNull() && m_profile_info_isValid;

    m_protocol_mapper_types_isValid = ::OpenAPI::fromJsonValue(m_protocol_mapper_types, json[QString("protocolMapperTypes")]);
    m_protocol_mapper_types_isSet = !json[QString("protocolMapperTypes")].isNull() && m_protocol_mapper_types_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    if(json["socialProviders"].isArray()){
        auto arr = json["socialProviders"].toArray();
        m_social_providers_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_social_providers_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_social_providers_isSet = !jval.isNull() && m_social_providers_isValid;
                m_social_providers.push_back(item);
            }
        }
    }

    m_system_info_isValid = ::OpenAPI::fromJsonValue(m_system_info, json[QString("systemInfo")]);
    m_system_info_isSet = !json[QString("systemInfo")].isNull() && m_system_info_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;
}

QString OAIServerInfoRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerInfoRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_builtin_protocol_mappers.size() > 0) {
        obj.insert(QString("builtinProtocolMappers"), ::OpenAPI::toJsonValue(m_builtin_protocol_mappers));
    }
    if (m_client_importers.size() > 0) {
        
        obj.insert(QString("clientImporters"), toJsonValue(m_client_importers));
    }
    if (m_client_installations.size() > 0) {
        obj.insert(QString("clientInstallations"), ::OpenAPI::toJsonValue(m_client_installations));
    }
    if (m_component_types.size() > 0) {
        obj.insert(QString("componentTypes"), ::OpenAPI::toJsonValue(m_component_types));
    }
    if (m_enums.size() > 0) {
        obj.insert(QString("enums"), ::OpenAPI::toJsonValue(m_enums));
    }
    if (m_identity_providers.size() > 0) {
        
        obj.insert(QString("identityProviders"), toJsonValue(m_identity_providers));
    }
    if (m_memory_info.isSet()) {
        obj.insert(QString("memoryInfo"), ::OpenAPI::toJsonValue(m_memory_info));
    }
    if (m_password_policies.size() > 0) {
        obj.insert(QString("passwordPolicies"), ::OpenAPI::toJsonValue(m_password_policies));
    }
    if (m_profile_info.isSet()) {
        obj.insert(QString("profileInfo"), ::OpenAPI::toJsonValue(m_profile_info));
    }
    if (m_protocol_mapper_types.size() > 0) {
        obj.insert(QString("protocolMapperTypes"), ::OpenAPI::toJsonValue(m_protocol_mapper_types));
    }
    if (m_providers.size() > 0) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_social_providers.size() > 0) {
        
        obj.insert(QString("socialProviders"), toJsonValue(m_social_providers));
    }
    if (m_system_info.isSet()) {
        obj.insert(QString("systemInfo"), ::OpenAPI::toJsonValue(m_system_info));
    }
    if (m_themes.size() > 0) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIServerInfoRepresentation::getBuiltinProtocolMappers() const {
    return m_builtin_protocol_mappers;
}
void OAIServerInfoRepresentation::setBuiltinProtocolMappers(const QMap<QString, QJsonValue> &builtin_protocol_mappers) {
    m_builtin_protocol_mappers = builtin_protocol_mappers;
    m_builtin_protocol_mappers_isSet = true;
}

bool OAIServerInfoRepresentation::is_builtin_protocol_mappers_Set() const{
    return m_builtin_protocol_mappers_isSet;
}

bool OAIServerInfoRepresentation::is_builtin_protocol_mappers_Valid() const{
    return m_builtin_protocol_mappers_isValid;
}

QList<QMap<QString, QJsonValue>> OAIServerInfoRepresentation::getClientImporters() const {
    return m_client_importers;
}
void OAIServerInfoRepresentation::setClientImporters(const QList<QMap<QString, QJsonValue>> &client_importers) {
    m_client_importers = client_importers;
    m_client_importers_isSet = true;
}

bool OAIServerInfoRepresentation::is_client_importers_Set() const{
    return m_client_importers_isSet;
}

bool OAIServerInfoRepresentation::is_client_importers_Valid() const{
    return m_client_importers_isValid;
}

QMap<QString, QJsonValue> OAIServerInfoRepresentation::getClientInstallations() const {
    return m_client_installations;
}
void OAIServerInfoRepresentation::setClientInstallations(const QMap<QString, QJsonValue> &client_installations) {
    m_client_installations = client_installations;
    m_client_installations_isSet = true;
}

bool OAIServerInfoRepresentation::is_client_installations_Set() const{
    return m_client_installations_isSet;
}

bool OAIServerInfoRepresentation::is_client_installations_Valid() const{
    return m_client_installations_isValid;
}

QMap<QString, QJsonValue> OAIServerInfoRepresentation::getComponentTypes() const {
    return m_component_types;
}
void OAIServerInfoRepresentation::setComponentTypes(const QMap<QString, QJsonValue> &component_types) {
    m_component_types = component_types;
    m_component_types_isSet = true;
}

bool OAIServerInfoRepresentation::is_component_types_Set() const{
    return m_component_types_isSet;
}

bool OAIServerInfoRepresentation::is_component_types_Valid() const{
    return m_component_types_isValid;
}

QMap<QString, QJsonValue> OAIServerInfoRepresentation::getEnums() const {
    return m_enums;
}
void OAIServerInfoRepresentation::setEnums(const QMap<QString, QJsonValue> &enums) {
    m_enums = enums;
    m_enums_isSet = true;
}

bool OAIServerInfoRepresentation::is_enums_Set() const{
    return m_enums_isSet;
}

bool OAIServerInfoRepresentation::is_enums_Valid() const{
    return m_enums_isValid;
}

QList<QMap<QString, QJsonValue>> OAIServerInfoRepresentation::getIdentityProviders() const {
    return m_identity_providers;
}
void OAIServerInfoRepresentation::setIdentityProviders(const QList<QMap<QString, QJsonValue>> &identity_providers) {
    m_identity_providers = identity_providers;
    m_identity_providers_isSet = true;
}

bool OAIServerInfoRepresentation::is_identity_providers_Set() const{
    return m_identity_providers_isSet;
}

bool OAIServerInfoRepresentation::is_identity_providers_Valid() const{
    return m_identity_providers_isValid;
}

OAIMemoryInfoRepresentation OAIServerInfoRepresentation::getMemoryInfo() const {
    return m_memory_info;
}
void OAIServerInfoRepresentation::setMemoryInfo(const OAIMemoryInfoRepresentation &memory_info) {
    m_memory_info = memory_info;
    m_memory_info_isSet = true;
}

bool OAIServerInfoRepresentation::is_memory_info_Set() const{
    return m_memory_info_isSet;
}

bool OAIServerInfoRepresentation::is_memory_info_Valid() const{
    return m_memory_info_isValid;
}

QList<OAIPasswordPolicyTypeRepresentation> OAIServerInfoRepresentation::getPasswordPolicies() const {
    return m_password_policies;
}
void OAIServerInfoRepresentation::setPasswordPolicies(const QList<OAIPasswordPolicyTypeRepresentation> &password_policies) {
    m_password_policies = password_policies;
    m_password_policies_isSet = true;
}

bool OAIServerInfoRepresentation::is_password_policies_Set() const{
    return m_password_policies_isSet;
}

bool OAIServerInfoRepresentation::is_password_policies_Valid() const{
    return m_password_policies_isValid;
}

OAIProfileInfoRepresentation OAIServerInfoRepresentation::getProfileInfo() const {
    return m_profile_info;
}
void OAIServerInfoRepresentation::setProfileInfo(const OAIProfileInfoRepresentation &profile_info) {
    m_profile_info = profile_info;
    m_profile_info_isSet = true;
}

bool OAIServerInfoRepresentation::is_profile_info_Set() const{
    return m_profile_info_isSet;
}

bool OAIServerInfoRepresentation::is_profile_info_Valid() const{
    return m_profile_info_isValid;
}

QMap<QString, QJsonValue> OAIServerInfoRepresentation::getProtocolMapperTypes() const {
    return m_protocol_mapper_types;
}
void OAIServerInfoRepresentation::setProtocolMapperTypes(const QMap<QString, QJsonValue> &protocol_mapper_types) {
    m_protocol_mapper_types = protocol_mapper_types;
    m_protocol_mapper_types_isSet = true;
}

bool OAIServerInfoRepresentation::is_protocol_mapper_types_Set() const{
    return m_protocol_mapper_types_isSet;
}

bool OAIServerInfoRepresentation::is_protocol_mapper_types_Valid() const{
    return m_protocol_mapper_types_isValid;
}

QMap<QString, QJsonValue> OAIServerInfoRepresentation::getProviders() const {
    return m_providers;
}
void OAIServerInfoRepresentation::setProviders(const QMap<QString, QJsonValue> &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIServerInfoRepresentation::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIServerInfoRepresentation::is_providers_Valid() const{
    return m_providers_isValid;
}

QList<QMap<QString, QJsonValue>> OAIServerInfoRepresentation::getSocialProviders() const {
    return m_social_providers;
}
void OAIServerInfoRepresentation::setSocialProviders(const QList<QMap<QString, QJsonValue>> &social_providers) {
    m_social_providers = social_providers;
    m_social_providers_isSet = true;
}

bool OAIServerInfoRepresentation::is_social_providers_Set() const{
    return m_social_providers_isSet;
}

bool OAIServerInfoRepresentation::is_social_providers_Valid() const{
    return m_social_providers_isValid;
}

OAISystemInfoRepresentation OAIServerInfoRepresentation::getSystemInfo() const {
    return m_system_info;
}
void OAIServerInfoRepresentation::setSystemInfo(const OAISystemInfoRepresentation &system_info) {
    m_system_info = system_info;
    m_system_info_isSet = true;
}

bool OAIServerInfoRepresentation::is_system_info_Set() const{
    return m_system_info_isSet;
}

bool OAIServerInfoRepresentation::is_system_info_Valid() const{
    return m_system_info_isValid;
}

QMap<QString, QJsonValue> OAIServerInfoRepresentation::getThemes() const {
    return m_themes;
}
void OAIServerInfoRepresentation::setThemes(const QMap<QString, QJsonValue> &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIServerInfoRepresentation::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIServerInfoRepresentation::is_themes_Valid() const{
    return m_themes_isValid;
}

bool OAIServerInfoRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_builtin_protocol_mappers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_importers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_installations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_mapper_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerInfoRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
