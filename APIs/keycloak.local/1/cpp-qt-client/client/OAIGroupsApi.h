/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGroupRepresentation.h"
#include "OAIManagementPermissionReference.h"
#include "OAIUserRepresentation.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  top bool [optional]
    */
    virtual void realmGroupsCountGet(const QString &realm, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &top = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  brief_representation bool [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  search QString [optional]
    */
    virtual void realmGroupsGet(const QString &realm, const ::OpenAPI::OptionalParam<bool> &brief_representation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_group_representation OAIGroupRepresentation [required]
    */
    virtual void realmGroupsIdChildrenPost(const QString &realm, const QString &id, const OAIGroupRepresentation &oai_group_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmGroupsIdDelete(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmGroupsIdGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmGroupsIdManagementPermissionsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_management_permission_reference OAIManagementPermissionReference [required]
    */
    virtual void realmGroupsIdManagementPermissionsPut(const QString &realm, const QString &id, const OAIManagementPermissionReference &oai_management_permission_reference);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  brief_representation bool [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    */
    virtual void realmGroupsIdMembersGet(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<bool> &brief_representation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_group_representation OAIGroupRepresentation [required]
    */
    virtual void realmGroupsIdPut(const QString &realm, const QString &id, const OAIGroupRepresentation &oai_group_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_group_representation OAIGroupRepresentation [required]
    */
    virtual void realmGroupsPost(const QString &realm, const OAIGroupRepresentation &oai_group_representation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmGroupsCountGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdChildrenPostCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdManagementPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdManagementPermissionsPutCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdMembersGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdPutCallback(OAIHttpRequestWorker *worker);
    void realmGroupsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmGroupsCountGetSignal(QMap<QString, QJsonValue> summary);
    void realmGroupsGetSignal(QList<OAIGroupRepresentation> summary);
    void realmGroupsIdChildrenPostSignal();
    void realmGroupsIdDeleteSignal();
    void realmGroupsIdGetSignal(OAIGroupRepresentation summary);
    void realmGroupsIdManagementPermissionsGetSignal(OAIManagementPermissionReference summary);
    void realmGroupsIdManagementPermissionsPutSignal(OAIManagementPermissionReference summary);
    void realmGroupsIdMembersGetSignal(QList<OAIUserRepresentation> summary);
    void realmGroupsIdPutSignal();
    void realmGroupsPostSignal();


    void realmGroupsCountGetSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void realmGroupsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupRepresentation> summary);
    void realmGroupsIdChildrenPostSignalFull(OAIHttpRequestWorker *worker);
    void realmGroupsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmGroupsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIGroupRepresentation summary);
    void realmGroupsIdManagementPermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmGroupsIdManagementPermissionsPutSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmGroupsIdMembersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserRepresentation> summary);
    void realmGroupsIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmGroupsPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmGroupsCountGetSignalError() instead")
    void realmGroupsCountGetSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsCountGetSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsGetSignalError() instead")
    void realmGroupsGetSignalE(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsGetSignalError(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdChildrenPostSignalError() instead")
    void realmGroupsIdChildrenPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdChildrenPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdDeleteSignalError() instead")
    void realmGroupsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdGetSignalError() instead")
    void realmGroupsIdGetSignalE(OAIGroupRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdGetSignalError(OAIGroupRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdManagementPermissionsGetSignalError() instead")
    void realmGroupsIdManagementPermissionsGetSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdManagementPermissionsGetSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdManagementPermissionsPutSignalError() instead")
    void realmGroupsIdManagementPermissionsPutSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdManagementPermissionsPutSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdMembersGetSignalError() instead")
    void realmGroupsIdMembersGetSignalE(QList<OAIUserRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdMembersGetSignalError(QList<OAIUserRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdPutSignalError() instead")
    void realmGroupsIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsPostSignalError() instead")
    void realmGroupsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmGroupsCountGetSignalErrorFull() instead")
    void realmGroupsCountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsCountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsGetSignalErrorFull() instead")
    void realmGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdChildrenPostSignalErrorFull() instead")
    void realmGroupsIdChildrenPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdChildrenPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdDeleteSignalErrorFull() instead")
    void realmGroupsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdGetSignalErrorFull() instead")
    void realmGroupsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdManagementPermissionsGetSignalErrorFull() instead")
    void realmGroupsIdManagementPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdManagementPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdManagementPermissionsPutSignalErrorFull() instead")
    void realmGroupsIdManagementPermissionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdManagementPermissionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdMembersGetSignalErrorFull() instead")
    void realmGroupsIdMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdPutSignalErrorFull() instead")
    void realmGroupsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsPostSignalErrorFull() instead")
    void realmGroupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
