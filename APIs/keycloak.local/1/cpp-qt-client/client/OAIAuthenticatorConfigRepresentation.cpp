/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticatorConfigRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticatorConfigRepresentation::OAIAuthenticatorConfigRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticatorConfigRepresentation::OAIAuthenticatorConfigRepresentation() {
    this->initializeModel();
}

OAIAuthenticatorConfigRepresentation::~OAIAuthenticatorConfigRepresentation() {}

void OAIAuthenticatorConfigRepresentation::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIAuthenticatorConfigRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticatorConfigRepresentation::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIAuthenticatorConfigRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticatorConfigRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIAuthenticatorConfigRepresentation::getAlias() const {
    return m_alias;
}
void OAIAuthenticatorConfigRepresentation::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIAuthenticatorConfigRepresentation::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIAuthenticatorConfigRepresentation::is_alias_Valid() const{
    return m_alias_isValid;
}

QMap<QString, QJsonValue> OAIAuthenticatorConfigRepresentation::getConfig() const {
    return m_config;
}
void OAIAuthenticatorConfigRepresentation::setConfig(const QMap<QString, QJsonValue> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIAuthenticatorConfigRepresentation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIAuthenticatorConfigRepresentation::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIAuthenticatorConfigRepresentation::getId() const {
    return m_id;
}
void OAIAuthenticatorConfigRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthenticatorConfigRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthenticatorConfigRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAuthenticatorConfigRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticatorConfigRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
