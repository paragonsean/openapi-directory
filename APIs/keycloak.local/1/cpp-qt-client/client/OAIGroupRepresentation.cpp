/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupRepresentation::OAIGroupRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupRepresentation::OAIGroupRepresentation() {
    this->initializeModel();
}

OAIGroupRepresentation::~OAIGroupRepresentation() {}

void OAIGroupRepresentation::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_client_roles_isSet = false;
    m_client_roles_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_realm_roles_isSet = false;
    m_realm_roles_isValid = false;

    m_sub_groups_isSet = false;
    m_sub_groups_isValid = false;
}

void OAIGroupRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupRepresentation::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_client_roles_isValid = ::OpenAPI::fromJsonValue(m_client_roles, json[QString("clientRoles")]);
    m_client_roles_isSet = !json[QString("clientRoles")].isNull() && m_client_roles_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_realm_roles_isValid = ::OpenAPI::fromJsonValue(m_realm_roles, json[QString("realmRoles")]);
    m_realm_roles_isSet = !json[QString("realmRoles")].isNull() && m_realm_roles_isValid;

    m_sub_groups_isValid = ::OpenAPI::fromJsonValue(m_sub_groups, json[QString("subGroups")]);
    m_sub_groups_isSet = !json[QString("subGroups")].isNull() && m_sub_groups_isValid;
}

QString OAIGroupRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_access.size() > 0) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_client_roles.size() > 0) {
        obj.insert(QString("clientRoles"), ::OpenAPI::toJsonValue(m_client_roles));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_realm_roles.size() > 0) {
        obj.insert(QString("realmRoles"), ::OpenAPI::toJsonValue(m_realm_roles));
    }
    if (m_sub_groups.size() > 0) {
        obj.insert(QString("subGroups"), ::OpenAPI::toJsonValue(m_sub_groups));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIGroupRepresentation::getAccess() const {
    return m_access;
}
void OAIGroupRepresentation::setAccess(const QMap<QString, QJsonValue> &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIGroupRepresentation::is_access_Set() const{
    return m_access_isSet;
}

bool OAIGroupRepresentation::is_access_Valid() const{
    return m_access_isValid;
}

QMap<QString, QJsonValue> OAIGroupRepresentation::getAttributes() const {
    return m_attributes;
}
void OAIGroupRepresentation::setAttributes(const QMap<QString, QJsonValue> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGroupRepresentation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGroupRepresentation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QMap<QString, QJsonValue> OAIGroupRepresentation::getClientRoles() const {
    return m_client_roles;
}
void OAIGroupRepresentation::setClientRoles(const QMap<QString, QJsonValue> &client_roles) {
    m_client_roles = client_roles;
    m_client_roles_isSet = true;
}

bool OAIGroupRepresentation::is_client_roles_Set() const{
    return m_client_roles_isSet;
}

bool OAIGroupRepresentation::is_client_roles_Valid() const{
    return m_client_roles_isValid;
}

QString OAIGroupRepresentation::getId() const {
    return m_id;
}
void OAIGroupRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroupRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroupRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGroupRepresentation::getName() const {
    return m_name;
}
void OAIGroupRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGroupRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGroupRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGroupRepresentation::getPath() const {
    return m_path;
}
void OAIGroupRepresentation::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGroupRepresentation::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGroupRepresentation::is_path_Valid() const{
    return m_path_isValid;
}

QList<QString> OAIGroupRepresentation::getRealmRoles() const {
    return m_realm_roles;
}
void OAIGroupRepresentation::setRealmRoles(const QList<QString> &realm_roles) {
    m_realm_roles = realm_roles;
    m_realm_roles_isSet = true;
}

bool OAIGroupRepresentation::is_realm_roles_Set() const{
    return m_realm_roles_isSet;
}

bool OAIGroupRepresentation::is_realm_roles_Valid() const{
    return m_realm_roles_isValid;
}

QList<OAIGroupRepresentation> OAIGroupRepresentation::getSubGroups() const {
    return m_sub_groups;
}
void OAIGroupRepresentation::setSubGroups(const QList<OAIGroupRepresentation> &sub_groups) {
    m_sub_groups = sub_groups;
    m_sub_groups_isSet = true;
}

bool OAIGroupRepresentation::is_sub_groups_Set() const{
    return m_sub_groups_isSet;
}

bool OAIGroupRepresentation::is_sub_groups_Valid() const{
    return m_sub_groups_isValid;
}

bool OAIGroupRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
