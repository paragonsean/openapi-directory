/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserStorageProviderApi_H
#define OAI_OAIUserStorageProviderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISynchronizationResult.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserStorageProviderApi : public QObject {
    Q_OBJECT

public:
    OAIUserStorageProviderApi(const int timeOut = 0);
    ~OAIUserStorageProviderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void idNameGet(const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUserStorageIdNameGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUserStorageIdRemoveImportedUsersPost(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  action QString [optional]
    */
    virtual void realmUserStorageIdSyncPost(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUserStorageIdUnlinkUsersPost(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  parent_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  direction QString [optional]
    */
    virtual void realmUserStorageParentIdMappersIdSyncPost(const QString &realm, const QString &parent_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idNameGetCallback(OAIHttpRequestWorker *worker);
    void realmUserStorageIdNameGetCallback(OAIHttpRequestWorker *worker);
    void realmUserStorageIdRemoveImportedUsersPostCallback(OAIHttpRequestWorker *worker);
    void realmUserStorageIdSyncPostCallback(OAIHttpRequestWorker *worker);
    void realmUserStorageIdUnlinkUsersPostCallback(OAIHttpRequestWorker *worker);
    void realmUserStorageParentIdMappersIdSyncPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idNameGetSignal(QMap<QString, QJsonValue> summary);
    void realmUserStorageIdNameGetSignal(QMap<QString, QJsonValue> summary);
    void realmUserStorageIdRemoveImportedUsersPostSignal();
    void realmUserStorageIdSyncPostSignal(OAISynchronizationResult summary);
    void realmUserStorageIdUnlinkUsersPostSignal();
    void realmUserStorageParentIdMappersIdSyncPostSignal(OAISynchronizationResult summary);


    void idNameGetSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void realmUserStorageIdNameGetSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void realmUserStorageIdRemoveImportedUsersPostSignalFull(OAIHttpRequestWorker *worker);
    void realmUserStorageIdSyncPostSignalFull(OAIHttpRequestWorker *worker, OAISynchronizationResult summary);
    void realmUserStorageIdUnlinkUsersPostSignalFull(OAIHttpRequestWorker *worker);
    void realmUserStorageParentIdMappersIdSyncPostSignalFull(OAIHttpRequestWorker *worker, OAISynchronizationResult summary);

    Q_DECL_DEPRECATED_X("Use idNameGetSignalError() instead")
    void idNameGetSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idNameGetSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageIdNameGetSignalError() instead")
    void realmUserStorageIdNameGetSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageIdNameGetSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageIdRemoveImportedUsersPostSignalError() instead")
    void realmUserStorageIdRemoveImportedUsersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageIdRemoveImportedUsersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageIdSyncPostSignalError() instead")
    void realmUserStorageIdSyncPostSignalE(OAISynchronizationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageIdSyncPostSignalError(OAISynchronizationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageIdUnlinkUsersPostSignalError() instead")
    void realmUserStorageIdUnlinkUsersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageIdUnlinkUsersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageParentIdMappersIdSyncPostSignalError() instead")
    void realmUserStorageParentIdMappersIdSyncPostSignalE(OAISynchronizationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageParentIdMappersIdSyncPostSignalError(OAISynchronizationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idNameGetSignalErrorFull() instead")
    void idNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageIdNameGetSignalErrorFull() instead")
    void realmUserStorageIdNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageIdNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageIdRemoveImportedUsersPostSignalErrorFull() instead")
    void realmUserStorageIdRemoveImportedUsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageIdRemoveImportedUsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageIdSyncPostSignalErrorFull() instead")
    void realmUserStorageIdSyncPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageIdSyncPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageIdUnlinkUsersPostSignalErrorFull() instead")
    void realmUserStorageIdUnlinkUsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageIdUnlinkUsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUserStorageParentIdMappersIdSyncPostSignalErrorFull() instead")
    void realmUserStorageParentIdMappersIdSyncPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUserStorageParentIdMappersIdSyncPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
