/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScopeMappingRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScopeMappingRepresentation::OAIScopeMappingRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScopeMappingRepresentation::OAIScopeMappingRepresentation() {
    this->initializeModel();
}

OAIScopeMappingRepresentation::~OAIScopeMappingRepresentation() {}

void OAIScopeMappingRepresentation::initializeModel() {

    m_client_isSet = false;
    m_client_isValid = false;

    m_client_scope_isSet = false;
    m_client_scope_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIScopeMappingRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScopeMappingRepresentation::fromJsonObject(QJsonObject json) {

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_client_scope_isValid = ::OpenAPI::fromJsonValue(m_client_scope, json[QString("clientScope")]);
    m_client_scope_isSet = !json[QString("clientScope")].isNull() && m_client_scope_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIScopeMappingRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScopeMappingRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_client_isSet) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_client_scope_isSet) {
        obj.insert(QString("clientScope"), ::OpenAPI::toJsonValue(m_client_scope));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

QString OAIScopeMappingRepresentation::getClient() const {
    return m_client;
}
void OAIScopeMappingRepresentation::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIScopeMappingRepresentation::is_client_Set() const{
    return m_client_isSet;
}

bool OAIScopeMappingRepresentation::is_client_Valid() const{
    return m_client_isValid;
}

QString OAIScopeMappingRepresentation::getClientScope() const {
    return m_client_scope;
}
void OAIScopeMappingRepresentation::setClientScope(const QString &client_scope) {
    m_client_scope = client_scope;
    m_client_scope_isSet = true;
}

bool OAIScopeMappingRepresentation::is_client_scope_Set() const{
    return m_client_scope_isSet;
}

bool OAIScopeMappingRepresentation::is_client_scope_Valid() const{
    return m_client_scope_isValid;
}

QList<QString> OAIScopeMappingRepresentation::getRoles() const {
    return m_roles;
}
void OAIScopeMappingRepresentation::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIScopeMappingRepresentation::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIScopeMappingRepresentation::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIScopeMappingRepresentation::getSelf() const {
    return m_self;
}
void OAIScopeMappingRepresentation::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIScopeMappingRepresentation::is_self_Set() const{
    return m_self_isSet;
}

bool OAIScopeMappingRepresentation::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIScopeMappingRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScopeMappingRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
