/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScopeMappingsApi_H
#define OAI_OAIScopeMappingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMappingsRepresentation.h"
#include "OAIRoleRepresentation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScopeMappingsApi : public QObject {
    Q_OBJECT

public:
    OAIScopeMappingsApi(const int timeOut = 0);
    ~OAIScopeMappingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmClientScopesIdScopeMappingsClientsClientAvailableGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmClientScopesIdScopeMappingsClientsClientCompositeGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientScopesIdScopeMappingsClientsClientDelete(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmClientScopesIdScopeMappingsClientsClientGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientScopesIdScopeMappingsClientsClientPost(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientScopesIdScopeMappingsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientScopesIdScopeMappingsRealmAvailableGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientScopesIdScopeMappingsRealmCompositeGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientScopesIdScopeMappingsRealmDelete(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientScopesIdScopeMappingsRealmGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientScopesIdScopeMappingsRealmPost(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmClientsIdScopeMappingsClientsClientAvailableGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmClientsIdScopeMappingsClientsClientCompositeGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientsIdScopeMappingsClientsClientDelete(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmClientsIdScopeMappingsClientsClientGet(const QString &realm, const QString &id, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientsIdScopeMappingsClientsClientPost(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdScopeMappingsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdScopeMappingsRealmAvailableGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdScopeMappingsRealmCompositeGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientsIdScopeMappingsRealmDelete(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdScopeMappingsRealmGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientsIdScopeMappingsRealmPost(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmClientScopesIdScopeMappingsClientsClientAvailableGetCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsClientsClientCompositeGetCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsClientsClientDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsClientsClientGetCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsClientsClientPostCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsRealmAvailableGetCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsRealmCompositeGetCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsRealmDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsRealmGetCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsRealmPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsClientsClientAvailableGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsClientsClientCompositeGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsClientsClientDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsClientsClientGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsClientsClientPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsRealmAvailableGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsRealmCompositeGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsRealmDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsRealmGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsRealmPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmClientScopesIdScopeMappingsClientsClientAvailableGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsClientsClientCompositeGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsClientsClientDeleteSignal();
    void realmClientScopesIdScopeMappingsClientsClientGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsClientsClientPostSignal();
    void realmClientScopesIdScopeMappingsGetSignal(OAIMappingsRepresentation summary);
    void realmClientScopesIdScopeMappingsRealmAvailableGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsRealmCompositeGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsRealmDeleteSignal();
    void realmClientScopesIdScopeMappingsRealmGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsRealmPostSignal();
    void realmClientsIdScopeMappingsClientsClientAvailableGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsClientsClientCompositeGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsClientsClientDeleteSignal();
    void realmClientsIdScopeMappingsClientsClientGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsClientsClientPostSignal();
    void realmClientsIdScopeMappingsGetSignal(OAIMappingsRepresentation summary);
    void realmClientsIdScopeMappingsRealmAvailableGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsRealmCompositeGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsRealmDeleteSignal();
    void realmClientsIdScopeMappingsRealmGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsRealmPostSignal();


    void realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsClientsClientDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsClientsClientGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsClientsClientPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsGetSignalFull(OAIHttpRequestWorker *worker, OAIMappingsRepresentation summary);
    void realmClientScopesIdScopeMappingsRealmAvailableGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsRealmCompositeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsRealmDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientScopesIdScopeMappingsRealmGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientScopesIdScopeMappingsRealmPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsClientsClientAvailableGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsClientsClientCompositeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsClientsClientDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsClientsClientGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsClientsClientPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsGetSignalFull(OAIHttpRequestWorker *worker, OAIMappingsRepresentation summary);
    void realmClientsIdScopeMappingsRealmAvailableGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsRealmCompositeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsRealmDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdScopeMappingsRealmGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdScopeMappingsRealmPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalError() instead")
    void realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalError() instead")
    void realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientDeleteSignalError() instead")
    void realmClientScopesIdScopeMappingsClientsClientDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientGetSignalError() instead")
    void realmClientScopesIdScopeMappingsClientsClientGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientPostSignalError() instead")
    void realmClientScopesIdScopeMappingsClientsClientPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsGetSignalError() instead")
    void realmClientScopesIdScopeMappingsGetSignalE(OAIMappingsRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsGetSignalError(OAIMappingsRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmAvailableGetSignalError() instead")
    void realmClientScopesIdScopeMappingsRealmAvailableGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmAvailableGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmCompositeGetSignalError() instead")
    void realmClientScopesIdScopeMappingsRealmCompositeGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmCompositeGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmDeleteSignalError() instead")
    void realmClientScopesIdScopeMappingsRealmDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmGetSignalError() instead")
    void realmClientScopesIdScopeMappingsRealmGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmPostSignalError() instead")
    void realmClientScopesIdScopeMappingsRealmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientAvailableGetSignalError() instead")
    void realmClientsIdScopeMappingsClientsClientAvailableGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientAvailableGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientCompositeGetSignalError() instead")
    void realmClientsIdScopeMappingsClientsClientCompositeGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientCompositeGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientDeleteSignalError() instead")
    void realmClientsIdScopeMappingsClientsClientDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientGetSignalError() instead")
    void realmClientsIdScopeMappingsClientsClientGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientPostSignalError() instead")
    void realmClientsIdScopeMappingsClientsClientPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsGetSignalError() instead")
    void realmClientsIdScopeMappingsGetSignalE(OAIMappingsRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsGetSignalError(OAIMappingsRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmAvailableGetSignalError() instead")
    void realmClientsIdScopeMappingsRealmAvailableGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmAvailableGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmCompositeGetSignalError() instead")
    void realmClientsIdScopeMappingsRealmCompositeGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmCompositeGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmDeleteSignalError() instead")
    void realmClientsIdScopeMappingsRealmDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmGetSignalError() instead")
    void realmClientsIdScopeMappingsRealmGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmPostSignalError() instead")
    void realmClientsIdScopeMappingsRealmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientCompositeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientDeleteSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsClientsClientDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientGetSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsClientsClientGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsClientsClientPostSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsClientsClientPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsClientsClientPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsGetSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmAvailableGetSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsRealmAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmCompositeGetSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsRealmCompositeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmCompositeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmDeleteSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsRealmDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmGetSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsRealmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdScopeMappingsRealmPostSignalErrorFull() instead")
    void realmClientScopesIdScopeMappingsRealmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdScopeMappingsRealmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientAvailableGetSignalErrorFull() instead")
    void realmClientsIdScopeMappingsClientsClientAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientCompositeGetSignalErrorFull() instead")
    void realmClientsIdScopeMappingsClientsClientCompositeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientCompositeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientDeleteSignalErrorFull() instead")
    void realmClientsIdScopeMappingsClientsClientDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientGetSignalErrorFull() instead")
    void realmClientsIdScopeMappingsClientsClientGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsClientsClientPostSignalErrorFull() instead")
    void realmClientsIdScopeMappingsClientsClientPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsClientsClientPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsGetSignalErrorFull() instead")
    void realmClientsIdScopeMappingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmAvailableGetSignalErrorFull() instead")
    void realmClientsIdScopeMappingsRealmAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmCompositeGetSignalErrorFull() instead")
    void realmClientsIdScopeMappingsRealmCompositeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmCompositeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmDeleteSignalErrorFull() instead")
    void realmClientsIdScopeMappingsRealmDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmGetSignalErrorFull() instead")
    void realmClientsIdScopeMappingsRealmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdScopeMappingsRealmPostSignalErrorFull() instead")
    void realmClientsIdScopeMappingsRealmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdScopeMappingsRealmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
