/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleRepresentation::OAIRoleRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleRepresentation::OAIRoleRepresentation() {
    this->initializeModel();
}

OAIRoleRepresentation::~OAIRoleRepresentation() {}

void OAIRoleRepresentation::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_client_role_isSet = false;
    m_client_role_isValid = false;

    m_composite_isSet = false;
    m_composite_isValid = false;

    m_composites_isSet = false;
    m_composites_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIRoleRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleRepresentation::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_client_role_isValid = ::OpenAPI::fromJsonValue(m_client_role, json[QString("clientRole")]);
    m_client_role_isSet = !json[QString("clientRole")].isNull() && m_client_role_isValid;

    m_composite_isValid = ::OpenAPI::fromJsonValue(m_composite, json[QString("composite")]);
    m_composite_isSet = !json[QString("composite")].isNull() && m_composite_isValid;

    m_composites_isValid = ::OpenAPI::fromJsonValue(m_composites, json[QString("composites")]);
    m_composites_isSet = !json[QString("composites")].isNull() && m_composites_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIRoleRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_client_role_isSet) {
        obj.insert(QString("clientRole"), ::OpenAPI::toJsonValue(m_client_role));
    }
    if (m_composite_isSet) {
        obj.insert(QString("composite"), ::OpenAPI::toJsonValue(m_composite));
    }
    if (m_composites.isSet()) {
        obj.insert(QString("composites"), ::OpenAPI::toJsonValue(m_composites));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIRoleRepresentation::getAttributes() const {
    return m_attributes;
}
void OAIRoleRepresentation::setAttributes(const QMap<QString, QJsonValue> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIRoleRepresentation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIRoleRepresentation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIRoleRepresentation::isClientRole() const {
    return m_client_role;
}
void OAIRoleRepresentation::setClientRole(const bool &client_role) {
    m_client_role = client_role;
    m_client_role_isSet = true;
}

bool OAIRoleRepresentation::is_client_role_Set() const{
    return m_client_role_isSet;
}

bool OAIRoleRepresentation::is_client_role_Valid() const{
    return m_client_role_isValid;
}

bool OAIRoleRepresentation::isComposite() const {
    return m_composite;
}
void OAIRoleRepresentation::setComposite(const bool &composite) {
    m_composite = composite;
    m_composite_isSet = true;
}

bool OAIRoleRepresentation::is_composite_Set() const{
    return m_composite_isSet;
}

bool OAIRoleRepresentation::is_composite_Valid() const{
    return m_composite_isValid;
}

OAIRoleRepresentation_Composites OAIRoleRepresentation::getComposites() const {
    return m_composites;
}
void OAIRoleRepresentation::setComposites(const OAIRoleRepresentation_Composites &composites) {
    m_composites = composites;
    m_composites_isSet = true;
}

bool OAIRoleRepresentation::is_composites_Set() const{
    return m_composites_isSet;
}

bool OAIRoleRepresentation::is_composites_Valid() const{
    return m_composites_isValid;
}

QString OAIRoleRepresentation::getContainerId() const {
    return m_container_id;
}
void OAIRoleRepresentation::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIRoleRepresentation::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIRoleRepresentation::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAIRoleRepresentation::getDescription() const {
    return m_description;
}
void OAIRoleRepresentation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRoleRepresentation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRoleRepresentation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRoleRepresentation::getId() const {
    return m_id;
}
void OAIRoleRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRoleRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRoleRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRoleRepresentation::getName() const {
    return m_name;
}
void OAIRoleRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoleRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoleRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIRoleRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composites.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
