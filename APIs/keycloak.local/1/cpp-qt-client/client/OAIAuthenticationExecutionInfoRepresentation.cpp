/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationExecutionInfoRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationExecutionInfoRepresentation::OAIAuthenticationExecutionInfoRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationExecutionInfoRepresentation::OAIAuthenticationExecutionInfoRepresentation() {
    this->initializeModel();
}

OAIAuthenticationExecutionInfoRepresentation::~OAIAuthenticationExecutionInfoRepresentation() {}

void OAIAuthenticationExecutionInfoRepresentation::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_authentication_config_isSet = false;
    m_authentication_config_isValid = false;

    m_authentication_flow_isSet = false;
    m_authentication_flow_isValid = false;

    m_configurable_isSet = false;
    m_configurable_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_flow_id_isSet = false;
    m_flow_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_requirement_isSet = false;
    m_requirement_isValid = false;

    m_requirement_choices_isSet = false;
    m_requirement_choices_isValid = false;
}

void OAIAuthenticationExecutionInfoRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationExecutionInfoRepresentation::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_authentication_config_isValid = ::OpenAPI::fromJsonValue(m_authentication_config, json[QString("authenticationConfig")]);
    m_authentication_config_isSet = !json[QString("authenticationConfig")].isNull() && m_authentication_config_isValid;

    m_authentication_flow_isValid = ::OpenAPI::fromJsonValue(m_authentication_flow, json[QString("authenticationFlow")]);
    m_authentication_flow_isSet = !json[QString("authenticationFlow")].isNull() && m_authentication_flow_isValid;

    m_configurable_isValid = ::OpenAPI::fromJsonValue(m_configurable, json[QString("configurable")]);
    m_configurable_isSet = !json[QString("configurable")].isNull() && m_configurable_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_flow_id_isValid = ::OpenAPI::fromJsonValue(m_flow_id, json[QString("flowId")]);
    m_flow_id_isSet = !json[QString("flowId")].isNull() && m_flow_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_requirement_isValid = ::OpenAPI::fromJsonValue(m_requirement, json[QString("requirement")]);
    m_requirement_isSet = !json[QString("requirement")].isNull() && m_requirement_isValid;

    m_requirement_choices_isValid = ::OpenAPI::fromJsonValue(m_requirement_choices, json[QString("requirementChoices")]);
    m_requirement_choices_isSet = !json[QString("requirementChoices")].isNull() && m_requirement_choices_isValid;
}

QString OAIAuthenticationExecutionInfoRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationExecutionInfoRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_authentication_config_isSet) {
        obj.insert(QString("authenticationConfig"), ::OpenAPI::toJsonValue(m_authentication_config));
    }
    if (m_authentication_flow_isSet) {
        obj.insert(QString("authenticationFlow"), ::OpenAPI::toJsonValue(m_authentication_flow));
    }
    if (m_configurable_isSet) {
        obj.insert(QString("configurable"), ::OpenAPI::toJsonValue(m_configurable));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_flow_id_isSet) {
        obj.insert(QString("flowId"), ::OpenAPI::toJsonValue(m_flow_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_requirement_isSet) {
        obj.insert(QString("requirement"), ::OpenAPI::toJsonValue(m_requirement));
    }
    if (m_requirement_choices.size() > 0) {
        obj.insert(QString("requirementChoices"), ::OpenAPI::toJsonValue(m_requirement_choices));
    }
    return obj;
}

QString OAIAuthenticationExecutionInfoRepresentation::getAlias() const {
    return m_alias;
}
void OAIAuthenticationExecutionInfoRepresentation::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIAuthenticationExecutionInfoRepresentation::getAuthenticationConfig() const {
    return m_authentication_config;
}
void OAIAuthenticationExecutionInfoRepresentation::setAuthenticationConfig(const QString &authentication_config) {
    m_authentication_config = authentication_config;
    m_authentication_config_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_authentication_config_Set() const{
    return m_authentication_config_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_authentication_config_Valid() const{
    return m_authentication_config_isValid;
}

bool OAIAuthenticationExecutionInfoRepresentation::isAuthenticationFlow() const {
    return m_authentication_flow;
}
void OAIAuthenticationExecutionInfoRepresentation::setAuthenticationFlow(const bool &authentication_flow) {
    m_authentication_flow = authentication_flow;
    m_authentication_flow_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_authentication_flow_Set() const{
    return m_authentication_flow_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_authentication_flow_Valid() const{
    return m_authentication_flow_isValid;
}

bool OAIAuthenticationExecutionInfoRepresentation::isConfigurable() const {
    return m_configurable;
}
void OAIAuthenticationExecutionInfoRepresentation::setConfigurable(const bool &configurable) {
    m_configurable = configurable;
    m_configurable_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_configurable_Set() const{
    return m_configurable_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_configurable_Valid() const{
    return m_configurable_isValid;
}

QString OAIAuthenticationExecutionInfoRepresentation::getDisplayName() const {
    return m_display_name;
}
void OAIAuthenticationExecutionInfoRepresentation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAuthenticationExecutionInfoRepresentation::getFlowId() const {
    return m_flow_id;
}
void OAIAuthenticationExecutionInfoRepresentation::setFlowId(const QString &flow_id) {
    m_flow_id = flow_id;
    m_flow_id_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_flow_id_Set() const{
    return m_flow_id_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_flow_id_Valid() const{
    return m_flow_id_isValid;
}

QString OAIAuthenticationExecutionInfoRepresentation::getId() const {
    return m_id;
}
void OAIAuthenticationExecutionInfoRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIAuthenticationExecutionInfoRepresentation::getIndex() const {
    return m_index;
}
void OAIAuthenticationExecutionInfoRepresentation::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_index_Set() const{
    return m_index_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIAuthenticationExecutionInfoRepresentation::getLevel() const {
    return m_level;
}
void OAIAuthenticationExecutionInfoRepresentation::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_level_Set() const{
    return m_level_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIAuthenticationExecutionInfoRepresentation::getProviderId() const {
    return m_provider_id;
}
void OAIAuthenticationExecutionInfoRepresentation::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIAuthenticationExecutionInfoRepresentation::getRequirement() const {
    return m_requirement;
}
void OAIAuthenticationExecutionInfoRepresentation::setRequirement(const QString &requirement) {
    m_requirement = requirement;
    m_requirement_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_requirement_Set() const{
    return m_requirement_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_requirement_Valid() const{
    return m_requirement_isValid;
}

QList<QString> OAIAuthenticationExecutionInfoRepresentation::getRequirementChoices() const {
    return m_requirement_choices;
}
void OAIAuthenticationExecutionInfoRepresentation::setRequirementChoices(const QList<QString> &requirement_choices) {
    m_requirement_choices = requirement_choices;
    m_requirement_choices_isSet = true;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_requirement_choices_Set() const{
    return m_requirement_choices_isSet;
}

bool OAIAuthenticationExecutionInfoRepresentation::is_requirement_choices_Valid() const{
    return m_requirement_choices_isValid;
}

bool OAIAuthenticationExecutionInfoRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configurable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirement_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationExecutionInfoRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
