/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserConsentRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserConsentRepresentation::OAIUserConsentRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserConsentRepresentation::OAIUserConsentRepresentation() {
    this->initializeModel();
}

OAIUserConsentRepresentation::~OAIUserConsentRepresentation() {}

void OAIUserConsentRepresentation::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_granted_client_scopes_isSet = false;
    m_granted_client_scopes_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;
}

void OAIUserConsentRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserConsentRepresentation::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_granted_client_scopes_isValid = ::OpenAPI::fromJsonValue(m_granted_client_scopes, json[QString("grantedClientScopes")]);
    m_granted_client_scopes_isSet = !json[QString("grantedClientScopes")].isNull() && m_granted_client_scopes_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("lastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("lastUpdatedDate")].isNull() && m_last_updated_date_isValid;
}

QString OAIUserConsentRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserConsentRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_granted_client_scopes.size() > 0) {
        obj.insert(QString("grantedClientScopes"), ::OpenAPI::toJsonValue(m_granted_client_scopes));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("lastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    return obj;
}

QString OAIUserConsentRepresentation::getClientId() const {
    return m_client_id;
}
void OAIUserConsentRepresentation::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIUserConsentRepresentation::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIUserConsentRepresentation::is_client_id_Valid() const{
    return m_client_id_isValid;
}

qint64 OAIUserConsentRepresentation::getCreatedDate() const {
    return m_created_date;
}
void OAIUserConsentRepresentation::setCreatedDate(const qint64 &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIUserConsentRepresentation::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIUserConsentRepresentation::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<QString> OAIUserConsentRepresentation::getGrantedClientScopes() const {
    return m_granted_client_scopes;
}
void OAIUserConsentRepresentation::setGrantedClientScopes(const QList<QString> &granted_client_scopes) {
    m_granted_client_scopes = granted_client_scopes;
    m_granted_client_scopes_isSet = true;
}

bool OAIUserConsentRepresentation::is_granted_client_scopes_Set() const{
    return m_granted_client_scopes_isSet;
}

bool OAIUserConsentRepresentation::is_granted_client_scopes_Valid() const{
    return m_granted_client_scopes_isValid;
}

qint64 OAIUserConsentRepresentation::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAIUserConsentRepresentation::setLastUpdatedDate(const qint64 &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAIUserConsentRepresentation::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAIUserConsentRepresentation::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

bool OAIUserConsentRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_granted_client_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserConsentRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
