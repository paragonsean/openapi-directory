/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFederatedIdentityRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFederatedIdentityRepresentation::OAIFederatedIdentityRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFederatedIdentityRepresentation::OAIFederatedIdentityRepresentation() {
    this->initializeModel();
}

OAIFederatedIdentityRepresentation::~OAIFederatedIdentityRepresentation() {}

void OAIFederatedIdentityRepresentation::initializeModel() {

    m_identity_provider_isSet = false;
    m_identity_provider_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIFederatedIdentityRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFederatedIdentityRepresentation::fromJsonObject(QJsonObject json) {

    m_identity_provider_isValid = ::OpenAPI::fromJsonValue(m_identity_provider, json[QString("identityProvider")]);
    m_identity_provider_isSet = !json[QString("identityProvider")].isNull() && m_identity_provider_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIFederatedIdentityRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFederatedIdentityRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_provider_isSet) {
        obj.insert(QString("identityProvider"), ::OpenAPI::toJsonValue(m_identity_provider));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIFederatedIdentityRepresentation::getIdentityProvider() const {
    return m_identity_provider;
}
void OAIFederatedIdentityRepresentation::setIdentityProvider(const QString &identity_provider) {
    m_identity_provider = identity_provider;
    m_identity_provider_isSet = true;
}

bool OAIFederatedIdentityRepresentation::is_identity_provider_Set() const{
    return m_identity_provider_isSet;
}

bool OAIFederatedIdentityRepresentation::is_identity_provider_Valid() const{
    return m_identity_provider_isValid;
}

QString OAIFederatedIdentityRepresentation::getUserId() const {
    return m_user_id;
}
void OAIFederatedIdentityRepresentation::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIFederatedIdentityRepresentation::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIFederatedIdentityRepresentation::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIFederatedIdentityRepresentation::getUserName() const {
    return m_user_name;
}
void OAIFederatedIdentityRepresentation::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIFederatedIdentityRepresentation::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIFederatedIdentityRepresentation::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIFederatedIdentityRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFederatedIdentityRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
