/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPolicyRepresentation.h
 *
 * 
 */

#ifndef OAIPolicyRepresentation_H
#define OAIPolicyRepresentation_H

#include <QJsonObject>

#include "OAIResourceRepresentation.h"
#include "OAIScopeRepresentation.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIResourceRepresentation;
class OAIScopeRepresentation;

class OAIPolicyRepresentation : public OAIObject {
public:
    OAIPolicyRepresentation();
    OAIPolicyRepresentation(QString json);
    ~OAIPolicyRepresentation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getConfig() const;
    void setConfig(const QMap<QString, QJsonValue> &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QString getDecisionStrategy() const;
    void setDecisionStrategy(const QString &decision_strategy);
    bool is_decision_strategy_Set() const;
    bool is_decision_strategy_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLogic() const;
    void setLogic(const QString &logic);
    bool is_logic_Set() const;
    bool is_logic_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QList<QString> getPolicies() const;
    void setPolicies(const QList<QString> &policies);
    bool is_policies_Set() const;
    bool is_policies_Valid() const;

    QList<QString> getResources() const;
    void setResources(const QList<QString> &resources);
    bool is_resources_Set() const;
    bool is_resources_Valid() const;

    QList<OAIResourceRepresentation> getResourcesData() const;
    void setResourcesData(const QList<OAIResourceRepresentation> &resources_data);
    bool is_resources_data_Set() const;
    bool is_resources_data_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    QList<OAIScopeRepresentation> getScopesData() const;
    void setScopesData(const QList<OAIScopeRepresentation> &scopes_data);
    bool is_scopes_data_Set() const;
    bool is_scopes_data_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QString m_decision_strategy;
    bool m_decision_strategy_isSet;
    bool m_decision_strategy_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_logic;
    bool m_logic_isSet;
    bool m_logic_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QList<QString> m_policies;
    bool m_policies_isSet;
    bool m_policies_isValid;

    QList<QString> m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;

    QList<OAIResourceRepresentation> m_resources_data;
    bool m_resources_data_isSet;
    bool m_resources_data_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;

    QList<OAIScopeRepresentation> m_scopes_data;
    bool m_scopes_data_isSet;
    bool m_scopes_data_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPolicyRepresentation)

#endif // OAIPolicyRepresentation_H
