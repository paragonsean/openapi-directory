/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServerInfoRepresentation.h
 *
 * 
 */

#ifndef OAIServerInfoRepresentation_H
#define OAIServerInfoRepresentation_H

#include <QJsonObject>

#include "OAIMemoryInfoRepresentation.h"
#include "OAIPasswordPolicyTypeRepresentation.h"
#include "OAIProfileInfoRepresentation.h"
#include "OAISystemInfoRepresentation.h"
#include <QJsonValue>
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMemoryInfoRepresentation;
class OAIPasswordPolicyTypeRepresentation;
class OAIProfileInfoRepresentation;
class OAISystemInfoRepresentation;

class OAIServerInfoRepresentation : public OAIObject {
public:
    OAIServerInfoRepresentation();
    OAIServerInfoRepresentation(QString json);
    ~OAIServerInfoRepresentation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getBuiltinProtocolMappers() const;
    void setBuiltinProtocolMappers(const QMap<QString, QJsonValue> &builtin_protocol_mappers);
    bool is_builtin_protocol_mappers_Set() const;
    bool is_builtin_protocol_mappers_Valid() const;

    QList<QMap<QString, QJsonValue>> getClientImporters() const;
    void setClientImporters(const QList<QMap<QString, QJsonValue>> &client_importers);
    bool is_client_importers_Set() const;
    bool is_client_importers_Valid() const;

    QMap<QString, QJsonValue> getClientInstallations() const;
    void setClientInstallations(const QMap<QString, QJsonValue> &client_installations);
    bool is_client_installations_Set() const;
    bool is_client_installations_Valid() const;

    QMap<QString, QJsonValue> getComponentTypes() const;
    void setComponentTypes(const QMap<QString, QJsonValue> &component_types);
    bool is_component_types_Set() const;
    bool is_component_types_Valid() const;

    QMap<QString, QJsonValue> getEnums() const;
    void setEnums(const QMap<QString, QJsonValue> &enums);
    bool is_enums_Set() const;
    bool is_enums_Valid() const;

    QList<QMap<QString, QJsonValue>> getIdentityProviders() const;
    void setIdentityProviders(const QList<QMap<QString, QJsonValue>> &identity_providers);
    bool is_identity_providers_Set() const;
    bool is_identity_providers_Valid() const;

    OAIMemoryInfoRepresentation getMemoryInfo() const;
    void setMemoryInfo(const OAIMemoryInfoRepresentation &memory_info);
    bool is_memory_info_Set() const;
    bool is_memory_info_Valid() const;

    QList<OAIPasswordPolicyTypeRepresentation> getPasswordPolicies() const;
    void setPasswordPolicies(const QList<OAIPasswordPolicyTypeRepresentation> &password_policies);
    bool is_password_policies_Set() const;
    bool is_password_policies_Valid() const;

    OAIProfileInfoRepresentation getProfileInfo() const;
    void setProfileInfo(const OAIProfileInfoRepresentation &profile_info);
    bool is_profile_info_Set() const;
    bool is_profile_info_Valid() const;

    QMap<QString, QJsonValue> getProtocolMapperTypes() const;
    void setProtocolMapperTypes(const QMap<QString, QJsonValue> &protocol_mapper_types);
    bool is_protocol_mapper_types_Set() const;
    bool is_protocol_mapper_types_Valid() const;

    QMap<QString, QJsonValue> getProviders() const;
    void setProviders(const QMap<QString, QJsonValue> &providers);
    bool is_providers_Set() const;
    bool is_providers_Valid() const;

    QList<QMap<QString, QJsonValue>> getSocialProviders() const;
    void setSocialProviders(const QList<QMap<QString, QJsonValue>> &social_providers);
    bool is_social_providers_Set() const;
    bool is_social_providers_Valid() const;

    OAISystemInfoRepresentation getSystemInfo() const;
    void setSystemInfo(const OAISystemInfoRepresentation &system_info);
    bool is_system_info_Set() const;
    bool is_system_info_Valid() const;

    QMap<QString, QJsonValue> getThemes() const;
    void setThemes(const QMap<QString, QJsonValue> &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_builtin_protocol_mappers;
    bool m_builtin_protocol_mappers_isSet;
    bool m_builtin_protocol_mappers_isValid;

    QList<QMap<QString, QJsonValue>> m_client_importers;
    bool m_client_importers_isSet;
    bool m_client_importers_isValid;

    QMap<QString, QJsonValue> m_client_installations;
    bool m_client_installations_isSet;
    bool m_client_installations_isValid;

    QMap<QString, QJsonValue> m_component_types;
    bool m_component_types_isSet;
    bool m_component_types_isValid;

    QMap<QString, QJsonValue> m_enums;
    bool m_enums_isSet;
    bool m_enums_isValid;

    QList<QMap<QString, QJsonValue>> m_identity_providers;
    bool m_identity_providers_isSet;
    bool m_identity_providers_isValid;

    OAIMemoryInfoRepresentation m_memory_info;
    bool m_memory_info_isSet;
    bool m_memory_info_isValid;

    QList<OAIPasswordPolicyTypeRepresentation> m_password_policies;
    bool m_password_policies_isSet;
    bool m_password_policies_isValid;

    OAIProfileInfoRepresentation m_profile_info;
    bool m_profile_info_isSet;
    bool m_profile_info_isValid;

    QMap<QString, QJsonValue> m_protocol_mapper_types;
    bool m_protocol_mapper_types_isSet;
    bool m_protocol_mapper_types_isValid;

    QMap<QString, QJsonValue> m_providers;
    bool m_providers_isSet;
    bool m_providers_isValid;

    QList<QMap<QString, QJsonValue>> m_social_providers;
    bool m_social_providers_isSet;
    bool m_social_providers_isValid;

    OAISystemInfoRepresentation m_system_info;
    bool m_system_info_isSet;
    bool m_system_info_isValid;

    QMap<QString, QJsonValue> m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServerInfoRepresentation)

#endif // OAIServerInfoRepresentation_H
