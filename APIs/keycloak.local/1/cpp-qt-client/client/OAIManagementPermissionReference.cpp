/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementPermissionReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementPermissionReference::OAIManagementPermissionReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementPermissionReference::OAIManagementPermissionReference() {
    this->initializeModel();
}

OAIManagementPermissionReference::~OAIManagementPermissionReference() {}

void OAIManagementPermissionReference::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_scope_permissions_isSet = false;
    m_scope_permissions_isValid = false;
}

void OAIManagementPermissionReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementPermissionReference::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_scope_permissions_isValid = ::OpenAPI::fromJsonValue(m_scope_permissions, json[QString("scopePermissions")]);
    m_scope_permissions_isSet = !json[QString("scopePermissions")].isNull() && m_scope_permissions_isValid;
}

QString OAIManagementPermissionReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementPermissionReference::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_scope_permissions.size() > 0) {
        obj.insert(QString("scopePermissions"), ::OpenAPI::toJsonValue(m_scope_permissions));
    }
    return obj;
}

bool OAIManagementPermissionReference::isEnabled() const {
    return m_enabled;
}
void OAIManagementPermissionReference::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIManagementPermissionReference::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIManagementPermissionReference::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIManagementPermissionReference::getResource() const {
    return m_resource;
}
void OAIManagementPermissionReference::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIManagementPermissionReference::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIManagementPermissionReference::is_resource_Valid() const{
    return m_resource_isValid;
}

QMap<QString, QJsonValue> OAIManagementPermissionReference::getScopePermissions() const {
    return m_scope_permissions;
}
void OAIManagementPermissionReference::setScopePermissions(const QMap<QString, QJsonValue> &scope_permissions) {
    m_scope_permissions = scope_permissions;
    m_scope_permissions_isSet = true;
}

bool OAIManagementPermissionReference::is_scope_permissions_Set() const{
    return m_scope_permissions_isSet;
}

bool OAIManagementPermissionReference::is_scope_permissions_Valid() const{
    return m_scope_permissions_isValid;
}

bool OAIManagementPermissionReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementPermissionReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
