/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_claims_isSet = false;
    m_claims_isValid = false;

    m_rsid_isSet = false;
    m_rsid_isValid = false;

    m_rsname_isSet = false;
    m_rsname_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission::fromJsonObject(QJsonObject json) {

    m_claims_isValid = ::OpenAPI::fromJsonValue(m_claims, json[QString("claims")]);
    m_claims_isSet = !json[QString("claims")].isNull() && m_claims_isValid;

    m_rsid_isValid = ::OpenAPI::fromJsonValue(m_rsid, json[QString("rsid")]);
    m_rsid_isSet = !json[QString("rsid")].isNull() && m_rsid_isValid;

    m_rsname_isValid = ::OpenAPI::fromJsonValue(m_rsname, json[QString("rsname")]);
    m_rsname_isSet = !json[QString("rsname")].isNull() && m_rsname_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_claims.size() > 0) {
        obj.insert(QString("claims"), ::OpenAPI::toJsonValue(m_claims));
    }
    if (m_rsid_isSet) {
        obj.insert(QString("rsid"), ::OpenAPI::toJsonValue(m_rsid));
    }
    if (m_rsname_isSet) {
        obj.insert(QString("rsname"), ::OpenAPI::toJsonValue(m_rsname));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIPermission::getClaims() const {
    return m_claims;
}
void OAIPermission::setClaims(const QMap<QString, QJsonValue> &claims) {
    m_claims = claims;
    m_claims_isSet = true;
}

bool OAIPermission::is_claims_Set() const{
    return m_claims_isSet;
}

bool OAIPermission::is_claims_Valid() const{
    return m_claims_isValid;
}

QString OAIPermission::getRsid() const {
    return m_rsid;
}
void OAIPermission::setRsid(const QString &rsid) {
    m_rsid = rsid;
    m_rsid_isSet = true;
}

bool OAIPermission::is_rsid_Set() const{
    return m_rsid_isSet;
}

bool OAIPermission::is_rsid_Valid() const{
    return m_rsid_isValid;
}

QString OAIPermission::getRsname() const {
    return m_rsname;
}
void OAIPermission::setRsname(const QString &rsname) {
    m_rsname = rsname;
    m_rsname_isSet = true;
}

bool OAIPermission::is_rsname_Set() const{
    return m_rsname_isSet;
}

bool OAIPermission::is_rsname_Valid() const{
    return m_rsname_isValid;
}

QList<QString> OAIPermission::getScopes() const {
    return m_scopes;
}
void OAIPermission::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIPermission::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIPermission::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
