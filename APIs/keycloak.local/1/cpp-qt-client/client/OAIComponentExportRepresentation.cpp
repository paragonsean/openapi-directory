/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentExportRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentExportRepresentation::OAIComponentExportRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentExportRepresentation::OAIComponentExportRepresentation() {
    this->initializeModel();
}

OAIComponentExportRepresentation::~OAIComponentExportRepresentation() {}

void OAIComponentExportRepresentation::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_sub_components_isSet = false;
    m_sub_components_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;
}

void OAIComponentExportRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentExportRepresentation::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_sub_components_isValid = ::OpenAPI::fromJsonValue(m_sub_components, json[QString("subComponents")]);
    m_sub_components_isSet = !json[QString("subComponents")].isNull() && m_sub_components_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;
}

QString OAIComponentExportRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentExportRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_sub_components.isSet()) {
        obj.insert(QString("subComponents"), ::OpenAPI::toJsonValue(m_sub_components));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    return obj;
}

OAIMultivaluedHashMap OAIComponentExportRepresentation::getConfig() const {
    return m_config;
}
void OAIComponentExportRepresentation::setConfig(const OAIMultivaluedHashMap &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIComponentExportRepresentation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIComponentExportRepresentation::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIComponentExportRepresentation::getId() const {
    return m_id;
}
void OAIComponentExportRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComponentExportRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComponentExportRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIComponentExportRepresentation::getName() const {
    return m_name;
}
void OAIComponentExportRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComponentExportRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComponentExportRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIComponentExportRepresentation::getProviderId() const {
    return m_provider_id;
}
void OAIComponentExportRepresentation::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIComponentExportRepresentation::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIComponentExportRepresentation::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

OAIMultivaluedHashMap OAIComponentExportRepresentation::getSubComponents() const {
    return m_sub_components;
}
void OAIComponentExportRepresentation::setSubComponents(const OAIMultivaluedHashMap &sub_components) {
    m_sub_components = sub_components;
    m_sub_components_isSet = true;
}

bool OAIComponentExportRepresentation::is_sub_components_Set() const{
    return m_sub_components_isSet;
}

bool OAIComponentExportRepresentation::is_sub_components_Valid() const{
    return m_sub_components_isValid;
}

QString OAIComponentExportRepresentation::getSubType() const {
    return m_sub_type;
}
void OAIComponentExportRepresentation::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAIComponentExportRepresentation::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAIComponentExportRepresentation::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

bool OAIComponentExportRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_components.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentExportRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
