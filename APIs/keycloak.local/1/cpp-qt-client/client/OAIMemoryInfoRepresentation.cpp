/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemoryInfoRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemoryInfoRepresentation::OAIMemoryInfoRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemoryInfoRepresentation::OAIMemoryInfoRepresentation() {
    this->initializeModel();
}

OAIMemoryInfoRepresentation::~OAIMemoryInfoRepresentation() {}

void OAIMemoryInfoRepresentation::initializeModel() {

    m_free_isSet = false;
    m_free_isValid = false;

    m_free_formated_isSet = false;
    m_free_formated_isValid = false;

    m_free_percentage_isSet = false;
    m_free_percentage_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_formated_isSet = false;
    m_total_formated_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;

    m_used_formated_isSet = false;
    m_used_formated_isValid = false;
}

void OAIMemoryInfoRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemoryInfoRepresentation::fromJsonObject(QJsonObject json) {

    m_free_isValid = ::OpenAPI::fromJsonValue(m_free, json[QString("free")]);
    m_free_isSet = !json[QString("free")].isNull() && m_free_isValid;

    m_free_formated_isValid = ::OpenAPI::fromJsonValue(m_free_formated, json[QString("freeFormated")]);
    m_free_formated_isSet = !json[QString("freeFormated")].isNull() && m_free_formated_isValid;

    m_free_percentage_isValid = ::OpenAPI::fromJsonValue(m_free_percentage, json[QString("freePercentage")]);
    m_free_percentage_isSet = !json[QString("freePercentage")].isNull() && m_free_percentage_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_formated_isValid = ::OpenAPI::fromJsonValue(m_total_formated, json[QString("totalFormated")]);
    m_total_formated_isSet = !json[QString("totalFormated")].isNull() && m_total_formated_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;

    m_used_formated_isValid = ::OpenAPI::fromJsonValue(m_used_formated, json[QString("usedFormated")]);
    m_used_formated_isSet = !json[QString("usedFormated")].isNull() && m_used_formated_isValid;
}

QString OAIMemoryInfoRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemoryInfoRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_free_isSet) {
        obj.insert(QString("free"), ::OpenAPI::toJsonValue(m_free));
    }
    if (m_free_formated_isSet) {
        obj.insert(QString("freeFormated"), ::OpenAPI::toJsonValue(m_free_formated));
    }
    if (m_free_percentage_isSet) {
        obj.insert(QString("freePercentage"), ::OpenAPI::toJsonValue(m_free_percentage));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_formated_isSet) {
        obj.insert(QString("totalFormated"), ::OpenAPI::toJsonValue(m_total_formated));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    if (m_used_formated_isSet) {
        obj.insert(QString("usedFormated"), ::OpenAPI::toJsonValue(m_used_formated));
    }
    return obj;
}

qint64 OAIMemoryInfoRepresentation::getFree() const {
    return m_free;
}
void OAIMemoryInfoRepresentation::setFree(const qint64 &free) {
    m_free = free;
    m_free_isSet = true;
}

bool OAIMemoryInfoRepresentation::is_free_Set() const{
    return m_free_isSet;
}

bool OAIMemoryInfoRepresentation::is_free_Valid() const{
    return m_free_isValid;
}

QString OAIMemoryInfoRepresentation::getFreeFormated() const {
    return m_free_formated;
}
void OAIMemoryInfoRepresentation::setFreeFormated(const QString &free_formated) {
    m_free_formated = free_formated;
    m_free_formated_isSet = true;
}

bool OAIMemoryInfoRepresentation::is_free_formated_Set() const{
    return m_free_formated_isSet;
}

bool OAIMemoryInfoRepresentation::is_free_formated_Valid() const{
    return m_free_formated_isValid;
}

qint64 OAIMemoryInfoRepresentation::getFreePercentage() const {
    return m_free_percentage;
}
void OAIMemoryInfoRepresentation::setFreePercentage(const qint64 &free_percentage) {
    m_free_percentage = free_percentage;
    m_free_percentage_isSet = true;
}

bool OAIMemoryInfoRepresentation::is_free_percentage_Set() const{
    return m_free_percentage_isSet;
}

bool OAIMemoryInfoRepresentation::is_free_percentage_Valid() const{
    return m_free_percentage_isValid;
}

qint64 OAIMemoryInfoRepresentation::getTotal() const {
    return m_total;
}
void OAIMemoryInfoRepresentation::setTotal(const qint64 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIMemoryInfoRepresentation::is_total_Set() const{
    return m_total_isSet;
}

bool OAIMemoryInfoRepresentation::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIMemoryInfoRepresentation::getTotalFormated() const {
    return m_total_formated;
}
void OAIMemoryInfoRepresentation::setTotalFormated(const QString &total_formated) {
    m_total_formated = total_formated;
    m_total_formated_isSet = true;
}

bool OAIMemoryInfoRepresentation::is_total_formated_Set() const{
    return m_total_formated_isSet;
}

bool OAIMemoryInfoRepresentation::is_total_formated_Valid() const{
    return m_total_formated_isValid;
}

qint64 OAIMemoryInfoRepresentation::getUsed() const {
    return m_used;
}
void OAIMemoryInfoRepresentation::setUsed(const qint64 &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIMemoryInfoRepresentation::is_used_Set() const{
    return m_used_isSet;
}

bool OAIMemoryInfoRepresentation::is_used_Valid() const{
    return m_used_isValid;
}

QString OAIMemoryInfoRepresentation::getUsedFormated() const {
    return m_used_formated;
}
void OAIMemoryInfoRepresentation::setUsedFormated(const QString &used_formated) {
    m_used_formated = used_formated;
    m_used_formated_isSet = true;
}

bool OAIMemoryInfoRepresentation::is_used_formated_Set() const{
    return m_used_formated_isSet;
}

bool OAIMemoryInfoRepresentation::is_used_formated_Valid() const{
    return m_used_formated_isValid;
}

bool OAIMemoryInfoRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_formated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_formated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_formated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemoryInfoRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
