/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserFederationMapperRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserFederationMapperRepresentation::OAIUserFederationMapperRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserFederationMapperRepresentation::OAIUserFederationMapperRepresentation() {
    this->initializeModel();
}

OAIUserFederationMapperRepresentation::~OAIUserFederationMapperRepresentation() {}

void OAIUserFederationMapperRepresentation::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_federation_mapper_type_isSet = false;
    m_federation_mapper_type_isValid = false;

    m_federation_provider_display_name_isSet = false;
    m_federation_provider_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUserFederationMapperRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserFederationMapperRepresentation::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_federation_mapper_type_isValid = ::OpenAPI::fromJsonValue(m_federation_mapper_type, json[QString("federationMapperType")]);
    m_federation_mapper_type_isSet = !json[QString("federationMapperType")].isNull() && m_federation_mapper_type_isValid;

    m_federation_provider_display_name_isValid = ::OpenAPI::fromJsonValue(m_federation_provider_display_name, json[QString("federationProviderDisplayName")]);
    m_federation_provider_display_name_isSet = !json[QString("federationProviderDisplayName")].isNull() && m_federation_provider_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIUserFederationMapperRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserFederationMapperRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_federation_mapper_type_isSet) {
        obj.insert(QString("federationMapperType"), ::OpenAPI::toJsonValue(m_federation_mapper_type));
    }
    if (m_federation_provider_display_name_isSet) {
        obj.insert(QString("federationProviderDisplayName"), ::OpenAPI::toJsonValue(m_federation_provider_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIUserFederationMapperRepresentation::getConfig() const {
    return m_config;
}
void OAIUserFederationMapperRepresentation::setConfig(const QMap<QString, QJsonValue> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIUserFederationMapperRepresentation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIUserFederationMapperRepresentation::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIUserFederationMapperRepresentation::getFederationMapperType() const {
    return m_federation_mapper_type;
}
void OAIUserFederationMapperRepresentation::setFederationMapperType(const QString &federation_mapper_type) {
    m_federation_mapper_type = federation_mapper_type;
    m_federation_mapper_type_isSet = true;
}

bool OAIUserFederationMapperRepresentation::is_federation_mapper_type_Set() const{
    return m_federation_mapper_type_isSet;
}

bool OAIUserFederationMapperRepresentation::is_federation_mapper_type_Valid() const{
    return m_federation_mapper_type_isValid;
}

QString OAIUserFederationMapperRepresentation::getFederationProviderDisplayName() const {
    return m_federation_provider_display_name;
}
void OAIUserFederationMapperRepresentation::setFederationProviderDisplayName(const QString &federation_provider_display_name) {
    m_federation_provider_display_name = federation_provider_display_name;
    m_federation_provider_display_name_isSet = true;
}

bool OAIUserFederationMapperRepresentation::is_federation_provider_display_name_Set() const{
    return m_federation_provider_display_name_isSet;
}

bool OAIUserFederationMapperRepresentation::is_federation_provider_display_name_Valid() const{
    return m_federation_provider_display_name_isValid;
}

QString OAIUserFederationMapperRepresentation::getId() const {
    return m_id;
}
void OAIUserFederationMapperRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserFederationMapperRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserFederationMapperRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserFederationMapperRepresentation::getName() const {
    return m_name;
}
void OAIUserFederationMapperRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserFederationMapperRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserFederationMapperRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUserFederationMapperRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_federation_mapper_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federation_provider_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserFederationMapperRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
