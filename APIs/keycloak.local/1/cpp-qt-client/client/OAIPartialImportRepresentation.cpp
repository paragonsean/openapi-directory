/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartialImportRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartialImportRepresentation::OAIPartialImportRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartialImportRepresentation::OAIPartialImportRepresentation() {
    this->initializeModel();
}

OAIPartialImportRepresentation::~OAIPartialImportRepresentation() {}

void OAIPartialImportRepresentation::initializeModel() {

    m_clients_isSet = false;
    m_clients_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_identity_providers_isSet = false;
    m_identity_providers_isValid = false;

    m_if_resource_exists_isSet = false;
    m_if_resource_exists_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIPartialImportRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartialImportRepresentation::fromJsonObject(QJsonObject json) {

    m_clients_isValid = ::OpenAPI::fromJsonValue(m_clients, json[QString("clients")]);
    m_clients_isSet = !json[QString("clients")].isNull() && m_clients_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_identity_providers_isValid = ::OpenAPI::fromJsonValue(m_identity_providers, json[QString("identityProviders")]);
    m_identity_providers_isSet = !json[QString("identityProviders")].isNull() && m_identity_providers_isValid;

    m_if_resource_exists_isValid = ::OpenAPI::fromJsonValue(m_if_resource_exists, json[QString("ifResourceExists")]);
    m_if_resource_exists_isSet = !json[QString("ifResourceExists")].isNull() && m_if_resource_exists_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIPartialImportRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartialImportRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_clients.size() > 0) {
        obj.insert(QString("clients"), ::OpenAPI::toJsonValue(m_clients));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_identity_providers.size() > 0) {
        obj.insert(QString("identityProviders"), ::OpenAPI::toJsonValue(m_identity_providers));
    }
    if (m_if_resource_exists_isSet) {
        obj.insert(QString("ifResourceExists"), ::OpenAPI::toJsonValue(m_if_resource_exists));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_roles.isSet()) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QList<OAIClientRepresentation> OAIPartialImportRepresentation::getClients() const {
    return m_clients;
}
void OAIPartialImportRepresentation::setClients(const QList<OAIClientRepresentation> &clients) {
    m_clients = clients;
    m_clients_isSet = true;
}

bool OAIPartialImportRepresentation::is_clients_Set() const{
    return m_clients_isSet;
}

bool OAIPartialImportRepresentation::is_clients_Valid() const{
    return m_clients_isValid;
}

QList<OAIGroupRepresentation> OAIPartialImportRepresentation::getGroups() const {
    return m_groups;
}
void OAIPartialImportRepresentation::setGroups(const QList<OAIGroupRepresentation> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIPartialImportRepresentation::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIPartialImportRepresentation::is_groups_Valid() const{
    return m_groups_isValid;
}

QList<OAIIdentityProviderRepresentation> OAIPartialImportRepresentation::getIdentityProviders() const {
    return m_identity_providers;
}
void OAIPartialImportRepresentation::setIdentityProviders(const QList<OAIIdentityProviderRepresentation> &identity_providers) {
    m_identity_providers = identity_providers;
    m_identity_providers_isSet = true;
}

bool OAIPartialImportRepresentation::is_identity_providers_Set() const{
    return m_identity_providers_isSet;
}

bool OAIPartialImportRepresentation::is_identity_providers_Valid() const{
    return m_identity_providers_isValid;
}

QString OAIPartialImportRepresentation::getIfResourceExists() const {
    return m_if_resource_exists;
}
void OAIPartialImportRepresentation::setIfResourceExists(const QString &if_resource_exists) {
    m_if_resource_exists = if_resource_exists;
    m_if_resource_exists_isSet = true;
}

bool OAIPartialImportRepresentation::is_if_resource_exists_Set() const{
    return m_if_resource_exists_isSet;
}

bool OAIPartialImportRepresentation::is_if_resource_exists_Valid() const{
    return m_if_resource_exists_isValid;
}

QString OAIPartialImportRepresentation::getPolicy() const {
    return m_policy;
}
void OAIPartialImportRepresentation::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPartialImportRepresentation::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPartialImportRepresentation::is_policy_Valid() const{
    return m_policy_isValid;
}

OAIRolesRepresentation OAIPartialImportRepresentation::getRoles() const {
    return m_roles;
}
void OAIPartialImportRepresentation::setRoles(const OAIRolesRepresentation &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIPartialImportRepresentation::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIPartialImportRepresentation::is_roles_Valid() const{
    return m_roles_isValid;
}

QList<OAIUserRepresentation> OAIPartialImportRepresentation::getUsers() const {
    return m_users;
}
void OAIPartialImportRepresentation::setUsers(const QList<OAIUserRepresentation> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIPartialImportRepresentation::is_users_Set() const{
    return m_users_isSet;
}

bool OAIPartialImportRepresentation::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIPartialImportRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_if_resource_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartialImportRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
