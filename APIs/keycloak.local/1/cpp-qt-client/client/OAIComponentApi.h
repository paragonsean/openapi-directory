/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIComponentApi_H
#define OAI_OAIComponentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComponentRepresentation.h"
#include "OAIComponentTypeRepresentation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIComponentApi : public QObject {
    Q_OBJECT

public:
    OAIComponentApi(const int timeOut = 0);
    ~OAIComponentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void realmComponentsGet(const QString &realm, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmComponentsIdDelete(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmComponentsIdGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_component_representation OAIComponentRepresentation [required]
    */
    virtual void realmComponentsIdPut(const QString &realm, const QString &id, const OAIComponentRepresentation &oai_component_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  type QString [optional]
    */
    virtual void realmComponentsIdSubComponentTypesGet(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_component_representation OAIComponentRepresentation [required]
    */
    virtual void realmComponentsPost(const QString &realm, const OAIComponentRepresentation &oai_component_representation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmComponentsGetCallback(OAIHttpRequestWorker *worker);
    void realmComponentsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmComponentsIdGetCallback(OAIHttpRequestWorker *worker);
    void realmComponentsIdPutCallback(OAIHttpRequestWorker *worker);
    void realmComponentsIdSubComponentTypesGetCallback(OAIHttpRequestWorker *worker);
    void realmComponentsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmComponentsGetSignal(QList<OAIComponentRepresentation> summary);
    void realmComponentsIdDeleteSignal();
    void realmComponentsIdGetSignal(OAIComponentRepresentation summary);
    void realmComponentsIdPutSignal();
    void realmComponentsIdSubComponentTypesGetSignal(QList<OAIComponentTypeRepresentation> summary);
    void realmComponentsPostSignal();


    void realmComponentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComponentRepresentation> summary);
    void realmComponentsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmComponentsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIComponentRepresentation summary);
    void realmComponentsIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmComponentsIdSubComponentTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComponentTypeRepresentation> summary);
    void realmComponentsPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmComponentsGetSignalError() instead")
    void realmComponentsGetSignalE(QList<OAIComponentRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsGetSignalError(QList<OAIComponentRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsIdDeleteSignalError() instead")
    void realmComponentsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsIdGetSignalError() instead")
    void realmComponentsIdGetSignalE(OAIComponentRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsIdGetSignalError(OAIComponentRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsIdPutSignalError() instead")
    void realmComponentsIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsIdSubComponentTypesGetSignalError() instead")
    void realmComponentsIdSubComponentTypesGetSignalE(QList<OAIComponentTypeRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsIdSubComponentTypesGetSignalError(QList<OAIComponentTypeRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsPostSignalError() instead")
    void realmComponentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmComponentsGetSignalErrorFull() instead")
    void realmComponentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsIdDeleteSignalErrorFull() instead")
    void realmComponentsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsIdGetSignalErrorFull() instead")
    void realmComponentsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsIdPutSignalErrorFull() instead")
    void realmComponentsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsIdSubComponentTypesGetSignalErrorFull() instead")
    void realmComponentsIdSubComponentTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsIdSubComponentTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmComponentsPostSignalErrorFull() instead")
    void realmComponentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmComponentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
