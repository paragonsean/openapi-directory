/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileInfoRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileInfoRepresentation::OAIProfileInfoRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileInfoRepresentation::OAIProfileInfoRepresentation() {
    this->initializeModel();
}

OAIProfileInfoRepresentation::~OAIProfileInfoRepresentation() {}

void OAIProfileInfoRepresentation::initializeModel() {

    m_disabled_features_isSet = false;
    m_disabled_features_isValid = false;

    m_experimental_features_isSet = false;
    m_experimental_features_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preview_features_isSet = false;
    m_preview_features_isValid = false;
}

void OAIProfileInfoRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileInfoRepresentation::fromJsonObject(QJsonObject json) {

    m_disabled_features_isValid = ::OpenAPI::fromJsonValue(m_disabled_features, json[QString("disabledFeatures")]);
    m_disabled_features_isSet = !json[QString("disabledFeatures")].isNull() && m_disabled_features_isValid;

    m_experimental_features_isValid = ::OpenAPI::fromJsonValue(m_experimental_features, json[QString("experimentalFeatures")]);
    m_experimental_features_isSet = !json[QString("experimentalFeatures")].isNull() && m_experimental_features_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preview_features_isValid = ::OpenAPI::fromJsonValue(m_preview_features, json[QString("previewFeatures")]);
    m_preview_features_isSet = !json[QString("previewFeatures")].isNull() && m_preview_features_isValid;
}

QString OAIProfileInfoRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileInfoRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_disabled_features.size() > 0) {
        obj.insert(QString("disabledFeatures"), ::OpenAPI::toJsonValue(m_disabled_features));
    }
    if (m_experimental_features.size() > 0) {
        obj.insert(QString("experimentalFeatures"), ::OpenAPI::toJsonValue(m_experimental_features));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preview_features.size() > 0) {
        obj.insert(QString("previewFeatures"), ::OpenAPI::toJsonValue(m_preview_features));
    }
    return obj;
}

QList<QString> OAIProfileInfoRepresentation::getDisabledFeatures() const {
    return m_disabled_features;
}
void OAIProfileInfoRepresentation::setDisabledFeatures(const QList<QString> &disabled_features) {
    m_disabled_features = disabled_features;
    m_disabled_features_isSet = true;
}

bool OAIProfileInfoRepresentation::is_disabled_features_Set() const{
    return m_disabled_features_isSet;
}

bool OAIProfileInfoRepresentation::is_disabled_features_Valid() const{
    return m_disabled_features_isValid;
}

QList<QString> OAIProfileInfoRepresentation::getExperimentalFeatures() const {
    return m_experimental_features;
}
void OAIProfileInfoRepresentation::setExperimentalFeatures(const QList<QString> &experimental_features) {
    m_experimental_features = experimental_features;
    m_experimental_features_isSet = true;
}

bool OAIProfileInfoRepresentation::is_experimental_features_Set() const{
    return m_experimental_features_isSet;
}

bool OAIProfileInfoRepresentation::is_experimental_features_Valid() const{
    return m_experimental_features_isValid;
}

QString OAIProfileInfoRepresentation::getName() const {
    return m_name;
}
void OAIProfileInfoRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProfileInfoRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProfileInfoRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIProfileInfoRepresentation::getPreviewFeatures() const {
    return m_preview_features;
}
void OAIProfileInfoRepresentation::setPreviewFeatures(const QList<QString> &preview_features) {
    m_preview_features = preview_features;
    m_preview_features_isSet = true;
}

bool OAIProfileInfoRepresentation::is_preview_features_Set() const{
    return m_preview_features_isSet;
}

bool OAIProfileInfoRepresentation::is_preview_features_Valid() const{
    return m_preview_features_isValid;
}

bool OAIProfileInfoRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disabled_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_experimental_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileInfoRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
