/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthDetailsRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthDetailsRepresentation::OAIAuthDetailsRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthDetailsRepresentation::OAIAuthDetailsRepresentation() {
    this->initializeModel();
}

OAIAuthDetailsRepresentation::~OAIAuthDetailsRepresentation() {}

void OAIAuthDetailsRepresentation::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_realm_id_isSet = false;
    m_realm_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAuthDetailsRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthDetailsRepresentation::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_realm_id_isValid = ::OpenAPI::fromJsonValue(m_realm_id, json[QString("realmId")]);
    m_realm_id_isSet = !json[QString("realmId")].isNull() && m_realm_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIAuthDetailsRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthDetailsRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_realm_id_isSet) {
        obj.insert(QString("realmId"), ::OpenAPI::toJsonValue(m_realm_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAuthDetailsRepresentation::getClientId() const {
    return m_client_id;
}
void OAIAuthDetailsRepresentation::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAuthDetailsRepresentation::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAuthDetailsRepresentation::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAuthDetailsRepresentation::getIpAddress() const {
    return m_ip_address;
}
void OAIAuthDetailsRepresentation::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIAuthDetailsRepresentation::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIAuthDetailsRepresentation::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIAuthDetailsRepresentation::getRealmId() const {
    return m_realm_id;
}
void OAIAuthDetailsRepresentation::setRealmId(const QString &realm_id) {
    m_realm_id = realm_id;
    m_realm_id_isSet = true;
}

bool OAIAuthDetailsRepresentation::is_realm_id_Set() const{
    return m_realm_id_isSet;
}

bool OAIAuthDetailsRepresentation::is_realm_id_Valid() const{
    return m_realm_id_isValid;
}

QString OAIAuthDetailsRepresentation::getUserId() const {
    return m_user_id;
}
void OAIAuthDetailsRepresentation::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAuthDetailsRepresentation::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAuthDetailsRepresentation::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAuthDetailsRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthDetailsRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
