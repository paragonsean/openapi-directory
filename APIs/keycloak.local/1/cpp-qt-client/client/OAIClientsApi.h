/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientsApi_H
#define OAI_OAIClientsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessToken.h"
#include "OAIClientRepresentation.h"
#include "OAIClientScopeEvaluateResource_ProtocolMapperEvaluationRepresentation.h"
#include "OAIClientScopeRepresentation.h"
#include "OAICredentialRepresentation.h"
#include "OAIGlobalRequestResult.h"
#include "OAIManagementPermissionReference.h"
#include "OAIRoleRepresentation.h"
#include "OAIUserRepresentation.h"
#include "OAIUserSessionRepresentation.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientsApi : public QObject {
    Q_OBJECT

public:
    OAIClientsApi(const int timeOut = 0);
    ~OAIClientsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  client_id QString [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  search bool [optional]
    * @param[in]  viewable_only bool [optional]
    */
    virtual void realmClientsGet(const QString &realm, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &viewable_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdClientSecretGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdClientSecretPost(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client_scope_id QString [required]
    */
    virtual void realmClientsIdDefaultClientScopesClientScopeIdDelete(const QString &realm, const QString &id, const QString &client_scope_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client_scope_id QString [required]
    */
    virtual void realmClientsIdDefaultClientScopesClientScopeIdPut(const QString &realm, const QString &id, const QString &client_scope_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdDefaultClientScopesGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdDelete(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  scope QString [optional]
    * @param[in]  user_id QString [optional]
    */
    virtual void realmClientsIdEvaluateScopesGenerateExampleAccessTokenGet(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  scope QString [optional]
    */
    virtual void realmClientsIdEvaluateScopesProtocolMappersGet(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_container_id QString [required]
    * @param[in]  scope QString [optional]
    */
    virtual void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(const QString &realm, const QString &id, const QString &role_container_id, const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_container_id QString [required]
    * @param[in]  scope QString [optional]
    */
    virtual void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(const QString &realm, const QString &id, const QString &role_container_id, const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void realmClientsIdInstallationProvidersProviderIdGet(const QString &realm, const QString &id, const QString &provider_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdManagementPermissionsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_management_permission_reference OAIManagementPermissionReference [required]
    */
    virtual void realmClientsIdManagementPermissionsPut(const QString &realm, const QString &id, const OAIManagementPermissionReference &oai_management_permission_reference);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  node QString [required]
    */
    virtual void realmClientsIdNodesNodeDelete(const QString &realm, const QString &id, const QString &node);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    */
    virtual void realmClientsIdNodesPost(const QString &realm, const QString &id, const QMap<QString, QJsonValue> &request_body);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdOfflineSessionCountGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    */
    virtual void realmClientsIdOfflineSessionsGet(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client_scope_id QString [required]
    */
    virtual void realmClientsIdOptionalClientScopesClientScopeIdDelete(const QString &realm, const QString &id, const QString &client_scope_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  client_scope_id QString [required]
    */
    virtual void realmClientsIdOptionalClientScopesClientScopeIdPut(const QString &realm, const QString &id, const QString &client_scope_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdOptionalClientScopesGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdPushRevocationPost(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_client_representation OAIClientRepresentation [required]
    */
    virtual void realmClientsIdPut(const QString &realm, const QString &id, const OAIClientRepresentation &oai_client_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdRegistrationAccessTokenPost(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdServiceAccountUserGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdSessionCountGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdTestNodesAvailableGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    */
    virtual void realmClientsIdUserSessionsGet(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_client_representation OAIClientRepresentation [required]
    */
    virtual void realmClientsPost(const QString &realm, const OAIClientRepresentation &oai_client_representation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmClientsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdClientSecretGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdClientSecretPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdDefaultClientScopesClientScopeIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdDefaultClientScopesClientScopeIdPutCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdDefaultClientScopesGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdEvaluateScopesProtocolMappersGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdInstallationProvidersProviderIdGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdManagementPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdManagementPermissionsPutCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdNodesNodeDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdNodesPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdOfflineSessionCountGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdOfflineSessionsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdOptionalClientScopesClientScopeIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdOptionalClientScopesClientScopeIdPutCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdOptionalClientScopesGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdPushRevocationPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdPutCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRegistrationAccessTokenPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdServiceAccountUserGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdSessionCountGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdTestNodesAvailableGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdUserSessionsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmClientsGetSignal(QList<OAIClientRepresentation> summary);
    void realmClientsIdClientSecretGetSignal(OAICredentialRepresentation summary);
    void realmClientsIdClientSecretPostSignal(OAICredentialRepresentation summary);
    void realmClientsIdDefaultClientScopesClientScopeIdDeleteSignal();
    void realmClientsIdDefaultClientScopesClientScopeIdPutSignal();
    void realmClientsIdDefaultClientScopesGetSignal(QList<OAIClientScopeRepresentation> summary);
    void realmClientsIdDeleteSignal();
    void realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetSignal(OAIAccessToken summary);
    void realmClientsIdEvaluateScopesProtocolMappersGetSignal(QList<OAIClientScopeEvaluateResource_ProtocolMapperEvaluationRepresentation> summary);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdGetSignal(OAIClientRepresentation summary);
    void realmClientsIdInstallationProvidersProviderIdGetSignal();
    void realmClientsIdManagementPermissionsGetSignal(OAIManagementPermissionReference summary);
    void realmClientsIdManagementPermissionsPutSignal(OAIManagementPermissionReference summary);
    void realmClientsIdNodesNodeDeleteSignal();
    void realmClientsIdNodesPostSignal();
    void realmClientsIdOfflineSessionCountGetSignal(QMap<QString, QJsonValue> summary);
    void realmClientsIdOfflineSessionsGetSignal(QList<OAIUserSessionRepresentation> summary);
    void realmClientsIdOptionalClientScopesClientScopeIdDeleteSignal();
    void realmClientsIdOptionalClientScopesClientScopeIdPutSignal();
    void realmClientsIdOptionalClientScopesGetSignal(QList<OAIClientScopeRepresentation> summary);
    void realmClientsIdPushRevocationPostSignal(OAIGlobalRequestResult summary);
    void realmClientsIdPutSignal();
    void realmClientsIdRegistrationAccessTokenPostSignal(OAIClientRepresentation summary);
    void realmClientsIdServiceAccountUserGetSignal(OAIUserRepresentation summary);
    void realmClientsIdSessionCountGetSignal(QMap<QString, QJsonValue> summary);
    void realmClientsIdTestNodesAvailableGetSignal(OAIGlobalRequestResult summary);
    void realmClientsIdUserSessionsGetSignal(QList<OAIUserSessionRepresentation> summary);
    void realmClientsPostSignal();


    void realmClientsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIClientRepresentation> summary);
    void realmClientsIdClientSecretGetSignalFull(OAIHttpRequestWorker *worker, OAICredentialRepresentation summary);
    void realmClientsIdClientSecretPostSignalFull(OAIHttpRequestWorker *worker, OAICredentialRepresentation summary);
    void realmClientsIdDefaultClientScopesClientScopeIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdDefaultClientScopesClientScopeIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdDefaultClientScopesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIClientScopeRepresentation> summary);
    void realmClientsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetSignalFull(OAIHttpRequestWorker *worker, OAIAccessToken summary);
    void realmClientsIdEvaluateScopesProtocolMappersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIClientScopeEvaluateResource_ProtocolMapperEvaluationRepresentation> summary);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIClientRepresentation summary);
    void realmClientsIdInstallationProvidersProviderIdGetSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdManagementPermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmClientsIdManagementPermissionsPutSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmClientsIdNodesNodeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdNodesPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdOfflineSessionCountGetSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void realmClientsIdOfflineSessionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserSessionRepresentation> summary);
    void realmClientsIdOptionalClientScopesClientScopeIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdOptionalClientScopesClientScopeIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdOptionalClientScopesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIClientScopeRepresentation> summary);
    void realmClientsIdPushRevocationPostSignalFull(OAIHttpRequestWorker *worker, OAIGlobalRequestResult summary);
    void realmClientsIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdRegistrationAccessTokenPostSignalFull(OAIHttpRequestWorker *worker, OAIClientRepresentation summary);
    void realmClientsIdServiceAccountUserGetSignalFull(OAIHttpRequestWorker *worker, OAIUserRepresentation summary);
    void realmClientsIdSessionCountGetSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void realmClientsIdTestNodesAvailableGetSignalFull(OAIHttpRequestWorker *worker, OAIGlobalRequestResult summary);
    void realmClientsIdUserSessionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserSessionRepresentation> summary);
    void realmClientsPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmClientsGetSignalError() instead")
    void realmClientsGetSignalE(QList<OAIClientRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsGetSignalError(QList<OAIClientRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdClientSecretGetSignalError() instead")
    void realmClientsIdClientSecretGetSignalE(OAICredentialRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdClientSecretGetSignalError(OAICredentialRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdClientSecretPostSignalError() instead")
    void realmClientsIdClientSecretPostSignalE(OAICredentialRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdClientSecretPostSignalError(OAICredentialRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdDefaultClientScopesClientScopeIdDeleteSignalError() instead")
    void realmClientsIdDefaultClientScopesClientScopeIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdDefaultClientScopesClientScopeIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdDefaultClientScopesClientScopeIdPutSignalError() instead")
    void realmClientsIdDefaultClientScopesClientScopeIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdDefaultClientScopesClientScopeIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdDefaultClientScopesGetSignalError() instead")
    void realmClientsIdDefaultClientScopesGetSignalE(QList<OAIClientScopeRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdDefaultClientScopesGetSignalError(QList<OAIClientScopeRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdDeleteSignalError() instead")
    void realmClientsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetSignalError() instead")
    void realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetSignalE(OAIAccessToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetSignalError(OAIAccessToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdEvaluateScopesProtocolMappersGetSignalError() instead")
    void realmClientsIdEvaluateScopesProtocolMappersGetSignalE(QList<OAIClientScopeEvaluateResource_ProtocolMapperEvaluationRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdEvaluateScopesProtocolMappersGetSignalError(QList<OAIClientScopeEvaluateResource_ProtocolMapperEvaluationRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetSignalError() instead")
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetSignalError() instead")
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdGetSignalError() instead")
    void realmClientsIdGetSignalE(OAIClientRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdGetSignalError(OAIClientRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdInstallationProvidersProviderIdGetSignalError() instead")
    void realmClientsIdInstallationProvidersProviderIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdInstallationProvidersProviderIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdManagementPermissionsGetSignalError() instead")
    void realmClientsIdManagementPermissionsGetSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdManagementPermissionsGetSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdManagementPermissionsPutSignalError() instead")
    void realmClientsIdManagementPermissionsPutSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdManagementPermissionsPutSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdNodesNodeDeleteSignalError() instead")
    void realmClientsIdNodesNodeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdNodesNodeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdNodesPostSignalError() instead")
    void realmClientsIdNodesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdNodesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOfflineSessionCountGetSignalError() instead")
    void realmClientsIdOfflineSessionCountGetSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOfflineSessionCountGetSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOfflineSessionsGetSignalError() instead")
    void realmClientsIdOfflineSessionsGetSignalE(QList<OAIUserSessionRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOfflineSessionsGetSignalError(QList<OAIUserSessionRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOptionalClientScopesClientScopeIdDeleteSignalError() instead")
    void realmClientsIdOptionalClientScopesClientScopeIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOptionalClientScopesClientScopeIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOptionalClientScopesClientScopeIdPutSignalError() instead")
    void realmClientsIdOptionalClientScopesClientScopeIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOptionalClientScopesClientScopeIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOptionalClientScopesGetSignalError() instead")
    void realmClientsIdOptionalClientScopesGetSignalE(QList<OAIClientScopeRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOptionalClientScopesGetSignalError(QList<OAIClientScopeRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdPushRevocationPostSignalError() instead")
    void realmClientsIdPushRevocationPostSignalE(OAIGlobalRequestResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdPushRevocationPostSignalError(OAIGlobalRequestResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdPutSignalError() instead")
    void realmClientsIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRegistrationAccessTokenPostSignalError() instead")
    void realmClientsIdRegistrationAccessTokenPostSignalE(OAIClientRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRegistrationAccessTokenPostSignalError(OAIClientRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdServiceAccountUserGetSignalError() instead")
    void realmClientsIdServiceAccountUserGetSignalE(OAIUserRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdServiceAccountUserGetSignalError(OAIUserRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdSessionCountGetSignalError() instead")
    void realmClientsIdSessionCountGetSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdSessionCountGetSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdTestNodesAvailableGetSignalError() instead")
    void realmClientsIdTestNodesAvailableGetSignalE(OAIGlobalRequestResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdTestNodesAvailableGetSignalError(OAIGlobalRequestResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdUserSessionsGetSignalError() instead")
    void realmClientsIdUserSessionsGetSignalE(QList<OAIUserSessionRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdUserSessionsGetSignalError(QList<OAIUserSessionRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsPostSignalError() instead")
    void realmClientsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmClientsGetSignalErrorFull() instead")
    void realmClientsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdClientSecretGetSignalErrorFull() instead")
    void realmClientsIdClientSecretGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdClientSecretGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdClientSecretPostSignalErrorFull() instead")
    void realmClientsIdClientSecretPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdClientSecretPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdDefaultClientScopesClientScopeIdDeleteSignalErrorFull() instead")
    void realmClientsIdDefaultClientScopesClientScopeIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdDefaultClientScopesClientScopeIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdDefaultClientScopesClientScopeIdPutSignalErrorFull() instead")
    void realmClientsIdDefaultClientScopesClientScopeIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdDefaultClientScopesClientScopeIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdDefaultClientScopesGetSignalErrorFull() instead")
    void realmClientsIdDefaultClientScopesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdDefaultClientScopesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdDeleteSignalErrorFull() instead")
    void realmClientsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetSignalErrorFull() instead")
    void realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdEvaluateScopesGenerateExampleAccessTokenGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdEvaluateScopesProtocolMappersGetSignalErrorFull() instead")
    void realmClientsIdEvaluateScopesProtocolMappersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdEvaluateScopesProtocolMappersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetSignalErrorFull() instead")
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetSignalErrorFull() instead")
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdGetSignalErrorFull() instead")
    void realmClientsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdInstallationProvidersProviderIdGetSignalErrorFull() instead")
    void realmClientsIdInstallationProvidersProviderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdInstallationProvidersProviderIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdManagementPermissionsGetSignalErrorFull() instead")
    void realmClientsIdManagementPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdManagementPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdManagementPermissionsPutSignalErrorFull() instead")
    void realmClientsIdManagementPermissionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdManagementPermissionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdNodesNodeDeleteSignalErrorFull() instead")
    void realmClientsIdNodesNodeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdNodesNodeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdNodesPostSignalErrorFull() instead")
    void realmClientsIdNodesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdNodesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOfflineSessionCountGetSignalErrorFull() instead")
    void realmClientsIdOfflineSessionCountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOfflineSessionCountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOfflineSessionsGetSignalErrorFull() instead")
    void realmClientsIdOfflineSessionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOfflineSessionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOptionalClientScopesClientScopeIdDeleteSignalErrorFull() instead")
    void realmClientsIdOptionalClientScopesClientScopeIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOptionalClientScopesClientScopeIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOptionalClientScopesClientScopeIdPutSignalErrorFull() instead")
    void realmClientsIdOptionalClientScopesClientScopeIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOptionalClientScopesClientScopeIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdOptionalClientScopesGetSignalErrorFull() instead")
    void realmClientsIdOptionalClientScopesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdOptionalClientScopesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdPushRevocationPostSignalErrorFull() instead")
    void realmClientsIdPushRevocationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdPushRevocationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdPutSignalErrorFull() instead")
    void realmClientsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRegistrationAccessTokenPostSignalErrorFull() instead")
    void realmClientsIdRegistrationAccessTokenPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRegistrationAccessTokenPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdServiceAccountUserGetSignalErrorFull() instead")
    void realmClientsIdServiceAccountUserGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdServiceAccountUserGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdSessionCountGetSignalErrorFull() instead")
    void realmClientsIdSessionCountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdSessionCountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdTestNodesAvailableGetSignalErrorFull() instead")
    void realmClientsIdTestNodesAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdTestNodesAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdUserSessionsGetSignalErrorFull() instead")
    void realmClientsIdUserSessionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdUserSessionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsPostSignalErrorFull() instead")
    void realmClientsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
