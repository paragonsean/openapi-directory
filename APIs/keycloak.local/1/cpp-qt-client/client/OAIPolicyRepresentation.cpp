/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyRepresentation::OAIPolicyRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyRepresentation::OAIPolicyRepresentation() {
    this->initializeModel();
}

OAIPolicyRepresentation::~OAIPolicyRepresentation() {}

void OAIPolicyRepresentation::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_decision_strategy_isSet = false;
    m_decision_strategy_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logic_isSet = false;
    m_logic_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_resources_data_isSet = false;
    m_resources_data_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_scopes_data_isSet = false;
    m_scopes_data_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPolicyRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyRepresentation::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_decision_strategy_isValid = ::OpenAPI::fromJsonValue(m_decision_strategy, json[QString("decisionStrategy")]);
    m_decision_strategy_isSet = !json[QString("decisionStrategy")].isNull() && m_decision_strategy_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logic_isValid = ::OpenAPI::fromJsonValue(m_logic, json[QString("logic")]);
    m_logic_isSet = !json[QString("logic")].isNull() && m_logic_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_resources_data_isValid = ::OpenAPI::fromJsonValue(m_resources_data, json[QString("resourcesData")]);
    m_resources_data_isSet = !json[QString("resourcesData")].isNull() && m_resources_data_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_scopes_data_isValid = ::OpenAPI::fromJsonValue(m_scopes_data, json[QString("scopesData")]);
    m_scopes_data_isSet = !json[QString("scopesData")].isNull() && m_scopes_data_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPolicyRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_decision_strategy_isSet) {
        obj.insert(QString("decisionStrategy"), ::OpenAPI::toJsonValue(m_decision_strategy));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logic_isSet) {
        obj.insert(QString("logic"), ::OpenAPI::toJsonValue(m_logic));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_policies.size() > 0) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_resources_data.size() > 0) {
        obj.insert(QString("resourcesData"), ::OpenAPI::toJsonValue(m_resources_data));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_scopes_data.size() > 0) {
        obj.insert(QString("scopesData"), ::OpenAPI::toJsonValue(m_scopes_data));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIPolicyRepresentation::getConfig() const {
    return m_config;
}
void OAIPolicyRepresentation::setConfig(const QMap<QString, QJsonValue> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIPolicyRepresentation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIPolicyRepresentation::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIPolicyRepresentation::getDecisionStrategy() const {
    return m_decision_strategy;
}
void OAIPolicyRepresentation::setDecisionStrategy(const QString &decision_strategy) {
    m_decision_strategy = decision_strategy;
    m_decision_strategy_isSet = true;
}

bool OAIPolicyRepresentation::is_decision_strategy_Set() const{
    return m_decision_strategy_isSet;
}

bool OAIPolicyRepresentation::is_decision_strategy_Valid() const{
    return m_decision_strategy_isValid;
}

QString OAIPolicyRepresentation::getDescription() const {
    return m_description;
}
void OAIPolicyRepresentation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPolicyRepresentation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPolicyRepresentation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPolicyRepresentation::getId() const {
    return m_id;
}
void OAIPolicyRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPolicyRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPolicyRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPolicyRepresentation::getLogic() const {
    return m_logic;
}
void OAIPolicyRepresentation::setLogic(const QString &logic) {
    m_logic = logic;
    m_logic_isSet = true;
}

bool OAIPolicyRepresentation::is_logic_Set() const{
    return m_logic_isSet;
}

bool OAIPolicyRepresentation::is_logic_Valid() const{
    return m_logic_isValid;
}

QString OAIPolicyRepresentation::getName() const {
    return m_name;
}
void OAIPolicyRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPolicyRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPolicyRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPolicyRepresentation::getOwner() const {
    return m_owner;
}
void OAIPolicyRepresentation::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPolicyRepresentation::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPolicyRepresentation::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<QString> OAIPolicyRepresentation::getPolicies() const {
    return m_policies;
}
void OAIPolicyRepresentation::setPolicies(const QList<QString> &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIPolicyRepresentation::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIPolicyRepresentation::is_policies_Valid() const{
    return m_policies_isValid;
}

QList<QString> OAIPolicyRepresentation::getResources() const {
    return m_resources;
}
void OAIPolicyRepresentation::setResources(const QList<QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIPolicyRepresentation::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIPolicyRepresentation::is_resources_Valid() const{
    return m_resources_isValid;
}

QList<OAIResourceRepresentation> OAIPolicyRepresentation::getResourcesData() const {
    return m_resources_data;
}
void OAIPolicyRepresentation::setResourcesData(const QList<OAIResourceRepresentation> &resources_data) {
    m_resources_data = resources_data;
    m_resources_data_isSet = true;
}

bool OAIPolicyRepresentation::is_resources_data_Set() const{
    return m_resources_data_isSet;
}

bool OAIPolicyRepresentation::is_resources_data_Valid() const{
    return m_resources_data_isValid;
}

QList<QString> OAIPolicyRepresentation::getScopes() const {
    return m_scopes;
}
void OAIPolicyRepresentation::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIPolicyRepresentation::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIPolicyRepresentation::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QList<OAIScopeRepresentation> OAIPolicyRepresentation::getScopesData() const {
    return m_scopes_data;
}
void OAIPolicyRepresentation::setScopesData(const QList<OAIScopeRepresentation> &scopes_data) {
    m_scopes_data = scopes_data;
    m_scopes_data_isSet = true;
}

bool OAIPolicyRepresentation::is_scopes_data_Set() const{
    return m_scopes_data_isSet;
}

bool OAIPolicyRepresentation::is_scopes_data_Valid() const{
    return m_scopes_data_isValid;
}

QString OAIPolicyRepresentation::getType() const {
    return m_type;
}
void OAIPolicyRepresentation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPolicyRepresentation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPolicyRepresentation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPolicyRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
