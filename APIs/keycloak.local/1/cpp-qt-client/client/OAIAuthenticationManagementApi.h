/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationManagementApi_H
#define OAI_OAIAuthenticationManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthenticationExecutionInfoRepresentation.h"
#include "OAIAuthenticationExecutionRepresentation.h"
#include "OAIAuthenticationFlowRepresentation.h"
#include "OAIAuthenticatorConfigInfoRepresentation.h"
#include "OAIAuthenticatorConfigRepresentation.h"
#include "OAIRequiredActionProviderRepresentation.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthenticationManagementApi : public QObject {
    Q_OBJECT

public:
    OAIAuthenticationManagementApi(const int timeOut = 0);
    ~OAIAuthenticationManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmAuthenticationAuthenticatorProvidersGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmAuthenticationClientAuthenticatorProvidersGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void realmAuthenticationConfigDescriptionProviderIdGet(const QString &realm, const QString &provider_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmAuthenticationConfigIdDelete(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmAuthenticationConfigIdGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_authenticator_config_representation OAIAuthenticatorConfigRepresentation [required]
    */
    virtual void realmAuthenticationConfigIdPut(const QString &realm, const QString &id, const OAIAuthenticatorConfigRepresentation &oai_authenticator_config_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  oai_authenticator_config_representation OAIAuthenticatorConfigRepresentation [required]
    */
    virtual void realmAuthenticationExecutionsExecutionIdConfigPost(const QString &realm, const QString &execution_id, const OAIAuthenticatorConfigRepresentation &oai_authenticator_config_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void realmAuthenticationExecutionsExecutionIdDelete(const QString &realm, const QString &execution_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void realmAuthenticationExecutionsExecutionIdGet(const QString &realm, const QString &execution_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void realmAuthenticationExecutionsExecutionIdLowerPriorityPost(const QString &realm, const QString &execution_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void realmAuthenticationExecutionsExecutionIdRaisePriorityPost(const QString &realm, const QString &execution_id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_authentication_execution_representation OAIAuthenticationExecutionRepresentation [required]
    */
    virtual void realmAuthenticationExecutionsPost(const QString &realm, const OAIAuthenticationExecutionRepresentation &oai_authentication_execution_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  flow_alias QString [required]
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    */
    virtual void realmAuthenticationFlowsFlowAliasCopyPost(const QString &realm, const QString &flow_alias, const QMap<QString, QJsonValue> &request_body);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  flow_alias QString [required]
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    */
    virtual void realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(const QString &realm, const QString &flow_alias, const QMap<QString, QJsonValue> &request_body);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  flow_alias QString [required]
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    */
    virtual void realmAuthenticationFlowsFlowAliasExecutionsFlowPost(const QString &realm, const QString &flow_alias, const QMap<QString, QJsonValue> &request_body);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  flow_alias QString [required]
    */
    virtual void realmAuthenticationFlowsFlowAliasExecutionsGet(const QString &realm, const QString &flow_alias);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  flow_alias QString [required]
    * @param[in]  oai_authentication_execution_info_representation OAIAuthenticationExecutionInfoRepresentation [required]
    */
    virtual void realmAuthenticationFlowsFlowAliasExecutionsPut(const QString &realm, const QString &flow_alias, const OAIAuthenticationExecutionInfoRepresentation &oai_authentication_execution_info_representation);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmAuthenticationFlowsGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmAuthenticationFlowsIdDelete(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmAuthenticationFlowsIdGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_authentication_flow_representation OAIAuthenticationFlowRepresentation [required]
    */
    virtual void realmAuthenticationFlowsIdPut(const QString &realm, const QString &id, const OAIAuthenticationFlowRepresentation &oai_authentication_flow_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_authentication_flow_representation OAIAuthenticationFlowRepresentation [required]
    */
    virtual void realmAuthenticationFlowsPost(const QString &realm, const OAIAuthenticationFlowRepresentation &oai_authentication_flow_representation);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmAuthenticationFormActionProvidersGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmAuthenticationFormProvidersGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmAuthenticationPerClientConfigDescriptionGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    */
    virtual void realmAuthenticationRegisterRequiredActionPost(const QString &realm, const QMap<QString, QJsonValue> &request_body);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    */
    virtual void realmAuthenticationRequiredActionsAliasDelete(const QString &realm, const QString &alias);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    */
    virtual void realmAuthenticationRequiredActionsAliasGet(const QString &realm, const QString &alias);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    */
    virtual void realmAuthenticationRequiredActionsAliasLowerPriorityPost(const QString &realm, const QString &alias);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  oai_required_action_provider_representation OAIRequiredActionProviderRepresentation [required]
    */
    virtual void realmAuthenticationRequiredActionsAliasPut(const QString &realm, const QString &alias, const OAIRequiredActionProviderRepresentation &oai_required_action_provider_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    */
    virtual void realmAuthenticationRequiredActionsAliasRaisePriorityPost(const QString &realm, const QString &alias);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmAuthenticationRequiredActionsGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmAuthenticationUnregisteredRequiredActionsGet(const QString &realm);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmAuthenticationAuthenticatorProvidersGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationClientAuthenticatorProvidersGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationConfigDescriptionProviderIdGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationConfigIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationConfigIdGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationConfigIdPutCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdConfigPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdLowerPriorityPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdRaisePriorityPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasCopyPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasExecutionsExecutionPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasExecutionsFlowPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasExecutionsGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasExecutionsPutCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsIdGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsIdPutCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFormActionProvidersGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationFormProvidersGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationPerClientConfigDescriptionGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationRegisterRequiredActionPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsAliasDeleteCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsAliasGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsAliasLowerPriorityPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsAliasPutCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsAliasRaisePriorityPostCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsGetCallback(OAIHttpRequestWorker *worker);
    void realmAuthenticationUnregisteredRequiredActionsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmAuthenticationAuthenticatorProvidersGetSignal(QList<QMap<QString, QJsonValue>> summary);
    void realmAuthenticationClientAuthenticatorProvidersGetSignal(QList<QMap<QString, QJsonValue>> summary);
    void realmAuthenticationConfigDescriptionProviderIdGetSignal(OAIAuthenticatorConfigInfoRepresentation summary);
    void realmAuthenticationConfigIdDeleteSignal();
    void realmAuthenticationConfigIdGetSignal(OAIAuthenticatorConfigRepresentation summary);
    void realmAuthenticationConfigIdPutSignal();
    void realmAuthenticationExecutionsExecutionIdConfigPostSignal();
    void realmAuthenticationExecutionsExecutionIdDeleteSignal();
    void realmAuthenticationExecutionsExecutionIdGetSignal();
    void realmAuthenticationExecutionsExecutionIdLowerPriorityPostSignal();
    void realmAuthenticationExecutionsExecutionIdRaisePriorityPostSignal();
    void realmAuthenticationExecutionsPostSignal();
    void realmAuthenticationFlowsFlowAliasCopyPostSignal();
    void realmAuthenticationFlowsFlowAliasExecutionsExecutionPostSignal();
    void realmAuthenticationFlowsFlowAliasExecutionsFlowPostSignal();
    void realmAuthenticationFlowsFlowAliasExecutionsGetSignal();
    void realmAuthenticationFlowsFlowAliasExecutionsPutSignal();
    void realmAuthenticationFlowsGetSignal(QList<OAIAuthenticationFlowRepresentation> summary);
    void realmAuthenticationFlowsIdDeleteSignal();
    void realmAuthenticationFlowsIdGetSignal(OAIAuthenticationFlowRepresentation summary);
    void realmAuthenticationFlowsIdPutSignal();
    void realmAuthenticationFlowsPostSignal();
    void realmAuthenticationFormActionProvidersGetSignal(QList<QMap<QString, QJsonValue>> summary);
    void realmAuthenticationFormProvidersGetSignal(QList<QMap<QString, QJsonValue>> summary);
    void realmAuthenticationPerClientConfigDescriptionGetSignal(QMap<QString, QJsonValue> summary);
    void realmAuthenticationRegisterRequiredActionPostSignal();
    void realmAuthenticationRequiredActionsAliasDeleteSignal();
    void realmAuthenticationRequiredActionsAliasGetSignal(OAIRequiredActionProviderRepresentation summary);
    void realmAuthenticationRequiredActionsAliasLowerPriorityPostSignal();
    void realmAuthenticationRequiredActionsAliasPutSignal();
    void realmAuthenticationRequiredActionsAliasRaisePriorityPostSignal();
    void realmAuthenticationRequiredActionsGetSignal(QList<OAIRequiredActionProviderRepresentation> summary);
    void realmAuthenticationUnregisteredRequiredActionsGetSignal(QList<QMap<QString, QJsonValue>> summary);


    void realmAuthenticationAuthenticatorProvidersGetSignalFull(OAIHttpRequestWorker *worker, QList<QMap<QString, QJsonValue>> summary);
    void realmAuthenticationClientAuthenticatorProvidersGetSignalFull(OAIHttpRequestWorker *worker, QList<QMap<QString, QJsonValue>> summary);
    void realmAuthenticationConfigDescriptionProviderIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAuthenticatorConfigInfoRepresentation summary);
    void realmAuthenticationConfigIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationConfigIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAuthenticatorConfigRepresentation summary);
    void realmAuthenticationConfigIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdConfigPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdGetSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdLowerPriorityPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsExecutionIdRaisePriorityPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationExecutionsPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasCopyPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasExecutionsExecutionPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasExecutionsFlowPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasExecutionsGetSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsFlowAliasExecutionsPutSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAuthenticationFlowRepresentation> summary);
    void realmAuthenticationFlowsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAuthenticationFlowRepresentation summary);
    void realmAuthenticationFlowsIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationFlowsPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationFormActionProvidersGetSignalFull(OAIHttpRequestWorker *worker, QList<QMap<QString, QJsonValue>> summary);
    void realmAuthenticationFormProvidersGetSignalFull(OAIHttpRequestWorker *worker, QList<QMap<QString, QJsonValue>> summary);
    void realmAuthenticationPerClientConfigDescriptionGetSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void realmAuthenticationRegisterRequiredActionPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsAliasDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsAliasGetSignalFull(OAIHttpRequestWorker *worker, OAIRequiredActionProviderRepresentation summary);
    void realmAuthenticationRequiredActionsAliasLowerPriorityPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsAliasPutSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsAliasRaisePriorityPostSignalFull(OAIHttpRequestWorker *worker);
    void realmAuthenticationRequiredActionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRequiredActionProviderRepresentation> summary);
    void realmAuthenticationUnregisteredRequiredActionsGetSignalFull(OAIHttpRequestWorker *worker, QList<QMap<QString, QJsonValue>> summary);

    Q_DECL_DEPRECATED_X("Use realmAuthenticationAuthenticatorProvidersGetSignalError() instead")
    void realmAuthenticationAuthenticatorProvidersGetSignalE(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationAuthenticatorProvidersGetSignalError(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationClientAuthenticatorProvidersGetSignalError() instead")
    void realmAuthenticationClientAuthenticatorProvidersGetSignalE(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationClientAuthenticatorProvidersGetSignalError(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationConfigDescriptionProviderIdGetSignalError() instead")
    void realmAuthenticationConfigDescriptionProviderIdGetSignalE(OAIAuthenticatorConfigInfoRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationConfigDescriptionProviderIdGetSignalError(OAIAuthenticatorConfigInfoRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationConfigIdDeleteSignalError() instead")
    void realmAuthenticationConfigIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationConfigIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationConfigIdGetSignalError() instead")
    void realmAuthenticationConfigIdGetSignalE(OAIAuthenticatorConfigRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationConfigIdGetSignalError(OAIAuthenticatorConfigRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationConfigIdPutSignalError() instead")
    void realmAuthenticationConfigIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationConfigIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdConfigPostSignalError() instead")
    void realmAuthenticationExecutionsExecutionIdConfigPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdConfigPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdDeleteSignalError() instead")
    void realmAuthenticationExecutionsExecutionIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdGetSignalError() instead")
    void realmAuthenticationExecutionsExecutionIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdLowerPriorityPostSignalError() instead")
    void realmAuthenticationExecutionsExecutionIdLowerPriorityPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdLowerPriorityPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdRaisePriorityPostSignalError() instead")
    void realmAuthenticationExecutionsExecutionIdRaisePriorityPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdRaisePriorityPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsPostSignalError() instead")
    void realmAuthenticationExecutionsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasCopyPostSignalError() instead")
    void realmAuthenticationFlowsFlowAliasCopyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasCopyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasExecutionsExecutionPostSignalError() instead")
    void realmAuthenticationFlowsFlowAliasExecutionsExecutionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasExecutionsExecutionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasExecutionsFlowPostSignalError() instead")
    void realmAuthenticationFlowsFlowAliasExecutionsFlowPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasExecutionsFlowPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasExecutionsGetSignalError() instead")
    void realmAuthenticationFlowsFlowAliasExecutionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasExecutionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasExecutionsPutSignalError() instead")
    void realmAuthenticationFlowsFlowAliasExecutionsPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasExecutionsPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsGetSignalError() instead")
    void realmAuthenticationFlowsGetSignalE(QList<OAIAuthenticationFlowRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsGetSignalError(QList<OAIAuthenticationFlowRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsIdDeleteSignalError() instead")
    void realmAuthenticationFlowsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsIdGetSignalError() instead")
    void realmAuthenticationFlowsIdGetSignalE(OAIAuthenticationFlowRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsIdGetSignalError(OAIAuthenticationFlowRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsIdPutSignalError() instead")
    void realmAuthenticationFlowsIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsPostSignalError() instead")
    void realmAuthenticationFlowsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFormActionProvidersGetSignalError() instead")
    void realmAuthenticationFormActionProvidersGetSignalE(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFormActionProvidersGetSignalError(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFormProvidersGetSignalError() instead")
    void realmAuthenticationFormProvidersGetSignalE(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFormProvidersGetSignalError(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationPerClientConfigDescriptionGetSignalError() instead")
    void realmAuthenticationPerClientConfigDescriptionGetSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationPerClientConfigDescriptionGetSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRegisterRequiredActionPostSignalError() instead")
    void realmAuthenticationRegisterRequiredActionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRegisterRequiredActionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasDeleteSignalError() instead")
    void realmAuthenticationRequiredActionsAliasDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasGetSignalError() instead")
    void realmAuthenticationRequiredActionsAliasGetSignalE(OAIRequiredActionProviderRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasGetSignalError(OAIRequiredActionProviderRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasLowerPriorityPostSignalError() instead")
    void realmAuthenticationRequiredActionsAliasLowerPriorityPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasLowerPriorityPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasPutSignalError() instead")
    void realmAuthenticationRequiredActionsAliasPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasRaisePriorityPostSignalError() instead")
    void realmAuthenticationRequiredActionsAliasRaisePriorityPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasRaisePriorityPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsGetSignalError() instead")
    void realmAuthenticationRequiredActionsGetSignalE(QList<OAIRequiredActionProviderRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsGetSignalError(QList<OAIRequiredActionProviderRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationUnregisteredRequiredActionsGetSignalError() instead")
    void realmAuthenticationUnregisteredRequiredActionsGetSignalE(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationUnregisteredRequiredActionsGetSignalError(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmAuthenticationAuthenticatorProvidersGetSignalErrorFull() instead")
    void realmAuthenticationAuthenticatorProvidersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationAuthenticatorProvidersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationClientAuthenticatorProvidersGetSignalErrorFull() instead")
    void realmAuthenticationClientAuthenticatorProvidersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationClientAuthenticatorProvidersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationConfigDescriptionProviderIdGetSignalErrorFull() instead")
    void realmAuthenticationConfigDescriptionProviderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationConfigDescriptionProviderIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationConfigIdDeleteSignalErrorFull() instead")
    void realmAuthenticationConfigIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationConfigIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationConfigIdGetSignalErrorFull() instead")
    void realmAuthenticationConfigIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationConfigIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationConfigIdPutSignalErrorFull() instead")
    void realmAuthenticationConfigIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationConfigIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdConfigPostSignalErrorFull() instead")
    void realmAuthenticationExecutionsExecutionIdConfigPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdConfigPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdDeleteSignalErrorFull() instead")
    void realmAuthenticationExecutionsExecutionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdGetSignalErrorFull() instead")
    void realmAuthenticationExecutionsExecutionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdLowerPriorityPostSignalErrorFull() instead")
    void realmAuthenticationExecutionsExecutionIdLowerPriorityPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdLowerPriorityPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsExecutionIdRaisePriorityPostSignalErrorFull() instead")
    void realmAuthenticationExecutionsExecutionIdRaisePriorityPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsExecutionIdRaisePriorityPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationExecutionsPostSignalErrorFull() instead")
    void realmAuthenticationExecutionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationExecutionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasCopyPostSignalErrorFull() instead")
    void realmAuthenticationFlowsFlowAliasCopyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasCopyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasExecutionsExecutionPostSignalErrorFull() instead")
    void realmAuthenticationFlowsFlowAliasExecutionsExecutionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasExecutionsExecutionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasExecutionsFlowPostSignalErrorFull() instead")
    void realmAuthenticationFlowsFlowAliasExecutionsFlowPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasExecutionsFlowPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasExecutionsGetSignalErrorFull() instead")
    void realmAuthenticationFlowsFlowAliasExecutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasExecutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsFlowAliasExecutionsPutSignalErrorFull() instead")
    void realmAuthenticationFlowsFlowAliasExecutionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsFlowAliasExecutionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsGetSignalErrorFull() instead")
    void realmAuthenticationFlowsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsIdDeleteSignalErrorFull() instead")
    void realmAuthenticationFlowsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsIdGetSignalErrorFull() instead")
    void realmAuthenticationFlowsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsIdPutSignalErrorFull() instead")
    void realmAuthenticationFlowsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFlowsPostSignalErrorFull() instead")
    void realmAuthenticationFlowsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFlowsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFormActionProvidersGetSignalErrorFull() instead")
    void realmAuthenticationFormActionProvidersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFormActionProvidersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationFormProvidersGetSignalErrorFull() instead")
    void realmAuthenticationFormProvidersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationFormProvidersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationPerClientConfigDescriptionGetSignalErrorFull() instead")
    void realmAuthenticationPerClientConfigDescriptionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationPerClientConfigDescriptionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRegisterRequiredActionPostSignalErrorFull() instead")
    void realmAuthenticationRegisterRequiredActionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRegisterRequiredActionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasDeleteSignalErrorFull() instead")
    void realmAuthenticationRequiredActionsAliasDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasGetSignalErrorFull() instead")
    void realmAuthenticationRequiredActionsAliasGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasLowerPriorityPostSignalErrorFull() instead")
    void realmAuthenticationRequiredActionsAliasLowerPriorityPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasLowerPriorityPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasPutSignalErrorFull() instead")
    void realmAuthenticationRequiredActionsAliasPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsAliasRaisePriorityPostSignalErrorFull() instead")
    void realmAuthenticationRequiredActionsAliasRaisePriorityPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsAliasRaisePriorityPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationRequiredActionsGetSignalErrorFull() instead")
    void realmAuthenticationRequiredActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationRequiredActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmAuthenticationUnregisteredRequiredActionsGetSignalErrorFull() instead")
    void realmAuthenticationUnregisteredRequiredActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmAuthenticationUnregisteredRequiredActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
