/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserFederationProviderRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserFederationProviderRepresentation::OAIUserFederationProviderRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserFederationProviderRepresentation::OAIUserFederationProviderRepresentation() {
    this->initializeModel();
}

OAIUserFederationProviderRepresentation::~OAIUserFederationProviderRepresentation() {}

void OAIUserFederationProviderRepresentation::initializeModel() {

    m_changed_sync_period_isSet = false;
    m_changed_sync_period_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_full_sync_period_isSet = false;
    m_full_sync_period_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_sync_isSet = false;
    m_last_sync_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;
}

void OAIUserFederationProviderRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserFederationProviderRepresentation::fromJsonObject(QJsonObject json) {

    m_changed_sync_period_isValid = ::OpenAPI::fromJsonValue(m_changed_sync_period, json[QString("changedSyncPeriod")]);
    m_changed_sync_period_isSet = !json[QString("changedSyncPeriod")].isNull() && m_changed_sync_period_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_full_sync_period_isValid = ::OpenAPI::fromJsonValue(m_full_sync_period, json[QString("fullSyncPeriod")]);
    m_full_sync_period_isSet = !json[QString("fullSyncPeriod")].isNull() && m_full_sync_period_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_sync_isValid = ::OpenAPI::fromJsonValue(m_last_sync, json[QString("lastSync")]);
    m_last_sync_isSet = !json[QString("lastSync")].isNull() && m_last_sync_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("providerName")]);
    m_provider_name_isSet = !json[QString("providerName")].isNull() && m_provider_name_isValid;
}

QString OAIUserFederationProviderRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserFederationProviderRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_sync_period_isSet) {
        obj.insert(QString("changedSyncPeriod"), ::OpenAPI::toJsonValue(m_changed_sync_period));
    }
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_full_sync_period_isSet) {
        obj.insert(QString("fullSyncPeriod"), ::OpenAPI::toJsonValue(m_full_sync_period));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_sync_isSet) {
        obj.insert(QString("lastSync"), ::OpenAPI::toJsonValue(m_last_sync));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("providerName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    return obj;
}

qint32 OAIUserFederationProviderRepresentation::getChangedSyncPeriod() const {
    return m_changed_sync_period;
}
void OAIUserFederationProviderRepresentation::setChangedSyncPeriod(const qint32 &changed_sync_period) {
    m_changed_sync_period = changed_sync_period;
    m_changed_sync_period_isSet = true;
}

bool OAIUserFederationProviderRepresentation::is_changed_sync_period_Set() const{
    return m_changed_sync_period_isSet;
}

bool OAIUserFederationProviderRepresentation::is_changed_sync_period_Valid() const{
    return m_changed_sync_period_isValid;
}

QMap<QString, QJsonValue> OAIUserFederationProviderRepresentation::getConfig() const {
    return m_config;
}
void OAIUserFederationProviderRepresentation::setConfig(const QMap<QString, QJsonValue> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIUserFederationProviderRepresentation::is_config_Set() const{
    return m_config_isSet;
}

bool OAIUserFederationProviderRepresentation::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIUserFederationProviderRepresentation::getDisplayName() const {
    return m_display_name;
}
void OAIUserFederationProviderRepresentation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUserFederationProviderRepresentation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUserFederationProviderRepresentation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIUserFederationProviderRepresentation::getFullSyncPeriod() const {
    return m_full_sync_period;
}
void OAIUserFederationProviderRepresentation::setFullSyncPeriod(const qint32 &full_sync_period) {
    m_full_sync_period = full_sync_period;
    m_full_sync_period_isSet = true;
}

bool OAIUserFederationProviderRepresentation::is_full_sync_period_Set() const{
    return m_full_sync_period_isSet;
}

bool OAIUserFederationProviderRepresentation::is_full_sync_period_Valid() const{
    return m_full_sync_period_isValid;
}

QString OAIUserFederationProviderRepresentation::getId() const {
    return m_id;
}
void OAIUserFederationProviderRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserFederationProviderRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserFederationProviderRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIUserFederationProviderRepresentation::getLastSync() const {
    return m_last_sync;
}
void OAIUserFederationProviderRepresentation::setLastSync(const qint32 &last_sync) {
    m_last_sync = last_sync;
    m_last_sync_isSet = true;
}

bool OAIUserFederationProviderRepresentation::is_last_sync_Set() const{
    return m_last_sync_isSet;
}

bool OAIUserFederationProviderRepresentation::is_last_sync_Valid() const{
    return m_last_sync_isValid;
}

qint32 OAIUserFederationProviderRepresentation::getPriority() const {
    return m_priority;
}
void OAIUserFederationProviderRepresentation::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIUserFederationProviderRepresentation::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIUserFederationProviderRepresentation::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIUserFederationProviderRepresentation::getProviderName() const {
    return m_provider_name;
}
void OAIUserFederationProviderRepresentation::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIUserFederationProviderRepresentation::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIUserFederationProviderRepresentation::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

bool OAIUserFederationProviderRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_sync_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_sync_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserFederationProviderRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
