/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessToken_Access.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessToken_Access::OAIAccessToken_Access(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessToken_Access::OAIAccessToken_Access() {
    this->initializeModel();
}

OAIAccessToken_Access::~OAIAccessToken_Access() {}

void OAIAccessToken_Access::initializeModel() {

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_verify_caller_isSet = false;
    m_verify_caller_isValid = false;
}

void OAIAccessToken_Access::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessToken_Access::fromJsonObject(QJsonObject json) {

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_verify_caller_isValid = ::OpenAPI::fromJsonValue(m_verify_caller, json[QString("verify_caller")]);
    m_verify_caller_isSet = !json[QString("verify_caller")].isNull() && m_verify_caller_isValid;
}

QString OAIAccessToken_Access::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessToken_Access::asJsonObject() const {
    QJsonObject obj;
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_verify_caller_isSet) {
        obj.insert(QString("verify_caller"), ::OpenAPI::toJsonValue(m_verify_caller));
    }
    return obj;
}

QList<QString> OAIAccessToken_Access::getRoles() const {
    return m_roles;
}
void OAIAccessToken_Access::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIAccessToken_Access::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIAccessToken_Access::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAIAccessToken_Access::isVerifyCaller() const {
    return m_verify_caller;
}
void OAIAccessToken_Access::setVerifyCaller(const bool &verify_caller) {
    m_verify_caller = verify_caller;
    m_verify_caller_isSet = true;
}

bool OAIAccessToken_Access::is_verify_caller_Set() const{
    return m_verify_caller_isSet;
}

bool OAIAccessToken_Access::is_verify_caller_Valid() const{
    return m_verify_caller_isValid;
}

bool OAIAccessToken_Access::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_caller_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessToken_Access::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
