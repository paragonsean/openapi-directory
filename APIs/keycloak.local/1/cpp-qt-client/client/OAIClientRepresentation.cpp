/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientRepresentation::OAIClientRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientRepresentation::OAIClientRepresentation() {
    this->initializeModel();
}

OAIClientRepresentation::~OAIClientRepresentation() {}

void OAIClientRepresentation::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_admin_url_isSet = false;
    m_admin_url_isValid = false;

    m_always_display_in_console_isSet = false;
    m_always_display_in_console_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_authentication_flow_binding_overrides_isSet = false;
    m_authentication_flow_binding_overrides_isValid = false;

    m_authorization_services_enabled_isSet = false;
    m_authorization_services_enabled_isValid = false;

    m_authorization_settings_isSet = false;
    m_authorization_settings_isValid = false;

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_bearer_only_isSet = false;
    m_bearer_only_isValid = false;

    m_client_authenticator_type_isSet = false;
    m_client_authenticator_type_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_consent_required_isSet = false;
    m_consent_required_isValid = false;

    m_default_client_scopes_isSet = false;
    m_default_client_scopes_isValid = false;

    m_default_roles_isSet = false;
    m_default_roles_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_direct_access_grants_enabled_isSet = false;
    m_direct_access_grants_enabled_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_frontchannel_logout_isSet = false;
    m_frontchannel_logout_isValid = false;

    m_full_scope_allowed_isSet = false;
    m_full_scope_allowed_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_implicit_flow_enabled_isSet = false;
    m_implicit_flow_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_re_registration_timeout_isSet = false;
    m_node_re_registration_timeout_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_optional_client_scopes_isSet = false;
    m_optional_client_scopes_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_protocol_mappers_isSet = false;
    m_protocol_mappers_isValid = false;

    m_public_client_isSet = false;
    m_public_client_isValid = false;

    m_redirect_uris_isSet = false;
    m_redirect_uris_isValid = false;

    m_registered_nodes_isSet = false;
    m_registered_nodes_isValid = false;

    m_registration_access_token_isSet = false;
    m_registration_access_token_isValid = false;

    m_root_url_isSet = false;
    m_root_url_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_service_accounts_enabled_isSet = false;
    m_service_accounts_enabled_isValid = false;

    m_standard_flow_enabled_isSet = false;
    m_standard_flow_enabled_isValid = false;

    m_surrogate_auth_required_isSet = false;
    m_surrogate_auth_required_isValid = false;

    m_web_origins_isSet = false;
    m_web_origins_isValid = false;
}

void OAIClientRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientRepresentation::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_admin_url_isValid = ::OpenAPI::fromJsonValue(m_admin_url, json[QString("adminUrl")]);
    m_admin_url_isSet = !json[QString("adminUrl")].isNull() && m_admin_url_isValid;

    m_always_display_in_console_isValid = ::OpenAPI::fromJsonValue(m_always_display_in_console, json[QString("alwaysDisplayInConsole")]);
    m_always_display_in_console_isSet = !json[QString("alwaysDisplayInConsole")].isNull() && m_always_display_in_console_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_authentication_flow_binding_overrides_isValid = ::OpenAPI::fromJsonValue(m_authentication_flow_binding_overrides, json[QString("authenticationFlowBindingOverrides")]);
    m_authentication_flow_binding_overrides_isSet = !json[QString("authenticationFlowBindingOverrides")].isNull() && m_authentication_flow_binding_overrides_isValid;

    m_authorization_services_enabled_isValid = ::OpenAPI::fromJsonValue(m_authorization_services_enabled, json[QString("authorizationServicesEnabled")]);
    m_authorization_services_enabled_isSet = !json[QString("authorizationServicesEnabled")].isNull() && m_authorization_services_enabled_isValid;

    m_authorization_settings_isValid = ::OpenAPI::fromJsonValue(m_authorization_settings, json[QString("authorizationSettings")]);
    m_authorization_settings_isSet = !json[QString("authorizationSettings")].isNull() && m_authorization_settings_isValid;

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("baseUrl")]);
    m_base_url_isSet = !json[QString("baseUrl")].isNull() && m_base_url_isValid;

    m_bearer_only_isValid = ::OpenAPI::fromJsonValue(m_bearer_only, json[QString("bearerOnly")]);
    m_bearer_only_isSet = !json[QString("bearerOnly")].isNull() && m_bearer_only_isValid;

    m_client_authenticator_type_isValid = ::OpenAPI::fromJsonValue(m_client_authenticator_type, json[QString("clientAuthenticatorType")]);
    m_client_authenticator_type_isSet = !json[QString("clientAuthenticatorType")].isNull() && m_client_authenticator_type_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_consent_required_isValid = ::OpenAPI::fromJsonValue(m_consent_required, json[QString("consentRequired")]);
    m_consent_required_isSet = !json[QString("consentRequired")].isNull() && m_consent_required_isValid;

    m_default_client_scopes_isValid = ::OpenAPI::fromJsonValue(m_default_client_scopes, json[QString("defaultClientScopes")]);
    m_default_client_scopes_isSet = !json[QString("defaultClientScopes")].isNull() && m_default_client_scopes_isValid;

    m_default_roles_isValid = ::OpenAPI::fromJsonValue(m_default_roles, json[QString("defaultRoles")]);
    m_default_roles_isSet = !json[QString("defaultRoles")].isNull() && m_default_roles_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_direct_access_grants_enabled_isValid = ::OpenAPI::fromJsonValue(m_direct_access_grants_enabled, json[QString("directAccessGrantsEnabled")]);
    m_direct_access_grants_enabled_isSet = !json[QString("directAccessGrantsEnabled")].isNull() && m_direct_access_grants_enabled_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_frontchannel_logout_isValid = ::OpenAPI::fromJsonValue(m_frontchannel_logout, json[QString("frontchannelLogout")]);
    m_frontchannel_logout_isSet = !json[QString("frontchannelLogout")].isNull() && m_frontchannel_logout_isValid;

    m_full_scope_allowed_isValid = ::OpenAPI::fromJsonValue(m_full_scope_allowed, json[QString("fullScopeAllowed")]);
    m_full_scope_allowed_isSet = !json[QString("fullScopeAllowed")].isNull() && m_full_scope_allowed_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_implicit_flow_enabled_isValid = ::OpenAPI::fromJsonValue(m_implicit_flow_enabled, json[QString("implicitFlowEnabled")]);
    m_implicit_flow_enabled_isSet = !json[QString("implicitFlowEnabled")].isNull() && m_implicit_flow_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_re_registration_timeout_isValid = ::OpenAPI::fromJsonValue(m_node_re_registration_timeout, json[QString("nodeReRegistrationTimeout")]);
    m_node_re_registration_timeout_isSet = !json[QString("nodeReRegistrationTimeout")].isNull() && m_node_re_registration_timeout_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("notBefore")]);
    m_not_before_isSet = !json[QString("notBefore")].isNull() && m_not_before_isValid;

    m_optional_client_scopes_isValid = ::OpenAPI::fromJsonValue(m_optional_client_scopes, json[QString("optionalClientScopes")]);
    m_optional_client_scopes_isSet = !json[QString("optionalClientScopes")].isNull() && m_optional_client_scopes_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_protocol_mappers_isValid = ::OpenAPI::fromJsonValue(m_protocol_mappers, json[QString("protocolMappers")]);
    m_protocol_mappers_isSet = !json[QString("protocolMappers")].isNull() && m_protocol_mappers_isValid;

    m_public_client_isValid = ::OpenAPI::fromJsonValue(m_public_client, json[QString("publicClient")]);
    m_public_client_isSet = !json[QString("publicClient")].isNull() && m_public_client_isValid;

    m_redirect_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_uris, json[QString("redirectUris")]);
    m_redirect_uris_isSet = !json[QString("redirectUris")].isNull() && m_redirect_uris_isValid;

    m_registered_nodes_isValid = ::OpenAPI::fromJsonValue(m_registered_nodes, json[QString("registeredNodes")]);
    m_registered_nodes_isSet = !json[QString("registeredNodes")].isNull() && m_registered_nodes_isValid;

    m_registration_access_token_isValid = ::OpenAPI::fromJsonValue(m_registration_access_token, json[QString("registrationAccessToken")]);
    m_registration_access_token_isSet = !json[QString("registrationAccessToken")].isNull() && m_registration_access_token_isValid;

    m_root_url_isValid = ::OpenAPI::fromJsonValue(m_root_url, json[QString("rootUrl")]);
    m_root_url_isSet = !json[QString("rootUrl")].isNull() && m_root_url_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_service_accounts_enabled_isValid = ::OpenAPI::fromJsonValue(m_service_accounts_enabled, json[QString("serviceAccountsEnabled")]);
    m_service_accounts_enabled_isSet = !json[QString("serviceAccountsEnabled")].isNull() && m_service_accounts_enabled_isValid;

    m_standard_flow_enabled_isValid = ::OpenAPI::fromJsonValue(m_standard_flow_enabled, json[QString("standardFlowEnabled")]);
    m_standard_flow_enabled_isSet = !json[QString("standardFlowEnabled")].isNull() && m_standard_flow_enabled_isValid;

    m_surrogate_auth_required_isValid = ::OpenAPI::fromJsonValue(m_surrogate_auth_required, json[QString("surrogateAuthRequired")]);
    m_surrogate_auth_required_isSet = !json[QString("surrogateAuthRequired")].isNull() && m_surrogate_auth_required_isValid;

    m_web_origins_isValid = ::OpenAPI::fromJsonValue(m_web_origins, json[QString("webOrigins")]);
    m_web_origins_isSet = !json[QString("webOrigins")].isNull() && m_web_origins_isValid;
}

QString OAIClientRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_access.size() > 0) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_admin_url_isSet) {
        obj.insert(QString("adminUrl"), ::OpenAPI::toJsonValue(m_admin_url));
    }
    if (m_always_display_in_console_isSet) {
        obj.insert(QString("alwaysDisplayInConsole"), ::OpenAPI::toJsonValue(m_always_display_in_console));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_authentication_flow_binding_overrides.size() > 0) {
        obj.insert(QString("authenticationFlowBindingOverrides"), ::OpenAPI::toJsonValue(m_authentication_flow_binding_overrides));
    }
    if (m_authorization_services_enabled_isSet) {
        obj.insert(QString("authorizationServicesEnabled"), ::OpenAPI::toJsonValue(m_authorization_services_enabled));
    }
    if (m_authorization_settings.isSet()) {
        obj.insert(QString("authorizationSettings"), ::OpenAPI::toJsonValue(m_authorization_settings));
    }
    if (m_base_url_isSet) {
        obj.insert(QString("baseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_bearer_only_isSet) {
        obj.insert(QString("bearerOnly"), ::OpenAPI::toJsonValue(m_bearer_only));
    }
    if (m_client_authenticator_type_isSet) {
        obj.insert(QString("clientAuthenticatorType"), ::OpenAPI::toJsonValue(m_client_authenticator_type));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_consent_required_isSet) {
        obj.insert(QString("consentRequired"), ::OpenAPI::toJsonValue(m_consent_required));
    }
    if (m_default_client_scopes.size() > 0) {
        obj.insert(QString("defaultClientScopes"), ::OpenAPI::toJsonValue(m_default_client_scopes));
    }
    if (m_default_roles.size() > 0) {
        obj.insert(QString("defaultRoles"), ::OpenAPI::toJsonValue(m_default_roles));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_direct_access_grants_enabled_isSet) {
        obj.insert(QString("directAccessGrantsEnabled"), ::OpenAPI::toJsonValue(m_direct_access_grants_enabled));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_frontchannel_logout_isSet) {
        obj.insert(QString("frontchannelLogout"), ::OpenAPI::toJsonValue(m_frontchannel_logout));
    }
    if (m_full_scope_allowed_isSet) {
        obj.insert(QString("fullScopeAllowed"), ::OpenAPI::toJsonValue(m_full_scope_allowed));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_implicit_flow_enabled_isSet) {
        obj.insert(QString("implicitFlowEnabled"), ::OpenAPI::toJsonValue(m_implicit_flow_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_re_registration_timeout_isSet) {
        obj.insert(QString("nodeReRegistrationTimeout"), ::OpenAPI::toJsonValue(m_node_re_registration_timeout));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("notBefore"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_optional_client_scopes.size() > 0) {
        obj.insert(QString("optionalClientScopes"), ::OpenAPI::toJsonValue(m_optional_client_scopes));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_protocol_mappers.size() > 0) {
        obj.insert(QString("protocolMappers"), ::OpenAPI::toJsonValue(m_protocol_mappers));
    }
    if (m_public_client_isSet) {
        obj.insert(QString("publicClient"), ::OpenAPI::toJsonValue(m_public_client));
    }
    if (m_redirect_uris.size() > 0) {
        obj.insert(QString("redirectUris"), ::OpenAPI::toJsonValue(m_redirect_uris));
    }
    if (m_registered_nodes.size() > 0) {
        obj.insert(QString("registeredNodes"), ::OpenAPI::toJsonValue(m_registered_nodes));
    }
    if (m_registration_access_token_isSet) {
        obj.insert(QString("registrationAccessToken"), ::OpenAPI::toJsonValue(m_registration_access_token));
    }
    if (m_root_url_isSet) {
        obj.insert(QString("rootUrl"), ::OpenAPI::toJsonValue(m_root_url));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_service_accounts_enabled_isSet) {
        obj.insert(QString("serviceAccountsEnabled"), ::OpenAPI::toJsonValue(m_service_accounts_enabled));
    }
    if (m_standard_flow_enabled_isSet) {
        obj.insert(QString("standardFlowEnabled"), ::OpenAPI::toJsonValue(m_standard_flow_enabled));
    }
    if (m_surrogate_auth_required_isSet) {
        obj.insert(QString("surrogateAuthRequired"), ::OpenAPI::toJsonValue(m_surrogate_auth_required));
    }
    if (m_web_origins.size() > 0) {
        obj.insert(QString("webOrigins"), ::OpenAPI::toJsonValue(m_web_origins));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIClientRepresentation::getAccess() const {
    return m_access;
}
void OAIClientRepresentation::setAccess(const QMap<QString, QJsonValue> &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIClientRepresentation::is_access_Set() const{
    return m_access_isSet;
}

bool OAIClientRepresentation::is_access_Valid() const{
    return m_access_isValid;
}

QString OAIClientRepresentation::getAdminUrl() const {
    return m_admin_url;
}
void OAIClientRepresentation::setAdminUrl(const QString &admin_url) {
    m_admin_url = admin_url;
    m_admin_url_isSet = true;
}

bool OAIClientRepresentation::is_admin_url_Set() const{
    return m_admin_url_isSet;
}

bool OAIClientRepresentation::is_admin_url_Valid() const{
    return m_admin_url_isValid;
}

bool OAIClientRepresentation::isAlwaysDisplayInConsole() const {
    return m_always_display_in_console;
}
void OAIClientRepresentation::setAlwaysDisplayInConsole(const bool &always_display_in_console) {
    m_always_display_in_console = always_display_in_console;
    m_always_display_in_console_isSet = true;
}

bool OAIClientRepresentation::is_always_display_in_console_Set() const{
    return m_always_display_in_console_isSet;
}

bool OAIClientRepresentation::is_always_display_in_console_Valid() const{
    return m_always_display_in_console_isValid;
}

QMap<QString, QJsonValue> OAIClientRepresentation::getAttributes() const {
    return m_attributes;
}
void OAIClientRepresentation::setAttributes(const QMap<QString, QJsonValue> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIClientRepresentation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIClientRepresentation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QMap<QString, QJsonValue> OAIClientRepresentation::getAuthenticationFlowBindingOverrides() const {
    return m_authentication_flow_binding_overrides;
}
void OAIClientRepresentation::setAuthenticationFlowBindingOverrides(const QMap<QString, QJsonValue> &authentication_flow_binding_overrides) {
    m_authentication_flow_binding_overrides = authentication_flow_binding_overrides;
    m_authentication_flow_binding_overrides_isSet = true;
}

bool OAIClientRepresentation::is_authentication_flow_binding_overrides_Set() const{
    return m_authentication_flow_binding_overrides_isSet;
}

bool OAIClientRepresentation::is_authentication_flow_binding_overrides_Valid() const{
    return m_authentication_flow_binding_overrides_isValid;
}

bool OAIClientRepresentation::isAuthorizationServicesEnabled() const {
    return m_authorization_services_enabled;
}
void OAIClientRepresentation::setAuthorizationServicesEnabled(const bool &authorization_services_enabled) {
    m_authorization_services_enabled = authorization_services_enabled;
    m_authorization_services_enabled_isSet = true;
}

bool OAIClientRepresentation::is_authorization_services_enabled_Set() const{
    return m_authorization_services_enabled_isSet;
}

bool OAIClientRepresentation::is_authorization_services_enabled_Valid() const{
    return m_authorization_services_enabled_isValid;
}

OAIResourceServerRepresentation OAIClientRepresentation::getAuthorizationSettings() const {
    return m_authorization_settings;
}
void OAIClientRepresentation::setAuthorizationSettings(const OAIResourceServerRepresentation &authorization_settings) {
    m_authorization_settings = authorization_settings;
    m_authorization_settings_isSet = true;
}

bool OAIClientRepresentation::is_authorization_settings_Set() const{
    return m_authorization_settings_isSet;
}

bool OAIClientRepresentation::is_authorization_settings_Valid() const{
    return m_authorization_settings_isValid;
}

QString OAIClientRepresentation::getBaseUrl() const {
    return m_base_url;
}
void OAIClientRepresentation::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIClientRepresentation::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIClientRepresentation::is_base_url_Valid() const{
    return m_base_url_isValid;
}

bool OAIClientRepresentation::isBearerOnly() const {
    return m_bearer_only;
}
void OAIClientRepresentation::setBearerOnly(const bool &bearer_only) {
    m_bearer_only = bearer_only;
    m_bearer_only_isSet = true;
}

bool OAIClientRepresentation::is_bearer_only_Set() const{
    return m_bearer_only_isSet;
}

bool OAIClientRepresentation::is_bearer_only_Valid() const{
    return m_bearer_only_isValid;
}

QString OAIClientRepresentation::getClientAuthenticatorType() const {
    return m_client_authenticator_type;
}
void OAIClientRepresentation::setClientAuthenticatorType(const QString &client_authenticator_type) {
    m_client_authenticator_type = client_authenticator_type;
    m_client_authenticator_type_isSet = true;
}

bool OAIClientRepresentation::is_client_authenticator_type_Set() const{
    return m_client_authenticator_type_isSet;
}

bool OAIClientRepresentation::is_client_authenticator_type_Valid() const{
    return m_client_authenticator_type_isValid;
}

QString OAIClientRepresentation::getClientId() const {
    return m_client_id;
}
void OAIClientRepresentation::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIClientRepresentation::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIClientRepresentation::is_client_id_Valid() const{
    return m_client_id_isValid;
}

bool OAIClientRepresentation::isConsentRequired() const {
    return m_consent_required;
}
void OAIClientRepresentation::setConsentRequired(const bool &consent_required) {
    m_consent_required = consent_required;
    m_consent_required_isSet = true;
}

bool OAIClientRepresentation::is_consent_required_Set() const{
    return m_consent_required_isSet;
}

bool OAIClientRepresentation::is_consent_required_Valid() const{
    return m_consent_required_isValid;
}

QList<QString> OAIClientRepresentation::getDefaultClientScopes() const {
    return m_default_client_scopes;
}
void OAIClientRepresentation::setDefaultClientScopes(const QList<QString> &default_client_scopes) {
    m_default_client_scopes = default_client_scopes;
    m_default_client_scopes_isSet = true;
}

bool OAIClientRepresentation::is_default_client_scopes_Set() const{
    return m_default_client_scopes_isSet;
}

bool OAIClientRepresentation::is_default_client_scopes_Valid() const{
    return m_default_client_scopes_isValid;
}

QList<QString> OAIClientRepresentation::getDefaultRoles() const {
    return m_default_roles;
}
void OAIClientRepresentation::setDefaultRoles(const QList<QString> &default_roles) {
    m_default_roles = default_roles;
    m_default_roles_isSet = true;
}

bool OAIClientRepresentation::is_default_roles_Set() const{
    return m_default_roles_isSet;
}

bool OAIClientRepresentation::is_default_roles_Valid() const{
    return m_default_roles_isValid;
}

QString OAIClientRepresentation::getDescription() const {
    return m_description;
}
void OAIClientRepresentation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIClientRepresentation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIClientRepresentation::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIClientRepresentation::isDirectAccessGrantsEnabled() const {
    return m_direct_access_grants_enabled;
}
void OAIClientRepresentation::setDirectAccessGrantsEnabled(const bool &direct_access_grants_enabled) {
    m_direct_access_grants_enabled = direct_access_grants_enabled;
    m_direct_access_grants_enabled_isSet = true;
}

bool OAIClientRepresentation::is_direct_access_grants_enabled_Set() const{
    return m_direct_access_grants_enabled_isSet;
}

bool OAIClientRepresentation::is_direct_access_grants_enabled_Valid() const{
    return m_direct_access_grants_enabled_isValid;
}

bool OAIClientRepresentation::isEnabled() const {
    return m_enabled;
}
void OAIClientRepresentation::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIClientRepresentation::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIClientRepresentation::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIClientRepresentation::isFrontchannelLogout() const {
    return m_frontchannel_logout;
}
void OAIClientRepresentation::setFrontchannelLogout(const bool &frontchannel_logout) {
    m_frontchannel_logout = frontchannel_logout;
    m_frontchannel_logout_isSet = true;
}

bool OAIClientRepresentation::is_frontchannel_logout_Set() const{
    return m_frontchannel_logout_isSet;
}

bool OAIClientRepresentation::is_frontchannel_logout_Valid() const{
    return m_frontchannel_logout_isValid;
}

bool OAIClientRepresentation::isFullScopeAllowed() const {
    return m_full_scope_allowed;
}
void OAIClientRepresentation::setFullScopeAllowed(const bool &full_scope_allowed) {
    m_full_scope_allowed = full_scope_allowed;
    m_full_scope_allowed_isSet = true;
}

bool OAIClientRepresentation::is_full_scope_allowed_Set() const{
    return m_full_scope_allowed_isSet;
}

bool OAIClientRepresentation::is_full_scope_allowed_Valid() const{
    return m_full_scope_allowed_isValid;
}

QString OAIClientRepresentation::getId() const {
    return m_id;
}
void OAIClientRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClientRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClientRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIClientRepresentation::isImplicitFlowEnabled() const {
    return m_implicit_flow_enabled;
}
void OAIClientRepresentation::setImplicitFlowEnabled(const bool &implicit_flow_enabled) {
    m_implicit_flow_enabled = implicit_flow_enabled;
    m_implicit_flow_enabled_isSet = true;
}

bool OAIClientRepresentation::is_implicit_flow_enabled_Set() const{
    return m_implicit_flow_enabled_isSet;
}

bool OAIClientRepresentation::is_implicit_flow_enabled_Valid() const{
    return m_implicit_flow_enabled_isValid;
}

QString OAIClientRepresentation::getName() const {
    return m_name;
}
void OAIClientRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIClientRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIClientRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIClientRepresentation::getNodeReRegistrationTimeout() const {
    return m_node_re_registration_timeout;
}
void OAIClientRepresentation::setNodeReRegistrationTimeout(const qint32 &node_re_registration_timeout) {
    m_node_re_registration_timeout = node_re_registration_timeout;
    m_node_re_registration_timeout_isSet = true;
}

bool OAIClientRepresentation::is_node_re_registration_timeout_Set() const{
    return m_node_re_registration_timeout_isSet;
}

bool OAIClientRepresentation::is_node_re_registration_timeout_Valid() const{
    return m_node_re_registration_timeout_isValid;
}

qint32 OAIClientRepresentation::getNotBefore() const {
    return m_not_before;
}
void OAIClientRepresentation::setNotBefore(const qint32 &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAIClientRepresentation::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAIClientRepresentation::is_not_before_Valid() const{
    return m_not_before_isValid;
}

QList<QString> OAIClientRepresentation::getOptionalClientScopes() const {
    return m_optional_client_scopes;
}
void OAIClientRepresentation::setOptionalClientScopes(const QList<QString> &optional_client_scopes) {
    m_optional_client_scopes = optional_client_scopes;
    m_optional_client_scopes_isSet = true;
}

bool OAIClientRepresentation::is_optional_client_scopes_Set() const{
    return m_optional_client_scopes_isSet;
}

bool OAIClientRepresentation::is_optional_client_scopes_Valid() const{
    return m_optional_client_scopes_isValid;
}

QString OAIClientRepresentation::getOrigin() const {
    return m_origin;
}
void OAIClientRepresentation::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIClientRepresentation::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIClientRepresentation::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIClientRepresentation::getProtocol() const {
    return m_protocol;
}
void OAIClientRepresentation::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIClientRepresentation::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIClientRepresentation::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QList<OAIProtocolMapperRepresentation> OAIClientRepresentation::getProtocolMappers() const {
    return m_protocol_mappers;
}
void OAIClientRepresentation::setProtocolMappers(const QList<OAIProtocolMapperRepresentation> &protocol_mappers) {
    m_protocol_mappers = protocol_mappers;
    m_protocol_mappers_isSet = true;
}

bool OAIClientRepresentation::is_protocol_mappers_Set() const{
    return m_protocol_mappers_isSet;
}

bool OAIClientRepresentation::is_protocol_mappers_Valid() const{
    return m_protocol_mappers_isValid;
}

bool OAIClientRepresentation::isPublicClient() const {
    return m_public_client;
}
void OAIClientRepresentation::setPublicClient(const bool &public_client) {
    m_public_client = public_client;
    m_public_client_isSet = true;
}

bool OAIClientRepresentation::is_public_client_Set() const{
    return m_public_client_isSet;
}

bool OAIClientRepresentation::is_public_client_Valid() const{
    return m_public_client_isValid;
}

QList<QString> OAIClientRepresentation::getRedirectUris() const {
    return m_redirect_uris;
}
void OAIClientRepresentation::setRedirectUris(const QList<QString> &redirect_uris) {
    m_redirect_uris = redirect_uris;
    m_redirect_uris_isSet = true;
}

bool OAIClientRepresentation::is_redirect_uris_Set() const{
    return m_redirect_uris_isSet;
}

bool OAIClientRepresentation::is_redirect_uris_Valid() const{
    return m_redirect_uris_isValid;
}

QMap<QString, QJsonValue> OAIClientRepresentation::getRegisteredNodes() const {
    return m_registered_nodes;
}
void OAIClientRepresentation::setRegisteredNodes(const QMap<QString, QJsonValue> &registered_nodes) {
    m_registered_nodes = registered_nodes;
    m_registered_nodes_isSet = true;
}

bool OAIClientRepresentation::is_registered_nodes_Set() const{
    return m_registered_nodes_isSet;
}

bool OAIClientRepresentation::is_registered_nodes_Valid() const{
    return m_registered_nodes_isValid;
}

QString OAIClientRepresentation::getRegistrationAccessToken() const {
    return m_registration_access_token;
}
void OAIClientRepresentation::setRegistrationAccessToken(const QString &registration_access_token) {
    m_registration_access_token = registration_access_token;
    m_registration_access_token_isSet = true;
}

bool OAIClientRepresentation::is_registration_access_token_Set() const{
    return m_registration_access_token_isSet;
}

bool OAIClientRepresentation::is_registration_access_token_Valid() const{
    return m_registration_access_token_isValid;
}

QString OAIClientRepresentation::getRootUrl() const {
    return m_root_url;
}
void OAIClientRepresentation::setRootUrl(const QString &root_url) {
    m_root_url = root_url;
    m_root_url_isSet = true;
}

bool OAIClientRepresentation::is_root_url_Set() const{
    return m_root_url_isSet;
}

bool OAIClientRepresentation::is_root_url_Valid() const{
    return m_root_url_isValid;
}

QString OAIClientRepresentation::getSecret() const {
    return m_secret;
}
void OAIClientRepresentation::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIClientRepresentation::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIClientRepresentation::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIClientRepresentation::isServiceAccountsEnabled() const {
    return m_service_accounts_enabled;
}
void OAIClientRepresentation::setServiceAccountsEnabled(const bool &service_accounts_enabled) {
    m_service_accounts_enabled = service_accounts_enabled;
    m_service_accounts_enabled_isSet = true;
}

bool OAIClientRepresentation::is_service_accounts_enabled_Set() const{
    return m_service_accounts_enabled_isSet;
}

bool OAIClientRepresentation::is_service_accounts_enabled_Valid() const{
    return m_service_accounts_enabled_isValid;
}

bool OAIClientRepresentation::isStandardFlowEnabled() const {
    return m_standard_flow_enabled;
}
void OAIClientRepresentation::setStandardFlowEnabled(const bool &standard_flow_enabled) {
    m_standard_flow_enabled = standard_flow_enabled;
    m_standard_flow_enabled_isSet = true;
}

bool OAIClientRepresentation::is_standard_flow_enabled_Set() const{
    return m_standard_flow_enabled_isSet;
}

bool OAIClientRepresentation::is_standard_flow_enabled_Valid() const{
    return m_standard_flow_enabled_isValid;
}

bool OAIClientRepresentation::isSurrogateAuthRequired() const {
    return m_surrogate_auth_required;
}
void OAIClientRepresentation::setSurrogateAuthRequired(const bool &surrogate_auth_required) {
    m_surrogate_auth_required = surrogate_auth_required;
    m_surrogate_auth_required_isSet = true;
}

bool OAIClientRepresentation::is_surrogate_auth_required_Set() const{
    return m_surrogate_auth_required_isSet;
}

bool OAIClientRepresentation::is_surrogate_auth_required_Valid() const{
    return m_surrogate_auth_required_isValid;
}

QList<QString> OAIClientRepresentation::getWebOrigins() const {
    return m_web_origins;
}
void OAIClientRepresentation::setWebOrigins(const QList<QString> &web_origins) {
    m_web_origins = web_origins;
    m_web_origins_isSet = true;
}

bool OAIClientRepresentation::is_web_origins_Set() const{
    return m_web_origins_isSet;
}

bool OAIClientRepresentation::is_web_origins_Valid() const{
    return m_web_origins_isValid;
}

bool OAIClientRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_always_display_in_console_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_flow_binding_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_services_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bearer_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_authenticator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_client_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_access_grants_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontchannel_logout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_scope_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implicit_flow_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_re_registration_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_client_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_mappers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_accounts_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_flow_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surrogate_auth_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_origins.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
