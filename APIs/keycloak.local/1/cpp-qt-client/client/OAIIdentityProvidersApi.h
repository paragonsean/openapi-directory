/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIdentityProvidersApi_H
#define OAI_OAIIdentityProvidersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIdentityProviderMapperRepresentation.h"
#include "OAIIdentityProviderRepresentation.h"
#include "OAIManagementPermissionReference.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIdentityProvidersApi : public QObject {
    Q_OBJECT

public:
    OAIIdentityProvidersApi(const int timeOut = 0);
    ~OAIIdentityProvidersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmIdentityProviderImportConfigPost(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    */
    virtual void realmIdentityProviderInstancesAliasDelete(const QString &realm, const QString &alias);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void realmIdentityProviderInstancesAliasExportGet(const QString &realm, const QString &alias, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    */
    virtual void realmIdentityProviderInstancesAliasGet(const QString &realm, const QString &alias);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    */
    virtual void realmIdentityProviderInstancesAliasManagementPermissionsGet(const QString &realm, const QString &alias);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  oai_management_permission_reference OAIManagementPermissionReference [required]
    */
    virtual void realmIdentityProviderInstancesAliasManagementPermissionsPut(const QString &realm, const QString &alias, const OAIManagementPermissionReference &oai_management_permission_reference);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    */
    virtual void realmIdentityProviderInstancesAliasMapperTypesGet(const QString &realm, const QString &alias);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    */
    virtual void realmIdentityProviderInstancesAliasMappersGet(const QString &realm, const QString &alias);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmIdentityProviderInstancesAliasMappersIdDelete(const QString &realm, const QString &alias, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmIdentityProviderInstancesAliasMappersIdGet(const QString &realm, const QString &alias, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_identity_provider_mapper_representation OAIIdentityProviderMapperRepresentation [required]
    */
    virtual void realmIdentityProviderInstancesAliasMappersIdPut(const QString &realm, const QString &alias, const QString &id, const OAIIdentityProviderMapperRepresentation &oai_identity_provider_mapper_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  oai_identity_provider_mapper_representation OAIIdentityProviderMapperRepresentation [required]
    */
    virtual void realmIdentityProviderInstancesAliasMappersPost(const QString &realm, const QString &alias, const OAIIdentityProviderMapperRepresentation &oai_identity_provider_mapper_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  alias QString [required]
    * @param[in]  oai_identity_provider_representation OAIIdentityProviderRepresentation [required]
    */
    virtual void realmIdentityProviderInstancesAliasPut(const QString &realm, const QString &alias, const OAIIdentityProviderRepresentation &oai_identity_provider_representation);

    /**
    * @param[in]  realm QString [required]
    */
    virtual void realmIdentityProviderInstancesGet(const QString &realm);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_identity_provider_representation OAIIdentityProviderRepresentation [required]
    */
    virtual void realmIdentityProviderInstancesPost(const QString &realm, const OAIIdentityProviderRepresentation &oai_identity_provider_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void realmIdentityProviderProvidersProviderIdGet(const QString &realm, const QString &provider_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmIdentityProviderImportConfigPostCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasDeleteCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasExportGetCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasGetCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasManagementPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasManagementPermissionsPutCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasMapperTypesGetCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasMappersGetCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasMappersIdDeleteCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasMappersIdGetCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasMappersIdPutCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasMappersPostCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasPutCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesGetCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesPostCallback(OAIHttpRequestWorker *worker);
    void realmIdentityProviderProvidersProviderIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmIdentityProviderImportConfigPostSignal(QMap<QString, QJsonValue> summary);
    void realmIdentityProviderInstancesAliasDeleteSignal();
    void realmIdentityProviderInstancesAliasExportGetSignal();
    void realmIdentityProviderInstancesAliasGetSignal(OAIIdentityProviderRepresentation summary);
    void realmIdentityProviderInstancesAliasManagementPermissionsGetSignal(OAIManagementPermissionReference summary);
    void realmIdentityProviderInstancesAliasManagementPermissionsPutSignal(OAIManagementPermissionReference summary);
    void realmIdentityProviderInstancesAliasMapperTypesGetSignal();
    void realmIdentityProviderInstancesAliasMappersGetSignal(QList<OAIIdentityProviderMapperRepresentation> summary);
    void realmIdentityProviderInstancesAliasMappersIdDeleteSignal();
    void realmIdentityProviderInstancesAliasMappersIdGetSignal(OAIIdentityProviderMapperRepresentation summary);
    void realmIdentityProviderInstancesAliasMappersIdPutSignal();
    void realmIdentityProviderInstancesAliasMappersPostSignal();
    void realmIdentityProviderInstancesAliasPutSignal();
    void realmIdentityProviderInstancesGetSignal(QList<OAIIdentityProviderRepresentation> summary);
    void realmIdentityProviderInstancesPostSignal();
    void realmIdentityProviderProvidersProviderIdGetSignal();


    void realmIdentityProviderImportConfigPostSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void realmIdentityProviderInstancesAliasDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasExportGetSignalFull(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasGetSignalFull(OAIHttpRequestWorker *worker, OAIIdentityProviderRepresentation summary);
    void realmIdentityProviderInstancesAliasManagementPermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmIdentityProviderInstancesAliasManagementPermissionsPutSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmIdentityProviderInstancesAliasMapperTypesGetSignalFull(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasMappersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIIdentityProviderMapperRepresentation> summary);
    void realmIdentityProviderInstancesAliasMappersIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasMappersIdGetSignalFull(OAIHttpRequestWorker *worker, OAIIdentityProviderMapperRepresentation summary);
    void realmIdentityProviderInstancesAliasMappersIdPutSignalFull(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasMappersPostSignalFull(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesAliasPutSignalFull(OAIHttpRequestWorker *worker);
    void realmIdentityProviderInstancesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIIdentityProviderRepresentation> summary);
    void realmIdentityProviderInstancesPostSignalFull(OAIHttpRequestWorker *worker);
    void realmIdentityProviderProvidersProviderIdGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmIdentityProviderImportConfigPostSignalError() instead")
    void realmIdentityProviderImportConfigPostSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderImportConfigPostSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasDeleteSignalError() instead")
    void realmIdentityProviderInstancesAliasDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasExportGetSignalError() instead")
    void realmIdentityProviderInstancesAliasExportGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasExportGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasGetSignalError() instead")
    void realmIdentityProviderInstancesAliasGetSignalE(OAIIdentityProviderRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasGetSignalError(OAIIdentityProviderRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasManagementPermissionsGetSignalError() instead")
    void realmIdentityProviderInstancesAliasManagementPermissionsGetSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasManagementPermissionsGetSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasManagementPermissionsPutSignalError() instead")
    void realmIdentityProviderInstancesAliasManagementPermissionsPutSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasManagementPermissionsPutSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMapperTypesGetSignalError() instead")
    void realmIdentityProviderInstancesAliasMapperTypesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMapperTypesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersGetSignalError() instead")
    void realmIdentityProviderInstancesAliasMappersGetSignalE(QList<OAIIdentityProviderMapperRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersGetSignalError(QList<OAIIdentityProviderMapperRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersIdDeleteSignalError() instead")
    void realmIdentityProviderInstancesAliasMappersIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersIdGetSignalError() instead")
    void realmIdentityProviderInstancesAliasMappersIdGetSignalE(OAIIdentityProviderMapperRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersIdGetSignalError(OAIIdentityProviderMapperRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersIdPutSignalError() instead")
    void realmIdentityProviderInstancesAliasMappersIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersPostSignalError() instead")
    void realmIdentityProviderInstancesAliasMappersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasPutSignalError() instead")
    void realmIdentityProviderInstancesAliasPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesGetSignalError() instead")
    void realmIdentityProviderInstancesGetSignalE(QList<OAIIdentityProviderRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesGetSignalError(QList<OAIIdentityProviderRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesPostSignalError() instead")
    void realmIdentityProviderInstancesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderProvidersProviderIdGetSignalError() instead")
    void realmIdentityProviderProvidersProviderIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderProvidersProviderIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmIdentityProviderImportConfigPostSignalErrorFull() instead")
    void realmIdentityProviderImportConfigPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderImportConfigPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasDeleteSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasExportGetSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasExportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasExportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasGetSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasManagementPermissionsGetSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasManagementPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasManagementPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasManagementPermissionsPutSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasManagementPermissionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasManagementPermissionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMapperTypesGetSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasMapperTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMapperTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersGetSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasMappersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersIdDeleteSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasMappersIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersIdGetSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasMappersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersIdPutSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasMappersIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasMappersPostSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasMappersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasMappersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesAliasPutSignalErrorFull() instead")
    void realmIdentityProviderInstancesAliasPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesAliasPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesGetSignalErrorFull() instead")
    void realmIdentityProviderInstancesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderInstancesPostSignalErrorFull() instead")
    void realmIdentityProviderInstancesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderInstancesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmIdentityProviderProvidersProviderIdGetSignalErrorFull() instead")
    void realmIdentityProviderProvidersProviderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmIdentityProviderProvidersProviderIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
