/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessToken::OAIAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessToken::OAIAccessToken() {
    this->initializeModel();
}

OAIAccessToken::~OAIAccessToken() {}

void OAIAccessToken::initializeModel() {

    m_acr_isSet = false;
    m_acr_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_allowed_origins_isSet = false;
    m_allowed_origins_isValid = false;

    m_at_hash_isSet = false;
    m_at_hash_isValid = false;

    m_auth_time_isSet = false;
    m_auth_time_isValid = false;

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_azp_isSet = false;
    m_azp_isValid = false;

    m_birthdate_isSet = false;
    m_birthdate_isValid = false;

    m_c_hash_isSet = false;
    m_c_hash_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_claims_locales_isSet = false;
    m_claims_locales_isValid = false;

    m_cnf_isSet = false;
    m_cnf_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_exp_isSet = false;
    m_exp_isValid = false;

    m_family_name_isSet = false;
    m_family_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_iat_isSet = false;
    m_iat_isValid = false;

    m_iss_isSet = false;
    m_iss_isValid = false;

    m_jti_isSet = false;
    m_jti_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nbf_isSet = false;
    m_nbf_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_other_claims_isSet = false;
    m_other_claims_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_phone_number_verified_isSet = false;
    m_phone_number_verified_isValid = false;

    m_picture_isSet = false;
    m_picture_isValid = false;

    m_preferred_username_isSet = false;
    m_preferred_username_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_realm_access_isSet = false;
    m_realm_access_isValid = false;

    m_s_hash_isSet = false;
    m_s_hash_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_session_state_isSet = false;
    m_session_state_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;

    m_trusted_certs_isSet = false;
    m_trusted_certs_isValid = false;

    m_typ_isSet = false;
    m_typ_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_zoneinfo_isSet = false;
    m_zoneinfo_isValid = false;
}

void OAIAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessToken::fromJsonObject(QJsonObject json) {

    m_acr_isValid = ::OpenAPI::fromJsonValue(m_acr, json[QString("acr")]);
    m_acr_isSet = !json[QString("acr")].isNull() && m_acr_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_allowed_origins_isValid = ::OpenAPI::fromJsonValue(m_allowed_origins, json[QString("allowed-origins")]);
    m_allowed_origins_isSet = !json[QString("allowed-origins")].isNull() && m_allowed_origins_isValid;

    m_at_hash_isValid = ::OpenAPI::fromJsonValue(m_at_hash, json[QString("at_hash")]);
    m_at_hash_isSet = !json[QString("at_hash")].isNull() && m_at_hash_isValid;

    m_auth_time_isValid = ::OpenAPI::fromJsonValue(m_auth_time, json[QString("auth_time")]);
    m_auth_time_isSet = !json[QString("auth_time")].isNull() && m_auth_time_isValid;

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_azp_isValid = ::OpenAPI::fromJsonValue(m_azp, json[QString("azp")]);
    m_azp_isSet = !json[QString("azp")].isNull() && m_azp_isValid;

    m_birthdate_isValid = ::OpenAPI::fromJsonValue(m_birthdate, json[QString("birthdate")]);
    m_birthdate_isSet = !json[QString("birthdate")].isNull() && m_birthdate_isValid;

    m_c_hash_isValid = ::OpenAPI::fromJsonValue(m_c_hash, json[QString("c_hash")]);
    m_c_hash_isSet = !json[QString("c_hash")].isNull() && m_c_hash_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_claims_locales_isValid = ::OpenAPI::fromJsonValue(m_claims_locales, json[QString("claims_locales")]);
    m_claims_locales_isSet = !json[QString("claims_locales")].isNull() && m_claims_locales_isValid;

    m_cnf_isValid = ::OpenAPI::fromJsonValue(m_cnf, json[QString("cnf")]);
    m_cnf_isSet = !json[QString("cnf")].isNull() && m_cnf_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(m_email_verified, json[QString("email_verified")]);
    m_email_verified_isSet = !json[QString("email_verified")].isNull() && m_email_verified_isValid;

    m_exp_isValid = ::OpenAPI::fromJsonValue(m_exp, json[QString("exp")]);
    m_exp_isSet = !json[QString("exp")].isNull() && m_exp_isValid;

    m_family_name_isValid = ::OpenAPI::fromJsonValue(m_family_name, json[QString("family_name")]);
    m_family_name_isSet = !json[QString("family_name")].isNull() && m_family_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("given_name")]);
    m_given_name_isSet = !json[QString("given_name")].isNull() && m_given_name_isValid;

    m_iat_isValid = ::OpenAPI::fromJsonValue(m_iat, json[QString("iat")]);
    m_iat_isSet = !json[QString("iat")].isNull() && m_iat_isValid;

    m_iss_isValid = ::OpenAPI::fromJsonValue(m_iss, json[QString("iss")]);
    m_iss_isSet = !json[QString("iss")].isNull() && m_iss_isValid;

    m_jti_isValid = ::OpenAPI::fromJsonValue(m_jti, json[QString("jti")]);
    m_jti_isSet = !json[QString("jti")].isNull() && m_jti_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("middle_name")]);
    m_middle_name_isSet = !json[QString("middle_name")].isNull() && m_middle_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nbf_isValid = ::OpenAPI::fromJsonValue(m_nbf, json[QString("nbf")]);
    m_nbf_isSet = !json[QString("nbf")].isNull() && m_nbf_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_other_claims_isValid = ::OpenAPI::fromJsonValue(m_other_claims, json[QString("otherClaims")]);
    m_other_claims_isSet = !json[QString("otherClaims")].isNull() && m_other_claims_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_phone_number_verified_isValid = ::OpenAPI::fromJsonValue(m_phone_number_verified, json[QString("phone_number_verified")]);
    m_phone_number_verified_isSet = !json[QString("phone_number_verified")].isNull() && m_phone_number_verified_isValid;

    m_picture_isValid = ::OpenAPI::fromJsonValue(m_picture, json[QString("picture")]);
    m_picture_isSet = !json[QString("picture")].isNull() && m_picture_isValid;

    m_preferred_username_isValid = ::OpenAPI::fromJsonValue(m_preferred_username, json[QString("preferred_username")]);
    m_preferred_username_isSet = !json[QString("preferred_username")].isNull() && m_preferred_username_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_realm_access_isValid = ::OpenAPI::fromJsonValue(m_realm_access, json[QString("realm_access")]);
    m_realm_access_isSet = !json[QString("realm_access")].isNull() && m_realm_access_isValid;

    m_s_hash_isValid = ::OpenAPI::fromJsonValue(m_s_hash, json[QString("s_hash")]);
    m_s_hash_isSet = !json[QString("s_hash")].isNull() && m_s_hash_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_session_state_isValid = ::OpenAPI::fromJsonValue(m_session_state, json[QString("session_state")]);
    m_session_state_isSet = !json[QString("session_state")].isNull() && m_session_state_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;

    m_trusted_certs_isValid = ::OpenAPI::fromJsonValue(m_trusted_certs, json[QString("trusted-certs")]);
    m_trusted_certs_isSet = !json[QString("trusted-certs")].isNull() && m_trusted_certs_isValid;

    m_typ_isValid = ::OpenAPI::fromJsonValue(m_typ, json[QString("typ")]);
    m_typ_isSet = !json[QString("typ")].isNull() && m_typ_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_zoneinfo_isValid = ::OpenAPI::fromJsonValue(m_zoneinfo, json[QString("zoneinfo")]);
    m_zoneinfo_isSet = !json[QString("zoneinfo")].isNull() && m_zoneinfo_isValid;
}

QString OAIAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_acr_isSet) {
        obj.insert(QString("acr"), ::OpenAPI::toJsonValue(m_acr));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_allowed_origins.size() > 0) {
        obj.insert(QString("allowed-origins"), ::OpenAPI::toJsonValue(m_allowed_origins));
    }
    if (m_at_hash_isSet) {
        obj.insert(QString("at_hash"), ::OpenAPI::toJsonValue(m_at_hash));
    }
    if (m_auth_time_isSet) {
        obj.insert(QString("auth_time"), ::OpenAPI::toJsonValue(m_auth_time));
    }
    if (m_authorization.isSet()) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_azp_isSet) {
        obj.insert(QString("azp"), ::OpenAPI::toJsonValue(m_azp));
    }
    if (m_birthdate_isSet) {
        obj.insert(QString("birthdate"), ::OpenAPI::toJsonValue(m_birthdate));
    }
    if (m_c_hash_isSet) {
        obj.insert(QString("c_hash"), ::OpenAPI::toJsonValue(m_c_hash));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_claims_locales_isSet) {
        obj.insert(QString("claims_locales"), ::OpenAPI::toJsonValue(m_claims_locales));
    }
    if (m_cnf.isSet()) {
        obj.insert(QString("cnf"), ::OpenAPI::toJsonValue(m_cnf));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("email_verified"), ::OpenAPI::toJsonValue(m_email_verified));
    }
    if (m_exp_isSet) {
        obj.insert(QString("exp"), ::OpenAPI::toJsonValue(m_exp));
    }
    if (m_family_name_isSet) {
        obj.insert(QString("family_name"), ::OpenAPI::toJsonValue(m_family_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("given_name"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_iat_isSet) {
        obj.insert(QString("iat"), ::OpenAPI::toJsonValue(m_iat));
    }
    if (m_iss_isSet) {
        obj.insert(QString("iss"), ::OpenAPI::toJsonValue(m_iss));
    }
    if (m_jti_isSet) {
        obj.insert(QString("jti"), ::OpenAPI::toJsonValue(m_jti));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("middle_name"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nbf_isSet) {
        obj.insert(QString("nbf"), ::OpenAPI::toJsonValue(m_nbf));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_nonce_isSet) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_other_claims.size() > 0) {
        obj.insert(QString("otherClaims"), ::OpenAPI::toJsonValue(m_other_claims));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_phone_number_verified_isSet) {
        obj.insert(QString("phone_number_verified"), ::OpenAPI::toJsonValue(m_phone_number_verified));
    }
    if (m_picture_isSet) {
        obj.insert(QString("picture"), ::OpenAPI::toJsonValue(m_picture));
    }
    if (m_preferred_username_isSet) {
        obj.insert(QString("preferred_username"), ::OpenAPI::toJsonValue(m_preferred_username));
    }
    if (m_profile_isSet) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_realm_access.isSet()) {
        obj.insert(QString("realm_access"), ::OpenAPI::toJsonValue(m_realm_access));
    }
    if (m_s_hash_isSet) {
        obj.insert(QString("s_hash"), ::OpenAPI::toJsonValue(m_s_hash));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_session_state_isSet) {
        obj.insert(QString("session_state"), ::OpenAPI::toJsonValue(m_session_state));
    }
    if (m_sub_isSet) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(m_sub));
    }
    if (m_trusted_certs.size() > 0) {
        obj.insert(QString("trusted-certs"), ::OpenAPI::toJsonValue(m_trusted_certs));
    }
    if (m_typ_isSet) {
        obj.insert(QString("typ"), ::OpenAPI::toJsonValue(m_typ));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_zoneinfo_isSet) {
        obj.insert(QString("zoneinfo"), ::OpenAPI::toJsonValue(m_zoneinfo));
    }
    return obj;
}

QString OAIAccessToken::getAcr() const {
    return m_acr;
}
void OAIAccessToken::setAcr(const QString &acr) {
    m_acr = acr;
    m_acr_isSet = true;
}

bool OAIAccessToken::is_acr_Set() const{
    return m_acr_isSet;
}

bool OAIAccessToken::is_acr_Valid() const{
    return m_acr_isValid;
}

OAIAddressClaimSet OAIAccessToken::getAddress() const {
    return m_address;
}
void OAIAccessToken::setAddress(const OAIAddressClaimSet &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAccessToken::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAccessToken::is_address_Valid() const{
    return m_address_isValid;
}

QList<QString> OAIAccessToken::getAllowedOrigins() const {
    return m_allowed_origins;
}
void OAIAccessToken::setAllowedOrigins(const QList<QString> &allowed_origins) {
    m_allowed_origins = allowed_origins;
    m_allowed_origins_isSet = true;
}

bool OAIAccessToken::is_allowed_origins_Set() const{
    return m_allowed_origins_isSet;
}

bool OAIAccessToken::is_allowed_origins_Valid() const{
    return m_allowed_origins_isValid;
}

QString OAIAccessToken::getAtHash() const {
    return m_at_hash;
}
void OAIAccessToken::setAtHash(const QString &at_hash) {
    m_at_hash = at_hash;
    m_at_hash_isSet = true;
}

bool OAIAccessToken::is_at_hash_Set() const{
    return m_at_hash_isSet;
}

bool OAIAccessToken::is_at_hash_Valid() const{
    return m_at_hash_isValid;
}

qint64 OAIAccessToken::getAuthTime() const {
    return m_auth_time;
}
void OAIAccessToken::setAuthTime(const qint64 &auth_time) {
    m_auth_time = auth_time;
    m_auth_time_isSet = true;
}

bool OAIAccessToken::is_auth_time_Set() const{
    return m_auth_time_isSet;
}

bool OAIAccessToken::is_auth_time_Valid() const{
    return m_auth_time_isValid;
}

OAIAccessToken_Authorization OAIAccessToken::getAuthorization() const {
    return m_authorization;
}
void OAIAccessToken::setAuthorization(const OAIAccessToken_Authorization &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAIAccessToken::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAIAccessToken::is_authorization_Valid() const{
    return m_authorization_isValid;
}

QString OAIAccessToken::getAzp() const {
    return m_azp;
}
void OAIAccessToken::setAzp(const QString &azp) {
    m_azp = azp;
    m_azp_isSet = true;
}

bool OAIAccessToken::is_azp_Set() const{
    return m_azp_isSet;
}

bool OAIAccessToken::is_azp_Valid() const{
    return m_azp_isValid;
}

QString OAIAccessToken::getBirthdate() const {
    return m_birthdate;
}
void OAIAccessToken::setBirthdate(const QString &birthdate) {
    m_birthdate = birthdate;
    m_birthdate_isSet = true;
}

bool OAIAccessToken::is_birthdate_Set() const{
    return m_birthdate_isSet;
}

bool OAIAccessToken::is_birthdate_Valid() const{
    return m_birthdate_isValid;
}

QString OAIAccessToken::getCHash() const {
    return m_c_hash;
}
void OAIAccessToken::setCHash(const QString &c_hash) {
    m_c_hash = c_hash;
    m_c_hash_isSet = true;
}

bool OAIAccessToken::is_c_hash_Set() const{
    return m_c_hash_isSet;
}

bool OAIAccessToken::is_c_hash_Valid() const{
    return m_c_hash_isValid;
}

QString OAIAccessToken::getCategory() const {
    return m_category;
}
void OAIAccessToken::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAccessToken::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAccessToken::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIAccessToken::getClaimsLocales() const {
    return m_claims_locales;
}
void OAIAccessToken::setClaimsLocales(const QString &claims_locales) {
    m_claims_locales = claims_locales;
    m_claims_locales_isSet = true;
}

bool OAIAccessToken::is_claims_locales_Set() const{
    return m_claims_locales_isSet;
}

bool OAIAccessToken::is_claims_locales_Valid() const{
    return m_claims_locales_isValid;
}

OAIAccessToken_CertConf OAIAccessToken::getCnf() const {
    return m_cnf;
}
void OAIAccessToken::setCnf(const OAIAccessToken_CertConf &cnf) {
    m_cnf = cnf;
    m_cnf_isSet = true;
}

bool OAIAccessToken::is_cnf_Set() const{
    return m_cnf_isSet;
}

bool OAIAccessToken::is_cnf_Valid() const{
    return m_cnf_isValid;
}

QString OAIAccessToken::getEmail() const {
    return m_email;
}
void OAIAccessToken::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAccessToken::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAccessToken::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIAccessToken::isEmailVerified() const {
    return m_email_verified;
}
void OAIAccessToken::setEmailVerified(const bool &email_verified) {
    m_email_verified = email_verified;
    m_email_verified_isSet = true;
}

bool OAIAccessToken::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAIAccessToken::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

qint64 OAIAccessToken::getExp() const {
    return m_exp;
}
void OAIAccessToken::setExp(const qint64 &exp) {
    m_exp = exp;
    m_exp_isSet = true;
}

bool OAIAccessToken::is_exp_Set() const{
    return m_exp_isSet;
}

bool OAIAccessToken::is_exp_Valid() const{
    return m_exp_isValid;
}

QString OAIAccessToken::getFamilyName() const {
    return m_family_name;
}
void OAIAccessToken::setFamilyName(const QString &family_name) {
    m_family_name = family_name;
    m_family_name_isSet = true;
}

bool OAIAccessToken::is_family_name_Set() const{
    return m_family_name_isSet;
}

bool OAIAccessToken::is_family_name_Valid() const{
    return m_family_name_isValid;
}

QString OAIAccessToken::getGender() const {
    return m_gender;
}
void OAIAccessToken::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIAccessToken::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIAccessToken::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIAccessToken::getGivenName() const {
    return m_given_name;
}
void OAIAccessToken::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIAccessToken::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIAccessToken::is_given_name_Valid() const{
    return m_given_name_isValid;
}

qint64 OAIAccessToken::getIat() const {
    return m_iat;
}
void OAIAccessToken::setIat(const qint64 &iat) {
    m_iat = iat;
    m_iat_isSet = true;
}

bool OAIAccessToken::is_iat_Set() const{
    return m_iat_isSet;
}

bool OAIAccessToken::is_iat_Valid() const{
    return m_iat_isValid;
}

QString OAIAccessToken::getIss() const {
    return m_iss;
}
void OAIAccessToken::setIss(const QString &iss) {
    m_iss = iss;
    m_iss_isSet = true;
}

bool OAIAccessToken::is_iss_Set() const{
    return m_iss_isSet;
}

bool OAIAccessToken::is_iss_Valid() const{
    return m_iss_isValid;
}

QString OAIAccessToken::getJti() const {
    return m_jti;
}
void OAIAccessToken::setJti(const QString &jti) {
    m_jti = jti;
    m_jti_isSet = true;
}

bool OAIAccessToken::is_jti_Set() const{
    return m_jti_isSet;
}

bool OAIAccessToken::is_jti_Valid() const{
    return m_jti_isValid;
}

QString OAIAccessToken::getLocale() const {
    return m_locale;
}
void OAIAccessToken::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAccessToken::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAccessToken::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIAccessToken::getMiddleName() const {
    return m_middle_name;
}
void OAIAccessToken::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAIAccessToken::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAIAccessToken::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

QString OAIAccessToken::getName() const {
    return m_name;
}
void OAIAccessToken::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccessToken::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccessToken::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIAccessToken::getNbf() const {
    return m_nbf;
}
void OAIAccessToken::setNbf(const qint64 &nbf) {
    m_nbf = nbf;
    m_nbf_isSet = true;
}

bool OAIAccessToken::is_nbf_Set() const{
    return m_nbf_isSet;
}

bool OAIAccessToken::is_nbf_Valid() const{
    return m_nbf_isValid;
}

QString OAIAccessToken::getNickname() const {
    return m_nickname;
}
void OAIAccessToken::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIAccessToken::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIAccessToken::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIAccessToken::getNonce() const {
    return m_nonce;
}
void OAIAccessToken::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAIAccessToken::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAIAccessToken::is_nonce_Valid() const{
    return m_nonce_isValid;
}

QMap<QString, QJsonValue> OAIAccessToken::getOtherClaims() const {
    return m_other_claims;
}
void OAIAccessToken::setOtherClaims(const QMap<QString, QJsonValue> &other_claims) {
    m_other_claims = other_claims;
    m_other_claims_isSet = true;
}

bool OAIAccessToken::is_other_claims_Set() const{
    return m_other_claims_isSet;
}

bool OAIAccessToken::is_other_claims_Valid() const{
    return m_other_claims_isValid;
}

QString OAIAccessToken::getPhoneNumber() const {
    return m_phone_number;
}
void OAIAccessToken::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIAccessToken::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIAccessToken::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

bool OAIAccessToken::isPhoneNumberVerified() const {
    return m_phone_number_verified;
}
void OAIAccessToken::setPhoneNumberVerified(const bool &phone_number_verified) {
    m_phone_number_verified = phone_number_verified;
    m_phone_number_verified_isSet = true;
}

bool OAIAccessToken::is_phone_number_verified_Set() const{
    return m_phone_number_verified_isSet;
}

bool OAIAccessToken::is_phone_number_verified_Valid() const{
    return m_phone_number_verified_isValid;
}

QString OAIAccessToken::getPicture() const {
    return m_picture;
}
void OAIAccessToken::setPicture(const QString &picture) {
    m_picture = picture;
    m_picture_isSet = true;
}

bool OAIAccessToken::is_picture_Set() const{
    return m_picture_isSet;
}

bool OAIAccessToken::is_picture_Valid() const{
    return m_picture_isValid;
}

QString OAIAccessToken::getPreferredUsername() const {
    return m_preferred_username;
}
void OAIAccessToken::setPreferredUsername(const QString &preferred_username) {
    m_preferred_username = preferred_username;
    m_preferred_username_isSet = true;
}

bool OAIAccessToken::is_preferred_username_Set() const{
    return m_preferred_username_isSet;
}

bool OAIAccessToken::is_preferred_username_Valid() const{
    return m_preferred_username_isValid;
}

QString OAIAccessToken::getProfile() const {
    return m_profile;
}
void OAIAccessToken::setProfile(const QString &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIAccessToken::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIAccessToken::is_profile_Valid() const{
    return m_profile_isValid;
}

OAIAccessToken_Access OAIAccessToken::getRealmAccess() const {
    return m_realm_access;
}
void OAIAccessToken::setRealmAccess(const OAIAccessToken_Access &realm_access) {
    m_realm_access = realm_access;
    m_realm_access_isSet = true;
}

bool OAIAccessToken::is_realm_access_Set() const{
    return m_realm_access_isSet;
}

bool OAIAccessToken::is_realm_access_Valid() const{
    return m_realm_access_isValid;
}

QString OAIAccessToken::getSHash() const {
    return m_s_hash;
}
void OAIAccessToken::setSHash(const QString &s_hash) {
    m_s_hash = s_hash;
    m_s_hash_isSet = true;
}

bool OAIAccessToken::is_s_hash_Set() const{
    return m_s_hash_isSet;
}

bool OAIAccessToken::is_s_hash_Valid() const{
    return m_s_hash_isValid;
}

QString OAIAccessToken::getScope() const {
    return m_scope;
}
void OAIAccessToken::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAccessToken::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAccessToken::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIAccessToken::getSessionState() const {
    return m_session_state;
}
void OAIAccessToken::setSessionState(const QString &session_state) {
    m_session_state = session_state;
    m_session_state_isSet = true;
}

bool OAIAccessToken::is_session_state_Set() const{
    return m_session_state_isSet;
}

bool OAIAccessToken::is_session_state_Valid() const{
    return m_session_state_isValid;
}

QString OAIAccessToken::getSub() const {
    return m_sub;
}
void OAIAccessToken::setSub(const QString &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool OAIAccessToken::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAIAccessToken::is_sub_Valid() const{
    return m_sub_isValid;
}

QList<QString> OAIAccessToken::getTrustedCerts() const {
    return m_trusted_certs;
}
void OAIAccessToken::setTrustedCerts(const QList<QString> &trusted_certs) {
    m_trusted_certs = trusted_certs;
    m_trusted_certs_isSet = true;
}

bool OAIAccessToken::is_trusted_certs_Set() const{
    return m_trusted_certs_isSet;
}

bool OAIAccessToken::is_trusted_certs_Valid() const{
    return m_trusted_certs_isValid;
}

QString OAIAccessToken::getTyp() const {
    return m_typ;
}
void OAIAccessToken::setTyp(const QString &typ) {
    m_typ = typ;
    m_typ_isSet = true;
}

bool OAIAccessToken::is_typ_Set() const{
    return m_typ_isSet;
}

bool OAIAccessToken::is_typ_Valid() const{
    return m_typ_isValid;
}

qint64 OAIAccessToken::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAccessToken::setUpdatedAt(const qint64 &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAccessToken::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAccessToken::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIAccessToken::getWebsite() const {
    return m_website;
}
void OAIAccessToken::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIAccessToken::is_website_Set() const{
    return m_website_isSet;
}

bool OAIAccessToken::is_website_Valid() const{
    return m_website_isValid;
}

QString OAIAccessToken::getZoneinfo() const {
    return m_zoneinfo;
}
void OAIAccessToken::setZoneinfo(const QString &zoneinfo) {
    m_zoneinfo = zoneinfo;
    m_zoneinfo_isSet = true;
}

bool OAIAccessToken::is_zoneinfo_Set() const{
    return m_zoneinfo_isSet;
}

bool OAIAccessToken::is_zoneinfo_Valid() const{
    return m_zoneinfo_isValid;
}

bool OAIAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_origins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_at_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_azp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthdate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claims_locales_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jti_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nbf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_claims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_certs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_typ_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoneinfo_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
