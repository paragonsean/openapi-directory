/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationExecutionRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationExecutionRepresentation::OAIAuthenticationExecutionRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationExecutionRepresentation::OAIAuthenticationExecutionRepresentation() {
    this->initializeModel();
}

OAIAuthenticationExecutionRepresentation::~OAIAuthenticationExecutionRepresentation() {}

void OAIAuthenticationExecutionRepresentation::initializeModel() {

    m_authenticator_isSet = false;
    m_authenticator_isValid = false;

    m_authenticator_config_isSet = false;
    m_authenticator_config_isValid = false;

    m_authenticator_flow_isSet = false;
    m_authenticator_flow_isValid = false;

    m_autheticator_flow_isSet = false;
    m_autheticator_flow_isValid = false;

    m_flow_id_isSet = false;
    m_flow_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_parent_flow_isSet = false;
    m_parent_flow_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_requirement_isSet = false;
    m_requirement_isValid = false;
}

void OAIAuthenticationExecutionRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationExecutionRepresentation::fromJsonObject(QJsonObject json) {

    m_authenticator_isValid = ::OpenAPI::fromJsonValue(m_authenticator, json[QString("authenticator")]);
    m_authenticator_isSet = !json[QString("authenticator")].isNull() && m_authenticator_isValid;

    m_authenticator_config_isValid = ::OpenAPI::fromJsonValue(m_authenticator_config, json[QString("authenticatorConfig")]);
    m_authenticator_config_isSet = !json[QString("authenticatorConfig")].isNull() && m_authenticator_config_isValid;

    m_authenticator_flow_isValid = ::OpenAPI::fromJsonValue(m_authenticator_flow, json[QString("authenticatorFlow")]);
    m_authenticator_flow_isSet = !json[QString("authenticatorFlow")].isNull() && m_authenticator_flow_isValid;

    m_autheticator_flow_isValid = ::OpenAPI::fromJsonValue(m_autheticator_flow, json[QString("autheticatorFlow")]);
    m_autheticator_flow_isSet = !json[QString("autheticatorFlow")].isNull() && m_autheticator_flow_isValid;

    m_flow_id_isValid = ::OpenAPI::fromJsonValue(m_flow_id, json[QString("flowId")]);
    m_flow_id_isSet = !json[QString("flowId")].isNull() && m_flow_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parent_flow_isValid = ::OpenAPI::fromJsonValue(m_parent_flow, json[QString("parentFlow")]);
    m_parent_flow_isSet = !json[QString("parentFlow")].isNull() && m_parent_flow_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_requirement_isValid = ::OpenAPI::fromJsonValue(m_requirement, json[QString("requirement")]);
    m_requirement_isSet = !json[QString("requirement")].isNull() && m_requirement_isValid;
}

QString OAIAuthenticationExecutionRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationExecutionRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_authenticator_isSet) {
        obj.insert(QString("authenticator"), ::OpenAPI::toJsonValue(m_authenticator));
    }
    if (m_authenticator_config_isSet) {
        obj.insert(QString("authenticatorConfig"), ::OpenAPI::toJsonValue(m_authenticator_config));
    }
    if (m_authenticator_flow_isSet) {
        obj.insert(QString("authenticatorFlow"), ::OpenAPI::toJsonValue(m_authenticator_flow));
    }
    if (m_autheticator_flow_isSet) {
        obj.insert(QString("autheticatorFlow"), ::OpenAPI::toJsonValue(m_autheticator_flow));
    }
    if (m_flow_id_isSet) {
        obj.insert(QString("flowId"), ::OpenAPI::toJsonValue(m_flow_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parent_flow_isSet) {
        obj.insert(QString("parentFlow"), ::OpenAPI::toJsonValue(m_parent_flow));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_requirement_isSet) {
        obj.insert(QString("requirement"), ::OpenAPI::toJsonValue(m_requirement));
    }
    return obj;
}

QString OAIAuthenticationExecutionRepresentation::getAuthenticator() const {
    return m_authenticator;
}
void OAIAuthenticationExecutionRepresentation::setAuthenticator(const QString &authenticator) {
    m_authenticator = authenticator;
    m_authenticator_isSet = true;
}

bool OAIAuthenticationExecutionRepresentation::is_authenticator_Set() const{
    return m_authenticator_isSet;
}

bool OAIAuthenticationExecutionRepresentation::is_authenticator_Valid() const{
    return m_authenticator_isValid;
}

QString OAIAuthenticationExecutionRepresentation::getAuthenticatorConfig() const {
    return m_authenticator_config;
}
void OAIAuthenticationExecutionRepresentation::setAuthenticatorConfig(const QString &authenticator_config) {
    m_authenticator_config = authenticator_config;
    m_authenticator_config_isSet = true;
}

bool OAIAuthenticationExecutionRepresentation::is_authenticator_config_Set() const{
    return m_authenticator_config_isSet;
}

bool OAIAuthenticationExecutionRepresentation::is_authenticator_config_Valid() const{
    return m_authenticator_config_isValid;
}

bool OAIAuthenticationExecutionRepresentation::isAuthenticatorFlow() const {
    return m_authenticator_flow;
}
void OAIAuthenticationExecutionRepresentation::setAuthenticatorFlow(const bool &authenticator_flow) {
    m_authenticator_flow = authenticator_flow;
    m_authenticator_flow_isSet = true;
}

bool OAIAuthenticationExecutionRepresentation::is_authenticator_flow_Set() const{
    return m_authenticator_flow_isSet;
}

bool OAIAuthenticationExecutionRepresentation::is_authenticator_flow_Valid() const{
    return m_authenticator_flow_isValid;
}

bool OAIAuthenticationExecutionRepresentation::isAutheticatorFlow() const {
    return m_autheticator_flow;
}
void OAIAuthenticationExecutionRepresentation::setAutheticatorFlow(const bool &autheticator_flow) {
    m_autheticator_flow = autheticator_flow;
    m_autheticator_flow_isSet = true;
}

bool OAIAuthenticationExecutionRepresentation::is_autheticator_flow_Set() const{
    return m_autheticator_flow_isSet;
}

bool OAIAuthenticationExecutionRepresentation::is_autheticator_flow_Valid() const{
    return m_autheticator_flow_isValid;
}

QString OAIAuthenticationExecutionRepresentation::getFlowId() const {
    return m_flow_id;
}
void OAIAuthenticationExecutionRepresentation::setFlowId(const QString &flow_id) {
    m_flow_id = flow_id;
    m_flow_id_isSet = true;
}

bool OAIAuthenticationExecutionRepresentation::is_flow_id_Set() const{
    return m_flow_id_isSet;
}

bool OAIAuthenticationExecutionRepresentation::is_flow_id_Valid() const{
    return m_flow_id_isValid;
}

QString OAIAuthenticationExecutionRepresentation::getId() const {
    return m_id;
}
void OAIAuthenticationExecutionRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthenticationExecutionRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthenticationExecutionRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAuthenticationExecutionRepresentation::getParentFlow() const {
    return m_parent_flow;
}
void OAIAuthenticationExecutionRepresentation::setParentFlow(const QString &parent_flow) {
    m_parent_flow = parent_flow;
    m_parent_flow_isSet = true;
}

bool OAIAuthenticationExecutionRepresentation::is_parent_flow_Set() const{
    return m_parent_flow_isSet;
}

bool OAIAuthenticationExecutionRepresentation::is_parent_flow_Valid() const{
    return m_parent_flow_isValid;
}

qint32 OAIAuthenticationExecutionRepresentation::getPriority() const {
    return m_priority;
}
void OAIAuthenticationExecutionRepresentation::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIAuthenticationExecutionRepresentation::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIAuthenticationExecutionRepresentation::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIAuthenticationExecutionRepresentation::getRequirement() const {
    return m_requirement;
}
void OAIAuthenticationExecutionRepresentation::setRequirement(const QString &requirement) {
    m_requirement = requirement;
    m_requirement_isSet = true;
}

bool OAIAuthenticationExecutionRepresentation::is_requirement_Set() const{
    return m_requirement_isSet;
}

bool OAIAuthenticationExecutionRepresentation::is_requirement_Valid() const{
    return m_requirement_isValid;
}

bool OAIAuthenticationExecutionRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authenticator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticator_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticator_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_autheticator_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationExecutionRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
