/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyStoreConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyStoreConfig::OAIKeyStoreConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyStoreConfig::OAIKeyStoreConfig() {
    this->initializeModel();
}

OAIKeyStoreConfig::~OAIKeyStoreConfig() {}

void OAIKeyStoreConfig::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_key_alias_isSet = false;
    m_key_alias_isValid = false;

    m_key_password_isSet = false;
    m_key_password_isValid = false;

    m_realm_alias_isSet = false;
    m_realm_alias_isValid = false;

    m_realm_certificate_isSet = false;
    m_realm_certificate_isValid = false;

    m_store_password_isSet = false;
    m_store_password_isValid = false;
}

void OAIKeyStoreConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyStoreConfig::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_key_alias_isValid = ::OpenAPI::fromJsonValue(m_key_alias, json[QString("keyAlias")]);
    m_key_alias_isSet = !json[QString("keyAlias")].isNull() && m_key_alias_isValid;

    m_key_password_isValid = ::OpenAPI::fromJsonValue(m_key_password, json[QString("keyPassword")]);
    m_key_password_isSet = !json[QString("keyPassword")].isNull() && m_key_password_isValid;

    m_realm_alias_isValid = ::OpenAPI::fromJsonValue(m_realm_alias, json[QString("realmAlias")]);
    m_realm_alias_isSet = !json[QString("realmAlias")].isNull() && m_realm_alias_isValid;

    m_realm_certificate_isValid = ::OpenAPI::fromJsonValue(m_realm_certificate, json[QString("realmCertificate")]);
    m_realm_certificate_isSet = !json[QString("realmCertificate")].isNull() && m_realm_certificate_isValid;

    m_store_password_isValid = ::OpenAPI::fromJsonValue(m_store_password, json[QString("storePassword")]);
    m_store_password_isSet = !json[QString("storePassword")].isNull() && m_store_password_isValid;
}

QString OAIKeyStoreConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyStoreConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_key_alias_isSet) {
        obj.insert(QString("keyAlias"), ::OpenAPI::toJsonValue(m_key_alias));
    }
    if (m_key_password_isSet) {
        obj.insert(QString("keyPassword"), ::OpenAPI::toJsonValue(m_key_password));
    }
    if (m_realm_alias_isSet) {
        obj.insert(QString("realmAlias"), ::OpenAPI::toJsonValue(m_realm_alias));
    }
    if (m_realm_certificate_isSet) {
        obj.insert(QString("realmCertificate"), ::OpenAPI::toJsonValue(m_realm_certificate));
    }
    if (m_store_password_isSet) {
        obj.insert(QString("storePassword"), ::OpenAPI::toJsonValue(m_store_password));
    }
    return obj;
}

QString OAIKeyStoreConfig::getFormat() const {
    return m_format;
}
void OAIKeyStoreConfig::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIKeyStoreConfig::is_format_Set() const{
    return m_format_isSet;
}

bool OAIKeyStoreConfig::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIKeyStoreConfig::getKeyAlias() const {
    return m_key_alias;
}
void OAIKeyStoreConfig::setKeyAlias(const QString &key_alias) {
    m_key_alias = key_alias;
    m_key_alias_isSet = true;
}

bool OAIKeyStoreConfig::is_key_alias_Set() const{
    return m_key_alias_isSet;
}

bool OAIKeyStoreConfig::is_key_alias_Valid() const{
    return m_key_alias_isValid;
}

QString OAIKeyStoreConfig::getKeyPassword() const {
    return m_key_password;
}
void OAIKeyStoreConfig::setKeyPassword(const QString &key_password) {
    m_key_password = key_password;
    m_key_password_isSet = true;
}

bool OAIKeyStoreConfig::is_key_password_Set() const{
    return m_key_password_isSet;
}

bool OAIKeyStoreConfig::is_key_password_Valid() const{
    return m_key_password_isValid;
}

QString OAIKeyStoreConfig::getRealmAlias() const {
    return m_realm_alias;
}
void OAIKeyStoreConfig::setRealmAlias(const QString &realm_alias) {
    m_realm_alias = realm_alias;
    m_realm_alias_isSet = true;
}

bool OAIKeyStoreConfig::is_realm_alias_Set() const{
    return m_realm_alias_isSet;
}

bool OAIKeyStoreConfig::is_realm_alias_Valid() const{
    return m_realm_alias_isValid;
}

bool OAIKeyStoreConfig::isRealmCertificate() const {
    return m_realm_certificate;
}
void OAIKeyStoreConfig::setRealmCertificate(const bool &realm_certificate) {
    m_realm_certificate = realm_certificate;
    m_realm_certificate_isSet = true;
}

bool OAIKeyStoreConfig::is_realm_certificate_Set() const{
    return m_realm_certificate_isSet;
}

bool OAIKeyStoreConfig::is_realm_certificate_Valid() const{
    return m_realm_certificate_isValid;
}

QString OAIKeyStoreConfig::getStorePassword() const {
    return m_store_password;
}
void OAIKeyStoreConfig::setStorePassword(const QString &store_password) {
    m_store_password = store_password;
    m_store_password_isSet = true;
}

bool OAIKeyStoreConfig::is_store_password_Set() const{
    return m_store_password_isSet;
}

bool OAIKeyStoreConfig::is_store_password_Valid() const{
    return m_store_password_isValid;
}

bool OAIKeyStoreConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyStoreConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
