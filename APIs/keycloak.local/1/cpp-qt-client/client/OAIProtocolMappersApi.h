/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProtocolMappersApi_H
#define OAI_OAIProtocolMappersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProtocolMapperRepresentation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProtocolMappersApi : public QObject {
    Q_OBJECT

public:
    OAIProtocolMappersApi(const int timeOut = 0);
    ~OAIProtocolMappersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id1 QString [required]
    * @param[in]  id2 QString [required]
    */
    virtual void realmClientScopesId1ProtocolMappersModelsId2Delete(const QString &realm, const QString &id1, const QString &id2);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id1 QString [required]
    * @param[in]  id2 QString [required]
    */
    virtual void realmClientScopesId1ProtocolMappersModelsId2Get(const QString &realm, const QString &id1, const QString &id2);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id1 QString [required]
    * @param[in]  id2 QString [required]
    * @param[in]  oai_protocol_mapper_representation OAIProtocolMapperRepresentation [required]
    */
    virtual void realmClientScopesId1ProtocolMappersModelsId2Put(const QString &realm, const QString &id1, const QString &id2, const OAIProtocolMapperRepresentation &oai_protocol_mapper_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_protocol_mapper_representation QList<OAIProtocolMapperRepresentation> [required]
    */
    virtual void realmClientScopesIdProtocolMappersAddModelsPost(const QString &realm, const QString &id, const QList<OAIProtocolMapperRepresentation> &oai_protocol_mapper_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientScopesIdProtocolMappersModelsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_protocol_mapper_representation OAIProtocolMapperRepresentation [required]
    */
    virtual void realmClientScopesIdProtocolMappersModelsPost(const QString &realm, const QString &id, const OAIProtocolMapperRepresentation &oai_protocol_mapper_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  protocol QString [required]
    */
    virtual void realmClientScopesIdProtocolMappersProtocolProtocolGet(const QString &realm, const QString &id, const QString &protocol);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id1 QString [required]
    * @param[in]  id2 QString [required]
    */
    virtual void realmClientsId1ProtocolMappersModelsId2Delete(const QString &realm, const QString &id1, const QString &id2);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id1 QString [required]
    * @param[in]  id2 QString [required]
    */
    virtual void realmClientsId1ProtocolMappersModelsId2Get(const QString &realm, const QString &id1, const QString &id2);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id1 QString [required]
    * @param[in]  id2 QString [required]
    * @param[in]  oai_protocol_mapper_representation OAIProtocolMapperRepresentation [required]
    */
    virtual void realmClientsId1ProtocolMappersModelsId2Put(const QString &realm, const QString &id1, const QString &id2, const OAIProtocolMapperRepresentation &oai_protocol_mapper_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_protocol_mapper_representation QList<OAIProtocolMapperRepresentation> [required]
    */
    virtual void realmClientsIdProtocolMappersAddModelsPost(const QString &realm, const QString &id, const QList<OAIProtocolMapperRepresentation> &oai_protocol_mapper_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmClientsIdProtocolMappersModelsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_protocol_mapper_representation OAIProtocolMapperRepresentation [required]
    */
    virtual void realmClientsIdProtocolMappersModelsPost(const QString &realm, const QString &id, const OAIProtocolMapperRepresentation &oai_protocol_mapper_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  protocol QString [required]
    */
    virtual void realmClientsIdProtocolMappersProtocolProtocolGet(const QString &realm, const QString &id, const QString &protocol);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmClientScopesId1ProtocolMappersModelsId2DeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesId1ProtocolMappersModelsId2GetCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesId1ProtocolMappersModelsId2PutCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdProtocolMappersAddModelsPostCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdProtocolMappersModelsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdProtocolMappersModelsPostCallback(OAIHttpRequestWorker *worker);
    void realmClientScopesIdProtocolMappersProtocolProtocolGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsId1ProtocolMappersModelsId2DeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientsId1ProtocolMappersModelsId2GetCallback(OAIHttpRequestWorker *worker);
    void realmClientsId1ProtocolMappersModelsId2PutCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdProtocolMappersAddModelsPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdProtocolMappersModelsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdProtocolMappersModelsPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdProtocolMappersProtocolProtocolGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmClientScopesId1ProtocolMappersModelsId2DeleteSignal();
    void realmClientScopesId1ProtocolMappersModelsId2GetSignal(OAIProtocolMapperRepresentation summary);
    void realmClientScopesId1ProtocolMappersModelsId2PutSignal();
    void realmClientScopesIdProtocolMappersAddModelsPostSignal();
    void realmClientScopesIdProtocolMappersModelsGetSignal(QList<OAIProtocolMapperRepresentation> summary);
    void realmClientScopesIdProtocolMappersModelsPostSignal();
    void realmClientScopesIdProtocolMappersProtocolProtocolGetSignal(QList<OAIProtocolMapperRepresentation> summary);
    void realmClientsId1ProtocolMappersModelsId2DeleteSignal();
    void realmClientsId1ProtocolMappersModelsId2GetSignal(OAIProtocolMapperRepresentation summary);
    void realmClientsId1ProtocolMappersModelsId2PutSignal();
    void realmClientsIdProtocolMappersAddModelsPostSignal();
    void realmClientsIdProtocolMappersModelsGetSignal(QList<OAIProtocolMapperRepresentation> summary);
    void realmClientsIdProtocolMappersModelsPostSignal();
    void realmClientsIdProtocolMappersProtocolProtocolGetSignal(QList<OAIProtocolMapperRepresentation> summary);


    void realmClientScopesId1ProtocolMappersModelsId2DeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientScopesId1ProtocolMappersModelsId2GetSignalFull(OAIHttpRequestWorker *worker, OAIProtocolMapperRepresentation summary);
    void realmClientScopesId1ProtocolMappersModelsId2PutSignalFull(OAIHttpRequestWorker *worker);
    void realmClientScopesIdProtocolMappersAddModelsPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientScopesIdProtocolMappersModelsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIProtocolMapperRepresentation> summary);
    void realmClientScopesIdProtocolMappersModelsPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientScopesIdProtocolMappersProtocolProtocolGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIProtocolMapperRepresentation> summary);
    void realmClientsId1ProtocolMappersModelsId2DeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsId1ProtocolMappersModelsId2GetSignalFull(OAIHttpRequestWorker *worker, OAIProtocolMapperRepresentation summary);
    void realmClientsId1ProtocolMappersModelsId2PutSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdProtocolMappersAddModelsPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdProtocolMappersModelsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIProtocolMapperRepresentation> summary);
    void realmClientsIdProtocolMappersModelsPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdProtocolMappersProtocolProtocolGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIProtocolMapperRepresentation> summary);

    Q_DECL_DEPRECATED_X("Use realmClientScopesId1ProtocolMappersModelsId2DeleteSignalError() instead")
    void realmClientScopesId1ProtocolMappersModelsId2DeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesId1ProtocolMappersModelsId2DeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesId1ProtocolMappersModelsId2GetSignalError() instead")
    void realmClientScopesId1ProtocolMappersModelsId2GetSignalE(OAIProtocolMapperRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesId1ProtocolMappersModelsId2GetSignalError(OAIProtocolMapperRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesId1ProtocolMappersModelsId2PutSignalError() instead")
    void realmClientScopesId1ProtocolMappersModelsId2PutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesId1ProtocolMappersModelsId2PutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdProtocolMappersAddModelsPostSignalError() instead")
    void realmClientScopesIdProtocolMappersAddModelsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdProtocolMappersAddModelsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdProtocolMappersModelsGetSignalError() instead")
    void realmClientScopesIdProtocolMappersModelsGetSignalE(QList<OAIProtocolMapperRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdProtocolMappersModelsGetSignalError(QList<OAIProtocolMapperRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdProtocolMappersModelsPostSignalError() instead")
    void realmClientScopesIdProtocolMappersModelsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdProtocolMappersModelsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdProtocolMappersProtocolProtocolGetSignalError() instead")
    void realmClientScopesIdProtocolMappersProtocolProtocolGetSignalE(QList<OAIProtocolMapperRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdProtocolMappersProtocolProtocolGetSignalError(QList<OAIProtocolMapperRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsId1ProtocolMappersModelsId2DeleteSignalError() instead")
    void realmClientsId1ProtocolMappersModelsId2DeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsId1ProtocolMappersModelsId2DeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsId1ProtocolMappersModelsId2GetSignalError() instead")
    void realmClientsId1ProtocolMappersModelsId2GetSignalE(OAIProtocolMapperRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsId1ProtocolMappersModelsId2GetSignalError(OAIProtocolMapperRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsId1ProtocolMappersModelsId2PutSignalError() instead")
    void realmClientsId1ProtocolMappersModelsId2PutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsId1ProtocolMappersModelsId2PutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdProtocolMappersAddModelsPostSignalError() instead")
    void realmClientsIdProtocolMappersAddModelsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdProtocolMappersAddModelsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdProtocolMappersModelsGetSignalError() instead")
    void realmClientsIdProtocolMappersModelsGetSignalE(QList<OAIProtocolMapperRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdProtocolMappersModelsGetSignalError(QList<OAIProtocolMapperRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdProtocolMappersModelsPostSignalError() instead")
    void realmClientsIdProtocolMappersModelsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdProtocolMappersModelsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdProtocolMappersProtocolProtocolGetSignalError() instead")
    void realmClientsIdProtocolMappersProtocolProtocolGetSignalE(QList<OAIProtocolMapperRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdProtocolMappersProtocolProtocolGetSignalError(QList<OAIProtocolMapperRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmClientScopesId1ProtocolMappersModelsId2DeleteSignalErrorFull() instead")
    void realmClientScopesId1ProtocolMappersModelsId2DeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesId1ProtocolMappersModelsId2DeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesId1ProtocolMappersModelsId2GetSignalErrorFull() instead")
    void realmClientScopesId1ProtocolMappersModelsId2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesId1ProtocolMappersModelsId2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesId1ProtocolMappersModelsId2PutSignalErrorFull() instead")
    void realmClientScopesId1ProtocolMappersModelsId2PutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesId1ProtocolMappersModelsId2PutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdProtocolMappersAddModelsPostSignalErrorFull() instead")
    void realmClientScopesIdProtocolMappersAddModelsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdProtocolMappersAddModelsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdProtocolMappersModelsGetSignalErrorFull() instead")
    void realmClientScopesIdProtocolMappersModelsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdProtocolMappersModelsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdProtocolMappersModelsPostSignalErrorFull() instead")
    void realmClientScopesIdProtocolMappersModelsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdProtocolMappersModelsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientScopesIdProtocolMappersProtocolProtocolGetSignalErrorFull() instead")
    void realmClientScopesIdProtocolMappersProtocolProtocolGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientScopesIdProtocolMappersProtocolProtocolGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsId1ProtocolMappersModelsId2DeleteSignalErrorFull() instead")
    void realmClientsId1ProtocolMappersModelsId2DeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsId1ProtocolMappersModelsId2DeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsId1ProtocolMappersModelsId2GetSignalErrorFull() instead")
    void realmClientsId1ProtocolMappersModelsId2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsId1ProtocolMappersModelsId2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsId1ProtocolMappersModelsId2PutSignalErrorFull() instead")
    void realmClientsId1ProtocolMappersModelsId2PutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsId1ProtocolMappersModelsId2PutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdProtocolMappersAddModelsPostSignalErrorFull() instead")
    void realmClientsIdProtocolMappersAddModelsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdProtocolMappersAddModelsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdProtocolMappersModelsGetSignalErrorFull() instead")
    void realmClientsIdProtocolMappersModelsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdProtocolMappersModelsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdProtocolMappersModelsPostSignalErrorFull() instead")
    void realmClientsIdProtocolMappersModelsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdProtocolMappersModelsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdProtocolMappersProtocolProtocolGetSignalErrorFull() instead")
    void realmClientsIdProtocolMappersProtocolProtocolGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdProtocolMappersProtocolProtocolGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
