/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoleMapperApi_H
#define OAI_OAIRoleMapperApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMappingsRepresentation.h"
#include "OAIRoleRepresentation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoleMapperApi : public QObject {
    Q_OBJECT

public:
    OAIRoleMapperApi(const int timeOut = 0);
    ~OAIRoleMapperApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmGroupsIdRoleMappingsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmGroupsIdRoleMappingsRealmAvailableGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmGroupsIdRoleMappingsRealmCompositeGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmGroupsIdRoleMappingsRealmDelete(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmGroupsIdRoleMappingsRealmGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmGroupsIdRoleMappingsRealmPost(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdRoleMappingsGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdRoleMappingsRealmAvailableGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdRoleMappingsRealmCompositeGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmUsersIdRoleMappingsRealmDelete(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    */
    virtual void realmUsersIdRoleMappingsRealmGet(const QString &realm, const QString &id);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmUsersIdRoleMappingsRealmPost(const QString &realm, const QString &id, const QList<OAIRoleRepresentation> &oai_role_representation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmGroupsIdRoleMappingsGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsRealmAvailableGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsRealmCompositeGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsRealmDeleteCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsRealmGetCallback(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsRealmPostCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsRealmAvailableGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsRealmCompositeGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsRealmDeleteCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsRealmGetCallback(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsRealmPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmGroupsIdRoleMappingsGetSignal(OAIMappingsRepresentation summary);
    void realmGroupsIdRoleMappingsRealmAvailableGetSignal(QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsRealmCompositeGetSignal(QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsRealmDeleteSignal();
    void realmGroupsIdRoleMappingsRealmGetSignal(QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsRealmPostSignal();
    void realmUsersIdRoleMappingsGetSignal(OAIMappingsRepresentation summary);
    void realmUsersIdRoleMappingsRealmAvailableGetSignal(QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsRealmCompositeGetSignal(QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsRealmDeleteSignal();
    void realmUsersIdRoleMappingsRealmGetSignal(QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsRealmPostSignal();


    void realmGroupsIdRoleMappingsGetSignalFull(OAIHttpRequestWorker *worker, OAIMappingsRepresentation summary);
    void realmGroupsIdRoleMappingsRealmAvailableGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsRealmCompositeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsRealmDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmGroupsIdRoleMappingsRealmGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmGroupsIdRoleMappingsRealmPostSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsGetSignalFull(OAIHttpRequestWorker *worker, OAIMappingsRepresentation summary);
    void realmUsersIdRoleMappingsRealmAvailableGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsRealmCompositeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsRealmDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmUsersIdRoleMappingsRealmGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmUsersIdRoleMappingsRealmPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsGetSignalError() instead")
    void realmGroupsIdRoleMappingsGetSignalE(OAIMappingsRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsGetSignalError(OAIMappingsRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmAvailableGetSignalError() instead")
    void realmGroupsIdRoleMappingsRealmAvailableGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmAvailableGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmCompositeGetSignalError() instead")
    void realmGroupsIdRoleMappingsRealmCompositeGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmCompositeGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmDeleteSignalError() instead")
    void realmGroupsIdRoleMappingsRealmDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmGetSignalError() instead")
    void realmGroupsIdRoleMappingsRealmGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmPostSignalError() instead")
    void realmGroupsIdRoleMappingsRealmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsGetSignalError() instead")
    void realmUsersIdRoleMappingsGetSignalE(OAIMappingsRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsGetSignalError(OAIMappingsRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmAvailableGetSignalError() instead")
    void realmUsersIdRoleMappingsRealmAvailableGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmAvailableGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmCompositeGetSignalError() instead")
    void realmUsersIdRoleMappingsRealmCompositeGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmCompositeGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmDeleteSignalError() instead")
    void realmUsersIdRoleMappingsRealmDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmGetSignalError() instead")
    void realmUsersIdRoleMappingsRealmGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmPostSignalError() instead")
    void realmUsersIdRoleMappingsRealmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsGetSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmAvailableGetSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsRealmAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmCompositeGetSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsRealmCompositeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmCompositeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmDeleteSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsRealmDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmGetSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsRealmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmGroupsIdRoleMappingsRealmPostSignalErrorFull() instead")
    void realmGroupsIdRoleMappingsRealmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmGroupsIdRoleMappingsRealmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsGetSignalErrorFull() instead")
    void realmUsersIdRoleMappingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmAvailableGetSignalErrorFull() instead")
    void realmUsersIdRoleMappingsRealmAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmCompositeGetSignalErrorFull() instead")
    void realmUsersIdRoleMappingsRealmCompositeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmCompositeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmDeleteSignalErrorFull() instead")
    void realmUsersIdRoleMappingsRealmDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmGetSignalErrorFull() instead")
    void realmUsersIdRoleMappingsRealmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmUsersIdRoleMappingsRealmPostSignalErrorFull() instead")
    void realmUsersIdRoleMappingsRealmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmUsersIdRoleMappingsRealmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
