/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientRoleMappingsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIClientRoleMappingsApi::OAIClientRoleMappingsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIClientRoleMappingsApi::~OAIClientRoleMappingsApi() {
}

void OAIClientRoleMappingsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://keycloak.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("realmGroupsIdRoleMappingsClientsClientAvailableGet", defaultConf);
    _serverIndices.insert("realmGroupsIdRoleMappingsClientsClientAvailableGet", 0);
    _serverConfigs.insert("realmGroupsIdRoleMappingsClientsClientCompositeGet", defaultConf);
    _serverIndices.insert("realmGroupsIdRoleMappingsClientsClientCompositeGet", 0);
    _serverConfigs.insert("realmGroupsIdRoleMappingsClientsClientDelete", defaultConf);
    _serverIndices.insert("realmGroupsIdRoleMappingsClientsClientDelete", 0);
    _serverConfigs.insert("realmGroupsIdRoleMappingsClientsClientGet", defaultConf);
    _serverIndices.insert("realmGroupsIdRoleMappingsClientsClientGet", 0);
    _serverConfigs.insert("realmGroupsIdRoleMappingsClientsClientPost", defaultConf);
    _serverIndices.insert("realmGroupsIdRoleMappingsClientsClientPost", 0);
    _serverConfigs.insert("realmUsersIdRoleMappingsClientsClientAvailableGet", defaultConf);
    _serverIndices.insert("realmUsersIdRoleMappingsClientsClientAvailableGet", 0);
    _serverConfigs.insert("realmUsersIdRoleMappingsClientsClientCompositeGet", defaultConf);
    _serverIndices.insert("realmUsersIdRoleMappingsClientsClientCompositeGet", 0);
    _serverConfigs.insert("realmUsersIdRoleMappingsClientsClientDelete", defaultConf);
    _serverIndices.insert("realmUsersIdRoleMappingsClientsClientDelete", 0);
    _serverConfigs.insert("realmUsersIdRoleMappingsClientsClientGet", defaultConf);
    _serverIndices.insert("realmUsersIdRoleMappingsClientsClientGet", 0);
    _serverConfigs.insert("realmUsersIdRoleMappingsClientsClientPost", defaultConf);
    _serverIndices.insert("realmUsersIdRoleMappingsClientsClientPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIClientRoleMappingsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIClientRoleMappingsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIClientRoleMappingsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIClientRoleMappingsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIClientRoleMappingsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIClientRoleMappingsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIClientRoleMappingsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIClientRoleMappingsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIClientRoleMappingsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIClientRoleMappingsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIClientRoleMappingsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIClientRoleMappingsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIClientRoleMappingsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIClientRoleMappingsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIClientRoleMappingsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIClientRoleMappingsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIClientRoleMappingsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIClientRoleMappingsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIClientRoleMappingsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientAvailableGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmGroupsIdRoleMappingsClientsClientAvailableGet"][_serverIndices.value("realmGroupsIdRoleMappingsClientsClientAvailableGet")].URL()+"/{realm}/groups/{id}/role-mappings/clients/{client}/available");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientAvailableGetCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientAvailableGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmGroupsIdRoleMappingsClientsClientAvailableGetSignal(output);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientAvailableGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientAvailableGetSignalE(output, error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientAvailableGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientAvailableGetSignalError(output, error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientAvailableGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientCompositeGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmGroupsIdRoleMappingsClientsClientCompositeGet"][_serverIndices.value("realmGroupsIdRoleMappingsClientsClientCompositeGet")].URL()+"/{realm}/groups/{id}/role-mappings/clients/{client}/composite");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientCompositeGetCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientCompositeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmGroupsIdRoleMappingsClientsClientCompositeGetSignal(output);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientCompositeGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientCompositeGetSignalE(output, error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientCompositeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientCompositeGetSignalError(output, error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientCompositeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientDelete(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmGroupsIdRoleMappingsClientsClientDelete"][_serverIndices.value("realmGroupsIdRoleMappingsClientsClientDelete")].URL()+"/{realm}/groups/{id}/role-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientDeleteCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmGroupsIdRoleMappingsClientsClientDeleteSignal();
        Q_EMIT realmGroupsIdRoleMappingsClientsClientDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientDeleteSignalE(error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientDeleteSignalError(error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmGroupsIdRoleMappingsClientsClientGet"][_serverIndices.value("realmGroupsIdRoleMappingsClientsClientGet")].URL()+"/{realm}/groups/{id}/role-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientGetCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmGroupsIdRoleMappingsClientsClientGetSignal(output);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientGetSignalE(output, error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientGetSignalError(output, error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientPost(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmGroupsIdRoleMappingsClientsClientPost"][_serverIndices.value("realmGroupsIdRoleMappingsClientsClientPost")].URL()+"/{realm}/groups/{id}/role-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientPostCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmGroupsIdRoleMappingsClientsClientPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmGroupsIdRoleMappingsClientsClientPostSignal();
        Q_EMIT realmGroupsIdRoleMappingsClientsClientPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientPostSignalE(error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmGroupsIdRoleMappingsClientsClientPostSignalError(error_type, error_str);
        Q_EMIT realmGroupsIdRoleMappingsClientsClientPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientAvailableGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmUsersIdRoleMappingsClientsClientAvailableGet"][_serverIndices.value("realmUsersIdRoleMappingsClientsClientAvailableGet")].URL()+"/{realm}/users/{id}/role-mappings/clients/{client}/available");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientAvailableGetCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientAvailableGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmUsersIdRoleMappingsClientsClientAvailableGetSignal(output);
        Q_EMIT realmUsersIdRoleMappingsClientsClientAvailableGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientAvailableGetSignalE(output, error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientAvailableGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientAvailableGetSignalError(output, error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientAvailableGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientCompositeGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmUsersIdRoleMappingsClientsClientCompositeGet"][_serverIndices.value("realmUsersIdRoleMappingsClientsClientCompositeGet")].URL()+"/{realm}/users/{id}/role-mappings/clients/{client}/composite");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientCompositeGetCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientCompositeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmUsersIdRoleMappingsClientsClientCompositeGetSignal(output);
        Q_EMIT realmUsersIdRoleMappingsClientsClientCompositeGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientCompositeGetSignalE(output, error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientCompositeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientCompositeGetSignalError(output, error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientCompositeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientDelete(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmUsersIdRoleMappingsClientsClientDelete"][_serverIndices.value("realmUsersIdRoleMappingsClientsClientDelete")].URL()+"/{realm}/users/{id}/role-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientDeleteCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmUsersIdRoleMappingsClientsClientDeleteSignal();
        Q_EMIT realmUsersIdRoleMappingsClientsClientDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientDeleteSignalE(error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientDeleteSignalError(error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientGet(const QString &realm, const QString &id, const QString &client) {
    QString fullPath = QString(_serverConfigs["realmUsersIdRoleMappingsClientsClientGet"][_serverIndices.value("realmUsersIdRoleMappingsClientsClientGet")].URL()+"/{realm}/users/{id}/role-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientGetCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRoleRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRoleRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmUsersIdRoleMappingsClientsClientGetSignal(output);
        Q_EMIT realmUsersIdRoleMappingsClientsClientGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientGetSignalE(output, error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientGetSignalError(output, error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientPost(const QString &realm, const QString &id, const QString &client, const QList<OAIRoleRepresentation> &oai_role_representation) {
    QString fullPath = QString(_serverConfigs["realmUsersIdRoleMappingsClientsClientPost"][_serverIndices.value("realmUsersIdRoleMappingsClientsClientPost")].URL()+"/{realm}/users/{id}/role-mappings/clients/{client}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_role_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientPostCallback);
    connect(this, &OAIClientRoleMappingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientRoleMappingsApi::realmUsersIdRoleMappingsClientsClientPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmUsersIdRoleMappingsClientsClientPostSignal();
        Q_EMIT realmUsersIdRoleMappingsClientsClientPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientPostSignalE(error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmUsersIdRoleMappingsClientsClientPostSignalError(error_type, error_str);
        Q_EMIT realmUsersIdRoleMappingsClientsClientPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientRoleMappingsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
