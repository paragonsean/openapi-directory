/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigPropertyRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigPropertyRepresentation::OAIConfigPropertyRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigPropertyRepresentation::OAIConfigPropertyRepresentation() {
    this->initializeModel();
}

OAIConfigPropertyRepresentation::~OAIConfigPropertyRepresentation() {}

void OAIConfigPropertyRepresentation::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_help_text_isSet = false;
    m_help_text_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConfigPropertyRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigPropertyRepresentation::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_help_text_isValid = ::OpenAPI::fromJsonValue(m_help_text, json[QString("helpText")]);
    m_help_text_isSet = !json[QString("helpText")].isNull() && m_help_text_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConfigPropertyRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigPropertyRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_help_text_isSet) {
        obj.insert(QString("helpText"), ::OpenAPI::toJsonValue(m_help_text));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObject OAIConfigPropertyRepresentation::getDefaultValue() const {
    return m_default_value;
}
void OAIConfigPropertyRepresentation::setDefaultValue(const OAIObject &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIConfigPropertyRepresentation::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIConfigPropertyRepresentation::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIConfigPropertyRepresentation::getHelpText() const {
    return m_help_text;
}
void OAIConfigPropertyRepresentation::setHelpText(const QString &help_text) {
    m_help_text = help_text;
    m_help_text_isSet = true;
}

bool OAIConfigPropertyRepresentation::is_help_text_Set() const{
    return m_help_text_isSet;
}

bool OAIConfigPropertyRepresentation::is_help_text_Valid() const{
    return m_help_text_isValid;
}

QString OAIConfigPropertyRepresentation::getLabel() const {
    return m_label;
}
void OAIConfigPropertyRepresentation::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIConfigPropertyRepresentation::is_label_Set() const{
    return m_label_isSet;
}

bool OAIConfigPropertyRepresentation::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIConfigPropertyRepresentation::getName() const {
    return m_name;
}
void OAIConfigPropertyRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConfigPropertyRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConfigPropertyRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIConfigPropertyRepresentation::getOptions() const {
    return m_options;
}
void OAIConfigPropertyRepresentation::setOptions(const QList<QString> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIConfigPropertyRepresentation::is_options_Set() const{
    return m_options_isSet;
}

bool OAIConfigPropertyRepresentation::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIConfigPropertyRepresentation::isSecret() const {
    return m_secret;
}
void OAIConfigPropertyRepresentation::setSecret(const bool &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIConfigPropertyRepresentation::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIConfigPropertyRepresentation::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIConfigPropertyRepresentation::getType() const {
    return m_type;
}
void OAIConfigPropertyRepresentation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConfigPropertyRepresentation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConfigPropertyRepresentation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConfigPropertyRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigPropertyRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
