/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientInitialAccessPresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientInitialAccessPresentation::OAIClientInitialAccessPresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientInitialAccessPresentation::OAIClientInitialAccessPresentation() {
    this->initializeModel();
}

OAIClientInitialAccessPresentation::~OAIClientInitialAccessPresentation() {}

void OAIClientInitialAccessPresentation::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_remaining_count_isSet = false;
    m_remaining_count_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIClientInitialAccessPresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientInitialAccessPresentation::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_remaining_count_isValid = ::OpenAPI::fromJsonValue(m_remaining_count, json[QString("remainingCount")]);
    m_remaining_count_isSet = !json[QString("remainingCount")].isNull() && m_remaining_count_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIClientInitialAccessPresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientInitialAccessPresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_remaining_count_isSet) {
        obj.insert(QString("remainingCount"), ::OpenAPI::toJsonValue(m_remaining_count));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

qint32 OAIClientInitialAccessPresentation::getCount() const {
    return m_count;
}
void OAIClientInitialAccessPresentation::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIClientInitialAccessPresentation::is_count_Set() const{
    return m_count_isSet;
}

bool OAIClientInitialAccessPresentation::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIClientInitialAccessPresentation::getExpiration() const {
    return m_expiration;
}
void OAIClientInitialAccessPresentation::setExpiration(const qint32 &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIClientInitialAccessPresentation::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIClientInitialAccessPresentation::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIClientInitialAccessPresentation::getId() const {
    return m_id;
}
void OAIClientInitialAccessPresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClientInitialAccessPresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClientInitialAccessPresentation::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIClientInitialAccessPresentation::getRemainingCount() const {
    return m_remaining_count;
}
void OAIClientInitialAccessPresentation::setRemainingCount(const qint32 &remaining_count) {
    m_remaining_count = remaining_count;
    m_remaining_count_isSet = true;
}

bool OAIClientInitialAccessPresentation::is_remaining_count_Set() const{
    return m_remaining_count_isSet;
}

bool OAIClientInitialAccessPresentation::is_remaining_count_Valid() const{
    return m_remaining_count_isValid;
}

qint32 OAIClientInitialAccessPresentation::getTimestamp() const {
    return m_timestamp;
}
void OAIClientInitialAccessPresentation::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIClientInitialAccessPresentation::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIClientInitialAccessPresentation::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIClientInitialAccessPresentation::getToken() const {
    return m_token;
}
void OAIClientInitialAccessPresentation::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIClientInitialAccessPresentation::is_token_Set() const{
    return m_token_isSet;
}

bool OAIClientInitialAccessPresentation::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIClientInitialAccessPresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientInitialAccessPresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
