/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminEventRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminEventRepresentation::OAIAdminEventRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminEventRepresentation::OAIAdminEventRepresentation() {
    this->initializeModel();
}

OAIAdminEventRepresentation::~OAIAdminEventRepresentation() {}

void OAIAdminEventRepresentation::initializeModel() {

    m_auth_details_isSet = false;
    m_auth_details_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_realm_id_isSet = false;
    m_realm_id_isValid = false;

    m_representation_isSet = false;
    m_representation_isValid = false;

    m_resource_path_isSet = false;
    m_resource_path_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIAdminEventRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminEventRepresentation::fromJsonObject(QJsonObject json) {

    m_auth_details_isValid = ::OpenAPI::fromJsonValue(m_auth_details, json[QString("authDetails")]);
    m_auth_details_isSet = !json[QString("authDetails")].isNull() && m_auth_details_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_realm_id_isValid = ::OpenAPI::fromJsonValue(m_realm_id, json[QString("realmId")]);
    m_realm_id_isSet = !json[QString("realmId")].isNull() && m_realm_id_isValid;

    m_representation_isValid = ::OpenAPI::fromJsonValue(m_representation, json[QString("representation")]);
    m_representation_isSet = !json[QString("representation")].isNull() && m_representation_isValid;

    m_resource_path_isValid = ::OpenAPI::fromJsonValue(m_resource_path, json[QString("resourcePath")]);
    m_resource_path_isSet = !json[QString("resourcePath")].isNull() && m_resource_path_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIAdminEventRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminEventRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_details.isSet()) {
        obj.insert(QString("authDetails"), ::OpenAPI::toJsonValue(m_auth_details));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_realm_id_isSet) {
        obj.insert(QString("realmId"), ::OpenAPI::toJsonValue(m_realm_id));
    }
    if (m_representation_isSet) {
        obj.insert(QString("representation"), ::OpenAPI::toJsonValue(m_representation));
    }
    if (m_resource_path_isSet) {
        obj.insert(QString("resourcePath"), ::OpenAPI::toJsonValue(m_resource_path));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

OAIAuthDetailsRepresentation OAIAdminEventRepresentation::getAuthDetails() const {
    return m_auth_details;
}
void OAIAdminEventRepresentation::setAuthDetails(const OAIAuthDetailsRepresentation &auth_details) {
    m_auth_details = auth_details;
    m_auth_details_isSet = true;
}

bool OAIAdminEventRepresentation::is_auth_details_Set() const{
    return m_auth_details_isSet;
}

bool OAIAdminEventRepresentation::is_auth_details_Valid() const{
    return m_auth_details_isValid;
}

QString OAIAdminEventRepresentation::getError() const {
    return m_error;
}
void OAIAdminEventRepresentation::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIAdminEventRepresentation::is_error_Set() const{
    return m_error_isSet;
}

bool OAIAdminEventRepresentation::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIAdminEventRepresentation::getOperationType() const {
    return m_operation_type;
}
void OAIAdminEventRepresentation::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIAdminEventRepresentation::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIAdminEventRepresentation::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QString OAIAdminEventRepresentation::getRealmId() const {
    return m_realm_id;
}
void OAIAdminEventRepresentation::setRealmId(const QString &realm_id) {
    m_realm_id = realm_id;
    m_realm_id_isSet = true;
}

bool OAIAdminEventRepresentation::is_realm_id_Set() const{
    return m_realm_id_isSet;
}

bool OAIAdminEventRepresentation::is_realm_id_Valid() const{
    return m_realm_id_isValid;
}

QString OAIAdminEventRepresentation::getRepresentation() const {
    return m_representation;
}
void OAIAdminEventRepresentation::setRepresentation(const QString &representation) {
    m_representation = representation;
    m_representation_isSet = true;
}

bool OAIAdminEventRepresentation::is_representation_Set() const{
    return m_representation_isSet;
}

bool OAIAdminEventRepresentation::is_representation_Valid() const{
    return m_representation_isValid;
}

QString OAIAdminEventRepresentation::getResourcePath() const {
    return m_resource_path;
}
void OAIAdminEventRepresentation::setResourcePath(const QString &resource_path) {
    m_resource_path = resource_path;
    m_resource_path_isSet = true;
}

bool OAIAdminEventRepresentation::is_resource_path_Set() const{
    return m_resource_path_isSet;
}

bool OAIAdminEventRepresentation::is_resource_path_Valid() const{
    return m_resource_path_isValid;
}

QString OAIAdminEventRepresentation::getResourceType() const {
    return m_resource_type;
}
void OAIAdminEventRepresentation::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIAdminEventRepresentation::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIAdminEventRepresentation::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

qint64 OAIAdminEventRepresentation::getTime() const {
    return m_time;
}
void OAIAdminEventRepresentation::setTime(const qint64 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIAdminEventRepresentation::is_time_Set() const{
    return m_time_isSet;
}

bool OAIAdminEventRepresentation::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIAdminEventRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_representation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminEventRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
