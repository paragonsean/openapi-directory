/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealmRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealmRepresentation::OAIRealmRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealmRepresentation::OAIRealmRepresentation() {
    this->initializeModel();
}

OAIRealmRepresentation::~OAIRealmRepresentation() {}

void OAIRealmRepresentation::initializeModel() {

    m_access_code_lifespan_isSet = false;
    m_access_code_lifespan_isValid = false;

    m_access_code_lifespan_login_isSet = false;
    m_access_code_lifespan_login_isValid = false;

    m_access_code_lifespan_user_action_isSet = false;
    m_access_code_lifespan_user_action_isValid = false;

    m_access_token_lifespan_isSet = false;
    m_access_token_lifespan_isValid = false;

    m_access_token_lifespan_for_implicit_flow_isSet = false;
    m_access_token_lifespan_for_implicit_flow_isValid = false;

    m_account_theme_isSet = false;
    m_account_theme_isValid = false;

    m_action_token_generated_by_admin_lifespan_isSet = false;
    m_action_token_generated_by_admin_lifespan_isValid = false;

    m_action_token_generated_by_user_lifespan_isSet = false;
    m_action_token_generated_by_user_lifespan_isValid = false;

    m_admin_events_details_enabled_isSet = false;
    m_admin_events_details_enabled_isValid = false;

    m_admin_events_enabled_isSet = false;
    m_admin_events_enabled_isValid = false;

    m_admin_theme_isSet = false;
    m_admin_theme_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_authentication_flows_isSet = false;
    m_authentication_flows_isValid = false;

    m_authenticator_config_isSet = false;
    m_authenticator_config_isValid = false;

    m_browser_flow_isSet = false;
    m_browser_flow_isValid = false;

    m_browser_security_headers_isSet = false;
    m_browser_security_headers_isValid = false;

    m_brute_force_protected_isSet = false;
    m_brute_force_protected_isValid = false;

    m_client_authentication_flow_isSet = false;
    m_client_authentication_flow_isValid = false;

    m_client_scope_mappings_isSet = false;
    m_client_scope_mappings_isValid = false;

    m_client_scopes_isSet = false;
    m_client_scopes_isValid = false;

    m_client_session_idle_timeout_isSet = false;
    m_client_session_idle_timeout_isValid = false;

    m_client_session_max_lifespan_isSet = false;
    m_client_session_max_lifespan_isValid = false;

    m_clients_isSet = false;
    m_clients_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_default_default_client_scopes_isSet = false;
    m_default_default_client_scopes_isValid = false;

    m_default_groups_isSet = false;
    m_default_groups_isValid = false;

    m_default_locale_isSet = false;
    m_default_locale_isValid = false;

    m_default_optional_client_scopes_isSet = false;
    m_default_optional_client_scopes_isValid = false;

    m_default_roles_isSet = false;
    m_default_roles_isValid = false;

    m_default_signature_algorithm_isSet = false;
    m_default_signature_algorithm_isValid = false;

    m_direct_grant_flow_isSet = false;
    m_direct_grant_flow_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_name_html_isSet = false;
    m_display_name_html_isValid = false;

    m_docker_authentication_flow_isSet = false;
    m_docker_authentication_flow_isValid = false;

    m_duplicate_emails_allowed_isSet = false;
    m_duplicate_emails_allowed_isValid = false;

    m_edit_username_allowed_isSet = false;
    m_edit_username_allowed_isValid = false;

    m_email_theme_isSet = false;
    m_email_theme_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_enabled_event_types_isSet = false;
    m_enabled_event_types_isValid = false;

    m_events_enabled_isSet = false;
    m_events_enabled_isValid = false;

    m_events_expiration_isSet = false;
    m_events_expiration_isValid = false;

    m_events_listeners_isSet = false;
    m_events_listeners_isValid = false;

    m_failure_factor_isSet = false;
    m_failure_factor_isValid = false;

    m_federated_users_isSet = false;
    m_federated_users_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identity_provider_mappers_isSet = false;
    m_identity_provider_mappers_isValid = false;

    m_identity_providers_isSet = false;
    m_identity_providers_isValid = false;

    m_internationalization_enabled_isSet = false;
    m_internationalization_enabled_isValid = false;

    m_keycloak_version_isSet = false;
    m_keycloak_version_isValid = false;

    m_login_theme_isSet = false;
    m_login_theme_isValid = false;

    m_login_with_email_allowed_isSet = false;
    m_login_with_email_allowed_isValid = false;

    m_max_delta_time_seconds_isSet = false;
    m_max_delta_time_seconds_isValid = false;

    m_max_failure_wait_seconds_isSet = false;
    m_max_failure_wait_seconds_isValid = false;

    m_minimum_quick_login_wait_seconds_isSet = false;
    m_minimum_quick_login_wait_seconds_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_offline_session_idle_timeout_isSet = false;
    m_offline_session_idle_timeout_isValid = false;

    m_offline_session_max_lifespan_isSet = false;
    m_offline_session_max_lifespan_isValid = false;

    m_offline_session_max_lifespan_enabled_isSet = false;
    m_offline_session_max_lifespan_enabled_isValid = false;

    m_otp_policy_algorithm_isSet = false;
    m_otp_policy_algorithm_isValid = false;

    m_otp_policy_digits_isSet = false;
    m_otp_policy_digits_isValid = false;

    m_otp_policy_initial_counter_isSet = false;
    m_otp_policy_initial_counter_isValid = false;

    m_otp_policy_look_ahead_window_isSet = false;
    m_otp_policy_look_ahead_window_isValid = false;

    m_otp_policy_period_isSet = false;
    m_otp_policy_period_isValid = false;

    m_otp_policy_type_isSet = false;
    m_otp_policy_type_isValid = false;

    m_otp_supported_applications_isSet = false;
    m_otp_supported_applications_isValid = false;

    m_password_policy_isSet = false;
    m_password_policy_isValid = false;

    m_permanent_lockout_isSet = false;
    m_permanent_lockout_isValid = false;

    m_protocol_mappers_isSet = false;
    m_protocol_mappers_isValid = false;

    m_quick_login_check_milli_seconds_isSet = false;
    m_quick_login_check_milli_seconds_isValid = false;

    m_realm_isSet = false;
    m_realm_isValid = false;

    m_refresh_token_max_reuse_isSet = false;
    m_refresh_token_max_reuse_isValid = false;

    m_registration_allowed_isSet = false;
    m_registration_allowed_isValid = false;

    m_registration_email_as_username_isSet = false;
    m_registration_email_as_username_isValid = false;

    m_registration_flow_isSet = false;
    m_registration_flow_isValid = false;

    m_remember_me_isSet = false;
    m_remember_me_isValid = false;

    m_required_actions_isSet = false;
    m_required_actions_isValid = false;

    m_reset_credentials_flow_isSet = false;
    m_reset_credentials_flow_isValid = false;

    m_reset_password_allowed_isSet = false;
    m_reset_password_allowed_isValid = false;

    m_revoke_refresh_token_isSet = false;
    m_revoke_refresh_token_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_scope_mappings_isSet = false;
    m_scope_mappings_isValid = false;

    m_smtp_server_isSet = false;
    m_smtp_server_isValid = false;

    m_ssl_required_isSet = false;
    m_ssl_required_isValid = false;

    m_sso_session_idle_timeout_isSet = false;
    m_sso_session_idle_timeout_isValid = false;

    m_sso_session_idle_timeout_remember_me_isSet = false;
    m_sso_session_idle_timeout_remember_me_isValid = false;

    m_sso_session_max_lifespan_isSet = false;
    m_sso_session_max_lifespan_isValid = false;

    m_sso_session_max_lifespan_remember_me_isSet = false;
    m_sso_session_max_lifespan_remember_me_isValid = false;

    m_supported_locales_isSet = false;
    m_supported_locales_isValid = false;

    m_user_federation_mappers_isSet = false;
    m_user_federation_mappers_isValid = false;

    m_user_federation_providers_isSet = false;
    m_user_federation_providers_isValid = false;

    m_user_managed_access_allowed_isSet = false;
    m_user_managed_access_allowed_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_verify_email_isSet = false;
    m_verify_email_isValid = false;

    m_wait_increment_seconds_isSet = false;
    m_wait_increment_seconds_isValid = false;

    m_web_authn_policy_acceptable_aaguids_isSet = false;
    m_web_authn_policy_acceptable_aaguids_isValid = false;

    m_web_authn_policy_attestation_conveyance_preference_isSet = false;
    m_web_authn_policy_attestation_conveyance_preference_isValid = false;

    m_web_authn_policy_authenticator_attachment_isSet = false;
    m_web_authn_policy_authenticator_attachment_isValid = false;

    m_web_authn_policy_avoid_same_authenticator_register_isSet = false;
    m_web_authn_policy_avoid_same_authenticator_register_isValid = false;

    m_web_authn_policy_create_timeout_isSet = false;
    m_web_authn_policy_create_timeout_isValid = false;

    m_web_authn_policy_passwordless_acceptable_aaguids_isSet = false;
    m_web_authn_policy_passwordless_acceptable_aaguids_isValid = false;

    m_web_authn_policy_passwordless_attestation_conveyance_preference_isSet = false;
    m_web_authn_policy_passwordless_attestation_conveyance_preference_isValid = false;

    m_web_authn_policy_passwordless_authenticator_attachment_isSet = false;
    m_web_authn_policy_passwordless_authenticator_attachment_isValid = false;

    m_web_authn_policy_passwordless_avoid_same_authenticator_register_isSet = false;
    m_web_authn_policy_passwordless_avoid_same_authenticator_register_isValid = false;

    m_web_authn_policy_passwordless_create_timeout_isSet = false;
    m_web_authn_policy_passwordless_create_timeout_isValid = false;

    m_web_authn_policy_passwordless_require_resident_key_isSet = false;
    m_web_authn_policy_passwordless_require_resident_key_isValid = false;

    m_web_authn_policy_passwordless_rp_entity_name_isSet = false;
    m_web_authn_policy_passwordless_rp_entity_name_isValid = false;

    m_web_authn_policy_passwordless_rp_id_isSet = false;
    m_web_authn_policy_passwordless_rp_id_isValid = false;

    m_web_authn_policy_passwordless_signature_algorithms_isSet = false;
    m_web_authn_policy_passwordless_signature_algorithms_isValid = false;

    m_web_authn_policy_passwordless_user_verification_requirement_isSet = false;
    m_web_authn_policy_passwordless_user_verification_requirement_isValid = false;

    m_web_authn_policy_require_resident_key_isSet = false;
    m_web_authn_policy_require_resident_key_isValid = false;

    m_web_authn_policy_rp_entity_name_isSet = false;
    m_web_authn_policy_rp_entity_name_isValid = false;

    m_web_authn_policy_rp_id_isSet = false;
    m_web_authn_policy_rp_id_isValid = false;

    m_web_authn_policy_signature_algorithms_isSet = false;
    m_web_authn_policy_signature_algorithms_isValid = false;

    m_web_authn_policy_user_verification_requirement_isSet = false;
    m_web_authn_policy_user_verification_requirement_isValid = false;
}

void OAIRealmRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealmRepresentation::fromJsonObject(QJsonObject json) {

    m_access_code_lifespan_isValid = ::OpenAPI::fromJsonValue(m_access_code_lifespan, json[QString("accessCodeLifespan")]);
    m_access_code_lifespan_isSet = !json[QString("accessCodeLifespan")].isNull() && m_access_code_lifespan_isValid;

    m_access_code_lifespan_login_isValid = ::OpenAPI::fromJsonValue(m_access_code_lifespan_login, json[QString("accessCodeLifespanLogin")]);
    m_access_code_lifespan_login_isSet = !json[QString("accessCodeLifespanLogin")].isNull() && m_access_code_lifespan_login_isValid;

    m_access_code_lifespan_user_action_isValid = ::OpenAPI::fromJsonValue(m_access_code_lifespan_user_action, json[QString("accessCodeLifespanUserAction")]);
    m_access_code_lifespan_user_action_isSet = !json[QString("accessCodeLifespanUserAction")].isNull() && m_access_code_lifespan_user_action_isValid;

    m_access_token_lifespan_isValid = ::OpenAPI::fromJsonValue(m_access_token_lifespan, json[QString("accessTokenLifespan")]);
    m_access_token_lifespan_isSet = !json[QString("accessTokenLifespan")].isNull() && m_access_token_lifespan_isValid;

    m_access_token_lifespan_for_implicit_flow_isValid = ::OpenAPI::fromJsonValue(m_access_token_lifespan_for_implicit_flow, json[QString("accessTokenLifespanForImplicitFlow")]);
    m_access_token_lifespan_for_implicit_flow_isSet = !json[QString("accessTokenLifespanForImplicitFlow")].isNull() && m_access_token_lifespan_for_implicit_flow_isValid;

    m_account_theme_isValid = ::OpenAPI::fromJsonValue(m_account_theme, json[QString("accountTheme")]);
    m_account_theme_isSet = !json[QString("accountTheme")].isNull() && m_account_theme_isValid;

    m_action_token_generated_by_admin_lifespan_isValid = ::OpenAPI::fromJsonValue(m_action_token_generated_by_admin_lifespan, json[QString("actionTokenGeneratedByAdminLifespan")]);
    m_action_token_generated_by_admin_lifespan_isSet = !json[QString("actionTokenGeneratedByAdminLifespan")].isNull() && m_action_token_generated_by_admin_lifespan_isValid;

    m_action_token_generated_by_user_lifespan_isValid = ::OpenAPI::fromJsonValue(m_action_token_generated_by_user_lifespan, json[QString("actionTokenGeneratedByUserLifespan")]);
    m_action_token_generated_by_user_lifespan_isSet = !json[QString("actionTokenGeneratedByUserLifespan")].isNull() && m_action_token_generated_by_user_lifespan_isValid;

    m_admin_events_details_enabled_isValid = ::OpenAPI::fromJsonValue(m_admin_events_details_enabled, json[QString("adminEventsDetailsEnabled")]);
    m_admin_events_details_enabled_isSet = !json[QString("adminEventsDetailsEnabled")].isNull() && m_admin_events_details_enabled_isValid;

    m_admin_events_enabled_isValid = ::OpenAPI::fromJsonValue(m_admin_events_enabled, json[QString("adminEventsEnabled")]);
    m_admin_events_enabled_isSet = !json[QString("adminEventsEnabled")].isNull() && m_admin_events_enabled_isValid;

    m_admin_theme_isValid = ::OpenAPI::fromJsonValue(m_admin_theme, json[QString("adminTheme")]);
    m_admin_theme_isSet = !json[QString("adminTheme")].isNull() && m_admin_theme_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_authentication_flows_isValid = ::OpenAPI::fromJsonValue(m_authentication_flows, json[QString("authenticationFlows")]);
    m_authentication_flows_isSet = !json[QString("authenticationFlows")].isNull() && m_authentication_flows_isValid;

    m_authenticator_config_isValid = ::OpenAPI::fromJsonValue(m_authenticator_config, json[QString("authenticatorConfig")]);
    m_authenticator_config_isSet = !json[QString("authenticatorConfig")].isNull() && m_authenticator_config_isValid;

    m_browser_flow_isValid = ::OpenAPI::fromJsonValue(m_browser_flow, json[QString("browserFlow")]);
    m_browser_flow_isSet = !json[QString("browserFlow")].isNull() && m_browser_flow_isValid;

    m_browser_security_headers_isValid = ::OpenAPI::fromJsonValue(m_browser_security_headers, json[QString("browserSecurityHeaders")]);
    m_browser_security_headers_isSet = !json[QString("browserSecurityHeaders")].isNull() && m_browser_security_headers_isValid;

    m_brute_force_protected_isValid = ::OpenAPI::fromJsonValue(m_brute_force_protected, json[QString("bruteForceProtected")]);
    m_brute_force_protected_isSet = !json[QString("bruteForceProtected")].isNull() && m_brute_force_protected_isValid;

    m_client_authentication_flow_isValid = ::OpenAPI::fromJsonValue(m_client_authentication_flow, json[QString("clientAuthenticationFlow")]);
    m_client_authentication_flow_isSet = !json[QString("clientAuthenticationFlow")].isNull() && m_client_authentication_flow_isValid;

    m_client_scope_mappings_isValid = ::OpenAPI::fromJsonValue(m_client_scope_mappings, json[QString("clientScopeMappings")]);
    m_client_scope_mappings_isSet = !json[QString("clientScopeMappings")].isNull() && m_client_scope_mappings_isValid;

    m_client_scopes_isValid = ::OpenAPI::fromJsonValue(m_client_scopes, json[QString("clientScopes")]);
    m_client_scopes_isSet = !json[QString("clientScopes")].isNull() && m_client_scopes_isValid;

    m_client_session_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_client_session_idle_timeout, json[QString("clientSessionIdleTimeout")]);
    m_client_session_idle_timeout_isSet = !json[QString("clientSessionIdleTimeout")].isNull() && m_client_session_idle_timeout_isValid;

    m_client_session_max_lifespan_isValid = ::OpenAPI::fromJsonValue(m_client_session_max_lifespan, json[QString("clientSessionMaxLifespan")]);
    m_client_session_max_lifespan_isSet = !json[QString("clientSessionMaxLifespan")].isNull() && m_client_session_max_lifespan_isValid;

    m_clients_isValid = ::OpenAPI::fromJsonValue(m_clients, json[QString("clients")]);
    m_clients_isSet = !json[QString("clients")].isNull() && m_clients_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_default_default_client_scopes_isValid = ::OpenAPI::fromJsonValue(m_default_default_client_scopes, json[QString("defaultDefaultClientScopes")]);
    m_default_default_client_scopes_isSet = !json[QString("defaultDefaultClientScopes")].isNull() && m_default_default_client_scopes_isValid;

    m_default_groups_isValid = ::OpenAPI::fromJsonValue(m_default_groups, json[QString("defaultGroups")]);
    m_default_groups_isSet = !json[QString("defaultGroups")].isNull() && m_default_groups_isValid;

    m_default_locale_isValid = ::OpenAPI::fromJsonValue(m_default_locale, json[QString("defaultLocale")]);
    m_default_locale_isSet = !json[QString("defaultLocale")].isNull() && m_default_locale_isValid;

    m_default_optional_client_scopes_isValid = ::OpenAPI::fromJsonValue(m_default_optional_client_scopes, json[QString("defaultOptionalClientScopes")]);
    m_default_optional_client_scopes_isSet = !json[QString("defaultOptionalClientScopes")].isNull() && m_default_optional_client_scopes_isValid;

    m_default_roles_isValid = ::OpenAPI::fromJsonValue(m_default_roles, json[QString("defaultRoles")]);
    m_default_roles_isSet = !json[QString("defaultRoles")].isNull() && m_default_roles_isValid;

    m_default_signature_algorithm_isValid = ::OpenAPI::fromJsonValue(m_default_signature_algorithm, json[QString("defaultSignatureAlgorithm")]);
    m_default_signature_algorithm_isSet = !json[QString("defaultSignatureAlgorithm")].isNull() && m_default_signature_algorithm_isValid;

    m_direct_grant_flow_isValid = ::OpenAPI::fromJsonValue(m_direct_grant_flow, json[QString("directGrantFlow")]);
    m_direct_grant_flow_isSet = !json[QString("directGrantFlow")].isNull() && m_direct_grant_flow_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_display_name_html_isValid = ::OpenAPI::fromJsonValue(m_display_name_html, json[QString("displayNameHtml")]);
    m_display_name_html_isSet = !json[QString("displayNameHtml")].isNull() && m_display_name_html_isValid;

    m_docker_authentication_flow_isValid = ::OpenAPI::fromJsonValue(m_docker_authentication_flow, json[QString("dockerAuthenticationFlow")]);
    m_docker_authentication_flow_isSet = !json[QString("dockerAuthenticationFlow")].isNull() && m_docker_authentication_flow_isValid;

    m_duplicate_emails_allowed_isValid = ::OpenAPI::fromJsonValue(m_duplicate_emails_allowed, json[QString("duplicateEmailsAllowed")]);
    m_duplicate_emails_allowed_isSet = !json[QString("duplicateEmailsAllowed")].isNull() && m_duplicate_emails_allowed_isValid;

    m_edit_username_allowed_isValid = ::OpenAPI::fromJsonValue(m_edit_username_allowed, json[QString("editUsernameAllowed")]);
    m_edit_username_allowed_isSet = !json[QString("editUsernameAllowed")].isNull() && m_edit_username_allowed_isValid;

    m_email_theme_isValid = ::OpenAPI::fromJsonValue(m_email_theme, json[QString("emailTheme")]);
    m_email_theme_isSet = !json[QString("emailTheme")].isNull() && m_email_theme_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_enabled_event_types_isValid = ::OpenAPI::fromJsonValue(m_enabled_event_types, json[QString("enabledEventTypes")]);
    m_enabled_event_types_isSet = !json[QString("enabledEventTypes")].isNull() && m_enabled_event_types_isValid;

    m_events_enabled_isValid = ::OpenAPI::fromJsonValue(m_events_enabled, json[QString("eventsEnabled")]);
    m_events_enabled_isSet = !json[QString("eventsEnabled")].isNull() && m_events_enabled_isValid;

    m_events_expiration_isValid = ::OpenAPI::fromJsonValue(m_events_expiration, json[QString("eventsExpiration")]);
    m_events_expiration_isSet = !json[QString("eventsExpiration")].isNull() && m_events_expiration_isValid;

    m_events_listeners_isValid = ::OpenAPI::fromJsonValue(m_events_listeners, json[QString("eventsListeners")]);
    m_events_listeners_isSet = !json[QString("eventsListeners")].isNull() && m_events_listeners_isValid;

    m_failure_factor_isValid = ::OpenAPI::fromJsonValue(m_failure_factor, json[QString("failureFactor")]);
    m_failure_factor_isSet = !json[QString("failureFactor")].isNull() && m_failure_factor_isValid;

    m_federated_users_isValid = ::OpenAPI::fromJsonValue(m_federated_users, json[QString("federatedUsers")]);
    m_federated_users_isSet = !json[QString("federatedUsers")].isNull() && m_federated_users_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identity_provider_mappers_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_mappers, json[QString("identityProviderMappers")]);
    m_identity_provider_mappers_isSet = !json[QString("identityProviderMappers")].isNull() && m_identity_provider_mappers_isValid;

    m_identity_providers_isValid = ::OpenAPI::fromJsonValue(m_identity_providers, json[QString("identityProviders")]);
    m_identity_providers_isSet = !json[QString("identityProviders")].isNull() && m_identity_providers_isValid;

    m_internationalization_enabled_isValid = ::OpenAPI::fromJsonValue(m_internationalization_enabled, json[QString("internationalizationEnabled")]);
    m_internationalization_enabled_isSet = !json[QString("internationalizationEnabled")].isNull() && m_internationalization_enabled_isValid;

    m_keycloak_version_isValid = ::OpenAPI::fromJsonValue(m_keycloak_version, json[QString("keycloakVersion")]);
    m_keycloak_version_isSet = !json[QString("keycloakVersion")].isNull() && m_keycloak_version_isValid;

    m_login_theme_isValid = ::OpenAPI::fromJsonValue(m_login_theme, json[QString("loginTheme")]);
    m_login_theme_isSet = !json[QString("loginTheme")].isNull() && m_login_theme_isValid;

    m_login_with_email_allowed_isValid = ::OpenAPI::fromJsonValue(m_login_with_email_allowed, json[QString("loginWithEmailAllowed")]);
    m_login_with_email_allowed_isSet = !json[QString("loginWithEmailAllowed")].isNull() && m_login_with_email_allowed_isValid;

    m_max_delta_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_delta_time_seconds, json[QString("maxDeltaTimeSeconds")]);
    m_max_delta_time_seconds_isSet = !json[QString("maxDeltaTimeSeconds")].isNull() && m_max_delta_time_seconds_isValid;

    m_max_failure_wait_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_failure_wait_seconds, json[QString("maxFailureWaitSeconds")]);
    m_max_failure_wait_seconds_isSet = !json[QString("maxFailureWaitSeconds")].isNull() && m_max_failure_wait_seconds_isValid;

    m_minimum_quick_login_wait_seconds_isValid = ::OpenAPI::fromJsonValue(m_minimum_quick_login_wait_seconds, json[QString("minimumQuickLoginWaitSeconds")]);
    m_minimum_quick_login_wait_seconds_isSet = !json[QString("minimumQuickLoginWaitSeconds")].isNull() && m_minimum_quick_login_wait_seconds_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("notBefore")]);
    m_not_before_isSet = !json[QString("notBefore")].isNull() && m_not_before_isValid;

    m_offline_session_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_offline_session_idle_timeout, json[QString("offlineSessionIdleTimeout")]);
    m_offline_session_idle_timeout_isSet = !json[QString("offlineSessionIdleTimeout")].isNull() && m_offline_session_idle_timeout_isValid;

    m_offline_session_max_lifespan_isValid = ::OpenAPI::fromJsonValue(m_offline_session_max_lifespan, json[QString("offlineSessionMaxLifespan")]);
    m_offline_session_max_lifespan_isSet = !json[QString("offlineSessionMaxLifespan")].isNull() && m_offline_session_max_lifespan_isValid;

    m_offline_session_max_lifespan_enabled_isValid = ::OpenAPI::fromJsonValue(m_offline_session_max_lifespan_enabled, json[QString("offlineSessionMaxLifespanEnabled")]);
    m_offline_session_max_lifespan_enabled_isSet = !json[QString("offlineSessionMaxLifespanEnabled")].isNull() && m_offline_session_max_lifespan_enabled_isValid;

    m_otp_policy_algorithm_isValid = ::OpenAPI::fromJsonValue(m_otp_policy_algorithm, json[QString("otpPolicyAlgorithm")]);
    m_otp_policy_algorithm_isSet = !json[QString("otpPolicyAlgorithm")].isNull() && m_otp_policy_algorithm_isValid;

    m_otp_policy_digits_isValid = ::OpenAPI::fromJsonValue(m_otp_policy_digits, json[QString("otpPolicyDigits")]);
    m_otp_policy_digits_isSet = !json[QString("otpPolicyDigits")].isNull() && m_otp_policy_digits_isValid;

    m_otp_policy_initial_counter_isValid = ::OpenAPI::fromJsonValue(m_otp_policy_initial_counter, json[QString("otpPolicyInitialCounter")]);
    m_otp_policy_initial_counter_isSet = !json[QString("otpPolicyInitialCounter")].isNull() && m_otp_policy_initial_counter_isValid;

    m_otp_policy_look_ahead_window_isValid = ::OpenAPI::fromJsonValue(m_otp_policy_look_ahead_window, json[QString("otpPolicyLookAheadWindow")]);
    m_otp_policy_look_ahead_window_isSet = !json[QString("otpPolicyLookAheadWindow")].isNull() && m_otp_policy_look_ahead_window_isValid;

    m_otp_policy_period_isValid = ::OpenAPI::fromJsonValue(m_otp_policy_period, json[QString("otpPolicyPeriod")]);
    m_otp_policy_period_isSet = !json[QString("otpPolicyPeriod")].isNull() && m_otp_policy_period_isValid;

    m_otp_policy_type_isValid = ::OpenAPI::fromJsonValue(m_otp_policy_type, json[QString("otpPolicyType")]);
    m_otp_policy_type_isSet = !json[QString("otpPolicyType")].isNull() && m_otp_policy_type_isValid;

    m_otp_supported_applications_isValid = ::OpenAPI::fromJsonValue(m_otp_supported_applications, json[QString("otpSupportedApplications")]);
    m_otp_supported_applications_isSet = !json[QString("otpSupportedApplications")].isNull() && m_otp_supported_applications_isValid;

    m_password_policy_isValid = ::OpenAPI::fromJsonValue(m_password_policy, json[QString("passwordPolicy")]);
    m_password_policy_isSet = !json[QString("passwordPolicy")].isNull() && m_password_policy_isValid;

    m_permanent_lockout_isValid = ::OpenAPI::fromJsonValue(m_permanent_lockout, json[QString("permanentLockout")]);
    m_permanent_lockout_isSet = !json[QString("permanentLockout")].isNull() && m_permanent_lockout_isValid;

    m_protocol_mappers_isValid = ::OpenAPI::fromJsonValue(m_protocol_mappers, json[QString("protocolMappers")]);
    m_protocol_mappers_isSet = !json[QString("protocolMappers")].isNull() && m_protocol_mappers_isValid;

    m_quick_login_check_milli_seconds_isValid = ::OpenAPI::fromJsonValue(m_quick_login_check_milli_seconds, json[QString("quickLoginCheckMilliSeconds")]);
    m_quick_login_check_milli_seconds_isSet = !json[QString("quickLoginCheckMilliSeconds")].isNull() && m_quick_login_check_milli_seconds_isValid;

    m_realm_isValid = ::OpenAPI::fromJsonValue(m_realm, json[QString("realm")]);
    m_realm_isSet = !json[QString("realm")].isNull() && m_realm_isValid;

    m_refresh_token_max_reuse_isValid = ::OpenAPI::fromJsonValue(m_refresh_token_max_reuse, json[QString("refreshTokenMaxReuse")]);
    m_refresh_token_max_reuse_isSet = !json[QString("refreshTokenMaxReuse")].isNull() && m_refresh_token_max_reuse_isValid;

    m_registration_allowed_isValid = ::OpenAPI::fromJsonValue(m_registration_allowed, json[QString("registrationAllowed")]);
    m_registration_allowed_isSet = !json[QString("registrationAllowed")].isNull() && m_registration_allowed_isValid;

    m_registration_email_as_username_isValid = ::OpenAPI::fromJsonValue(m_registration_email_as_username, json[QString("registrationEmailAsUsername")]);
    m_registration_email_as_username_isSet = !json[QString("registrationEmailAsUsername")].isNull() && m_registration_email_as_username_isValid;

    m_registration_flow_isValid = ::OpenAPI::fromJsonValue(m_registration_flow, json[QString("registrationFlow")]);
    m_registration_flow_isSet = !json[QString("registrationFlow")].isNull() && m_registration_flow_isValid;

    m_remember_me_isValid = ::OpenAPI::fromJsonValue(m_remember_me, json[QString("rememberMe")]);
    m_remember_me_isSet = !json[QString("rememberMe")].isNull() && m_remember_me_isValid;

    m_required_actions_isValid = ::OpenAPI::fromJsonValue(m_required_actions, json[QString("requiredActions")]);
    m_required_actions_isSet = !json[QString("requiredActions")].isNull() && m_required_actions_isValid;

    m_reset_credentials_flow_isValid = ::OpenAPI::fromJsonValue(m_reset_credentials_flow, json[QString("resetCredentialsFlow")]);
    m_reset_credentials_flow_isSet = !json[QString("resetCredentialsFlow")].isNull() && m_reset_credentials_flow_isValid;

    m_reset_password_allowed_isValid = ::OpenAPI::fromJsonValue(m_reset_password_allowed, json[QString("resetPasswordAllowed")]);
    m_reset_password_allowed_isSet = !json[QString("resetPasswordAllowed")].isNull() && m_reset_password_allowed_isValid;

    m_revoke_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_revoke_refresh_token, json[QString("revokeRefreshToken")]);
    m_revoke_refresh_token_isSet = !json[QString("revokeRefreshToken")].isNull() && m_revoke_refresh_token_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_scope_mappings_isValid = ::OpenAPI::fromJsonValue(m_scope_mappings, json[QString("scopeMappings")]);
    m_scope_mappings_isSet = !json[QString("scopeMappings")].isNull() && m_scope_mappings_isValid;

    m_smtp_server_isValid = ::OpenAPI::fromJsonValue(m_smtp_server, json[QString("smtpServer")]);
    m_smtp_server_isSet = !json[QString("smtpServer")].isNull() && m_smtp_server_isValid;

    m_ssl_required_isValid = ::OpenAPI::fromJsonValue(m_ssl_required, json[QString("sslRequired")]);
    m_ssl_required_isSet = !json[QString("sslRequired")].isNull() && m_ssl_required_isValid;

    m_sso_session_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_sso_session_idle_timeout, json[QString("ssoSessionIdleTimeout")]);
    m_sso_session_idle_timeout_isSet = !json[QString("ssoSessionIdleTimeout")].isNull() && m_sso_session_idle_timeout_isValid;

    m_sso_session_idle_timeout_remember_me_isValid = ::OpenAPI::fromJsonValue(m_sso_session_idle_timeout_remember_me, json[QString("ssoSessionIdleTimeoutRememberMe")]);
    m_sso_session_idle_timeout_remember_me_isSet = !json[QString("ssoSessionIdleTimeoutRememberMe")].isNull() && m_sso_session_idle_timeout_remember_me_isValid;

    m_sso_session_max_lifespan_isValid = ::OpenAPI::fromJsonValue(m_sso_session_max_lifespan, json[QString("ssoSessionMaxLifespan")]);
    m_sso_session_max_lifespan_isSet = !json[QString("ssoSessionMaxLifespan")].isNull() && m_sso_session_max_lifespan_isValid;

    m_sso_session_max_lifespan_remember_me_isValid = ::OpenAPI::fromJsonValue(m_sso_session_max_lifespan_remember_me, json[QString("ssoSessionMaxLifespanRememberMe")]);
    m_sso_session_max_lifespan_remember_me_isSet = !json[QString("ssoSessionMaxLifespanRememberMe")].isNull() && m_sso_session_max_lifespan_remember_me_isValid;

    m_supported_locales_isValid = ::OpenAPI::fromJsonValue(m_supported_locales, json[QString("supportedLocales")]);
    m_supported_locales_isSet = !json[QString("supportedLocales")].isNull() && m_supported_locales_isValid;

    m_user_federation_mappers_isValid = ::OpenAPI::fromJsonValue(m_user_federation_mappers, json[QString("userFederationMappers")]);
    m_user_federation_mappers_isSet = !json[QString("userFederationMappers")].isNull() && m_user_federation_mappers_isValid;

    m_user_federation_providers_isValid = ::OpenAPI::fromJsonValue(m_user_federation_providers, json[QString("userFederationProviders")]);
    m_user_federation_providers_isSet = !json[QString("userFederationProviders")].isNull() && m_user_federation_providers_isValid;

    m_user_managed_access_allowed_isValid = ::OpenAPI::fromJsonValue(m_user_managed_access_allowed, json[QString("userManagedAccessAllowed")]);
    m_user_managed_access_allowed_isSet = !json[QString("userManagedAccessAllowed")].isNull() && m_user_managed_access_allowed_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;

    m_verify_email_isValid = ::OpenAPI::fromJsonValue(m_verify_email, json[QString("verifyEmail")]);
    m_verify_email_isSet = !json[QString("verifyEmail")].isNull() && m_verify_email_isValid;

    m_wait_increment_seconds_isValid = ::OpenAPI::fromJsonValue(m_wait_increment_seconds, json[QString("waitIncrementSeconds")]);
    m_wait_increment_seconds_isSet = !json[QString("waitIncrementSeconds")].isNull() && m_wait_increment_seconds_isValid;

    m_web_authn_policy_acceptable_aaguids_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_acceptable_aaguids, json[QString("webAuthnPolicyAcceptableAaguids")]);
    m_web_authn_policy_acceptable_aaguids_isSet = !json[QString("webAuthnPolicyAcceptableAaguids")].isNull() && m_web_authn_policy_acceptable_aaguids_isValid;

    m_web_authn_policy_attestation_conveyance_preference_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_attestation_conveyance_preference, json[QString("webAuthnPolicyAttestationConveyancePreference")]);
    m_web_authn_policy_attestation_conveyance_preference_isSet = !json[QString("webAuthnPolicyAttestationConveyancePreference")].isNull() && m_web_authn_policy_attestation_conveyance_preference_isValid;

    m_web_authn_policy_authenticator_attachment_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_authenticator_attachment, json[QString("webAuthnPolicyAuthenticatorAttachment")]);
    m_web_authn_policy_authenticator_attachment_isSet = !json[QString("webAuthnPolicyAuthenticatorAttachment")].isNull() && m_web_authn_policy_authenticator_attachment_isValid;

    m_web_authn_policy_avoid_same_authenticator_register_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_avoid_same_authenticator_register, json[QString("webAuthnPolicyAvoidSameAuthenticatorRegister")]);
    m_web_authn_policy_avoid_same_authenticator_register_isSet = !json[QString("webAuthnPolicyAvoidSameAuthenticatorRegister")].isNull() && m_web_authn_policy_avoid_same_authenticator_register_isValid;

    m_web_authn_policy_create_timeout_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_create_timeout, json[QString("webAuthnPolicyCreateTimeout")]);
    m_web_authn_policy_create_timeout_isSet = !json[QString("webAuthnPolicyCreateTimeout")].isNull() && m_web_authn_policy_create_timeout_isValid;

    m_web_authn_policy_passwordless_acceptable_aaguids_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_acceptable_aaguids, json[QString("webAuthnPolicyPasswordlessAcceptableAaguids")]);
    m_web_authn_policy_passwordless_acceptable_aaguids_isSet = !json[QString("webAuthnPolicyPasswordlessAcceptableAaguids")].isNull() && m_web_authn_policy_passwordless_acceptable_aaguids_isValid;

    m_web_authn_policy_passwordless_attestation_conveyance_preference_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_attestation_conveyance_preference, json[QString("webAuthnPolicyPasswordlessAttestationConveyancePreference")]);
    m_web_authn_policy_passwordless_attestation_conveyance_preference_isSet = !json[QString("webAuthnPolicyPasswordlessAttestationConveyancePreference")].isNull() && m_web_authn_policy_passwordless_attestation_conveyance_preference_isValid;

    m_web_authn_policy_passwordless_authenticator_attachment_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_authenticator_attachment, json[QString("webAuthnPolicyPasswordlessAuthenticatorAttachment")]);
    m_web_authn_policy_passwordless_authenticator_attachment_isSet = !json[QString("webAuthnPolicyPasswordlessAuthenticatorAttachment")].isNull() && m_web_authn_policy_passwordless_authenticator_attachment_isValid;

    m_web_authn_policy_passwordless_avoid_same_authenticator_register_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_avoid_same_authenticator_register, json[QString("webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister")]);
    m_web_authn_policy_passwordless_avoid_same_authenticator_register_isSet = !json[QString("webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister")].isNull() && m_web_authn_policy_passwordless_avoid_same_authenticator_register_isValid;

    m_web_authn_policy_passwordless_create_timeout_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_create_timeout, json[QString("webAuthnPolicyPasswordlessCreateTimeout")]);
    m_web_authn_policy_passwordless_create_timeout_isSet = !json[QString("webAuthnPolicyPasswordlessCreateTimeout")].isNull() && m_web_authn_policy_passwordless_create_timeout_isValid;

    m_web_authn_policy_passwordless_require_resident_key_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_require_resident_key, json[QString("webAuthnPolicyPasswordlessRequireResidentKey")]);
    m_web_authn_policy_passwordless_require_resident_key_isSet = !json[QString("webAuthnPolicyPasswordlessRequireResidentKey")].isNull() && m_web_authn_policy_passwordless_require_resident_key_isValid;

    m_web_authn_policy_passwordless_rp_entity_name_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_rp_entity_name, json[QString("webAuthnPolicyPasswordlessRpEntityName")]);
    m_web_authn_policy_passwordless_rp_entity_name_isSet = !json[QString("webAuthnPolicyPasswordlessRpEntityName")].isNull() && m_web_authn_policy_passwordless_rp_entity_name_isValid;

    m_web_authn_policy_passwordless_rp_id_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_rp_id, json[QString("webAuthnPolicyPasswordlessRpId")]);
    m_web_authn_policy_passwordless_rp_id_isSet = !json[QString("webAuthnPolicyPasswordlessRpId")].isNull() && m_web_authn_policy_passwordless_rp_id_isValid;

    m_web_authn_policy_passwordless_signature_algorithms_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_signature_algorithms, json[QString("webAuthnPolicyPasswordlessSignatureAlgorithms")]);
    m_web_authn_policy_passwordless_signature_algorithms_isSet = !json[QString("webAuthnPolicyPasswordlessSignatureAlgorithms")].isNull() && m_web_authn_policy_passwordless_signature_algorithms_isValid;

    m_web_authn_policy_passwordless_user_verification_requirement_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_passwordless_user_verification_requirement, json[QString("webAuthnPolicyPasswordlessUserVerificationRequirement")]);
    m_web_authn_policy_passwordless_user_verification_requirement_isSet = !json[QString("webAuthnPolicyPasswordlessUserVerificationRequirement")].isNull() && m_web_authn_policy_passwordless_user_verification_requirement_isValid;

    m_web_authn_policy_require_resident_key_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_require_resident_key, json[QString("webAuthnPolicyRequireResidentKey")]);
    m_web_authn_policy_require_resident_key_isSet = !json[QString("webAuthnPolicyRequireResidentKey")].isNull() && m_web_authn_policy_require_resident_key_isValid;

    m_web_authn_policy_rp_entity_name_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_rp_entity_name, json[QString("webAuthnPolicyRpEntityName")]);
    m_web_authn_policy_rp_entity_name_isSet = !json[QString("webAuthnPolicyRpEntityName")].isNull() && m_web_authn_policy_rp_entity_name_isValid;

    m_web_authn_policy_rp_id_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_rp_id, json[QString("webAuthnPolicyRpId")]);
    m_web_authn_policy_rp_id_isSet = !json[QString("webAuthnPolicyRpId")].isNull() && m_web_authn_policy_rp_id_isValid;

    m_web_authn_policy_signature_algorithms_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_signature_algorithms, json[QString("webAuthnPolicySignatureAlgorithms")]);
    m_web_authn_policy_signature_algorithms_isSet = !json[QString("webAuthnPolicySignatureAlgorithms")].isNull() && m_web_authn_policy_signature_algorithms_isValid;

    m_web_authn_policy_user_verification_requirement_isValid = ::OpenAPI::fromJsonValue(m_web_authn_policy_user_verification_requirement, json[QString("webAuthnPolicyUserVerificationRequirement")]);
    m_web_authn_policy_user_verification_requirement_isSet = !json[QString("webAuthnPolicyUserVerificationRequirement")].isNull() && m_web_authn_policy_user_verification_requirement_isValid;
}

QString OAIRealmRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealmRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_access_code_lifespan_isSet) {
        obj.insert(QString("accessCodeLifespan"), ::OpenAPI::toJsonValue(m_access_code_lifespan));
    }
    if (m_access_code_lifespan_login_isSet) {
        obj.insert(QString("accessCodeLifespanLogin"), ::OpenAPI::toJsonValue(m_access_code_lifespan_login));
    }
    if (m_access_code_lifespan_user_action_isSet) {
        obj.insert(QString("accessCodeLifespanUserAction"), ::OpenAPI::toJsonValue(m_access_code_lifespan_user_action));
    }
    if (m_access_token_lifespan_isSet) {
        obj.insert(QString("accessTokenLifespan"), ::OpenAPI::toJsonValue(m_access_token_lifespan));
    }
    if (m_access_token_lifespan_for_implicit_flow_isSet) {
        obj.insert(QString("accessTokenLifespanForImplicitFlow"), ::OpenAPI::toJsonValue(m_access_token_lifespan_for_implicit_flow));
    }
    if (m_account_theme_isSet) {
        obj.insert(QString("accountTheme"), ::OpenAPI::toJsonValue(m_account_theme));
    }
    if (m_action_token_generated_by_admin_lifespan_isSet) {
        obj.insert(QString("actionTokenGeneratedByAdminLifespan"), ::OpenAPI::toJsonValue(m_action_token_generated_by_admin_lifespan));
    }
    if (m_action_token_generated_by_user_lifespan_isSet) {
        obj.insert(QString("actionTokenGeneratedByUserLifespan"), ::OpenAPI::toJsonValue(m_action_token_generated_by_user_lifespan));
    }
    if (m_admin_events_details_enabled_isSet) {
        obj.insert(QString("adminEventsDetailsEnabled"), ::OpenAPI::toJsonValue(m_admin_events_details_enabled));
    }
    if (m_admin_events_enabled_isSet) {
        obj.insert(QString("adminEventsEnabled"), ::OpenAPI::toJsonValue(m_admin_events_enabled));
    }
    if (m_admin_theme_isSet) {
        obj.insert(QString("adminTheme"), ::OpenAPI::toJsonValue(m_admin_theme));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_authentication_flows.size() > 0) {
        obj.insert(QString("authenticationFlows"), ::OpenAPI::toJsonValue(m_authentication_flows));
    }
    if (m_authenticator_config.size() > 0) {
        obj.insert(QString("authenticatorConfig"), ::OpenAPI::toJsonValue(m_authenticator_config));
    }
    if (m_browser_flow_isSet) {
        obj.insert(QString("browserFlow"), ::OpenAPI::toJsonValue(m_browser_flow));
    }
    if (m_browser_security_headers.size() > 0) {
        obj.insert(QString("browserSecurityHeaders"), ::OpenAPI::toJsonValue(m_browser_security_headers));
    }
    if (m_brute_force_protected_isSet) {
        obj.insert(QString("bruteForceProtected"), ::OpenAPI::toJsonValue(m_brute_force_protected));
    }
    if (m_client_authentication_flow_isSet) {
        obj.insert(QString("clientAuthenticationFlow"), ::OpenAPI::toJsonValue(m_client_authentication_flow));
    }
    if (m_client_scope_mappings.size() > 0) {
        obj.insert(QString("clientScopeMappings"), ::OpenAPI::toJsonValue(m_client_scope_mappings));
    }
    if (m_client_scopes.size() > 0) {
        obj.insert(QString("clientScopes"), ::OpenAPI::toJsonValue(m_client_scopes));
    }
    if (m_client_session_idle_timeout_isSet) {
        obj.insert(QString("clientSessionIdleTimeout"), ::OpenAPI::toJsonValue(m_client_session_idle_timeout));
    }
    if (m_client_session_max_lifespan_isSet) {
        obj.insert(QString("clientSessionMaxLifespan"), ::OpenAPI::toJsonValue(m_client_session_max_lifespan));
    }
    if (m_clients.size() > 0) {
        obj.insert(QString("clients"), ::OpenAPI::toJsonValue(m_clients));
    }
    if (m_components.isSet()) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_default_default_client_scopes.size() > 0) {
        obj.insert(QString("defaultDefaultClientScopes"), ::OpenAPI::toJsonValue(m_default_default_client_scopes));
    }
    if (m_default_groups.size() > 0) {
        obj.insert(QString("defaultGroups"), ::OpenAPI::toJsonValue(m_default_groups));
    }
    if (m_default_locale_isSet) {
        obj.insert(QString("defaultLocale"), ::OpenAPI::toJsonValue(m_default_locale));
    }
    if (m_default_optional_client_scopes.size() > 0) {
        obj.insert(QString("defaultOptionalClientScopes"), ::OpenAPI::toJsonValue(m_default_optional_client_scopes));
    }
    if (m_default_roles.size() > 0) {
        obj.insert(QString("defaultRoles"), ::OpenAPI::toJsonValue(m_default_roles));
    }
    if (m_default_signature_algorithm_isSet) {
        obj.insert(QString("defaultSignatureAlgorithm"), ::OpenAPI::toJsonValue(m_default_signature_algorithm));
    }
    if (m_direct_grant_flow_isSet) {
        obj.insert(QString("directGrantFlow"), ::OpenAPI::toJsonValue(m_direct_grant_flow));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_name_html_isSet) {
        obj.insert(QString("displayNameHtml"), ::OpenAPI::toJsonValue(m_display_name_html));
    }
    if (m_docker_authentication_flow_isSet) {
        obj.insert(QString("dockerAuthenticationFlow"), ::OpenAPI::toJsonValue(m_docker_authentication_flow));
    }
    if (m_duplicate_emails_allowed_isSet) {
        obj.insert(QString("duplicateEmailsAllowed"), ::OpenAPI::toJsonValue(m_duplicate_emails_allowed));
    }
    if (m_edit_username_allowed_isSet) {
        obj.insert(QString("editUsernameAllowed"), ::OpenAPI::toJsonValue(m_edit_username_allowed));
    }
    if (m_email_theme_isSet) {
        obj.insert(QString("emailTheme"), ::OpenAPI::toJsonValue(m_email_theme));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_enabled_event_types.size() > 0) {
        obj.insert(QString("enabledEventTypes"), ::OpenAPI::toJsonValue(m_enabled_event_types));
    }
    if (m_events_enabled_isSet) {
        obj.insert(QString("eventsEnabled"), ::OpenAPI::toJsonValue(m_events_enabled));
    }
    if (m_events_expiration_isSet) {
        obj.insert(QString("eventsExpiration"), ::OpenAPI::toJsonValue(m_events_expiration));
    }
    if (m_events_listeners.size() > 0) {
        obj.insert(QString("eventsListeners"), ::OpenAPI::toJsonValue(m_events_listeners));
    }
    if (m_failure_factor_isSet) {
        obj.insert(QString("failureFactor"), ::OpenAPI::toJsonValue(m_failure_factor));
    }
    if (m_federated_users.size() > 0) {
        obj.insert(QString("federatedUsers"), ::OpenAPI::toJsonValue(m_federated_users));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identity_provider_mappers.size() > 0) {
        obj.insert(QString("identityProviderMappers"), ::OpenAPI::toJsonValue(m_identity_provider_mappers));
    }
    if (m_identity_providers.size() > 0) {
        obj.insert(QString("identityProviders"), ::OpenAPI::toJsonValue(m_identity_providers));
    }
    if (m_internationalization_enabled_isSet) {
        obj.insert(QString("internationalizationEnabled"), ::OpenAPI::toJsonValue(m_internationalization_enabled));
    }
    if (m_keycloak_version_isSet) {
        obj.insert(QString("keycloakVersion"), ::OpenAPI::toJsonValue(m_keycloak_version));
    }
    if (m_login_theme_isSet) {
        obj.insert(QString("loginTheme"), ::OpenAPI::toJsonValue(m_login_theme));
    }
    if (m_login_with_email_allowed_isSet) {
        obj.insert(QString("loginWithEmailAllowed"), ::OpenAPI::toJsonValue(m_login_with_email_allowed));
    }
    if (m_max_delta_time_seconds_isSet) {
        obj.insert(QString("maxDeltaTimeSeconds"), ::OpenAPI::toJsonValue(m_max_delta_time_seconds));
    }
    if (m_max_failure_wait_seconds_isSet) {
        obj.insert(QString("maxFailureWaitSeconds"), ::OpenAPI::toJsonValue(m_max_failure_wait_seconds));
    }
    if (m_minimum_quick_login_wait_seconds_isSet) {
        obj.insert(QString("minimumQuickLoginWaitSeconds"), ::OpenAPI::toJsonValue(m_minimum_quick_login_wait_seconds));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("notBefore"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_offline_session_idle_timeout_isSet) {
        obj.insert(QString("offlineSessionIdleTimeout"), ::OpenAPI::toJsonValue(m_offline_session_idle_timeout));
    }
    if (m_offline_session_max_lifespan_isSet) {
        obj.insert(QString("offlineSessionMaxLifespan"), ::OpenAPI::toJsonValue(m_offline_session_max_lifespan));
    }
    if (m_offline_session_max_lifespan_enabled_isSet) {
        obj.insert(QString("offlineSessionMaxLifespanEnabled"), ::OpenAPI::toJsonValue(m_offline_session_max_lifespan_enabled));
    }
    if (m_otp_policy_algorithm_isSet) {
        obj.insert(QString("otpPolicyAlgorithm"), ::OpenAPI::toJsonValue(m_otp_policy_algorithm));
    }
    if (m_otp_policy_digits_isSet) {
        obj.insert(QString("otpPolicyDigits"), ::OpenAPI::toJsonValue(m_otp_policy_digits));
    }
    if (m_otp_policy_initial_counter_isSet) {
        obj.insert(QString("otpPolicyInitialCounter"), ::OpenAPI::toJsonValue(m_otp_policy_initial_counter));
    }
    if (m_otp_policy_look_ahead_window_isSet) {
        obj.insert(QString("otpPolicyLookAheadWindow"), ::OpenAPI::toJsonValue(m_otp_policy_look_ahead_window));
    }
    if (m_otp_policy_period_isSet) {
        obj.insert(QString("otpPolicyPeriod"), ::OpenAPI::toJsonValue(m_otp_policy_period));
    }
    if (m_otp_policy_type_isSet) {
        obj.insert(QString("otpPolicyType"), ::OpenAPI::toJsonValue(m_otp_policy_type));
    }
    if (m_otp_supported_applications.size() > 0) {
        obj.insert(QString("otpSupportedApplications"), ::OpenAPI::toJsonValue(m_otp_supported_applications));
    }
    if (m_password_policy_isSet) {
        obj.insert(QString("passwordPolicy"), ::OpenAPI::toJsonValue(m_password_policy));
    }
    if (m_permanent_lockout_isSet) {
        obj.insert(QString("permanentLockout"), ::OpenAPI::toJsonValue(m_permanent_lockout));
    }
    if (m_protocol_mappers.size() > 0) {
        obj.insert(QString("protocolMappers"), ::OpenAPI::toJsonValue(m_protocol_mappers));
    }
    if (m_quick_login_check_milli_seconds_isSet) {
        obj.insert(QString("quickLoginCheckMilliSeconds"), ::OpenAPI::toJsonValue(m_quick_login_check_milli_seconds));
    }
    if (m_realm_isSet) {
        obj.insert(QString("realm"), ::OpenAPI::toJsonValue(m_realm));
    }
    if (m_refresh_token_max_reuse_isSet) {
        obj.insert(QString("refreshTokenMaxReuse"), ::OpenAPI::toJsonValue(m_refresh_token_max_reuse));
    }
    if (m_registration_allowed_isSet) {
        obj.insert(QString("registrationAllowed"), ::OpenAPI::toJsonValue(m_registration_allowed));
    }
    if (m_registration_email_as_username_isSet) {
        obj.insert(QString("registrationEmailAsUsername"), ::OpenAPI::toJsonValue(m_registration_email_as_username));
    }
    if (m_registration_flow_isSet) {
        obj.insert(QString("registrationFlow"), ::OpenAPI::toJsonValue(m_registration_flow));
    }
    if (m_remember_me_isSet) {
        obj.insert(QString("rememberMe"), ::OpenAPI::toJsonValue(m_remember_me));
    }
    if (m_required_actions.size() > 0) {
        obj.insert(QString("requiredActions"), ::OpenAPI::toJsonValue(m_required_actions));
    }
    if (m_reset_credentials_flow_isSet) {
        obj.insert(QString("resetCredentialsFlow"), ::OpenAPI::toJsonValue(m_reset_credentials_flow));
    }
    if (m_reset_password_allowed_isSet) {
        obj.insert(QString("resetPasswordAllowed"), ::OpenAPI::toJsonValue(m_reset_password_allowed));
    }
    if (m_revoke_refresh_token_isSet) {
        obj.insert(QString("revokeRefreshToken"), ::OpenAPI::toJsonValue(m_revoke_refresh_token));
    }
    if (m_roles.isSet()) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_scope_mappings.size() > 0) {
        obj.insert(QString("scopeMappings"), ::OpenAPI::toJsonValue(m_scope_mappings));
    }
    if (m_smtp_server.size() > 0) {
        obj.insert(QString("smtpServer"), ::OpenAPI::toJsonValue(m_smtp_server));
    }
    if (m_ssl_required_isSet) {
        obj.insert(QString("sslRequired"), ::OpenAPI::toJsonValue(m_ssl_required));
    }
    if (m_sso_session_idle_timeout_isSet) {
        obj.insert(QString("ssoSessionIdleTimeout"), ::OpenAPI::toJsonValue(m_sso_session_idle_timeout));
    }
    if (m_sso_session_idle_timeout_remember_me_isSet) {
        obj.insert(QString("ssoSessionIdleTimeoutRememberMe"), ::OpenAPI::toJsonValue(m_sso_session_idle_timeout_remember_me));
    }
    if (m_sso_session_max_lifespan_isSet) {
        obj.insert(QString("ssoSessionMaxLifespan"), ::OpenAPI::toJsonValue(m_sso_session_max_lifespan));
    }
    if (m_sso_session_max_lifespan_remember_me_isSet) {
        obj.insert(QString("ssoSessionMaxLifespanRememberMe"), ::OpenAPI::toJsonValue(m_sso_session_max_lifespan_remember_me));
    }
    if (m_supported_locales.size() > 0) {
        obj.insert(QString("supportedLocales"), ::OpenAPI::toJsonValue(m_supported_locales));
    }
    if (m_user_federation_mappers.size() > 0) {
        obj.insert(QString("userFederationMappers"), ::OpenAPI::toJsonValue(m_user_federation_mappers));
    }
    if (m_user_federation_providers.size() > 0) {
        obj.insert(QString("userFederationProviders"), ::OpenAPI::toJsonValue(m_user_federation_providers));
    }
    if (m_user_managed_access_allowed_isSet) {
        obj.insert(QString("userManagedAccessAllowed"), ::OpenAPI::toJsonValue(m_user_managed_access_allowed));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    if (m_verify_email_isSet) {
        obj.insert(QString("verifyEmail"), ::OpenAPI::toJsonValue(m_verify_email));
    }
    if (m_wait_increment_seconds_isSet) {
        obj.insert(QString("waitIncrementSeconds"), ::OpenAPI::toJsonValue(m_wait_increment_seconds));
    }
    if (m_web_authn_policy_acceptable_aaguids.size() > 0) {
        obj.insert(QString("webAuthnPolicyAcceptableAaguids"), ::OpenAPI::toJsonValue(m_web_authn_policy_acceptable_aaguids));
    }
    if (m_web_authn_policy_attestation_conveyance_preference_isSet) {
        obj.insert(QString("webAuthnPolicyAttestationConveyancePreference"), ::OpenAPI::toJsonValue(m_web_authn_policy_attestation_conveyance_preference));
    }
    if (m_web_authn_policy_authenticator_attachment_isSet) {
        obj.insert(QString("webAuthnPolicyAuthenticatorAttachment"), ::OpenAPI::toJsonValue(m_web_authn_policy_authenticator_attachment));
    }
    if (m_web_authn_policy_avoid_same_authenticator_register_isSet) {
        obj.insert(QString("webAuthnPolicyAvoidSameAuthenticatorRegister"), ::OpenAPI::toJsonValue(m_web_authn_policy_avoid_same_authenticator_register));
    }
    if (m_web_authn_policy_create_timeout_isSet) {
        obj.insert(QString("webAuthnPolicyCreateTimeout"), ::OpenAPI::toJsonValue(m_web_authn_policy_create_timeout));
    }
    if (m_web_authn_policy_passwordless_acceptable_aaguids.size() > 0) {
        obj.insert(QString("webAuthnPolicyPasswordlessAcceptableAaguids"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_acceptable_aaguids));
    }
    if (m_web_authn_policy_passwordless_attestation_conveyance_preference_isSet) {
        obj.insert(QString("webAuthnPolicyPasswordlessAttestationConveyancePreference"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_attestation_conveyance_preference));
    }
    if (m_web_authn_policy_passwordless_authenticator_attachment_isSet) {
        obj.insert(QString("webAuthnPolicyPasswordlessAuthenticatorAttachment"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_authenticator_attachment));
    }
    if (m_web_authn_policy_passwordless_avoid_same_authenticator_register_isSet) {
        obj.insert(QString("webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_avoid_same_authenticator_register));
    }
    if (m_web_authn_policy_passwordless_create_timeout_isSet) {
        obj.insert(QString("webAuthnPolicyPasswordlessCreateTimeout"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_create_timeout));
    }
    if (m_web_authn_policy_passwordless_require_resident_key_isSet) {
        obj.insert(QString("webAuthnPolicyPasswordlessRequireResidentKey"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_require_resident_key));
    }
    if (m_web_authn_policy_passwordless_rp_entity_name_isSet) {
        obj.insert(QString("webAuthnPolicyPasswordlessRpEntityName"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_rp_entity_name));
    }
    if (m_web_authn_policy_passwordless_rp_id_isSet) {
        obj.insert(QString("webAuthnPolicyPasswordlessRpId"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_rp_id));
    }
    if (m_web_authn_policy_passwordless_signature_algorithms.size() > 0) {
        obj.insert(QString("webAuthnPolicyPasswordlessSignatureAlgorithms"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_signature_algorithms));
    }
    if (m_web_authn_policy_passwordless_user_verification_requirement_isSet) {
        obj.insert(QString("webAuthnPolicyPasswordlessUserVerificationRequirement"), ::OpenAPI::toJsonValue(m_web_authn_policy_passwordless_user_verification_requirement));
    }
    if (m_web_authn_policy_require_resident_key_isSet) {
        obj.insert(QString("webAuthnPolicyRequireResidentKey"), ::OpenAPI::toJsonValue(m_web_authn_policy_require_resident_key));
    }
    if (m_web_authn_policy_rp_entity_name_isSet) {
        obj.insert(QString("webAuthnPolicyRpEntityName"), ::OpenAPI::toJsonValue(m_web_authn_policy_rp_entity_name));
    }
    if (m_web_authn_policy_rp_id_isSet) {
        obj.insert(QString("webAuthnPolicyRpId"), ::OpenAPI::toJsonValue(m_web_authn_policy_rp_id));
    }
    if (m_web_authn_policy_signature_algorithms.size() > 0) {
        obj.insert(QString("webAuthnPolicySignatureAlgorithms"), ::OpenAPI::toJsonValue(m_web_authn_policy_signature_algorithms));
    }
    if (m_web_authn_policy_user_verification_requirement_isSet) {
        obj.insert(QString("webAuthnPolicyUserVerificationRequirement"), ::OpenAPI::toJsonValue(m_web_authn_policy_user_verification_requirement));
    }
    return obj;
}

qint32 OAIRealmRepresentation::getAccessCodeLifespan() const {
    return m_access_code_lifespan;
}
void OAIRealmRepresentation::setAccessCodeLifespan(const qint32 &access_code_lifespan) {
    m_access_code_lifespan = access_code_lifespan;
    m_access_code_lifespan_isSet = true;
}

bool OAIRealmRepresentation::is_access_code_lifespan_Set() const{
    return m_access_code_lifespan_isSet;
}

bool OAIRealmRepresentation::is_access_code_lifespan_Valid() const{
    return m_access_code_lifespan_isValid;
}

qint32 OAIRealmRepresentation::getAccessCodeLifespanLogin() const {
    return m_access_code_lifespan_login;
}
void OAIRealmRepresentation::setAccessCodeLifespanLogin(const qint32 &access_code_lifespan_login) {
    m_access_code_lifespan_login = access_code_lifespan_login;
    m_access_code_lifespan_login_isSet = true;
}

bool OAIRealmRepresentation::is_access_code_lifespan_login_Set() const{
    return m_access_code_lifespan_login_isSet;
}

bool OAIRealmRepresentation::is_access_code_lifespan_login_Valid() const{
    return m_access_code_lifespan_login_isValid;
}

qint32 OAIRealmRepresentation::getAccessCodeLifespanUserAction() const {
    return m_access_code_lifespan_user_action;
}
void OAIRealmRepresentation::setAccessCodeLifespanUserAction(const qint32 &access_code_lifespan_user_action) {
    m_access_code_lifespan_user_action = access_code_lifespan_user_action;
    m_access_code_lifespan_user_action_isSet = true;
}

bool OAIRealmRepresentation::is_access_code_lifespan_user_action_Set() const{
    return m_access_code_lifespan_user_action_isSet;
}

bool OAIRealmRepresentation::is_access_code_lifespan_user_action_Valid() const{
    return m_access_code_lifespan_user_action_isValid;
}

qint32 OAIRealmRepresentation::getAccessTokenLifespan() const {
    return m_access_token_lifespan;
}
void OAIRealmRepresentation::setAccessTokenLifespan(const qint32 &access_token_lifespan) {
    m_access_token_lifespan = access_token_lifespan;
    m_access_token_lifespan_isSet = true;
}

bool OAIRealmRepresentation::is_access_token_lifespan_Set() const{
    return m_access_token_lifespan_isSet;
}

bool OAIRealmRepresentation::is_access_token_lifespan_Valid() const{
    return m_access_token_lifespan_isValid;
}

qint32 OAIRealmRepresentation::getAccessTokenLifespanForImplicitFlow() const {
    return m_access_token_lifespan_for_implicit_flow;
}
void OAIRealmRepresentation::setAccessTokenLifespanForImplicitFlow(const qint32 &access_token_lifespan_for_implicit_flow) {
    m_access_token_lifespan_for_implicit_flow = access_token_lifespan_for_implicit_flow;
    m_access_token_lifespan_for_implicit_flow_isSet = true;
}

bool OAIRealmRepresentation::is_access_token_lifespan_for_implicit_flow_Set() const{
    return m_access_token_lifespan_for_implicit_flow_isSet;
}

bool OAIRealmRepresentation::is_access_token_lifespan_for_implicit_flow_Valid() const{
    return m_access_token_lifespan_for_implicit_flow_isValid;
}

QString OAIRealmRepresentation::getAccountTheme() const {
    return m_account_theme;
}
void OAIRealmRepresentation::setAccountTheme(const QString &account_theme) {
    m_account_theme = account_theme;
    m_account_theme_isSet = true;
}

bool OAIRealmRepresentation::is_account_theme_Set() const{
    return m_account_theme_isSet;
}

bool OAIRealmRepresentation::is_account_theme_Valid() const{
    return m_account_theme_isValid;
}

qint32 OAIRealmRepresentation::getActionTokenGeneratedByAdminLifespan() const {
    return m_action_token_generated_by_admin_lifespan;
}
void OAIRealmRepresentation::setActionTokenGeneratedByAdminLifespan(const qint32 &action_token_generated_by_admin_lifespan) {
    m_action_token_generated_by_admin_lifespan = action_token_generated_by_admin_lifespan;
    m_action_token_generated_by_admin_lifespan_isSet = true;
}

bool OAIRealmRepresentation::is_action_token_generated_by_admin_lifespan_Set() const{
    return m_action_token_generated_by_admin_lifespan_isSet;
}

bool OAIRealmRepresentation::is_action_token_generated_by_admin_lifespan_Valid() const{
    return m_action_token_generated_by_admin_lifespan_isValid;
}

qint32 OAIRealmRepresentation::getActionTokenGeneratedByUserLifespan() const {
    return m_action_token_generated_by_user_lifespan;
}
void OAIRealmRepresentation::setActionTokenGeneratedByUserLifespan(const qint32 &action_token_generated_by_user_lifespan) {
    m_action_token_generated_by_user_lifespan = action_token_generated_by_user_lifespan;
    m_action_token_generated_by_user_lifespan_isSet = true;
}

bool OAIRealmRepresentation::is_action_token_generated_by_user_lifespan_Set() const{
    return m_action_token_generated_by_user_lifespan_isSet;
}

bool OAIRealmRepresentation::is_action_token_generated_by_user_lifespan_Valid() const{
    return m_action_token_generated_by_user_lifespan_isValid;
}

bool OAIRealmRepresentation::isAdminEventsDetailsEnabled() const {
    return m_admin_events_details_enabled;
}
void OAIRealmRepresentation::setAdminEventsDetailsEnabled(const bool &admin_events_details_enabled) {
    m_admin_events_details_enabled = admin_events_details_enabled;
    m_admin_events_details_enabled_isSet = true;
}

bool OAIRealmRepresentation::is_admin_events_details_enabled_Set() const{
    return m_admin_events_details_enabled_isSet;
}

bool OAIRealmRepresentation::is_admin_events_details_enabled_Valid() const{
    return m_admin_events_details_enabled_isValid;
}

bool OAIRealmRepresentation::isAdminEventsEnabled() const {
    return m_admin_events_enabled;
}
void OAIRealmRepresentation::setAdminEventsEnabled(const bool &admin_events_enabled) {
    m_admin_events_enabled = admin_events_enabled;
    m_admin_events_enabled_isSet = true;
}

bool OAIRealmRepresentation::is_admin_events_enabled_Set() const{
    return m_admin_events_enabled_isSet;
}

bool OAIRealmRepresentation::is_admin_events_enabled_Valid() const{
    return m_admin_events_enabled_isValid;
}

QString OAIRealmRepresentation::getAdminTheme() const {
    return m_admin_theme;
}
void OAIRealmRepresentation::setAdminTheme(const QString &admin_theme) {
    m_admin_theme = admin_theme;
    m_admin_theme_isSet = true;
}

bool OAIRealmRepresentation::is_admin_theme_Set() const{
    return m_admin_theme_isSet;
}

bool OAIRealmRepresentation::is_admin_theme_Valid() const{
    return m_admin_theme_isValid;
}

QMap<QString, QJsonValue> OAIRealmRepresentation::getAttributes() const {
    return m_attributes;
}
void OAIRealmRepresentation::setAttributes(const QMap<QString, QJsonValue> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIRealmRepresentation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIRealmRepresentation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<OAIAuthenticationFlowRepresentation> OAIRealmRepresentation::getAuthenticationFlows() const {
    return m_authentication_flows;
}
void OAIRealmRepresentation::setAuthenticationFlows(const QList<OAIAuthenticationFlowRepresentation> &authentication_flows) {
    m_authentication_flows = authentication_flows;
    m_authentication_flows_isSet = true;
}

bool OAIRealmRepresentation::is_authentication_flows_Set() const{
    return m_authentication_flows_isSet;
}

bool OAIRealmRepresentation::is_authentication_flows_Valid() const{
    return m_authentication_flows_isValid;
}

QList<OAIAuthenticatorConfigRepresentation> OAIRealmRepresentation::getAuthenticatorConfig() const {
    return m_authenticator_config;
}
void OAIRealmRepresentation::setAuthenticatorConfig(const QList<OAIAuthenticatorConfigRepresentation> &authenticator_config) {
    m_authenticator_config = authenticator_config;
    m_authenticator_config_isSet = true;
}

bool OAIRealmRepresentation::is_authenticator_config_Set() const{
    return m_authenticator_config_isSet;
}

bool OAIRealmRepresentation::is_authenticator_config_Valid() const{
    return m_authenticator_config_isValid;
}

QString OAIRealmRepresentation::getBrowserFlow() const {
    return m_browser_flow;
}
void OAIRealmRepresentation::setBrowserFlow(const QString &browser_flow) {
    m_browser_flow = browser_flow;
    m_browser_flow_isSet = true;
}

bool OAIRealmRepresentation::is_browser_flow_Set() const{
    return m_browser_flow_isSet;
}

bool OAIRealmRepresentation::is_browser_flow_Valid() const{
    return m_browser_flow_isValid;
}

QMap<QString, QJsonValue> OAIRealmRepresentation::getBrowserSecurityHeaders() const {
    return m_browser_security_headers;
}
void OAIRealmRepresentation::setBrowserSecurityHeaders(const QMap<QString, QJsonValue> &browser_security_headers) {
    m_browser_security_headers = browser_security_headers;
    m_browser_security_headers_isSet = true;
}

bool OAIRealmRepresentation::is_browser_security_headers_Set() const{
    return m_browser_security_headers_isSet;
}

bool OAIRealmRepresentation::is_browser_security_headers_Valid() const{
    return m_browser_security_headers_isValid;
}

bool OAIRealmRepresentation::isBruteForceProtected() const {
    return m_brute_force_protected;
}
void OAIRealmRepresentation::setBruteForceProtected(const bool &brute_force_protected) {
    m_brute_force_protected = brute_force_protected;
    m_brute_force_protected_isSet = true;
}

bool OAIRealmRepresentation::is_brute_force_protected_Set() const{
    return m_brute_force_protected_isSet;
}

bool OAIRealmRepresentation::is_brute_force_protected_Valid() const{
    return m_brute_force_protected_isValid;
}

QString OAIRealmRepresentation::getClientAuthenticationFlow() const {
    return m_client_authentication_flow;
}
void OAIRealmRepresentation::setClientAuthenticationFlow(const QString &client_authentication_flow) {
    m_client_authentication_flow = client_authentication_flow;
    m_client_authentication_flow_isSet = true;
}

bool OAIRealmRepresentation::is_client_authentication_flow_Set() const{
    return m_client_authentication_flow_isSet;
}

bool OAIRealmRepresentation::is_client_authentication_flow_Valid() const{
    return m_client_authentication_flow_isValid;
}

QMap<QString, QJsonValue> OAIRealmRepresentation::getClientScopeMappings() const {
    return m_client_scope_mappings;
}
void OAIRealmRepresentation::setClientScopeMappings(const QMap<QString, QJsonValue> &client_scope_mappings) {
    m_client_scope_mappings = client_scope_mappings;
    m_client_scope_mappings_isSet = true;
}

bool OAIRealmRepresentation::is_client_scope_mappings_Set() const{
    return m_client_scope_mappings_isSet;
}

bool OAIRealmRepresentation::is_client_scope_mappings_Valid() const{
    return m_client_scope_mappings_isValid;
}

QList<OAIClientScopeRepresentation> OAIRealmRepresentation::getClientScopes() const {
    return m_client_scopes;
}
void OAIRealmRepresentation::setClientScopes(const QList<OAIClientScopeRepresentation> &client_scopes) {
    m_client_scopes = client_scopes;
    m_client_scopes_isSet = true;
}

bool OAIRealmRepresentation::is_client_scopes_Set() const{
    return m_client_scopes_isSet;
}

bool OAIRealmRepresentation::is_client_scopes_Valid() const{
    return m_client_scopes_isValid;
}

qint32 OAIRealmRepresentation::getClientSessionIdleTimeout() const {
    return m_client_session_idle_timeout;
}
void OAIRealmRepresentation::setClientSessionIdleTimeout(const qint32 &client_session_idle_timeout) {
    m_client_session_idle_timeout = client_session_idle_timeout;
    m_client_session_idle_timeout_isSet = true;
}

bool OAIRealmRepresentation::is_client_session_idle_timeout_Set() const{
    return m_client_session_idle_timeout_isSet;
}

bool OAIRealmRepresentation::is_client_session_idle_timeout_Valid() const{
    return m_client_session_idle_timeout_isValid;
}

qint32 OAIRealmRepresentation::getClientSessionMaxLifespan() const {
    return m_client_session_max_lifespan;
}
void OAIRealmRepresentation::setClientSessionMaxLifespan(const qint32 &client_session_max_lifespan) {
    m_client_session_max_lifespan = client_session_max_lifespan;
    m_client_session_max_lifespan_isSet = true;
}

bool OAIRealmRepresentation::is_client_session_max_lifespan_Set() const{
    return m_client_session_max_lifespan_isSet;
}

bool OAIRealmRepresentation::is_client_session_max_lifespan_Valid() const{
    return m_client_session_max_lifespan_isValid;
}

QList<OAIClientRepresentation> OAIRealmRepresentation::getClients() const {
    return m_clients;
}
void OAIRealmRepresentation::setClients(const QList<OAIClientRepresentation> &clients) {
    m_clients = clients;
    m_clients_isSet = true;
}

bool OAIRealmRepresentation::is_clients_Set() const{
    return m_clients_isSet;
}

bool OAIRealmRepresentation::is_clients_Valid() const{
    return m_clients_isValid;
}

OAIMultivaluedHashMap OAIRealmRepresentation::getComponents() const {
    return m_components;
}
void OAIRealmRepresentation::setComponents(const OAIMultivaluedHashMap &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIRealmRepresentation::is_components_Set() const{
    return m_components_isSet;
}

bool OAIRealmRepresentation::is_components_Valid() const{
    return m_components_isValid;
}

QList<QString> OAIRealmRepresentation::getDefaultDefaultClientScopes() const {
    return m_default_default_client_scopes;
}
void OAIRealmRepresentation::setDefaultDefaultClientScopes(const QList<QString> &default_default_client_scopes) {
    m_default_default_client_scopes = default_default_client_scopes;
    m_default_default_client_scopes_isSet = true;
}

bool OAIRealmRepresentation::is_default_default_client_scopes_Set() const{
    return m_default_default_client_scopes_isSet;
}

bool OAIRealmRepresentation::is_default_default_client_scopes_Valid() const{
    return m_default_default_client_scopes_isValid;
}

QList<QString> OAIRealmRepresentation::getDefaultGroups() const {
    return m_default_groups;
}
void OAIRealmRepresentation::setDefaultGroups(const QList<QString> &default_groups) {
    m_default_groups = default_groups;
    m_default_groups_isSet = true;
}

bool OAIRealmRepresentation::is_default_groups_Set() const{
    return m_default_groups_isSet;
}

bool OAIRealmRepresentation::is_default_groups_Valid() const{
    return m_default_groups_isValid;
}

QString OAIRealmRepresentation::getDefaultLocale() const {
    return m_default_locale;
}
void OAIRealmRepresentation::setDefaultLocale(const QString &default_locale) {
    m_default_locale = default_locale;
    m_default_locale_isSet = true;
}

bool OAIRealmRepresentation::is_default_locale_Set() const{
    return m_default_locale_isSet;
}

bool OAIRealmRepresentation::is_default_locale_Valid() const{
    return m_default_locale_isValid;
}

QList<QString> OAIRealmRepresentation::getDefaultOptionalClientScopes() const {
    return m_default_optional_client_scopes;
}
void OAIRealmRepresentation::setDefaultOptionalClientScopes(const QList<QString> &default_optional_client_scopes) {
    m_default_optional_client_scopes = default_optional_client_scopes;
    m_default_optional_client_scopes_isSet = true;
}

bool OAIRealmRepresentation::is_default_optional_client_scopes_Set() const{
    return m_default_optional_client_scopes_isSet;
}

bool OAIRealmRepresentation::is_default_optional_client_scopes_Valid() const{
    return m_default_optional_client_scopes_isValid;
}

QList<QString> OAIRealmRepresentation::getDefaultRoles() const {
    return m_default_roles;
}
void OAIRealmRepresentation::setDefaultRoles(const QList<QString> &default_roles) {
    m_default_roles = default_roles;
    m_default_roles_isSet = true;
}

bool OAIRealmRepresentation::is_default_roles_Set() const{
    return m_default_roles_isSet;
}

bool OAIRealmRepresentation::is_default_roles_Valid() const{
    return m_default_roles_isValid;
}

QString OAIRealmRepresentation::getDefaultSignatureAlgorithm() const {
    return m_default_signature_algorithm;
}
void OAIRealmRepresentation::setDefaultSignatureAlgorithm(const QString &default_signature_algorithm) {
    m_default_signature_algorithm = default_signature_algorithm;
    m_default_signature_algorithm_isSet = true;
}

bool OAIRealmRepresentation::is_default_signature_algorithm_Set() const{
    return m_default_signature_algorithm_isSet;
}

bool OAIRealmRepresentation::is_default_signature_algorithm_Valid() const{
    return m_default_signature_algorithm_isValid;
}

QString OAIRealmRepresentation::getDirectGrantFlow() const {
    return m_direct_grant_flow;
}
void OAIRealmRepresentation::setDirectGrantFlow(const QString &direct_grant_flow) {
    m_direct_grant_flow = direct_grant_flow;
    m_direct_grant_flow_isSet = true;
}

bool OAIRealmRepresentation::is_direct_grant_flow_Set() const{
    return m_direct_grant_flow_isSet;
}

bool OAIRealmRepresentation::is_direct_grant_flow_Valid() const{
    return m_direct_grant_flow_isValid;
}

QString OAIRealmRepresentation::getDisplayName() const {
    return m_display_name;
}
void OAIRealmRepresentation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRealmRepresentation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRealmRepresentation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIRealmRepresentation::getDisplayNameHtml() const {
    return m_display_name_html;
}
void OAIRealmRepresentation::setDisplayNameHtml(const QString &display_name_html) {
    m_display_name_html = display_name_html;
    m_display_name_html_isSet = true;
}

bool OAIRealmRepresentation::is_display_name_html_Set() const{
    return m_display_name_html_isSet;
}

bool OAIRealmRepresentation::is_display_name_html_Valid() const{
    return m_display_name_html_isValid;
}

QString OAIRealmRepresentation::getDockerAuthenticationFlow() const {
    return m_docker_authentication_flow;
}
void OAIRealmRepresentation::setDockerAuthenticationFlow(const QString &docker_authentication_flow) {
    m_docker_authentication_flow = docker_authentication_flow;
    m_docker_authentication_flow_isSet = true;
}

bool OAIRealmRepresentation::is_docker_authentication_flow_Set() const{
    return m_docker_authentication_flow_isSet;
}

bool OAIRealmRepresentation::is_docker_authentication_flow_Valid() const{
    return m_docker_authentication_flow_isValid;
}

bool OAIRealmRepresentation::isDuplicateEmailsAllowed() const {
    return m_duplicate_emails_allowed;
}
void OAIRealmRepresentation::setDuplicateEmailsAllowed(const bool &duplicate_emails_allowed) {
    m_duplicate_emails_allowed = duplicate_emails_allowed;
    m_duplicate_emails_allowed_isSet = true;
}

bool OAIRealmRepresentation::is_duplicate_emails_allowed_Set() const{
    return m_duplicate_emails_allowed_isSet;
}

bool OAIRealmRepresentation::is_duplicate_emails_allowed_Valid() const{
    return m_duplicate_emails_allowed_isValid;
}

bool OAIRealmRepresentation::isEditUsernameAllowed() const {
    return m_edit_username_allowed;
}
void OAIRealmRepresentation::setEditUsernameAllowed(const bool &edit_username_allowed) {
    m_edit_username_allowed = edit_username_allowed;
    m_edit_username_allowed_isSet = true;
}

bool OAIRealmRepresentation::is_edit_username_allowed_Set() const{
    return m_edit_username_allowed_isSet;
}

bool OAIRealmRepresentation::is_edit_username_allowed_Valid() const{
    return m_edit_username_allowed_isValid;
}

QString OAIRealmRepresentation::getEmailTheme() const {
    return m_email_theme;
}
void OAIRealmRepresentation::setEmailTheme(const QString &email_theme) {
    m_email_theme = email_theme;
    m_email_theme_isSet = true;
}

bool OAIRealmRepresentation::is_email_theme_Set() const{
    return m_email_theme_isSet;
}

bool OAIRealmRepresentation::is_email_theme_Valid() const{
    return m_email_theme_isValid;
}

bool OAIRealmRepresentation::isEnabled() const {
    return m_enabled;
}
void OAIRealmRepresentation::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIRealmRepresentation::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIRealmRepresentation::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIRealmRepresentation::getEnabledEventTypes() const {
    return m_enabled_event_types;
}
void OAIRealmRepresentation::setEnabledEventTypes(const QList<QString> &enabled_event_types) {
    m_enabled_event_types = enabled_event_types;
    m_enabled_event_types_isSet = true;
}

bool OAIRealmRepresentation::is_enabled_event_types_Set() const{
    return m_enabled_event_types_isSet;
}

bool OAIRealmRepresentation::is_enabled_event_types_Valid() const{
    return m_enabled_event_types_isValid;
}

bool OAIRealmRepresentation::isEventsEnabled() const {
    return m_events_enabled;
}
void OAIRealmRepresentation::setEventsEnabled(const bool &events_enabled) {
    m_events_enabled = events_enabled;
    m_events_enabled_isSet = true;
}

bool OAIRealmRepresentation::is_events_enabled_Set() const{
    return m_events_enabled_isSet;
}

bool OAIRealmRepresentation::is_events_enabled_Valid() const{
    return m_events_enabled_isValid;
}

qint64 OAIRealmRepresentation::getEventsExpiration() const {
    return m_events_expiration;
}
void OAIRealmRepresentation::setEventsExpiration(const qint64 &events_expiration) {
    m_events_expiration = events_expiration;
    m_events_expiration_isSet = true;
}

bool OAIRealmRepresentation::is_events_expiration_Set() const{
    return m_events_expiration_isSet;
}

bool OAIRealmRepresentation::is_events_expiration_Valid() const{
    return m_events_expiration_isValid;
}

QList<QString> OAIRealmRepresentation::getEventsListeners() const {
    return m_events_listeners;
}
void OAIRealmRepresentation::setEventsListeners(const QList<QString> &events_listeners) {
    m_events_listeners = events_listeners;
    m_events_listeners_isSet = true;
}

bool OAIRealmRepresentation::is_events_listeners_Set() const{
    return m_events_listeners_isSet;
}

bool OAIRealmRepresentation::is_events_listeners_Valid() const{
    return m_events_listeners_isValid;
}

qint32 OAIRealmRepresentation::getFailureFactor() const {
    return m_failure_factor;
}
void OAIRealmRepresentation::setFailureFactor(const qint32 &failure_factor) {
    m_failure_factor = failure_factor;
    m_failure_factor_isSet = true;
}

bool OAIRealmRepresentation::is_failure_factor_Set() const{
    return m_failure_factor_isSet;
}

bool OAIRealmRepresentation::is_failure_factor_Valid() const{
    return m_failure_factor_isValid;
}

QList<OAIUserRepresentation> OAIRealmRepresentation::getFederatedUsers() const {
    return m_federated_users;
}
void OAIRealmRepresentation::setFederatedUsers(const QList<OAIUserRepresentation> &federated_users) {
    m_federated_users = federated_users;
    m_federated_users_isSet = true;
}

bool OAIRealmRepresentation::is_federated_users_Set() const{
    return m_federated_users_isSet;
}

bool OAIRealmRepresentation::is_federated_users_Valid() const{
    return m_federated_users_isValid;
}

QList<OAIGroupRepresentation> OAIRealmRepresentation::getGroups() const {
    return m_groups;
}
void OAIRealmRepresentation::setGroups(const QList<OAIGroupRepresentation> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIRealmRepresentation::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIRealmRepresentation::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIRealmRepresentation::getId() const {
    return m_id;
}
void OAIRealmRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRealmRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRealmRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIIdentityProviderMapperRepresentation> OAIRealmRepresentation::getIdentityProviderMappers() const {
    return m_identity_provider_mappers;
}
void OAIRealmRepresentation::setIdentityProviderMappers(const QList<OAIIdentityProviderMapperRepresentation> &identity_provider_mappers) {
    m_identity_provider_mappers = identity_provider_mappers;
    m_identity_provider_mappers_isSet = true;
}

bool OAIRealmRepresentation::is_identity_provider_mappers_Set() const{
    return m_identity_provider_mappers_isSet;
}

bool OAIRealmRepresentation::is_identity_provider_mappers_Valid() const{
    return m_identity_provider_mappers_isValid;
}

QList<OAIIdentityProviderRepresentation> OAIRealmRepresentation::getIdentityProviders() const {
    return m_identity_providers;
}
void OAIRealmRepresentation::setIdentityProviders(const QList<OAIIdentityProviderRepresentation> &identity_providers) {
    m_identity_providers = identity_providers;
    m_identity_providers_isSet = true;
}

bool OAIRealmRepresentation::is_identity_providers_Set() const{
    return m_identity_providers_isSet;
}

bool OAIRealmRepresentation::is_identity_providers_Valid() const{
    return m_identity_providers_isValid;
}

bool OAIRealmRepresentation::isInternationalizationEnabled() const {
    return m_internationalization_enabled;
}
void OAIRealmRepresentation::setInternationalizationEnabled(const bool &internationalization_enabled) {
    m_internationalization_enabled = internationalization_enabled;
    m_internationalization_enabled_isSet = true;
}

bool OAIRealmRepresentation::is_internationalization_enabled_Set() const{
    return m_internationalization_enabled_isSet;
}

bool OAIRealmRepresentation::is_internationalization_enabled_Valid() const{
    return m_internationalization_enabled_isValid;
}

QString OAIRealmRepresentation::getKeycloakVersion() const {
    return m_keycloak_version;
}
void OAIRealmRepresentation::setKeycloakVersion(const QString &keycloak_version) {
    m_keycloak_version = keycloak_version;
    m_keycloak_version_isSet = true;
}

bool OAIRealmRepresentation::is_keycloak_version_Set() const{
    return m_keycloak_version_isSet;
}

bool OAIRealmRepresentation::is_keycloak_version_Valid() const{
    return m_keycloak_version_isValid;
}

QString OAIRealmRepresentation::getLoginTheme() const {
    return m_login_theme;
}
void OAIRealmRepresentation::setLoginTheme(const QString &login_theme) {
    m_login_theme = login_theme;
    m_login_theme_isSet = true;
}

bool OAIRealmRepresentation::is_login_theme_Set() const{
    return m_login_theme_isSet;
}

bool OAIRealmRepresentation::is_login_theme_Valid() const{
    return m_login_theme_isValid;
}

bool OAIRealmRepresentation::isLoginWithEmailAllowed() const {
    return m_login_with_email_allowed;
}
void OAIRealmRepresentation::setLoginWithEmailAllowed(const bool &login_with_email_allowed) {
    m_login_with_email_allowed = login_with_email_allowed;
    m_login_with_email_allowed_isSet = true;
}

bool OAIRealmRepresentation::is_login_with_email_allowed_Set() const{
    return m_login_with_email_allowed_isSet;
}

bool OAIRealmRepresentation::is_login_with_email_allowed_Valid() const{
    return m_login_with_email_allowed_isValid;
}

qint32 OAIRealmRepresentation::getMaxDeltaTimeSeconds() const {
    return m_max_delta_time_seconds;
}
void OAIRealmRepresentation::setMaxDeltaTimeSeconds(const qint32 &max_delta_time_seconds) {
    m_max_delta_time_seconds = max_delta_time_seconds;
    m_max_delta_time_seconds_isSet = true;
}

bool OAIRealmRepresentation::is_max_delta_time_seconds_Set() const{
    return m_max_delta_time_seconds_isSet;
}

bool OAIRealmRepresentation::is_max_delta_time_seconds_Valid() const{
    return m_max_delta_time_seconds_isValid;
}

qint32 OAIRealmRepresentation::getMaxFailureWaitSeconds() const {
    return m_max_failure_wait_seconds;
}
void OAIRealmRepresentation::setMaxFailureWaitSeconds(const qint32 &max_failure_wait_seconds) {
    m_max_failure_wait_seconds = max_failure_wait_seconds;
    m_max_failure_wait_seconds_isSet = true;
}

bool OAIRealmRepresentation::is_max_failure_wait_seconds_Set() const{
    return m_max_failure_wait_seconds_isSet;
}

bool OAIRealmRepresentation::is_max_failure_wait_seconds_Valid() const{
    return m_max_failure_wait_seconds_isValid;
}

qint32 OAIRealmRepresentation::getMinimumQuickLoginWaitSeconds() const {
    return m_minimum_quick_login_wait_seconds;
}
void OAIRealmRepresentation::setMinimumQuickLoginWaitSeconds(const qint32 &minimum_quick_login_wait_seconds) {
    m_minimum_quick_login_wait_seconds = minimum_quick_login_wait_seconds;
    m_minimum_quick_login_wait_seconds_isSet = true;
}

bool OAIRealmRepresentation::is_minimum_quick_login_wait_seconds_Set() const{
    return m_minimum_quick_login_wait_seconds_isSet;
}

bool OAIRealmRepresentation::is_minimum_quick_login_wait_seconds_Valid() const{
    return m_minimum_quick_login_wait_seconds_isValid;
}

qint32 OAIRealmRepresentation::getNotBefore() const {
    return m_not_before;
}
void OAIRealmRepresentation::setNotBefore(const qint32 &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAIRealmRepresentation::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAIRealmRepresentation::is_not_before_Valid() const{
    return m_not_before_isValid;
}

qint32 OAIRealmRepresentation::getOfflineSessionIdleTimeout() const {
    return m_offline_session_idle_timeout;
}
void OAIRealmRepresentation::setOfflineSessionIdleTimeout(const qint32 &offline_session_idle_timeout) {
    m_offline_session_idle_timeout = offline_session_idle_timeout;
    m_offline_session_idle_timeout_isSet = true;
}

bool OAIRealmRepresentation::is_offline_session_idle_timeout_Set() const{
    return m_offline_session_idle_timeout_isSet;
}

bool OAIRealmRepresentation::is_offline_session_idle_timeout_Valid() const{
    return m_offline_session_idle_timeout_isValid;
}

qint32 OAIRealmRepresentation::getOfflineSessionMaxLifespan() const {
    return m_offline_session_max_lifespan;
}
void OAIRealmRepresentation::setOfflineSessionMaxLifespan(const qint32 &offline_session_max_lifespan) {
    m_offline_session_max_lifespan = offline_session_max_lifespan;
    m_offline_session_max_lifespan_isSet = true;
}

bool OAIRealmRepresentation::is_offline_session_max_lifespan_Set() const{
    return m_offline_session_max_lifespan_isSet;
}

bool OAIRealmRepresentation::is_offline_session_max_lifespan_Valid() const{
    return m_offline_session_max_lifespan_isValid;
}

bool OAIRealmRepresentation::isOfflineSessionMaxLifespanEnabled() const {
    return m_offline_session_max_lifespan_enabled;
}
void OAIRealmRepresentation::setOfflineSessionMaxLifespanEnabled(const bool &offline_session_max_lifespan_enabled) {
    m_offline_session_max_lifespan_enabled = offline_session_max_lifespan_enabled;
    m_offline_session_max_lifespan_enabled_isSet = true;
}

bool OAIRealmRepresentation::is_offline_session_max_lifespan_enabled_Set() const{
    return m_offline_session_max_lifespan_enabled_isSet;
}

bool OAIRealmRepresentation::is_offline_session_max_lifespan_enabled_Valid() const{
    return m_offline_session_max_lifespan_enabled_isValid;
}

QString OAIRealmRepresentation::getOtpPolicyAlgorithm() const {
    return m_otp_policy_algorithm;
}
void OAIRealmRepresentation::setOtpPolicyAlgorithm(const QString &otp_policy_algorithm) {
    m_otp_policy_algorithm = otp_policy_algorithm;
    m_otp_policy_algorithm_isSet = true;
}

bool OAIRealmRepresentation::is_otp_policy_algorithm_Set() const{
    return m_otp_policy_algorithm_isSet;
}

bool OAIRealmRepresentation::is_otp_policy_algorithm_Valid() const{
    return m_otp_policy_algorithm_isValid;
}

qint32 OAIRealmRepresentation::getOtpPolicyDigits() const {
    return m_otp_policy_digits;
}
void OAIRealmRepresentation::setOtpPolicyDigits(const qint32 &otp_policy_digits) {
    m_otp_policy_digits = otp_policy_digits;
    m_otp_policy_digits_isSet = true;
}

bool OAIRealmRepresentation::is_otp_policy_digits_Set() const{
    return m_otp_policy_digits_isSet;
}

bool OAIRealmRepresentation::is_otp_policy_digits_Valid() const{
    return m_otp_policy_digits_isValid;
}

qint32 OAIRealmRepresentation::getOtpPolicyInitialCounter() const {
    return m_otp_policy_initial_counter;
}
void OAIRealmRepresentation::setOtpPolicyInitialCounter(const qint32 &otp_policy_initial_counter) {
    m_otp_policy_initial_counter = otp_policy_initial_counter;
    m_otp_policy_initial_counter_isSet = true;
}

bool OAIRealmRepresentation::is_otp_policy_initial_counter_Set() const{
    return m_otp_policy_initial_counter_isSet;
}

bool OAIRealmRepresentation::is_otp_policy_initial_counter_Valid() const{
    return m_otp_policy_initial_counter_isValid;
}

qint32 OAIRealmRepresentation::getOtpPolicyLookAheadWindow() const {
    return m_otp_policy_look_ahead_window;
}
void OAIRealmRepresentation::setOtpPolicyLookAheadWindow(const qint32 &otp_policy_look_ahead_window) {
    m_otp_policy_look_ahead_window = otp_policy_look_ahead_window;
    m_otp_policy_look_ahead_window_isSet = true;
}

bool OAIRealmRepresentation::is_otp_policy_look_ahead_window_Set() const{
    return m_otp_policy_look_ahead_window_isSet;
}

bool OAIRealmRepresentation::is_otp_policy_look_ahead_window_Valid() const{
    return m_otp_policy_look_ahead_window_isValid;
}

qint32 OAIRealmRepresentation::getOtpPolicyPeriod() const {
    return m_otp_policy_period;
}
void OAIRealmRepresentation::setOtpPolicyPeriod(const qint32 &otp_policy_period) {
    m_otp_policy_period = otp_policy_period;
    m_otp_policy_period_isSet = true;
}

bool OAIRealmRepresentation::is_otp_policy_period_Set() const{
    return m_otp_policy_period_isSet;
}

bool OAIRealmRepresentation::is_otp_policy_period_Valid() const{
    return m_otp_policy_period_isValid;
}

QString OAIRealmRepresentation::getOtpPolicyType() const {
    return m_otp_policy_type;
}
void OAIRealmRepresentation::setOtpPolicyType(const QString &otp_policy_type) {
    m_otp_policy_type = otp_policy_type;
    m_otp_policy_type_isSet = true;
}

bool OAIRealmRepresentation::is_otp_policy_type_Set() const{
    return m_otp_policy_type_isSet;
}

bool OAIRealmRepresentation::is_otp_policy_type_Valid() const{
    return m_otp_policy_type_isValid;
}

QList<QString> OAIRealmRepresentation::getOtpSupportedApplications() const {
    return m_otp_supported_applications;
}
void OAIRealmRepresentation::setOtpSupportedApplications(const QList<QString> &otp_supported_applications) {
    m_otp_supported_applications = otp_supported_applications;
    m_otp_supported_applications_isSet = true;
}

bool OAIRealmRepresentation::is_otp_supported_applications_Set() const{
    return m_otp_supported_applications_isSet;
}

bool OAIRealmRepresentation::is_otp_supported_applications_Valid() const{
    return m_otp_supported_applications_isValid;
}

QString OAIRealmRepresentation::getPasswordPolicy() const {
    return m_password_policy;
}
void OAIRealmRepresentation::setPasswordPolicy(const QString &password_policy) {
    m_password_policy = password_policy;
    m_password_policy_isSet = true;
}

bool OAIRealmRepresentation::is_password_policy_Set() const{
    return m_password_policy_isSet;
}

bool OAIRealmRepresentation::is_password_policy_Valid() const{
    return m_password_policy_isValid;
}

bool OAIRealmRepresentation::isPermanentLockout() const {
    return m_permanent_lockout;
}
void OAIRealmRepresentation::setPermanentLockout(const bool &permanent_lockout) {
    m_permanent_lockout = permanent_lockout;
    m_permanent_lockout_isSet = true;
}

bool OAIRealmRepresentation::is_permanent_lockout_Set() const{
    return m_permanent_lockout_isSet;
}

bool OAIRealmRepresentation::is_permanent_lockout_Valid() const{
    return m_permanent_lockout_isValid;
}

QList<OAIProtocolMapperRepresentation> OAIRealmRepresentation::getProtocolMappers() const {
    return m_protocol_mappers;
}
void OAIRealmRepresentation::setProtocolMappers(const QList<OAIProtocolMapperRepresentation> &protocol_mappers) {
    m_protocol_mappers = protocol_mappers;
    m_protocol_mappers_isSet = true;
}

bool OAIRealmRepresentation::is_protocol_mappers_Set() const{
    return m_protocol_mappers_isSet;
}

bool OAIRealmRepresentation::is_protocol_mappers_Valid() const{
    return m_protocol_mappers_isValid;
}

qint64 OAIRealmRepresentation::getQuickLoginCheckMilliSeconds() const {
    return m_quick_login_check_milli_seconds;
}
void OAIRealmRepresentation::setQuickLoginCheckMilliSeconds(const qint64 &quick_login_check_milli_seconds) {
    m_quick_login_check_milli_seconds = quick_login_check_milli_seconds;
    m_quick_login_check_milli_seconds_isSet = true;
}

bool OAIRealmRepresentation::is_quick_login_check_milli_seconds_Set() const{
    return m_quick_login_check_milli_seconds_isSet;
}

bool OAIRealmRepresentation::is_quick_login_check_milli_seconds_Valid() const{
    return m_quick_login_check_milli_seconds_isValid;
}

QString OAIRealmRepresentation::getRealm() const {
    return m_realm;
}
void OAIRealmRepresentation::setRealm(const QString &realm) {
    m_realm = realm;
    m_realm_isSet = true;
}

bool OAIRealmRepresentation::is_realm_Set() const{
    return m_realm_isSet;
}

bool OAIRealmRepresentation::is_realm_Valid() const{
    return m_realm_isValid;
}

qint32 OAIRealmRepresentation::getRefreshTokenMaxReuse() const {
    return m_refresh_token_max_reuse;
}
void OAIRealmRepresentation::setRefreshTokenMaxReuse(const qint32 &refresh_token_max_reuse) {
    m_refresh_token_max_reuse = refresh_token_max_reuse;
    m_refresh_token_max_reuse_isSet = true;
}

bool OAIRealmRepresentation::is_refresh_token_max_reuse_Set() const{
    return m_refresh_token_max_reuse_isSet;
}

bool OAIRealmRepresentation::is_refresh_token_max_reuse_Valid() const{
    return m_refresh_token_max_reuse_isValid;
}

bool OAIRealmRepresentation::isRegistrationAllowed() const {
    return m_registration_allowed;
}
void OAIRealmRepresentation::setRegistrationAllowed(const bool &registration_allowed) {
    m_registration_allowed = registration_allowed;
    m_registration_allowed_isSet = true;
}

bool OAIRealmRepresentation::is_registration_allowed_Set() const{
    return m_registration_allowed_isSet;
}

bool OAIRealmRepresentation::is_registration_allowed_Valid() const{
    return m_registration_allowed_isValid;
}

bool OAIRealmRepresentation::isRegistrationEmailAsUsername() const {
    return m_registration_email_as_username;
}
void OAIRealmRepresentation::setRegistrationEmailAsUsername(const bool &registration_email_as_username) {
    m_registration_email_as_username = registration_email_as_username;
    m_registration_email_as_username_isSet = true;
}

bool OAIRealmRepresentation::is_registration_email_as_username_Set() const{
    return m_registration_email_as_username_isSet;
}

bool OAIRealmRepresentation::is_registration_email_as_username_Valid() const{
    return m_registration_email_as_username_isValid;
}

QString OAIRealmRepresentation::getRegistrationFlow() const {
    return m_registration_flow;
}
void OAIRealmRepresentation::setRegistrationFlow(const QString &registration_flow) {
    m_registration_flow = registration_flow;
    m_registration_flow_isSet = true;
}

bool OAIRealmRepresentation::is_registration_flow_Set() const{
    return m_registration_flow_isSet;
}

bool OAIRealmRepresentation::is_registration_flow_Valid() const{
    return m_registration_flow_isValid;
}

bool OAIRealmRepresentation::isRememberMe() const {
    return m_remember_me;
}
void OAIRealmRepresentation::setRememberMe(const bool &remember_me) {
    m_remember_me = remember_me;
    m_remember_me_isSet = true;
}

bool OAIRealmRepresentation::is_remember_me_Set() const{
    return m_remember_me_isSet;
}

bool OAIRealmRepresentation::is_remember_me_Valid() const{
    return m_remember_me_isValid;
}

QList<OAIRequiredActionProviderRepresentation> OAIRealmRepresentation::getRequiredActions() const {
    return m_required_actions;
}
void OAIRealmRepresentation::setRequiredActions(const QList<OAIRequiredActionProviderRepresentation> &required_actions) {
    m_required_actions = required_actions;
    m_required_actions_isSet = true;
}

bool OAIRealmRepresentation::is_required_actions_Set() const{
    return m_required_actions_isSet;
}

bool OAIRealmRepresentation::is_required_actions_Valid() const{
    return m_required_actions_isValid;
}

QString OAIRealmRepresentation::getResetCredentialsFlow() const {
    return m_reset_credentials_flow;
}
void OAIRealmRepresentation::setResetCredentialsFlow(const QString &reset_credentials_flow) {
    m_reset_credentials_flow = reset_credentials_flow;
    m_reset_credentials_flow_isSet = true;
}

bool OAIRealmRepresentation::is_reset_credentials_flow_Set() const{
    return m_reset_credentials_flow_isSet;
}

bool OAIRealmRepresentation::is_reset_credentials_flow_Valid() const{
    return m_reset_credentials_flow_isValid;
}

bool OAIRealmRepresentation::isResetPasswordAllowed() const {
    return m_reset_password_allowed;
}
void OAIRealmRepresentation::setResetPasswordAllowed(const bool &reset_password_allowed) {
    m_reset_password_allowed = reset_password_allowed;
    m_reset_password_allowed_isSet = true;
}

bool OAIRealmRepresentation::is_reset_password_allowed_Set() const{
    return m_reset_password_allowed_isSet;
}

bool OAIRealmRepresentation::is_reset_password_allowed_Valid() const{
    return m_reset_password_allowed_isValid;
}

bool OAIRealmRepresentation::isRevokeRefreshToken() const {
    return m_revoke_refresh_token;
}
void OAIRealmRepresentation::setRevokeRefreshToken(const bool &revoke_refresh_token) {
    m_revoke_refresh_token = revoke_refresh_token;
    m_revoke_refresh_token_isSet = true;
}

bool OAIRealmRepresentation::is_revoke_refresh_token_Set() const{
    return m_revoke_refresh_token_isSet;
}

bool OAIRealmRepresentation::is_revoke_refresh_token_Valid() const{
    return m_revoke_refresh_token_isValid;
}

OAIRolesRepresentation OAIRealmRepresentation::getRoles() const {
    return m_roles;
}
void OAIRealmRepresentation::setRoles(const OAIRolesRepresentation &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIRealmRepresentation::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIRealmRepresentation::is_roles_Valid() const{
    return m_roles_isValid;
}

QList<OAIScopeMappingRepresentation> OAIRealmRepresentation::getScopeMappings() const {
    return m_scope_mappings;
}
void OAIRealmRepresentation::setScopeMappings(const QList<OAIScopeMappingRepresentation> &scope_mappings) {
    m_scope_mappings = scope_mappings;
    m_scope_mappings_isSet = true;
}

bool OAIRealmRepresentation::is_scope_mappings_Set() const{
    return m_scope_mappings_isSet;
}

bool OAIRealmRepresentation::is_scope_mappings_Valid() const{
    return m_scope_mappings_isValid;
}

QMap<QString, QJsonValue> OAIRealmRepresentation::getSmtpServer() const {
    return m_smtp_server;
}
void OAIRealmRepresentation::setSmtpServer(const QMap<QString, QJsonValue> &smtp_server) {
    m_smtp_server = smtp_server;
    m_smtp_server_isSet = true;
}

bool OAIRealmRepresentation::is_smtp_server_Set() const{
    return m_smtp_server_isSet;
}

bool OAIRealmRepresentation::is_smtp_server_Valid() const{
    return m_smtp_server_isValid;
}

QString OAIRealmRepresentation::getSslRequired() const {
    return m_ssl_required;
}
void OAIRealmRepresentation::setSslRequired(const QString &ssl_required) {
    m_ssl_required = ssl_required;
    m_ssl_required_isSet = true;
}

bool OAIRealmRepresentation::is_ssl_required_Set() const{
    return m_ssl_required_isSet;
}

bool OAIRealmRepresentation::is_ssl_required_Valid() const{
    return m_ssl_required_isValid;
}

qint32 OAIRealmRepresentation::getSsoSessionIdleTimeout() const {
    return m_sso_session_idle_timeout;
}
void OAIRealmRepresentation::setSsoSessionIdleTimeout(const qint32 &sso_session_idle_timeout) {
    m_sso_session_idle_timeout = sso_session_idle_timeout;
    m_sso_session_idle_timeout_isSet = true;
}

bool OAIRealmRepresentation::is_sso_session_idle_timeout_Set() const{
    return m_sso_session_idle_timeout_isSet;
}

bool OAIRealmRepresentation::is_sso_session_idle_timeout_Valid() const{
    return m_sso_session_idle_timeout_isValid;
}

qint32 OAIRealmRepresentation::getSsoSessionIdleTimeoutRememberMe() const {
    return m_sso_session_idle_timeout_remember_me;
}
void OAIRealmRepresentation::setSsoSessionIdleTimeoutRememberMe(const qint32 &sso_session_idle_timeout_remember_me) {
    m_sso_session_idle_timeout_remember_me = sso_session_idle_timeout_remember_me;
    m_sso_session_idle_timeout_remember_me_isSet = true;
}

bool OAIRealmRepresentation::is_sso_session_idle_timeout_remember_me_Set() const{
    return m_sso_session_idle_timeout_remember_me_isSet;
}

bool OAIRealmRepresentation::is_sso_session_idle_timeout_remember_me_Valid() const{
    return m_sso_session_idle_timeout_remember_me_isValid;
}

qint32 OAIRealmRepresentation::getSsoSessionMaxLifespan() const {
    return m_sso_session_max_lifespan;
}
void OAIRealmRepresentation::setSsoSessionMaxLifespan(const qint32 &sso_session_max_lifespan) {
    m_sso_session_max_lifespan = sso_session_max_lifespan;
    m_sso_session_max_lifespan_isSet = true;
}

bool OAIRealmRepresentation::is_sso_session_max_lifespan_Set() const{
    return m_sso_session_max_lifespan_isSet;
}

bool OAIRealmRepresentation::is_sso_session_max_lifespan_Valid() const{
    return m_sso_session_max_lifespan_isValid;
}

qint32 OAIRealmRepresentation::getSsoSessionMaxLifespanRememberMe() const {
    return m_sso_session_max_lifespan_remember_me;
}
void OAIRealmRepresentation::setSsoSessionMaxLifespanRememberMe(const qint32 &sso_session_max_lifespan_remember_me) {
    m_sso_session_max_lifespan_remember_me = sso_session_max_lifespan_remember_me;
    m_sso_session_max_lifespan_remember_me_isSet = true;
}

bool OAIRealmRepresentation::is_sso_session_max_lifespan_remember_me_Set() const{
    return m_sso_session_max_lifespan_remember_me_isSet;
}

bool OAIRealmRepresentation::is_sso_session_max_lifespan_remember_me_Valid() const{
    return m_sso_session_max_lifespan_remember_me_isValid;
}

QList<QString> OAIRealmRepresentation::getSupportedLocales() const {
    return m_supported_locales;
}
void OAIRealmRepresentation::setSupportedLocales(const QList<QString> &supported_locales) {
    m_supported_locales = supported_locales;
    m_supported_locales_isSet = true;
}

bool OAIRealmRepresentation::is_supported_locales_Set() const{
    return m_supported_locales_isSet;
}

bool OAIRealmRepresentation::is_supported_locales_Valid() const{
    return m_supported_locales_isValid;
}

QList<OAIUserFederationMapperRepresentation> OAIRealmRepresentation::getUserFederationMappers() const {
    return m_user_federation_mappers;
}
void OAIRealmRepresentation::setUserFederationMappers(const QList<OAIUserFederationMapperRepresentation> &user_federation_mappers) {
    m_user_federation_mappers = user_federation_mappers;
    m_user_federation_mappers_isSet = true;
}

bool OAIRealmRepresentation::is_user_federation_mappers_Set() const{
    return m_user_federation_mappers_isSet;
}

bool OAIRealmRepresentation::is_user_federation_mappers_Valid() const{
    return m_user_federation_mappers_isValid;
}

QList<OAIUserFederationProviderRepresentation> OAIRealmRepresentation::getUserFederationProviders() const {
    return m_user_federation_providers;
}
void OAIRealmRepresentation::setUserFederationProviders(const QList<OAIUserFederationProviderRepresentation> &user_federation_providers) {
    m_user_federation_providers = user_federation_providers;
    m_user_federation_providers_isSet = true;
}

bool OAIRealmRepresentation::is_user_federation_providers_Set() const{
    return m_user_federation_providers_isSet;
}

bool OAIRealmRepresentation::is_user_federation_providers_Valid() const{
    return m_user_federation_providers_isValid;
}

bool OAIRealmRepresentation::isUserManagedAccessAllowed() const {
    return m_user_managed_access_allowed;
}
void OAIRealmRepresentation::setUserManagedAccessAllowed(const bool &user_managed_access_allowed) {
    m_user_managed_access_allowed = user_managed_access_allowed;
    m_user_managed_access_allowed_isSet = true;
}

bool OAIRealmRepresentation::is_user_managed_access_allowed_Set() const{
    return m_user_managed_access_allowed_isSet;
}

bool OAIRealmRepresentation::is_user_managed_access_allowed_Valid() const{
    return m_user_managed_access_allowed_isValid;
}

QList<OAIUserRepresentation> OAIRealmRepresentation::getUsers() const {
    return m_users;
}
void OAIRealmRepresentation::setUsers(const QList<OAIUserRepresentation> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIRealmRepresentation::is_users_Set() const{
    return m_users_isSet;
}

bool OAIRealmRepresentation::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIRealmRepresentation::isVerifyEmail() const {
    return m_verify_email;
}
void OAIRealmRepresentation::setVerifyEmail(const bool &verify_email) {
    m_verify_email = verify_email;
    m_verify_email_isSet = true;
}

bool OAIRealmRepresentation::is_verify_email_Set() const{
    return m_verify_email_isSet;
}

bool OAIRealmRepresentation::is_verify_email_Valid() const{
    return m_verify_email_isValid;
}

qint32 OAIRealmRepresentation::getWaitIncrementSeconds() const {
    return m_wait_increment_seconds;
}
void OAIRealmRepresentation::setWaitIncrementSeconds(const qint32 &wait_increment_seconds) {
    m_wait_increment_seconds = wait_increment_seconds;
    m_wait_increment_seconds_isSet = true;
}

bool OAIRealmRepresentation::is_wait_increment_seconds_Set() const{
    return m_wait_increment_seconds_isSet;
}

bool OAIRealmRepresentation::is_wait_increment_seconds_Valid() const{
    return m_wait_increment_seconds_isValid;
}

QList<QString> OAIRealmRepresentation::getWebAuthnPolicyAcceptableAaguids() const {
    return m_web_authn_policy_acceptable_aaguids;
}
void OAIRealmRepresentation::setWebAuthnPolicyAcceptableAaguids(const QList<QString> &web_authn_policy_acceptable_aaguids) {
    m_web_authn_policy_acceptable_aaguids = web_authn_policy_acceptable_aaguids;
    m_web_authn_policy_acceptable_aaguids_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_acceptable_aaguids_Set() const{
    return m_web_authn_policy_acceptable_aaguids_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_acceptable_aaguids_Valid() const{
    return m_web_authn_policy_acceptable_aaguids_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyAttestationConveyancePreference() const {
    return m_web_authn_policy_attestation_conveyance_preference;
}
void OAIRealmRepresentation::setWebAuthnPolicyAttestationConveyancePreference(const QString &web_authn_policy_attestation_conveyance_preference) {
    m_web_authn_policy_attestation_conveyance_preference = web_authn_policy_attestation_conveyance_preference;
    m_web_authn_policy_attestation_conveyance_preference_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_attestation_conveyance_preference_Set() const{
    return m_web_authn_policy_attestation_conveyance_preference_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_attestation_conveyance_preference_Valid() const{
    return m_web_authn_policy_attestation_conveyance_preference_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyAuthenticatorAttachment() const {
    return m_web_authn_policy_authenticator_attachment;
}
void OAIRealmRepresentation::setWebAuthnPolicyAuthenticatorAttachment(const QString &web_authn_policy_authenticator_attachment) {
    m_web_authn_policy_authenticator_attachment = web_authn_policy_authenticator_attachment;
    m_web_authn_policy_authenticator_attachment_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_authenticator_attachment_Set() const{
    return m_web_authn_policy_authenticator_attachment_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_authenticator_attachment_Valid() const{
    return m_web_authn_policy_authenticator_attachment_isValid;
}

bool OAIRealmRepresentation::isWebAuthnPolicyAvoidSameAuthenticatorRegister() const {
    return m_web_authn_policy_avoid_same_authenticator_register;
}
void OAIRealmRepresentation::setWebAuthnPolicyAvoidSameAuthenticatorRegister(const bool &web_authn_policy_avoid_same_authenticator_register) {
    m_web_authn_policy_avoid_same_authenticator_register = web_authn_policy_avoid_same_authenticator_register;
    m_web_authn_policy_avoid_same_authenticator_register_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_avoid_same_authenticator_register_Set() const{
    return m_web_authn_policy_avoid_same_authenticator_register_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_avoid_same_authenticator_register_Valid() const{
    return m_web_authn_policy_avoid_same_authenticator_register_isValid;
}

qint32 OAIRealmRepresentation::getWebAuthnPolicyCreateTimeout() const {
    return m_web_authn_policy_create_timeout;
}
void OAIRealmRepresentation::setWebAuthnPolicyCreateTimeout(const qint32 &web_authn_policy_create_timeout) {
    m_web_authn_policy_create_timeout = web_authn_policy_create_timeout;
    m_web_authn_policy_create_timeout_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_create_timeout_Set() const{
    return m_web_authn_policy_create_timeout_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_create_timeout_Valid() const{
    return m_web_authn_policy_create_timeout_isValid;
}

QList<QString> OAIRealmRepresentation::getWebAuthnPolicyPasswordlessAcceptableAaguids() const {
    return m_web_authn_policy_passwordless_acceptable_aaguids;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessAcceptableAaguids(const QList<QString> &web_authn_policy_passwordless_acceptable_aaguids) {
    m_web_authn_policy_passwordless_acceptable_aaguids = web_authn_policy_passwordless_acceptable_aaguids;
    m_web_authn_policy_passwordless_acceptable_aaguids_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_acceptable_aaguids_Set() const{
    return m_web_authn_policy_passwordless_acceptable_aaguids_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_acceptable_aaguids_Valid() const{
    return m_web_authn_policy_passwordless_acceptable_aaguids_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyPasswordlessAttestationConveyancePreference() const {
    return m_web_authn_policy_passwordless_attestation_conveyance_preference;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessAttestationConveyancePreference(const QString &web_authn_policy_passwordless_attestation_conveyance_preference) {
    m_web_authn_policy_passwordless_attestation_conveyance_preference = web_authn_policy_passwordless_attestation_conveyance_preference;
    m_web_authn_policy_passwordless_attestation_conveyance_preference_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_attestation_conveyance_preference_Set() const{
    return m_web_authn_policy_passwordless_attestation_conveyance_preference_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_attestation_conveyance_preference_Valid() const{
    return m_web_authn_policy_passwordless_attestation_conveyance_preference_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyPasswordlessAuthenticatorAttachment() const {
    return m_web_authn_policy_passwordless_authenticator_attachment;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessAuthenticatorAttachment(const QString &web_authn_policy_passwordless_authenticator_attachment) {
    m_web_authn_policy_passwordless_authenticator_attachment = web_authn_policy_passwordless_authenticator_attachment;
    m_web_authn_policy_passwordless_authenticator_attachment_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_authenticator_attachment_Set() const{
    return m_web_authn_policy_passwordless_authenticator_attachment_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_authenticator_attachment_Valid() const{
    return m_web_authn_policy_passwordless_authenticator_attachment_isValid;
}

bool OAIRealmRepresentation::isWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister() const {
    return m_web_authn_policy_passwordless_avoid_same_authenticator_register;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister(const bool &web_authn_policy_passwordless_avoid_same_authenticator_register) {
    m_web_authn_policy_passwordless_avoid_same_authenticator_register = web_authn_policy_passwordless_avoid_same_authenticator_register;
    m_web_authn_policy_passwordless_avoid_same_authenticator_register_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_avoid_same_authenticator_register_Set() const{
    return m_web_authn_policy_passwordless_avoid_same_authenticator_register_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_avoid_same_authenticator_register_Valid() const{
    return m_web_authn_policy_passwordless_avoid_same_authenticator_register_isValid;
}

qint32 OAIRealmRepresentation::getWebAuthnPolicyPasswordlessCreateTimeout() const {
    return m_web_authn_policy_passwordless_create_timeout;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessCreateTimeout(const qint32 &web_authn_policy_passwordless_create_timeout) {
    m_web_authn_policy_passwordless_create_timeout = web_authn_policy_passwordless_create_timeout;
    m_web_authn_policy_passwordless_create_timeout_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_create_timeout_Set() const{
    return m_web_authn_policy_passwordless_create_timeout_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_create_timeout_Valid() const{
    return m_web_authn_policy_passwordless_create_timeout_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyPasswordlessRequireResidentKey() const {
    return m_web_authn_policy_passwordless_require_resident_key;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessRequireResidentKey(const QString &web_authn_policy_passwordless_require_resident_key) {
    m_web_authn_policy_passwordless_require_resident_key = web_authn_policy_passwordless_require_resident_key;
    m_web_authn_policy_passwordless_require_resident_key_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_require_resident_key_Set() const{
    return m_web_authn_policy_passwordless_require_resident_key_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_require_resident_key_Valid() const{
    return m_web_authn_policy_passwordless_require_resident_key_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyPasswordlessRpEntityName() const {
    return m_web_authn_policy_passwordless_rp_entity_name;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessRpEntityName(const QString &web_authn_policy_passwordless_rp_entity_name) {
    m_web_authn_policy_passwordless_rp_entity_name = web_authn_policy_passwordless_rp_entity_name;
    m_web_authn_policy_passwordless_rp_entity_name_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_rp_entity_name_Set() const{
    return m_web_authn_policy_passwordless_rp_entity_name_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_rp_entity_name_Valid() const{
    return m_web_authn_policy_passwordless_rp_entity_name_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyPasswordlessRpId() const {
    return m_web_authn_policy_passwordless_rp_id;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessRpId(const QString &web_authn_policy_passwordless_rp_id) {
    m_web_authn_policy_passwordless_rp_id = web_authn_policy_passwordless_rp_id;
    m_web_authn_policy_passwordless_rp_id_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_rp_id_Set() const{
    return m_web_authn_policy_passwordless_rp_id_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_rp_id_Valid() const{
    return m_web_authn_policy_passwordless_rp_id_isValid;
}

QList<QString> OAIRealmRepresentation::getWebAuthnPolicyPasswordlessSignatureAlgorithms() const {
    return m_web_authn_policy_passwordless_signature_algorithms;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessSignatureAlgorithms(const QList<QString> &web_authn_policy_passwordless_signature_algorithms) {
    m_web_authn_policy_passwordless_signature_algorithms = web_authn_policy_passwordless_signature_algorithms;
    m_web_authn_policy_passwordless_signature_algorithms_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_signature_algorithms_Set() const{
    return m_web_authn_policy_passwordless_signature_algorithms_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_signature_algorithms_Valid() const{
    return m_web_authn_policy_passwordless_signature_algorithms_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyPasswordlessUserVerificationRequirement() const {
    return m_web_authn_policy_passwordless_user_verification_requirement;
}
void OAIRealmRepresentation::setWebAuthnPolicyPasswordlessUserVerificationRequirement(const QString &web_authn_policy_passwordless_user_verification_requirement) {
    m_web_authn_policy_passwordless_user_verification_requirement = web_authn_policy_passwordless_user_verification_requirement;
    m_web_authn_policy_passwordless_user_verification_requirement_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_user_verification_requirement_Set() const{
    return m_web_authn_policy_passwordless_user_verification_requirement_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_passwordless_user_verification_requirement_Valid() const{
    return m_web_authn_policy_passwordless_user_verification_requirement_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyRequireResidentKey() const {
    return m_web_authn_policy_require_resident_key;
}
void OAIRealmRepresentation::setWebAuthnPolicyRequireResidentKey(const QString &web_authn_policy_require_resident_key) {
    m_web_authn_policy_require_resident_key = web_authn_policy_require_resident_key;
    m_web_authn_policy_require_resident_key_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_require_resident_key_Set() const{
    return m_web_authn_policy_require_resident_key_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_require_resident_key_Valid() const{
    return m_web_authn_policy_require_resident_key_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyRpEntityName() const {
    return m_web_authn_policy_rp_entity_name;
}
void OAIRealmRepresentation::setWebAuthnPolicyRpEntityName(const QString &web_authn_policy_rp_entity_name) {
    m_web_authn_policy_rp_entity_name = web_authn_policy_rp_entity_name;
    m_web_authn_policy_rp_entity_name_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_rp_entity_name_Set() const{
    return m_web_authn_policy_rp_entity_name_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_rp_entity_name_Valid() const{
    return m_web_authn_policy_rp_entity_name_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyRpId() const {
    return m_web_authn_policy_rp_id;
}
void OAIRealmRepresentation::setWebAuthnPolicyRpId(const QString &web_authn_policy_rp_id) {
    m_web_authn_policy_rp_id = web_authn_policy_rp_id;
    m_web_authn_policy_rp_id_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_rp_id_Set() const{
    return m_web_authn_policy_rp_id_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_rp_id_Valid() const{
    return m_web_authn_policy_rp_id_isValid;
}

QList<QString> OAIRealmRepresentation::getWebAuthnPolicySignatureAlgorithms() const {
    return m_web_authn_policy_signature_algorithms;
}
void OAIRealmRepresentation::setWebAuthnPolicySignatureAlgorithms(const QList<QString> &web_authn_policy_signature_algorithms) {
    m_web_authn_policy_signature_algorithms = web_authn_policy_signature_algorithms;
    m_web_authn_policy_signature_algorithms_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_signature_algorithms_Set() const{
    return m_web_authn_policy_signature_algorithms_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_signature_algorithms_Valid() const{
    return m_web_authn_policy_signature_algorithms_isValid;
}

QString OAIRealmRepresentation::getWebAuthnPolicyUserVerificationRequirement() const {
    return m_web_authn_policy_user_verification_requirement;
}
void OAIRealmRepresentation::setWebAuthnPolicyUserVerificationRequirement(const QString &web_authn_policy_user_verification_requirement) {
    m_web_authn_policy_user_verification_requirement = web_authn_policy_user_verification_requirement;
    m_web_authn_policy_user_verification_requirement_isSet = true;
}

bool OAIRealmRepresentation::is_web_authn_policy_user_verification_requirement_Set() const{
    return m_web_authn_policy_user_verification_requirement_isSet;
}

bool OAIRealmRepresentation::is_web_authn_policy_user_verification_requirement_Valid() const{
    return m_web_authn_policy_user_verification_requirement_isValid;
}

bool OAIRealmRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_code_lifespan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_code_lifespan_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_code_lifespan_user_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_lifespan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_lifespan_for_implicit_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_token_generated_by_admin_lifespan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_token_generated_by_user_lifespan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_events_details_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_events_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_flows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticator_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_security_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brute_force_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_authentication_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_scope_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_session_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_session_max_lifespan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_default_client_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_optional_client_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_signature_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_grant_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_authentication_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_emails_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_username_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_listeners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federated_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_mappers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_internationalization_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keycloak_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_with_email_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_delta_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_failure_wait_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_quick_login_wait_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_session_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_session_max_lifespan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_session_max_lifespan_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_otp_policy_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_otp_policy_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_otp_policy_initial_counter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_otp_policy_look_ahead_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_otp_policy_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_otp_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_otp_supported_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permanent_lockout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_mappers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quick_login_check_milli_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_max_reuse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_email_as_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remember_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_credentials_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_password_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoke_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_server.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_session_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_session_idle_timeout_remember_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_session_max_lifespan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_session_max_lifespan_remember_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_locales.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_federation_mappers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_federation_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_managed_access_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_increment_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_acceptable_aaguids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_attestation_conveyance_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_authenticator_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_avoid_same_authenticator_register_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_create_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_acceptable_aaguids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_attestation_conveyance_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_authenticator_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_avoid_same_authenticator_register_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_create_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_require_resident_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_rp_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_rp_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_signature_algorithms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_passwordless_user_verification_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_require_resident_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_rp_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_rp_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_signature_algorithms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn_policy_user_verification_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealmRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
