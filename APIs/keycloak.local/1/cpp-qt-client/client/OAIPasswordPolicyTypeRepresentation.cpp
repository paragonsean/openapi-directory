/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPasswordPolicyTypeRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPasswordPolicyTypeRepresentation::OAIPasswordPolicyTypeRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPasswordPolicyTypeRepresentation::OAIPasswordPolicyTypeRepresentation() {
    this->initializeModel();
}

OAIPasswordPolicyTypeRepresentation::~OAIPasswordPolicyTypeRepresentation() {}

void OAIPasswordPolicyTypeRepresentation::initializeModel() {

    m_config_type_isSet = false;
    m_config_type_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_multiple_supported_isSet = false;
    m_multiple_supported_isValid = false;
}

void OAIPasswordPolicyTypeRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPasswordPolicyTypeRepresentation::fromJsonObject(QJsonObject json) {

    m_config_type_isValid = ::OpenAPI::fromJsonValue(m_config_type, json[QString("configType")]);
    m_config_type_isSet = !json[QString("configType")].isNull() && m_config_type_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_multiple_supported_isValid = ::OpenAPI::fromJsonValue(m_multiple_supported, json[QString("multipleSupported")]);
    m_multiple_supported_isSet = !json[QString("multipleSupported")].isNull() && m_multiple_supported_isValid;
}

QString OAIPasswordPolicyTypeRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPasswordPolicyTypeRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_config_type_isSet) {
        obj.insert(QString("configType"), ::OpenAPI::toJsonValue(m_config_type));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_multiple_supported_isSet) {
        obj.insert(QString("multipleSupported"), ::OpenAPI::toJsonValue(m_multiple_supported));
    }
    return obj;
}

QString OAIPasswordPolicyTypeRepresentation::getConfigType() const {
    return m_config_type;
}
void OAIPasswordPolicyTypeRepresentation::setConfigType(const QString &config_type) {
    m_config_type = config_type;
    m_config_type_isSet = true;
}

bool OAIPasswordPolicyTypeRepresentation::is_config_type_Set() const{
    return m_config_type_isSet;
}

bool OAIPasswordPolicyTypeRepresentation::is_config_type_Valid() const{
    return m_config_type_isValid;
}

QString OAIPasswordPolicyTypeRepresentation::getDefaultValue() const {
    return m_default_value;
}
void OAIPasswordPolicyTypeRepresentation::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIPasswordPolicyTypeRepresentation::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIPasswordPolicyTypeRepresentation::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIPasswordPolicyTypeRepresentation::getDisplayName() const {
    return m_display_name;
}
void OAIPasswordPolicyTypeRepresentation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPasswordPolicyTypeRepresentation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPasswordPolicyTypeRepresentation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPasswordPolicyTypeRepresentation::getId() const {
    return m_id;
}
void OAIPasswordPolicyTypeRepresentation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPasswordPolicyTypeRepresentation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPasswordPolicyTypeRepresentation::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPasswordPolicyTypeRepresentation::isMultipleSupported() const {
    return m_multiple_supported;
}
void OAIPasswordPolicyTypeRepresentation::setMultipleSupported(const bool &multiple_supported) {
    m_multiple_supported = multiple_supported;
    m_multiple_supported_isSet = true;
}

bool OAIPasswordPolicyTypeRepresentation::is_multiple_supported_Set() const{
    return m_multiple_supported_isSet;
}

bool OAIPasswordPolicyTypeRepresentation::is_multiple_supported_Valid() const{
    return m_multiple_supported_isValid;
}

bool OAIPasswordPolicyTypeRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_supported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPasswordPolicyTypeRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
