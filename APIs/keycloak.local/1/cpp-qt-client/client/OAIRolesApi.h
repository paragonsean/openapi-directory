/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRolesApi_H
#define OAI_OAIRolesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGroupRepresentation.h"
#include "OAIManagementPermissionReference.h"
#include "OAIRoleRepresentation.h"
#include "OAIUserRepresentation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRolesApi : public QObject {
    Q_OBJECT

public:
    OAIRolesApi(const int timeOut = 0);
    ~OAIRolesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  brief_representation bool [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  search QString [optional]
    */
    virtual void realmClientsIdRolesGet(const QString &realm, const QString &id, const ::OpenAPI::OptionalParam<bool> &brief_representation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_role_representation OAIRoleRepresentation [required]
    */
    virtual void realmClientsIdRolesPost(const QString &realm, const QString &id, const OAIRoleRepresentation &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmClientsIdRolesRoleNameCompositesClientsClientGet(const QString &realm, const QString &id, const QString &role_name, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientsIdRolesRoleNameCompositesDelete(const QString &realm, const QString &id, const QString &role_name, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmClientsIdRolesRoleNameCompositesGet(const QString &realm, const QString &id, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmClientsIdRolesRoleNameCompositesPost(const QString &realm, const QString &id, const QString &role_name, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmClientsIdRolesRoleNameCompositesRealmGet(const QString &realm, const QString &id, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmClientsIdRolesRoleNameDelete(const QString &realm, const QString &id, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmClientsIdRolesRoleNameGet(const QString &realm, const QString &id, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  brief_representation bool [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    */
    virtual void realmClientsIdRolesRoleNameGroupsGet(const QString &realm, const QString &id, const QString &role_name, const ::OpenAPI::OptionalParam<bool> &brief_representation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmClientsIdRolesRoleNameManagementPermissionsGet(const QString &realm, const QString &id, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  oai_management_permission_reference OAIManagementPermissionReference [required]
    */
    virtual void realmClientsIdRolesRoleNameManagementPermissionsPut(const QString &realm, const QString &id, const QString &role_name, const OAIManagementPermissionReference &oai_management_permission_reference);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  oai_role_representation OAIRoleRepresentation [required]
    */
    virtual void realmClientsIdRolesRoleNamePut(const QString &realm, const QString &id, const QString &role_name, const OAIRoleRepresentation &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    */
    virtual void realmClientsIdRolesRoleNameUsersGet(const QString &realm, const QString &id, const QString &role_name, const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  brief_representation bool [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  search QString [optional]
    */
    virtual void realmRolesGet(const QString &realm, const ::OpenAPI::OptionalParam<bool> &brief_representation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  oai_role_representation OAIRoleRepresentation [required]
    */
    virtual void realmRolesPost(const QString &realm, const OAIRoleRepresentation &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  client QString [required]
    */
    virtual void realmRolesRoleNameCompositesClientsClientGet(const QString &realm, const QString &role_name, const QString &client);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmRolesRoleNameCompositesDelete(const QString &realm, const QString &role_name, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmRolesRoleNameCompositesGet(const QString &realm, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  oai_role_representation QList<OAIRoleRepresentation> [required]
    */
    virtual void realmRolesRoleNameCompositesPost(const QString &realm, const QString &role_name, const QList<OAIRoleRepresentation> &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmRolesRoleNameCompositesRealmGet(const QString &realm, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmRolesRoleNameDelete(const QString &realm, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmRolesRoleNameGet(const QString &realm, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  brief_representation bool [optional]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    */
    virtual void realmRolesRoleNameGroupsGet(const QString &realm, const QString &role_name, const ::OpenAPI::OptionalParam<bool> &brief_representation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void realmRolesRoleNameManagementPermissionsGet(const QString &realm, const QString &role_name);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  oai_management_permission_reference OAIManagementPermissionReference [required]
    */
    virtual void realmRolesRoleNameManagementPermissionsPut(const QString &realm, const QString &role_name, const OAIManagementPermissionReference &oai_management_permission_reference);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  oai_role_representation OAIRoleRepresentation [required]
    */
    virtual void realmRolesRoleNamePut(const QString &realm, const QString &role_name, const OAIRoleRepresentation &oai_role_representation);

    /**
    * @param[in]  realm QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  first qint32 [optional]
    * @param[in]  max qint32 [optional]
    */
    virtual void realmRolesRoleNameUsersGet(const QString &realm, const QString &role_name, const ::OpenAPI::OptionalParam<qint32> &first = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realmClientsIdRolesGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameCompositesClientsClientGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameCompositesDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameCompositesGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameCompositesPostCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameCompositesRealmGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameDeleteCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameGroupsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameManagementPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameManagementPermissionsPutCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNamePutCallback(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameUsersGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesPostCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameCompositesClientsClientGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameCompositesDeleteCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameCompositesGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameCompositesPostCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameCompositesRealmGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameDeleteCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameGroupsGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameManagementPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameManagementPermissionsPutCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNamePutCallback(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameUsersGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realmClientsIdRolesGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdRolesPostSignal();
    void realmClientsIdRolesRoleNameCompositesClientsClientGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdRolesRoleNameCompositesDeleteSignal();
    void realmClientsIdRolesRoleNameCompositesGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdRolesRoleNameCompositesPostSignal();
    void realmClientsIdRolesRoleNameCompositesRealmGetSignal(QList<OAIRoleRepresentation> summary);
    void realmClientsIdRolesRoleNameDeleteSignal();
    void realmClientsIdRolesRoleNameGetSignal(OAIRoleRepresentation summary);
    void realmClientsIdRolesRoleNameGroupsGetSignal(QList<OAIGroupRepresentation> summary);
    void realmClientsIdRolesRoleNameManagementPermissionsGetSignal(OAIManagementPermissionReference summary);
    void realmClientsIdRolesRoleNameManagementPermissionsPutSignal(OAIManagementPermissionReference summary);
    void realmClientsIdRolesRoleNamePutSignal();
    void realmClientsIdRolesRoleNameUsersGetSignal(QList<OAIUserRepresentation> summary);
    void realmRolesGetSignal(QList<OAIRoleRepresentation> summary);
    void realmRolesPostSignal();
    void realmRolesRoleNameCompositesClientsClientGetSignal(QList<OAIRoleRepresentation> summary);
    void realmRolesRoleNameCompositesDeleteSignal();
    void realmRolesRoleNameCompositesGetSignal(QList<OAIRoleRepresentation> summary);
    void realmRolesRoleNameCompositesPostSignal();
    void realmRolesRoleNameCompositesRealmGetSignal(QList<OAIRoleRepresentation> summary);
    void realmRolesRoleNameDeleteSignal();
    void realmRolesRoleNameGetSignal(OAIRoleRepresentation summary);
    void realmRolesRoleNameGroupsGetSignal(QList<OAIGroupRepresentation> summary);
    void realmRolesRoleNameManagementPermissionsGetSignal(OAIManagementPermissionReference summary);
    void realmRolesRoleNameManagementPermissionsPutSignal(OAIManagementPermissionReference summary);
    void realmRolesRoleNamePutSignal();
    void realmRolesRoleNameUsersGetSignal(QList<OAIUserRepresentation> summary);


    void realmClientsIdRolesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdRolesPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameCompositesClientsClientGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdRolesRoleNameCompositesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameCompositesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdRolesRoleNameCompositesPostSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameCompositesRealmGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmClientsIdRolesRoleNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRoleRepresentation summary);
    void realmClientsIdRolesRoleNameGroupsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupRepresentation> summary);
    void realmClientsIdRolesRoleNameManagementPermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmClientsIdRolesRoleNameManagementPermissionsPutSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmClientsIdRolesRoleNamePutSignalFull(OAIHttpRequestWorker *worker);
    void realmClientsIdRolesRoleNameUsersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserRepresentation> summary);
    void realmRolesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmRolesPostSignalFull(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameCompositesClientsClientGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmRolesRoleNameCompositesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameCompositesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmRolesRoleNameCompositesPostSignalFull(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameCompositesRealmGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRepresentation> summary);
    void realmRolesRoleNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRoleRepresentation summary);
    void realmRolesRoleNameGroupsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupRepresentation> summary);
    void realmRolesRoleNameManagementPermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmRolesRoleNameManagementPermissionsPutSignalFull(OAIHttpRequestWorker *worker, OAIManagementPermissionReference summary);
    void realmRolesRoleNamePutSignalFull(OAIHttpRequestWorker *worker);
    void realmRolesRoleNameUsersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserRepresentation> summary);

    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesGetSignalError() instead")
    void realmClientsIdRolesGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesPostSignalError() instead")
    void realmClientsIdRolesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesClientsClientGetSignalError() instead")
    void realmClientsIdRolesRoleNameCompositesClientsClientGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesClientsClientGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesDeleteSignalError() instead")
    void realmClientsIdRolesRoleNameCompositesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesGetSignalError() instead")
    void realmClientsIdRolesRoleNameCompositesGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesPostSignalError() instead")
    void realmClientsIdRolesRoleNameCompositesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesRealmGetSignalError() instead")
    void realmClientsIdRolesRoleNameCompositesRealmGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesRealmGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameDeleteSignalError() instead")
    void realmClientsIdRolesRoleNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameGetSignalError() instead")
    void realmClientsIdRolesRoleNameGetSignalE(OAIRoleRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameGetSignalError(OAIRoleRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameGroupsGetSignalError() instead")
    void realmClientsIdRolesRoleNameGroupsGetSignalE(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameGroupsGetSignalError(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameManagementPermissionsGetSignalError() instead")
    void realmClientsIdRolesRoleNameManagementPermissionsGetSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameManagementPermissionsGetSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameManagementPermissionsPutSignalError() instead")
    void realmClientsIdRolesRoleNameManagementPermissionsPutSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameManagementPermissionsPutSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNamePutSignalError() instead")
    void realmClientsIdRolesRoleNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameUsersGetSignalError() instead")
    void realmClientsIdRolesRoleNameUsersGetSignalE(QList<OAIUserRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameUsersGetSignalError(QList<OAIUserRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesGetSignalError() instead")
    void realmRolesGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesPostSignalError() instead")
    void realmRolesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesClientsClientGetSignalError() instead")
    void realmRolesRoleNameCompositesClientsClientGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesClientsClientGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesDeleteSignalError() instead")
    void realmRolesRoleNameCompositesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesGetSignalError() instead")
    void realmRolesRoleNameCompositesGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesPostSignalError() instead")
    void realmRolesRoleNameCompositesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesRealmGetSignalError() instead")
    void realmRolesRoleNameCompositesRealmGetSignalE(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesRealmGetSignalError(QList<OAIRoleRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameDeleteSignalError() instead")
    void realmRolesRoleNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameGetSignalError() instead")
    void realmRolesRoleNameGetSignalE(OAIRoleRepresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameGetSignalError(OAIRoleRepresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameGroupsGetSignalError() instead")
    void realmRolesRoleNameGroupsGetSignalE(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameGroupsGetSignalError(QList<OAIGroupRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameManagementPermissionsGetSignalError() instead")
    void realmRolesRoleNameManagementPermissionsGetSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameManagementPermissionsGetSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameManagementPermissionsPutSignalError() instead")
    void realmRolesRoleNameManagementPermissionsPutSignalE(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameManagementPermissionsPutSignalError(OAIManagementPermissionReference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNamePutSignalError() instead")
    void realmRolesRoleNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameUsersGetSignalError() instead")
    void realmRolesRoleNameUsersGetSignalE(QList<OAIUserRepresentation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameUsersGetSignalError(QList<OAIUserRepresentation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesGetSignalErrorFull() instead")
    void realmClientsIdRolesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesPostSignalErrorFull() instead")
    void realmClientsIdRolesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesClientsClientGetSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameCompositesClientsClientGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesClientsClientGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesDeleteSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameCompositesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesGetSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameCompositesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesPostSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameCompositesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameCompositesRealmGetSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameCompositesRealmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameCompositesRealmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameDeleteSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameGetSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameGroupsGetSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameManagementPermissionsGetSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameManagementPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameManagementPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameManagementPermissionsPutSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameManagementPermissionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameManagementPermissionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNamePutSignalErrorFull() instead")
    void realmClientsIdRolesRoleNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmClientsIdRolesRoleNameUsersGetSignalErrorFull() instead")
    void realmClientsIdRolesRoleNameUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmClientsIdRolesRoleNameUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesGetSignalErrorFull() instead")
    void realmRolesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesPostSignalErrorFull() instead")
    void realmRolesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesClientsClientGetSignalErrorFull() instead")
    void realmRolesRoleNameCompositesClientsClientGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesClientsClientGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesDeleteSignalErrorFull() instead")
    void realmRolesRoleNameCompositesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesGetSignalErrorFull() instead")
    void realmRolesRoleNameCompositesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesPostSignalErrorFull() instead")
    void realmRolesRoleNameCompositesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameCompositesRealmGetSignalErrorFull() instead")
    void realmRolesRoleNameCompositesRealmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameCompositesRealmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameDeleteSignalErrorFull() instead")
    void realmRolesRoleNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameGetSignalErrorFull() instead")
    void realmRolesRoleNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameGroupsGetSignalErrorFull() instead")
    void realmRolesRoleNameGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameManagementPermissionsGetSignalErrorFull() instead")
    void realmRolesRoleNameManagementPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameManagementPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameManagementPermissionsPutSignalErrorFull() instead")
    void realmRolesRoleNameManagementPermissionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameManagementPermissionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNamePutSignalErrorFull() instead")
    void realmRolesRoleNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realmRolesRoleNameUsersGetSignalErrorFull() instead")
    void realmRolesRoleNameUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realmRolesRoleNameUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
