/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderRepresentation::OAIProviderRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderRepresentation::OAIProviderRepresentation() {
    this->initializeModel();
}

OAIProviderRepresentation::~OAIProviderRepresentation() {}

void OAIProviderRepresentation::initializeModel() {

    m_operational_info_isSet = false;
    m_operational_info_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;
}

void OAIProviderRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderRepresentation::fromJsonObject(QJsonObject json) {

    m_operational_info_isValid = ::OpenAPI::fromJsonValue(m_operational_info, json[QString("operationalInfo")]);
    m_operational_info_isSet = !json[QString("operationalInfo")].isNull() && m_operational_info_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;
}

QString OAIProviderRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_operational_info.size() > 0) {
        obj.insert(QString("operationalInfo"), ::OpenAPI::toJsonValue(m_operational_info));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIProviderRepresentation::getOperationalInfo() const {
    return m_operational_info;
}
void OAIProviderRepresentation::setOperationalInfo(const QMap<QString, QJsonValue> &operational_info) {
    m_operational_info = operational_info;
    m_operational_info_isSet = true;
}

bool OAIProviderRepresentation::is_operational_info_Set() const{
    return m_operational_info_isSet;
}

bool OAIProviderRepresentation::is_operational_info_Valid() const{
    return m_operational_info_isValid;
}

qint32 OAIProviderRepresentation::getOrder() const {
    return m_order;
}
void OAIProviderRepresentation::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIProviderRepresentation::is_order_Set() const{
    return m_order_isSet;
}

bool OAIProviderRepresentation::is_order_Valid() const{
    return m_order_isValid;
}

bool OAIProviderRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operational_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
