/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtocolMappersApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIProtocolMappersApi::OAIProtocolMappersApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIProtocolMappersApi::~OAIProtocolMappersApi() {
}

void OAIProtocolMappersApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://keycloak.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("realmClientScopesId1ProtocolMappersModelsId2Delete", defaultConf);
    _serverIndices.insert("realmClientScopesId1ProtocolMappersModelsId2Delete", 0);
    _serverConfigs.insert("realmClientScopesId1ProtocolMappersModelsId2Get", defaultConf);
    _serverIndices.insert("realmClientScopesId1ProtocolMappersModelsId2Get", 0);
    _serverConfigs.insert("realmClientScopesId1ProtocolMappersModelsId2Put", defaultConf);
    _serverIndices.insert("realmClientScopesId1ProtocolMappersModelsId2Put", 0);
    _serverConfigs.insert("realmClientScopesIdProtocolMappersAddModelsPost", defaultConf);
    _serverIndices.insert("realmClientScopesIdProtocolMappersAddModelsPost", 0);
    _serverConfigs.insert("realmClientScopesIdProtocolMappersModelsGet", defaultConf);
    _serverIndices.insert("realmClientScopesIdProtocolMappersModelsGet", 0);
    _serverConfigs.insert("realmClientScopesIdProtocolMappersModelsPost", defaultConf);
    _serverIndices.insert("realmClientScopesIdProtocolMappersModelsPost", 0);
    _serverConfigs.insert("realmClientScopesIdProtocolMappersProtocolProtocolGet", defaultConf);
    _serverIndices.insert("realmClientScopesIdProtocolMappersProtocolProtocolGet", 0);
    _serverConfigs.insert("realmClientsId1ProtocolMappersModelsId2Delete", defaultConf);
    _serverIndices.insert("realmClientsId1ProtocolMappersModelsId2Delete", 0);
    _serverConfigs.insert("realmClientsId1ProtocolMappersModelsId2Get", defaultConf);
    _serverIndices.insert("realmClientsId1ProtocolMappersModelsId2Get", 0);
    _serverConfigs.insert("realmClientsId1ProtocolMappersModelsId2Put", defaultConf);
    _serverIndices.insert("realmClientsId1ProtocolMappersModelsId2Put", 0);
    _serverConfigs.insert("realmClientsIdProtocolMappersAddModelsPost", defaultConf);
    _serverIndices.insert("realmClientsIdProtocolMappersAddModelsPost", 0);
    _serverConfigs.insert("realmClientsIdProtocolMappersModelsGet", defaultConf);
    _serverIndices.insert("realmClientsIdProtocolMappersModelsGet", 0);
    _serverConfigs.insert("realmClientsIdProtocolMappersModelsPost", defaultConf);
    _serverIndices.insert("realmClientsIdProtocolMappersModelsPost", 0);
    _serverConfigs.insert("realmClientsIdProtocolMappersProtocolProtocolGet", defaultConf);
    _serverIndices.insert("realmClientsIdProtocolMappersProtocolProtocolGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIProtocolMappersApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIProtocolMappersApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIProtocolMappersApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIProtocolMappersApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIProtocolMappersApi::setUsername(const QString &username) {
    _username = username;
}

void OAIProtocolMappersApi::setPassword(const QString &password) {
    _password = password;
}


void OAIProtocolMappersApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIProtocolMappersApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIProtocolMappersApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIProtocolMappersApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProtocolMappersApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProtocolMappersApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIProtocolMappersApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIProtocolMappersApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIProtocolMappersApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIProtocolMappersApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIProtocolMappersApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIProtocolMappersApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIProtocolMappersApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIProtocolMappersApi::realmClientScopesId1ProtocolMappersModelsId2Delete(const QString &realm, const QString &id1, const QString &id2) {
    QString fullPath = QString(_serverConfigs["realmClientScopesId1ProtocolMappersModelsId2Delete"][_serverIndices.value("realmClientScopesId1ProtocolMappersModelsId2Delete")].URL()+"/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString id1PathParam("{");
        id1PathParam.append("id1").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id1", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id1"+pathSuffix : pathPrefix;
        fullPath.replace(id1PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id1)));
    }
    
    {
        QString id2PathParam("{");
        id2PathParam.append("id2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id2"+pathSuffix : pathPrefix;
        fullPath.replace(id2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientScopesId1ProtocolMappersModelsId2DeleteCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientScopesId1ProtocolMappersModelsId2DeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2DeleteSignal();
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2DeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2DeleteSignalE(error_type, error_str);
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2DeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2DeleteSignalError(error_type, error_str);
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2DeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientScopesId1ProtocolMappersModelsId2Get(const QString &realm, const QString &id1, const QString &id2) {
    QString fullPath = QString(_serverConfigs["realmClientScopesId1ProtocolMappersModelsId2Get"][_serverIndices.value("realmClientScopesId1ProtocolMappersModelsId2Get")].URL()+"/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString id1PathParam("{");
        id1PathParam.append("id1").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id1", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id1"+pathSuffix : pathPrefix;
        fullPath.replace(id1PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id1)));
    }
    
    {
        QString id2PathParam("{");
        id2PathParam.append("id2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id2"+pathSuffix : pathPrefix;
        fullPath.replace(id2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientScopesId1ProtocolMappersModelsId2GetCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientScopesId1ProtocolMappersModelsId2GetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProtocolMapperRepresentation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2GetSignal(output);
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2GetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2GetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2GetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2GetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2GetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientScopesId1ProtocolMappersModelsId2Put(const QString &realm, const QString &id1, const QString &id2, const OAIProtocolMapperRepresentation &oai_protocol_mapper_representation) {
    QString fullPath = QString(_serverConfigs["realmClientScopesId1ProtocolMappersModelsId2Put"][_serverIndices.value("realmClientScopesId1ProtocolMappersModelsId2Put")].URL()+"/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString id1PathParam("{");
        id1PathParam.append("id1").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id1", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id1"+pathSuffix : pathPrefix;
        fullPath.replace(id1PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id1)));
    }
    
    {
        QString id2PathParam("{");
        id2PathParam.append("id2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id2"+pathSuffix : pathPrefix;
        fullPath.replace(id2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_protocol_mapper_representation.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientScopesId1ProtocolMappersModelsId2PutCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientScopesId1ProtocolMappersModelsId2PutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2PutSignal();
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2PutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2PutSignalE(error_type, error_str);
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2PutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2PutSignalError(error_type, error_str);
        Q_EMIT realmClientScopesId1ProtocolMappersModelsId2PutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientScopesIdProtocolMappersAddModelsPost(const QString &realm, const QString &id, const QList<OAIProtocolMapperRepresentation> &oai_protocol_mapper_representation) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdProtocolMappersAddModelsPost"][_serverIndices.value("realmClientScopesIdProtocolMappersAddModelsPost")].URL()+"/{realm}/client-scopes/{id}/protocol-mappers/add-models");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_protocol_mapper_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientScopesIdProtocolMappersAddModelsPostCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientScopesIdProtocolMappersAddModelsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdProtocolMappersAddModelsPostSignal();
        Q_EMIT realmClientScopesIdProtocolMappersAddModelsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdProtocolMappersAddModelsPostSignalE(error_type, error_str);
        Q_EMIT realmClientScopesIdProtocolMappersAddModelsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdProtocolMappersAddModelsPostSignalError(error_type, error_str);
        Q_EMIT realmClientScopesIdProtocolMappersAddModelsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientScopesIdProtocolMappersModelsGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdProtocolMappersModelsGet"][_serverIndices.value("realmClientScopesIdProtocolMappersModelsGet")].URL()+"/{realm}/client-scopes/{id}/protocol-mappers/models");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientScopesIdProtocolMappersModelsGetCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientScopesIdProtocolMappersModelsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProtocolMapperRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProtocolMapperRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdProtocolMappersModelsGetSignal(output);
        Q_EMIT realmClientScopesIdProtocolMappersModelsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdProtocolMappersModelsGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesIdProtocolMappersModelsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdProtocolMappersModelsGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesIdProtocolMappersModelsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientScopesIdProtocolMappersModelsPost(const QString &realm, const QString &id, const OAIProtocolMapperRepresentation &oai_protocol_mapper_representation) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdProtocolMappersModelsPost"][_serverIndices.value("realmClientScopesIdProtocolMappersModelsPost")].URL()+"/{realm}/client-scopes/{id}/protocol-mappers/models");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_protocol_mapper_representation.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientScopesIdProtocolMappersModelsPostCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientScopesIdProtocolMappersModelsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdProtocolMappersModelsPostSignal();
        Q_EMIT realmClientScopesIdProtocolMappersModelsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdProtocolMappersModelsPostSignalE(error_type, error_str);
        Q_EMIT realmClientScopesIdProtocolMappersModelsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdProtocolMappersModelsPostSignalError(error_type, error_str);
        Q_EMIT realmClientScopesIdProtocolMappersModelsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientScopesIdProtocolMappersProtocolProtocolGet(const QString &realm, const QString &id, const QString &protocol) {
    QString fullPath = QString(_serverConfigs["realmClientScopesIdProtocolMappersProtocolProtocolGet"][_serverIndices.value("realmClientScopesIdProtocolMappersProtocolProtocolGet")].URL()+"/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString protocolPathParam("{");
        protocolPathParam.append("protocol").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "protocol", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"protocol"+pathSuffix : pathPrefix;
        fullPath.replace(protocolPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(protocol)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientScopesIdProtocolMappersProtocolProtocolGetCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientScopesIdProtocolMappersProtocolProtocolGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProtocolMapperRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProtocolMapperRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientScopesIdProtocolMappersProtocolProtocolGetSignal(output);
        Q_EMIT realmClientScopesIdProtocolMappersProtocolProtocolGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientScopesIdProtocolMappersProtocolProtocolGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientScopesIdProtocolMappersProtocolProtocolGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientScopesIdProtocolMappersProtocolProtocolGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientScopesIdProtocolMappersProtocolProtocolGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientsId1ProtocolMappersModelsId2Delete(const QString &realm, const QString &id1, const QString &id2) {
    QString fullPath = QString(_serverConfigs["realmClientsId1ProtocolMappersModelsId2Delete"][_serverIndices.value("realmClientsId1ProtocolMappersModelsId2Delete")].URL()+"/{realm}/clients/{id1}/protocol-mappers/models/{id2}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString id1PathParam("{");
        id1PathParam.append("id1").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id1", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id1"+pathSuffix : pathPrefix;
        fullPath.replace(id1PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id1)));
    }
    
    {
        QString id2PathParam("{");
        id2PathParam.append("id2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id2"+pathSuffix : pathPrefix;
        fullPath.replace(id2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientsId1ProtocolMappersModelsId2DeleteCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientsId1ProtocolMappersModelsId2DeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsId1ProtocolMappersModelsId2DeleteSignal();
        Q_EMIT realmClientsId1ProtocolMappersModelsId2DeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsId1ProtocolMappersModelsId2DeleteSignalE(error_type, error_str);
        Q_EMIT realmClientsId1ProtocolMappersModelsId2DeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsId1ProtocolMappersModelsId2DeleteSignalError(error_type, error_str);
        Q_EMIT realmClientsId1ProtocolMappersModelsId2DeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientsId1ProtocolMappersModelsId2Get(const QString &realm, const QString &id1, const QString &id2) {
    QString fullPath = QString(_serverConfigs["realmClientsId1ProtocolMappersModelsId2Get"][_serverIndices.value("realmClientsId1ProtocolMappersModelsId2Get")].URL()+"/{realm}/clients/{id1}/protocol-mappers/models/{id2}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString id1PathParam("{");
        id1PathParam.append("id1").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id1", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id1"+pathSuffix : pathPrefix;
        fullPath.replace(id1PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id1)));
    }
    
    {
        QString id2PathParam("{");
        id2PathParam.append("id2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id2"+pathSuffix : pathPrefix;
        fullPath.replace(id2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientsId1ProtocolMappersModelsId2GetCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientsId1ProtocolMappersModelsId2GetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProtocolMapperRepresentation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsId1ProtocolMappersModelsId2GetSignal(output);
        Q_EMIT realmClientsId1ProtocolMappersModelsId2GetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsId1ProtocolMappersModelsId2GetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsId1ProtocolMappersModelsId2GetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsId1ProtocolMappersModelsId2GetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsId1ProtocolMappersModelsId2GetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientsId1ProtocolMappersModelsId2Put(const QString &realm, const QString &id1, const QString &id2, const OAIProtocolMapperRepresentation &oai_protocol_mapper_representation) {
    QString fullPath = QString(_serverConfigs["realmClientsId1ProtocolMappersModelsId2Put"][_serverIndices.value("realmClientsId1ProtocolMappersModelsId2Put")].URL()+"/{realm}/clients/{id1}/protocol-mappers/models/{id2}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString id1PathParam("{");
        id1PathParam.append("id1").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id1", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id1"+pathSuffix : pathPrefix;
        fullPath.replace(id1PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id1)));
    }
    
    {
        QString id2PathParam("{");
        id2PathParam.append("id2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id2"+pathSuffix : pathPrefix;
        fullPath.replace(id2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_protocol_mapper_representation.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientsId1ProtocolMappersModelsId2PutCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientsId1ProtocolMappersModelsId2PutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsId1ProtocolMappersModelsId2PutSignal();
        Q_EMIT realmClientsId1ProtocolMappersModelsId2PutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsId1ProtocolMappersModelsId2PutSignalE(error_type, error_str);
        Q_EMIT realmClientsId1ProtocolMappersModelsId2PutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsId1ProtocolMappersModelsId2PutSignalError(error_type, error_str);
        Q_EMIT realmClientsId1ProtocolMappersModelsId2PutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientsIdProtocolMappersAddModelsPost(const QString &realm, const QString &id, const QList<OAIProtocolMapperRepresentation> &oai_protocol_mapper_representation) {
    QString fullPath = QString(_serverConfigs["realmClientsIdProtocolMappersAddModelsPost"][_serverIndices.value("realmClientsIdProtocolMappersAddModelsPost")].URL()+"/{realm}/clients/{id}/protocol-mappers/add-models");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_protocol_mapper_representation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientsIdProtocolMappersAddModelsPostCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientsIdProtocolMappersAddModelsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdProtocolMappersAddModelsPostSignal();
        Q_EMIT realmClientsIdProtocolMappersAddModelsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdProtocolMappersAddModelsPostSignalE(error_type, error_str);
        Q_EMIT realmClientsIdProtocolMappersAddModelsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdProtocolMappersAddModelsPostSignalError(error_type, error_str);
        Q_EMIT realmClientsIdProtocolMappersAddModelsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientsIdProtocolMappersModelsGet(const QString &realm, const QString &id) {
    QString fullPath = QString(_serverConfigs["realmClientsIdProtocolMappersModelsGet"][_serverIndices.value("realmClientsIdProtocolMappersModelsGet")].URL()+"/{realm}/clients/{id}/protocol-mappers/models");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientsIdProtocolMappersModelsGetCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientsIdProtocolMappersModelsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProtocolMapperRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProtocolMapperRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdProtocolMappersModelsGetSignal(output);
        Q_EMIT realmClientsIdProtocolMappersModelsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdProtocolMappersModelsGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsIdProtocolMappersModelsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdProtocolMappersModelsGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsIdProtocolMappersModelsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientsIdProtocolMappersModelsPost(const QString &realm, const QString &id, const OAIProtocolMapperRepresentation &oai_protocol_mapper_representation) {
    QString fullPath = QString(_serverConfigs["realmClientsIdProtocolMappersModelsPost"][_serverIndices.value("realmClientsIdProtocolMappersModelsPost")].URL()+"/{realm}/clients/{id}/protocol-mappers/models");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_protocol_mapper_representation.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientsIdProtocolMappersModelsPostCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientsIdProtocolMappersModelsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdProtocolMappersModelsPostSignal();
        Q_EMIT realmClientsIdProtocolMappersModelsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdProtocolMappersModelsPostSignalE(error_type, error_str);
        Q_EMIT realmClientsIdProtocolMappersModelsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdProtocolMappersModelsPostSignalError(error_type, error_str);
        Q_EMIT realmClientsIdProtocolMappersModelsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::realmClientsIdProtocolMappersProtocolProtocolGet(const QString &realm, const QString &id, const QString &protocol) {
    QString fullPath = QString(_serverConfigs["realmClientsIdProtocolMappersProtocolProtocolGet"][_serverIndices.value("realmClientsIdProtocolMappersProtocolProtocolGet")].URL()+"/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString realmPathParam("{");
        realmPathParam.append("realm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm"+pathSuffix : pathPrefix;
        fullPath.replace(realmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString protocolPathParam("{");
        protocolPathParam.append("protocol").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "protocol", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"protocol"+pathSuffix : pathPrefix;
        fullPath.replace(protocolPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(protocol)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProtocolMappersApi::realmClientsIdProtocolMappersProtocolProtocolGetCallback);
    connect(this, &OAIProtocolMappersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProtocolMappersApi::realmClientsIdProtocolMappersProtocolProtocolGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProtocolMapperRepresentation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProtocolMapperRepresentation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT realmClientsIdProtocolMappersProtocolProtocolGetSignal(output);
        Q_EMIT realmClientsIdProtocolMappersProtocolProtocolGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT realmClientsIdProtocolMappersProtocolProtocolGetSignalE(output, error_type, error_str);
        Q_EMIT realmClientsIdProtocolMappersProtocolProtocolGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT realmClientsIdProtocolMappersProtocolProtocolGetSignalError(output, error_type, error_str);
        Q_EMIT realmClientsIdProtocolMappersProtocolProtocolGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProtocolMappersApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
