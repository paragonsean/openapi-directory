/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DailyRoomRate;
import org.openapitools.client.model.Restrictions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DailyRateRoomOffer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DailyRateRoomOffer {
  public static final String SERIALIZED_NAME_AVAILABLE_ROOMS_COUNT = "available_rooms_count";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ROOMS_COUNT)
  private Integer availableRoomsCount;

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "is_available";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private List<DailyRoomRate> rates = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private Restrictions restrictions;

  public static final String SERIALIZED_NAME_ROOM_TYPE_CODE = "room_type_code";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE_CODE)
  private String roomTypeCode;

  public static final String SERIALIZED_NAME_UNAVAILABLE_REASON = "unavailable_reason";
  @SerializedName(SERIALIZED_NAME_UNAVAILABLE_REASON)
  private String unavailableReason;

  public DailyRateRoomOffer() {
  }

  public DailyRateRoomOffer availableRoomsCount(Integer availableRoomsCount) {
    this.availableRoomsCount = availableRoomsCount;
    return this;
  }

  /**
   * Get availableRoomsCount
   * @return availableRoomsCount
   */
  @javax.annotation.Nullable
  public Integer getAvailableRoomsCount() {
    return availableRoomsCount;
  }

  public void setAvailableRoomsCount(Integer availableRoomsCount) {
    this.availableRoomsCount = availableRoomsCount;
  }


  public DailyRateRoomOffer isAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
    return this;
  }

  /**
   * Get isAvailable
   * @return isAvailable
   */
  @javax.annotation.Nullable
  public Boolean getIsAvailable() {
    return isAvailable;
  }

  public void setIsAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
  }


  public DailyRateRoomOffer rates(List<DailyRoomRate> rates) {
    this.rates = rates;
    return this;
  }

  public DailyRateRoomOffer addRatesItem(DailyRoomRate ratesItem) {
    if (this.rates == null) {
      this.rates = new ArrayList<>();
    }
    this.rates.add(ratesItem);
    return this;
  }

  /**
   * Get rates
   * @return rates
   */
  @javax.annotation.Nullable
  public List<DailyRoomRate> getRates() {
    return rates;
  }

  public void setRates(List<DailyRoomRate> rates) {
    this.rates = rates;
  }


  public DailyRateRoomOffer restrictions(Restrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  /**
   * Get restrictions
   * @return restrictions
   */
  @javax.annotation.Nullable
  public Restrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(Restrictions restrictions) {
    this.restrictions = restrictions;
  }


  public DailyRateRoomOffer roomTypeCode(String roomTypeCode) {
    this.roomTypeCode = roomTypeCode;
    return this;
  }

  /**
   * Get roomTypeCode
   * @return roomTypeCode
   */
  @javax.annotation.Nullable
  public String getRoomTypeCode() {
    return roomTypeCode;
  }

  public void setRoomTypeCode(String roomTypeCode) {
    this.roomTypeCode = roomTypeCode;
  }


  public DailyRateRoomOffer unavailableReason(String unavailableReason) {
    this.unavailableReason = unavailableReason;
    return this;
  }

  /**
   * If there is an issue and this room offer is unavailable (IsAvailable&#x3D;false) this message may be not empty.
   * @return unavailableReason
   */
  @javax.annotation.Nullable
  public String getUnavailableReason() {
    return unavailableReason;
  }

  public void setUnavailableReason(String unavailableReason) {
    this.unavailableReason = unavailableReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyRateRoomOffer dailyRateRoomOffer = (DailyRateRoomOffer) o;
    return Objects.equals(this.availableRoomsCount, dailyRateRoomOffer.availableRoomsCount) &&
        Objects.equals(this.isAvailable, dailyRateRoomOffer.isAvailable) &&
        Objects.equals(this.rates, dailyRateRoomOffer.rates) &&
        Objects.equals(this.restrictions, dailyRateRoomOffer.restrictions) &&
        Objects.equals(this.roomTypeCode, dailyRateRoomOffer.roomTypeCode) &&
        Objects.equals(this.unavailableReason, dailyRateRoomOffer.unavailableReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableRoomsCount, isAvailable, rates, restrictions, roomTypeCode, unavailableReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyRateRoomOffer {\n");
    sb.append("    availableRoomsCount: ").append(toIndentedString(availableRoomsCount)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    roomTypeCode: ").append(toIndentedString(roomTypeCode)).append("\n");
    sb.append("    unavailableReason: ").append(toIndentedString(unavailableReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_rooms_count");
    openapiFields.add("is_available");
    openapiFields.add("rates");
    openapiFields.add("restrictions");
    openapiFields.add("room_type_code");
    openapiFields.add("unavailable_reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyRateRoomOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyRateRoomOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyRateRoomOffer is not found in the empty JSON string", DailyRateRoomOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyRateRoomOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyRateRoomOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("rates") != null && !jsonObj.get("rates").isJsonNull()) {
        JsonArray jsonArrayrates = jsonObj.getAsJsonArray("rates");
        if (jsonArrayrates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rates` to be an array in the JSON string but got `%s`", jsonObj.get("rates").toString()));
          }

          // validate the optional field `rates` (array)
          for (int i = 0; i < jsonArrayrates.size(); i++) {
            DailyRoomRate.validateJsonElement(jsonArrayrates.get(i));
          };
        }
      }
      // validate the optional field `restrictions`
      if (jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) {
        Restrictions.validateJsonElement(jsonObj.get("restrictions"));
      }
      if ((jsonObj.get("room_type_code") != null && !jsonObj.get("room_type_code").isJsonNull()) && !jsonObj.get("room_type_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `room_type_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("room_type_code").toString()));
      }
      if ((jsonObj.get("unavailable_reason") != null && !jsonObj.get("unavailable_reason").isJsonNull()) && !jsonObj.get("unavailable_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unavailable_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unavailable_reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyRateRoomOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyRateRoomOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyRateRoomOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyRateRoomOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyRateRoomOffer>() {
           @Override
           public void write(JsonWriter out, DailyRateRoomOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyRateRoomOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyRateRoomOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyRateRoomOffer
   * @throws IOException if the JSON string is invalid with respect to DailyRateRoomOffer
   */
  public static DailyRateRoomOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyRateRoomOffer.class);
  }

  /**
   * Convert an instance of DailyRateRoomOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

