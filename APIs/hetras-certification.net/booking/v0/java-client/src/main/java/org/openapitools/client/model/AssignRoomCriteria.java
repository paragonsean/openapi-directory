/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a set of criteria for assigning a room
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssignRoomCriteria {
  public static final String SERIALIZED_NAME_AMENITIES = "amenities";
  @SerializedName(SERIALIZED_NAME_AMENITIES)
  private List<String> amenities = new ArrayList<>();

  /**
   * Here you can define to limit the list of assignable rooms based on their current condition. This is only applicable if the underlying reservation              is due to arrive on the current business day. If not set by default only clean rooms will be assigned.
   */
  @JsonAdapter(ConditionEnum.Adapter.class)
  public enum ConditionEnum {
    CLEAN_NOT_INSPECTED("CleanNotInspected"),
    
    CLEAN("Clean"),
    
    DIRTY("Dirty"),
    
    ANY("Any");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionEnum fromValue(String value) {
      for (ConditionEnum b : ConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConditionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private ConditionEnum condition;

  public static final String SERIALIZED_NAME_INCLUDE_OUT_OF_SERVICE = "include_out_of_service";
  @SerializedName(SERIALIZED_NAME_INCLUDE_OUT_OF_SERVICE)
  private Boolean includeOutOfService;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPECT_GUEST_PREFERENCES = "respect_guest_preferences";
  @SerializedName(SERIALIZED_NAME_RESPECT_GUEST_PREFERENCES)
  private Boolean respectGuestPreferences;

  public static final String SERIALIZED_NAME_ROOM_NUMBER = "room_number";
  @SerializedName(SERIALIZED_NAME_ROOM_NUMBER)
  private String roomNumber;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<String> views = new ArrayList<>();

  public AssignRoomCriteria() {
  }

  public AssignRoomCriteria amenities(List<String> amenities) {
    this.amenities = amenities;
    return this;
  }

  public AssignRoomCriteria addAmenitiesItem(String amenitiesItem) {
    if (this.amenities == null) {
      this.amenities = new ArrayList<>();
    }
    this.amenities.add(amenitiesItem);
    return this;
  }

  /**
   * Ensure the assigned room will have all the amenities specified. You can provide a comma seperated list of amenity codes.
   * @return amenities
   */
  @javax.annotation.Nullable
  public List<String> getAmenities() {
    return amenities;
  }

  public void setAmenities(List<String> amenities) {
    this.amenities = amenities;
  }


  public AssignRoomCriteria condition(ConditionEnum condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Here you can define to limit the list of assignable rooms based on their current condition. This is only applicable if the underlying reservation              is due to arrive on the current business day. If not set by default only clean rooms will be assigned.
   * @return condition
   */
  @javax.annotation.Nullable
  public ConditionEnum getCondition() {
    return condition;
  }

  public void setCondition(ConditionEnum condition) {
    this.condition = condition;
  }


  public AssignRoomCriteria includeOutOfService(Boolean includeOutOfService) {
    this.includeOutOfService = includeOutOfService;
    return this;
  }

  /**
   * Sometimes you might want to assign rooms which are out of service (small repair needed) if no other rooms are available anymore. If you set              include_out_of_service to true even those rooms will be considered. The default is false.
   * @return includeOutOfService
   */
  @javax.annotation.Nullable
  public Boolean getIncludeOutOfService() {
    return includeOutOfService;
  }

  public void setIncludeOutOfService(Boolean includeOutOfService) {
    this.includeOutOfService = includeOutOfService;
  }


  public AssignRoomCriteria locations(List<String> locations) {
    this.locations = locations;
    return this;
  }

  public AssignRoomCriteria addLocationsItem(String locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Ensure the assigned room will have at least one of the specified locations. You can provide a comma seperated list of location codes.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<String> getLocations() {
    return locations;
  }

  public void setLocations(List<String> locations) {
    this.locations = locations;
  }


  public AssignRoomCriteria respectGuestPreferences(Boolean respectGuestPreferences) {
    this.respectGuestPreferences = respectGuestPreferences;
    return this;
  }

  /**
   * Defines if the preferences for locations, amenities and views of the primary guest should be taken into account. All defined preferences in the guest              profile override any of the criteria defined in the request body. The default is false.
   * @return respectGuestPreferences
   */
  @javax.annotation.Nullable
  public Boolean getRespectGuestPreferences() {
    return respectGuestPreferences;
  }

  public void setRespectGuestPreferences(Boolean respectGuestPreferences) {
    this.respectGuestPreferences = respectGuestPreferences;
  }


  public AssignRoomCriteria roomNumber(String roomNumber) {
    this.roomNumber = roomNumber;
    return this;
  }

  /**
   * If you define a specific room number this room will be assigned if not assigned to another reservation, has proper room type and is not OutOfOrder               or OutOfInventory for the stay duration of the underlying reservaton. If set all other filter criteria will be ignored.
   * @return roomNumber
   */
  @javax.annotation.Nullable
  public String getRoomNumber() {
    return roomNumber;
  }

  public void setRoomNumber(String roomNumber) {
    this.roomNumber = roomNumber;
  }


  public AssignRoomCriteria views(List<String> views) {
    this.views = views;
    return this;
  }

  public AssignRoomCriteria addViewsItem(String viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

  /**
   * Ensure the assigned room will have at least one of the specified views. You can provide a comma seperated list of view codes.
   * @return views
   */
  @javax.annotation.Nullable
  public List<String> getViews() {
    return views;
  }

  public void setViews(List<String> views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignRoomCriteria assignRoomCriteria = (AssignRoomCriteria) o;
    return Objects.equals(this.amenities, assignRoomCriteria.amenities) &&
        Objects.equals(this.condition, assignRoomCriteria.condition) &&
        Objects.equals(this.includeOutOfService, assignRoomCriteria.includeOutOfService) &&
        Objects.equals(this.locations, assignRoomCriteria.locations) &&
        Objects.equals(this.respectGuestPreferences, assignRoomCriteria.respectGuestPreferences) &&
        Objects.equals(this.roomNumber, assignRoomCriteria.roomNumber) &&
        Objects.equals(this.views, assignRoomCriteria.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amenities, condition, includeOutOfService, locations, respectGuestPreferences, roomNumber, views);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignRoomCriteria {\n");
    sb.append("    amenities: ").append(toIndentedString(amenities)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    includeOutOfService: ").append(toIndentedString(includeOutOfService)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    respectGuestPreferences: ").append(toIndentedString(respectGuestPreferences)).append("\n");
    sb.append("    roomNumber: ").append(toIndentedString(roomNumber)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amenities");
    openapiFields.add("condition");
    openapiFields.add("include_out_of_service");
    openapiFields.add("locations");
    openapiFields.add("respect_guest_preferences");
    openapiFields.add("room_number");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssignRoomCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssignRoomCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignRoomCriteria is not found in the empty JSON string", AssignRoomCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssignRoomCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignRoomCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("amenities") != null && !jsonObj.get("amenities").isJsonNull() && !jsonObj.get("amenities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amenities` to be an array in the JSON string but got `%s`", jsonObj.get("amenities").toString()));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        ConditionEnum.validateJsonElement(jsonObj.get("condition"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull() && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      if ((jsonObj.get("room_number") != null && !jsonObj.get("room_number").isJsonNull()) && !jsonObj.get("room_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `room_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("room_number").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull() && !jsonObj.get("views").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignRoomCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignRoomCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignRoomCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignRoomCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignRoomCriteria>() {
           @Override
           public void write(JsonWriter out, AssignRoomCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignRoomCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssignRoomCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssignRoomCriteria
   * @throws IOException if the JSON string is invalid with respect to AssignRoomCriteria
   */
  public static AssignRoomCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignRoomCriteria.class);
  }

  /**
   * Convert an instance of AssignRoomCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

