/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Link Object represents a hyperlink from the containing resource to a URI.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkObject {
  public static final String SERIALIZED_NAME_DEPRECATION = "deprecation";
  @SerializedName(SERIALIZED_NAME_DEPRECATION)
  private String deprecation;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_HREFLANG = "hreflang";
  @SerializedName(SERIALIZED_NAME_HREFLANG)
  private String hreflang;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private String profile;

  public static final String SERIALIZED_NAME_TEMPLATED = "templated";
  @SerializedName(SERIALIZED_NAME_TEMPLATED)
  private Boolean templated;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public LinkObject() {
  }

  public LinkObject deprecation(String deprecation) {
    this.deprecation = deprecation;
    return this;
  }

  /**
   * &lt;para&gt;The \&quot;deprecation\&quot; property is OPTIONAL.&lt;/para&gt;  &lt;para&gt; &lt;/para&gt;  &lt;para&gt;Its presence indicates that the link is to be deprecated (i.e.              removed) at a future date.  Its value is a URL that SHOULD provide              further information about the deprecation.              A client SHOULD provide some notification (for example, by logging a              warning message) whenever it traverses over a link that has this              property.  The notification SHOULD include the deprecation property&#39;s              value so that a client maintainer can easily find information about              the deprecation.&lt;/para&gt;
   * @return deprecation
   */
  @javax.annotation.Nullable
  public String getDeprecation() {
    return deprecation;
  }

  public void setDeprecation(String deprecation) {
    this.deprecation = deprecation;
  }


  public LinkObject href(String href) {
    this.href = href;
    return this;
  }

  /**
   * &lt;para&gt;The \&quot;href\&quot; property is REQUIRED.&lt;/para&gt;  &lt;para&gt; &lt;/para&gt;  &lt;para&gt;Its value is either a URI [RFC3986] or a URI Template [RFC6570].              If the value is a URI Template then the Link Object SHOULD have a              \&quot;templated\&quot; attribute whose value is true.&lt;/para&gt;
   * @return href
   */
  @javax.annotation.Nonnull
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public LinkObject hreflang(String hreflang) {
    this.hreflang = hreflang;
    return this;
  }

  /**
   * &lt;para&gt;The \&quot;hreflang\&quot; property is OPTIONAL.&lt;/para&gt;  &lt;para&gt; &lt;/para&gt;  &lt;para&gt;Its value is a string and is intended for indicating the language of              the target resource (as defined by [RFC5988]).&lt;/para&gt;
   * @return hreflang
   */
  @javax.annotation.Nullable
  public String getHreflang() {
    return hreflang;
  }

  public void setHreflang(String hreflang) {
    this.hreflang = hreflang;
  }


  public LinkObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * &lt;para&gt;The \&quot;name\&quot; property is OPTIONAL.&lt;/para&gt;  &lt;para&gt; &lt;/para&gt;  &lt;para&gt;Its value MAY be used as a secondary key for selecting Link Objects              which share the same relation type.&lt;/para&gt;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LinkObject profile(String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * &lt;para&gt;The \&quot;profile\&quot; property is OPTIONAL.&lt;/para&gt;  &lt;para&gt; &lt;/para&gt;  &lt;para&gt;Its value is a string which is a URI that hints about the profile.&lt;/para&gt;
   * @return profile
   */
  @javax.annotation.Nullable
  public String getProfile() {
    return profile;
  }

  public void setProfile(String profile) {
    this.profile = profile;
  }


  public LinkObject templated(Boolean templated) {
    this.templated = templated;
    return this;
  }

  /**
   * &lt;para&gt;The \&quot;templated\&quot; property is OPTIONAL.&lt;/para&gt;  &lt;para&gt; &lt;/para&gt;  &lt;para&gt;Its value is boolean and SHOULD be true when the Link Object&#39;s \&quot;href\&quot;              property is a URI Template.              Its value SHOULD be considered false if it is undefined or any other              value than true.&lt;/para&gt;
   * @return templated
   */
  @javax.annotation.Nullable
  public Boolean getTemplated() {
    return templated;
  }

  public void setTemplated(Boolean templated) {
    this.templated = templated;
  }


  public LinkObject title(String title) {
    this.title = title;
    return this;
  }

  /**
   * &lt;para&gt;The \&quot;title\&quot; property is OPTIONAL.&lt;/para&gt;  &lt;para&gt; &lt;/para&gt;  &lt;para&gt;Its value is a string and is intended for labelling the link with a              human-readable identifier (as defined by [RFC5988]).&lt;/para&gt;
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public LinkObject type(String type) {
    this.type = type;
    return this;
  }

  /**
   * &lt;para&gt;The \&quot;type\&quot; property is OPTIONAL.&lt;/para&gt;  &lt;para&gt; &lt;/para&gt;  &lt;para&gt;Its value is a string used as a hint to indicate the media type              expected when dereferencing the target resource.&lt;/para&gt;
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkObject linkObject = (LinkObject) o;
    return Objects.equals(this.deprecation, linkObject.deprecation) &&
        Objects.equals(this.href, linkObject.href) &&
        Objects.equals(this.hreflang, linkObject.hreflang) &&
        Objects.equals(this.name, linkObject.name) &&
        Objects.equals(this.profile, linkObject.profile) &&
        Objects.equals(this.templated, linkObject.templated) &&
        Objects.equals(this.title, linkObject.title) &&
        Objects.equals(this.type, linkObject.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecation, href, hreflang, name, profile, templated, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkObject {\n");
    sb.append("    deprecation: ").append(toIndentedString(deprecation)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    hreflang: ").append(toIndentedString(hreflang)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    templated: ").append(toIndentedString(templated)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecation");
    openapiFields.add("href");
    openapiFields.add("hreflang");
    openapiFields.add("name");
    openapiFields.add("profile");
    openapiFields.add("templated");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("href");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkObject is not found in the empty JSON string", LinkObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LinkObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deprecation") != null && !jsonObj.get("deprecation").isJsonNull()) && !jsonObj.get("deprecation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deprecation").toString()));
      }
      if (!jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("hreflang") != null && !jsonObj.get("hreflang").isJsonNull()) && !jsonObj.get("hreflang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hreflang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hreflang").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) && !jsonObj.get("profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkObject.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkObject>() {
           @Override
           public void write(JsonWriter out, LinkObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkObject
   * @throws IOException if the JSON string is invalid with respect to LinkObject
   */
  public static LinkObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkObject.class);
  }

  /**
   * Convert an instance of LinkObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

