/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BookingListRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BookingListRequest {
  public static final String SERIALIZED_NAME_BLOCK_CODE = "blockCode";
  @SerializedName(SERIALIZED_NAME_BLOCK_CODE)
  private String blockCode;

  public static final String SERIALIZED_NAME_CANCELLATION_ID = "cancellationId";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_ID)
  private String cancellationId;

  public static final String SERIALIZED_NAME_CHANNEL_CODES = "channelCodes";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODES)
  private List<String> channelCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPANY_EMAIL = "companyEmail";
  @SerializedName(SERIALIZED_NAME_COMPANY_EMAIL)
  private String companyEmail;

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customerEmail";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_NAME = "customerName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NAME)
  private String customerName;

  /**
   * Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range.
   */
  @JsonAdapter(DateFilterEnum.Adapter.class)
  public enum DateFilterEnum {
    ARRIVAL_DATE("ArrivalDate"),
    
    DEPARTURE_DATE("DepartureDate"),
    
    STAY_DATE("StayDate"),
    
    CREATION_DATE("CreationDate"),
    
    MODIFICATION_DATE("ModificationDate");

    private String value;

    DateFilterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateFilterEnum fromValue(String value) {
      for (DateFilterEnum b : DateFilterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DateFilterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateFilterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateFilterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DateFilterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DateFilterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATE_FILTER = "dateFilter";
  @SerializedName(SERIALIZED_NAME_DATE_FILTER)
  private DateFilterEnum dateFilter;

  /**
   * To be able to request reservations without personal data based on GDPR.
   */
  @JsonAdapter(ExcludeEnum.Adapter.class)
  public enum ExcludeEnum {
    CUSTOMERS("Customers");

    private String value;

    ExcludeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludeEnum fromValue(String value) {
      for (ExcludeEnum b : ExcludeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDE = "exclude";
  @SerializedName(SERIALIZED_NAME_EXCLUDE)
  private ExcludeEnum exclude;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private OffsetDateTime from;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotelId";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private Integer hotelId;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKET_CODES = "marketCodes";
  @SerializedName(SERIALIZED_NAME_MARKET_CODES)
  private List<String> marketCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATE_PLAN_CODES = "ratePlanCodes";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN_CODES)
  private List<String> ratePlanCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESERVATION_NUMBER = "reservationNumber";
  @SerializedName(SERIALIZED_NAME_RESERVATION_NUMBER)
  private Integer reservationNumber;

  /**
   * Gets or Sets reservationStatuses
   */
  @JsonAdapter(ReservationStatusesEnum.Adapter.class)
  public enum ReservationStatusesEnum {
    TENTATIVE("Tentative"),
    
    WAITLISTED("Waitlisted"),
    
    ON_REQUEST("OnRequest"),
    
    NON_GUARANTEED("NonGuaranteed"),
    
    GUARANTEED("Guaranteed"),
    
    IN_HOUSE("InHouse"),
    
    CHECKED_OUT("CheckedOut"),
    
    NO_SHOW("NoShow"),
    
    DENIED("Denied"),
    
    CANCELLED("Cancelled"),
    
    RELEASED("Released"),
    
    WALKED("Walked"),
    
    EXPIRED("Expired"),
    
    WALK_IN("WalkIn"),
    
    REGISTERED("Registered");

    private String value;

    ReservationStatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReservationStatusesEnum fromValue(String value) {
      for (ReservationStatusesEnum b : ReservationStatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReservationStatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReservationStatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReservationStatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReservationStatusesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReservationStatusesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESERVATION_STATUSES = "reservationStatuses";
  @SerializedName(SERIALIZED_NAME_RESERVATION_STATUSES)
  private List<ReservationStatusesEnum> reservationStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_NUMBER = "roomNumber";
  @SerializedName(SERIALIZED_NAME_ROOM_NUMBER)
  private String roomNumber;

  public static final String SERIALIZED_NAME_ROOM_TYPES = "roomTypes";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private List<String> roomTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUB_CHANNEL_CODES = "subChannelCodes";
  @SerializedName(SERIALIZED_NAME_SUB_CHANNEL_CODES)
  private List<String> subChannelCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private OffsetDateTime to;

  public BookingListRequest() {
  }

  public BookingListRequest blockCode(String blockCode) {
    this.blockCode = blockCode;
    return this;
  }

  /**
   * Return all bookings where the block code matches the specified value.
   * @return blockCode
   */
  @javax.annotation.Nullable
  public String getBlockCode() {
    return blockCode;
  }

  public void setBlockCode(String blockCode) {
    this.blockCode = blockCode;
  }


  public BookingListRequest cancellationId(String cancellationId) {
    this.cancellationId = cancellationId;
    return this;
  }

  /**
   * Return bookings for this cancellation id.
   * @return cancellationId
   */
  @javax.annotation.Nullable
  public String getCancellationId() {
    return cancellationId;
  }

  public void setCancellationId(String cancellationId) {
    this.cancellationId = cancellationId;
  }


  public BookingListRequest channelCodes(List<String> channelCodes) {
    this.channelCodes = channelCodes;
    return this;
  }

  public BookingListRequest addChannelCodesItem(String channelCodesItem) {
    if (this.channelCodes == null) {
      this.channelCodes = new ArrayList<>();
    }
    this.channelCodes.add(channelCodesItem);
    return this;
  }

  /**
   * Return all bookings where the channel code is one of the specified values.
   * @return channelCodes
   */
  @javax.annotation.Nullable
  public List<String> getChannelCodes() {
    return channelCodes;
  }

  public void setChannelCodes(List<String> channelCodes) {
    this.channelCodes = channelCodes;
  }


  public BookingListRequest companyEmail(String companyEmail) {
    this.companyEmail = companyEmail;
    return this;
  }

  /**
   * Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
   * @return companyEmail
   */
  @javax.annotation.Nullable
  public String getCompanyEmail() {
    return companyEmail;
  }

  public void setCompanyEmail(String companyEmail) {
    this.companyEmail = companyEmail;
  }


  public BookingListRequest companyId(String companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * Return all bookings the id of the company or travel agent profile matches the specified value.
   * @return companyId
   */
  @javax.annotation.Nullable
  public String getCompanyId() {
    return companyId;
  }

  public void setCompanyId(String companyId) {
    this.companyId = companyId;
  }


  public BookingListRequest companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public BookingListRequest customerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
    return this;
  }

  /**
   * Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
   * @return customerEmail
   */
  @javax.annotation.Nullable
  public String getCustomerEmail() {
    return customerEmail;
  }

  public void setCustomerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
  }


  public BookingListRequest customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Return all bookings the id of one of the guests or the contact matches the specified value.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public BookingListRequest customerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  /**
   * Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
   * @return customerName
   */
  @javax.annotation.Nullable
  public String getCustomerName() {
    return customerName;
  }

  public void setCustomerName(String customerName) {
    this.customerName = customerName;
  }


  public BookingListRequest dateFilter(DateFilterEnum dateFilter) {
    this.dateFilter = dateFilter;
    return this;
  }

  /**
   * Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range.
   * @return dateFilter
   */
  @javax.annotation.Nullable
  public DateFilterEnum getDateFilter() {
    return dateFilter;
  }

  public void setDateFilter(DateFilterEnum dateFilter) {
    this.dateFilter = dateFilter;
  }


  public BookingListRequest exclude(ExcludeEnum exclude) {
    this.exclude = exclude;
    return this;
  }

  /**
   * To be able to request reservations without personal data based on GDPR.
   * @return exclude
   */
  @javax.annotation.Nullable
  public ExcludeEnum getExclude() {
    return exclude;
  }

  public void setExclude(ExcludeEnum exclude) {
    this.exclude = exclude;
  }


  public BookingListRequest externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Return all bookings exactly matching the specified external id. This filter is case sensitive.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public BookingListRequest from(OffsetDateTime from) {
    this.from = from;
    return this;
  }

  /**
   * Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later.
   * @return from
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFrom() {
    return from;
  }

  public void setFrom(OffsetDateTime from) {
    this.from = from;
  }


  public BookingListRequest hotelId(Integer hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * Only return bookings for this specific hotel.
   * @return hotelId
   */
  @javax.annotation.Nullable
  public Integer getHotelId() {
    return hotelId;
  }

  public void setHotelId(Integer hotelId) {
    this.hotelId = hotelId;
  }


  public BookingListRequest labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public BookingListRequest addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Return all reservations with at least one of the specified labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public BookingListRequest marketCodes(List<String> marketCodes) {
    this.marketCodes = marketCodes;
    return this;
  }

  public BookingListRequest addMarketCodesItem(String marketCodesItem) {
    if (this.marketCodes == null) {
      this.marketCodes = new ArrayList<>();
    }
    this.marketCodes.add(marketCodesItem);
    return this;
  }

  /**
   * Return all bookings where the market code is one of the specified values.
   * @return marketCodes
   */
  @javax.annotation.Nullable
  public List<String> getMarketCodes() {
    return marketCodes;
  }

  public void setMarketCodes(List<String> marketCodes) {
    this.marketCodes = marketCodes;
  }


  public BookingListRequest ratePlanCodes(List<String> ratePlanCodes) {
    this.ratePlanCodes = ratePlanCodes;
    return this;
  }

  public BookingListRequest addRatePlanCodesItem(String ratePlanCodesItem) {
    if (this.ratePlanCodes == null) {
      this.ratePlanCodes = new ArrayList<>();
    }
    this.ratePlanCodes.add(ratePlanCodesItem);
    return this;
  }

  /**
   * Return all bookings where the rate plan code is one of the specified values.
   * @return ratePlanCodes
   */
  @javax.annotation.Nullable
  public List<String> getRatePlanCodes() {
    return ratePlanCodes;
  }

  public void setRatePlanCodes(List<String> ratePlanCodes) {
    this.ratePlanCodes = ratePlanCodes;
  }


  public BookingListRequest reservationNumber(Integer reservationNumber) {
    this.reservationNumber = reservationNumber;
    return this;
  }

  /**
   * Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels.
   * @return reservationNumber
   */
  @javax.annotation.Nullable
  public Integer getReservationNumber() {
    return reservationNumber;
  }

  public void setReservationNumber(Integer reservationNumber) {
    this.reservationNumber = reservationNumber;
  }


  public BookingListRequest reservationStatuses(List<ReservationStatusesEnum> reservationStatuses) {
    this.reservationStatuses = reservationStatuses;
    return this;
  }

  public BookingListRequest addReservationStatusesItem(ReservationStatusesEnum reservationStatusesItem) {
    if (this.reservationStatuses == null) {
      this.reservationStatuses = new ArrayList<>();
    }
    this.reservationStatuses.add(reservationStatusesItem);
    return this;
  }

  /**
   * Return all bookings where the reservation status is one of the specified values.
   * @return reservationStatuses
   */
  @javax.annotation.Nullable
  public List<ReservationStatusesEnum> getReservationStatuses() {
    return reservationStatuses;
  }

  public void setReservationStatuses(List<ReservationStatusesEnum> reservationStatuses) {
    this.reservationStatuses = reservationStatuses;
  }


  public BookingListRequest roomNumber(String roomNumber) {
    this.roomNumber = roomNumber;
    return this;
  }

  /**
   * Return all bookings having the specified room number assigned.
   * @return roomNumber
   */
  @javax.annotation.Nullable
  public String getRoomNumber() {
    return roomNumber;
  }

  public void setRoomNumber(String roomNumber) {
    this.roomNumber = roomNumber;
  }


  public BookingListRequest roomTypes(List<String> roomTypes) {
    this.roomTypes = roomTypes;
    return this;
  }

  public BookingListRequest addRoomTypesItem(String roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new ArrayList<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

  /**
   * Return all bookings where the room type is one of the specified values.
   * @return roomTypes
   */
  @javax.annotation.Nullable
  public List<String> getRoomTypes() {
    return roomTypes;
  }

  public void setRoomTypes(List<String> roomTypes) {
    this.roomTypes = roomTypes;
  }


  public BookingListRequest subChannelCodes(List<String> subChannelCodes) {
    this.subChannelCodes = subChannelCodes;
    return this;
  }

  public BookingListRequest addSubChannelCodesItem(String subChannelCodesItem) {
    if (this.subChannelCodes == null) {
      this.subChannelCodes = new ArrayList<>();
    }
    this.subChannelCodes.add(subChannelCodesItem);
    return this;
  }

  /**
   * Return all bookings where the subchannel code is one of the specified values.
   * @return subChannelCodes
   */
  @javax.annotation.Nullable
  public List<String> getSubChannelCodes() {
    return subChannelCodes;
  }

  public void setSubChannelCodes(List<String> subChannelCodes) {
    this.subChannelCodes = subChannelCodes;
  }


  public BookingListRequest to(OffsetDateTime to) {
    this.to = to;
    return this;
  }

  /**
   * End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier.
   * @return to
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTo() {
    return to;
  }

  public void setTo(OffsetDateTime to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookingListRequest bookingListRequest = (BookingListRequest) o;
    return Objects.equals(this.blockCode, bookingListRequest.blockCode) &&
        Objects.equals(this.cancellationId, bookingListRequest.cancellationId) &&
        Objects.equals(this.channelCodes, bookingListRequest.channelCodes) &&
        Objects.equals(this.companyEmail, bookingListRequest.companyEmail) &&
        Objects.equals(this.companyId, bookingListRequest.companyId) &&
        Objects.equals(this.companyName, bookingListRequest.companyName) &&
        Objects.equals(this.customerEmail, bookingListRequest.customerEmail) &&
        Objects.equals(this.customerId, bookingListRequest.customerId) &&
        Objects.equals(this.customerName, bookingListRequest.customerName) &&
        Objects.equals(this.dateFilter, bookingListRequest.dateFilter) &&
        Objects.equals(this.exclude, bookingListRequest.exclude) &&
        Objects.equals(this.externalId, bookingListRequest.externalId) &&
        Objects.equals(this.from, bookingListRequest.from) &&
        Objects.equals(this.hotelId, bookingListRequest.hotelId) &&
        Objects.equals(this.labels, bookingListRequest.labels) &&
        Objects.equals(this.marketCodes, bookingListRequest.marketCodes) &&
        Objects.equals(this.ratePlanCodes, bookingListRequest.ratePlanCodes) &&
        Objects.equals(this.reservationNumber, bookingListRequest.reservationNumber) &&
        Objects.equals(this.reservationStatuses, bookingListRequest.reservationStatuses) &&
        Objects.equals(this.roomNumber, bookingListRequest.roomNumber) &&
        Objects.equals(this.roomTypes, bookingListRequest.roomTypes) &&
        Objects.equals(this.subChannelCodes, bookingListRequest.subChannelCodes) &&
        Objects.equals(this.to, bookingListRequest.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockCode, cancellationId, channelCodes, companyEmail, companyId, companyName, customerEmail, customerId, customerName, dateFilter, exclude, externalId, from, hotelId, labels, marketCodes, ratePlanCodes, reservationNumber, reservationStatuses, roomNumber, roomTypes, subChannelCodes, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookingListRequest {\n");
    sb.append("    blockCode: ").append(toIndentedString(blockCode)).append("\n");
    sb.append("    cancellationId: ").append(toIndentedString(cancellationId)).append("\n");
    sb.append("    channelCodes: ").append(toIndentedString(channelCodes)).append("\n");
    sb.append("    companyEmail: ").append(toIndentedString(companyEmail)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    dateFilter: ").append(toIndentedString(dateFilter)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    marketCodes: ").append(toIndentedString(marketCodes)).append("\n");
    sb.append("    ratePlanCodes: ").append(toIndentedString(ratePlanCodes)).append("\n");
    sb.append("    reservationNumber: ").append(toIndentedString(reservationNumber)).append("\n");
    sb.append("    reservationStatuses: ").append(toIndentedString(reservationStatuses)).append("\n");
    sb.append("    roomNumber: ").append(toIndentedString(roomNumber)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("    subChannelCodes: ").append(toIndentedString(subChannelCodes)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockCode");
    openapiFields.add("cancellationId");
    openapiFields.add("channelCodes");
    openapiFields.add("companyEmail");
    openapiFields.add("companyId");
    openapiFields.add("companyName");
    openapiFields.add("customerEmail");
    openapiFields.add("customerId");
    openapiFields.add("customerName");
    openapiFields.add("dateFilter");
    openapiFields.add("exclude");
    openapiFields.add("externalId");
    openapiFields.add("from");
    openapiFields.add("hotelId");
    openapiFields.add("labels");
    openapiFields.add("marketCodes");
    openapiFields.add("ratePlanCodes");
    openapiFields.add("reservationNumber");
    openapiFields.add("reservationStatuses");
    openapiFields.add("roomNumber");
    openapiFields.add("roomTypes");
    openapiFields.add("subChannelCodes");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BookingListRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BookingListRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookingListRequest is not found in the empty JSON string", BookingListRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BookingListRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookingListRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blockCode") != null && !jsonObj.get("blockCode").isJsonNull()) && !jsonObj.get("blockCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockCode").toString()));
      }
      if ((jsonObj.get("cancellationId") != null && !jsonObj.get("cancellationId").isJsonNull()) && !jsonObj.get("cancellationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("channelCodes") != null && !jsonObj.get("channelCodes").isJsonNull() && !jsonObj.get("channelCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelCodes` to be an array in the JSON string but got `%s`", jsonObj.get("channelCodes").toString()));
      }
      if ((jsonObj.get("companyEmail") != null && !jsonObj.get("companyEmail").isJsonNull()) && !jsonObj.get("companyEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyEmail").toString()));
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("customerEmail") != null && !jsonObj.get("customerEmail").isJsonNull()) && !jsonObj.get("customerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerEmail").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("customerName") != null && !jsonObj.get("customerName").isJsonNull()) && !jsonObj.get("customerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerName").toString()));
      }
      if ((jsonObj.get("dateFilter") != null && !jsonObj.get("dateFilter").isJsonNull()) && !jsonObj.get("dateFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFilter").toString()));
      }
      // validate the optional field `dateFilter`
      if (jsonObj.get("dateFilter") != null && !jsonObj.get("dateFilter").isJsonNull()) {
        DateFilterEnum.validateJsonElement(jsonObj.get("dateFilter"));
      }
      if ((jsonObj.get("exclude") != null && !jsonObj.get("exclude").isJsonNull()) && !jsonObj.get("exclude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclude").toString()));
      }
      // validate the optional field `exclude`
      if (jsonObj.get("exclude") != null && !jsonObj.get("exclude").isJsonNull()) {
        ExcludeEnum.validateJsonElement(jsonObj.get("exclude"));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketCodes") != null && !jsonObj.get("marketCodes").isJsonNull() && !jsonObj.get("marketCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketCodes` to be an array in the JSON string but got `%s`", jsonObj.get("marketCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ratePlanCodes") != null && !jsonObj.get("ratePlanCodes").isJsonNull() && !jsonObj.get("ratePlanCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratePlanCodes` to be an array in the JSON string but got `%s`", jsonObj.get("ratePlanCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reservationStatuses") != null && !jsonObj.get("reservationStatuses").isJsonNull() && !jsonObj.get("reservationStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("reservationStatuses").toString()));
      }
      if ((jsonObj.get("roomNumber") != null && !jsonObj.get("roomNumber").isJsonNull()) && !jsonObj.get("roomNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roomTypes") != null && !jsonObj.get("roomTypes").isJsonNull() && !jsonObj.get("roomTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypes` to be an array in the JSON string but got `%s`", jsonObj.get("roomTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subChannelCodes") != null && !jsonObj.get("subChannelCodes").isJsonNull() && !jsonObj.get("subChannelCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subChannelCodes` to be an array in the JSON string but got `%s`", jsonObj.get("subChannelCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookingListRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookingListRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookingListRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookingListRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BookingListRequest>() {
           @Override
           public void write(JsonWriter out, BookingListRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookingListRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BookingListRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BookingListRequest
   * @throws IOException if the JSON string is invalid with respect to BookingListRequest
   */
  public static BookingListRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookingListRequest.class);
  }

  /**
   * Convert an instance of BookingListRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

