/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AvailabilityResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AvailabilityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AvailabilityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AvailabilityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for availabilityGet
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotel id to request the availability for. (required)
     * @param from Defines the first business day you would like to get availability numbers for. (required)
     * @param to Defines the last business day you would like to get availability numbers for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param expand You can expand the room types breakdown per business day for the availibility numbers if need be. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of availabilities per business day. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call availabilityGetCall(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/booking/v0/availability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hotelId", hotelId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inlinecount", inlinecount));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call availabilityGetValidateBeforeCall(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling availabilityGet(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling availabilityGet(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling availabilityGet(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling availabilityGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling availabilityGet(Async)");
        }

        return availabilityGetCall(appId, appKey, hotelId, from, to, expand, skip, top, inlinecount, _callback);

    }

    /**
     * Gets the availability and occupancy for a specific hotel and timespan.
     * Read past occupancy and future availability for a specific hotel. You can also request the breakdown per room type.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotel id to request the availability for. (required)
     * @param from Defines the first business day you would like to get availability numbers for. (required)
     * @param to Defines the last business day you would like to get availability numbers for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param expand You can expand the room types breakdown per business day for the availibility numbers if need be. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return AvailabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of availabilities per business day. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
     </table>
     */
    public AvailabilityResponse availabilityGet(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount) throws ApiException {
        ApiResponse<AvailabilityResponse> localVarResp = availabilityGetWithHttpInfo(appId, appKey, hotelId, from, to, expand, skip, top, inlinecount);
        return localVarResp.getData();
    }

    /**
     * Gets the availability and occupancy for a specific hotel and timespan.
     * Read past occupancy and future availability for a specific hotel. You can also request the breakdown per room type.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotel id to request the availability for. (required)
     * @param from Defines the first business day you would like to get availability numbers for. (required)
     * @param to Defines the last business day you would like to get availability numbers for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param expand You can expand the room types breakdown per business day for the availibility numbers if need be. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return ApiResponse&lt;AvailabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of availabilities per business day. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AvailabilityResponse> availabilityGetWithHttpInfo(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount) throws ApiException {
        okhttp3.Call localVarCall = availabilityGetValidateBeforeCall(appId, appKey, hotelId, from, to, expand, skip, top, inlinecount, null);
        Type localVarReturnType = new TypeToken<AvailabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the availability and occupancy for a specific hotel and timespan. (asynchronously)
     * Read past occupancy and future availability for a specific hotel. You can also request the breakdown per room type.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotel id to request the availability for. (required)
     * @param from Defines the first business day you would like to get availability numbers for. (required)
     * @param to Defines the last business day you would like to get availability numbers for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param expand You can expand the room types breakdown per business day for the availibility numbers if need be. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of availabilities per business day. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call availabilityGetAsync(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount, final ApiCallback<AvailabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = availabilityGetValidateBeforeCall(appId, appKey, hotelId, from, to, expand, skip, top, inlinecount, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
