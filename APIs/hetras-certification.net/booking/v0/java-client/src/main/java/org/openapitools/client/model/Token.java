/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Token
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Token {
  public static final String SERIALIZED_NAME_AUTHORIZATION_EXPIRY_DATE = "authorization_expiry_date";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_EXPIRY_DATE)
  private OffsetDateTime authorizationExpiryDate;

  public static final String SERIALIZED_NAME_AUTHORIZATION_REFERENCE = "authorization_reference";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_REFERENCE)
  private String authorizationReference;

  /**
   * The authorization status you got back from the payment service provider
   */
  @JsonAdapter(AuthorizationStatusEnum.Adapter.class)
  public enum AuthorizationStatusEnum {
    AUTHORIZED("Authorized"),
    
    REFUSED("Refused"),
    
    ERROR("Error"),
    
    CANCELED("Canceled"),
    
    CONSUMED("Consumed"),
    
    AUTHORIZED_WITH_ZERO_AMOUNT("AuthorizedWithZeroAmount");

    private String value;

    AuthorizationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationStatusEnum fromValue(String value) {
      for (AuthorizationStatusEnum b : AuthorizationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_STATUS = "authorization_status";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_STATUS)
  private AuthorizationStatusEnum authorizationStatus;

  public static final String SERIALIZED_NAME_AUTHORIZED_AMOUNT = "authorized_amount";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_AMOUNT)
  private Double authorizedAmount;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE = "merchant_reference";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE)
  private String merchantReference;

  public static final String SERIALIZED_NAME_SHOPPER_EMAIL = "shopper_email";
  @SerializedName(SERIALIZED_NAME_SHOPPER_EMAIL)
  private String shopperEmail;

  public static final String SERIALIZED_NAME_SHOPPER_REFERENCE = "shopper_reference";
  @SerializedName(SERIALIZED_NAME_SHOPPER_REFERENCE)
  private String shopperReference;

  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public Token() {
  }

  public Token authorizationExpiryDate(OffsetDateTime authorizationExpiryDate) {
    this.authorizationExpiryDate = authorizationExpiryDate;
    return this;
  }

  /**
   * The authorization expiry date you got back from the payment service provider
   * @return authorizationExpiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAuthorizationExpiryDate() {
    return authorizationExpiryDate;
  }

  public void setAuthorizationExpiryDate(OffsetDateTime authorizationExpiryDate) {
    this.authorizationExpiryDate = authorizationExpiryDate;
  }


  public Token authorizationReference(String authorizationReference) {
    this.authorizationReference = authorizationReference;
    return this;
  }

  /**
   * The authorization reference. This value is specific for different payment service providers. There will be              a page on the developer portal explaining the pattern on how to fill this value for the payment service              provider hetras is integrated with
   * @return authorizationReference
   */
  @javax.annotation.Nullable
  public String getAuthorizationReference() {
    return authorizationReference;
  }

  public void setAuthorizationReference(String authorizationReference) {
    this.authorizationReference = authorizationReference;
  }


  public Token authorizationStatus(AuthorizationStatusEnum authorizationStatus) {
    this.authorizationStatus = authorizationStatus;
    return this;
  }

  /**
   * The authorization status you got back from the payment service provider
   * @return authorizationStatus
   */
  @javax.annotation.Nullable
  public AuthorizationStatusEnum getAuthorizationStatus() {
    return authorizationStatus;
  }

  public void setAuthorizationStatus(AuthorizationStatusEnum authorizationStatus) {
    this.authorizationStatus = authorizationStatus;
  }


  public Token authorizedAmount(Double authorizedAmount) {
    this.authorizedAmount = authorizedAmount;
    return this;
  }

  /**
   * The authorized amount
   * @return authorizedAmount
   */
  @javax.annotation.Nullable
  public Double getAuthorizedAmount() {
    return authorizedAmount;
  }

  public void setAuthorizedAmount(Double authorizedAmount) {
    this.authorizedAmount = authorizedAmount;
  }


  public Token merchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
    return this;
  }

  /**
   * The merchant reference you used when requesting the token from the payment service provider
   * @return merchantReference
   */
  @javax.annotation.Nullable
  public String getMerchantReference() {
    return merchantReference;
  }

  public void setMerchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
  }


  public Token shopperEmail(String shopperEmail) {
    this.shopperEmail = shopperEmail;
    return this;
  }

  /**
   * The shopper email you used when requesting the token from the payment service provider
   * @return shopperEmail
   */
  @javax.annotation.Nullable
  public String getShopperEmail() {
    return shopperEmail;
  }

  public void setShopperEmail(String shopperEmail) {
    this.shopperEmail = shopperEmail;
  }


  public Token shopperReference(String shopperReference) {
    this.shopperReference = shopperReference;
    return this;
  }

  /**
   * The shopper reference you used when requesting the token from the payment service provider. It can              be the same as the merchant reference
   * @return shopperReference
   */
  @javax.annotation.Nullable
  public String getShopperReference() {
    return shopperReference;
  }

  public void setShopperReference(String shopperReference) {
    this.shopperReference = shopperReference;
  }


  public Token tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

  /**
   * The token id you get from the payment service provider
   * @return tokenId
   */
  @javax.annotation.Nullable
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Token token = (Token) o;
    return Objects.equals(this.authorizationExpiryDate, token.authorizationExpiryDate) &&
        Objects.equals(this.authorizationReference, token.authorizationReference) &&
        Objects.equals(this.authorizationStatus, token.authorizationStatus) &&
        Objects.equals(this.authorizedAmount, token.authorizedAmount) &&
        Objects.equals(this.merchantReference, token.merchantReference) &&
        Objects.equals(this.shopperEmail, token.shopperEmail) &&
        Objects.equals(this.shopperReference, token.shopperReference) &&
        Objects.equals(this.tokenId, token.tokenId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationExpiryDate, authorizationReference, authorizationStatus, authorizedAmount, merchantReference, shopperEmail, shopperReference, tokenId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Token {\n");
    sb.append("    authorizationExpiryDate: ").append(toIndentedString(authorizationExpiryDate)).append("\n");
    sb.append("    authorizationReference: ").append(toIndentedString(authorizationReference)).append("\n");
    sb.append("    authorizationStatus: ").append(toIndentedString(authorizationStatus)).append("\n");
    sb.append("    authorizedAmount: ").append(toIndentedString(authorizedAmount)).append("\n");
    sb.append("    merchantReference: ").append(toIndentedString(merchantReference)).append("\n");
    sb.append("    shopperEmail: ").append(toIndentedString(shopperEmail)).append("\n");
    sb.append("    shopperReference: ").append(toIndentedString(shopperReference)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorization_expiry_date");
    openapiFields.add("authorization_reference");
    openapiFields.add("authorization_status");
    openapiFields.add("authorized_amount");
    openapiFields.add("merchant_reference");
    openapiFields.add("shopper_email");
    openapiFields.add("shopper_reference");
    openapiFields.add("token_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Token
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Token.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Token is not found in the empty JSON string", Token.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Token.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Token` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorization_reference") != null && !jsonObj.get("authorization_reference").isJsonNull()) && !jsonObj.get("authorization_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_reference").toString()));
      }
      if ((jsonObj.get("authorization_status") != null && !jsonObj.get("authorization_status").isJsonNull()) && !jsonObj.get("authorization_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_status").toString()));
      }
      // validate the optional field `authorization_status`
      if (jsonObj.get("authorization_status") != null && !jsonObj.get("authorization_status").isJsonNull()) {
        AuthorizationStatusEnum.validateJsonElement(jsonObj.get("authorization_status"));
      }
      if ((jsonObj.get("merchant_reference") != null && !jsonObj.get("merchant_reference").isJsonNull()) && !jsonObj.get("merchant_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_reference").toString()));
      }
      if ((jsonObj.get("shopper_email") != null && !jsonObj.get("shopper_email").isJsonNull()) && !jsonObj.get("shopper_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopper_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopper_email").toString()));
      }
      if ((jsonObj.get("shopper_reference") != null && !jsonObj.get("shopper_reference").isJsonNull()) && !jsonObj.get("shopper_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopper_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopper_reference").toString()));
      }
      if ((jsonObj.get("token_id") != null && !jsonObj.get("token_id").isJsonNull()) && !jsonObj.get("token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Token.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Token' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Token> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Token.class));

       return (TypeAdapter<T>) new TypeAdapter<Token>() {
           @Override
           public void write(JsonWriter out, Token value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Token read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Token given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Token
   * @throws IOException if the JSON string is invalid with respect to Token
   */
  public static Token fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Token.class);
  }

  /**
   * Convert an instance of Token to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

