/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddonOfferBreakdown;
import org.openapitools.client.model.AddonOfferRate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddonOffer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddonOffer {
  public static final String SERIALIZED_NAME_BREAKDOWN = "breakdown";
  @SerializedName(SERIALIZED_NAME_BREAKDOWN)
  private List<AddonOfferBreakdown> breakdown = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The price for an addon service can be per person or per room. All the prices in an offer are already calculated              for all rooms and number of persons per room. Based on this attribute you will be able to know how to calculate              the price per person and room, per room or per person depending on your needs.
   */
  @JsonAdapter(RateModeEnum.Adapter.class)
  public enum RateModeEnum {
    PER_ROOM("PerRoom"),
    
    PER_PERSON("PerPerson");

    private String value;

    RateModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RateModeEnum fromValue(String value) {
      for (RateModeEnum b : RateModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RateModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RateModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RateModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RateModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RateModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RATE_MODE = "rate_mode";
  @SerializedName(SERIALIZED_NAME_RATE_MODE)
  private RateModeEnum rateMode;

  public static final String SERIALIZED_NAME_TOTAL_STAY = "total_stay";
  @SerializedName(SERIALIZED_NAME_TOTAL_STAY)
  private AddonOfferRate totalStay;

  public AddonOffer() {
  }

  public AddonOffer breakdown(List<AddonOfferBreakdown> breakdown) {
    this.breakdown = breakdown;
    return this;
  }

  public AddonOffer addBreakdownItem(AddonOfferBreakdown breakdownItem) {
    if (this.breakdown == null) {
      this.breakdown = new ArrayList<>();
    }
    this.breakdown.add(breakdownItem);
    return this;
  }

  /**
   * In this collection you will get an entry with price information for every day the addon service will be charged              to the folio of the reservation if the addon service is booked.
   * @return breakdown
   */
  @javax.annotation.Nullable
  public List<AddonOfferBreakdown> getBreakdown() {
    return breakdown;
  }

  public void setBreakdown(List<AddonOfferBreakdown> breakdown) {
    this.breakdown = breakdown;
  }


  public AddonOffer code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The code of the addon service
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public AddonOffer description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the addon service
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AddonOffer frequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * The frequency this addon service will be charged to the reservation. This field is a string that can be displayed,              but is not supposed to be used for computation
   * @return frequency
   */
  @javax.annotation.Nullable
  public String getFrequency() {
    return frequency;
  }

  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }


  public AddonOffer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the addon service
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AddonOffer rateMode(RateModeEnum rateMode) {
    this.rateMode = rateMode;
    return this;
  }

  /**
   * The price for an addon service can be per person or per room. All the prices in an offer are already calculated              for all rooms and number of persons per room. Based on this attribute you will be able to know how to calculate              the price per person and room, per room or per person depending on your needs.
   * @return rateMode
   */
  @javax.annotation.Nullable
  public RateModeEnum getRateMode() {
    return rateMode;
  }

  public void setRateMode(RateModeEnum rateMode) {
    this.rateMode = rateMode;
  }


  public AddonOffer totalStay(AddonOfferRate totalStay) {
    this.totalStay = totalStay;
    return this;
  }

  /**
   * Get totalStay
   * @return totalStay
   */
  @javax.annotation.Nullable
  public AddonOfferRate getTotalStay() {
    return totalStay;
  }

  public void setTotalStay(AddonOfferRate totalStay) {
    this.totalStay = totalStay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddonOffer addonOffer = (AddonOffer) o;
    return Objects.equals(this.breakdown, addonOffer.breakdown) &&
        Objects.equals(this.code, addonOffer.code) &&
        Objects.equals(this.description, addonOffer.description) &&
        Objects.equals(this.frequency, addonOffer.frequency) &&
        Objects.equals(this.name, addonOffer.name) &&
        Objects.equals(this.rateMode, addonOffer.rateMode) &&
        Objects.equals(this.totalStay, addonOffer.totalStay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(breakdown, code, description, frequency, name, rateMode, totalStay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddonOffer {\n");
    sb.append("    breakdown: ").append(toIndentedString(breakdown)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rateMode: ").append(toIndentedString(rateMode)).append("\n");
    sb.append("    totalStay: ").append(toIndentedString(totalStay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("breakdown");
    openapiFields.add("code");
    openapiFields.add("description");
    openapiFields.add("frequency");
    openapiFields.add("name");
    openapiFields.add("rate_mode");
    openapiFields.add("total_stay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddonOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddonOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddonOffer is not found in the empty JSON string", AddonOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddonOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddonOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("breakdown") != null && !jsonObj.get("breakdown").isJsonNull()) {
        JsonArray jsonArraybreakdown = jsonObj.getAsJsonArray("breakdown");
        if (jsonArraybreakdown != null) {
          // ensure the json data is an array
          if (!jsonObj.get("breakdown").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `breakdown` to be an array in the JSON string but got `%s`", jsonObj.get("breakdown").toString()));
          }

          // validate the optional field `breakdown` (array)
          for (int i = 0; i < jsonArraybreakdown.size(); i++) {
            AddonOfferBreakdown.validateJsonElement(jsonArraybreakdown.get(i));
          };
        }
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rate_mode") != null && !jsonObj.get("rate_mode").isJsonNull()) && !jsonObj.get("rate_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate_mode").toString()));
      }
      // validate the optional field `rate_mode`
      if (jsonObj.get("rate_mode") != null && !jsonObj.get("rate_mode").isJsonNull()) {
        RateModeEnum.validateJsonElement(jsonObj.get("rate_mode"));
      }
      // validate the optional field `total_stay`
      if (jsonObj.get("total_stay") != null && !jsonObj.get("total_stay").isJsonNull()) {
        AddonOfferRate.validateJsonElement(jsonObj.get("total_stay"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddonOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddonOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddonOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddonOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<AddonOffer>() {
           @Override
           public void write(JsonWriter out, AddonOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddonOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddonOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddonOffer
   * @throws IOException if the JSON string is invalid with respect to AddonOffer
   */
  public static AddonOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddonOffer.class);
  }

  /**
   * Convert an instance of AddonOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

