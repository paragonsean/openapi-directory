/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RoomOfferDailyRate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoomOfferDailyRate {
  public static final String SERIALIZED_NAME_BUSINESS_DAY = "business_day";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DAY)
  private OffsetDateTime businessDay;

  public static final String SERIALIZED_NAME_EXCLUDED_TAX = "excluded_tax";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_TAX)
  private Double excludedTax;

  public static final String SERIALIZED_NAME_INCLUDED_TAX = "included_tax";
  @SerializedName(SERIALIZED_NAME_INCLUDED_TAX)
  private Double includedTax;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public RoomOfferDailyRate() {
  }

  public RoomOfferDailyRate businessDay(OffsetDateTime businessDay) {
    this.businessDay = businessDay;
    return this;
  }

  /**
   * The business day the prize for the daily rate and all included services will be posted to the folio of the reservation
   * @return businessDay
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBusinessDay() {
    return businessDay;
  }

  public void setBusinessDay(OffsetDateTime businessDay) {
    this.businessDay = businessDay;
  }


  public RoomOfferDailyRate excludedTax(Double excludedTax) {
    this.excludedTax = excludedTax;
    return this;
  }

  /**
   * The amount of taxes that are not included in the gross rate of the room offer and will be charged separately for              that business day. It is also calculated for all rooms and all persons per room
   * @return excludedTax
   */
  @javax.annotation.Nullable
  public Double getExcludedTax() {
    return excludedTax;
  }

  public void setExcludedTax(Double excludedTax) {
    this.excludedTax = excludedTax;
  }


  public RoomOfferDailyRate includedTax(Double includedTax) {
    this.includedTax = includedTax;
    return this;
  }

  /**
   * The amount of taxes already included in the gross rate of the room and all included services for this business day.              The prize is calculated for all rooms and all persons per room
   * @return includedTax
   */
  @javax.annotation.Nullable
  public Double getIncludedTax() {
    return includedTax;
  }

  public void setIncludedTax(Double includedTax) {
    this.includedTax = includedTax;
  }


  public RoomOfferDailyRate rate(Double rate) {
    this.rate = rate;
    return this;
  }

  /**
   * The gross rate for this day for the room and all included services. The prize is calculated for all rooms and all               persons per room
   * @return rate
   */
  @javax.annotation.Nullable
  public Double getRate() {
    return rate;
  }

  public void setRate(Double rate) {
    this.rate = rate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoomOfferDailyRate roomOfferDailyRate = (RoomOfferDailyRate) o;
    return Objects.equals(this.businessDay, roomOfferDailyRate.businessDay) &&
        Objects.equals(this.excludedTax, roomOfferDailyRate.excludedTax) &&
        Objects.equals(this.includedTax, roomOfferDailyRate.includedTax) &&
        Objects.equals(this.rate, roomOfferDailyRate.rate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessDay, excludedTax, includedTax, rate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoomOfferDailyRate {\n");
    sb.append("    businessDay: ").append(toIndentedString(businessDay)).append("\n");
    sb.append("    excludedTax: ").append(toIndentedString(excludedTax)).append("\n");
    sb.append("    includedTax: ").append(toIndentedString(includedTax)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("business_day");
    openapiFields.add("excluded_tax");
    openapiFields.add("included_tax");
    openapiFields.add("rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoomOfferDailyRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoomOfferDailyRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoomOfferDailyRate is not found in the empty JSON string", RoomOfferDailyRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoomOfferDailyRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoomOfferDailyRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoomOfferDailyRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoomOfferDailyRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoomOfferDailyRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoomOfferDailyRate.class));

       return (TypeAdapter<T>) new TypeAdapter<RoomOfferDailyRate>() {
           @Override
           public void write(JsonWriter out, RoomOfferDailyRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoomOfferDailyRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoomOfferDailyRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoomOfferDailyRate
   * @throws IOException if the JSON string is invalid with respect to RoomOfferDailyRate
   */
  public static RoomOfferDailyRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoomOfferDailyRate.class);
  }

  /**
   * Convert an instance of RoomOfferDailyRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

