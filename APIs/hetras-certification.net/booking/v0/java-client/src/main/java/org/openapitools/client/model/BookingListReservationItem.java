/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CompaniesInfo;
import org.openapitools.client.model.CustomersInfo;
import org.openapitools.client.model.HotelInfo;
import org.openapitools.client.model.LinkObject;
import org.openapitools.client.model.RatePlan;
import org.openapitools.client.model.RoomInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BookingListReservationItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BookingListReservationItem {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, LinkObject> links = new HashMap<>();

  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private Integer adults;

  public static final String SERIALIZED_NAME_ARRIVAL_DATE = "arrival_date";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE)
  private OffsetDateTime arrivalDate;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_BLOCK_CODE = "block_code";
  @SerializedName(SERIALIZED_NAME_BLOCK_CODE)
  private String blockCode;

  public static final String SERIALIZED_NAME_CANCELLATION_ID = "cancellation_id";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_ID)
  private String cancellationId;

  public static final String SERIALIZED_NAME_CHANNEL_CODE = "channel_code";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODE)
  private String channelCode;

  public static final String SERIALIZED_NAME_COMPANIES = "companies";
  @SerializedName(SERIALIZED_NAME_COMPANIES)
  private CompaniesInfo companies;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOMERS = "customers";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS)
  private CustomersInfo customers;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departure_date";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private OffsetDateTime departureDate;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_HOTEL = "hotel";
  @SerializedName(SERIALIZED_NAME_HOTEL)
  private HotelInfo hotel;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKET_CODE = "market_code";
  @SerializedName(SERIALIZED_NAME_MARKET_CODE)
  private String marketCode;

  public static final String SERIALIZED_NAME_RATE_PLAN = "rate_plan";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN)
  private RatePlan ratePlan;

  public static final String SERIALIZED_NAME_RESERVATION_NUMBER = "reservation_number";
  @SerializedName(SERIALIZED_NAME_RESERVATION_NUMBER)
  private Integer reservationNumber;

  /**
   * The current status of this reservation
   */
  @JsonAdapter(ReservationStatusEnum.Adapter.class)
  public enum ReservationStatusEnum {
    TENTATIVE("Tentative"),
    
    WAITLISTED("Waitlisted"),
    
    ON_REQUEST("OnRequest"),
    
    NON_GUARANTEED("NonGuaranteed"),
    
    GUARANTEED("Guaranteed"),
    
    IN_HOUSE("InHouse"),
    
    CHECKED_OUT("CheckedOut"),
    
    NO_SHOW("NoShow"),
    
    DENIED("Denied"),
    
    CANCELLED("Cancelled"),
    
    RELEASED("Released"),
    
    WALKED("Walked"),
    
    EXPIRED("Expired"),
    
    WALK_IN("WalkIn"),
    
    REGISTERED("Registered");

    private String value;

    ReservationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReservationStatusEnum fromValue(String value) {
      for (ReservationStatusEnum b : ReservationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReservationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReservationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReservationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReservationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReservationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESERVATION_STATUS = "reservation_status";
  @SerializedName(SERIALIZED_NAME_RESERVATION_STATUS)
  private ReservationStatusEnum reservationStatus;

  public static final String SERIALIZED_NAME_ROOM = "room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private RoomInfo room;

  public static final String SERIALIZED_NAME_ROOMS = "rooms";
  @SerializedName(SERIALIZED_NAME_ROOMS)
  private Integer rooms;

  public static final String SERIALIZED_NAME_SUBCHANNEL_CODE = "subchannel_code";
  @SerializedName(SERIALIZED_NAME_SUBCHANNEL_CODE)
  private String subchannelCode;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public BookingListReservationItem() {
  }

  public BookingListReservationItem links(Map<String, LinkObject> links) {
    this.links = links;
    return this;
  }

  public BookingListReservationItem putLinksItem(String key, LinkObject linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Collection of links to related resources
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, LinkObject> getLinks() {
    return links;
  }

  public void setLinks(Map<String, LinkObject> links) {
    this.links = links;
  }


  public BookingListReservationItem adults(Integer adults) {
    this.adults = adults;
    return this;
  }

  /**
   * The number of adults per room
   * @return adults
   */
  @javax.annotation.Nullable
  public Integer getAdults() {
    return adults;
  }

  public void setAdults(Integer adults) {
    this.adults = adults;
  }


  public BookingListReservationItem arrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
    return this;
  }

  /**
   * The arrival date of the guests
   * @return arrivalDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArrivalDate() {
    return arrivalDate;
  }

  public void setArrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
  }


  public BookingListReservationItem balance(Double balance) {
    this.balance = balance;
    return this;
  }

  /**
   * The balance for all folios of this reservartion. It is calculated by all already charged room and service rates plus manual charges               or charges from other systems like POS minus all payments. A negative balance indicates the reservation is overpaid, a positive balance               that the guest owes the hotel money
   * @return balance
   */
  @javax.annotation.Nullable
  public Double getBalance() {
    return balance;
  }

  public void setBalance(Double balance) {
    this.balance = balance;
  }


  public BookingListReservationItem blockCode(String blockCode) {
    this.blockCode = blockCode;
    return this;
  }

  /**
   * If this reservation is a pick-up from a block you will see the appropriate block code here
   * @return blockCode
   */
  @javax.annotation.Nullable
  public String getBlockCode() {
    return blockCode;
  }

  public void setBlockCode(String blockCode) {
    this.blockCode = blockCode;
  }


  public BookingListReservationItem cancellationId(String cancellationId) {
    this.cancellationId = cancellationId;
    return this;
  }

  /**
   * The cancellation id if the reservation has been cancelled
   * @return cancellationId
   */
  @javax.annotation.Nullable
  public String getCancellationId() {
    return cancellationId;
  }

  public void setCancellationId(String cancellationId) {
    this.cancellationId = cancellationId;
  }


  public BookingListReservationItem channelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  /**
   * The code of the channel that was used when the booking has been created. It is also known as source.               Possible values can be OTA, GDS or DIRECT, but it is configurable per hotel
   * @return channelCode
   */
  @javax.annotation.Nullable
  public String getChannelCode() {
    return channelCode;
  }

  public void setChannelCode(String channelCode) {
    this.channelCode = channelCode;
  }


  public BookingListReservationItem companies(CompaniesInfo companies) {
    this.companies = companies;
    return this;
  }

  /**
   * Get companies
   * @return companies
   */
  @javax.annotation.Nullable
  public CompaniesInfo getCompanies() {
    return companies;
  }

  public void setCompanies(CompaniesInfo companies) {
    this.companies = companies;
  }


  public BookingListReservationItem created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp the reservation was created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public BookingListReservationItem customers(CustomersInfo customers) {
    this.customers = customers;
    return this;
  }

  /**
   * Get customers
   * @return customers
   */
  @javax.annotation.Nullable
  public CustomersInfo getCustomers() {
    return customers;
  }

  public void setCustomers(CustomersInfo customers) {
    this.customers = customers;
  }


  public BookingListReservationItem departureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * The departure date of the guests
   * @return departureDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDepartureDate() {
    return departureDate;
  }

  public void setDepartureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
  }


  public BookingListReservationItem externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * The external id for this reservation is the unique identifier from the system that created the booking in hetras. It could be the id of an              OTA like Expedia or booking.com or one of the GDS systems like Amadeus or Galileo
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public BookingListReservationItem hotel(HotelInfo hotel) {
    this.hotel = hotel;
    return this;
  }

  /**
   * Get hotel
   * @return hotel
   */
  @javax.annotation.Nullable
  public HotelInfo getHotel() {
    return hotel;
  }

  public void setHotel(HotelInfo hotel) {
    this.hotel = hotel;
  }


  public BookingListReservationItem labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public BookingListReservationItem addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * The labels attached to this reservation.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public BookingListReservationItem marketCode(String marketCode) {
    this.marketCode = marketCode;
    return this;
  }

  /**
   * The code of the market segment the rate plan for this reservation is linked to
   * @return marketCode
   */
  @javax.annotation.Nullable
  public String getMarketCode() {
    return marketCode;
  }

  public void setMarketCode(String marketCode) {
    this.marketCode = marketCode;
  }


  public BookingListReservationItem ratePlan(RatePlan ratePlan) {
    this.ratePlan = ratePlan;
    return this;
  }

  /**
   * Get ratePlan
   * @return ratePlan
   */
  @javax.annotation.Nullable
  public RatePlan getRatePlan() {
    return ratePlan;
  }

  public void setRatePlan(RatePlan ratePlan) {
    this.ratePlan = ratePlan;
  }


  public BookingListReservationItem reservationNumber(Integer reservationNumber) {
    this.reservationNumber = reservationNumber;
    return this;
  }

  /**
   * The reservation number of the reservation
   * @return reservationNumber
   */
  @javax.annotation.Nullable
  public Integer getReservationNumber() {
    return reservationNumber;
  }

  public void setReservationNumber(Integer reservationNumber) {
    this.reservationNumber = reservationNumber;
  }


  public BookingListReservationItem reservationStatus(ReservationStatusEnum reservationStatus) {
    this.reservationStatus = reservationStatus;
    return this;
  }

  /**
   * The current status of this reservation
   * @return reservationStatus
   */
  @javax.annotation.Nullable
  public ReservationStatusEnum getReservationStatus() {
    return reservationStatus;
  }

  public void setReservationStatus(ReservationStatusEnum reservationStatus) {
    this.reservationStatus = reservationStatus;
  }


  public BookingListReservationItem room(RoomInfo room) {
    this.room = room;
    return this;
  }

  /**
   * Get room
   * @return room
   */
  @javax.annotation.Nullable
  public RoomInfo getRoom() {
    return room;
  }

  public void setRoom(RoomInfo room) {
    this.room = room;
  }


  public BookingListReservationItem rooms(Integer rooms) {
    this.rooms = rooms;
    return this;
  }

  /**
   * The number of rooms this reservation is valid for. After a multi-room booking is done there will be               one reservation in hetras for this booking for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests
   * @return rooms
   */
  @javax.annotation.Nullable
  public Integer getRooms() {
    return rooms;
  }

  public void setRooms(Integer rooms) {
    this.rooms = rooms;
  }


  public BookingListReservationItem subchannelCode(String subchannelCode) {
    this.subchannelCode = subchannelCode;
    return this;
  }

  /**
   * The code of the subchannel that was used when the booking has been created. Possible values can be               BOOKING, EXPEDIA or WALKIN, but it is configurable per hotel
   * @return subchannelCode
   */
  @javax.annotation.Nullable
  public String getSubchannelCode() {
    return subchannelCode;
  }

  public void setSubchannelCode(String subchannelCode) {
    this.subchannelCode = subchannelCode;
  }


  public BookingListReservationItem updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp of when the reservation was changed the last time
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookingListReservationItem bookingListReservationItem = (BookingListReservationItem) o;
    return Objects.equals(this.links, bookingListReservationItem.links) &&
        Objects.equals(this.adults, bookingListReservationItem.adults) &&
        Objects.equals(this.arrivalDate, bookingListReservationItem.arrivalDate) &&
        Objects.equals(this.balance, bookingListReservationItem.balance) &&
        Objects.equals(this.blockCode, bookingListReservationItem.blockCode) &&
        Objects.equals(this.cancellationId, bookingListReservationItem.cancellationId) &&
        Objects.equals(this.channelCode, bookingListReservationItem.channelCode) &&
        Objects.equals(this.companies, bookingListReservationItem.companies) &&
        Objects.equals(this.created, bookingListReservationItem.created) &&
        Objects.equals(this.customers, bookingListReservationItem.customers) &&
        Objects.equals(this.departureDate, bookingListReservationItem.departureDate) &&
        Objects.equals(this.externalId, bookingListReservationItem.externalId) &&
        Objects.equals(this.hotel, bookingListReservationItem.hotel) &&
        Objects.equals(this.labels, bookingListReservationItem.labels) &&
        Objects.equals(this.marketCode, bookingListReservationItem.marketCode) &&
        Objects.equals(this.ratePlan, bookingListReservationItem.ratePlan) &&
        Objects.equals(this.reservationNumber, bookingListReservationItem.reservationNumber) &&
        Objects.equals(this.reservationStatus, bookingListReservationItem.reservationStatus) &&
        Objects.equals(this.room, bookingListReservationItem.room) &&
        Objects.equals(this.rooms, bookingListReservationItem.rooms) &&
        Objects.equals(this.subchannelCode, bookingListReservationItem.subchannelCode) &&
        Objects.equals(this.updated, bookingListReservationItem.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, adults, arrivalDate, balance, blockCode, cancellationId, channelCode, companies, created, customers, departureDate, externalId, hotel, labels, marketCode, ratePlan, reservationNumber, reservationStatus, room, rooms, subchannelCode, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookingListReservationItem {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    arrivalDate: ").append(toIndentedString(arrivalDate)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    blockCode: ").append(toIndentedString(blockCode)).append("\n");
    sb.append("    cancellationId: ").append(toIndentedString(cancellationId)).append("\n");
    sb.append("    channelCode: ").append(toIndentedString(channelCode)).append("\n");
    sb.append("    companies: ").append(toIndentedString(companies)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    hotel: ").append(toIndentedString(hotel)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    marketCode: ").append(toIndentedString(marketCode)).append("\n");
    sb.append("    ratePlan: ").append(toIndentedString(ratePlan)).append("\n");
    sb.append("    reservationNumber: ").append(toIndentedString(reservationNumber)).append("\n");
    sb.append("    reservationStatus: ").append(toIndentedString(reservationStatus)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("    rooms: ").append(toIndentedString(rooms)).append("\n");
    sb.append("    subchannelCode: ").append(toIndentedString(subchannelCode)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("adults");
    openapiFields.add("arrival_date");
    openapiFields.add("balance");
    openapiFields.add("block_code");
    openapiFields.add("cancellation_id");
    openapiFields.add("channel_code");
    openapiFields.add("companies");
    openapiFields.add("created");
    openapiFields.add("customers");
    openapiFields.add("departure_date");
    openapiFields.add("external_id");
    openapiFields.add("hotel");
    openapiFields.add("labels");
    openapiFields.add("market_code");
    openapiFields.add("rate_plan");
    openapiFields.add("reservation_number");
    openapiFields.add("reservation_status");
    openapiFields.add("room");
    openapiFields.add("rooms");
    openapiFields.add("subchannel_code");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BookingListReservationItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BookingListReservationItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookingListReservationItem is not found in the empty JSON string", BookingListReservationItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BookingListReservationItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookingListReservationItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("block_code") != null && !jsonObj.get("block_code").isJsonNull()) && !jsonObj.get("block_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block_code").toString()));
      }
      if ((jsonObj.get("cancellation_id") != null && !jsonObj.get("cancellation_id").isJsonNull()) && !jsonObj.get("cancellation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellation_id").toString()));
      }
      if ((jsonObj.get("channel_code") != null && !jsonObj.get("channel_code").isJsonNull()) && !jsonObj.get("channel_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_code").toString()));
      }
      // validate the optional field `companies`
      if (jsonObj.get("companies") != null && !jsonObj.get("companies").isJsonNull()) {
        CompaniesInfo.validateJsonElement(jsonObj.get("companies"));
      }
      // validate the optional field `customers`
      if (jsonObj.get("customers") != null && !jsonObj.get("customers").isJsonNull()) {
        CustomersInfo.validateJsonElement(jsonObj.get("customers"));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      // validate the optional field `hotel`
      if (jsonObj.get("hotel") != null && !jsonObj.get("hotel").isJsonNull()) {
        HotelInfo.validateJsonElement(jsonObj.get("hotel"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("market_code") != null && !jsonObj.get("market_code").isJsonNull()) && !jsonObj.get("market_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `market_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("market_code").toString()));
      }
      // validate the optional field `rate_plan`
      if (jsonObj.get("rate_plan") != null && !jsonObj.get("rate_plan").isJsonNull()) {
        RatePlan.validateJsonElement(jsonObj.get("rate_plan"));
      }
      if ((jsonObj.get("reservation_status") != null && !jsonObj.get("reservation_status").isJsonNull()) && !jsonObj.get("reservation_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservation_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservation_status").toString()));
      }
      // validate the optional field `reservation_status`
      if (jsonObj.get("reservation_status") != null && !jsonObj.get("reservation_status").isJsonNull()) {
        ReservationStatusEnum.validateJsonElement(jsonObj.get("reservation_status"));
      }
      // validate the optional field `room`
      if (jsonObj.get("room") != null && !jsonObj.get("room").isJsonNull()) {
        RoomInfo.validateJsonElement(jsonObj.get("room"));
      }
      if ((jsonObj.get("subchannel_code") != null && !jsonObj.get("subchannel_code").isJsonNull()) && !jsonObj.get("subchannel_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subchannel_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subchannel_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookingListReservationItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookingListReservationItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookingListReservationItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookingListReservationItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BookingListReservationItem>() {
           @Override
           public void write(JsonWriter out, BookingListReservationItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookingListReservationItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BookingListReservationItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BookingListReservationItem
   * @throws IOException if the JSON string is invalid with respect to BookingListReservationItem
   */
  public static BookingListReservationItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookingListReservationItem.class);
  }

  /**
   * Convert an instance of BookingListReservationItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

