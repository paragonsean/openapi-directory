/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BlockInfo;
import org.openapitools.client.model.CancellationPolicy;
import org.openapitools.client.model.Company;
import org.openapitools.client.model.ContactResponse;
import org.openapitools.client.model.CustomerResponse;
import org.openapitools.client.model.DailyRate;
import org.openapitools.client.model.EmbeddedRoom;
import org.openapitools.client.model.GeneralPolicy;
import org.openapitools.client.model.GuaranteeResponse;
import org.openapitools.client.model.NoShowPolicy;
import org.openapitools.client.model.Rate;
import org.openapitools.client.model.RatePlan;
import org.openapitools.client.model.Service;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReservationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationResponse {
  public static final String SERIALIZED_NAME_WARNINGS = "_warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<String> warnings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDON_SERVICES = "addon_services";
  @SerializedName(SERIALIZED_NAME_ADDON_SERVICES)
  private List<String> addonServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private Integer adults;

  public static final String SERIALIZED_NAME_ARRIVAL_DATE = "arrival_date";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE)
  private OffsetDateTime arrivalDate;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_BLOCK = "block";
  @SerializedName(SERIALIZED_NAME_BLOCK)
  private BlockInfo block;

  public static final String SERIALIZED_NAME_CANCELLATION_ID = "cancellation_id";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_ID)
  private String cancellationId;

  public static final String SERIALIZED_NAME_CANCELLATION_POLICIES = "cancellation_policies";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICIES)
  private List<CancellationPolicy> cancellationPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNEL_CODE = "channel_code";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODE)
  private String channelCode;

  public static final String SERIALIZED_NAME_CHECKIN_TIME = "checkin_time";
  @SerializedName(SERIALIZED_NAME_CHECKIN_TIME)
  private OffsetDateTime checkinTime;

  public static final String SERIALIZED_NAME_CHECKOUT_TIME = "checkout_time";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_TIME)
  private OffsetDateTime checkoutTime;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private Company company;

  public static final String SERIALIZED_NAME_CONFIRMATION_ID = "confirmation_id";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_ID)
  private String confirmationId;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private ContactResponse contact;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departure_date";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private OffsetDateTime departureDate;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_GENERAL_POLICIES = "general_policies";
  @SerializedName(SERIALIZED_NAME_GENERAL_POLICIES)
  private List<GeneralPolicy> generalPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUARANTEE = "guarantee";
  @SerializedName(SERIALIZED_NAME_GUARANTEE)
  private GuaranteeResponse guarantee;

  public static final String SERIALIZED_NAME_GUESTS = "guests";
  @SerializedName(SERIALIZED_NAME_GUESTS)
  private List<CustomerResponse> guests = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotel_id";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private Integer hotelId;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKET_CODE = "market_code";
  @SerializedName(SERIALIZED_NAME_MARKET_CODE)
  private String marketCode;

  public static final String SERIALIZED_NAME_NOSHOW_POLICY = "noshow_policy";
  @SerializedName(SERIALIZED_NAME_NOSHOW_POLICY)
  private NoShowPolicy noshowPolicy;

  /**
   * The payment method for this reservation
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
  public enum PaymentMethodEnum {
    NONE("None"),
    
    CASH("Cash"),
    
    CREDIT_CARD("CreditCard"),
    
    WIRE_TRANSFER("WireTransfer"),
    
    CHARGE_TO_COMPANY("ChargeToCompany"),
    
    CHECK("Check"),
    
    VOUCHER("Voucher"),
    
    DEBIT_CARD("DebitCard"),
    
    TOKEN("Token"),
    
    MISCELLANEOUS("Miscellaneous"),
    
    DIGITAL_PAYMENT("DigitalPayment");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  public static final String SERIALIZED_NAME_RATE_PLAN = "rate_plan";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN)
  private RatePlan ratePlan;

  public static final String SERIALIZED_NAME_RESERVATION_NUMBER = "reservation_number";
  @SerializedName(SERIALIZED_NAME_RESERVATION_NUMBER)
  private Integer reservationNumber;

  /**
   * The current status of this reservation
   */
  @JsonAdapter(ReservationStatusEnum.Adapter.class)
  public enum ReservationStatusEnum {
    TENTATIVE("Tentative"),
    
    WAITLISTED("Waitlisted"),
    
    ON_REQUEST("OnRequest"),
    
    NON_GUARANTEED("NonGuaranteed"),
    
    GUARANTEED("Guaranteed"),
    
    IN_HOUSE("InHouse"),
    
    CHECKED_OUT("CheckedOut"),
    
    NO_SHOW("NoShow"),
    
    DENIED("Denied"),
    
    CANCELLED("Cancelled"),
    
    RELEASED("Released"),
    
    WALKED("Walked"),
    
    EXPIRED("Expired"),
    
    WALK_IN("WalkIn"),
    
    REGISTERED("Registered");

    private String value;

    ReservationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReservationStatusEnum fromValue(String value) {
      for (ReservationStatusEnum b : ReservationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReservationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReservationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReservationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReservationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReservationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESERVATION_STATUS = "reservation_status";
  @SerializedName(SERIALIZED_NAME_RESERVATION_STATUS)
  private ReservationStatusEnum reservationStatus;

  public static final String SERIALIZED_NAME_ROOM = "room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private EmbeddedRoom room;

  public static final String SERIALIZED_NAME_ROOM_RATES = "room_rates";
  @SerializedName(SERIALIZED_NAME_ROOM_RATES)
  private List<DailyRate> roomRates = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOMS = "rooms";
  @SerializedName(SERIALIZED_NAME_ROOMS)
  private Integer rooms;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<Service> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBCHANNEL_CODE = "subchannel_code";
  @SerializedName(SERIALIZED_NAME_SUBCHANNEL_CODE)
  private String subchannelCode;

  public static final String SERIALIZED_NAME_TOTAL_STAY = "total_stay";
  @SerializedName(SERIALIZED_NAME_TOTAL_STAY)
  private Rate totalStay;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public ReservationResponse() {
  }

  public ReservationResponse warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ReservationResponse addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Warnings that came up when your request was processed. Your request will still be processed successfull when              you see such warnings in your response
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<String> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }


  public ReservationResponse addonServices(List<String> addonServices) {
    this.addonServices = addonServices;
    return this;
  }

  public ReservationResponse addAddonServicesItem(String addonServicesItem) {
    if (this.addonServices == null) {
      this.addonServices = new ArrayList<>();
    }
    this.addonServices.add(addonServicesItem);
    return this;
  }

  /**
   * A list of addon service codes that are currently booked on the reservation. Services which are charged              once per stay are only visible before and on the day they are booked for.
   * @return addonServices
   */
  @javax.annotation.Nullable
  public List<String> getAddonServices() {
    return addonServices;
  }

  public void setAddonServices(List<String> addonServices) {
    this.addonServices = addonServices;
  }


  public ReservationResponse adults(Integer adults) {
    this.adults = adults;
    return this;
  }

  /**
   * The number of adults per room
   * @return adults
   */
  @javax.annotation.Nullable
  public Integer getAdults() {
    return adults;
  }

  public void setAdults(Integer adults) {
    this.adults = adults;
  }


  public ReservationResponse arrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
    return this;
  }

  /**
   * The arrival date of the guests
   * @return arrivalDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArrivalDate() {
    return arrivalDate;
  }

  public void setArrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
  }


  public ReservationResponse balance(Double balance) {
    this.balance = balance;
    return this;
  }

  /**
   * The balance for all folios of this reservartion. It is calculated by all already charged room and service              rates plus manual charges or charges from other systems like POS minus all payments. A negative balance              indicates the reservation is overpaid, a positive balance that the guest owes the hotel money
   * @return balance
   */
  @javax.annotation.Nullable
  public Double getBalance() {
    return balance;
  }

  public void setBalance(Double balance) {
    this.balance = balance;
  }


  public ReservationResponse block(BlockInfo block) {
    this.block = block;
    return this;
  }

  /**
   * Get block
   * @return block
   */
  @javax.annotation.Nullable
  public BlockInfo getBlock() {
    return block;
  }

  public void setBlock(BlockInfo block) {
    this.block = block;
  }


  public ReservationResponse cancellationId(String cancellationId) {
    this.cancellationId = cancellationId;
    return this;
  }

  /**
   * Given the reservation was cancelled, this field contains the cancellation id
   * @return cancellationId
   */
  @javax.annotation.Nullable
  public String getCancellationId() {
    return cancellationId;
  }

  public void setCancellationId(String cancellationId) {
    this.cancellationId = cancellationId;
  }


  public ReservationResponse cancellationPolicies(List<CancellationPolicy> cancellationPolicies) {
    this.cancellationPolicies = cancellationPolicies;
    return this;
  }

  public ReservationResponse addCancellationPoliciesItem(CancellationPolicy cancellationPoliciesItem) {
    if (this.cancellationPolicies == null) {
      this.cancellationPolicies = new ArrayList<>();
    }
    this.cancellationPolicies.add(cancellationPoliciesItem);
    return this;
  }

  /**
   * The cancellation policies that were applicable on the date the booking was done
   * @return cancellationPolicies
   */
  @javax.annotation.Nullable
  public List<CancellationPolicy> getCancellationPolicies() {
    return cancellationPolicies;
  }

  public void setCancellationPolicies(List<CancellationPolicy> cancellationPolicies) {
    this.cancellationPolicies = cancellationPolicies;
  }


  public ReservationResponse channelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  /**
   * The code of the channel that was used when the booking has been created. It is also known as source.               Possible values can be OTA, GDS or DIRECT, but it is configurable per hotel
   * @return channelCode
   */
  @javax.annotation.Nullable
  public String getChannelCode() {
    return channelCode;
  }

  public void setChannelCode(String channelCode) {
    this.channelCode = channelCode;
  }


  public ReservationResponse checkinTime(OffsetDateTime checkinTime) {
    this.checkinTime = checkinTime;
    return this;
  }

  /**
   * The real checkin time of the guests. It will be set after the checkin has been performed
   * @return checkinTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCheckinTime() {
    return checkinTime;
  }

  public void setCheckinTime(OffsetDateTime checkinTime) {
    this.checkinTime = checkinTime;
  }


  public ReservationResponse checkoutTime(OffsetDateTime checkoutTime) {
    this.checkoutTime = checkoutTime;
    return this;
  }

  /**
   * The real checkout time of the guests. It will be set after the checkout has been performed
   * @return checkoutTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCheckoutTime() {
    return checkoutTime;
  }

  public void setCheckoutTime(OffsetDateTime checkoutTime) {
    this.checkoutTime = checkoutTime;
  }


  public ReservationResponse comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The comment for this reservation
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public ReservationResponse company(Company company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public Company getCompany() {
    return company;
  }

  public void setCompany(Company company) {
    this.company = company;
  }


  public ReservationResponse confirmationId(String confirmationId) {
    this.confirmationId = confirmationId;
    return this;
  }

  /**
   * The confirmation id for the booking which the guest can use to check in on the kiosk, add the              booking to the mobile app etc. It is used as identifier for all reservations done with the same              booking request
   * @return confirmationId
   */
  @javax.annotation.Nullable
  public String getConfirmationId() {
    return confirmationId;
  }

  public void setConfirmationId(String confirmationId) {
    this.confirmationId = confirmationId;
  }


  public ReservationResponse contact(ContactResponse contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public ContactResponse getContact() {
    return contact;
  }

  public void setContact(ContactResponse contact) {
    this.contact = contact;
  }


  public ReservationResponse created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp the reservation was created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ReservationResponse currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency all amounts of this reservation will be shown in
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public ReservationResponse departureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * The departure date of the guests
   * @return departureDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDepartureDate() {
    return departureDate;
  }

  public void setDepartureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
  }


  public ReservationResponse externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * The external id for this reservation is the unique identifier from the system that created the booking in hetras. It could be the id of an              OTA like Expedia or booking.com or one of the GDS systems like Amadeus or Galileo
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public ReservationResponse generalPolicies(List<GeneralPolicy> generalPolicies) {
    this.generalPolicies = generalPolicies;
    return this;
  }

  public ReservationResponse addGeneralPoliciesItem(GeneralPolicy generalPoliciesItem) {
    if (this.generalPolicies == null) {
      this.generalPolicies = new ArrayList<>();
    }
    this.generalPolicies.add(generalPoliciesItem);
    return this;
  }

  /**
   * The general policies that were applicable on the date the booking was done
   * @return generalPolicies
   */
  @javax.annotation.Nullable
  public List<GeneralPolicy> getGeneralPolicies() {
    return generalPolicies;
  }

  public void setGeneralPolicies(List<GeneralPolicy> generalPolicies) {
    this.generalPolicies = generalPolicies;
  }


  public ReservationResponse guarantee(GuaranteeResponse guarantee) {
    this.guarantee = guarantee;
    return this;
  }

  /**
   * Get guarantee
   * @return guarantee
   */
  @javax.annotation.Nullable
  public GuaranteeResponse getGuarantee() {
    return guarantee;
  }

  public void setGuarantee(GuaranteeResponse guarantee) {
    this.guarantee = guarantee;
  }


  public ReservationResponse guests(List<CustomerResponse> guests) {
    this.guests = guests;
    return this;
  }

  public ReservationResponse addGuestsItem(CustomerResponse guestsItem) {
    if (this.guests == null) {
      this.guests = new ArrayList<>();
    }
    this.guests.add(guestsItem);
    return this;
  }

  /**
   * A list of guest details for this reservation
   * @return guests
   */
  @javax.annotation.Nullable
  public List<CustomerResponse> getGuests() {
    return guests;
  }

  public void setGuests(List<CustomerResponse> guests) {
    this.guests = guests;
  }


  public ReservationResponse hotelId(Integer hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * The id of the hotel this reservation is valid for
   * @return hotelId
   */
  @javax.annotation.Nullable
  public Integer getHotelId() {
    return hotelId;
  }

  public void setHotelId(Integer hotelId) {
    this.hotelId = hotelId;
  }


  public ReservationResponse labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public ReservationResponse addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * A list of labels that are attached to the reservation.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public ReservationResponse marketCode(String marketCode) {
    this.marketCode = marketCode;
    return this;
  }

  /**
   * The code of the market segment the rate plan for this reservation is linked to
   * @return marketCode
   */
  @javax.annotation.Nullable
  public String getMarketCode() {
    return marketCode;
  }

  public void setMarketCode(String marketCode) {
    this.marketCode = marketCode;
  }


  public ReservationResponse noshowPolicy(NoShowPolicy noshowPolicy) {
    this.noshowPolicy = noshowPolicy;
    return this;
  }

  /**
   * Get noshowPolicy
   * @return noshowPolicy
   */
  @javax.annotation.Nullable
  public NoShowPolicy getNoshowPolicy() {
    return noshowPolicy;
  }

  public void setNoshowPolicy(NoShowPolicy noshowPolicy) {
    this.noshowPolicy = noshowPolicy;
  }


  public ReservationResponse paymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * The payment method for this reservation
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public ReservationResponse ratePlan(RatePlan ratePlan) {
    this.ratePlan = ratePlan;
    return this;
  }

  /**
   * Get ratePlan
   * @return ratePlan
   */
  @javax.annotation.Nullable
  public RatePlan getRatePlan() {
    return ratePlan;
  }

  public void setRatePlan(RatePlan ratePlan) {
    this.ratePlan = ratePlan;
  }


  public ReservationResponse reservationNumber(Integer reservationNumber) {
    this.reservationNumber = reservationNumber;
    return this;
  }

  /**
   * The reservation number of the reservation
   * @return reservationNumber
   */
  @javax.annotation.Nullable
  public Integer getReservationNumber() {
    return reservationNumber;
  }

  public void setReservationNumber(Integer reservationNumber) {
    this.reservationNumber = reservationNumber;
  }


  public ReservationResponse reservationStatus(ReservationStatusEnum reservationStatus) {
    this.reservationStatus = reservationStatus;
    return this;
  }

  /**
   * The current status of this reservation
   * @return reservationStatus
   */
  @javax.annotation.Nullable
  public ReservationStatusEnum getReservationStatus() {
    return reservationStatus;
  }

  public void setReservationStatus(ReservationStatusEnum reservationStatus) {
    this.reservationStatus = reservationStatus;
  }


  public ReservationResponse room(EmbeddedRoom room) {
    this.room = room;
    return this;
  }

  /**
   * Get room
   * @return room
   */
  @javax.annotation.Nullable
  public EmbeddedRoom getRoom() {
    return room;
  }

  public void setRoom(EmbeddedRoom room) {
    this.room = room;
  }


  public ReservationResponse roomRates(List<DailyRate> roomRates) {
    this.roomRates = roomRates;
    return this;
  }

  public ReservationResponse addRoomRatesItem(DailyRate roomRatesItem) {
    if (this.roomRates == null) {
      this.roomRates = new ArrayList<>();
    }
    this.roomRates.add(roomRatesItem);
    return this;
  }

  /**
   * The breakdown for all daily room rates and service charges for this reservation
   * @return roomRates
   */
  @javax.annotation.Nullable
  public List<DailyRate> getRoomRates() {
    return roomRates;
  }

  public void setRoomRates(List<DailyRate> roomRates) {
    this.roomRates = roomRates;
  }


  public ReservationResponse rooms(Integer rooms) {
    this.rooms = rooms;
    return this;
  }

  /**
   * The number of rooms this reservation is valid for. After a multi-room booking is done there will be               one reservation in hetras for this booking for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests
   * @return rooms
   */
  @javax.annotation.Nullable
  public Integer getRooms() {
    return rooms;
  }

  public void setRooms(Integer rooms) {
    this.rooms = rooms;
  }


  public ReservationResponse services(List<Service> services) {
    this.services = services;
    return this;
  }

  public ReservationResponse addServicesItem(Service servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * A list of details for all services included and addon service booked on this reservation
   * @return services
   */
  @javax.annotation.Nullable
  public List<Service> getServices() {
    return services;
  }

  public void setServices(List<Service> services) {
    this.services = services;
  }


  public ReservationResponse subchannelCode(String subchannelCode) {
    this.subchannelCode = subchannelCode;
    return this;
  }

  /**
   * The code of the subchannel that was used when the booking has been created. Possible values can be               BOOKING, EXPEDIA or WALKIN, but it is configurable per hotel
   * @return subchannelCode
   */
  @javax.annotation.Nullable
  public String getSubchannelCode() {
    return subchannelCode;
  }

  public void setSubchannelCode(String subchannelCode) {
    this.subchannelCode = subchannelCode;
  }


  public ReservationResponse totalStay(Rate totalStay) {
    this.totalStay = totalStay;
    return this;
  }

  /**
   * Get totalStay
   * @return totalStay
   */
  @javax.annotation.Nullable
  public Rate getTotalStay() {
    return totalStay;
  }

  public void setTotalStay(Rate totalStay) {
    this.totalStay = totalStay;
  }


  public ReservationResponse updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp of when the reservation was changed the last time
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationResponse reservationResponse = (ReservationResponse) o;
    return Objects.equals(this.warnings, reservationResponse.warnings) &&
        Objects.equals(this.addonServices, reservationResponse.addonServices) &&
        Objects.equals(this.adults, reservationResponse.adults) &&
        Objects.equals(this.arrivalDate, reservationResponse.arrivalDate) &&
        Objects.equals(this.balance, reservationResponse.balance) &&
        Objects.equals(this.block, reservationResponse.block) &&
        Objects.equals(this.cancellationId, reservationResponse.cancellationId) &&
        Objects.equals(this.cancellationPolicies, reservationResponse.cancellationPolicies) &&
        Objects.equals(this.channelCode, reservationResponse.channelCode) &&
        Objects.equals(this.checkinTime, reservationResponse.checkinTime) &&
        Objects.equals(this.checkoutTime, reservationResponse.checkoutTime) &&
        Objects.equals(this.comment, reservationResponse.comment) &&
        Objects.equals(this.company, reservationResponse.company) &&
        Objects.equals(this.confirmationId, reservationResponse.confirmationId) &&
        Objects.equals(this.contact, reservationResponse.contact) &&
        Objects.equals(this.created, reservationResponse.created) &&
        Objects.equals(this.currency, reservationResponse.currency) &&
        Objects.equals(this.departureDate, reservationResponse.departureDate) &&
        Objects.equals(this.externalId, reservationResponse.externalId) &&
        Objects.equals(this.generalPolicies, reservationResponse.generalPolicies) &&
        Objects.equals(this.guarantee, reservationResponse.guarantee) &&
        Objects.equals(this.guests, reservationResponse.guests) &&
        Objects.equals(this.hotelId, reservationResponse.hotelId) &&
        Objects.equals(this.labels, reservationResponse.labels) &&
        Objects.equals(this.marketCode, reservationResponse.marketCode) &&
        Objects.equals(this.noshowPolicy, reservationResponse.noshowPolicy) &&
        Objects.equals(this.paymentMethod, reservationResponse.paymentMethod) &&
        Objects.equals(this.ratePlan, reservationResponse.ratePlan) &&
        Objects.equals(this.reservationNumber, reservationResponse.reservationNumber) &&
        Objects.equals(this.reservationStatus, reservationResponse.reservationStatus) &&
        Objects.equals(this.room, reservationResponse.room) &&
        Objects.equals(this.roomRates, reservationResponse.roomRates) &&
        Objects.equals(this.rooms, reservationResponse.rooms) &&
        Objects.equals(this.services, reservationResponse.services) &&
        Objects.equals(this.subchannelCode, reservationResponse.subchannelCode) &&
        Objects.equals(this.totalStay, reservationResponse.totalStay) &&
        Objects.equals(this.updated, reservationResponse.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(warnings, addonServices, adults, arrivalDate, balance, block, cancellationId, cancellationPolicies, channelCode, checkinTime, checkoutTime, comment, company, confirmationId, contact, created, currency, departureDate, externalId, generalPolicies, guarantee, guests, hotelId, labels, marketCode, noshowPolicy, paymentMethod, ratePlan, reservationNumber, reservationStatus, room, roomRates, rooms, services, subchannelCode, totalStay, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationResponse {\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    addonServices: ").append(toIndentedString(addonServices)).append("\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    arrivalDate: ").append(toIndentedString(arrivalDate)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    cancellationId: ").append(toIndentedString(cancellationId)).append("\n");
    sb.append("    cancellationPolicies: ").append(toIndentedString(cancellationPolicies)).append("\n");
    sb.append("    channelCode: ").append(toIndentedString(channelCode)).append("\n");
    sb.append("    checkinTime: ").append(toIndentedString(checkinTime)).append("\n");
    sb.append("    checkoutTime: ").append(toIndentedString(checkoutTime)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    confirmationId: ").append(toIndentedString(confirmationId)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    generalPolicies: ").append(toIndentedString(generalPolicies)).append("\n");
    sb.append("    guarantee: ").append(toIndentedString(guarantee)).append("\n");
    sb.append("    guests: ").append(toIndentedString(guests)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    marketCode: ").append(toIndentedString(marketCode)).append("\n");
    sb.append("    noshowPolicy: ").append(toIndentedString(noshowPolicy)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    ratePlan: ").append(toIndentedString(ratePlan)).append("\n");
    sb.append("    reservationNumber: ").append(toIndentedString(reservationNumber)).append("\n");
    sb.append("    reservationStatus: ").append(toIndentedString(reservationStatus)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("    roomRates: ").append(toIndentedString(roomRates)).append("\n");
    sb.append("    rooms: ").append(toIndentedString(rooms)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    subchannelCode: ").append(toIndentedString(subchannelCode)).append("\n");
    sb.append("    totalStay: ").append(toIndentedString(totalStay)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_warnings");
    openapiFields.add("addon_services");
    openapiFields.add("adults");
    openapiFields.add("arrival_date");
    openapiFields.add("balance");
    openapiFields.add("block");
    openapiFields.add("cancellation_id");
    openapiFields.add("cancellation_policies");
    openapiFields.add("channel_code");
    openapiFields.add("checkin_time");
    openapiFields.add("checkout_time");
    openapiFields.add("comment");
    openapiFields.add("company");
    openapiFields.add("confirmation_id");
    openapiFields.add("contact");
    openapiFields.add("created");
    openapiFields.add("currency");
    openapiFields.add("departure_date");
    openapiFields.add("external_id");
    openapiFields.add("general_policies");
    openapiFields.add("guarantee");
    openapiFields.add("guests");
    openapiFields.add("hotel_id");
    openapiFields.add("labels");
    openapiFields.add("market_code");
    openapiFields.add("noshow_policy");
    openapiFields.add("payment_method");
    openapiFields.add("rate_plan");
    openapiFields.add("reservation_number");
    openapiFields.add("reservation_status");
    openapiFields.add("room");
    openapiFields.add("room_rates");
    openapiFields.add("rooms");
    openapiFields.add("services");
    openapiFields.add("subchannel_code");
    openapiFields.add("total_stay");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationResponse is not found in the empty JSON string", ReservationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("_warnings") != null && !jsonObj.get("_warnings").isJsonNull() && !jsonObj.get("_warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `_warnings` to be an array in the JSON string but got `%s`", jsonObj.get("_warnings").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addon_services") != null && !jsonObj.get("addon_services").isJsonNull() && !jsonObj.get("addon_services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addon_services` to be an array in the JSON string but got `%s`", jsonObj.get("addon_services").toString()));
      }
      // validate the optional field `block`
      if (jsonObj.get("block") != null && !jsonObj.get("block").isJsonNull()) {
        BlockInfo.validateJsonElement(jsonObj.get("block"));
      }
      if ((jsonObj.get("cancellation_id") != null && !jsonObj.get("cancellation_id").isJsonNull()) && !jsonObj.get("cancellation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellation_id").toString()));
      }
      if (jsonObj.get("cancellation_policies") != null && !jsonObj.get("cancellation_policies").isJsonNull()) {
        JsonArray jsonArraycancellationPolicies = jsonObj.getAsJsonArray("cancellation_policies");
        if (jsonArraycancellationPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cancellation_policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cancellation_policies` to be an array in the JSON string but got `%s`", jsonObj.get("cancellation_policies").toString()));
          }

          // validate the optional field `cancellation_policies` (array)
          for (int i = 0; i < jsonArraycancellationPolicies.size(); i++) {
            CancellationPolicy.validateJsonElement(jsonArraycancellationPolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("channel_code") != null && !jsonObj.get("channel_code").isJsonNull()) && !jsonObj.get("channel_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_code").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // validate the optional field `company`
      if (jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) {
        Company.validateJsonElement(jsonObj.get("company"));
      }
      if ((jsonObj.get("confirmation_id") != null && !jsonObj.get("confirmation_id").isJsonNull()) && !jsonObj.get("confirmation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmation_id").toString()));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        ContactResponse.validateJsonElement(jsonObj.get("contact"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if (jsonObj.get("general_policies") != null && !jsonObj.get("general_policies").isJsonNull()) {
        JsonArray jsonArraygeneralPolicies = jsonObj.getAsJsonArray("general_policies");
        if (jsonArraygeneralPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("general_policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `general_policies` to be an array in the JSON string but got `%s`", jsonObj.get("general_policies").toString()));
          }

          // validate the optional field `general_policies` (array)
          for (int i = 0; i < jsonArraygeneralPolicies.size(); i++) {
            GeneralPolicy.validateJsonElement(jsonArraygeneralPolicies.get(i));
          };
        }
      }
      // validate the optional field `guarantee`
      if (jsonObj.get("guarantee") != null && !jsonObj.get("guarantee").isJsonNull()) {
        GuaranteeResponse.validateJsonElement(jsonObj.get("guarantee"));
      }
      if (jsonObj.get("guests") != null && !jsonObj.get("guests").isJsonNull()) {
        JsonArray jsonArrayguests = jsonObj.getAsJsonArray("guests");
        if (jsonArrayguests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guests` to be an array in the JSON string but got `%s`", jsonObj.get("guests").toString()));
          }

          // validate the optional field `guests` (array)
          for (int i = 0; i < jsonArrayguests.size(); i++) {
            CustomerResponse.validateJsonElement(jsonArrayguests.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("market_code") != null && !jsonObj.get("market_code").isJsonNull()) && !jsonObj.get("market_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `market_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("market_code").toString()));
      }
      // validate the optional field `noshow_policy`
      if (jsonObj.get("noshow_policy") != null && !jsonObj.get("noshow_policy").isJsonNull()) {
        NoShowPolicy.validateJsonElement(jsonObj.get("noshow_policy"));
      }
      if ((jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      // validate the optional field `payment_method`
      if (jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) {
        PaymentMethodEnum.validateJsonElement(jsonObj.get("payment_method"));
      }
      // validate the optional field `rate_plan`
      if (jsonObj.get("rate_plan") != null && !jsonObj.get("rate_plan").isJsonNull()) {
        RatePlan.validateJsonElement(jsonObj.get("rate_plan"));
      }
      if ((jsonObj.get("reservation_status") != null && !jsonObj.get("reservation_status").isJsonNull()) && !jsonObj.get("reservation_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservation_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservation_status").toString()));
      }
      // validate the optional field `reservation_status`
      if (jsonObj.get("reservation_status") != null && !jsonObj.get("reservation_status").isJsonNull()) {
        ReservationStatusEnum.validateJsonElement(jsonObj.get("reservation_status"));
      }
      // validate the optional field `room`
      if (jsonObj.get("room") != null && !jsonObj.get("room").isJsonNull()) {
        EmbeddedRoom.validateJsonElement(jsonObj.get("room"));
      }
      if (jsonObj.get("room_rates") != null && !jsonObj.get("room_rates").isJsonNull()) {
        JsonArray jsonArrayroomRates = jsonObj.getAsJsonArray("room_rates");
        if (jsonArrayroomRates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("room_rates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `room_rates` to be an array in the JSON string but got `%s`", jsonObj.get("room_rates").toString()));
          }

          // validate the optional field `room_rates` (array)
          for (int i = 0; i < jsonArrayroomRates.size(); i++) {
            DailyRate.validateJsonElement(jsonArrayroomRates.get(i));
          };
        }
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            Service.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
      if ((jsonObj.get("subchannel_code") != null && !jsonObj.get("subchannel_code").isJsonNull()) && !jsonObj.get("subchannel_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subchannel_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subchannel_code").toString()));
      }
      // validate the optional field `total_stay`
      if (jsonObj.get("total_stay") != null && !jsonObj.get("total_stay").isJsonNull()) {
        Rate.validateJsonElement(jsonObj.get("total_stay"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationResponse>() {
           @Override
           public void write(JsonWriter out, ReservationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationResponse
   * @throws IOException if the JSON string is invalid with respect to ReservationResponse
   */
  public static ReservationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationResponse.class);
  }

  /**
   * Convert an instance of ReservationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

