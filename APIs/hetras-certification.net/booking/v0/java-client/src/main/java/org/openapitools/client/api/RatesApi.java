/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.Rates;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ratesGet
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotel id to request offers for. (required)
     * @param arrivalDate Date of arrival for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;. (required)
     * @param departureDate Date of departure for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;. (required)
     * @param channelCode Channel Code the rate plan needs to be configured for. (required)
     * @param adults Number of adults per room. (required)
     * @param rooms Number of rooms (default is 1). (optional)
     * @param roomType Only return offers with rates for the specified room type code. (optional)
     * @param ratePlanCode Only return offers for the specified room type code. (optional)
     * @param groupCode Only return offers for the specified group code. (optional)
     * @param expand Expand the rates breakdown if required. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Different rates for the requested stay details grouped by room type. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. It is also used if there are no rates available for the specified guest stay details. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. Either a mandatory parameter was missing or no offers for               the requested stay details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratesGetCall(String appId, String appKey, Integer hotelId, OffsetDateTime arrivalDate, OffsetDateTime departureDate, String channelCode, byte[] adults, byte[] rooms, String roomType, String ratePlanCode, String groupCode, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/booking/v0/rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hotelId", hotelId));
        }

        if (arrivalDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("arrivalDate", arrivalDate));
        }

        if (departureDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departureDate", departureDate));
        }

        if (channelCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelCode", channelCode));
        }

        if (adults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adults", adults));
        }

        if (rooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rooms", rooms));
        }

        if (roomType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roomType", roomType));
        }

        if (ratePlanCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ratePlanCode", ratePlanCode));
        }

        if (groupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupCode", groupCode));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratesGetValidateBeforeCall(String appId, String appKey, Integer hotelId, OffsetDateTime arrivalDate, OffsetDateTime departureDate, String channelCode, byte[] adults, byte[] rooms, String roomType, String ratePlanCode, String groupCode, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratesGet(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratesGet(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratesGet(Async)");
        }

        // verify the required parameter 'arrivalDate' is set
        if (arrivalDate == null) {
            throw new ApiException("Missing the required parameter 'arrivalDate' when calling ratesGet(Async)");
        }

        // verify the required parameter 'departureDate' is set
        if (departureDate == null) {
            throw new ApiException("Missing the required parameter 'departureDate' when calling ratesGet(Async)");
        }

        // verify the required parameter 'channelCode' is set
        if (channelCode == null) {
            throw new ApiException("Missing the required parameter 'channelCode' when calling ratesGet(Async)");
        }

        // verify the required parameter 'adults' is set
        if (adults == null) {
            throw new ApiException("Missing the required parameter 'adults' when calling ratesGet(Async)");
        }

        return ratesGetCall(appId, appKey, hotelId, arrivalDate, departureDate, channelCode, adults, rooms, roomType, ratePlanCode, groupCode, expand, _callback);

    }

    /**
     * Get a list of room offers for the specified guest stay details.
     * With the rates request you can get a list of different rate offers per room type. You will have to at least               specify the hotel, the arrival and departure date, number of adults per room and the channel code. The channel code              will define which rates will be returned based on the access control configuration for the rates.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotel id to request offers for. (required)
     * @param arrivalDate Date of arrival for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;. (required)
     * @param departureDate Date of departure for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;. (required)
     * @param channelCode Channel Code the rate plan needs to be configured for. (required)
     * @param adults Number of adults per room. (required)
     * @param rooms Number of rooms (default is 1). (optional)
     * @param roomType Only return offers with rates for the specified room type code. (optional)
     * @param ratePlanCode Only return offers for the specified room type code. (optional)
     * @param groupCode Only return offers for the specified group code. (optional)
     * @param expand Expand the rates breakdown if required. (optional)
     * @return Rates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Different rates for the requested stay details grouped by room type. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. It is also used if there are no rates available for the specified guest stay details. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. Either a mandatory parameter was missing or no offers for               the requested stay details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Rates ratesGet(String appId, String appKey, Integer hotelId, OffsetDateTime arrivalDate, OffsetDateTime departureDate, String channelCode, byte[] adults, byte[] rooms, String roomType, String ratePlanCode, String groupCode, String expand) throws ApiException {
        ApiResponse<Rates> localVarResp = ratesGetWithHttpInfo(appId, appKey, hotelId, arrivalDate, departureDate, channelCode, adults, rooms, roomType, ratePlanCode, groupCode, expand);
        return localVarResp.getData();
    }

    /**
     * Get a list of room offers for the specified guest stay details.
     * With the rates request you can get a list of different rate offers per room type. You will have to at least               specify the hotel, the arrival and departure date, number of adults per room and the channel code. The channel code              will define which rates will be returned based on the access control configuration for the rates.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotel id to request offers for. (required)
     * @param arrivalDate Date of arrival for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;. (required)
     * @param departureDate Date of departure for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;. (required)
     * @param channelCode Channel Code the rate plan needs to be configured for. (required)
     * @param adults Number of adults per room. (required)
     * @param rooms Number of rooms (default is 1). (optional)
     * @param roomType Only return offers with rates for the specified room type code. (optional)
     * @param ratePlanCode Only return offers for the specified room type code. (optional)
     * @param groupCode Only return offers for the specified group code. (optional)
     * @param expand Expand the rates breakdown if required. (optional)
     * @return ApiResponse&lt;Rates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Different rates for the requested stay details grouped by room type. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. It is also used if there are no rates available for the specified guest stay details. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. Either a mandatory parameter was missing or no offers for               the requested stay details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rates> ratesGetWithHttpInfo(String appId, String appKey, Integer hotelId, OffsetDateTime arrivalDate, OffsetDateTime departureDate, String channelCode, byte[] adults, byte[] rooms, String roomType, String ratePlanCode, String groupCode, String expand) throws ApiException {
        okhttp3.Call localVarCall = ratesGetValidateBeforeCall(appId, appKey, hotelId, arrivalDate, departureDate, channelCode, adults, rooms, roomType, ratePlanCode, groupCode, expand, null);
        Type localVarReturnType = new TypeToken<Rates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of room offers for the specified guest stay details. (asynchronously)
     * With the rates request you can get a list of different rate offers per room type. You will have to at least               specify the hotel, the arrival and departure date, number of adults per room and the channel code. The channel code              will define which rates will be returned based on the access control configuration for the rates.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotel id to request offers for. (required)
     * @param arrivalDate Date of arrival for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;. (required)
     * @param departureDate Date of departure for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;. (required)
     * @param channelCode Channel Code the rate plan needs to be configured for. (required)
     * @param adults Number of adults per room. (required)
     * @param rooms Number of rooms (default is 1). (optional)
     * @param roomType Only return offers with rates for the specified room type code. (optional)
     * @param ratePlanCode Only return offers for the specified room type code. (optional)
     * @param groupCode Only return offers for the specified group code. (optional)
     * @param expand Expand the rates breakdown if required. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Different rates for the requested stay details grouped by room type. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. It is also used if there are no rates available for the specified guest stay details. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. Either a mandatory parameter was missing or no offers for               the requested stay details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratesGetAsync(String appId, String appKey, Integer hotelId, OffsetDateTime arrivalDate, OffsetDateTime departureDate, String channelCode, byte[] adults, byte[] rooms, String roomType, String ratePlanCode, String groupCode, String expand, final ApiCallback<Rates> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratesGetValidateBeforeCall(appId, appKey, hotelId, arrivalDate, departureDate, channelCode, adults, rooms, roomType, ratePlanCode, groupCode, expand, _callback);
        Type localVarReturnType = new TypeToken<Rates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
