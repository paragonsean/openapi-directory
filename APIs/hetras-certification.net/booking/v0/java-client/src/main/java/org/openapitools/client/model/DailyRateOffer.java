/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DailyRateRoomOffer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DailyRateOffer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DailyRateOffer {
  public static final String SERIALIZED_NAME_CANCELLATION_POLICY_CODE = "cancellation_policy_code";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICY_CODE)
  private String cancellationPolicyCode;

  public static final String SERIALIZED_NAME_GUARANTEE_TYPE_CODE = "guarantee_type_code";
  @SerializedName(SERIALIZED_NAME_GUARANTEE_TYPE_CODE)
  private String guaranteeTypeCode;

  public static final String SERIALIZED_NAME_NOSHOW_POLICY_CODE = "noshow_policy_code";
  @SerializedName(SERIALIZED_NAME_NOSHOW_POLICY_CODE)
  private String noshowPolicyCode;

  public static final String SERIALIZED_NAME_RATEPLAN_CODE = "rateplan_code";
  @SerializedName(SERIALIZED_NAME_RATEPLAN_CODE)
  private String rateplanCode;

  public static final String SERIALIZED_NAME_ROOM_TYPE_DETAILS = "room_type_details";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE_DETAILS)
  private List<DailyRateRoomOffer> roomTypeDetails = new ArrayList<>();

  public DailyRateOffer() {
  }

  public DailyRateOffer cancellationPolicyCode(String cancellationPolicyCode) {
    this.cancellationPolicyCode = cancellationPolicyCode;
    return this;
  }

  /**
   * Get cancellationPolicyCode
   * @return cancellationPolicyCode
   */
  @javax.annotation.Nullable
  public String getCancellationPolicyCode() {
    return cancellationPolicyCode;
  }

  public void setCancellationPolicyCode(String cancellationPolicyCode) {
    this.cancellationPolicyCode = cancellationPolicyCode;
  }


  public DailyRateOffer guaranteeTypeCode(String guaranteeTypeCode) {
    this.guaranteeTypeCode = guaranteeTypeCode;
    return this;
  }

  /**
   * Get guaranteeTypeCode
   * @return guaranteeTypeCode
   */
  @javax.annotation.Nullable
  public String getGuaranteeTypeCode() {
    return guaranteeTypeCode;
  }

  public void setGuaranteeTypeCode(String guaranteeTypeCode) {
    this.guaranteeTypeCode = guaranteeTypeCode;
  }


  public DailyRateOffer noshowPolicyCode(String noshowPolicyCode) {
    this.noshowPolicyCode = noshowPolicyCode;
    return this;
  }

  /**
   * Get noshowPolicyCode
   * @return noshowPolicyCode
   */
  @javax.annotation.Nullable
  public String getNoshowPolicyCode() {
    return noshowPolicyCode;
  }

  public void setNoshowPolicyCode(String noshowPolicyCode) {
    this.noshowPolicyCode = noshowPolicyCode;
  }


  public DailyRateOffer rateplanCode(String rateplanCode) {
    this.rateplanCode = rateplanCode;
    return this;
  }

  /**
   * Get rateplanCode
   * @return rateplanCode
   */
  @javax.annotation.Nullable
  public String getRateplanCode() {
    return rateplanCode;
  }

  public void setRateplanCode(String rateplanCode) {
    this.rateplanCode = rateplanCode;
  }


  public DailyRateOffer roomTypeDetails(List<DailyRateRoomOffer> roomTypeDetails) {
    this.roomTypeDetails = roomTypeDetails;
    return this;
  }

  public DailyRateOffer addRoomTypeDetailsItem(DailyRateRoomOffer roomTypeDetailsItem) {
    if (this.roomTypeDetails == null) {
      this.roomTypeDetails = new ArrayList<>();
    }
    this.roomTypeDetails.add(roomTypeDetailsItem);
    return this;
  }

  /**
   * Get roomTypeDetails
   * @return roomTypeDetails
   */
  @javax.annotation.Nullable
  public List<DailyRateRoomOffer> getRoomTypeDetails() {
    return roomTypeDetails;
  }

  public void setRoomTypeDetails(List<DailyRateRoomOffer> roomTypeDetails) {
    this.roomTypeDetails = roomTypeDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyRateOffer dailyRateOffer = (DailyRateOffer) o;
    return Objects.equals(this.cancellationPolicyCode, dailyRateOffer.cancellationPolicyCode) &&
        Objects.equals(this.guaranteeTypeCode, dailyRateOffer.guaranteeTypeCode) &&
        Objects.equals(this.noshowPolicyCode, dailyRateOffer.noshowPolicyCode) &&
        Objects.equals(this.rateplanCode, dailyRateOffer.rateplanCode) &&
        Objects.equals(this.roomTypeDetails, dailyRateOffer.roomTypeDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellationPolicyCode, guaranteeTypeCode, noshowPolicyCode, rateplanCode, roomTypeDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyRateOffer {\n");
    sb.append("    cancellationPolicyCode: ").append(toIndentedString(cancellationPolicyCode)).append("\n");
    sb.append("    guaranteeTypeCode: ").append(toIndentedString(guaranteeTypeCode)).append("\n");
    sb.append("    noshowPolicyCode: ").append(toIndentedString(noshowPolicyCode)).append("\n");
    sb.append("    rateplanCode: ").append(toIndentedString(rateplanCode)).append("\n");
    sb.append("    roomTypeDetails: ").append(toIndentedString(roomTypeDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancellation_policy_code");
    openapiFields.add("guarantee_type_code");
    openapiFields.add("noshow_policy_code");
    openapiFields.add("rateplan_code");
    openapiFields.add("room_type_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyRateOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyRateOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyRateOffer is not found in the empty JSON string", DailyRateOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyRateOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyRateOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cancellation_policy_code") != null && !jsonObj.get("cancellation_policy_code").isJsonNull()) && !jsonObj.get("cancellation_policy_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellation_policy_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellation_policy_code").toString()));
      }
      if ((jsonObj.get("guarantee_type_code") != null && !jsonObj.get("guarantee_type_code").isJsonNull()) && !jsonObj.get("guarantee_type_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guarantee_type_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guarantee_type_code").toString()));
      }
      if ((jsonObj.get("noshow_policy_code") != null && !jsonObj.get("noshow_policy_code").isJsonNull()) && !jsonObj.get("noshow_policy_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noshow_policy_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noshow_policy_code").toString()));
      }
      if ((jsonObj.get("rateplan_code") != null && !jsonObj.get("rateplan_code").isJsonNull()) && !jsonObj.get("rateplan_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateplan_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateplan_code").toString()));
      }
      if (jsonObj.get("room_type_details") != null && !jsonObj.get("room_type_details").isJsonNull()) {
        JsonArray jsonArrayroomTypeDetails = jsonObj.getAsJsonArray("room_type_details");
        if (jsonArrayroomTypeDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("room_type_details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `room_type_details` to be an array in the JSON string but got `%s`", jsonObj.get("room_type_details").toString()));
          }

          // validate the optional field `room_type_details` (array)
          for (int i = 0; i < jsonArrayroomTypeDetails.size(); i++) {
            DailyRateRoomOffer.validateJsonElement(jsonArrayroomTypeDetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyRateOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyRateOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyRateOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyRateOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyRateOffer>() {
           @Override
           public void write(JsonWriter out, DailyRateOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyRateOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyRateOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyRateOffer
   * @throws IOException if the JSON string is invalid with respect to DailyRateOffer
   */
  public static DailyRateOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyRateOffer.class);
  }

  /**
   * Convert an instance of DailyRateOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

