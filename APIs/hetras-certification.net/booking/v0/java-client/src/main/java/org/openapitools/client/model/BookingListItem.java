/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BookingListReservationItem;
import org.openapitools.client.model.LinkObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BookingListItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BookingListItem {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, LinkObject> links = new HashMap<>();

  public static final String SERIALIZED_NAME_CONFIRMATION_ID = "confirmation_id";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_ID)
  private String confirmationId;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_RESERVATIONS = "reservations";
  @SerializedName(SERIALIZED_NAME_RESERVATIONS)
  private List<BookingListReservationItem> reservations = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public BookingListItem() {
  }

  public BookingListItem links(Map<String, LinkObject> links) {
    this.links = links;
    return this;
  }

  public BookingListItem putLinksItem(String key, LinkObject linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Collection of links to related resources
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, LinkObject> getLinks() {
    return links;
  }

  public void setLinks(Map<String, LinkObject> links) {
    this.links = links;
  }


  public BookingListItem confirmationId(String confirmationId) {
    this.confirmationId = confirmationId;
    return this;
  }

  /**
   * The confirmation id for the booking which the guest can use to check in on the kiosk, add the              booking to the mobile app etc. It is used as identifier for all reservations done with the same              booking request.
   * @return confirmationId
   */
  @javax.annotation.Nullable
  public String getConfirmationId() {
    return confirmationId;
  }

  public void setConfirmationId(String confirmationId) {
    this.confirmationId = confirmationId;
  }


  public BookingListItem created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp the booking was created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public BookingListItem reservations(List<BookingListReservationItem> reservations) {
    this.reservations = reservations;
    return this;
  }

  public BookingListItem addReservationsItem(BookingListReservationItem reservationsItem) {
    if (this.reservations == null) {
      this.reservations = new ArrayList<>();
    }
    this.reservations.add(reservationsItem);
    return this;
  }

  /**
   * Collection of reservations made with on booking request.
   * @return reservations
   */
  @javax.annotation.Nullable
  public List<BookingListReservationItem> getReservations() {
    return reservations;
  }

  public void setReservations(List<BookingListReservationItem> reservations) {
    this.reservations = reservations;
  }


  public BookingListItem updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp of when the booking was changed the last time
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookingListItem bookingListItem = (BookingListItem) o;
    return Objects.equals(this.links, bookingListItem.links) &&
        Objects.equals(this.confirmationId, bookingListItem.confirmationId) &&
        Objects.equals(this.created, bookingListItem.created) &&
        Objects.equals(this.reservations, bookingListItem.reservations) &&
        Objects.equals(this.updated, bookingListItem.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, confirmationId, created, reservations, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookingListItem {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    confirmationId: ").append(toIndentedString(confirmationId)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    reservations: ").append(toIndentedString(reservations)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("confirmation_id");
    openapiFields.add("created");
    openapiFields.add("reservations");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BookingListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BookingListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookingListItem is not found in the empty JSON string", BookingListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BookingListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookingListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("confirmation_id") != null && !jsonObj.get("confirmation_id").isJsonNull()) && !jsonObj.get("confirmation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmation_id").toString()));
      }
      if (jsonObj.get("reservations") != null && !jsonObj.get("reservations").isJsonNull()) {
        JsonArray jsonArrayreservations = jsonObj.getAsJsonArray("reservations");
        if (jsonArrayreservations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reservations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reservations` to be an array in the JSON string but got `%s`", jsonObj.get("reservations").toString()));
          }

          // validate the optional field `reservations` (array)
          for (int i = 0; i < jsonArrayreservations.size(); i++) {
            BookingListReservationItem.validateJsonElement(jsonArrayreservations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookingListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookingListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookingListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookingListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BookingListItem>() {
           @Override
           public void write(JsonWriter out, BookingListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookingListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BookingListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BookingListItem
   * @throws IOException if the JSON string is invalid with respect to BookingListItem
   */
  public static BookingListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookingListItem.class);
  }

  /**
   * Convert an instance of BookingListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

