/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DailyRateCancellationPolicy;
import org.openapitools.client.model.DailyRateNoShowPolicy;
import org.openapitools.client.model.GuaranteeTypes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Policies
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Policies {
  public static final String SERIALIZED_NAME_CANCELLATION_POLICIES = "cancellation_policies";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICIES)
  private List<DailyRateCancellationPolicy> cancellationPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUARANTEE_TYPES = "guarantee_types";
  @SerializedName(SERIALIZED_NAME_GUARANTEE_TYPES)
  private List<GuaranteeTypes> guaranteeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOSHOW_POLICIES = "noshow_policies";
  @SerializedName(SERIALIZED_NAME_NOSHOW_POLICIES)
  private List<DailyRateNoShowPolicy> noshowPolicies = new ArrayList<>();

  public Policies() {
  }

  public Policies cancellationPolicies(List<DailyRateCancellationPolicy> cancellationPolicies) {
    this.cancellationPolicies = cancellationPolicies;
    return this;
  }

  public Policies addCancellationPoliciesItem(DailyRateCancellationPolicy cancellationPoliciesItem) {
    if (this.cancellationPolicies == null) {
      this.cancellationPolicies = new ArrayList<>();
    }
    this.cancellationPolicies.add(cancellationPoliciesItem);
    return this;
  }

  /**
   * Get cancellationPolicies
   * @return cancellationPolicies
   */
  @javax.annotation.Nullable
  public List<DailyRateCancellationPolicy> getCancellationPolicies() {
    return cancellationPolicies;
  }

  public void setCancellationPolicies(List<DailyRateCancellationPolicy> cancellationPolicies) {
    this.cancellationPolicies = cancellationPolicies;
  }


  public Policies guaranteeTypes(List<GuaranteeTypes> guaranteeTypes) {
    this.guaranteeTypes = guaranteeTypes;
    return this;
  }

  public Policies addGuaranteeTypesItem(GuaranteeTypes guaranteeTypesItem) {
    if (this.guaranteeTypes == null) {
      this.guaranteeTypes = new ArrayList<>();
    }
    this.guaranteeTypes.add(guaranteeTypesItem);
    return this;
  }

  /**
   * Get guaranteeTypes
   * @return guaranteeTypes
   */
  @javax.annotation.Nullable
  public List<GuaranteeTypes> getGuaranteeTypes() {
    return guaranteeTypes;
  }

  public void setGuaranteeTypes(List<GuaranteeTypes> guaranteeTypes) {
    this.guaranteeTypes = guaranteeTypes;
  }


  public Policies noshowPolicies(List<DailyRateNoShowPolicy> noshowPolicies) {
    this.noshowPolicies = noshowPolicies;
    return this;
  }

  public Policies addNoshowPoliciesItem(DailyRateNoShowPolicy noshowPoliciesItem) {
    if (this.noshowPolicies == null) {
      this.noshowPolicies = new ArrayList<>();
    }
    this.noshowPolicies.add(noshowPoliciesItem);
    return this;
  }

  /**
   * Get noshowPolicies
   * @return noshowPolicies
   */
  @javax.annotation.Nullable
  public List<DailyRateNoShowPolicy> getNoshowPolicies() {
    return noshowPolicies;
  }

  public void setNoshowPolicies(List<DailyRateNoShowPolicy> noshowPolicies) {
    this.noshowPolicies = noshowPolicies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policies policies = (Policies) o;
    return Objects.equals(this.cancellationPolicies, policies.cancellationPolicies) &&
        Objects.equals(this.guaranteeTypes, policies.guaranteeTypes) &&
        Objects.equals(this.noshowPolicies, policies.noshowPolicies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellationPolicies, guaranteeTypes, noshowPolicies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policies {\n");
    sb.append("    cancellationPolicies: ").append(toIndentedString(cancellationPolicies)).append("\n");
    sb.append("    guaranteeTypes: ").append(toIndentedString(guaranteeTypes)).append("\n");
    sb.append("    noshowPolicies: ").append(toIndentedString(noshowPolicies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancellation_policies");
    openapiFields.add("guarantee_types");
    openapiFields.add("noshow_policies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Policies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Policies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policies is not found in the empty JSON string", Policies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Policies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Policies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cancellation_policies") != null && !jsonObj.get("cancellation_policies").isJsonNull()) {
        JsonArray jsonArraycancellationPolicies = jsonObj.getAsJsonArray("cancellation_policies");
        if (jsonArraycancellationPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cancellation_policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cancellation_policies` to be an array in the JSON string but got `%s`", jsonObj.get("cancellation_policies").toString()));
          }

          // validate the optional field `cancellation_policies` (array)
          for (int i = 0; i < jsonArraycancellationPolicies.size(); i++) {
            DailyRateCancellationPolicy.validateJsonElement(jsonArraycancellationPolicies.get(i));
          };
        }
      }
      if (jsonObj.get("guarantee_types") != null && !jsonObj.get("guarantee_types").isJsonNull()) {
        JsonArray jsonArrayguaranteeTypes = jsonObj.getAsJsonArray("guarantee_types");
        if (jsonArrayguaranteeTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guarantee_types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guarantee_types` to be an array in the JSON string but got `%s`", jsonObj.get("guarantee_types").toString()));
          }

          // validate the optional field `guarantee_types` (array)
          for (int i = 0; i < jsonArrayguaranteeTypes.size(); i++) {
            GuaranteeTypes.validateJsonElement(jsonArrayguaranteeTypes.get(i));
          };
        }
      }
      if (jsonObj.get("noshow_policies") != null && !jsonObj.get("noshow_policies").isJsonNull()) {
        JsonArray jsonArraynoshowPolicies = jsonObj.getAsJsonArray("noshow_policies");
        if (jsonArraynoshowPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("noshow_policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `noshow_policies` to be an array in the JSON string but got `%s`", jsonObj.get("noshow_policies").toString()));
          }

          // validate the optional field `noshow_policies` (array)
          for (int i = 0; i < jsonArraynoshowPolicies.size(); i++) {
            DailyRateNoShowPolicy.validateJsonElement(jsonArraynoshowPolicies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policies.class));

       return (TypeAdapter<T>) new TypeAdapter<Policies>() {
           @Override
           public void write(JsonWriter out, Policies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Policies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Policies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Policies
   * @throws IOException if the JSON string is invalid with respect to Policies
   */
  public static Policies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policies.class);
  }

  /**
   * Convert an instance of Policies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

