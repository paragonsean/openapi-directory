/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvailabilityDetail;
import org.openapitools.client.model.RoomAvailabilityDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DailyAvailability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DailyAvailability {
  public static final String SERIALIZED_NAME_BUSINESS_DAY = "business_day";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DAY)
  private OffsetDateTime businessDay;

  public static final String SERIALIZED_NAME_HOUSE_LEVEL = "house_level";
  @SerializedName(SERIALIZED_NAME_HOUSE_LEVEL)
  private AvailabilityDetail houseLevel;

  public static final String SERIALIZED_NAME_ROOM_TYPES = "room_types";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private List<RoomAvailabilityDetail> roomTypes = new ArrayList<>();

  public DailyAvailability() {
  }

  public DailyAvailability businessDay(OffsetDateTime businessDay) {
    this.businessDay = businessDay;
    return this;
  }

  /**
   * The business day the following availability numbers are shown for
   * @return businessDay
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBusinessDay() {
    return businessDay;
  }

  public void setBusinessDay(OffsetDateTime businessDay) {
    this.businessDay = businessDay;
  }


  public DailyAvailability houseLevel(AvailabilityDetail houseLevel) {
    this.houseLevel = houseLevel;
    return this;
  }

  /**
   * Get houseLevel
   * @return houseLevel
   */
  @javax.annotation.Nullable
  public AvailabilityDetail getHouseLevel() {
    return houseLevel;
  }

  public void setHouseLevel(AvailabilityDetail houseLevel) {
    this.houseLevel = houseLevel;
  }


  public DailyAvailability roomTypes(List<RoomAvailabilityDetail> roomTypes) {
    this.roomTypes = roomTypes;
    return this;
  }

  public DailyAvailability addRoomTypesItem(RoomAvailabilityDetail roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new ArrayList<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

  /**
   * The availability numbers for all room types if the expand parameter is set appropriately
   * @return roomTypes
   */
  @javax.annotation.Nullable
  public List<RoomAvailabilityDetail> getRoomTypes() {
    return roomTypes;
  }

  public void setRoomTypes(List<RoomAvailabilityDetail> roomTypes) {
    this.roomTypes = roomTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyAvailability dailyAvailability = (DailyAvailability) o;
    return Objects.equals(this.businessDay, dailyAvailability.businessDay) &&
        Objects.equals(this.houseLevel, dailyAvailability.houseLevel) &&
        Objects.equals(this.roomTypes, dailyAvailability.roomTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessDay, houseLevel, roomTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyAvailability {\n");
    sb.append("    businessDay: ").append(toIndentedString(businessDay)).append("\n");
    sb.append("    houseLevel: ").append(toIndentedString(houseLevel)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("business_day");
    openapiFields.add("house_level");
    openapiFields.add("room_types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyAvailability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyAvailability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyAvailability is not found in the empty JSON string", DailyAvailability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyAvailability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyAvailability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `house_level`
      if (jsonObj.get("house_level") != null && !jsonObj.get("house_level").isJsonNull()) {
        AvailabilityDetail.validateJsonElement(jsonObj.get("house_level"));
      }
      if (jsonObj.get("room_types") != null && !jsonObj.get("room_types").isJsonNull()) {
        JsonArray jsonArrayroomTypes = jsonObj.getAsJsonArray("room_types");
        if (jsonArrayroomTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("room_types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `room_types` to be an array in the JSON string but got `%s`", jsonObj.get("room_types").toString()));
          }

          // validate the optional field `room_types` (array)
          for (int i = 0; i < jsonArrayroomTypes.size(); i++) {
            RoomAvailabilityDetail.validateJsonElement(jsonArrayroomTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyAvailability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyAvailability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyAvailability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyAvailability.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyAvailability>() {
           @Override
           public void write(JsonWriter out, DailyAvailability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyAvailability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyAvailability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyAvailability
   * @throws IOException if the JSON string is invalid with respect to DailyAvailability
   */
  public static DailyAvailability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyAvailability.class);
  }

  /**
   * Convert an instance of DailyAvailability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

