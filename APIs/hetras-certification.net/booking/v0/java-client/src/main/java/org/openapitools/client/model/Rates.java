/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RatePlan;
import org.openapitools.client.model.ReservationRoom;
import org.openapitools.client.model.RoomOffer;
import org.openapitools.client.model.Service;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rates {
  public static final String SERIALIZED_NAME_ARRIVAL_DATE = "arrival_date";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE)
  private OffsetDateTime arrivalDate;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departure_date";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private OffsetDateTime departureDate;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotel_id";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private Integer hotelId;

  public static final String SERIALIZED_NAME_HOTEL_NAME = "hotel_name";
  @SerializedName(SERIALIZED_NAME_HOTEL_NAME)
  private String hotelName;

  public static final String SERIALIZED_NAME_RATE_PLANS = "rate_plans";
  @SerializedName(SERIALIZED_NAME_RATE_PLANS)
  private List<RatePlan> ratePlans = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_OFFERS = "room_offers";
  @SerializedName(SERIALIZED_NAME_ROOM_OFFERS)
  private List<RoomOffer> roomOffers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOMS = "rooms";
  @SerializedName(SERIALIZED_NAME_ROOMS)
  private List<ReservationRoom> rooms = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<Service> services = new ArrayList<>();

  public Rates() {
  }

  public Rates arrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
    return this;
  }

  /**
   * The arrival date of the guest for this rate offer
   * @return arrivalDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArrivalDate() {
    return arrivalDate;
  }

  public void setArrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
  }


  public Rates departureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * The departure date of the guest for this rate offer
   * @return departureDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDepartureDate() {
    return departureDate;
  }

  public void setDepartureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
  }


  public Rates hotelId(Integer hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * The id of the hotel the rate offers will be valid for
   * @return hotelId
   */
  @javax.annotation.Nullable
  public Integer getHotelId() {
    return hotelId;
  }

  public void setHotelId(Integer hotelId) {
    this.hotelId = hotelId;
  }


  public Rates hotelName(String hotelName) {
    this.hotelName = hotelName;
    return this;
  }

  /**
   * The name of the hotel the rate offers will be valid for
   * @return hotelName
   */
  @javax.annotation.Nullable
  public String getHotelName() {
    return hotelName;
  }

  public void setHotelName(String hotelName) {
    this.hotelName = hotelName;
  }


  public Rates ratePlans(List<RatePlan> ratePlans) {
    this.ratePlans = ratePlans;
    return this;
  }

  public Rates addRatePlansItem(RatePlan ratePlansItem) {
    if (this.ratePlans == null) {
      this.ratePlans = new ArrayList<>();
    }
    this.ratePlans.add(ratePlansItem);
    return this;
  }

  /**
   * List of rate plans details for rates you can find offers in the room_offers
   * @return ratePlans
   */
  @javax.annotation.Nullable
  public List<RatePlan> getRatePlans() {
    return ratePlans;
  }

  public void setRatePlans(List<RatePlan> ratePlans) {
    this.ratePlans = ratePlans;
  }


  public Rates roomOffers(List<RoomOffer> roomOffers) {
    this.roomOffers = roomOffers;
    return this;
  }

  public Rates addRoomOffersItem(RoomOffer roomOffersItem) {
    if (this.roomOffers == null) {
      this.roomOffers = new ArrayList<>();
    }
    this.roomOffers.add(roomOffersItem);
    return this;
  }

  /**
   * List of room types with available rate offers ordered from ascending
   * @return roomOffers
   */
  @javax.annotation.Nullable
  public List<RoomOffer> getRoomOffers() {
    return roomOffers;
  }

  public void setRoomOffers(List<RoomOffer> roomOffers) {
    this.roomOffers = roomOffers;
  }


  public Rates rooms(List<ReservationRoom> rooms) {
    this.rooms = rooms;
    return this;
  }

  public Rates addRoomsItem(ReservationRoom roomsItem) {
    if (this.rooms == null) {
      this.rooms = new ArrayList<>();
    }
    this.rooms.add(roomsItem);
    return this;
  }

  /**
   * List of room type details for room types you can find offers in the room_offers
   * @return rooms
   */
  @javax.annotation.Nullable
  public List<ReservationRoom> getRooms() {
    return rooms;
  }

  public void setRooms(List<ReservationRoom> rooms) {
    this.rooms = rooms;
  }


  public Rates services(List<Service> services) {
    this.services = services;
    return this;
  }

  public Rates addServicesItem(Service servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * List of service details for included services in offers you can find in the room_offers
   * @return services
   */
  @javax.annotation.Nullable
  public List<Service> getServices() {
    return services;
  }

  public void setServices(List<Service> services) {
    this.services = services;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rates rates = (Rates) o;
    return Objects.equals(this.arrivalDate, rates.arrivalDate) &&
        Objects.equals(this.departureDate, rates.departureDate) &&
        Objects.equals(this.hotelId, rates.hotelId) &&
        Objects.equals(this.hotelName, rates.hotelName) &&
        Objects.equals(this.ratePlans, rates.ratePlans) &&
        Objects.equals(this.roomOffers, rates.roomOffers) &&
        Objects.equals(this.rooms, rates.rooms) &&
        Objects.equals(this.services, rates.services);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrivalDate, departureDate, hotelId, hotelName, ratePlans, roomOffers, rooms, services);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rates {\n");
    sb.append("    arrivalDate: ").append(toIndentedString(arrivalDate)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    hotelName: ").append(toIndentedString(hotelName)).append("\n");
    sb.append("    ratePlans: ").append(toIndentedString(ratePlans)).append("\n");
    sb.append("    roomOffers: ").append(toIndentedString(roomOffers)).append("\n");
    sb.append("    rooms: ").append(toIndentedString(rooms)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrival_date");
    openapiFields.add("departure_date");
    openapiFields.add("hotel_id");
    openapiFields.add("hotel_name");
    openapiFields.add("rate_plans");
    openapiFields.add("room_offers");
    openapiFields.add("rooms");
    openapiFields.add("services");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rates is not found in the empty JSON string", Rates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hotel_name") != null && !jsonObj.get("hotel_name").isJsonNull()) && !jsonObj.get("hotel_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotel_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotel_name").toString()));
      }
      if (jsonObj.get("rate_plans") != null && !jsonObj.get("rate_plans").isJsonNull()) {
        JsonArray jsonArrayratePlans = jsonObj.getAsJsonArray("rate_plans");
        if (jsonArrayratePlans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rate_plans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rate_plans` to be an array in the JSON string but got `%s`", jsonObj.get("rate_plans").toString()));
          }

          // validate the optional field `rate_plans` (array)
          for (int i = 0; i < jsonArrayratePlans.size(); i++) {
            RatePlan.validateJsonElement(jsonArrayratePlans.get(i));
          };
        }
      }
      if (jsonObj.get("room_offers") != null && !jsonObj.get("room_offers").isJsonNull()) {
        JsonArray jsonArrayroomOffers = jsonObj.getAsJsonArray("room_offers");
        if (jsonArrayroomOffers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("room_offers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `room_offers` to be an array in the JSON string but got `%s`", jsonObj.get("room_offers").toString()));
          }

          // validate the optional field `room_offers` (array)
          for (int i = 0; i < jsonArrayroomOffers.size(); i++) {
            RoomOffer.validateJsonElement(jsonArrayroomOffers.get(i));
          };
        }
      }
      if (jsonObj.get("rooms") != null && !jsonObj.get("rooms").isJsonNull()) {
        JsonArray jsonArrayrooms = jsonObj.getAsJsonArray("rooms");
        if (jsonArrayrooms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rooms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rooms` to be an array in the JSON string but got `%s`", jsonObj.get("rooms").toString()));
          }

          // validate the optional field `rooms` (array)
          for (int i = 0; i < jsonArrayrooms.size(); i++) {
            ReservationRoom.validateJsonElement(jsonArrayrooms.get(i));
          };
        }
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            Service.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rates.class));

       return (TypeAdapter<T>) new TypeAdapter<Rates>() {
           @Override
           public void write(JsonWriter out, Rates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rates
   * @throws IOException if the JSON string is invalid with respect to Rates
   */
  public static Rates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rates.class);
  }

  /**
   * Convert an instance of Rates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

