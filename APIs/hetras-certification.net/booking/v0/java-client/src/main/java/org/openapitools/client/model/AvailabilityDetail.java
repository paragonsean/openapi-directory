/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Blocked;
import org.openapitools.client.model.LinkObject;
import org.openapitools.client.model.Maintenance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AvailabilityDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailabilityDetail {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, LinkObject> links = new HashMap<>();

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Integer available;

  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  private Blocked blocked;

  public static final String SERIALIZED_NAME_DAY_USE = "day_use";
  @SerializedName(SERIALIZED_NAME_DAY_USE)
  private Integer dayUse;

  public static final String SERIALIZED_NAME_HOUSE_COUNT = "house_count";
  @SerializedName(SERIALIZED_NAME_HOUSE_COUNT)
  private Integer houseCount;

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private Maintenance maintenance;

  public static final String SERIALIZED_NAME_OVERBOOKING = "overbooking";
  @SerializedName(SERIALIZED_NAME_OVERBOOKING)
  private Integer overbooking;

  public static final String SERIALIZED_NAME_ROOM_COUNT = "room_count";
  @SerializedName(SERIALIZED_NAME_ROOM_COUNT)
  private Integer roomCount;

  public static final String SERIALIZED_NAME_SOLD = "sold";
  @SerializedName(SERIALIZED_NAME_SOLD)
  private Integer sold;

  public static final String SERIALIZED_NAME_TO_SELL = "to_sell";
  @SerializedName(SERIALIZED_NAME_TO_SELL)
  private Integer toSell;

  public AvailabilityDetail() {
  }

  public AvailabilityDetail links(Map<String, LinkObject> links) {
    this.links = links;
    return this;
  }

  public AvailabilityDetail putLinksItem(String key, LinkObject linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Collection of links to related resources
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, LinkObject> getLinks() {
    return links;
  }

  public void setLinks(Map<String, LinkObject> links) {
    this.links = links;
  }


  public AvailabilityDetail available(Integer available) {
    this.available = available;
    return this;
  }

  /**
   * The number of rooms that were originally available to sell. This is the the house count reduced by rooms set              to OutOfOrder but increased by the set overbooking
   * @return available
   */
  @javax.annotation.Nullable
  public Integer getAvailable() {
    return available;
  }

  public void setAvailable(Integer available) {
    this.available = available;
  }


  public AvailabilityDetail blocked(Blocked blocked) {
    this.blocked = blocked;
    return this;
  }

  /**
   * Get blocked
   * @return blocked
   */
  @javax.annotation.Nullable
  public Blocked getBlocked() {
    return blocked;
  }

  public void setBlocked(Blocked blocked) {
    this.blocked = blocked;
  }


  public AvailabilityDetail dayUse(Integer dayUse) {
    this.dayUse = dayUse;
    return this;
  }

  /**
   * The number of day use reservations
   * @return dayUse
   */
  @javax.annotation.Nullable
  public Integer getDayUse() {
    return dayUse;
  }

  public void setDayUse(Integer dayUse) {
    this.dayUse = dayUse;
  }


  public AvailabilityDetail houseCount(Integer houseCount) {
    this.houseCount = houseCount;
    return this;
  }

  /**
   * The total count of physical rooms reduced by the number of rooms set to OutOfInventory
   * @return houseCount
   */
  @javax.annotation.Nullable
  public Integer getHouseCount() {
    return houseCount;
  }

  public void setHouseCount(Integer houseCount) {
    this.houseCount = houseCount;
  }


  public AvailabilityDetail maintenance(Maintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

  /**
   * Get maintenance
   * @return maintenance
   */
  @javax.annotation.Nullable
  public Maintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(Maintenance maintenance) {
    this.maintenance = maintenance;
  }


  public AvailabilityDetail overbooking(Integer overbooking) {
    this.overbooking = overbooking;
    return this;
  }

  /**
   * The manually set overbooking
   * @return overbooking
   */
  @javax.annotation.Nullable
  public Integer getOverbooking() {
    return overbooking;
  }

  public void setOverbooking(Integer overbooking) {
    this.overbooking = overbooking;
  }


  public AvailabilityDetail roomCount(Integer roomCount) {
    this.roomCount = roomCount;
    return this;
  }

  /**
   * The total count of physical rooms
   * @return roomCount
   */
  @javax.annotation.Nullable
  public Integer getRoomCount() {
    return roomCount;
  }

  public void setRoomCount(Integer roomCount) {
    this.roomCount = roomCount;
  }


  public AvailabilityDetail sold(Integer sold) {
    this.sold = sold;
    return this;
  }

  /**
   * The count of rooms sold. It sums up the rooms sold through individual reservations plus rooms blocked definitely
   * @return sold
   */
  @javax.annotation.Nullable
  public Integer getSold() {
    return sold;
  }

  public void setSold(Integer sold) {
    this.sold = sold;
  }


  public AvailabilityDetail toSell(Integer toSell) {
    this.toSell = toSell;
    return this;
  }

  /**
   * The number of rooms still available to sell. It is available reduced by the already sold rooms
   * @return toSell
   */
  @javax.annotation.Nullable
  public Integer getToSell() {
    return toSell;
  }

  public void setToSell(Integer toSell) {
    this.toSell = toSell;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityDetail availabilityDetail = (AvailabilityDetail) o;
    return Objects.equals(this.links, availabilityDetail.links) &&
        Objects.equals(this.available, availabilityDetail.available) &&
        Objects.equals(this.blocked, availabilityDetail.blocked) &&
        Objects.equals(this.dayUse, availabilityDetail.dayUse) &&
        Objects.equals(this.houseCount, availabilityDetail.houseCount) &&
        Objects.equals(this.maintenance, availabilityDetail.maintenance) &&
        Objects.equals(this.overbooking, availabilityDetail.overbooking) &&
        Objects.equals(this.roomCount, availabilityDetail.roomCount) &&
        Objects.equals(this.sold, availabilityDetail.sold) &&
        Objects.equals(this.toSell, availabilityDetail.toSell);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, available, blocked, dayUse, houseCount, maintenance, overbooking, roomCount, sold, toSell);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityDetail {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    dayUse: ").append(toIndentedString(dayUse)).append("\n");
    sb.append("    houseCount: ").append(toIndentedString(houseCount)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    overbooking: ").append(toIndentedString(overbooking)).append("\n");
    sb.append("    roomCount: ").append(toIndentedString(roomCount)).append("\n");
    sb.append("    sold: ").append(toIndentedString(sold)).append("\n");
    sb.append("    toSell: ").append(toIndentedString(toSell)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("available");
    openapiFields.add("blocked");
    openapiFields.add("day_use");
    openapiFields.add("house_count");
    openapiFields.add("maintenance");
    openapiFields.add("overbooking");
    openapiFields.add("room_count");
    openapiFields.add("sold");
    openapiFields.add("to_sell");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailabilityDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailabilityDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailabilityDetail is not found in the empty JSON string", AvailabilityDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailabilityDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailabilityDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `blocked`
      if (jsonObj.get("blocked") != null && !jsonObj.get("blocked").isJsonNull()) {
        Blocked.validateJsonElement(jsonObj.get("blocked"));
      }
      // validate the optional field `maintenance`
      if (jsonObj.get("maintenance") != null && !jsonObj.get("maintenance").isJsonNull()) {
        Maintenance.validateJsonElement(jsonObj.get("maintenance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailabilityDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailabilityDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailabilityDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailabilityDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailabilityDetail>() {
           @Override
           public void write(JsonWriter out, AvailabilityDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailabilityDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailabilityDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailabilityDetail
   * @throws IOException if the JSON string is invalid with respect to AvailabilityDetail
   */
  public static AvailabilityDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailabilityDetail.class);
  }

  /**
   * Convert an instance of AvailabilityDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

