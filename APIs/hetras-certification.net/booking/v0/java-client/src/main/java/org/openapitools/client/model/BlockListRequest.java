/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BlockListRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlockListRequest {
  public static final String SERIALIZED_NAME_COUNT_DETAILS = "countDetails";
  @SerializedName(SERIALIZED_NAME_COUNT_DETAILS)
  private Boolean countDetails;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private OffsetDateTime from;

  public static final String SERIALIZED_NAME_GROUP_CODE = "groupCode";
  @SerializedName(SERIALIZED_NAME_GROUP_CODE)
  private String groupCode;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotelId";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private Integer hotelId;

  public static final String SERIALIZED_NAME_RATE_PLAN_CODES = "ratePlanCodes";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN_CODES)
  private List<String> ratePlanCodes = new ArrayList<>();

  /**
   * Return all blocks where the block status is one of the specified values.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CANCELLED("Cancelled"),
    
    TENTATIVE("Tentative"),
    
    DEFINITE("Definite");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private OffsetDateTime to;

  public BlockListRequest() {
  }

  public BlockListRequest countDetails(Boolean countDetails) {
    this.countDetails = countDetails;
    return this;
  }

  /**
   * If true it will include also details of block count per each room type.
   * @return countDetails
   */
  @javax.annotation.Nullable
  public Boolean getCountDetails() {
    return countDetails;
  }

  public void setCountDetails(Boolean countDetails) {
    this.countDetails = countDetails;
  }


  public BlockListRequest from(OffsetDateTime from) {
    this.from = from;
    return this;
  }

  /**
   * Return all blocks where the block&#39;s last_departure is greater than specified date.
   * @return from
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFrom() {
    return from;
  }

  public void setFrom(OffsetDateTime from) {
    this.from = from;
  }


  public BlockListRequest groupCode(String groupCode) {
    this.groupCode = groupCode;
    return this;
  }

  /**
   * Filter the blocks by the specified group code
   * @return groupCode
   */
  @javax.annotation.Nullable
  public String getGroupCode() {
    return groupCode;
  }

  public void setGroupCode(String groupCode) {
    this.groupCode = groupCode;
  }


  public BlockListRequest hotelId(Integer hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * Only return blocks for this specific hotel.
   * @return hotelId
   */
  @javax.annotation.Nullable
  public Integer getHotelId() {
    return hotelId;
  }

  public void setHotelId(Integer hotelId) {
    this.hotelId = hotelId;
  }


  public BlockListRequest ratePlanCodes(List<String> ratePlanCodes) {
    this.ratePlanCodes = ratePlanCodes;
    return this;
  }

  public BlockListRequest addRatePlanCodesItem(String ratePlanCodesItem) {
    if (this.ratePlanCodes == null) {
      this.ratePlanCodes = new ArrayList<>();
    }
    this.ratePlanCodes.add(ratePlanCodesItem);
    return this;
  }

  /**
   * Return all blocks that have related the specified comma-separated rate plans.
   * @return ratePlanCodes
   */
  @javax.annotation.Nullable
  public List<String> getRatePlanCodes() {
    return ratePlanCodes;
  }

  public void setRatePlanCodes(List<String> ratePlanCodes) {
    this.ratePlanCodes = ratePlanCodes;
  }


  public BlockListRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Return all blocks where the block status is one of the specified values.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public BlockListRequest to(OffsetDateTime to) {
    this.to = to;
    return this;
  }

  /**
   * Return all blocks where the block&#39;s last_departure is less than specified date.
   * @return to
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTo() {
    return to;
  }

  public void setTo(OffsetDateTime to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockListRequest blockListRequest = (BlockListRequest) o;
    return Objects.equals(this.countDetails, blockListRequest.countDetails) &&
        Objects.equals(this.from, blockListRequest.from) &&
        Objects.equals(this.groupCode, blockListRequest.groupCode) &&
        Objects.equals(this.hotelId, blockListRequest.hotelId) &&
        Objects.equals(this.ratePlanCodes, blockListRequest.ratePlanCodes) &&
        Objects.equals(this.status, blockListRequest.status) &&
        Objects.equals(this.to, blockListRequest.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countDetails, from, groupCode, hotelId, ratePlanCodes, status, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockListRequest {\n");
    sb.append("    countDetails: ").append(toIndentedString(countDetails)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    groupCode: ").append(toIndentedString(groupCode)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    ratePlanCodes: ").append(toIndentedString(ratePlanCodes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countDetails");
    openapiFields.add("from");
    openapiFields.add("groupCode");
    openapiFields.add("hotelId");
    openapiFields.add("ratePlanCodes");
    openapiFields.add("status");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlockListRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockListRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockListRequest is not found in the empty JSON string", BlockListRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockListRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlockListRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("groupCode") != null && !jsonObj.get("groupCode").isJsonNull()) && !jsonObj.get("groupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ratePlanCodes") != null && !jsonObj.get("ratePlanCodes").isJsonNull() && !jsonObj.get("ratePlanCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratePlanCodes` to be an array in the JSON string but got `%s`", jsonObj.get("ratePlanCodes").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockListRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockListRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockListRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockListRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockListRequest>() {
           @Override
           public void write(JsonWriter out, BlockListRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockListRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlockListRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlockListRequest
   * @throws IOException if the JSON string is invalid with respect to BlockListRequest
   */
  public static BlockListRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockListRequest.class);
  }

  /**
   * Convert an instance of BlockListRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

