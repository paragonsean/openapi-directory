/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddonOffer;
import org.openapitools.client.model.RatePlan;
import org.openapitools.client.model.ReservationRoom;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Addons
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Addons {
  public static final String SERIALIZED_NAME_ADDON_SERVICES = "addon_services";
  @SerializedName(SERIALIZED_NAME_ADDON_SERVICES)
  private List<AddonOffer> addonServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private Integer adults;

  public static final String SERIALIZED_NAME_ARRIVAL_DATE = "arrival_date";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE)
  private OffsetDateTime arrivalDate;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departure_date";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private OffsetDateTime departureDate;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotel_id";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private Integer hotelId;

  public static final String SERIALIZED_NAME_HOTEL_NAME = "hotel_name";
  @SerializedName(SERIALIZED_NAME_HOTEL_NAME)
  private String hotelName;

  public static final String SERIALIZED_NAME_RATE_PLAN = "rate_plan";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN)
  private RatePlan ratePlan;

  public static final String SERIALIZED_NAME_ROOM = "room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private ReservationRoom room;

  public static final String SERIALIZED_NAME_ROOMS = "rooms";
  @SerializedName(SERIALIZED_NAME_ROOMS)
  private Integer rooms;

  public Addons() {
  }

  public Addons addonServices(List<AddonOffer> addonServices) {
    this.addonServices = addonServices;
    return this;
  }

  public Addons addAddonServicesItem(AddonOffer addonServicesItem) {
    if (this.addonServices == null) {
      this.addonServices = new ArrayList<>();
    }
    this.addonServices.add(addonServicesItem);
    return this;
  }

  /**
   * A collection of offers for addon services.
   * @return addonServices
   */
  @javax.annotation.Nullable
  public List<AddonOffer> getAddonServices() {
    return addonServices;
  }

  public void setAddonServices(List<AddonOffer> addonServices) {
    this.addonServices = addonServices;
  }


  public Addons adults(Integer adults) {
    this.adults = adults;
    return this;
  }

  /**
   * The number of adults per room the addon offers are requested for. The rates will then already reflects this.
   * @return adults
   */
  @javax.annotation.Nullable
  public Integer getAdults() {
    return adults;
  }

  public void setAdults(Integer adults) {
    this.adults = adults;
  }


  public Addons arrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
    return this;
  }

  /**
   * The arrival date of the reservation the addon offers are supposed to be booked on.
   * @return arrivalDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArrivalDate() {
    return arrivalDate;
  }

  public void setArrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
  }


  public Addons departureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * The departure date of the reservation the addon offers are supposed to be booked on.
   * @return departureDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDepartureDate() {
    return departureDate;
  }

  public void setDepartureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
  }


  public Addons hotelId(Integer hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * The id of the hotel the addon offers will be valid for
   * @return hotelId
   */
  @javax.annotation.Nullable
  public Integer getHotelId() {
    return hotelId;
  }

  public void setHotelId(Integer hotelId) {
    this.hotelId = hotelId;
  }


  public Addons hotelName(String hotelName) {
    this.hotelName = hotelName;
    return this;
  }

  /**
   * The name of the hotel the addon offers will be valid for
   * @return hotelName
   */
  @javax.annotation.Nullable
  public String getHotelName() {
    return hotelName;
  }

  public void setHotelName(String hotelName) {
    this.hotelName = hotelName;
  }


  public Addons ratePlan(RatePlan ratePlan) {
    this.ratePlan = ratePlan;
    return this;
  }

  /**
   * Get ratePlan
   * @return ratePlan
   */
  @javax.annotation.Nullable
  public RatePlan getRatePlan() {
    return ratePlan;
  }

  public void setRatePlan(RatePlan ratePlan) {
    this.ratePlan = ratePlan;
  }


  public Addons room(ReservationRoom room) {
    this.room = room;
    return this;
  }

  /**
   * Get room
   * @return room
   */
  @javax.annotation.Nullable
  public ReservationRoom getRoom() {
    return room;
  }

  public void setRoom(ReservationRoom room) {
    this.room = room;
  }


  public Addons rooms(Integer rooms) {
    this.rooms = rooms;
    return this;
  }

  /**
   * The number of rooms the addon offers are requested for. The rates will then already reflects this.
   * @return rooms
   */
  @javax.annotation.Nullable
  public Integer getRooms() {
    return rooms;
  }

  public void setRooms(Integer rooms) {
    this.rooms = rooms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Addons addons = (Addons) o;
    return Objects.equals(this.addonServices, addons.addonServices) &&
        Objects.equals(this.adults, addons.adults) &&
        Objects.equals(this.arrivalDate, addons.arrivalDate) &&
        Objects.equals(this.departureDate, addons.departureDate) &&
        Objects.equals(this.hotelId, addons.hotelId) &&
        Objects.equals(this.hotelName, addons.hotelName) &&
        Objects.equals(this.ratePlan, addons.ratePlan) &&
        Objects.equals(this.room, addons.room) &&
        Objects.equals(this.rooms, addons.rooms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addonServices, adults, arrivalDate, departureDate, hotelId, hotelName, ratePlan, room, rooms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Addons {\n");
    sb.append("    addonServices: ").append(toIndentedString(addonServices)).append("\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    arrivalDate: ").append(toIndentedString(arrivalDate)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    hotelName: ").append(toIndentedString(hotelName)).append("\n");
    sb.append("    ratePlan: ").append(toIndentedString(ratePlan)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("    rooms: ").append(toIndentedString(rooms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addon_services");
    openapiFields.add("adults");
    openapiFields.add("arrival_date");
    openapiFields.add("departure_date");
    openapiFields.add("hotel_id");
    openapiFields.add("hotel_name");
    openapiFields.add("rate_plan");
    openapiFields.add("room");
    openapiFields.add("rooms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Addons
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Addons.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Addons is not found in the empty JSON string", Addons.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Addons.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Addons` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addon_services") != null && !jsonObj.get("addon_services").isJsonNull()) {
        JsonArray jsonArrayaddonServices = jsonObj.getAsJsonArray("addon_services");
        if (jsonArrayaddonServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addon_services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addon_services` to be an array in the JSON string but got `%s`", jsonObj.get("addon_services").toString()));
          }

          // validate the optional field `addon_services` (array)
          for (int i = 0; i < jsonArrayaddonServices.size(); i++) {
            AddonOffer.validateJsonElement(jsonArrayaddonServices.get(i));
          };
        }
      }
      if ((jsonObj.get("hotel_name") != null && !jsonObj.get("hotel_name").isJsonNull()) && !jsonObj.get("hotel_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotel_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotel_name").toString()));
      }
      // validate the optional field `rate_plan`
      if (jsonObj.get("rate_plan") != null && !jsonObj.get("rate_plan").isJsonNull()) {
        RatePlan.validateJsonElement(jsonObj.get("rate_plan"));
      }
      // validate the optional field `room`
      if (jsonObj.get("room") != null && !jsonObj.get("room").isJsonNull()) {
        ReservationRoom.validateJsonElement(jsonObj.get("room"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Addons.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Addons' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Addons> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Addons.class));

       return (TypeAdapter<T>) new TypeAdapter<Addons>() {
           @Override
           public void write(JsonWriter out, Addons value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Addons read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Addons given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Addons
   * @throws IOException if the JSON string is invalid with respect to Addons
   */
  public static Addons fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Addons.class);
  }

  /**
   * Convert an instance of Addons to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

