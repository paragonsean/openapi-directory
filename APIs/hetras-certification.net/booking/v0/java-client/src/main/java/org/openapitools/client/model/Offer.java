/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AcceptedGuaranteeTypes;
import org.openapitools.client.model.CancellationPolicy;
import org.openapitools.client.model.DepositPolicy;
import org.openapitools.client.model.GeneralPolicy;
import org.openapitools.client.model.LinkObject;
import org.openapitools.client.model.NoShowPolicy;
import org.openapitools.client.model.Rate;
import org.openapitools.client.model.RoomOfferDailyRate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Offer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Offer {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, LinkObject> links = new HashMap<>();

  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private Integer adults;

  public static final String SERIALIZED_NAME_AVAILABLE_ROOMS = "available_rooms";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ROOMS)
  private Integer availableRooms;

  public static final String SERIALIZED_NAME_BREAKDOWN = "breakdown";
  @SerializedName(SERIALIZED_NAME_BREAKDOWN)
  private List<RoomOfferDailyRate> breakdown = new ArrayList<>();

  public static final String SERIALIZED_NAME_CANCELLATION_POLICIES = "cancellation_policies";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICIES)
  private List<CancellationPolicy> cancellationPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DEPOSIT_POLICIES = "deposit_policies";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_POLICIES)
  private List<DepositPolicy> depositPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENERAL_POLICIES = "general_policies";
  @SerializedName(SERIALIZED_NAME_GENERAL_POLICIES)
  private List<GeneralPolicy> generalPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUARANTEE_TYPES = "guarantee_types";
  @SerializedName(SERIALIZED_NAME_GUARANTEE_TYPES)
  private AcceptedGuaranteeTypes guaranteeTypes;

  public static final String SERIALIZED_NAME_INCLUDED_SERVICES = "included_services";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SERVICES)
  private List<String> includedServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOSHOW_POLICY = "noshow_policy";
  @SerializedName(SERIALIZED_NAME_NOSHOW_POLICY)
  private NoShowPolicy noshowPolicy;

  public static final String SERIALIZED_NAME_RATE_PLAN_CODE = "rate_plan_code";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN_CODE)
  private String ratePlanCode;

  public static final String SERIALIZED_NAME_TOTAL_STAY = "total_stay";
  @SerializedName(SERIALIZED_NAME_TOTAL_STAY)
  private Rate totalStay;

  public Offer() {
  }

  public Offer links(Map<String, LinkObject> links) {
    this.links = links;
    return this;
  }

  public Offer putLinksItem(String key, LinkObject linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Link to request addon offers for this stay
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, LinkObject> getLinks() {
    return links;
  }

  public void setLinks(Map<String, LinkObject> links) {
    this.links = links;
  }


  public Offer adults(Integer adults) {
    this.adults = adults;
    return this;
  }

  /**
   * Number of adults the offer is calculated for
   * @return adults
   */
  @javax.annotation.Nullable
  public Integer getAdults() {
    return adults;
  }

  public void setAdults(Integer adults) {
    this.adults = adults;
  }


  public Offer availableRooms(Integer availableRooms) {
    this.availableRooms = availableRooms;
    return this;
  }

  /**
   * Number of currently available rooms for that specific offer
   * @return availableRooms
   */
  @javax.annotation.Nullable
  public Integer getAvailableRooms() {
    return availableRooms;
  }

  public void setAvailableRooms(Integer availableRooms) {
    this.availableRooms = availableRooms;
  }


  public Offer breakdown(List<RoomOfferDailyRate> breakdown) {
    this.breakdown = breakdown;
    return this;
  }

  public Offer addBreakdownItem(RoomOfferDailyRate breakdownItem) {
    if (this.breakdown == null) {
      this.breakdown = new ArrayList<>();
    }
    this.breakdown.add(breakdownItem);
    return this;
  }

  /**
   * In this collection you will get an entry with price information for every day.
   * @return breakdown
   */
  @javax.annotation.Nullable
  public List<RoomOfferDailyRate> getBreakdown() {
    return breakdown;
  }

  public void setBreakdown(List<RoomOfferDailyRate> breakdown) {
    this.breakdown = breakdown;
  }


  public Offer cancellationPolicies(List<CancellationPolicy> cancellationPolicies) {
    this.cancellationPolicies = cancellationPolicies;
    return this;
  }

  public Offer addCancellationPoliciesItem(CancellationPolicy cancellationPoliciesItem) {
    if (this.cancellationPolicies == null) {
      this.cancellationPolicies = new ArrayList<>();
    }
    this.cancellationPolicies.add(cancellationPoliciesItem);
    return this;
  }

  /**
   * List of cancellation policies defined for that rate
   * @return cancellationPolicies
   */
  @javax.annotation.Nullable
  public List<CancellationPolicy> getCancellationPolicies() {
    return cancellationPolicies;
  }

  public void setCancellationPolicies(List<CancellationPolicy> cancellationPolicies) {
    this.cancellationPolicies = cancellationPolicies;
  }


  public Offer currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The amounts of this offer are always in this currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Offer depositPolicies(List<DepositPolicy> depositPolicies) {
    this.depositPolicies = depositPolicies;
    return this;
  }

  public Offer addDepositPoliciesItem(DepositPolicy depositPoliciesItem) {
    if (this.depositPolicies == null) {
      this.depositPolicies = new ArrayList<>();
    }
    this.depositPolicies.add(depositPoliciesItem);
    return this;
  }

  /**
   * List of Deposit policies defined for that rate
   * @return depositPolicies
   */
  @javax.annotation.Nullable
  public List<DepositPolicy> getDepositPolicies() {
    return depositPolicies;
  }

  public void setDepositPolicies(List<DepositPolicy> depositPolicies) {
    this.depositPolicies = depositPolicies;
  }


  public Offer generalPolicies(List<GeneralPolicy> generalPolicies) {
    this.generalPolicies = generalPolicies;
    return this;
  }

  public Offer addGeneralPoliciesItem(GeneralPolicy generalPoliciesItem) {
    if (this.generalPolicies == null) {
      this.generalPolicies = new ArrayList<>();
    }
    this.generalPolicies.add(generalPoliciesItem);
    return this;
  }

  /**
   * List of general policies defined for that rate
   * @return generalPolicies
   */
  @javax.annotation.Nullable
  public List<GeneralPolicy> getGeneralPolicies() {
    return generalPolicies;
  }

  public void setGeneralPolicies(List<GeneralPolicy> generalPolicies) {
    this.generalPolicies = generalPolicies;
  }


  public Offer guaranteeTypes(AcceptedGuaranteeTypes guaranteeTypes) {
    this.guaranteeTypes = guaranteeTypes;
    return this;
  }

  /**
   * Get guaranteeTypes
   * @return guaranteeTypes
   */
  @javax.annotation.Nullable
  public AcceptedGuaranteeTypes getGuaranteeTypes() {
    return guaranteeTypes;
  }

  public void setGuaranteeTypes(AcceptedGuaranteeTypes guaranteeTypes) {
    this.guaranteeTypes = guaranteeTypes;
  }


  public Offer includedServices(List<String> includedServices) {
    this.includedServices = includedServices;
    return this;
  }

  public Offer addIncludedServicesItem(String includedServicesItem) {
    if (this.includedServices == null) {
      this.includedServices = new ArrayList<>();
    }
    this.includedServices.add(includedServicesItem);
    return this;
  }

  /**
   * A list of  of services included already in the rate for this offer
   * @return includedServices
   */
  @javax.annotation.Nullable
  public List<String> getIncludedServices() {
    return includedServices;
  }

  public void setIncludedServices(List<String> includedServices) {
    this.includedServices = includedServices;
  }


  public Offer noshowPolicy(NoShowPolicy noshowPolicy) {
    this.noshowPolicy = noshowPolicy;
    return this;
  }

  /**
   * Get noshowPolicy
   * @return noshowPolicy
   */
  @javax.annotation.Nullable
  public NoShowPolicy getNoshowPolicy() {
    return noshowPolicy;
  }

  public void setNoshowPolicy(NoShowPolicy noshowPolicy) {
    this.noshowPolicy = noshowPolicy;
  }


  public Offer ratePlanCode(String ratePlanCode) {
    this.ratePlanCode = ratePlanCode;
    return this;
  }

  /**
   * The code of the rate plan for this offer
   * @return ratePlanCode
   */
  @javax.annotation.Nullable
  public String getRatePlanCode() {
    return ratePlanCode;
  }

  public void setRatePlanCode(String ratePlanCode) {
    this.ratePlanCode = ratePlanCode;
  }


  public Offer totalStay(Rate totalStay) {
    this.totalStay = totalStay;
    return this;
  }

  /**
   * Get totalStay
   * @return totalStay
   */
  @javax.annotation.Nullable
  public Rate getTotalStay() {
    return totalStay;
  }

  public void setTotalStay(Rate totalStay) {
    this.totalStay = totalStay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Offer offer = (Offer) o;
    return Objects.equals(this.links, offer.links) &&
        Objects.equals(this.adults, offer.adults) &&
        Objects.equals(this.availableRooms, offer.availableRooms) &&
        Objects.equals(this.breakdown, offer.breakdown) &&
        Objects.equals(this.cancellationPolicies, offer.cancellationPolicies) &&
        Objects.equals(this.currency, offer.currency) &&
        Objects.equals(this.depositPolicies, offer.depositPolicies) &&
        Objects.equals(this.generalPolicies, offer.generalPolicies) &&
        Objects.equals(this.guaranteeTypes, offer.guaranteeTypes) &&
        Objects.equals(this.includedServices, offer.includedServices) &&
        Objects.equals(this.noshowPolicy, offer.noshowPolicy) &&
        Objects.equals(this.ratePlanCode, offer.ratePlanCode) &&
        Objects.equals(this.totalStay, offer.totalStay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, adults, availableRooms, breakdown, cancellationPolicies, currency, depositPolicies, generalPolicies, guaranteeTypes, includedServices, noshowPolicy, ratePlanCode, totalStay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Offer {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    availableRooms: ").append(toIndentedString(availableRooms)).append("\n");
    sb.append("    breakdown: ").append(toIndentedString(breakdown)).append("\n");
    sb.append("    cancellationPolicies: ").append(toIndentedString(cancellationPolicies)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    depositPolicies: ").append(toIndentedString(depositPolicies)).append("\n");
    sb.append("    generalPolicies: ").append(toIndentedString(generalPolicies)).append("\n");
    sb.append("    guaranteeTypes: ").append(toIndentedString(guaranteeTypes)).append("\n");
    sb.append("    includedServices: ").append(toIndentedString(includedServices)).append("\n");
    sb.append("    noshowPolicy: ").append(toIndentedString(noshowPolicy)).append("\n");
    sb.append("    ratePlanCode: ").append(toIndentedString(ratePlanCode)).append("\n");
    sb.append("    totalStay: ").append(toIndentedString(totalStay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("adults");
    openapiFields.add("available_rooms");
    openapiFields.add("breakdown");
    openapiFields.add("cancellation_policies");
    openapiFields.add("currency");
    openapiFields.add("deposit_policies");
    openapiFields.add("general_policies");
    openapiFields.add("guarantee_types");
    openapiFields.add("included_services");
    openapiFields.add("noshow_policy");
    openapiFields.add("rate_plan_code");
    openapiFields.add("total_stay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Offer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Offer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Offer is not found in the empty JSON string", Offer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Offer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Offer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("breakdown") != null && !jsonObj.get("breakdown").isJsonNull()) {
        JsonArray jsonArraybreakdown = jsonObj.getAsJsonArray("breakdown");
        if (jsonArraybreakdown != null) {
          // ensure the json data is an array
          if (!jsonObj.get("breakdown").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `breakdown` to be an array in the JSON string but got `%s`", jsonObj.get("breakdown").toString()));
          }

          // validate the optional field `breakdown` (array)
          for (int i = 0; i < jsonArraybreakdown.size(); i++) {
            RoomOfferDailyRate.validateJsonElement(jsonArraybreakdown.get(i));
          };
        }
      }
      if (jsonObj.get("cancellation_policies") != null && !jsonObj.get("cancellation_policies").isJsonNull()) {
        JsonArray jsonArraycancellationPolicies = jsonObj.getAsJsonArray("cancellation_policies");
        if (jsonArraycancellationPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cancellation_policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cancellation_policies` to be an array in the JSON string but got `%s`", jsonObj.get("cancellation_policies").toString()));
          }

          // validate the optional field `cancellation_policies` (array)
          for (int i = 0; i < jsonArraycancellationPolicies.size(); i++) {
            CancellationPolicy.validateJsonElement(jsonArraycancellationPolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (jsonObj.get("deposit_policies") != null && !jsonObj.get("deposit_policies").isJsonNull()) {
        JsonArray jsonArraydepositPolicies = jsonObj.getAsJsonArray("deposit_policies");
        if (jsonArraydepositPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deposit_policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deposit_policies` to be an array in the JSON string but got `%s`", jsonObj.get("deposit_policies").toString()));
          }

          // validate the optional field `deposit_policies` (array)
          for (int i = 0; i < jsonArraydepositPolicies.size(); i++) {
            DepositPolicy.validateJsonElement(jsonArraydepositPolicies.get(i));
          };
        }
      }
      if (jsonObj.get("general_policies") != null && !jsonObj.get("general_policies").isJsonNull()) {
        JsonArray jsonArraygeneralPolicies = jsonObj.getAsJsonArray("general_policies");
        if (jsonArraygeneralPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("general_policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `general_policies` to be an array in the JSON string but got `%s`", jsonObj.get("general_policies").toString()));
          }

          // validate the optional field `general_policies` (array)
          for (int i = 0; i < jsonArraygeneralPolicies.size(); i++) {
            GeneralPolicy.validateJsonElement(jsonArraygeneralPolicies.get(i));
          };
        }
      }
      // validate the optional field `guarantee_types`
      if (jsonObj.get("guarantee_types") != null && !jsonObj.get("guarantee_types").isJsonNull()) {
        AcceptedGuaranteeTypes.validateJsonElement(jsonObj.get("guarantee_types"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("included_services") != null && !jsonObj.get("included_services").isJsonNull() && !jsonObj.get("included_services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `included_services` to be an array in the JSON string but got `%s`", jsonObj.get("included_services").toString()));
      }
      // validate the optional field `noshow_policy`
      if (jsonObj.get("noshow_policy") != null && !jsonObj.get("noshow_policy").isJsonNull()) {
        NoShowPolicy.validateJsonElement(jsonObj.get("noshow_policy"));
      }
      if ((jsonObj.get("rate_plan_code") != null && !jsonObj.get("rate_plan_code").isJsonNull()) && !jsonObj.get("rate_plan_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate_plan_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate_plan_code").toString()));
      }
      // validate the optional field `total_stay`
      if (jsonObj.get("total_stay") != null && !jsonObj.get("total_stay").isJsonNull()) {
        Rate.validateJsonElement(jsonObj.get("total_stay"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Offer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Offer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Offer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Offer.class));

       return (TypeAdapter<T>) new TypeAdapter<Offer>() {
           @Override
           public void write(JsonWriter out, Offer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Offer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Offer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Offer
   * @throws IOException if the JSON string is invalid with respect to Offer
   */
  public static Offer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Offer.class);
  }

  /**
   * Convert an instance of Offer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

