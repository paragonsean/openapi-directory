/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Restrictions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Restrictions {
  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_CLOSED_TO_ARRIVAL = "closed_to_arrival";
  @SerializedName(SERIALIZED_NAME_CLOSED_TO_ARRIVAL)
  private Boolean closedToArrival;

  public static final String SERIALIZED_NAME_CLOSED_TO_DEPARTURE = "closed_to_departure";
  @SerializedName(SERIALIZED_NAME_CLOSED_TO_DEPARTURE)
  private Boolean closedToDeparture;

  public static final String SERIALIZED_NAME_MAXIMUM_LENGTH_OF_STAY = "maximum_length_of_stay";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_LENGTH_OF_STAY)
  private Integer maximumLengthOfStay;

  public static final String SERIALIZED_NAME_MINIMUM_LENGTH_OF_STAY = "minimum_length_of_stay";
  @SerializedName(SERIALIZED_NAME_MINIMUM_LENGTH_OF_STAY)
  private Integer minimumLengthOfStay;

  public static final String SERIALIZED_NAME_MINIMUM_STAY_THROUGH = "minimum_stay_through";
  @SerializedName(SERIALIZED_NAME_MINIMUM_STAY_THROUGH)
  private Integer minimumStayThrough;

  public Restrictions() {
  }

  public Restrictions closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   * @return closed
   */
  @javax.annotation.Nullable
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public Restrictions closedToArrival(Boolean closedToArrival) {
    this.closedToArrival = closedToArrival;
    return this;
  }

  /**
   * Get closedToArrival
   * @return closedToArrival
   */
  @javax.annotation.Nullable
  public Boolean getClosedToArrival() {
    return closedToArrival;
  }

  public void setClosedToArrival(Boolean closedToArrival) {
    this.closedToArrival = closedToArrival;
  }


  public Restrictions closedToDeparture(Boolean closedToDeparture) {
    this.closedToDeparture = closedToDeparture;
    return this;
  }

  /**
   * Get closedToDeparture
   * @return closedToDeparture
   */
  @javax.annotation.Nullable
  public Boolean getClosedToDeparture() {
    return closedToDeparture;
  }

  public void setClosedToDeparture(Boolean closedToDeparture) {
    this.closedToDeparture = closedToDeparture;
  }


  public Restrictions maximumLengthOfStay(Integer maximumLengthOfStay) {
    this.maximumLengthOfStay = maximumLengthOfStay;
    return this;
  }

  /**
   * Get maximumLengthOfStay
   * @return maximumLengthOfStay
   */
  @javax.annotation.Nullable
  public Integer getMaximumLengthOfStay() {
    return maximumLengthOfStay;
  }

  public void setMaximumLengthOfStay(Integer maximumLengthOfStay) {
    this.maximumLengthOfStay = maximumLengthOfStay;
  }


  public Restrictions minimumLengthOfStay(Integer minimumLengthOfStay) {
    this.minimumLengthOfStay = minimumLengthOfStay;
    return this;
  }

  /**
   * Get minimumLengthOfStay
   * @return minimumLengthOfStay
   */
  @javax.annotation.Nullable
  public Integer getMinimumLengthOfStay() {
    return minimumLengthOfStay;
  }

  public void setMinimumLengthOfStay(Integer minimumLengthOfStay) {
    this.minimumLengthOfStay = minimumLengthOfStay;
  }


  public Restrictions minimumStayThrough(Integer minimumStayThrough) {
    this.minimumStayThrough = minimumStayThrough;
    return this;
  }

  /**
   * Get minimumStayThrough
   * @return minimumStayThrough
   */
  @javax.annotation.Nullable
  public Integer getMinimumStayThrough() {
    return minimumStayThrough;
  }

  public void setMinimumStayThrough(Integer minimumStayThrough) {
    this.minimumStayThrough = minimumStayThrough;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Restrictions restrictions = (Restrictions) o;
    return Objects.equals(this.closed, restrictions.closed) &&
        Objects.equals(this.closedToArrival, restrictions.closedToArrival) &&
        Objects.equals(this.closedToDeparture, restrictions.closedToDeparture) &&
        Objects.equals(this.maximumLengthOfStay, restrictions.maximumLengthOfStay) &&
        Objects.equals(this.minimumLengthOfStay, restrictions.minimumLengthOfStay) &&
        Objects.equals(this.minimumStayThrough, restrictions.minimumStayThrough);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closed, closedToArrival, closedToDeparture, maximumLengthOfStay, minimumLengthOfStay, minimumStayThrough);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Restrictions {\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    closedToArrival: ").append(toIndentedString(closedToArrival)).append("\n");
    sb.append("    closedToDeparture: ").append(toIndentedString(closedToDeparture)).append("\n");
    sb.append("    maximumLengthOfStay: ").append(toIndentedString(maximumLengthOfStay)).append("\n");
    sb.append("    minimumLengthOfStay: ").append(toIndentedString(minimumLengthOfStay)).append("\n");
    sb.append("    minimumStayThrough: ").append(toIndentedString(minimumStayThrough)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed");
    openapiFields.add("closed_to_arrival");
    openapiFields.add("closed_to_departure");
    openapiFields.add("maximum_length_of_stay");
    openapiFields.add("minimum_length_of_stay");
    openapiFields.add("minimum_stay_through");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Restrictions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Restrictions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Restrictions is not found in the empty JSON string", Restrictions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Restrictions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Restrictions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Restrictions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Restrictions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Restrictions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Restrictions.class));

       return (TypeAdapter<T>) new TypeAdapter<Restrictions>() {
           @Override
           public void write(JsonWriter out, Restrictions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Restrictions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Restrictions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Restrictions
   * @throws IOException if the JSON string is invalid with respect to Restrictions
   */
  public static Restrictions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Restrictions.class);
  }

  /**
   * Convert an instance of Restrictions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

