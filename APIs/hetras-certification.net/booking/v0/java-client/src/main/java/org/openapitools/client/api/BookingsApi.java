/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssignRoomCriteria;
import org.openapitools.client.model.AssignRoomResponse;
import org.openapitools.client.model.AuthorizationRequest;
import org.openapitools.client.model.BaseResponse;
import org.openapitools.client.model.BookingListResponse;
import org.openapitools.client.model.CancellationResponse;
import org.openapitools.client.model.CheckInDetails;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OperationReservationPatchableModel;
import org.openapitools.client.model.Reservation;
import org.openapitools.client.model.ReservationConfirmation;
import org.openapitools.client.model.ReservationResponse;
import org.openapitools.client.model.ReservationsResponse;
import org.openapitools.client.model.TerminalAuthorizationRequest;
import org.openapitools.client.model.TotalCountResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BookingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BookingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BookingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bookingsCancelReservation
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to cancel. (required)
     * @param sendConfirmation Whether to send a confirmation email to the primary guest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cancellation id and the cancellation fee that will be charged to the folio of the reservation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsCancelReservationCall(String appId, String appKey, String confirmationId, Integer reservationNumber, Boolean sendConfirmation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/cancel"
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()))
            .replace("{" + "reservationNumber" + "}", localVarApiClient.escapeString(reservationNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendConfirmation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendConfirmation", sendConfirmation));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsCancelReservationValidateBeforeCall(String appId, String appKey, String confirmationId, Integer reservationNumber, Boolean sendConfirmation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsCancelReservation(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsCancelReservation(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling bookingsCancelReservation(Async)");
        }

        // verify the required parameter 'reservationNumber' is set
        if (reservationNumber == null) {
            throw new ApiException("Missing the required parameter 'reservationNumber' when calling bookingsCancelReservation(Async)");
        }

        return bookingsCancelReservationCall(appId, appKey, confirmationId, reservationNumber, sendConfirmation, _callback);

    }

    /**
     * Cancel one reservation.
     * This request will cancel one specific reservation. It will show up in the hetras UI in the Cancellation and NoShow              processing screen and it will be up to the hotel staff to either charge or waive the cancellation fee.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to cancel. (required)
     * @param sendConfirmation Whether to send a confirmation email to the primary guest (optional)
     * @return CancellationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cancellation id and the cancellation fee that will be charged to the folio of the reservation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public CancellationResponse bookingsCancelReservation(String appId, String appKey, String confirmationId, Integer reservationNumber, Boolean sendConfirmation) throws ApiException {
        ApiResponse<CancellationResponse> localVarResp = bookingsCancelReservationWithHttpInfo(appId, appKey, confirmationId, reservationNumber, sendConfirmation);
        return localVarResp.getData();
    }

    /**
     * Cancel one reservation.
     * This request will cancel one specific reservation. It will show up in the hetras UI in the Cancellation and NoShow              processing screen and it will be up to the hotel staff to either charge or waive the cancellation fee.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to cancel. (required)
     * @param sendConfirmation Whether to send a confirmation email to the primary guest (optional)
     * @return ApiResponse&lt;CancellationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cancellation id and the cancellation fee that will be charged to the folio of the reservation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancellationResponse> bookingsCancelReservationWithHttpInfo(String appId, String appKey, String confirmationId, Integer reservationNumber, Boolean sendConfirmation) throws ApiException {
        okhttp3.Call localVarCall = bookingsCancelReservationValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, sendConfirmation, null);
        Type localVarReturnType = new TypeToken<CancellationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel one reservation. (asynchronously)
     * This request will cancel one specific reservation. It will show up in the hetras UI in the Cancellation and NoShow              processing screen and it will be up to the hotel staff to either charge or waive the cancellation fee.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to cancel. (required)
     * @param sendConfirmation Whether to send a confirmation email to the primary guest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cancellation id and the cancellation fee that will be charged to the folio of the reservation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsCancelReservationAsync(String appId, String appKey, String confirmationId, Integer reservationNumber, Boolean sendConfirmation, final ApiCallback<CancellationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsCancelReservationValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, sendConfirmation, _callback);
        Type localVarReturnType = new TypeToken<CancellationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsCheckIn
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param checkInDetails Specifies checkIn details, for example Client Identity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check in was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsCheckInCall(String appId, String appKey, String confirmationId, Integer reservationNumber, CheckInDetails checkInDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkInDetails;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/check_in"
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()))
            .replace("{" + "reservationNumber" + "}", localVarApiClient.escapeString(reservationNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsCheckInValidateBeforeCall(String appId, String appKey, String confirmationId, Integer reservationNumber, CheckInDetails checkInDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsCheckIn(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsCheckIn(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling bookingsCheckIn(Async)");
        }

        // verify the required parameter 'reservationNumber' is set
        if (reservationNumber == null) {
            throw new ApiException("Missing the required parameter 'reservationNumber' when calling bookingsCheckIn(Async)");
        }

        // verify the required parameter 'checkInDetails' is set
        if (checkInDetails == null) {
            throw new ApiException("Missing the required parameter 'checkInDetails' when calling bookingsCheckIn(Async)");
        }

        return bookingsCheckInCall(appId, appKey, confirmationId, reservationNumber, checkInDetails, _callback);

    }

    /**
     * Performs a check in operation for a reservation.
     * With this call you can set a reservation to the status inhouse. It allows only single room reservations to be checked in.              The reservation must have assigned a vacant and clean room.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param checkInDetails Specifies checkIn details, for example Client Identity. (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check in was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public BaseResponse bookingsCheckIn(String appId, String appKey, String confirmationId, Integer reservationNumber, CheckInDetails checkInDetails) throws ApiException {
        ApiResponse<BaseResponse> localVarResp = bookingsCheckInWithHttpInfo(appId, appKey, confirmationId, reservationNumber, checkInDetails);
        return localVarResp.getData();
    }

    /**
     * Performs a check in operation for a reservation.
     * With this call you can set a reservation to the status inhouse. It allows only single room reservations to be checked in.              The reservation must have assigned a vacant and clean room.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param checkInDetails Specifies checkIn details, for example Client Identity. (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check in was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseResponse> bookingsCheckInWithHttpInfo(String appId, String appKey, String confirmationId, Integer reservationNumber, CheckInDetails checkInDetails) throws ApiException {
        okhttp3.Call localVarCall = bookingsCheckInValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, checkInDetails, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs a check in operation for a reservation. (asynchronously)
     * With this call you can set a reservation to the status inhouse. It allows only single room reservations to be checked in.              The reservation must have assigned a vacant and clean room.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param checkInDetails Specifies checkIn details, for example Client Identity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check in was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsCheckInAsync(String appId, String appKey, String confirmationId, Integer reservationNumber, CheckInDetails checkInDetails, final ApiCallback<BaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsCheckInValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, checkInDetails, _callback);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsCheckOut
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked out. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check out was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong reservation status, such as it was already checked out. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsCheckOutCall(String appId, String appKey, String confirmationId, Integer reservationNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/check_out"
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()))
            .replace("{" + "reservationNumber" + "}", localVarApiClient.escapeString(reservationNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsCheckOutValidateBeforeCall(String appId, String appKey, String confirmationId, Integer reservationNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsCheckOut(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsCheckOut(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling bookingsCheckOut(Async)");
        }

        // verify the required parameter 'reservationNumber' is set
        if (reservationNumber == null) {
            throw new ApiException("Missing the required parameter 'reservationNumber' when calling bookingsCheckOut(Async)");
        }

        return bookingsCheckOutCall(appId, appKey, confirmationId, reservationNumber, _callback);

    }

    /**
     * Performs a check out operation for a reservation.
     * With this call you can set a reservation to the checkout status. It allows only single room reservations to be checked out.              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked out. (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check out was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong reservation status, such as it was already checked out. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public BaseResponse bookingsCheckOut(String appId, String appKey, String confirmationId, Integer reservationNumber) throws ApiException {
        ApiResponse<BaseResponse> localVarResp = bookingsCheckOutWithHttpInfo(appId, appKey, confirmationId, reservationNumber);
        return localVarResp.getData();
    }

    /**
     * Performs a check out operation for a reservation.
     * With this call you can set a reservation to the checkout status. It allows only single room reservations to be checked out.              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked out. (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check out was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong reservation status, such as it was already checked out. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseResponse> bookingsCheckOutWithHttpInfo(String appId, String appKey, String confirmationId, Integer reservationNumber) throws ApiException {
        okhttp3.Call localVarCall = bookingsCheckOutValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs a check out operation for a reservation. (asynchronously)
     * With this call you can set a reservation to the checkout status. It allows only single room reservations to be checked out.              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked out. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check out was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong reservation status, such as it was already checked out. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsCheckOutAsync(String appId, String appKey, String confirmationId, Integer reservationNumber, final ApiCallback<BaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsCheckOutValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, _callback);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsCreateBooking
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param reservation Specifies the details of the booking to be created. (required)
     * @param sendConfirmation Whether to send a confirmation email to the primary guest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The creation of the booking was successful. You will get back the confirmation id and maybe warnings, if              e.g. the prepayment could not be captured. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsCreateBookingCall(String appId, String appKey, Reservation reservation, Boolean sendConfirmation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reservation;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendConfirmation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendConfirmation", sendConfirmation));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsCreateBookingValidateBeforeCall(String appId, String appKey, Reservation reservation, Boolean sendConfirmation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsCreateBooking(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsCreateBooking(Async)");
        }

        // verify the required parameter 'reservation' is set
        if (reservation == null) {
            throw new ApiException("Missing the required parameter 'reservation' when calling bookingsCreateBooking(Async)");
        }

        return bookingsCreateBookingCall(appId, appKey, reservation, sendConfirmation, _callback);

    }

    /**
     * Create a new booking.
     * Create a new booking as defined in the requests payload. You can get more information about the payload if you check out the              documentation for the reservation request model.&lt;br /&gt;              Please also have a look at the &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/tutorials\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Tutorials&lt;/a&gt;.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param reservation Specifies the details of the booking to be created. (required)
     * @param sendConfirmation Whether to send a confirmation email to the primary guest (optional)
     * @return ReservationConfirmation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The creation of the booking was successful. You will get back the confirmation id and maybe warnings, if              e.g. the prepayment could not be captured. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ReservationConfirmation bookingsCreateBooking(String appId, String appKey, Reservation reservation, Boolean sendConfirmation) throws ApiException {
        ApiResponse<ReservationConfirmation> localVarResp = bookingsCreateBookingWithHttpInfo(appId, appKey, reservation, sendConfirmation);
        return localVarResp.getData();
    }

    /**
     * Create a new booking.
     * Create a new booking as defined in the requests payload. You can get more information about the payload if you check out the              documentation for the reservation request model.&lt;br /&gt;              Please also have a look at the &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/tutorials\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Tutorials&lt;/a&gt;.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param reservation Specifies the details of the booking to be created. (required)
     * @param sendConfirmation Whether to send a confirmation email to the primary guest (optional)
     * @return ApiResponse&lt;ReservationConfirmation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The creation of the booking was successful. You will get back the confirmation id and maybe warnings, if              e.g. the prepayment could not be captured. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationConfirmation> bookingsCreateBookingWithHttpInfo(String appId, String appKey, Reservation reservation, Boolean sendConfirmation) throws ApiException {
        okhttp3.Call localVarCall = bookingsCreateBookingValidateBeforeCall(appId, appKey, reservation, sendConfirmation, null);
        Type localVarReturnType = new TypeToken<ReservationConfirmation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new booking. (asynchronously)
     * Create a new booking as defined in the requests payload. You can get more information about the payload if you check out the              documentation for the reservation request model.&lt;br /&gt;              Please also have a look at the &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/tutorials\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Tutorials&lt;/a&gt;.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param reservation Specifies the details of the booking to be created. (required)
     * @param sendConfirmation Whether to send a confirmation email to the primary guest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The creation of the booking was successful. You will get back the confirmation id and maybe warnings, if              e.g. the prepayment could not be captured. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsCreateBookingAsync(String appId, String appKey, Reservation reservation, Boolean sendConfirmation, final ApiCallback<ReservationConfirmation> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsCreateBookingValidateBeforeCall(appId, appKey, reservation, sendConfirmation, _callback);
        Type localVarReturnType = new TypeToken<ReservationConfirmation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsGetBooking
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking to load. (required)
     * @param expand Specifies the expand type. (optional)
     * @param exclude Specifies the exclude type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all reservations for that booking. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsGetBookingCall(String appId, String appKey, String confirmationId, String expand, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/{confirmationId}"
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsGetBookingValidateBeforeCall(String appId, String appKey, String confirmationId, String expand, String exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsGetBooking(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsGetBooking(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling bookingsGetBooking(Async)");
        }

        return bookingsGetBookingCall(appId, appKey, confirmationId, expand, exclude, _callback);

    }

    /**
     * Load all reservations for one booking by confirmation id.
     * A booking groups all reservations done in one single request and can be identified by the confirmation id.              Guests usually use the confirmation id to check in at the kiosk, on the website or mobile device. In hetras              all reservations of one booking share the room type, rate plan and number of guests per room.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking to load. (required)
     * @param expand Specifies the expand type. (optional)
     * @param exclude Specifies the exclude type. (optional)
     * @return ReservationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all reservations for that booking. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ReservationsResponse bookingsGetBooking(String appId, String appKey, String confirmationId, String expand, String exclude) throws ApiException {
        ApiResponse<ReservationsResponse> localVarResp = bookingsGetBookingWithHttpInfo(appId, appKey, confirmationId, expand, exclude);
        return localVarResp.getData();
    }

    /**
     * Load all reservations for one booking by confirmation id.
     * A booking groups all reservations done in one single request and can be identified by the confirmation id.              Guests usually use the confirmation id to check in at the kiosk, on the website or mobile device. In hetras              all reservations of one booking share the room type, rate plan and number of guests per room.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking to load. (required)
     * @param expand Specifies the expand type. (optional)
     * @param exclude Specifies the exclude type. (optional)
     * @return ApiResponse&lt;ReservationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all reservations for that booking. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationsResponse> bookingsGetBookingWithHttpInfo(String appId, String appKey, String confirmationId, String expand, String exclude) throws ApiException {
        okhttp3.Call localVarCall = bookingsGetBookingValidateBeforeCall(appId, appKey, confirmationId, expand, exclude, null);
        Type localVarReturnType = new TypeToken<ReservationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load all reservations for one booking by confirmation id. (asynchronously)
     * A booking groups all reservations done in one single request and can be identified by the confirmation id.              Guests usually use the confirmation id to check in at the kiosk, on the website or mobile device. In hetras              all reservations of one booking share the room type, rate plan and number of guests per room.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking to load. (required)
     * @param expand Specifies the expand type. (optional)
     * @param exclude Specifies the exclude type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all reservations for that booking. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsGetBookingAsync(String appId, String appKey, String confirmationId, String expand, String exclude, final ApiCallback<ReservationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsGetBookingValidateBeforeCall(appId, appKey, confirmationId, expand, exclude, _callback);
        Type localVarReturnType = new TypeToken<ReservationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsGetBookings
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Only return bookings for this specific hotel. (optional)
     * @param cancellationId Return bookings for this cancellation id. (optional)
     * @param reservationNumber Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels. (optional)
     * @param customerName Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerEmail Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerId Return all bookings the id of one of the guests or the contact matches the specified value. (optional)
     * @param roomNumber Return all bookings having the specified room number assigned. (optional)
     * @param externalId Return all bookings exactly matching the specified external id. This filter is case sensitive. (optional)
     * @param companyName Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param companyId Return all bookings the id of the company or travel agent profile matches the specified value. (optional)
     * @param companyEmail Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param blockCode Return all bookings where the block code matches the specified value. (optional)
     * @param reservationStatuses Return all bookings where the reservation status is one of the specified values. (optional)
     * @param marketCodes Return all bookings where the market code is one of the specified values. (optional)
     * @param channelCodes Return all bookings where the channel code is one of the specified values. (optional)
     * @param subChannelCodes Return all bookings where the subchannel code is one of the specified values. (optional)
     * @param roomTypes Return all bookings where the room type is one of the specified values. (optional)
     * @param ratePlanCodes Return all bookings where the rate plan code is one of the specified values. (optional)
     * @param labels Return all reservations with at least one of the specified labels. (optional)
     * @param from Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later. (optional)
     * @param to End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier. (optional)
     * @param dateFilter Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range. (optional)
     * @param exclude To be able to request reservations without personal data based on GDPR. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of reservations for the requested hotel identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no bookings matching your filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsGetBookingsCall(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hotelId", hotelId));
        }

        if (cancellationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cancellationId", cancellationId));
        }

        if (reservationNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reservationNumber", reservationNumber));
        }

        if (customerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerName", customerName));
        }

        if (customerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerEmail", customerEmail));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (roomNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roomNumber", roomNumber));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalId", externalId));
        }

        if (companyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyName", companyName));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (companyEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyEmail", companyEmail));
        }

        if (blockCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockCode", blockCode));
        }

        if (reservationStatuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "reservationStatuses", reservationStatuses));
        }

        if (marketCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "marketCodes", marketCodes));
        }

        if (channelCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "channelCodes", channelCodes));
        }

        if (subChannelCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "subChannelCodes", subChannelCodes));
        }

        if (roomTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "roomTypes", roomTypes));
        }

        if (ratePlanCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ratePlanCodes", ratePlanCodes));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "labels", labels));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (dateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFilter", dateFilter));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inlinecount", inlinecount));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsGetBookingsValidateBeforeCall(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsGetBookings(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsGetBookings(Async)");
        }

        return bookingsGetBookingsCall(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude, skip, top, inlinecount, _callback);

    }

    /**
     * Find bookings matching the given filter criteria.
     * Here you can easily find bookings matching various criteria. The booking you are looking for has to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get all bookings where the firstname or lastname of a guest or a               contact contains the specified value and that have been done through the defined channel.              A booking can consist of multiple reservations, so even if you are looking for a specific reservation which is part of a multi-room booking you will get              all reservations for this booking returned.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Only return bookings for this specific hotel. (optional)
     * @param cancellationId Return bookings for this cancellation id. (optional)
     * @param reservationNumber Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels. (optional)
     * @param customerName Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerEmail Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerId Return all bookings the id of one of the guests or the contact matches the specified value. (optional)
     * @param roomNumber Return all bookings having the specified room number assigned. (optional)
     * @param externalId Return all bookings exactly matching the specified external id. This filter is case sensitive. (optional)
     * @param companyName Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param companyId Return all bookings the id of the company or travel agent profile matches the specified value. (optional)
     * @param companyEmail Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param blockCode Return all bookings where the block code matches the specified value. (optional)
     * @param reservationStatuses Return all bookings where the reservation status is one of the specified values. (optional)
     * @param marketCodes Return all bookings where the market code is one of the specified values. (optional)
     * @param channelCodes Return all bookings where the channel code is one of the specified values. (optional)
     * @param subChannelCodes Return all bookings where the subchannel code is one of the specified values. (optional)
     * @param roomTypes Return all bookings where the room type is one of the specified values. (optional)
     * @param ratePlanCodes Return all bookings where the rate plan code is one of the specified values. (optional)
     * @param labels Return all reservations with at least one of the specified labels. (optional)
     * @param from Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later. (optional)
     * @param to End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier. (optional)
     * @param dateFilter Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range. (optional)
     * @param exclude To be able to request reservations without personal data based on GDPR. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return BookingListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of reservations for the requested hotel identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no bookings matching your filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public BookingListResponse bookingsGetBookings(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude, Integer skip, Integer top, String inlinecount) throws ApiException {
        ApiResponse<BookingListResponse> localVarResp = bookingsGetBookingsWithHttpInfo(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude, skip, top, inlinecount);
        return localVarResp.getData();
    }

    /**
     * Find bookings matching the given filter criteria.
     * Here you can easily find bookings matching various criteria. The booking you are looking for has to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get all bookings where the firstname or lastname of a guest or a               contact contains the specified value and that have been done through the defined channel.              A booking can consist of multiple reservations, so even if you are looking for a specific reservation which is part of a multi-room booking you will get              all reservations for this booking returned.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Only return bookings for this specific hotel. (optional)
     * @param cancellationId Return bookings for this cancellation id. (optional)
     * @param reservationNumber Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels. (optional)
     * @param customerName Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerEmail Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerId Return all bookings the id of one of the guests or the contact matches the specified value. (optional)
     * @param roomNumber Return all bookings having the specified room number assigned. (optional)
     * @param externalId Return all bookings exactly matching the specified external id. This filter is case sensitive. (optional)
     * @param companyName Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param companyId Return all bookings the id of the company or travel agent profile matches the specified value. (optional)
     * @param companyEmail Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param blockCode Return all bookings where the block code matches the specified value. (optional)
     * @param reservationStatuses Return all bookings where the reservation status is one of the specified values. (optional)
     * @param marketCodes Return all bookings where the market code is one of the specified values. (optional)
     * @param channelCodes Return all bookings where the channel code is one of the specified values. (optional)
     * @param subChannelCodes Return all bookings where the subchannel code is one of the specified values. (optional)
     * @param roomTypes Return all bookings where the room type is one of the specified values. (optional)
     * @param ratePlanCodes Return all bookings where the rate plan code is one of the specified values. (optional)
     * @param labels Return all reservations with at least one of the specified labels. (optional)
     * @param from Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later. (optional)
     * @param to End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier. (optional)
     * @param dateFilter Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range. (optional)
     * @param exclude To be able to request reservations without personal data based on GDPR. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return ApiResponse&lt;BookingListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of reservations for the requested hotel identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no bookings matching your filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookingListResponse> bookingsGetBookingsWithHttpInfo(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude, Integer skip, Integer top, String inlinecount) throws ApiException {
        okhttp3.Call localVarCall = bookingsGetBookingsValidateBeforeCall(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude, skip, top, inlinecount, null);
        Type localVarReturnType = new TypeToken<BookingListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find bookings matching the given filter criteria. (asynchronously)
     * Here you can easily find bookings matching various criteria. The booking you are looking for has to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get all bookings where the firstname or lastname of a guest or a               contact contains the specified value and that have been done through the defined channel.              A booking can consist of multiple reservations, so even if you are looking for a specific reservation which is part of a multi-room booking you will get              all reservations for this booking returned.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Only return bookings for this specific hotel. (optional)
     * @param cancellationId Return bookings for this cancellation id. (optional)
     * @param reservationNumber Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels. (optional)
     * @param customerName Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerEmail Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerId Return all bookings the id of one of the guests or the contact matches the specified value. (optional)
     * @param roomNumber Return all bookings having the specified room number assigned. (optional)
     * @param externalId Return all bookings exactly matching the specified external id. This filter is case sensitive. (optional)
     * @param companyName Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param companyId Return all bookings the id of the company or travel agent profile matches the specified value. (optional)
     * @param companyEmail Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param blockCode Return all bookings where the block code matches the specified value. (optional)
     * @param reservationStatuses Return all bookings where the reservation status is one of the specified values. (optional)
     * @param marketCodes Return all bookings where the market code is one of the specified values. (optional)
     * @param channelCodes Return all bookings where the channel code is one of the specified values. (optional)
     * @param subChannelCodes Return all bookings where the subchannel code is one of the specified values. (optional)
     * @param roomTypes Return all bookings where the room type is one of the specified values. (optional)
     * @param ratePlanCodes Return all bookings where the rate plan code is one of the specified values. (optional)
     * @param labels Return all reservations with at least one of the specified labels. (optional)
     * @param from Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later. (optional)
     * @param to End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier. (optional)
     * @param dateFilter Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range. (optional)
     * @param exclude To be able to request reservations without personal data based on GDPR. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of reservations for the requested hotel identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no bookings matching your filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsGetBookingsAsync(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude, Integer skip, Integer top, String inlinecount, final ApiCallback<BookingListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsGetBookingsValidateBeforeCall(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude, skip, top, inlinecount, _callback);
        Type localVarReturnType = new TypeToken<BookingListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsGetBookingsCount
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Only return bookings for this specific hotel. (optional)
     * @param cancellationId Return bookings for this cancellation id. (optional)
     * @param reservationNumber Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels. (optional)
     * @param customerName Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerEmail Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerId Return all bookings the id of one of the guests or the contact matches the specified value. (optional)
     * @param roomNumber Return all bookings having the specified room number assigned. (optional)
     * @param externalId Return all bookings exactly matching the specified external id. This filter is case sensitive. (optional)
     * @param companyName Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param companyId Return all bookings the id of the company or travel agent profile matches the specified value. (optional)
     * @param companyEmail Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param blockCode Return all bookings where the block code matches the specified value. (optional)
     * @param reservationStatuses Return all bookings where the reservation status is one of the specified values. (optional)
     * @param marketCodes Return all bookings where the market code is one of the specified values. (optional)
     * @param channelCodes Return all bookings where the channel code is one of the specified values. (optional)
     * @param subChannelCodes Return all bookings where the subchannel code is one of the specified values. (optional)
     * @param roomTypes Return all bookings where the room type is one of the specified values. (optional)
     * @param ratePlanCodes Return all bookings where the rate plan code is one of the specified values. (optional)
     * @param labels Return all reservations with at least one of the specified labels. (optional)
     * @param from Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later. (optional)
     * @param to End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier. (optional)
     * @param dateFilter Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range. (optional)
     * @param exclude To be able to request reservations without personal data based on GDPR. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The total booking count for a given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsGetBookingsCountCall(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/$count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hotelId", hotelId));
        }

        if (cancellationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cancellationId", cancellationId));
        }

        if (reservationNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reservationNumber", reservationNumber));
        }

        if (customerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerName", customerName));
        }

        if (customerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerEmail", customerEmail));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (roomNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roomNumber", roomNumber));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalId", externalId));
        }

        if (companyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyName", companyName));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (companyEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyEmail", companyEmail));
        }

        if (blockCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockCode", blockCode));
        }

        if (reservationStatuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "reservationStatuses", reservationStatuses));
        }

        if (marketCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "marketCodes", marketCodes));
        }

        if (channelCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "channelCodes", channelCodes));
        }

        if (subChannelCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "subChannelCodes", subChannelCodes));
        }

        if (roomTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "roomTypes", roomTypes));
        }

        if (ratePlanCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ratePlanCodes", ratePlanCodes));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "labels", labels));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (dateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFilter", dateFilter));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsGetBookingsCountValidateBeforeCall(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsGetBookingsCount(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsGetBookingsCount(Async)");
        }

        return bookingsGetBookingsCountCall(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude, _callback);

    }

    /**
     * Get total count of bookings matchung the given filter criteria.
     * Get the count of all bookings matching your criteria. The bookings have to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get the count for all bookings where the firstname or lastname               of a guest or a contact contains the specified value and that have been done through the defined channel.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Only return bookings for this specific hotel. (optional)
     * @param cancellationId Return bookings for this cancellation id. (optional)
     * @param reservationNumber Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels. (optional)
     * @param customerName Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerEmail Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerId Return all bookings the id of one of the guests or the contact matches the specified value. (optional)
     * @param roomNumber Return all bookings having the specified room number assigned. (optional)
     * @param externalId Return all bookings exactly matching the specified external id. This filter is case sensitive. (optional)
     * @param companyName Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param companyId Return all bookings the id of the company or travel agent profile matches the specified value. (optional)
     * @param companyEmail Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param blockCode Return all bookings where the block code matches the specified value. (optional)
     * @param reservationStatuses Return all bookings where the reservation status is one of the specified values. (optional)
     * @param marketCodes Return all bookings where the market code is one of the specified values. (optional)
     * @param channelCodes Return all bookings where the channel code is one of the specified values. (optional)
     * @param subChannelCodes Return all bookings where the subchannel code is one of the specified values. (optional)
     * @param roomTypes Return all bookings where the room type is one of the specified values. (optional)
     * @param ratePlanCodes Return all bookings where the rate plan code is one of the specified values. (optional)
     * @param labels Return all reservations with at least one of the specified labels. (optional)
     * @param from Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later. (optional)
     * @param to End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier. (optional)
     * @param dateFilter Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range. (optional)
     * @param exclude To be able to request reservations without personal data based on GDPR. (optional)
     * @return TotalCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The total booking count for a given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public TotalCountResponse bookingsGetBookingsCount(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude) throws ApiException {
        ApiResponse<TotalCountResponse> localVarResp = bookingsGetBookingsCountWithHttpInfo(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude);
        return localVarResp.getData();
    }

    /**
     * Get total count of bookings matchung the given filter criteria.
     * Get the count of all bookings matching your criteria. The bookings have to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get the count for all bookings where the firstname or lastname               of a guest or a contact contains the specified value and that have been done through the defined channel.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Only return bookings for this specific hotel. (optional)
     * @param cancellationId Return bookings for this cancellation id. (optional)
     * @param reservationNumber Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels. (optional)
     * @param customerName Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerEmail Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerId Return all bookings the id of one of the guests or the contact matches the specified value. (optional)
     * @param roomNumber Return all bookings having the specified room number assigned. (optional)
     * @param externalId Return all bookings exactly matching the specified external id. This filter is case sensitive. (optional)
     * @param companyName Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param companyId Return all bookings the id of the company or travel agent profile matches the specified value. (optional)
     * @param companyEmail Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param blockCode Return all bookings where the block code matches the specified value. (optional)
     * @param reservationStatuses Return all bookings where the reservation status is one of the specified values. (optional)
     * @param marketCodes Return all bookings where the market code is one of the specified values. (optional)
     * @param channelCodes Return all bookings where the channel code is one of the specified values. (optional)
     * @param subChannelCodes Return all bookings where the subchannel code is one of the specified values. (optional)
     * @param roomTypes Return all bookings where the room type is one of the specified values. (optional)
     * @param ratePlanCodes Return all bookings where the rate plan code is one of the specified values. (optional)
     * @param labels Return all reservations with at least one of the specified labels. (optional)
     * @param from Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later. (optional)
     * @param to End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier. (optional)
     * @param dateFilter Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range. (optional)
     * @param exclude To be able to request reservations without personal data based on GDPR. (optional)
     * @return ApiResponse&lt;TotalCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The total booking count for a given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TotalCountResponse> bookingsGetBookingsCountWithHttpInfo(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude) throws ApiException {
        okhttp3.Call localVarCall = bookingsGetBookingsCountValidateBeforeCall(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude, null);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get total count of bookings matchung the given filter criteria. (asynchronously)
     * Get the count of all bookings matching your criteria. The bookings have to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get the count for all bookings where the firstname or lastname               of a guest or a contact contains the specified value and that have been done through the defined channel.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Only return bookings for this specific hotel. (optional)
     * @param cancellationId Return bookings for this cancellation id. (optional)
     * @param reservationNumber Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels. (optional)
     * @param customerName Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerEmail Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param customerId Return all bookings the id of one of the guests or the contact matches the specified value. (optional)
     * @param roomNumber Return all bookings having the specified room number assigned. (optional)
     * @param externalId Return all bookings exactly matching the specified external id. This filter is case sensitive. (optional)
     * @param companyName Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param companyId Return all bookings the id of the company or travel agent profile matches the specified value. (optional)
     * @param companyEmail Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces. (optional)
     * @param blockCode Return all bookings where the block code matches the specified value. (optional)
     * @param reservationStatuses Return all bookings where the reservation status is one of the specified values. (optional)
     * @param marketCodes Return all bookings where the market code is one of the specified values. (optional)
     * @param channelCodes Return all bookings where the channel code is one of the specified values. (optional)
     * @param subChannelCodes Return all bookings where the subchannel code is one of the specified values. (optional)
     * @param roomTypes Return all bookings where the room type is one of the specified values. (optional)
     * @param ratePlanCodes Return all bookings where the rate plan code is one of the specified values. (optional)
     * @param labels Return all reservations with at least one of the specified labels. (optional)
     * @param from Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later. (optional)
     * @param to End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier. (optional)
     * @param dateFilter Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range. (optional)
     * @param exclude To be able to request reservations without personal data based on GDPR. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The total booking count for a given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsGetBookingsCountAsync(String appId, String appKey, Integer hotelId, String cancellationId, Integer reservationNumber, String customerName, String customerEmail, String customerId, String roomNumber, String externalId, String companyName, String companyId, String companyEmail, String blockCode, List<String> reservationStatuses, List<String> marketCodes, List<String> channelCodes, List<String> subChannelCodes, List<String> roomTypes, List<String> ratePlanCodes, List<String> labels, OffsetDateTime from, OffsetDateTime to, String dateFilter, String exclude, final ApiCallback<TotalCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsGetBookingsCountValidateBeforeCall(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude, _callback);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsGetReservation
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to load. (required)
     * @param expand Specifies the expand type. (optional)
     * @param exclude Specifies the exclude type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of the reservation specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsGetReservationCall(String appId, String appKey, String confirmationId, Integer reservationNumber, String expand, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}"
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()))
            .replace("{" + "reservationNumber" + "}", localVarApiClient.escapeString(reservationNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsGetReservationValidateBeforeCall(String appId, String appKey, String confirmationId, Integer reservationNumber, String expand, String exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsGetReservation(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsGetReservation(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling bookingsGetReservation(Async)");
        }

        // verify the required parameter 'reservationNumber' is set
        if (reservationNumber == null) {
            throw new ApiException("Missing the required parameter 'reservationNumber' when calling bookingsGetReservation(Async)");
        }

        return bookingsGetReservationCall(appId, appKey, confirmationId, reservationNumber, expand, exclude, _callback);

    }

    /**
     * Load a specific reservation from a booking.
     * With this request you can load one specific reservation done with one booking request.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to load. (required)
     * @param expand Specifies the expand type. (optional)
     * @param exclude Specifies the exclude type. (optional)
     * @return ReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of the reservation specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ReservationResponse bookingsGetReservation(String appId, String appKey, String confirmationId, Integer reservationNumber, String expand, String exclude) throws ApiException {
        ApiResponse<ReservationResponse> localVarResp = bookingsGetReservationWithHttpInfo(appId, appKey, confirmationId, reservationNumber, expand, exclude);
        return localVarResp.getData();
    }

    /**
     * Load a specific reservation from a booking.
     * With this request you can load one specific reservation done with one booking request.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to load. (required)
     * @param expand Specifies the expand type. (optional)
     * @param exclude Specifies the exclude type. (optional)
     * @return ApiResponse&lt;ReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of the reservation specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationResponse> bookingsGetReservationWithHttpInfo(String appId, String appKey, String confirmationId, Integer reservationNumber, String expand, String exclude) throws ApiException {
        okhttp3.Call localVarCall = bookingsGetReservationValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, expand, exclude, null);
        Type localVarReturnType = new TypeToken<ReservationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a specific reservation from a booking. (asynchronously)
     * With this request you can load one specific reservation done with one booking request.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to load. (required)
     * @param expand Specifies the expand type. (optional)
     * @param exclude Specifies the exclude type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of the reservation specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsGetReservationAsync(String appId, String appKey, String confirmationId, Integer reservationNumber, String expand, String exclude, final ApiCallback<ReservationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsGetReservationValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, expand, exclude, _callback);
        Type localVarReturnType = new TypeToken<ReservationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsPatch
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation that has to be updated. (required)
     * @param patchRequest A set of JSON Patch operations (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful. Reponse would contain a referer to the updated reservation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsPatchCall(String appId, String appKey, String confirmationId, Integer reservationNumber, List<OperationReservationPatchableModel> patchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchRequest;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}"
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()))
            .replace("{" + "reservationNumber" + "}", localVarApiClient.escapeString(reservationNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsPatchValidateBeforeCall(String appId, String appKey, String confirmationId, Integer reservationNumber, List<OperationReservationPatchableModel> patchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsPatch(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsPatch(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling bookingsPatch(Async)");
        }

        // verify the required parameter 'reservationNumber' is set
        if (reservationNumber == null) {
            throw new ApiException("Missing the required parameter 'reservationNumber' when calling bookingsPatch(Async)");
        }

        // verify the required parameter 'patchRequest' is set
        if (patchRequest == null) {
            throw new ApiException("Missing the required parameter 'patchRequest' when calling bookingsPatch(Async)");
        }

        return bookingsPatchCall(appId, appKey, confirmationId, reservationNumber, patchRequest, _callback);

    }

    /**
     * Partially updates a reservation.
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call allows to update the following fields:              external_id, market_code, channel_code, subchannel_code, guarantee_type, comment, addon_services, labels, guests, contact and company.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/addon_services\&quot;, \&quot;value\&quot;: [\&quot;BREAKFAST\&quot;, \&quot;PARKING\&quot;]                },                {                  \&quot;op\&quot;: \&quot;add\&quot;, \&quot;path\&quot;: \&quot;/labels/-\&quot;, \&quot;value\&quot;: \&quot;MOBILE\&quot;                },                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/guests/SHOW-1234\&quot;, \&quot;value\&quot;: { \&quot;customer_id\&quot;: \&quot;SHOW-1234\&quot;, \&quot;primary\&quot;: false }                },                {                  \&quot;op\&quot;: \&quot;add\&quot;, \&quot;path\&quot;: \&quot;/guests/-\&quot;, \&quot;value\&quot;: { \&quot;customer_id\&quot;: \&quot;SHOW-5678\&quot;, \&quot;primary\&quot;: true }                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation that has to be updated. (required)
     * @param patchRequest A set of JSON Patch operations (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful. Reponse would contain a referer to the updated reservation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Object bookingsPatch(String appId, String appKey, String confirmationId, Integer reservationNumber, List<OperationReservationPatchableModel> patchRequest) throws ApiException {
        ApiResponse<Object> localVarResp = bookingsPatchWithHttpInfo(appId, appKey, confirmationId, reservationNumber, patchRequest);
        return localVarResp.getData();
    }

    /**
     * Partially updates a reservation.
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call allows to update the following fields:              external_id, market_code, channel_code, subchannel_code, guarantee_type, comment, addon_services, labels, guests, contact and company.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/addon_services\&quot;, \&quot;value\&quot;: [\&quot;BREAKFAST\&quot;, \&quot;PARKING\&quot;]                },                {                  \&quot;op\&quot;: \&quot;add\&quot;, \&quot;path\&quot;: \&quot;/labels/-\&quot;, \&quot;value\&quot;: \&quot;MOBILE\&quot;                },                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/guests/SHOW-1234\&quot;, \&quot;value\&quot;: { \&quot;customer_id\&quot;: \&quot;SHOW-1234\&quot;, \&quot;primary\&quot;: false }                },                {                  \&quot;op\&quot;: \&quot;add\&quot;, \&quot;path\&quot;: \&quot;/guests/-\&quot;, \&quot;value\&quot;: { \&quot;customer_id\&quot;: \&quot;SHOW-5678\&quot;, \&quot;primary\&quot;: true }                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation that has to be updated. (required)
     * @param patchRequest A set of JSON Patch operations (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful. Reponse would contain a referer to the updated reservation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> bookingsPatchWithHttpInfo(String appId, String appKey, String confirmationId, Integer reservationNumber, List<OperationReservationPatchableModel> patchRequest) throws ApiException {
        okhttp3.Call localVarCall = bookingsPatchValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, patchRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially updates a reservation. (asynchronously)
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call allows to update the following fields:              external_id, market_code, channel_code, subchannel_code, guarantee_type, comment, addon_services, labels, guests, contact and company.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/addon_services\&quot;, \&quot;value\&quot;: [\&quot;BREAKFAST\&quot;, \&quot;PARKING\&quot;]                },                {                  \&quot;op\&quot;: \&quot;add\&quot;, \&quot;path\&quot;: \&quot;/labels/-\&quot;, \&quot;value\&quot;: \&quot;MOBILE\&quot;                },                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/guests/SHOW-1234\&quot;, \&quot;value\&quot;: { \&quot;customer_id\&quot;: \&quot;SHOW-1234\&quot;, \&quot;primary\&quot;: false }                },                {                  \&quot;op\&quot;: \&quot;add\&quot;, \&quot;path\&quot;: \&quot;/guests/-\&quot;, \&quot;value\&quot;: { \&quot;customer_id\&quot;: \&quot;SHOW-5678\&quot;, \&quot;primary\&quot;: true }                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation that has to be updated. (required)
     * @param patchRequest A set of JSON Patch operations (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful. Reponse would contain a referer to the updated reservation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsPatchAsync(String appId, String appKey, String confirmationId, Integer reservationNumber, List<OperationReservationPatchableModel> patchRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsPatchValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, patchRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsPaymentToken
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param authorizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payment token was added successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsPaymentTokenCall(String appId, String appKey, String confirmationId, Integer reservationNumber, AuthorizationRequest authorizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationRequest;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/payment_token"
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()))
            .replace("{" + "reservationNumber" + "}", localVarApiClient.escapeString(reservationNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsPaymentTokenValidateBeforeCall(String appId, String appKey, String confirmationId, Integer reservationNumber, AuthorizationRequest authorizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsPaymentToken(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsPaymentToken(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling bookingsPaymentToken(Async)");
        }

        // verify the required parameter 'reservationNumber' is set
        if (reservationNumber == null) {
            throw new ApiException("Missing the required parameter 'reservationNumber' when calling bookingsPaymentToken(Async)");
        }

        // verify the required parameter 'authorizationRequest' is set
        if (authorizationRequest == null) {
            throw new ApiException("Missing the required parameter 'authorizationRequest' when calling bookingsPaymentToken(Async)");
        }

        return bookingsPaymentTokenCall(appId, appKey, confirmationId, reservationNumber, authorizationRequest, _callback);

    }

    /**
     * Post a payment token for a reservation.
     * TBD.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param authorizationRequest  (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payment token was added successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public BaseResponse bookingsPaymentToken(String appId, String appKey, String confirmationId, Integer reservationNumber, AuthorizationRequest authorizationRequest) throws ApiException {
        ApiResponse<BaseResponse> localVarResp = bookingsPaymentTokenWithHttpInfo(appId, appKey, confirmationId, reservationNumber, authorizationRequest);
        return localVarResp.getData();
    }

    /**
     * Post a payment token for a reservation.
     * TBD.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param authorizationRequest  (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payment token was added successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseResponse> bookingsPaymentTokenWithHttpInfo(String appId, String appKey, String confirmationId, Integer reservationNumber, AuthorizationRequest authorizationRequest) throws ApiException {
        okhttp3.Call localVarCall = bookingsPaymentTokenValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, authorizationRequest, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post a payment token for a reservation. (asynchronously)
     * TBD.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param authorizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payment token was added successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsPaymentTokenAsync(String appId, String appKey, String confirmationId, Integer reservationNumber, AuthorizationRequest authorizationRequest, final ApiCallback<BaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsPaymentTokenValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, authorizationRequest, _callback);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsPostRoomAssignment
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation the room should be assigned to. (required)
     * @param assigningCriteria Specifies the criteria for the room selection. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The room assignment was successful. The Reponse would contain the room number assigned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be no available rooms or a mismatch of room types etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsPostRoomAssignmentCall(String appId, String appKey, String confirmationId, Integer reservationNumber, AssignRoomCriteria assigningCriteria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assigningCriteria;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/assign_room"
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()))
            .replace("{" + "reservationNumber" + "}", localVarApiClient.escapeString(reservationNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsPostRoomAssignmentValidateBeforeCall(String appId, String appKey, String confirmationId, Integer reservationNumber, AssignRoomCriteria assigningCriteria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsPostRoomAssignment(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsPostRoomAssignment(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling bookingsPostRoomAssignment(Async)");
        }

        // verify the required parameter 'reservationNumber' is set
        if (reservationNumber == null) {
            throw new ApiException("Missing the required parameter 'reservationNumber' when calling bookingsPostRoomAssignment(Async)");
        }

        return bookingsPostRoomAssignmentCall(appId, appKey, confirmationId, reservationNumber, assigningCriteria, _callback);

    }

    /**
     * Assign a room to a reservation.
     * By default this API call assigns a random room, which has the proper room type, is not already assigned              to another reservation or has any maintenance status set for the stay period of the underlying reservation. If the              arrival date for the underlying reservation is the current business day dirty rooms are excluded by default. For reservation              arriving on any latter day the room condition is not taken into account.&lt;br /&gt;              By specifiying the room selection criteria in the request body you can influence which room will be assigned. See the request model              for further details.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation the room should be assigned to. (required)
     * @param assigningCriteria Specifies the criteria for the room selection. (optional)
     * @return AssignRoomResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The room assignment was successful. The Reponse would contain the room number assigned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be no available rooms or a mismatch of room types etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public AssignRoomResponse bookingsPostRoomAssignment(String appId, String appKey, String confirmationId, Integer reservationNumber, AssignRoomCriteria assigningCriteria) throws ApiException {
        ApiResponse<AssignRoomResponse> localVarResp = bookingsPostRoomAssignmentWithHttpInfo(appId, appKey, confirmationId, reservationNumber, assigningCriteria);
        return localVarResp.getData();
    }

    /**
     * Assign a room to a reservation.
     * By default this API call assigns a random room, which has the proper room type, is not already assigned              to another reservation or has any maintenance status set for the stay period of the underlying reservation. If the              arrival date for the underlying reservation is the current business day dirty rooms are excluded by default. For reservation              arriving on any latter day the room condition is not taken into account.&lt;br /&gt;              By specifiying the room selection criteria in the request body you can influence which room will be assigned. See the request model              for further details.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation the room should be assigned to. (required)
     * @param assigningCriteria Specifies the criteria for the room selection. (optional)
     * @return ApiResponse&lt;AssignRoomResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The room assignment was successful. The Reponse would contain the room number assigned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be no available rooms or a mismatch of room types etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignRoomResponse> bookingsPostRoomAssignmentWithHttpInfo(String appId, String appKey, String confirmationId, Integer reservationNumber, AssignRoomCriteria assigningCriteria) throws ApiException {
        okhttp3.Call localVarCall = bookingsPostRoomAssignmentValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, assigningCriteria, null);
        Type localVarReturnType = new TypeToken<AssignRoomResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign a room to a reservation. (asynchronously)
     * By default this API call assigns a random room, which has the proper room type, is not already assigned              to another reservation or has any maintenance status set for the stay period of the underlying reservation. If the              arrival date for the underlying reservation is the current business day dirty rooms are excluded by default. For reservation              arriving on any latter day the room condition is not taken into account.&lt;br /&gt;              By specifiying the room selection criteria in the request body you can influence which room will be assigned. See the request model              for further details.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation the room should be assigned to. (required)
     * @param assigningCriteria Specifies the criteria for the room selection. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The room assignment was successful. The Reponse would contain the room number assigned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be no available rooms or a mismatch of room types etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsPostRoomAssignmentAsync(String appId, String appKey, String confirmationId, Integer reservationNumber, AssignRoomCriteria assigningCriteria, final ApiCallback<AssignRoomResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsPostRoomAssignmentValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, assigningCriteria, _callback);
        Type localVarReturnType = new TypeToken<AssignRoomResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bookingsTerminalAuthorization
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param authorizationRequest Specifies authorization details, such as amount and client identity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsTerminalAuthorizationCall(String appId, String appKey, String confirmationId, Integer reservationNumber, TerminalAuthorizationRequest authorizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationRequest;

        // create path and map variables
        String localVarPath = "/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/pre_authorize"
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()))
            .replace("{" + "reservationNumber" + "}", localVarApiClient.escapeString(reservationNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookingsTerminalAuthorizationValidateBeforeCall(String appId, String appKey, String confirmationId, Integer reservationNumber, TerminalAuthorizationRequest authorizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bookingsTerminalAuthorization(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling bookingsTerminalAuthorization(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling bookingsTerminalAuthorization(Async)");
        }

        // verify the required parameter 'reservationNumber' is set
        if (reservationNumber == null) {
            throw new ApiException("Missing the required parameter 'reservationNumber' when calling bookingsTerminalAuthorization(Async)");
        }

        // verify the required parameter 'authorizationRequest' is set
        if (authorizationRequest == null) {
            throw new ApiException("Missing the required parameter 'authorizationRequest' when calling bookingsTerminalAuthorization(Async)");
        }

        return bookingsTerminalAuthorizationCall(appId, appKey, confirmationId, reservationNumber, authorizationRequest, _callback);

    }

    /**
     * Performs a chip and pin credit card authorization for a reservation.
     * With this call you can trigger a terminal authorization prompt for a reservation guest.               For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param authorizationRequest Specifies authorization details, such as amount and client identity. (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public BaseResponse bookingsTerminalAuthorization(String appId, String appKey, String confirmationId, Integer reservationNumber, TerminalAuthorizationRequest authorizationRequest) throws ApiException {
        ApiResponse<BaseResponse> localVarResp = bookingsTerminalAuthorizationWithHttpInfo(appId, appKey, confirmationId, reservationNumber, authorizationRequest);
        return localVarResp.getData();
    }

    /**
     * Performs a chip and pin credit card authorization for a reservation.
     * With this call you can trigger a terminal authorization prompt for a reservation guest.               For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param authorizationRequest Specifies authorization details, such as amount and client identity. (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseResponse> bookingsTerminalAuthorizationWithHttpInfo(String appId, String appKey, String confirmationId, Integer reservationNumber, TerminalAuthorizationRequest authorizationRequest) throws ApiException {
        okhttp3.Call localVarCall = bookingsTerminalAuthorizationValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, authorizationRequest, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs a chip and pin credit card authorization for a reservation. (asynchronously)
     * With this call you can trigger a terminal authorization prompt for a reservation guest.               For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param confirmationId The confirmation id for the booking the reservation was made. (required)
     * @param reservationNumber Specifies the reservation number for the reservation to be checked in. (required)
     * @param authorizationRequest Specifies authorization details, such as amount and client identity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. The reason could be wrong room or reservation status, wrong start date of reservation etc. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bookingsTerminalAuthorizationAsync(String appId, String appKey, String confirmationId, Integer reservationNumber, TerminalAuthorizationRequest authorizationRequest, final ApiCallback<BaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookingsTerminalAuthorizationValidateBeforeCall(appId, appKey, confirmationId, reservationNumber, authorizationRequest, _callback);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
