/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancellationToken;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TotalCountResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlocksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BlocksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlocksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for blocksGetBlocksAsync
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param token  (required)
     * @param hotelId Only return blocks for this specific hotel. (optional)
     * @param groupCode Filter the blocks by the specified group code (optional)
     * @param from Return all blocks where the block&#39;s last_departure is greater than specified date. (optional)
     * @param to Return all blocks where the block&#39;s last_departure is less than specified date. (optional)
     * @param status Return all blocks where the block status is one of the specified values. (optional)
     * @param ratePlanCodes Return all blocks that have related the specified comma-separated rate plans. (optional)
     * @param countDetails If true it will include also details of block count per each room type. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of blocks matching the provided filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no blocks matching your filter criteria. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksGetBlocksAsyncCall(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = token;

        // create path and map variables
        String localVarPath = "/api/booking/v0/blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hotelId", hotelId));
        }

        if (groupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupCode", groupCode));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (ratePlanCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ratePlanCodes", ratePlanCodes));
        }

        if (countDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countDetails", countDetails));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inlinecount", inlinecount));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksGetBlocksAsyncValidateBeforeCall(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling blocksGetBlocksAsync(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling blocksGetBlocksAsync(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling blocksGetBlocksAsync(Async)");
        }

        return blocksGetBlocksAsyncCall(appId, appKey, token, hotelId, groupCode, from, to, status, ratePlanCodes, countDetails, skip, top, inlinecount, _callback);

    }

    /**
     * Gets a list of blocks.
     * With this endpoint you can request a list of blocks for the hotel chain. Currently we only support to optionally              filter by the group code linked to the block. Additional filters will be available soon.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param token  (required)
     * @param hotelId Only return blocks for this specific hotel. (optional)
     * @param groupCode Filter the blocks by the specified group code (optional)
     * @param from Return all blocks where the block&#39;s last_departure is greater than specified date. (optional)
     * @param to Return all blocks where the block&#39;s last_departure is less than specified date. (optional)
     * @param status Return all blocks where the block status is one of the specified values. (optional)
     * @param ratePlanCodes Return all blocks that have related the specified comma-separated rate plans. (optional)
     * @param countDetails If true it will include also details of block count per each room type. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of blocks matching the provided filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no blocks matching your filter criteria. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Object blocksGetBlocksAsync(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails, Integer skip, Integer top, String inlinecount) throws ApiException {
        ApiResponse<Object> localVarResp = blocksGetBlocksAsyncWithHttpInfo(appId, appKey, token, hotelId, groupCode, from, to, status, ratePlanCodes, countDetails, skip, top, inlinecount);
        return localVarResp.getData();
    }

    /**
     * Gets a list of blocks.
     * With this endpoint you can request a list of blocks for the hotel chain. Currently we only support to optionally              filter by the group code linked to the block. Additional filters will be available soon.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param token  (required)
     * @param hotelId Only return blocks for this specific hotel. (optional)
     * @param groupCode Filter the blocks by the specified group code (optional)
     * @param from Return all blocks where the block&#39;s last_departure is greater than specified date. (optional)
     * @param to Return all blocks where the block&#39;s last_departure is less than specified date. (optional)
     * @param status Return all blocks where the block status is one of the specified values. (optional)
     * @param ratePlanCodes Return all blocks that have related the specified comma-separated rate plans. (optional)
     * @param countDetails If true it will include also details of block count per each room type. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of blocks matching the provided filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no blocks matching your filter criteria. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blocksGetBlocksAsyncWithHttpInfo(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails, Integer skip, Integer top, String inlinecount) throws ApiException {
        okhttp3.Call localVarCall = blocksGetBlocksAsyncValidateBeforeCall(appId, appKey, token, hotelId, groupCode, from, to, status, ratePlanCodes, countDetails, skip, top, inlinecount, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of blocks. (asynchronously)
     * With this endpoint you can request a list of blocks for the hotel chain. Currently we only support to optionally              filter by the group code linked to the block. Additional filters will be available soon.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param token  (required)
     * @param hotelId Only return blocks for this specific hotel. (optional)
     * @param groupCode Filter the blocks by the specified group code (optional)
     * @param from Return all blocks where the block&#39;s last_departure is greater than specified date. (optional)
     * @param to Return all blocks where the block&#39;s last_departure is less than specified date. (optional)
     * @param status Return all blocks where the block status is one of the specified values. (optional)
     * @param ratePlanCodes Return all blocks that have related the specified comma-separated rate plans. (optional)
     * @param countDetails If true it will include also details of block count per each room type. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of blocks matching the provided filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no blocks matching your filter criteria. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksGetBlocksAsyncAsync(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails, Integer skip, Integer top, String inlinecount, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksGetBlocksAsyncValidateBeforeCall(appId, appKey, token, hotelId, groupCode, from, to, status, ratePlanCodes, countDetails, skip, top, inlinecount, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocksGetBlocksCountAsync
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param token  (required)
     * @param hotelId Only return blocks for this specific hotel. (optional)
     * @param groupCode Filter the blocks by the specified group code (optional)
     * @param from Return all blocks where the block&#39;s last_departure is greater than specified date. (optional)
     * @param to Return all blocks where the block&#39;s last_departure is less than specified date. (optional)
     * @param status Return all blocks where the block status is one of the specified values. (optional)
     * @param ratePlanCodes Return all blocks that have related the specified comma-separated rate plans. (optional)
     * @param countDetails If true it will include also details of block count per each room type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The total blocks count for a given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We couldn&#39;t return the representation due to an internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksGetBlocksCountAsyncCall(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = token;

        // create path and map variables
        String localVarPath = "/api/booking/v0/blocks/$count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hotelId", hotelId));
        }

        if (groupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupCode", groupCode));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (ratePlanCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ratePlanCodes", ratePlanCodes));
        }

        if (countDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countDetails", countDetails));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksGetBlocksCountAsyncValidateBeforeCall(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling blocksGetBlocksCountAsync(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling blocksGetBlocksCountAsync(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling blocksGetBlocksCountAsync(Async)");
        }

        return blocksGetBlocksCountAsyncCall(appId, appKey, token, hotelId, groupCode, from, to, status, ratePlanCodes, countDetails, _callback);

    }

    /**
     * Get total blocks count that match the given filter criteria.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param token  (required)
     * @param hotelId Only return blocks for this specific hotel. (optional)
     * @param groupCode Filter the blocks by the specified group code (optional)
     * @param from Return all blocks where the block&#39;s last_departure is greater than specified date. (optional)
     * @param to Return all blocks where the block&#39;s last_departure is less than specified date. (optional)
     * @param status Return all blocks where the block status is one of the specified values. (optional)
     * @param ratePlanCodes Return all blocks that have related the specified comma-separated rate plans. (optional)
     * @param countDetails If true it will include also details of block count per each room type. (optional)
     * @return TotalCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The total blocks count for a given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We couldn&#39;t return the representation due to an internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public TotalCountResponse blocksGetBlocksCountAsync(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails) throws ApiException {
        ApiResponse<TotalCountResponse> localVarResp = blocksGetBlocksCountAsyncWithHttpInfo(appId, appKey, token, hotelId, groupCode, from, to, status, ratePlanCodes, countDetails);
        return localVarResp.getData();
    }

    /**
     * Get total blocks count that match the given filter criteria.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param token  (required)
     * @param hotelId Only return blocks for this specific hotel. (optional)
     * @param groupCode Filter the blocks by the specified group code (optional)
     * @param from Return all blocks where the block&#39;s last_departure is greater than specified date. (optional)
     * @param to Return all blocks where the block&#39;s last_departure is less than specified date. (optional)
     * @param status Return all blocks where the block status is one of the specified values. (optional)
     * @param ratePlanCodes Return all blocks that have related the specified comma-separated rate plans. (optional)
     * @param countDetails If true it will include also details of block count per each room type. (optional)
     * @return ApiResponse&lt;TotalCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The total blocks count for a given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We couldn&#39;t return the representation due to an internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TotalCountResponse> blocksGetBlocksCountAsyncWithHttpInfo(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails) throws ApiException {
        okhttp3.Call localVarCall = blocksGetBlocksCountAsyncValidateBeforeCall(appId, appKey, token, hotelId, groupCode, from, to, status, ratePlanCodes, countDetails, null);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get total blocks count that match the given filter criteria. (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param token  (required)
     * @param hotelId Only return blocks for this specific hotel. (optional)
     * @param groupCode Filter the blocks by the specified group code (optional)
     * @param from Return all blocks where the block&#39;s last_departure is greater than specified date. (optional)
     * @param to Return all blocks where the block&#39;s last_departure is less than specified date. (optional)
     * @param status Return all blocks where the block status is one of the specified values. (optional)
     * @param ratePlanCodes Return all blocks that have related the specified comma-separated rate plans. (optional)
     * @param countDetails If true it will include also details of block count per each room type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The total blocks count for a given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We couldn&#39;t return the representation due to an internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksGetBlocksCountAsyncAsync(String appId, String appKey, CancellationToken token, Integer hotelId, String groupCode, OffsetDateTime from, OffsetDateTime to, String status, List<String> ratePlanCodes, Boolean countDetails, final ApiCallback<TotalCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksGetBlocksCountAsyncValidateBeforeCall(appId, appKey, token, hotelId, groupCode, from, to, status, ratePlanCodes, countDetails, _callback);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocksGetSingleBlockAsync
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param blockCode Specifies the block code. The block code is composed of the hotel code, a dash and the block code               as shown in the hetras UI. (required)
     * @param token  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns you all details for the specific block. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksGetSingleBlockAsyncCall(String appId, String appKey, String blockCode, CancellationToken token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = token;

        // create path and map variables
        String localVarPath = "/api/booking/v0/blocks/{blockCode}"
            .replace("{" + "blockCode" + "}", localVarApiClient.escapeString(blockCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksGetSingleBlockAsyncValidateBeforeCall(String appId, String appKey, String blockCode, CancellationToken token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling blocksGetSingleBlockAsync(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling blocksGetSingleBlockAsync(Async)");
        }

        // verify the required parameter 'blockCode' is set
        if (blockCode == null) {
            throw new ApiException("Missing the required parameter 'blockCode' when calling blocksGetSingleBlockAsync(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling blocksGetSingleBlockAsync(Async)");
        }

        return blocksGetSingleBlockAsyncCall(appId, appKey, blockCode, token, _callback);

    }

    /**
     * Gets the details for a specific block.
     * Read all informationen about a block including the numbers of blocked rooms per room type and business day.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param blockCode Specifies the block code. The block code is composed of the hotel code, a dash and the block code               as shown in the hetras UI. (required)
     * @param token  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns you all details for the specific block. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Object blocksGetSingleBlockAsync(String appId, String appKey, String blockCode, CancellationToken token) throws ApiException {
        ApiResponse<Object> localVarResp = blocksGetSingleBlockAsyncWithHttpInfo(appId, appKey, blockCode, token);
        return localVarResp.getData();
    }

    /**
     * Gets the details for a specific block.
     * Read all informationen about a block including the numbers of blocked rooms per room type and business day.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param blockCode Specifies the block code. The block code is composed of the hotel code, a dash and the block code               as shown in the hetras UI. (required)
     * @param token  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns you all details for the specific block. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blocksGetSingleBlockAsyncWithHttpInfo(String appId, String appKey, String blockCode, CancellationToken token) throws ApiException {
        okhttp3.Call localVarCall = blocksGetSingleBlockAsyncValidateBeforeCall(appId, appKey, blockCode, token, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the details for a specific block. (asynchronously)
     * Read all informationen about a block including the numbers of blocked rooms per room type and business day.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param blockCode Specifies the block code. The block code is composed of the hotel code, a dash and the block code               as shown in the hetras UI. (required)
     * @param token  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns you all details for the specific block. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request parameters syntactically erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksGetSingleBlockAsyncAsync(String appId, String appKey, String blockCode, CancellationToken token, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksGetSingleBlockAsyncValidateBeforeCall(appId, appKey, blockCode, token, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
