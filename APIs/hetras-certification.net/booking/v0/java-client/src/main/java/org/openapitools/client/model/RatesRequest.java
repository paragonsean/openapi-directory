/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RatesRequest {
  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private byte[] adults;

  public static final String SERIALIZED_NAME_ARRIVAL_DATE = "arrivalDate";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE)
  private OffsetDateTime arrivalDate;

  public static final String SERIALIZED_NAME_CHANNEL_CODE = "channelCode";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODE)
  private String channelCode;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departureDate";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private OffsetDateTime departureDate;

  /**
   * Expand the rates breakdown if required.
   */
  @JsonAdapter(ExpandEnum.Adapter.class)
  public enum ExpandEnum {
    NONE("None"),
    
    BREAKDOWN("Breakdown");

    private String value;

    ExpandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpandEnum fromValue(String value) {
      for (ExpandEnum b : ExpandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpandEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpandEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPAND = "expand";
  @SerializedName(SERIALIZED_NAME_EXPAND)
  private ExpandEnum expand;

  public static final String SERIALIZED_NAME_GROUP_CODE = "groupCode";
  @SerializedName(SERIALIZED_NAME_GROUP_CODE)
  private String groupCode;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotelId";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private Integer hotelId;

  public static final String SERIALIZED_NAME_RATE_PLAN_CODE = "ratePlanCode";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN_CODE)
  private String ratePlanCode;

  public static final String SERIALIZED_NAME_ROOM_TYPE = "roomType";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE)
  private String roomType;

  public static final String SERIALIZED_NAME_ROOMS = "rooms";
  @SerializedName(SERIALIZED_NAME_ROOMS)
  private byte[] rooms;

  public RatesRequest() {
  }

  public RatesRequest adults(byte[] adults) {
    this.adults = adults;
    return this;
  }

  /**
   * Number of adults per room.
   * @return adults
   */
  @javax.annotation.Nonnull
  public byte[] getAdults() {
    return adults;
  }

  public void setAdults(byte[] adults) {
    this.adults = adults;
  }


  public RatesRequest arrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
    return this;
  }

  /**
   * Date of arrival for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;.
   * @return arrivalDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getArrivalDate() {
    return arrivalDate;
  }

  public void setArrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
  }


  public RatesRequest channelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  /**
   * Channel Code the rate plan needs to be configured for.
   * @return channelCode
   */
  @javax.annotation.Nonnull
  public String getChannelCode() {
    return channelCode;
  }

  public void setChannelCode(String channelCode) {
    this.channelCode = channelCode;
  }


  public RatesRequest departureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * Date of departure for the guest in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;.
   * @return departureDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDepartureDate() {
    return departureDate;
  }

  public void setDepartureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
  }


  public RatesRequest expand(ExpandEnum expand) {
    this.expand = expand;
    return this;
  }

  /**
   * Expand the rates breakdown if required.
   * @return expand
   */
  @javax.annotation.Nullable
  public ExpandEnum getExpand() {
    return expand;
  }

  public void setExpand(ExpandEnum expand) {
    this.expand = expand;
  }


  public RatesRequest groupCode(String groupCode) {
    this.groupCode = groupCode;
    return this;
  }

  /**
   * Only return offers for the specified group code.
   * @return groupCode
   */
  @javax.annotation.Nullable
  public String getGroupCode() {
    return groupCode;
  }

  public void setGroupCode(String groupCode) {
    this.groupCode = groupCode;
  }


  public RatesRequest hotelId(Integer hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * Specifies the hotel id to request offers for.
   * @return hotelId
   */
  @javax.annotation.Nonnull
  public Integer getHotelId() {
    return hotelId;
  }

  public void setHotelId(Integer hotelId) {
    this.hotelId = hotelId;
  }


  public RatesRequest ratePlanCode(String ratePlanCode) {
    this.ratePlanCode = ratePlanCode;
    return this;
  }

  /**
   * Only return offers for the specified room type code.
   * @return ratePlanCode
   */
  @javax.annotation.Nullable
  public String getRatePlanCode() {
    return ratePlanCode;
  }

  public void setRatePlanCode(String ratePlanCode) {
    this.ratePlanCode = ratePlanCode;
  }


  public RatesRequest roomType(String roomType) {
    this.roomType = roomType;
    return this;
  }

  /**
   * Only return offers with rates for the specified room type code.
   * @return roomType
   */
  @javax.annotation.Nullable
  public String getRoomType() {
    return roomType;
  }

  public void setRoomType(String roomType) {
    this.roomType = roomType;
  }


  public RatesRequest rooms(byte[] rooms) {
    this.rooms = rooms;
    return this;
  }

  /**
   * Number of rooms (default is 1).
   * @return rooms
   */
  @javax.annotation.Nullable
  public byte[] getRooms() {
    return rooms;
  }

  public void setRooms(byte[] rooms) {
    this.rooms = rooms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatesRequest ratesRequest = (RatesRequest) o;
    return Arrays.equals(this.adults, ratesRequest.adults) &&
        Objects.equals(this.arrivalDate, ratesRequest.arrivalDate) &&
        Objects.equals(this.channelCode, ratesRequest.channelCode) &&
        Objects.equals(this.departureDate, ratesRequest.departureDate) &&
        Objects.equals(this.expand, ratesRequest.expand) &&
        Objects.equals(this.groupCode, ratesRequest.groupCode) &&
        Objects.equals(this.hotelId, ratesRequest.hotelId) &&
        Objects.equals(this.ratePlanCode, ratesRequest.ratePlanCode) &&
        Objects.equals(this.roomType, ratesRequest.roomType) &&
        Arrays.equals(this.rooms, ratesRequest.rooms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(adults), arrivalDate, channelCode, departureDate, expand, groupCode, hotelId, ratePlanCode, roomType, Arrays.hashCode(rooms));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatesRequest {\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    arrivalDate: ").append(toIndentedString(arrivalDate)).append("\n");
    sb.append("    channelCode: ").append(toIndentedString(channelCode)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    groupCode: ").append(toIndentedString(groupCode)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    ratePlanCode: ").append(toIndentedString(ratePlanCode)).append("\n");
    sb.append("    roomType: ").append(toIndentedString(roomType)).append("\n");
    sb.append("    rooms: ").append(toIndentedString(rooms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adults");
    openapiFields.add("arrivalDate");
    openapiFields.add("channelCode");
    openapiFields.add("departureDate");
    openapiFields.add("expand");
    openapiFields.add("groupCode");
    openapiFields.add("hotelId");
    openapiFields.add("ratePlanCode");
    openapiFields.add("roomType");
    openapiFields.add("rooms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("adults");
    openapiRequiredFields.add("arrivalDate");
    openapiRequiredFields.add("channelCode");
    openapiRequiredFields.add("departureDate");
    openapiRequiredFields.add("hotelId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RatesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RatesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatesRequest is not found in the empty JSON string", RatesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RatesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RatesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("channelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelCode").toString()));
      }
      if ((jsonObj.get("expand") != null && !jsonObj.get("expand").isJsonNull()) && !jsonObj.get("expand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expand").toString()));
      }
      // validate the optional field `expand`
      if (jsonObj.get("expand") != null && !jsonObj.get("expand").isJsonNull()) {
        ExpandEnum.validateJsonElement(jsonObj.get("expand"));
      }
      if ((jsonObj.get("groupCode") != null && !jsonObj.get("groupCode").isJsonNull()) && !jsonObj.get("groupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupCode").toString()));
      }
      if ((jsonObj.get("ratePlanCode") != null && !jsonObj.get("ratePlanCode").isJsonNull()) && !jsonObj.get("ratePlanCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratePlanCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratePlanCode").toString()));
      }
      if ((jsonObj.get("roomType") != null && !jsonObj.get("roomType").isJsonNull()) && !jsonObj.get("roomType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RatesRequest>() {
           @Override
           public void write(JsonWriter out, RatesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RatesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RatesRequest
   * @throws IOException if the JSON string is invalid with respect to RatesRequest
   */
  public static RatesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatesRequest.class);
  }

  /**
   * Convert an instance of RatesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

