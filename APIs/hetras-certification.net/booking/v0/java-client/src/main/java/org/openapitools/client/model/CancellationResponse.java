/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result of cancel operation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CancellationResponse {
  public static final String SERIALIZED_NAME_WARNINGS = "_warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<String> warnings = new ArrayList<>();

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_CANCELLATION_FEE = "cancellation_fee";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_FEE)
  private Double cancellationFee;

  public static final String SERIALIZED_NAME_CANCELLATION_ID = "cancellation_id";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_ID)
  private String cancellationId;

  public CancellationResponse() {
  }

  public CancellationResponse warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public CancellationResponse addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Warnings that came up when your request was processed. Your request will still be processed successfull when              you see such warnings in your response
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<String> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }


  public CancellationResponse balance(Double balance) {
    this.balance = balance;
    return this;
  }

  /**
   * The current balance on the reservations folio without the cancellation fee
   * @return balance
   */
  @javax.annotation.Nullable
  public Double getBalance() {
    return balance;
  }

  public void setBalance(Double balance) {
    this.balance = balance;
  }


  public CancellationResponse cancellationFee(Double cancellationFee) {
    this.cancellationFee = cancellationFee;
    return this;
  }

  /**
   * The fee that might be charged to the folio of the reservation. The cancelled reservation will              show up in the cancellation and no show processing screen and the hotel staff will either charge              the fee or waive it.
   * @return cancellationFee
   */
  @javax.annotation.Nullable
  public Double getCancellationFee() {
    return cancellationFee;
  }

  public void setCancellationFee(Double cancellationFee) {
    this.cancellationFee = cancellationFee;
  }


  public CancellationResponse cancellationId(String cancellationId) {
    this.cancellationId = cancellationId;
    return this;
  }

  /**
   * The id of the successful cancellation. With this id the hotel staff will be able to find the reservation
   * @return cancellationId
   */
  @javax.annotation.Nullable
  public String getCancellationId() {
    return cancellationId;
  }

  public void setCancellationId(String cancellationId) {
    this.cancellationId = cancellationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CancellationResponse cancellationResponse = (CancellationResponse) o;
    return Objects.equals(this.warnings, cancellationResponse.warnings) &&
        Objects.equals(this.balance, cancellationResponse.balance) &&
        Objects.equals(this.cancellationFee, cancellationResponse.cancellationFee) &&
        Objects.equals(this.cancellationId, cancellationResponse.cancellationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(warnings, balance, cancellationFee, cancellationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CancellationResponse {\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    cancellationFee: ").append(toIndentedString(cancellationFee)).append("\n");
    sb.append("    cancellationId: ").append(toIndentedString(cancellationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_warnings");
    openapiFields.add("balance");
    openapiFields.add("cancellation_fee");
    openapiFields.add("cancellation_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CancellationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CancellationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CancellationResponse is not found in the empty JSON string", CancellationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CancellationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CancellationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("_warnings") != null && !jsonObj.get("_warnings").isJsonNull() && !jsonObj.get("_warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `_warnings` to be an array in the JSON string but got `%s`", jsonObj.get("_warnings").toString()));
      }
      if ((jsonObj.get("cancellation_id") != null && !jsonObj.get("cancellation_id").isJsonNull()) && !jsonObj.get("cancellation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellation_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CancellationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CancellationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CancellationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CancellationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CancellationResponse>() {
           @Override
           public void write(JsonWriter out, CancellationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CancellationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CancellationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CancellationResponse
   * @throws IOException if the JSON string is invalid with respect to CancellationResponse
   */
  public static CancellationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CancellationResponse.class);
  }

  /**
   * Convert an instance of CancellationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

