/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Company;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Customer;
import org.openapitools.client.model.Guarantee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Reservation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Reservation {
  public static final String SERIALIZED_NAME_ADDONS = "addons";
  @SerializedName(SERIALIZED_NAME_ADDONS)
  private List<String> addons = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private Integer adults;

  public static final String SERIALIZED_NAME_ARRIVAL_DATE = "arrival_date";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE)
  private OffsetDateTime arrivalDate;

  public static final String SERIALIZED_NAME_CHANNEL_CODE = "channel_code";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODE)
  private String channelCode;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private Company company;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departure_date";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private OffsetDateTime departureDate;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_GROUP_CODE = "group_code";
  @SerializedName(SERIALIZED_NAME_GROUP_CODE)
  private String groupCode;

  public static final String SERIALIZED_NAME_GUARANTEE = "guarantee";
  @SerializedName(SERIALIZED_NAME_GUARANTEE)
  private Guarantee guarantee;

  public static final String SERIALIZED_NAME_GUESTS = "guests";
  @SerializedName(SERIALIZED_NAME_GUESTS)
  private List<Customer> guests = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotel_id";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private Integer hotelId;

  /**
   * The payment method for this reservation
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
  public enum PaymentMethodEnum {
    NONE("None"),
    
    CASH("Cash"),
    
    CREDIT_CARD("CreditCard"),
    
    WIRE_TRANSFER("WireTransfer"),
    
    CHARGE_TO_COMPANY("ChargeToCompany"),
    
    CHECK("Check"),
    
    VOUCHER("Voucher"),
    
    DEBIT_CARD("DebitCard"),
    
    TOKEN("Token"),
    
    MISCELLANEOUS("Miscellaneous"),
    
    DIGITAL_PAYMENT("DigitalPayment");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  public static final String SERIALIZED_NAME_PREPAY_DISCOUNT = "prepay_discount";
  @SerializedName(SERIALIZED_NAME_PREPAY_DISCOUNT)
  private Double prepayDiscount;

  public static final String SERIALIZED_NAME_RATE_PLAN = "rate_plan";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN)
  private String ratePlan;

  public static final String SERIALIZED_NAME_ROOM_TYPE = "room_type";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE)
  private String roomType;

  public static final String SERIALIZED_NAME_ROOMS = "rooms";
  @SerializedName(SERIALIZED_NAME_ROOMS)
  private Integer rooms;

  public static final String SERIALIZED_NAME_TRAVEL_AGENT = "travel_agent";
  @SerializedName(SERIALIZED_NAME_TRAVEL_AGENT)
  private Company travelAgent;

  public Reservation() {
  }

  public Reservation addons(List<String> addons) {
    this.addons = addons;
    return this;
  }

  public Reservation addAddonsItem(String addonsItem) {
    if (this.addons == null) {
      this.addons = new ArrayList<>();
    }
    this.addons.add(addonsItem);
    return this;
  }

  /**
   * A list of addon service codes that should be booked for all reservations of this booking
   * @return addons
   */
  @javax.annotation.Nullable
  public List<String> getAddons() {
    return addons;
  }

  public void setAddons(List<String> addons) {
    this.addons = addons;
  }


  public Reservation adults(Integer adults) {
    this.adults = adults;
    return this;
  }

  /**
   * The number of adults per room
   * @return adults
   */
  @javax.annotation.Nullable
  public Integer getAdults() {
    return adults;
  }

  public void setAdults(Integer adults) {
    this.adults = adults;
  }


  public Reservation arrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
    return this;
  }

  /**
   * The arrival date of the guests
   * @return arrivalDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArrivalDate() {
    return arrivalDate;
  }

  public void setArrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
  }


  public Reservation channelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  /**
   * The channel code for this reservation. You can find available channels in the codes for the hotel.
   * @return channelCode
   */
  @javax.annotation.Nullable
  public String getChannelCode() {
    return channelCode;
  }

  public void setChannelCode(String channelCode) {
    this.channelCode = channelCode;
  }


  public Reservation comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The comment you want to add for this reservation
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public Reservation company(Company company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public Company getCompany() {
    return company;
  }

  public void setCompany(Company company) {
    this.company = company;
  }


  public Reservation contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public Reservation departureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * The departure date of the guests
   * @return departureDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDepartureDate() {
    return departureDate;
  }

  public void setDepartureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
  }


  public Reservation externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * The external id for this reservation. You can put here your own id used by you or the external system              you integrate hetras with
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Reservation groupCode(String groupCode) {
    this.groupCode = groupCode;
    return this;
  }

  /**
   * The group code based on which the reservation will be created.
   * @return groupCode
   */
  @javax.annotation.Nullable
  public String getGroupCode() {
    return groupCode;
  }

  public void setGroupCode(String groupCode) {
    this.groupCode = groupCode;
  }


  public Reservation guarantee(Guarantee guarantee) {
    this.guarantee = guarantee;
    return this;
  }

  /**
   * Get guarantee
   * @return guarantee
   */
  @javax.annotation.Nullable
  public Guarantee getGuarantee() {
    return guarantee;
  }

  public void setGuarantee(Guarantee guarantee) {
    this.guarantee = guarantee;
  }


  public Reservation guests(List<Customer> guests) {
    this.guests = guests;
    return this;
  }

  public Reservation addGuestsItem(Customer guestsItem) {
    if (this.guests == null) {
      this.guests = new ArrayList<>();
    }
    this.guests.add(guestsItem);
    return this;
  }

  /**
   * A list of guests with some basic guest details
   * @return guests
   */
  @javax.annotation.Nullable
  public List<Customer> getGuests() {
    return guests;
  }

  public void setGuests(List<Customer> guests) {
    this.guests = guests;
  }


  public Reservation hotelId(Integer hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * The id of the hotel this reservation is valid for
   * @return hotelId
   */
  @javax.annotation.Nonnull
  public Integer getHotelId() {
    return hotelId;
  }

  public void setHotelId(Integer hotelId) {
    this.hotelId = hotelId;
  }


  public Reservation paymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * The payment method for this reservation
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Reservation prepayDiscount(Double prepayDiscount) {
    this.prepayDiscount = prepayDiscount;
    return this;
  }

  /**
   * If you create a booking for a rateplan requiring prepayment this amount will be deducted from the booking value before              the prepayment will be taken. This feature is useful when the booker redeems a gift voucher and you want to               only capture the remaining amount from the guest´s credit card
   * @return prepayDiscount
   */
  @javax.annotation.Nullable
  public Double getPrepayDiscount() {
    return prepayDiscount;
  }

  public void setPrepayDiscount(Double prepayDiscount) {
    this.prepayDiscount = prepayDiscount;
  }


  public Reservation ratePlan(String ratePlan) {
    this.ratePlan = ratePlan;
    return this;
  }

  /**
   * The rate plan code this reservation is related to
   * @return ratePlan
   */
  @javax.annotation.Nullable
  public String getRatePlan() {
    return ratePlan;
  }

  public void setRatePlan(String ratePlan) {
    this.ratePlan = ratePlan;
  }


  public Reservation roomType(String roomType) {
    this.roomType = roomType;
    return this;
  }

  /**
   * The room type code this reservation is related to
   * @return roomType
   */
  @javax.annotation.Nullable
  public String getRoomType() {
    return roomType;
  }

  public void setRoomType(String roomType) {
    this.roomType = roomType;
  }


  public Reservation rooms(Integer rooms) {
    this.rooms = rooms;
    return this;
  }

  /**
   * The number of rooms this reservation is for. After a multi-room booking is done there will be               one reservation in hetras for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests
   * @return rooms
   */
  @javax.annotation.Nullable
  public Integer getRooms() {
    return rooms;
  }

  public void setRooms(Integer rooms) {
    this.rooms = rooms;
  }


  public Reservation travelAgent(Company travelAgent) {
    this.travelAgent = travelAgent;
    return this;
  }

  /**
   * Get travelAgent
   * @return travelAgent
   */
  @javax.annotation.Nullable
  public Company getTravelAgent() {
    return travelAgent;
  }

  public void setTravelAgent(Company travelAgent) {
    this.travelAgent = travelAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reservation reservation = (Reservation) o;
    return Objects.equals(this.addons, reservation.addons) &&
        Objects.equals(this.adults, reservation.adults) &&
        Objects.equals(this.arrivalDate, reservation.arrivalDate) &&
        Objects.equals(this.channelCode, reservation.channelCode) &&
        Objects.equals(this.comment, reservation.comment) &&
        Objects.equals(this.company, reservation.company) &&
        Objects.equals(this.contact, reservation.contact) &&
        Objects.equals(this.departureDate, reservation.departureDate) &&
        Objects.equals(this.externalId, reservation.externalId) &&
        Objects.equals(this.groupCode, reservation.groupCode) &&
        Objects.equals(this.guarantee, reservation.guarantee) &&
        Objects.equals(this.guests, reservation.guests) &&
        Objects.equals(this.hotelId, reservation.hotelId) &&
        Objects.equals(this.paymentMethod, reservation.paymentMethod) &&
        Objects.equals(this.prepayDiscount, reservation.prepayDiscount) &&
        Objects.equals(this.ratePlan, reservation.ratePlan) &&
        Objects.equals(this.roomType, reservation.roomType) &&
        Objects.equals(this.rooms, reservation.rooms) &&
        Objects.equals(this.travelAgent, reservation.travelAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addons, adults, arrivalDate, channelCode, comment, company, contact, departureDate, externalId, groupCode, guarantee, guests, hotelId, paymentMethod, prepayDiscount, ratePlan, roomType, rooms, travelAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reservation {\n");
    sb.append("    addons: ").append(toIndentedString(addons)).append("\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    arrivalDate: ").append(toIndentedString(arrivalDate)).append("\n");
    sb.append("    channelCode: ").append(toIndentedString(channelCode)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    groupCode: ").append(toIndentedString(groupCode)).append("\n");
    sb.append("    guarantee: ").append(toIndentedString(guarantee)).append("\n");
    sb.append("    guests: ").append(toIndentedString(guests)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    prepayDiscount: ").append(toIndentedString(prepayDiscount)).append("\n");
    sb.append("    ratePlan: ").append(toIndentedString(ratePlan)).append("\n");
    sb.append("    roomType: ").append(toIndentedString(roomType)).append("\n");
    sb.append("    rooms: ").append(toIndentedString(rooms)).append("\n");
    sb.append("    travelAgent: ").append(toIndentedString(travelAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addons");
    openapiFields.add("adults");
    openapiFields.add("arrival_date");
    openapiFields.add("channel_code");
    openapiFields.add("comment");
    openapiFields.add("company");
    openapiFields.add("contact");
    openapiFields.add("departure_date");
    openapiFields.add("external_id");
    openapiFields.add("group_code");
    openapiFields.add("guarantee");
    openapiFields.add("guests");
    openapiFields.add("hotel_id");
    openapiFields.add("payment_method");
    openapiFields.add("prepay_discount");
    openapiFields.add("rate_plan");
    openapiFields.add("room_type");
    openapiFields.add("rooms");
    openapiFields.add("travel_agent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hotel_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Reservation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reservation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reservation is not found in the empty JSON string", Reservation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reservation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Reservation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("addons") != null && !jsonObj.get("addons").isJsonNull() && !jsonObj.get("addons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addons` to be an array in the JSON string but got `%s`", jsonObj.get("addons").toString()));
      }
      if ((jsonObj.get("channel_code") != null && !jsonObj.get("channel_code").isJsonNull()) && !jsonObj.get("channel_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_code").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // validate the optional field `company`
      if (jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) {
        Company.validateJsonElement(jsonObj.get("company"));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("contact"));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if ((jsonObj.get("group_code") != null && !jsonObj.get("group_code").isJsonNull()) && !jsonObj.get("group_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_code").toString()));
      }
      // validate the optional field `guarantee`
      if (jsonObj.get("guarantee") != null && !jsonObj.get("guarantee").isJsonNull()) {
        Guarantee.validateJsonElement(jsonObj.get("guarantee"));
      }
      if (jsonObj.get("guests") != null && !jsonObj.get("guests").isJsonNull()) {
        JsonArray jsonArrayguests = jsonObj.getAsJsonArray("guests");
        if (jsonArrayguests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guests` to be an array in the JSON string but got `%s`", jsonObj.get("guests").toString()));
          }

          // validate the optional field `guests` (array)
          for (int i = 0; i < jsonArrayguests.size(); i++) {
            Customer.validateJsonElement(jsonArrayguests.get(i));
          };
        }
      }
      if ((jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      // validate the optional field `payment_method`
      if (jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) {
        PaymentMethodEnum.validateJsonElement(jsonObj.get("payment_method"));
      }
      if ((jsonObj.get("rate_plan") != null && !jsonObj.get("rate_plan").isJsonNull()) && !jsonObj.get("rate_plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate_plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate_plan").toString()));
      }
      if ((jsonObj.get("room_type") != null && !jsonObj.get("room_type").isJsonNull()) && !jsonObj.get("room_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `room_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("room_type").toString()));
      }
      // validate the optional field `travel_agent`
      if (jsonObj.get("travel_agent") != null && !jsonObj.get("travel_agent").isJsonNull()) {
        Company.validateJsonElement(jsonObj.get("travel_agent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reservation.class));

       return (TypeAdapter<T>) new TypeAdapter<Reservation>() {
           @Override
           public void write(JsonWriter out, Reservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reservation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Reservation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Reservation
   * @throws IOException if the JSON string is invalid with respect to Reservation
   */
  public static Reservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reservation.class);
  }

  /**
   * Convert an instance of Reservation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

