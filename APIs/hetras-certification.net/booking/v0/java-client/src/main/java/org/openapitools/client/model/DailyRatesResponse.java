/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DailyCalendarRate;
import org.openapitools.client.model.DailyRateHotel;
import org.openapitools.client.model.DailyRatePlan;
import org.openapitools.client.model.LinkObject;
import org.openapitools.client.model.Policies;
import org.openapitools.client.model.RoomType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DailyRatesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:29.883566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DailyRatesResponse {
  public static final String SERIALIZED_NAME_COUNT = "_count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, LinkObject> links = new HashMap<>();

  public static final String SERIALIZED_NAME_DAILY_RATES = "daily_rates";
  @SerializedName(SERIALIZED_NAME_DAILY_RATES)
  private List<DailyCalendarRate> dailyRates = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOTEL = "hotel";
  @SerializedName(SERIALIZED_NAME_HOTEL)
  private DailyRateHotel hotel;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private Policies policies;

  public static final String SERIALIZED_NAME_RATEPLANS = "rateplans";
  @SerializedName(SERIALIZED_NAME_RATEPLANS)
  private List<DailyRatePlan> rateplans = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_TYPES = "room_types";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private List<RoomType> roomTypes = new ArrayList<>();

  public DailyRatesResponse() {
  }

  public DailyRatesResponse count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * The number of items matching your request in total for all pages.
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public DailyRatesResponse links(Map<String, LinkObject> links) {
    this.links = links;
    return this;
  }

  public DailyRatesResponse putLinksItem(String key, LinkObject linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Collection of links to related resources
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, LinkObject> getLinks() {
    return links;
  }

  public void setLinks(Map<String, LinkObject> links) {
    this.links = links;
  }


  public DailyRatesResponse dailyRates(List<DailyCalendarRate> dailyRates) {
    this.dailyRates = dailyRates;
    return this;
  }

  public DailyRatesResponse addDailyRatesItem(DailyCalendarRate dailyRatesItem) {
    if (this.dailyRates == null) {
      this.dailyRates = new ArrayList<>();
    }
    this.dailyRates.add(dailyRatesItem);
    return this;
  }

  /**
   * Get dailyRates
   * @return dailyRates
   */
  @javax.annotation.Nullable
  public List<DailyCalendarRate> getDailyRates() {
    return dailyRates;
  }

  public void setDailyRates(List<DailyCalendarRate> dailyRates) {
    this.dailyRates = dailyRates;
  }


  public DailyRatesResponse hotel(DailyRateHotel hotel) {
    this.hotel = hotel;
    return this;
  }

  /**
   * Get hotel
   * @return hotel
   */
  @javax.annotation.Nullable
  public DailyRateHotel getHotel() {
    return hotel;
  }

  public void setHotel(DailyRateHotel hotel) {
    this.hotel = hotel;
  }


  public DailyRatesResponse policies(Policies policies) {
    this.policies = policies;
    return this;
  }

  /**
   * Get policies
   * @return policies
   */
  @javax.annotation.Nullable
  public Policies getPolicies() {
    return policies;
  }

  public void setPolicies(Policies policies) {
    this.policies = policies;
  }


  public DailyRatesResponse rateplans(List<DailyRatePlan> rateplans) {
    this.rateplans = rateplans;
    return this;
  }

  public DailyRatesResponse addRateplansItem(DailyRatePlan rateplansItem) {
    if (this.rateplans == null) {
      this.rateplans = new ArrayList<>();
    }
    this.rateplans.add(rateplansItem);
    return this;
  }

  /**
   * Get rateplans
   * @return rateplans
   */
  @javax.annotation.Nullable
  public List<DailyRatePlan> getRateplans() {
    return rateplans;
  }

  public void setRateplans(List<DailyRatePlan> rateplans) {
    this.rateplans = rateplans;
  }


  public DailyRatesResponse roomTypes(List<RoomType> roomTypes) {
    this.roomTypes = roomTypes;
    return this;
  }

  public DailyRatesResponse addRoomTypesItem(RoomType roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new ArrayList<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

  /**
   * Get roomTypes
   * @return roomTypes
   */
  @javax.annotation.Nullable
  public List<RoomType> getRoomTypes() {
    return roomTypes;
  }

  public void setRoomTypes(List<RoomType> roomTypes) {
    this.roomTypes = roomTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyRatesResponse dailyRatesResponse = (DailyRatesResponse) o;
    return Objects.equals(this.count, dailyRatesResponse.count) &&
        Objects.equals(this.links, dailyRatesResponse.links) &&
        Objects.equals(this.dailyRates, dailyRatesResponse.dailyRates) &&
        Objects.equals(this.hotel, dailyRatesResponse.hotel) &&
        Objects.equals(this.policies, dailyRatesResponse.policies) &&
        Objects.equals(this.rateplans, dailyRatesResponse.rateplans) &&
        Objects.equals(this.roomTypes, dailyRatesResponse.roomTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, links, dailyRates, hotel, policies, rateplans, roomTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyRatesResponse {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    dailyRates: ").append(toIndentedString(dailyRates)).append("\n");
    sb.append("    hotel: ").append(toIndentedString(hotel)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    rateplans: ").append(toIndentedString(rateplans)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_count");
    openapiFields.add("_links");
    openapiFields.add("daily_rates");
    openapiFields.add("hotel");
    openapiFields.add("policies");
    openapiFields.add("rateplans");
    openapiFields.add("room_types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyRatesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyRatesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyRatesResponse is not found in the empty JSON string", DailyRatesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyRatesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyRatesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("daily_rates") != null && !jsonObj.get("daily_rates").isJsonNull()) {
        JsonArray jsonArraydailyRates = jsonObj.getAsJsonArray("daily_rates");
        if (jsonArraydailyRates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("daily_rates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `daily_rates` to be an array in the JSON string but got `%s`", jsonObj.get("daily_rates").toString()));
          }

          // validate the optional field `daily_rates` (array)
          for (int i = 0; i < jsonArraydailyRates.size(); i++) {
            DailyCalendarRate.validateJsonElement(jsonArraydailyRates.get(i));
          };
        }
      }
      // validate the optional field `hotel`
      if (jsonObj.get("hotel") != null && !jsonObj.get("hotel").isJsonNull()) {
        DailyRateHotel.validateJsonElement(jsonObj.get("hotel"));
      }
      // validate the optional field `policies`
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        Policies.validateJsonElement(jsonObj.get("policies"));
      }
      if (jsonObj.get("rateplans") != null && !jsonObj.get("rateplans").isJsonNull()) {
        JsonArray jsonArrayrateplans = jsonObj.getAsJsonArray("rateplans");
        if (jsonArrayrateplans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rateplans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rateplans` to be an array in the JSON string but got `%s`", jsonObj.get("rateplans").toString()));
          }

          // validate the optional field `rateplans` (array)
          for (int i = 0; i < jsonArrayrateplans.size(); i++) {
            DailyRatePlan.validateJsonElement(jsonArrayrateplans.get(i));
          };
        }
      }
      if (jsonObj.get("room_types") != null && !jsonObj.get("room_types").isJsonNull()) {
        JsonArray jsonArrayroomTypes = jsonObj.getAsJsonArray("room_types");
        if (jsonArrayroomTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("room_types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `room_types` to be an array in the JSON string but got `%s`", jsonObj.get("room_types").toString()));
          }

          // validate the optional field `room_types` (array)
          for (int i = 0; i < jsonArrayroomTypes.size(); i++) {
            RoomType.validateJsonElement(jsonArrayroomTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyRatesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyRatesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyRatesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyRatesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyRatesResponse>() {
           @Override
           public void write(JsonWriter out, DailyRatesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyRatesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyRatesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyRatesResponse
   * @throws IOException if the JSON string is invalid with respect to DailyRatesResponse
   */
  public static DailyRatesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyRatesResponse.class);
  }

  /**
   * Convert an instance of DailyRatesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

