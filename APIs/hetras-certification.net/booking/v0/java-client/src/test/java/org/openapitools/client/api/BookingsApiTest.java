/*
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssignRoomCriteria;
import org.openapitools.client.model.AssignRoomResponse;
import org.openapitools.client.model.AuthorizationRequest;
import org.openapitools.client.model.BaseResponse;
import org.openapitools.client.model.BookingListResponse;
import org.openapitools.client.model.CancellationResponse;
import org.openapitools.client.model.CheckInDetails;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OperationReservationPatchableModel;
import org.openapitools.client.model.Reservation;
import org.openapitools.client.model.ReservationConfirmation;
import org.openapitools.client.model.ReservationResponse;
import org.openapitools.client.model.ReservationsResponse;
import org.openapitools.client.model.TerminalAuthorizationRequest;
import org.openapitools.client.model.TotalCountResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BookingsApi
 */
@Disabled
public class BookingsApiTest {

    private final BookingsApi api = new BookingsApi();

    /**
     * Cancel one reservation.
     *
     * This request will cancel one specific reservation. It will show up in the hetras UI in the Cancellation and NoShow              processing screen and it will be up to the hotel staff to either charge or waive the cancellation fee.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsCancelReservationTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String confirmationId = null;
        Integer reservationNumber = null;
        Boolean sendConfirmation = null;
        CancellationResponse response = api.bookingsCancelReservation(appId, appKey, confirmationId, reservationNumber, sendConfirmation);
        // TODO: test validations
    }

    /**
     * Performs a check in operation for a reservation.
     *
     * With this call you can set a reservation to the status inhouse. It allows only single room reservations to be checked in.              The reservation must have assigned a vacant and clean room.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsCheckInTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String confirmationId = null;
        Integer reservationNumber = null;
        CheckInDetails checkInDetails = null;
        BaseResponse response = api.bookingsCheckIn(appId, appKey, confirmationId, reservationNumber, checkInDetails);
        // TODO: test validations
    }

    /**
     * Performs a check out operation for a reservation.
     *
     * With this call you can set a reservation to the checkout status. It allows only single room reservations to be checked out.              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsCheckOutTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String confirmationId = null;
        Integer reservationNumber = null;
        BaseResponse response = api.bookingsCheckOut(appId, appKey, confirmationId, reservationNumber);
        // TODO: test validations
    }

    /**
     * Create a new booking.
     *
     * Create a new booking as defined in the requests payload. You can get more information about the payload if you check out the              documentation for the reservation request model.&lt;br /&gt;              Please also have a look at the &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/tutorials\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Tutorials&lt;/a&gt;.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsCreateBookingTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Reservation reservation = null;
        Boolean sendConfirmation = null;
        ReservationConfirmation response = api.bookingsCreateBooking(appId, appKey, reservation, sendConfirmation);
        // TODO: test validations
    }

    /**
     * Load all reservations for one booking by confirmation id.
     *
     * A booking groups all reservations done in one single request and can be identified by the confirmation id.              Guests usually use the confirmation id to check in at the kiosk, on the website or mobile device. In hetras              all reservations of one booking share the room type, rate plan and number of guests per room.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsGetBookingTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String confirmationId = null;
        String expand = null;
        String exclude = null;
        ReservationsResponse response = api.bookingsGetBooking(appId, appKey, confirmationId, expand, exclude);
        // TODO: test validations
    }

    /**
     * Find bookings matching the given filter criteria.
     *
     * Here you can easily find bookings matching various criteria. The booking you are looking for has to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get all bookings where the firstname or lastname of a guest or a               contact contains the specified value and that have been done through the defined channel.              A booking can consist of multiple reservations, so even if you are looking for a specific reservation which is part of a multi-room booking you will get              all reservations for this booking returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsGetBookingsTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String cancellationId = null;
        Integer reservationNumber = null;
        String customerName = null;
        String customerEmail = null;
        String customerId = null;
        String roomNumber = null;
        String externalId = null;
        String companyName = null;
        String companyId = null;
        String companyEmail = null;
        String blockCode = null;
        List<String> reservationStatuses = null;
        List<String> marketCodes = null;
        List<String> channelCodes = null;
        List<String> subChannelCodes = null;
        List<String> roomTypes = null;
        List<String> ratePlanCodes = null;
        List<String> labels = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        String dateFilter = null;
        String exclude = null;
        Integer skip = null;
        Integer top = null;
        String inlinecount = null;
        BookingListResponse response = api.bookingsGetBookings(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude, skip, top, inlinecount);
        // TODO: test validations
    }

    /**
     * Get total count of bookings matchung the given filter criteria.
     *
     * Get the count of all bookings matching your criteria. The bookings have to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get the count for all bookings where the firstname or lastname               of a guest or a contact contains the specified value and that have been done through the defined channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsGetBookingsCountTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String cancellationId = null;
        Integer reservationNumber = null;
        String customerName = null;
        String customerEmail = null;
        String customerId = null;
        String roomNumber = null;
        String externalId = null;
        String companyName = null;
        String companyId = null;
        String companyEmail = null;
        String blockCode = null;
        List<String> reservationStatuses = null;
        List<String> marketCodes = null;
        List<String> channelCodes = null;
        List<String> subChannelCodes = null;
        List<String> roomTypes = null;
        List<String> ratePlanCodes = null;
        List<String> labels = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        String dateFilter = null;
        String exclude = null;
        TotalCountResponse response = api.bookingsGetBookingsCount(appId, appKey, hotelId, cancellationId, reservationNumber, customerName, customerEmail, customerId, roomNumber, externalId, companyName, companyId, companyEmail, blockCode, reservationStatuses, marketCodes, channelCodes, subChannelCodes, roomTypes, ratePlanCodes, labels, from, to, dateFilter, exclude);
        // TODO: test validations
    }

    /**
     * Load a specific reservation from a booking.
     *
     * With this request you can load one specific reservation done with one booking request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsGetReservationTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String confirmationId = null;
        Integer reservationNumber = null;
        String expand = null;
        String exclude = null;
        ReservationResponse response = api.bookingsGetReservation(appId, appKey, confirmationId, reservationNumber, expand, exclude);
        // TODO: test validations
    }

    /**
     * Partially updates a reservation.
     *
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call allows to update the following fields:              external_id, market_code, channel_code, subchannel_code, guarantee_type, comment, addon_services, labels, guests, contact and company.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/addon_services\&quot;, \&quot;value\&quot;: [\&quot;BREAKFAST\&quot;, \&quot;PARKING\&quot;]                },                {                  \&quot;op\&quot;: \&quot;add\&quot;, \&quot;path\&quot;: \&quot;/labels/-\&quot;, \&quot;value\&quot;: \&quot;MOBILE\&quot;                },                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/guests/SHOW-1234\&quot;, \&quot;value\&quot;: { \&quot;customer_id\&quot;: \&quot;SHOW-1234\&quot;, \&quot;primary\&quot;: false }                },                {                  \&quot;op\&quot;: \&quot;add\&quot;, \&quot;path\&quot;: \&quot;/guests/-\&quot;, \&quot;value\&quot;: { \&quot;customer_id\&quot;: \&quot;SHOW-5678\&quot;, \&quot;primary\&quot;: true }                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsPatchTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String confirmationId = null;
        Integer reservationNumber = null;
        List<OperationReservationPatchableModel> patchRequest = null;
        Object response = api.bookingsPatch(appId, appKey, confirmationId, reservationNumber, patchRequest);
        // TODO: test validations
    }

    /**
     * Post a payment token for a reservation.
     *
     * TBD.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsPaymentTokenTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String confirmationId = null;
        Integer reservationNumber = null;
        AuthorizationRequest authorizationRequest = null;
        BaseResponse response = api.bookingsPaymentToken(appId, appKey, confirmationId, reservationNumber, authorizationRequest);
        // TODO: test validations
    }

    /**
     * Assign a room to a reservation.
     *
     * By default this API call assigns a random room, which has the proper room type, is not already assigned              to another reservation or has any maintenance status set for the stay period of the underlying reservation. If the              arrival date for the underlying reservation is the current business day dirty rooms are excluded by default. For reservation              arriving on any latter day the room condition is not taken into account.&lt;br /&gt;              By specifiying the room selection criteria in the request body you can influence which room will be assigned. See the request model              for further details.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsPostRoomAssignmentTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String confirmationId = null;
        Integer reservationNumber = null;
        AssignRoomCriteria assigningCriteria = null;
        AssignRoomResponse response = api.bookingsPostRoomAssignment(appId, appKey, confirmationId, reservationNumber, assigningCriteria);
        // TODO: test validations
    }

    /**
     * Performs a chip and pin credit card authorization for a reservation.
     *
     * With this call you can trigger a terminal authorization prompt for a reservation guest.               For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookingsTerminalAuthorizationTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String confirmationId = null;
        Integer reservationNumber = null;
        TerminalAuthorizationRequest authorizationRequest = null;
        BaseResponse response = api.bookingsTerminalAuthorization(appId, appKey, confirmationId, reservationNumber, authorizationRequest);
        // TODO: test validations
    }

}
