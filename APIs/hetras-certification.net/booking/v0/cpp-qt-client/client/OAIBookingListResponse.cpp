/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBookingListResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBookingListResponse::OAIBookingListResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBookingListResponse::OAIBookingListResponse() {
    this->initializeModel();
}

OAIBookingListResponse::~OAIBookingListResponse() {}

void OAIBookingListResponse::initializeModel() {

    m__count_isSet = false;
    m__count_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_bookings_isSet = false;
    m_bookings_isValid = false;
}

void OAIBookingListResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBookingListResponse::fromJsonObject(QJsonObject json) {

    m__count_isValid = ::OpenAPI::fromJsonValue(m__count, json[QString("_count")]);
    m__count_isSet = !json[QString("_count")].isNull() && m__count_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_bookings_isValid = ::OpenAPI::fromJsonValue(m_bookings, json[QString("bookings")]);
    m_bookings_isSet = !json[QString("bookings")].isNull() && m_bookings_isValid;
}

QString OAIBookingListResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBookingListResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__count_isSet) {
        obj.insert(QString("_count"), ::OpenAPI::toJsonValue(m__count));
    }
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_bookings.size() > 0) {
        obj.insert(QString("bookings"), ::OpenAPI::toJsonValue(m_bookings));
    }
    return obj;
}

qint32 OAIBookingListResponse::getCount() const {
    return m__count;
}
void OAIBookingListResponse::setCount(const qint32 &_count) {
    m__count = _count;
    m__count_isSet = true;
}

bool OAIBookingListResponse::is__count_Set() const{
    return m__count_isSet;
}

bool OAIBookingListResponse::is__count_Valid() const{
    return m__count_isValid;
}

QMap<QString, OAILinkObject> OAIBookingListResponse::getLinks() const {
    return m__links;
}
void OAIBookingListResponse::setLinks(const QMap<QString, OAILinkObject> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIBookingListResponse::is__links_Set() const{
    return m__links_isSet;
}

bool OAIBookingListResponse::is__links_Valid() const{
    return m__links_isValid;
}

QList<OAIBookingListItem> OAIBookingListResponse::getBookings() const {
    return m_bookings;
}
void OAIBookingListResponse::setBookings(const QList<OAIBookingListItem> &bookings) {
    m_bookings = bookings;
    m_bookings_isSet = true;
}

bool OAIBookingListResponse::is_bookings_Set() const{
    return m_bookings_isSet;
}

bool OAIBookingListResponse::is_bookings_Valid() const{
    return m_bookings_isValid;
}

bool OAIBookingListResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBookingListResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
