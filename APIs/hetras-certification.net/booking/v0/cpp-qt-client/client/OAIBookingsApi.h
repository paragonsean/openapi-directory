/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBookingsApi_H
#define OAI_OAIBookingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignRoomCriteria.h"
#include "OAIAssignRoomResponse.h"
#include "OAIAuthorizationRequest.h"
#include "OAIBaseResponse.h"
#include "OAIBookingListResponse.h"
#include "OAICancellationResponse.h"
#include "OAICheckInDetails.h"
#include "OAIObject.h"
#include "OAIOperation_ReservationPatchableModel.h"
#include "OAIReservation.h"
#include "OAIReservationConfirmation.h"
#include "OAIReservationResponse.h"
#include "OAIReservationsResponse.h"
#include "OAITerminalAuthorizationRequest.h"
#include "OAITotalCountResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBookingsApi : public QObject {
    Q_OBJECT

public:
    OAIBookingsApi(const int timeOut = 0);
    ~OAIBookingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  confirmation_id QString [required]
    * @param[in]  reservation_number qint32 [required]
    * @param[in]  send_confirmation bool [optional]
    */
    virtual void bookingsCancelReservation(const QString &app_id, const QString &app_key, const QString &confirmation_id, const qint32 &reservation_number, const ::OpenAPI::OptionalParam<bool> &send_confirmation = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  confirmation_id QString [required]
    * @param[in]  reservation_number qint32 [required]
    * @param[in]  check_in_details OAICheckInDetails [required]
    */
    virtual void bookingsCheckIn(const QString &app_id, const QString &app_key, const QString &confirmation_id, const qint32 &reservation_number, const OAICheckInDetails &check_in_details);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  confirmation_id QString [required]
    * @param[in]  reservation_number qint32 [required]
    */
    virtual void bookingsCheckOut(const QString &app_id, const QString &app_key, const QString &confirmation_id, const qint32 &reservation_number);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  reservation OAIReservation [required]
    * @param[in]  send_confirmation bool [optional]
    */
    virtual void bookingsCreateBooking(const QString &app_id, const QString &app_key, const OAIReservation &reservation, const ::OpenAPI::OptionalParam<bool> &send_confirmation = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  confirmation_id QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void bookingsGetBooking(const QString &app_id, const QString &app_key, const QString &confirmation_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [optional]
    * @param[in]  cancellation_id QString [optional]
    * @param[in]  reservation_number qint32 [optional]
    * @param[in]  customer_name QString [optional]
    * @param[in]  customer_email QString [optional]
    * @param[in]  customer_id QString [optional]
    * @param[in]  room_number QString [optional]
    * @param[in]  external_id QString [optional]
    * @param[in]  company_name QString [optional]
    * @param[in]  company_id QString [optional]
    * @param[in]  company_email QString [optional]
    * @param[in]  block_code QString [optional]
    * @param[in]  reservation_statuses QList<QString> [optional]
    * @param[in]  market_codes QList<QString> [optional]
    * @param[in]  channel_codes QList<QString> [optional]
    * @param[in]  sub_channel_codes QList<QString> [optional]
    * @param[in]  room_types QList<QString> [optional]
    * @param[in]  rate_plan_codes QList<QString> [optional]
    * @param[in]  labels QList<QString> [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  date_filter QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  inlinecount QString [optional]
    */
    virtual void bookingsGetBookings(const QString &app_id, const QString &app_key, const ::OpenAPI::OptionalParam<qint32> &hotel_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cancellation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &reservation_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &customer_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &room_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &block_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &reservation_statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &market_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &channel_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sub_channel_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &room_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &rate_plan_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &labels = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &date_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &inlinecount = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [optional]
    * @param[in]  cancellation_id QString [optional]
    * @param[in]  reservation_number qint32 [optional]
    * @param[in]  customer_name QString [optional]
    * @param[in]  customer_email QString [optional]
    * @param[in]  customer_id QString [optional]
    * @param[in]  room_number QString [optional]
    * @param[in]  external_id QString [optional]
    * @param[in]  company_name QString [optional]
    * @param[in]  company_id QString [optional]
    * @param[in]  company_email QString [optional]
    * @param[in]  block_code QString [optional]
    * @param[in]  reservation_statuses QList<QString> [optional]
    * @param[in]  market_codes QList<QString> [optional]
    * @param[in]  channel_codes QList<QString> [optional]
    * @param[in]  sub_channel_codes QList<QString> [optional]
    * @param[in]  room_types QList<QString> [optional]
    * @param[in]  rate_plan_codes QList<QString> [optional]
    * @param[in]  labels QList<QString> [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  date_filter QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void bookingsGetBookingsCount(const QString &app_id, const QString &app_key, const ::OpenAPI::OptionalParam<qint32> &hotel_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cancellation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &reservation_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &customer_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &room_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &block_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &reservation_statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &market_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &channel_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sub_channel_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &room_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &rate_plan_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &labels = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &date_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  confirmation_id QString [required]
    * @param[in]  reservation_number qint32 [required]
    * @param[in]  expand QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void bookingsGetReservation(const QString &app_id, const QString &app_key, const QString &confirmation_id, const qint32 &reservation_number, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  confirmation_id QString [required]
    * @param[in]  reservation_number qint32 [required]
    * @param[in]  patch_request QList<OAIOperation_ReservationPatchableModel> [required]
    */
    virtual void bookingsPatch(const QString &app_id, const QString &app_key, const QString &confirmation_id, const qint32 &reservation_number, const QList<OAIOperation_ReservationPatchableModel> &patch_request);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  confirmation_id QString [required]
    * @param[in]  reservation_number qint32 [required]
    * @param[in]  authorization_request OAIAuthorizationRequest [required]
    */
    virtual void bookingsPaymentToken(const QString &app_id, const QString &app_key, const QString &confirmation_id, const qint32 &reservation_number, const OAIAuthorizationRequest &authorization_request);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  confirmation_id QString [required]
    * @param[in]  reservation_number qint32 [required]
    * @param[in]  assigning_criteria OAIAssignRoomCriteria [optional]
    */
    virtual void bookingsPostRoomAssignment(const QString &app_id, const QString &app_key, const QString &confirmation_id, const qint32 &reservation_number, const ::OpenAPI::OptionalParam<OAIAssignRoomCriteria> &assigning_criteria = ::OpenAPI::OptionalParam<OAIAssignRoomCriteria>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  confirmation_id QString [required]
    * @param[in]  reservation_number qint32 [required]
    * @param[in]  authorization_request OAITerminalAuthorizationRequest [required]
    */
    virtual void bookingsTerminalAuthorization(const QString &app_id, const QString &app_key, const QString &confirmation_id, const qint32 &reservation_number, const OAITerminalAuthorizationRequest &authorization_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bookingsCancelReservationCallback(OAIHttpRequestWorker *worker);
    void bookingsCheckInCallback(OAIHttpRequestWorker *worker);
    void bookingsCheckOutCallback(OAIHttpRequestWorker *worker);
    void bookingsCreateBookingCallback(OAIHttpRequestWorker *worker);
    void bookingsGetBookingCallback(OAIHttpRequestWorker *worker);
    void bookingsGetBookingsCallback(OAIHttpRequestWorker *worker);
    void bookingsGetBookingsCountCallback(OAIHttpRequestWorker *worker);
    void bookingsGetReservationCallback(OAIHttpRequestWorker *worker);
    void bookingsPatchCallback(OAIHttpRequestWorker *worker);
    void bookingsPaymentTokenCallback(OAIHttpRequestWorker *worker);
    void bookingsPostRoomAssignmentCallback(OAIHttpRequestWorker *worker);
    void bookingsTerminalAuthorizationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bookingsCancelReservationSignal(OAICancellationResponse summary);
    void bookingsCheckInSignal(OAIBaseResponse summary);
    void bookingsCheckOutSignal(OAIBaseResponse summary);
    void bookingsCreateBookingSignal(OAIReservationConfirmation summary);
    void bookingsGetBookingSignal(OAIReservationsResponse summary);
    void bookingsGetBookingsSignal(OAIBookingListResponse summary);
    void bookingsGetBookingsCountSignal(OAITotalCountResponse summary);
    void bookingsGetReservationSignal(OAIReservationResponse summary);
    void bookingsPatchSignal(OAIObject summary);
    void bookingsPaymentTokenSignal(OAIBaseResponse summary);
    void bookingsPostRoomAssignmentSignal(OAIAssignRoomResponse summary);
    void bookingsTerminalAuthorizationSignal(OAIBaseResponse summary);


    void bookingsCancelReservationSignalFull(OAIHttpRequestWorker *worker, OAICancellationResponse summary);
    void bookingsCheckInSignalFull(OAIHttpRequestWorker *worker, OAIBaseResponse summary);
    void bookingsCheckOutSignalFull(OAIHttpRequestWorker *worker, OAIBaseResponse summary);
    void bookingsCreateBookingSignalFull(OAIHttpRequestWorker *worker, OAIReservationConfirmation summary);
    void bookingsGetBookingSignalFull(OAIHttpRequestWorker *worker, OAIReservationsResponse summary);
    void bookingsGetBookingsSignalFull(OAIHttpRequestWorker *worker, OAIBookingListResponse summary);
    void bookingsGetBookingsCountSignalFull(OAIHttpRequestWorker *worker, OAITotalCountResponse summary);
    void bookingsGetReservationSignalFull(OAIHttpRequestWorker *worker, OAIReservationResponse summary);
    void bookingsPatchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void bookingsPaymentTokenSignalFull(OAIHttpRequestWorker *worker, OAIBaseResponse summary);
    void bookingsPostRoomAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIAssignRoomResponse summary);
    void bookingsTerminalAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAIBaseResponse summary);

    Q_DECL_DEPRECATED_X("Use bookingsCancelReservationSignalError() instead")
    void bookingsCancelReservationSignalE(OAICancellationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsCancelReservationSignalError(OAICancellationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsCheckInSignalError() instead")
    void bookingsCheckInSignalE(OAIBaseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsCheckInSignalError(OAIBaseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsCheckOutSignalError() instead")
    void bookingsCheckOutSignalE(OAIBaseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsCheckOutSignalError(OAIBaseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsCreateBookingSignalError() instead")
    void bookingsCreateBookingSignalE(OAIReservationConfirmation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsCreateBookingSignalError(OAIReservationConfirmation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsGetBookingSignalError() instead")
    void bookingsGetBookingSignalE(OAIReservationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsGetBookingSignalError(OAIReservationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsGetBookingsSignalError() instead")
    void bookingsGetBookingsSignalE(OAIBookingListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsGetBookingsSignalError(OAIBookingListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsGetBookingsCountSignalError() instead")
    void bookingsGetBookingsCountSignalE(OAITotalCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsGetBookingsCountSignalError(OAITotalCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsGetReservationSignalError() instead")
    void bookingsGetReservationSignalE(OAIReservationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsGetReservationSignalError(OAIReservationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsPatchSignalError() instead")
    void bookingsPatchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsPatchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsPaymentTokenSignalError() instead")
    void bookingsPaymentTokenSignalE(OAIBaseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsPaymentTokenSignalError(OAIBaseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsPostRoomAssignmentSignalError() instead")
    void bookingsPostRoomAssignmentSignalE(OAIAssignRoomResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsPostRoomAssignmentSignalError(OAIAssignRoomResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsTerminalAuthorizationSignalError() instead")
    void bookingsTerminalAuthorizationSignalE(OAIBaseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsTerminalAuthorizationSignalError(OAIBaseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bookingsCancelReservationSignalErrorFull() instead")
    void bookingsCancelReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsCancelReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsCheckInSignalErrorFull() instead")
    void bookingsCheckInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsCheckInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsCheckOutSignalErrorFull() instead")
    void bookingsCheckOutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsCheckOutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsCreateBookingSignalErrorFull() instead")
    void bookingsCreateBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsCreateBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsGetBookingSignalErrorFull() instead")
    void bookingsGetBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsGetBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsGetBookingsSignalErrorFull() instead")
    void bookingsGetBookingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsGetBookingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsGetBookingsCountSignalErrorFull() instead")
    void bookingsGetBookingsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsGetBookingsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsGetReservationSignalErrorFull() instead")
    void bookingsGetReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsGetReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsPatchSignalErrorFull() instead")
    void bookingsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsPaymentTokenSignalErrorFull() instead")
    void bookingsPaymentTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsPaymentTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsPostRoomAssignmentSignalErrorFull() instead")
    void bookingsPostRoomAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsPostRoomAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bookingsTerminalAuthorizationSignalErrorFull() instead")
    void bookingsTerminalAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookingsTerminalAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
