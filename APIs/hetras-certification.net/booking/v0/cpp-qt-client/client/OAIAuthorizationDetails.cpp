/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationDetails::OAIAuthorizationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationDetails::OAIAuthorizationDetails() {
    this->initializeModel();
}

OAIAuthorizationDetails::~OAIAuthorizationDetails() {}

void OAIAuthorizationDetails::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;
}

void OAIAuthorizationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationDetails::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiry_date")]);
    m_expiry_date_isSet = !json[QString("expiry_date")].isNull() && m_expiry_date_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchant_reference")]);
    m_merchant_reference_isSet = !json[QString("merchant_reference")].isNull() && m_merchant_reference_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopper_reference")]);
    m_shopper_reference_isSet = !json[QString("shopper_reference")].isNull() && m_shopper_reference_isValid;
}

QString OAIAuthorizationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiry_date"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchant_reference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopper_reference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    return obj;
}

double OAIAuthorizationDetails::getAmount() const {
    return m_amount;
}
void OAIAuthorizationDetails::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIAuthorizationDetails::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIAuthorizationDetails::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAIAuthorizationDetails::getExpiryDate() const {
    return m_expiry_date;
}
void OAIAuthorizationDetails::setExpiryDate(const QDateTime &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIAuthorizationDetails::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIAuthorizationDetails::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIAuthorizationDetails::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIAuthorizationDetails::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIAuthorizationDetails::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIAuthorizationDetails::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAIAuthorizationDetails::getReference() const {
    return m_reference;
}
void OAIAuthorizationDetails::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIAuthorizationDetails::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIAuthorizationDetails::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIAuthorizationDetails::getShopperReference() const {
    return m_shopper_reference;
}
void OAIAuthorizationDetails::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIAuthorizationDetails::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIAuthorizationDetails::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

bool OAIAuthorizationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_merchant_reference_isValid && m_reference_isValid && m_shopper_reference_isValid && true;
}

} // namespace OpenAPI
