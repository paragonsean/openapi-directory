/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestrictions::OAIRestrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestrictions::OAIRestrictions() {
    this->initializeModel();
}

OAIRestrictions::~OAIRestrictions() {}

void OAIRestrictions::initializeModel() {

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_closed_to_arrival_isSet = false;
    m_closed_to_arrival_isValid = false;

    m_closed_to_departure_isSet = false;
    m_closed_to_departure_isValid = false;

    m_maximum_length_of_stay_isSet = false;
    m_maximum_length_of_stay_isValid = false;

    m_minimum_length_of_stay_isSet = false;
    m_minimum_length_of_stay_isValid = false;

    m_minimum_stay_through_isSet = false;
    m_minimum_stay_through_isValid = false;
}

void OAIRestrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestrictions::fromJsonObject(QJsonObject json) {

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_closed_to_arrival_isValid = ::OpenAPI::fromJsonValue(m_closed_to_arrival, json[QString("closed_to_arrival")]);
    m_closed_to_arrival_isSet = !json[QString("closed_to_arrival")].isNull() && m_closed_to_arrival_isValid;

    m_closed_to_departure_isValid = ::OpenAPI::fromJsonValue(m_closed_to_departure, json[QString("closed_to_departure")]);
    m_closed_to_departure_isSet = !json[QString("closed_to_departure")].isNull() && m_closed_to_departure_isValid;

    m_maximum_length_of_stay_isValid = ::OpenAPI::fromJsonValue(m_maximum_length_of_stay, json[QString("maximum_length_of_stay")]);
    m_maximum_length_of_stay_isSet = !json[QString("maximum_length_of_stay")].isNull() && m_maximum_length_of_stay_isValid;

    m_minimum_length_of_stay_isValid = ::OpenAPI::fromJsonValue(m_minimum_length_of_stay, json[QString("minimum_length_of_stay")]);
    m_minimum_length_of_stay_isSet = !json[QString("minimum_length_of_stay")].isNull() && m_minimum_length_of_stay_isValid;

    m_minimum_stay_through_isValid = ::OpenAPI::fromJsonValue(m_minimum_stay_through, json[QString("minimum_stay_through")]);
    m_minimum_stay_through_isSet = !json[QString("minimum_stay_through")].isNull() && m_minimum_stay_through_isValid;
}

QString OAIRestrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_closed_to_arrival_isSet) {
        obj.insert(QString("closed_to_arrival"), ::OpenAPI::toJsonValue(m_closed_to_arrival));
    }
    if (m_closed_to_departure_isSet) {
        obj.insert(QString("closed_to_departure"), ::OpenAPI::toJsonValue(m_closed_to_departure));
    }
    if (m_maximum_length_of_stay_isSet) {
        obj.insert(QString("maximum_length_of_stay"), ::OpenAPI::toJsonValue(m_maximum_length_of_stay));
    }
    if (m_minimum_length_of_stay_isSet) {
        obj.insert(QString("minimum_length_of_stay"), ::OpenAPI::toJsonValue(m_minimum_length_of_stay));
    }
    if (m_minimum_stay_through_isSet) {
        obj.insert(QString("minimum_stay_through"), ::OpenAPI::toJsonValue(m_minimum_stay_through));
    }
    return obj;
}

bool OAIRestrictions::isClosed() const {
    return m_closed;
}
void OAIRestrictions::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIRestrictions::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIRestrictions::is_closed_Valid() const{
    return m_closed_isValid;
}

bool OAIRestrictions::isClosedToArrival() const {
    return m_closed_to_arrival;
}
void OAIRestrictions::setClosedToArrival(const bool &closed_to_arrival) {
    m_closed_to_arrival = closed_to_arrival;
    m_closed_to_arrival_isSet = true;
}

bool OAIRestrictions::is_closed_to_arrival_Set() const{
    return m_closed_to_arrival_isSet;
}

bool OAIRestrictions::is_closed_to_arrival_Valid() const{
    return m_closed_to_arrival_isValid;
}

bool OAIRestrictions::isClosedToDeparture() const {
    return m_closed_to_departure;
}
void OAIRestrictions::setClosedToDeparture(const bool &closed_to_departure) {
    m_closed_to_departure = closed_to_departure;
    m_closed_to_departure_isSet = true;
}

bool OAIRestrictions::is_closed_to_departure_Set() const{
    return m_closed_to_departure_isSet;
}

bool OAIRestrictions::is_closed_to_departure_Valid() const{
    return m_closed_to_departure_isValid;
}

qint32 OAIRestrictions::getMaximumLengthOfStay() const {
    return m_maximum_length_of_stay;
}
void OAIRestrictions::setMaximumLengthOfStay(const qint32 &maximum_length_of_stay) {
    m_maximum_length_of_stay = maximum_length_of_stay;
    m_maximum_length_of_stay_isSet = true;
}

bool OAIRestrictions::is_maximum_length_of_stay_Set() const{
    return m_maximum_length_of_stay_isSet;
}

bool OAIRestrictions::is_maximum_length_of_stay_Valid() const{
    return m_maximum_length_of_stay_isValid;
}

qint32 OAIRestrictions::getMinimumLengthOfStay() const {
    return m_minimum_length_of_stay;
}
void OAIRestrictions::setMinimumLengthOfStay(const qint32 &minimum_length_of_stay) {
    m_minimum_length_of_stay = minimum_length_of_stay;
    m_minimum_length_of_stay_isSet = true;
}

bool OAIRestrictions::is_minimum_length_of_stay_Set() const{
    return m_minimum_length_of_stay_isSet;
}

bool OAIRestrictions::is_minimum_length_of_stay_Valid() const{
    return m_minimum_length_of_stay_isValid;
}

qint32 OAIRestrictions::getMinimumStayThrough() const {
    return m_minimum_stay_through;
}
void OAIRestrictions::setMinimumStayThrough(const qint32 &minimum_stay_through) {
    m_minimum_stay_through = minimum_stay_through;
    m_minimum_stay_through_isSet = true;
}

bool OAIRestrictions::is_minimum_stay_through_Set() const{
    return m_minimum_stay_through_isSet;
}

bool OAIRestrictions::is_minimum_stay_through_Valid() const{
    return m_minimum_stay_through_isValid;
}

bool OAIRestrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_to_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_to_departure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_length_of_stay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_length_of_stay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_stay_through_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
