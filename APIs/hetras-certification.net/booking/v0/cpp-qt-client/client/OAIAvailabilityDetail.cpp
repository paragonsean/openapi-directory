/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityDetail::OAIAvailabilityDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityDetail::OAIAvailabilityDetail() {
    this->initializeModel();
}

OAIAvailabilityDetail::~OAIAvailabilityDetail() {}

void OAIAvailabilityDetail::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_available_isSet = false;
    m_available_isValid = false;

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_day_use_isSet = false;
    m_day_use_isValid = false;

    m_house_count_isSet = false;
    m_house_count_isValid = false;

    m_maintenance_isSet = false;
    m_maintenance_isValid = false;

    m_overbooking_isSet = false;
    m_overbooking_isValid = false;

    m_room_count_isSet = false;
    m_room_count_isValid = false;

    m_sold_isSet = false;
    m_sold_isValid = false;

    m_to_sell_isSet = false;
    m_to_sell_isValid = false;
}

void OAIAvailabilityDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityDetail::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_day_use_isValid = ::OpenAPI::fromJsonValue(m_day_use, json[QString("day_use")]);
    m_day_use_isSet = !json[QString("day_use")].isNull() && m_day_use_isValid;

    m_house_count_isValid = ::OpenAPI::fromJsonValue(m_house_count, json[QString("house_count")]);
    m_house_count_isSet = !json[QString("house_count")].isNull() && m_house_count_isValid;

    m_maintenance_isValid = ::OpenAPI::fromJsonValue(m_maintenance, json[QString("maintenance")]);
    m_maintenance_isSet = !json[QString("maintenance")].isNull() && m_maintenance_isValid;

    m_overbooking_isValid = ::OpenAPI::fromJsonValue(m_overbooking, json[QString("overbooking")]);
    m_overbooking_isSet = !json[QString("overbooking")].isNull() && m_overbooking_isValid;

    m_room_count_isValid = ::OpenAPI::fromJsonValue(m_room_count, json[QString("room_count")]);
    m_room_count_isSet = !json[QString("room_count")].isNull() && m_room_count_isValid;

    m_sold_isValid = ::OpenAPI::fromJsonValue(m_sold, json[QString("sold")]);
    m_sold_isSet = !json[QString("sold")].isNull() && m_sold_isValid;

    m_to_sell_isValid = ::OpenAPI::fromJsonValue(m_to_sell, json[QString("to_sell")]);
    m_to_sell_isSet = !json[QString("to_sell")].isNull() && m_to_sell_isValid;
}

QString OAIAvailabilityDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityDetail::asJsonObject() const {
    QJsonObject obj;
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_blocked.isSet()) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    if (m_day_use_isSet) {
        obj.insert(QString("day_use"), ::OpenAPI::toJsonValue(m_day_use));
    }
    if (m_house_count_isSet) {
        obj.insert(QString("house_count"), ::OpenAPI::toJsonValue(m_house_count));
    }
    if (m_maintenance.isSet()) {
        obj.insert(QString("maintenance"), ::OpenAPI::toJsonValue(m_maintenance));
    }
    if (m_overbooking_isSet) {
        obj.insert(QString("overbooking"), ::OpenAPI::toJsonValue(m_overbooking));
    }
    if (m_room_count_isSet) {
        obj.insert(QString("room_count"), ::OpenAPI::toJsonValue(m_room_count));
    }
    if (m_sold_isSet) {
        obj.insert(QString("sold"), ::OpenAPI::toJsonValue(m_sold));
    }
    if (m_to_sell_isSet) {
        obj.insert(QString("to_sell"), ::OpenAPI::toJsonValue(m_to_sell));
    }
    return obj;
}

QMap<QString, OAILinkObject> OAIAvailabilityDetail::getLinks() const {
    return m__links;
}
void OAIAvailabilityDetail::setLinks(const QMap<QString, OAILinkObject> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAvailabilityDetail::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAvailabilityDetail::is__links_Valid() const{
    return m__links_isValid;
}

qint32 OAIAvailabilityDetail::getAvailable() const {
    return m_available;
}
void OAIAvailabilityDetail::setAvailable(const qint32 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIAvailabilityDetail::is_available_Set() const{
    return m_available_isSet;
}

bool OAIAvailabilityDetail::is_available_Valid() const{
    return m_available_isValid;
}

OAIBlocked OAIAvailabilityDetail::getBlocked() const {
    return m_blocked;
}
void OAIAvailabilityDetail::setBlocked(const OAIBlocked &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAIAvailabilityDetail::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAIAvailabilityDetail::is_blocked_Valid() const{
    return m_blocked_isValid;
}

qint32 OAIAvailabilityDetail::getDayUse() const {
    return m_day_use;
}
void OAIAvailabilityDetail::setDayUse(const qint32 &day_use) {
    m_day_use = day_use;
    m_day_use_isSet = true;
}

bool OAIAvailabilityDetail::is_day_use_Set() const{
    return m_day_use_isSet;
}

bool OAIAvailabilityDetail::is_day_use_Valid() const{
    return m_day_use_isValid;
}

qint32 OAIAvailabilityDetail::getHouseCount() const {
    return m_house_count;
}
void OAIAvailabilityDetail::setHouseCount(const qint32 &house_count) {
    m_house_count = house_count;
    m_house_count_isSet = true;
}

bool OAIAvailabilityDetail::is_house_count_Set() const{
    return m_house_count_isSet;
}

bool OAIAvailabilityDetail::is_house_count_Valid() const{
    return m_house_count_isValid;
}

OAIMaintenance OAIAvailabilityDetail::getMaintenance() const {
    return m_maintenance;
}
void OAIAvailabilityDetail::setMaintenance(const OAIMaintenance &maintenance) {
    m_maintenance = maintenance;
    m_maintenance_isSet = true;
}

bool OAIAvailabilityDetail::is_maintenance_Set() const{
    return m_maintenance_isSet;
}

bool OAIAvailabilityDetail::is_maintenance_Valid() const{
    return m_maintenance_isValid;
}

qint32 OAIAvailabilityDetail::getOverbooking() const {
    return m_overbooking;
}
void OAIAvailabilityDetail::setOverbooking(const qint32 &overbooking) {
    m_overbooking = overbooking;
    m_overbooking_isSet = true;
}

bool OAIAvailabilityDetail::is_overbooking_Set() const{
    return m_overbooking_isSet;
}

bool OAIAvailabilityDetail::is_overbooking_Valid() const{
    return m_overbooking_isValid;
}

qint32 OAIAvailabilityDetail::getRoomCount() const {
    return m_room_count;
}
void OAIAvailabilityDetail::setRoomCount(const qint32 &room_count) {
    m_room_count = room_count;
    m_room_count_isSet = true;
}

bool OAIAvailabilityDetail::is_room_count_Set() const{
    return m_room_count_isSet;
}

bool OAIAvailabilityDetail::is_room_count_Valid() const{
    return m_room_count_isValid;
}

qint32 OAIAvailabilityDetail::getSold() const {
    return m_sold;
}
void OAIAvailabilityDetail::setSold(const qint32 &sold) {
    m_sold = sold;
    m_sold_isSet = true;
}

bool OAIAvailabilityDetail::is_sold_Set() const{
    return m_sold_isSet;
}

bool OAIAvailabilityDetail::is_sold_Valid() const{
    return m_sold_isValid;
}

qint32 OAIAvailabilityDetail::getToSell() const {
    return m_to_sell;
}
void OAIAvailabilityDetail::setToSell(const qint32 &to_sell) {
    m_to_sell = to_sell;
    m_to_sell_isSet = true;
}

bool OAIAvailabilityDetail::is_to_sell_Set() const{
    return m_to_sell_isSet;
}

bool OAIAvailabilityDetail::is_to_sell_Valid() const{
    return m_to_sell_isValid;
}

bool OAIAvailabilityDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overbooking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_sell_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
