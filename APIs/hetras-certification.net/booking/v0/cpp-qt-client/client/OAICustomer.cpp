/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer::OAICustomer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer::OAICustomer() {
    this->initializeModel();
}

OAICustomer::~OAICustomer() {}

void OAICustomer::initializeModel() {

    m_consent_subscribe_isSet = false;
    m_consent_subscribe_isValid = false;

    m_consent_unsubscribe_isSet = false;
    m_consent_unsubscribe_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_mailing_address_isSet = false;
    m_mailing_address_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICustomer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer::fromJsonObject(QJsonObject json) {

    m_consent_subscribe_isValid = ::OpenAPI::fromJsonValue(m_consent_subscribe, json[QString("consent_subscribe")]);
    m_consent_subscribe_isSet = !json[QString("consent_subscribe")].isNull() && m_consent_subscribe_isValid;

    m_consent_unsubscribe_isValid = ::OpenAPI::fromJsonValue(m_consent_unsubscribe, json[QString("consent_unsubscribe")]);
    m_consent_unsubscribe_isSet = !json[QString("consent_unsubscribe")].isNull() && m_consent_unsubscribe_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_mailing_address_isValid = ::OpenAPI::fromJsonValue(m_mailing_address, json[QString("mailing_address")]);
    m_mailing_address_isSet = !json[QString("mailing_address")].isNull() && m_mailing_address_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("nationality")]);
    m_nationality_isSet = !json[QString("nationality")].isNull() && m_nationality_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICustomer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_subscribe.size() > 0) {
        obj.insert(QString("consent_subscribe"), ::OpenAPI::toJsonValue(m_consent_subscribe));
    }
    if (m_consent_unsubscribe.size() > 0) {
        obj.insert(QString("consent_unsubscribe"), ::OpenAPI::toJsonValue(m_consent_unsubscribe));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_mailing_address.isSet()) {
        obj.insert(QString("mailing_address"), ::OpenAPI::toJsonValue(m_mailing_address));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<QString> OAICustomer::getConsentSubscribe() const {
    return m_consent_subscribe;
}
void OAICustomer::setConsentSubscribe(const QList<QString> &consent_subscribe) {
    m_consent_subscribe = consent_subscribe;
    m_consent_subscribe_isSet = true;
}

bool OAICustomer::is_consent_subscribe_Set() const{
    return m_consent_subscribe_isSet;
}

bool OAICustomer::is_consent_subscribe_Valid() const{
    return m_consent_subscribe_isValid;
}

QList<QString> OAICustomer::getConsentUnsubscribe() const {
    return m_consent_unsubscribe;
}
void OAICustomer::setConsentUnsubscribe(const QList<QString> &consent_unsubscribe) {
    m_consent_unsubscribe = consent_unsubscribe;
    m_consent_unsubscribe_isSet = true;
}

bool OAICustomer::is_consent_unsubscribe_Set() const{
    return m_consent_unsubscribe_isSet;
}

bool OAICustomer::is_consent_unsubscribe_Valid() const{
    return m_consent_unsubscribe_isValid;
}

QString OAICustomer::getCustomerId() const {
    return m_customer_id;
}
void OAICustomer::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICustomer::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICustomer::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAICustomer::getEmail() const {
    return m_email;
}
void OAICustomer::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICustomer::is_email_Set() const{
    return m_email_isSet;
}

bool OAICustomer::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICustomer::getFirstName() const {
    return m_first_name;
}
void OAICustomer::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAICustomer::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAICustomer::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAICustomer::getGender() const {
    return m_gender;
}
void OAICustomer::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAICustomer::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAICustomer::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAICustomer::getLastName() const {
    return m_last_name;
}
void OAICustomer::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICustomer::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICustomer::is_last_name_Valid() const{
    return m_last_name_isValid;
}

OAIMailingAddress OAICustomer::getMailingAddress() const {
    return m_mailing_address;
}
void OAICustomer::setMailingAddress(const OAIMailingAddress &mailing_address) {
    m_mailing_address = mailing_address;
    m_mailing_address_isSet = true;
}

bool OAICustomer::is_mailing_address_Set() const{
    return m_mailing_address_isSet;
}

bool OAICustomer::is_mailing_address_Valid() const{
    return m_mailing_address_isValid;
}

QString OAICustomer::getNationality() const {
    return m_nationality;
}
void OAICustomer::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAICustomer::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAICustomer::is_nationality_Valid() const{
    return m_nationality_isValid;
}

QString OAICustomer::getPhone() const {
    return m_phone;
}
void OAICustomer::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICustomer::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICustomer::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAICustomer::isPrimary() const {
    return m_primary;
}
void OAICustomer::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAICustomer::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAICustomer::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAICustomer::getTitle() const {
    return m_title;
}
void OAICustomer::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICustomer::is_title_Set() const{
    return m_title_isSet;
}

bool OAICustomer::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICustomer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_subscribe.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_unsubscribe.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
