/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRates::OAIRates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRates::OAIRates() {
    this->initializeModel();
}

OAIRates::~OAIRates() {}

void OAIRates::initializeModel() {

    m_arrival_date_isSet = false;
    m_arrival_date_isValid = false;

    m_departure_date_isSet = false;
    m_departure_date_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_hotel_name_isSet = false;
    m_hotel_name_isValid = false;

    m_rate_plans_isSet = false;
    m_rate_plans_isValid = false;

    m_room_offers_isSet = false;
    m_room_offers_isValid = false;

    m_rooms_isSet = false;
    m_rooms_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;
}

void OAIRates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRates::fromJsonObject(QJsonObject json) {

    m_arrival_date_isValid = ::OpenAPI::fromJsonValue(m_arrival_date, json[QString("arrival_date")]);
    m_arrival_date_isSet = !json[QString("arrival_date")].isNull() && m_arrival_date_isValid;

    m_departure_date_isValid = ::OpenAPI::fromJsonValue(m_departure_date, json[QString("departure_date")]);
    m_departure_date_isSet = !json[QString("departure_date")].isNull() && m_departure_date_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotel_id")]);
    m_hotel_id_isSet = !json[QString("hotel_id")].isNull() && m_hotel_id_isValid;

    m_hotel_name_isValid = ::OpenAPI::fromJsonValue(m_hotel_name, json[QString("hotel_name")]);
    m_hotel_name_isSet = !json[QString("hotel_name")].isNull() && m_hotel_name_isValid;

    m_rate_plans_isValid = ::OpenAPI::fromJsonValue(m_rate_plans, json[QString("rate_plans")]);
    m_rate_plans_isSet = !json[QString("rate_plans")].isNull() && m_rate_plans_isValid;

    m_room_offers_isValid = ::OpenAPI::fromJsonValue(m_room_offers, json[QString("room_offers")]);
    m_room_offers_isSet = !json[QString("room_offers")].isNull() && m_room_offers_isValid;

    m_rooms_isValid = ::OpenAPI::fromJsonValue(m_rooms, json[QString("rooms")]);
    m_rooms_isSet = !json[QString("rooms")].isNull() && m_rooms_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;
}

QString OAIRates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRates::asJsonObject() const {
    QJsonObject obj;
    if (m_arrival_date_isSet) {
        obj.insert(QString("arrival_date"), ::OpenAPI::toJsonValue(m_arrival_date));
    }
    if (m_departure_date_isSet) {
        obj.insert(QString("departure_date"), ::OpenAPI::toJsonValue(m_departure_date));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotel_id"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_hotel_name_isSet) {
        obj.insert(QString("hotel_name"), ::OpenAPI::toJsonValue(m_hotel_name));
    }
    if (m_rate_plans.size() > 0) {
        obj.insert(QString("rate_plans"), ::OpenAPI::toJsonValue(m_rate_plans));
    }
    if (m_room_offers.size() > 0) {
        obj.insert(QString("room_offers"), ::OpenAPI::toJsonValue(m_room_offers));
    }
    if (m_rooms.size() > 0) {
        obj.insert(QString("rooms"), ::OpenAPI::toJsonValue(m_rooms));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    return obj;
}

QDateTime OAIRates::getArrivalDate() const {
    return m_arrival_date;
}
void OAIRates::setArrivalDate(const QDateTime &arrival_date) {
    m_arrival_date = arrival_date;
    m_arrival_date_isSet = true;
}

bool OAIRates::is_arrival_date_Set() const{
    return m_arrival_date_isSet;
}

bool OAIRates::is_arrival_date_Valid() const{
    return m_arrival_date_isValid;
}

QDateTime OAIRates::getDepartureDate() const {
    return m_departure_date;
}
void OAIRates::setDepartureDate(const QDateTime &departure_date) {
    m_departure_date = departure_date;
    m_departure_date_isSet = true;
}

bool OAIRates::is_departure_date_Set() const{
    return m_departure_date_isSet;
}

bool OAIRates::is_departure_date_Valid() const{
    return m_departure_date_isValid;
}

qint32 OAIRates::getHotelId() const {
    return m_hotel_id;
}
void OAIRates::setHotelId(const qint32 &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIRates::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIRates::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

QString OAIRates::getHotelName() const {
    return m_hotel_name;
}
void OAIRates::setHotelName(const QString &hotel_name) {
    m_hotel_name = hotel_name;
    m_hotel_name_isSet = true;
}

bool OAIRates::is_hotel_name_Set() const{
    return m_hotel_name_isSet;
}

bool OAIRates::is_hotel_name_Valid() const{
    return m_hotel_name_isValid;
}

QList<OAIRatePlan> OAIRates::getRatePlans() const {
    return m_rate_plans;
}
void OAIRates::setRatePlans(const QList<OAIRatePlan> &rate_plans) {
    m_rate_plans = rate_plans;
    m_rate_plans_isSet = true;
}

bool OAIRates::is_rate_plans_Set() const{
    return m_rate_plans_isSet;
}

bool OAIRates::is_rate_plans_Valid() const{
    return m_rate_plans_isValid;
}

QList<OAIRoomOffer> OAIRates::getRoomOffers() const {
    return m_room_offers;
}
void OAIRates::setRoomOffers(const QList<OAIRoomOffer> &room_offers) {
    m_room_offers = room_offers;
    m_room_offers_isSet = true;
}

bool OAIRates::is_room_offers_Set() const{
    return m_room_offers_isSet;
}

bool OAIRates::is_room_offers_Valid() const{
    return m_room_offers_isValid;
}

QList<OAIReservationRoom> OAIRates::getRooms() const {
    return m_rooms;
}
void OAIRates::setRooms(const QList<OAIReservationRoom> &rooms) {
    m_rooms = rooms;
    m_rooms_isSet = true;
}

bool OAIRates::is_rooms_Set() const{
    return m_rooms_isSet;
}

bool OAIRates::is_rooms_Valid() const{
    return m_rooms_isValid;
}

QList<OAIService> OAIRates::getServices() const {
    return m_services;
}
void OAIRates::setServices(const QList<OAIService> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIRates::is_services_Set() const{
    return m_services_isSet;
}

bool OAIRates::is_services_Valid() const{
    return m_services_isValid;
}

bool OAIRates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arrival_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_plans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rooms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
