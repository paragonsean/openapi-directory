/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlocked.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlocked::OAIBlocked(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlocked::OAIBlocked() {
    this->initializeModel();
}

OAIBlocked::~OAIBlocked() {}

void OAIBlocked::initializeModel() {

    m_definite_isSet = false;
    m_definite_isValid = false;

    m_remaining_isSet = false;
    m_remaining_isValid = false;

    m_tentative_isSet = false;
    m_tentative_isValid = false;
}

void OAIBlocked::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlocked::fromJsonObject(QJsonObject json) {

    m_definite_isValid = ::OpenAPI::fromJsonValue(m_definite, json[QString("definite")]);
    m_definite_isSet = !json[QString("definite")].isNull() && m_definite_isValid;

    m_remaining_isValid = ::OpenAPI::fromJsonValue(m_remaining, json[QString("remaining")]);
    m_remaining_isSet = !json[QString("remaining")].isNull() && m_remaining_isValid;

    m_tentative_isValid = ::OpenAPI::fromJsonValue(m_tentative, json[QString("tentative")]);
    m_tentative_isSet = !json[QString("tentative")].isNull() && m_tentative_isValid;
}

QString OAIBlocked::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlocked::asJsonObject() const {
    QJsonObject obj;
    if (m_definite_isSet) {
        obj.insert(QString("definite"), ::OpenAPI::toJsonValue(m_definite));
    }
    if (m_remaining_isSet) {
        obj.insert(QString("remaining"), ::OpenAPI::toJsonValue(m_remaining));
    }
    if (m_tentative_isSet) {
        obj.insert(QString("tentative"), ::OpenAPI::toJsonValue(m_tentative));
    }
    return obj;
}

qint32 OAIBlocked::getDefinite() const {
    return m_definite;
}
void OAIBlocked::setDefinite(const qint32 &definite) {
    m_definite = definite;
    m_definite_isSet = true;
}

bool OAIBlocked::is_definite_Set() const{
    return m_definite_isSet;
}

bool OAIBlocked::is_definite_Valid() const{
    return m_definite_isValid;
}

qint32 OAIBlocked::getRemaining() const {
    return m_remaining;
}
void OAIBlocked::setRemaining(const qint32 &remaining) {
    m_remaining = remaining;
    m_remaining_isSet = true;
}

bool OAIBlocked::is_remaining_Set() const{
    return m_remaining_isSet;
}

bool OAIBlocked::is_remaining_Valid() const{
    return m_remaining_isValid;
}

qint32 OAIBlocked::getTentative() const {
    return m_tentative;
}
void OAIBlocked::setTentative(const qint32 &tentative) {
    m_tentative = tentative;
    m_tentative_isSet = true;
}

bool OAIBlocked::is_tentative_Set() const{
    return m_tentative_isSet;
}

bool OAIBlocked::is_tentative_Valid() const{
    return m_tentative_isValid;
}

bool OAIBlocked::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_definite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tentative_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlocked::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
