/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlockListRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlockListRequest::OAIBlockListRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlockListRequest::OAIBlockListRequest() {
    this->initializeModel();
}

OAIBlockListRequest::~OAIBlockListRequest() {}

void OAIBlockListRequest::initializeModel() {

    m_count_details_isSet = false;
    m_count_details_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_group_code_isSet = false;
    m_group_code_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_rate_plan_codes_isSet = false;
    m_rate_plan_codes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIBlockListRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlockListRequest::fromJsonObject(QJsonObject json) {

    m_count_details_isValid = ::OpenAPI::fromJsonValue(m_count_details, json[QString("countDetails")]);
    m_count_details_isSet = !json[QString("countDetails")].isNull() && m_count_details_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_group_code_isValid = ::OpenAPI::fromJsonValue(m_group_code, json[QString("groupCode")]);
    m_group_code_isSet = !json[QString("groupCode")].isNull() && m_group_code_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotelId")]);
    m_hotel_id_isSet = !json[QString("hotelId")].isNull() && m_hotel_id_isValid;

    m_rate_plan_codes_isValid = ::OpenAPI::fromJsonValue(m_rate_plan_codes, json[QString("ratePlanCodes")]);
    m_rate_plan_codes_isSet = !json[QString("ratePlanCodes")].isNull() && m_rate_plan_codes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIBlockListRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlockListRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_count_details_isSet) {
        obj.insert(QString("countDetails"), ::OpenAPI::toJsonValue(m_count_details));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_group_code_isSet) {
        obj.insert(QString("groupCode"), ::OpenAPI::toJsonValue(m_group_code));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotelId"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_rate_plan_codes.size() > 0) {
        obj.insert(QString("ratePlanCodes"), ::OpenAPI::toJsonValue(m_rate_plan_codes));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

bool OAIBlockListRequest::isCountDetails() const {
    return m_count_details;
}
void OAIBlockListRequest::setCountDetails(const bool &count_details) {
    m_count_details = count_details;
    m_count_details_isSet = true;
}

bool OAIBlockListRequest::is_count_details_Set() const{
    return m_count_details_isSet;
}

bool OAIBlockListRequest::is_count_details_Valid() const{
    return m_count_details_isValid;
}

QDateTime OAIBlockListRequest::getFrom() const {
    return m_from;
}
void OAIBlockListRequest::setFrom(const QDateTime &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIBlockListRequest::is_from_Set() const{
    return m_from_isSet;
}

bool OAIBlockListRequest::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIBlockListRequest::getGroupCode() const {
    return m_group_code;
}
void OAIBlockListRequest::setGroupCode(const QString &group_code) {
    m_group_code = group_code;
    m_group_code_isSet = true;
}

bool OAIBlockListRequest::is_group_code_Set() const{
    return m_group_code_isSet;
}

bool OAIBlockListRequest::is_group_code_Valid() const{
    return m_group_code_isValid;
}

qint32 OAIBlockListRequest::getHotelId() const {
    return m_hotel_id;
}
void OAIBlockListRequest::setHotelId(const qint32 &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIBlockListRequest::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIBlockListRequest::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

QList<QString> OAIBlockListRequest::getRatePlanCodes() const {
    return m_rate_plan_codes;
}
void OAIBlockListRequest::setRatePlanCodes(const QList<QString> &rate_plan_codes) {
    m_rate_plan_codes = rate_plan_codes;
    m_rate_plan_codes_isSet = true;
}

bool OAIBlockListRequest::is_rate_plan_codes_Set() const{
    return m_rate_plan_codes_isSet;
}

bool OAIBlockListRequest::is_rate_plan_codes_Valid() const{
    return m_rate_plan_codes_isValid;
}

QString OAIBlockListRequest::getStatus() const {
    return m_status;
}
void OAIBlockListRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBlockListRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBlockListRequest::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIBlockListRequest::getTo() const {
    return m_to;
}
void OAIBlockListRequest::setTo(const QDateTime &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIBlockListRequest::is_to_Set() const{
    return m_to_isSet;
}

bool OAIBlockListRequest::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIBlockListRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_plan_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlockListRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
