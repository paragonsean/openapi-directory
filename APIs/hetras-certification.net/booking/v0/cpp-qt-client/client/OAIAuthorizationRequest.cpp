/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationRequest::OAIAuthorizationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationRequest::OAIAuthorizationRequest() {
    this->initializeModel();
}

OAIAuthorizationRequest::~OAIAuthorizationRequest() {}

void OAIAuthorizationRequest::initializeModel() {

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_no_authorization_required_isSet = false;
    m_no_authorization_required_isValid = false;

    m_payment_token_isSet = false;
    m_payment_token_isValid = false;
}

void OAIAuthorizationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationRequest::fromJsonObject(QJsonObject json) {

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_no_authorization_required_isValid = ::OpenAPI::fromJsonValue(m_no_authorization_required, json[QString("no_authorization_required")]);
    m_no_authorization_required_isSet = !json[QString("no_authorization_required")].isNull() && m_no_authorization_required_isValid;

    m_payment_token_isValid = ::OpenAPI::fromJsonValue(m_payment_token, json[QString("payment_token")]);
    m_payment_token_isSet = !json[QString("payment_token")].isNull() && m_payment_token_isValid;
}

QString OAIAuthorizationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization.isSet()) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_no_authorization_required_isSet) {
        obj.insert(QString("no_authorization_required"), ::OpenAPI::toJsonValue(m_no_authorization_required));
    }
    if (m_payment_token_isSet) {
        obj.insert(QString("payment_token"), ::OpenAPI::toJsonValue(m_payment_token));
    }
    return obj;
}

OAIAuthorizationDetails OAIAuthorizationRequest::getAuthorization() const {
    return m_authorization;
}
void OAIAuthorizationRequest::setAuthorization(const OAIAuthorizationDetails &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAIAuthorizationRequest::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAIAuthorizationRequest::is_authorization_Valid() const{
    return m_authorization_isValid;
}

bool OAIAuthorizationRequest::isNoAuthorizationRequired() const {
    return m_no_authorization_required;
}
void OAIAuthorizationRequest::setNoAuthorizationRequired(const bool &no_authorization_required) {
    m_no_authorization_required = no_authorization_required;
    m_no_authorization_required_isSet = true;
}

bool OAIAuthorizationRequest::is_no_authorization_required_Set() const{
    return m_no_authorization_required_isSet;
}

bool OAIAuthorizationRequest::is_no_authorization_required_Valid() const{
    return m_no_authorization_required_isValid;
}

QString OAIAuthorizationRequest::getPaymentToken() const {
    return m_payment_token;
}
void OAIAuthorizationRequest::setPaymentToken(const QString &payment_token) {
    m_payment_token = payment_token;
    m_payment_token_isSet = true;
}

bool OAIAuthorizationRequest::is_payment_token_Set() const{
    return m_payment_token_isSet;
}

bool OAIAuthorizationRequest::is_payment_token_Valid() const{
    return m_payment_token_isValid;
}

bool OAIAuthorizationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_authorization_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payment_token_isValid && true;
}

} // namespace OpenAPI
