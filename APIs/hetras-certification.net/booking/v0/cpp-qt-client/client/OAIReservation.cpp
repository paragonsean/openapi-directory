/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservation::OAIReservation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservation::OAIReservation() {
    this->initializeModel();
}

OAIReservation::~OAIReservation() {}

void OAIReservation::initializeModel() {

    m_addons_isSet = false;
    m_addons_isValid = false;

    m_adults_isSet = false;
    m_adults_isValid = false;

    m_arrival_date_isSet = false;
    m_arrival_date_isValid = false;

    m_channel_code_isSet = false;
    m_channel_code_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_departure_date_isSet = false;
    m_departure_date_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_group_code_isSet = false;
    m_group_code_isValid = false;

    m_guarantee_isSet = false;
    m_guarantee_isValid = false;

    m_guests_isSet = false;
    m_guests_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_prepay_discount_isSet = false;
    m_prepay_discount_isValid = false;

    m_rate_plan_isSet = false;
    m_rate_plan_isValid = false;

    m_room_type_isSet = false;
    m_room_type_isValid = false;

    m_rooms_isSet = false;
    m_rooms_isValid = false;

    m_travel_agent_isSet = false;
    m_travel_agent_isValid = false;
}

void OAIReservation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservation::fromJsonObject(QJsonObject json) {

    m_addons_isValid = ::OpenAPI::fromJsonValue(m_addons, json[QString("addons")]);
    m_addons_isSet = !json[QString("addons")].isNull() && m_addons_isValid;

    m_adults_isValid = ::OpenAPI::fromJsonValue(m_adults, json[QString("adults")]);
    m_adults_isSet = !json[QString("adults")].isNull() && m_adults_isValid;

    m_arrival_date_isValid = ::OpenAPI::fromJsonValue(m_arrival_date, json[QString("arrival_date")]);
    m_arrival_date_isSet = !json[QString("arrival_date")].isNull() && m_arrival_date_isValid;

    m_channel_code_isValid = ::OpenAPI::fromJsonValue(m_channel_code, json[QString("channel_code")]);
    m_channel_code_isSet = !json[QString("channel_code")].isNull() && m_channel_code_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_departure_date_isValid = ::OpenAPI::fromJsonValue(m_departure_date, json[QString("departure_date")]);
    m_departure_date_isSet = !json[QString("departure_date")].isNull() && m_departure_date_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_group_code_isValid = ::OpenAPI::fromJsonValue(m_group_code, json[QString("group_code")]);
    m_group_code_isSet = !json[QString("group_code")].isNull() && m_group_code_isValid;

    m_guarantee_isValid = ::OpenAPI::fromJsonValue(m_guarantee, json[QString("guarantee")]);
    m_guarantee_isSet = !json[QString("guarantee")].isNull() && m_guarantee_isValid;

    m_guests_isValid = ::OpenAPI::fromJsonValue(m_guests, json[QString("guests")]);
    m_guests_isSet = !json[QString("guests")].isNull() && m_guests_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotel_id")]);
    m_hotel_id_isSet = !json[QString("hotel_id")].isNull() && m_hotel_id_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_prepay_discount_isValid = ::OpenAPI::fromJsonValue(m_prepay_discount, json[QString("prepay_discount")]);
    m_prepay_discount_isSet = !json[QString("prepay_discount")].isNull() && m_prepay_discount_isValid;

    m_rate_plan_isValid = ::OpenAPI::fromJsonValue(m_rate_plan, json[QString("rate_plan")]);
    m_rate_plan_isSet = !json[QString("rate_plan")].isNull() && m_rate_plan_isValid;

    m_room_type_isValid = ::OpenAPI::fromJsonValue(m_room_type, json[QString("room_type")]);
    m_room_type_isSet = !json[QString("room_type")].isNull() && m_room_type_isValid;

    m_rooms_isValid = ::OpenAPI::fromJsonValue(m_rooms, json[QString("rooms")]);
    m_rooms_isSet = !json[QString("rooms")].isNull() && m_rooms_isValid;

    m_travel_agent_isValid = ::OpenAPI::fromJsonValue(m_travel_agent, json[QString("travel_agent")]);
    m_travel_agent_isSet = !json[QString("travel_agent")].isNull() && m_travel_agent_isValid;
}

QString OAIReservation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservation::asJsonObject() const {
    QJsonObject obj;
    if (m_addons.size() > 0) {
        obj.insert(QString("addons"), ::OpenAPI::toJsonValue(m_addons));
    }
    if (m_adults_isSet) {
        obj.insert(QString("adults"), ::OpenAPI::toJsonValue(m_adults));
    }
    if (m_arrival_date_isSet) {
        obj.insert(QString("arrival_date"), ::OpenAPI::toJsonValue(m_arrival_date));
    }
    if (m_channel_code_isSet) {
        obj.insert(QString("channel_code"), ::OpenAPI::toJsonValue(m_channel_code));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_departure_date_isSet) {
        obj.insert(QString("departure_date"), ::OpenAPI::toJsonValue(m_departure_date));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_group_code_isSet) {
        obj.insert(QString("group_code"), ::OpenAPI::toJsonValue(m_group_code));
    }
    if (m_guarantee.isSet()) {
        obj.insert(QString("guarantee"), ::OpenAPI::toJsonValue(m_guarantee));
    }
    if (m_guests.size() > 0) {
        obj.insert(QString("guests"), ::OpenAPI::toJsonValue(m_guests));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotel_id"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_prepay_discount_isSet) {
        obj.insert(QString("prepay_discount"), ::OpenAPI::toJsonValue(m_prepay_discount));
    }
    if (m_rate_plan_isSet) {
        obj.insert(QString("rate_plan"), ::OpenAPI::toJsonValue(m_rate_plan));
    }
    if (m_room_type_isSet) {
        obj.insert(QString("room_type"), ::OpenAPI::toJsonValue(m_room_type));
    }
    if (m_rooms_isSet) {
        obj.insert(QString("rooms"), ::OpenAPI::toJsonValue(m_rooms));
    }
    if (m_travel_agent.isSet()) {
        obj.insert(QString("travel_agent"), ::OpenAPI::toJsonValue(m_travel_agent));
    }
    return obj;
}

QList<QString> OAIReservation::getAddons() const {
    return m_addons;
}
void OAIReservation::setAddons(const QList<QString> &addons) {
    m_addons = addons;
    m_addons_isSet = true;
}

bool OAIReservation::is_addons_Set() const{
    return m_addons_isSet;
}

bool OAIReservation::is_addons_Valid() const{
    return m_addons_isValid;
}

qint32 OAIReservation::getAdults() const {
    return m_adults;
}
void OAIReservation::setAdults(const qint32 &adults) {
    m_adults = adults;
    m_adults_isSet = true;
}

bool OAIReservation::is_adults_Set() const{
    return m_adults_isSet;
}

bool OAIReservation::is_adults_Valid() const{
    return m_adults_isValid;
}

QDateTime OAIReservation::getArrivalDate() const {
    return m_arrival_date;
}
void OAIReservation::setArrivalDate(const QDateTime &arrival_date) {
    m_arrival_date = arrival_date;
    m_arrival_date_isSet = true;
}

bool OAIReservation::is_arrival_date_Set() const{
    return m_arrival_date_isSet;
}

bool OAIReservation::is_arrival_date_Valid() const{
    return m_arrival_date_isValid;
}

QString OAIReservation::getChannelCode() const {
    return m_channel_code;
}
void OAIReservation::setChannelCode(const QString &channel_code) {
    m_channel_code = channel_code;
    m_channel_code_isSet = true;
}

bool OAIReservation::is_channel_code_Set() const{
    return m_channel_code_isSet;
}

bool OAIReservation::is_channel_code_Valid() const{
    return m_channel_code_isValid;
}

QString OAIReservation::getComment() const {
    return m_comment;
}
void OAIReservation::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIReservation::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIReservation::is_comment_Valid() const{
    return m_comment_isValid;
}

OAICompany OAIReservation::getCompany() const {
    return m_company;
}
void OAIReservation::setCompany(const OAICompany &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIReservation::is_company_Set() const{
    return m_company_isSet;
}

bool OAIReservation::is_company_Valid() const{
    return m_company_isValid;
}

OAIContact OAIReservation::getContact() const {
    return m_contact;
}
void OAIReservation::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIReservation::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIReservation::is_contact_Valid() const{
    return m_contact_isValid;
}

QDateTime OAIReservation::getDepartureDate() const {
    return m_departure_date;
}
void OAIReservation::setDepartureDate(const QDateTime &departure_date) {
    m_departure_date = departure_date;
    m_departure_date_isSet = true;
}

bool OAIReservation::is_departure_date_Set() const{
    return m_departure_date_isSet;
}

bool OAIReservation::is_departure_date_Valid() const{
    return m_departure_date_isValid;
}

QString OAIReservation::getExternalId() const {
    return m_external_id;
}
void OAIReservation::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIReservation::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIReservation::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIReservation::getGroupCode() const {
    return m_group_code;
}
void OAIReservation::setGroupCode(const QString &group_code) {
    m_group_code = group_code;
    m_group_code_isSet = true;
}

bool OAIReservation::is_group_code_Set() const{
    return m_group_code_isSet;
}

bool OAIReservation::is_group_code_Valid() const{
    return m_group_code_isValid;
}

OAIGuarantee OAIReservation::getGuarantee() const {
    return m_guarantee;
}
void OAIReservation::setGuarantee(const OAIGuarantee &guarantee) {
    m_guarantee = guarantee;
    m_guarantee_isSet = true;
}

bool OAIReservation::is_guarantee_Set() const{
    return m_guarantee_isSet;
}

bool OAIReservation::is_guarantee_Valid() const{
    return m_guarantee_isValid;
}

QList<OAICustomer> OAIReservation::getGuests() const {
    return m_guests;
}
void OAIReservation::setGuests(const QList<OAICustomer> &guests) {
    m_guests = guests;
    m_guests_isSet = true;
}

bool OAIReservation::is_guests_Set() const{
    return m_guests_isSet;
}

bool OAIReservation::is_guests_Valid() const{
    return m_guests_isValid;
}

qint32 OAIReservation::getHotelId() const {
    return m_hotel_id;
}
void OAIReservation::setHotelId(const qint32 &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIReservation::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIReservation::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

QString OAIReservation::getPaymentMethod() const {
    return m_payment_method;
}
void OAIReservation::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIReservation::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIReservation::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

double OAIReservation::getPrepayDiscount() const {
    return m_prepay_discount;
}
void OAIReservation::setPrepayDiscount(const double &prepay_discount) {
    m_prepay_discount = prepay_discount;
    m_prepay_discount_isSet = true;
}

bool OAIReservation::is_prepay_discount_Set() const{
    return m_prepay_discount_isSet;
}

bool OAIReservation::is_prepay_discount_Valid() const{
    return m_prepay_discount_isValid;
}

QString OAIReservation::getRatePlan() const {
    return m_rate_plan;
}
void OAIReservation::setRatePlan(const QString &rate_plan) {
    m_rate_plan = rate_plan;
    m_rate_plan_isSet = true;
}

bool OAIReservation::is_rate_plan_Set() const{
    return m_rate_plan_isSet;
}

bool OAIReservation::is_rate_plan_Valid() const{
    return m_rate_plan_isValid;
}

QString OAIReservation::getRoomType() const {
    return m_room_type;
}
void OAIReservation::setRoomType(const QString &room_type) {
    m_room_type = room_type;
    m_room_type_isSet = true;
}

bool OAIReservation::is_room_type_Set() const{
    return m_room_type_isSet;
}

bool OAIReservation::is_room_type_Valid() const{
    return m_room_type_isValid;
}

qint32 OAIReservation::getRooms() const {
    return m_rooms;
}
void OAIReservation::setRooms(const qint32 &rooms) {
    m_rooms = rooms;
    m_rooms_isSet = true;
}

bool OAIReservation::is_rooms_Set() const{
    return m_rooms_isSet;
}

bool OAIReservation::is_rooms_Valid() const{
    return m_rooms_isValid;
}

OAICompany OAIReservation::getTravelAgent() const {
    return m_travel_agent;
}
void OAIReservation::setTravelAgent(const OAICompany &travel_agent) {
    m_travel_agent = travel_agent;
    m_travel_agent_isSet = true;
}

bool OAIReservation::is_travel_agent_Set() const{
    return m_travel_agent_isSet;
}

bool OAIReservation::is_travel_agent_Valid() const{
    return m_travel_agent_isValid;
}

bool OAIReservation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guarantee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepay_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_agent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hotel_id_isValid && true;
}

} // namespace OpenAPI
