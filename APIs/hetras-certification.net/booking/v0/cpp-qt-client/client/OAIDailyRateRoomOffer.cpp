/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyRateRoomOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyRateRoomOffer::OAIDailyRateRoomOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyRateRoomOffer::OAIDailyRateRoomOffer() {
    this->initializeModel();
}

OAIDailyRateRoomOffer::~OAIDailyRateRoomOffer() {}

void OAIDailyRateRoomOffer::initializeModel() {

    m_available_rooms_count_isSet = false;
    m_available_rooms_count_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_room_type_code_isSet = false;
    m_room_type_code_isValid = false;

    m_unavailable_reason_isSet = false;
    m_unavailable_reason_isValid = false;
}

void OAIDailyRateRoomOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyRateRoomOffer::fromJsonObject(QJsonObject json) {

    m_available_rooms_count_isValid = ::OpenAPI::fromJsonValue(m_available_rooms_count, json[QString("available_rooms_count")]);
    m_available_rooms_count_isSet = !json[QString("available_rooms_count")].isNull() && m_available_rooms_count_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("is_available")]);
    m_is_available_isSet = !json[QString("is_available")].isNull() && m_is_available_isValid;

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_room_type_code_isValid = ::OpenAPI::fromJsonValue(m_room_type_code, json[QString("room_type_code")]);
    m_room_type_code_isSet = !json[QString("room_type_code")].isNull() && m_room_type_code_isValid;

    m_unavailable_reason_isValid = ::OpenAPI::fromJsonValue(m_unavailable_reason, json[QString("unavailable_reason")]);
    m_unavailable_reason_isSet = !json[QString("unavailable_reason")].isNull() && m_unavailable_reason_isValid;
}

QString OAIDailyRateRoomOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyRateRoomOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_available_rooms_count_isSet) {
        obj.insert(QString("available_rooms_count"), ::OpenAPI::toJsonValue(m_available_rooms_count));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("is_available"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_rates.size() > 0) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_room_type_code_isSet) {
        obj.insert(QString("room_type_code"), ::OpenAPI::toJsonValue(m_room_type_code));
    }
    if (m_unavailable_reason_isSet) {
        obj.insert(QString("unavailable_reason"), ::OpenAPI::toJsonValue(m_unavailable_reason));
    }
    return obj;
}

qint32 OAIDailyRateRoomOffer::getAvailableRoomsCount() const {
    return m_available_rooms_count;
}
void OAIDailyRateRoomOffer::setAvailableRoomsCount(const qint32 &available_rooms_count) {
    m_available_rooms_count = available_rooms_count;
    m_available_rooms_count_isSet = true;
}

bool OAIDailyRateRoomOffer::is_available_rooms_count_Set() const{
    return m_available_rooms_count_isSet;
}

bool OAIDailyRateRoomOffer::is_available_rooms_count_Valid() const{
    return m_available_rooms_count_isValid;
}

bool OAIDailyRateRoomOffer::isIsAvailable() const {
    return m_is_available;
}
void OAIDailyRateRoomOffer::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAIDailyRateRoomOffer::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAIDailyRateRoomOffer::is_is_available_Valid() const{
    return m_is_available_isValid;
}

QList<OAIDailyRoomRate> OAIDailyRateRoomOffer::getRates() const {
    return m_rates;
}
void OAIDailyRateRoomOffer::setRates(const QList<OAIDailyRoomRate> &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAIDailyRateRoomOffer::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAIDailyRateRoomOffer::is_rates_Valid() const{
    return m_rates_isValid;
}

OAIRestrictions OAIDailyRateRoomOffer::getRestrictions() const {
    return m_restrictions;
}
void OAIDailyRateRoomOffer::setRestrictions(const OAIRestrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIDailyRateRoomOffer::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIDailyRateRoomOffer::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QString OAIDailyRateRoomOffer::getRoomTypeCode() const {
    return m_room_type_code;
}
void OAIDailyRateRoomOffer::setRoomTypeCode(const QString &room_type_code) {
    m_room_type_code = room_type_code;
    m_room_type_code_isSet = true;
}

bool OAIDailyRateRoomOffer::is_room_type_code_Set() const{
    return m_room_type_code_isSet;
}

bool OAIDailyRateRoomOffer::is_room_type_code_Valid() const{
    return m_room_type_code_isValid;
}

QString OAIDailyRateRoomOffer::getUnavailableReason() const {
    return m_unavailable_reason;
}
void OAIDailyRateRoomOffer::setUnavailableReason(const QString &unavailable_reason) {
    m_unavailable_reason = unavailable_reason;
    m_unavailable_reason_isSet = true;
}

bool OAIDailyRateRoomOffer::is_unavailable_reason_Set() const{
    return m_unavailable_reason_isSet;
}

bool OAIDailyRateRoomOffer::is_unavailable_reason_Valid() const{
    return m_unavailable_reason_isValid;
}

bool OAIDailyRateRoomOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_rooms_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unavailable_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyRateRoomOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
