/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancellationToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancellationToken::OAICancellationToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancellationToken::OAICancellationToken() {
    this->initializeModel();
}

OAICancellationToken::~OAICancellationToken() {}

void OAICancellationToken::initializeModel() {

    m_can_be_canceled_isSet = false;
    m_can_be_canceled_isValid = false;

    m_is_cancellation_requested_isSet = false;
    m_is_cancellation_requested_isValid = false;

    m_wait_handle_isSet = false;
    m_wait_handle_isValid = false;
}

void OAICancellationToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancellationToken::fromJsonObject(QJsonObject json) {

    m_can_be_canceled_isValid = ::OpenAPI::fromJsonValue(m_can_be_canceled, json[QString("CanBeCanceled")]);
    m_can_be_canceled_isSet = !json[QString("CanBeCanceled")].isNull() && m_can_be_canceled_isValid;

    m_is_cancellation_requested_isValid = ::OpenAPI::fromJsonValue(m_is_cancellation_requested, json[QString("IsCancellationRequested")]);
    m_is_cancellation_requested_isSet = !json[QString("IsCancellationRequested")].isNull() && m_is_cancellation_requested_isValid;

    m_wait_handle_isValid = ::OpenAPI::fromJsonValue(m_wait_handle, json[QString("WaitHandle")]);
    m_wait_handle_isSet = !json[QString("WaitHandle")].isNull() && m_wait_handle_isValid;
}

QString OAICancellationToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancellationToken::asJsonObject() const {
    QJsonObject obj;
    if (m_can_be_canceled_isSet) {
        obj.insert(QString("CanBeCanceled"), ::OpenAPI::toJsonValue(m_can_be_canceled));
    }
    if (m_is_cancellation_requested_isSet) {
        obj.insert(QString("IsCancellationRequested"), ::OpenAPI::toJsonValue(m_is_cancellation_requested));
    }
    if (m_wait_handle.isSet()) {
        obj.insert(QString("WaitHandle"), ::OpenAPI::toJsonValue(m_wait_handle));
    }
    return obj;
}

bool OAICancellationToken::isCanBeCanceled() const {
    return m_can_be_canceled;
}
void OAICancellationToken::setCanBeCanceled(const bool &can_be_canceled) {
    m_can_be_canceled = can_be_canceled;
    m_can_be_canceled_isSet = true;
}

bool OAICancellationToken::is_can_be_canceled_Set() const{
    return m_can_be_canceled_isSet;
}

bool OAICancellationToken::is_can_be_canceled_Valid() const{
    return m_can_be_canceled_isValid;
}

bool OAICancellationToken::isIsCancellationRequested() const {
    return m_is_cancellation_requested;
}
void OAICancellationToken::setIsCancellationRequested(const bool &is_cancellation_requested) {
    m_is_cancellation_requested = is_cancellation_requested;
    m_is_cancellation_requested_isSet = true;
}

bool OAICancellationToken::is_is_cancellation_requested_Set() const{
    return m_is_cancellation_requested_isSet;
}

bool OAICancellationToken::is_is_cancellation_requested_Valid() const{
    return m_is_cancellation_requested_isValid;
}

OAIWaitHandle OAICancellationToken::getWaitHandle() const {
    return m_wait_handle;
}
void OAICancellationToken::setWaitHandle(const OAIWaitHandle &wait_handle) {
    m_wait_handle = wait_handle;
    m_wait_handle_isSet = true;
}

bool OAICancellationToken::is_wait_handle_Set() const{
    return m_wait_handle_isSet;
}

bool OAICancellationToken::is_wait_handle_Valid() const{
    return m_wait_handle_isValid;
}

bool OAICancellationToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_be_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cancellation_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_handle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancellationToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
