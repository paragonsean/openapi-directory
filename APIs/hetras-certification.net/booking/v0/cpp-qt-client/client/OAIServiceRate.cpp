/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceRate::OAIServiceRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceRate::OAIServiceRate() {
    this->initializeModel();
}

OAIServiceRate::~OAIServiceRate() {}

void OAIServiceRate::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_included_tax_isSet = false;
    m_included_tax_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;
}

void OAIServiceRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceRate::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_included_tax_isValid = ::OpenAPI::fromJsonValue(m_included_tax, json[QString("included_tax")]);
    m_included_tax_isSet = !json[QString("included_tax")].isNull() && m_included_tax_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;
}

QString OAIServiceRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceRate::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_included_tax_isSet) {
        obj.insert(QString("included_tax"), ::OpenAPI::toJsonValue(m_included_tax));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    return obj;
}

QString OAIServiceRate::getCode() const {
    return m_code;
}
void OAIServiceRate::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIServiceRate::is_code_Set() const{
    return m_code_isSet;
}

bool OAIServiceRate::is_code_Valid() const{
    return m_code_isValid;
}

double OAIServiceRate::getIncludedTax() const {
    return m_included_tax;
}
void OAIServiceRate::setIncludedTax(const double &included_tax) {
    m_included_tax = included_tax;
    m_included_tax_isSet = true;
}

bool OAIServiceRate::is_included_tax_Set() const{
    return m_included_tax_isSet;
}

bool OAIServiceRate::is_included_tax_Valid() const{
    return m_included_tax_isValid;
}

double OAIServiceRate::getRate() const {
    return m_rate;
}
void OAIServiceRate::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIServiceRate::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIServiceRate::is_rate_Valid() const{
    return m_rate_isValid;
}

bool OAIServiceRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
