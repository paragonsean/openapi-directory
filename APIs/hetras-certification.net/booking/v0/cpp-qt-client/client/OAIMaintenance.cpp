/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaintenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaintenance::OAIMaintenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaintenance::OAIMaintenance() {
    this->initializeModel();
}

OAIMaintenance::~OAIMaintenance() {}

void OAIMaintenance::initializeModel() {

    m_out_of_inventory_isSet = false;
    m_out_of_inventory_isValid = false;

    m_out_of_order_isSet = false;
    m_out_of_order_isValid = false;

    m_out_of_service_isSet = false;
    m_out_of_service_isValid = false;
}

void OAIMaintenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaintenance::fromJsonObject(QJsonObject json) {

    m_out_of_inventory_isValid = ::OpenAPI::fromJsonValue(m_out_of_inventory, json[QString("out_of_inventory")]);
    m_out_of_inventory_isSet = !json[QString("out_of_inventory")].isNull() && m_out_of_inventory_isValid;

    m_out_of_order_isValid = ::OpenAPI::fromJsonValue(m_out_of_order, json[QString("out_of_order")]);
    m_out_of_order_isSet = !json[QString("out_of_order")].isNull() && m_out_of_order_isValid;

    m_out_of_service_isValid = ::OpenAPI::fromJsonValue(m_out_of_service, json[QString("out_of_service")]);
    m_out_of_service_isSet = !json[QString("out_of_service")].isNull() && m_out_of_service_isValid;
}

QString OAIMaintenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaintenance::asJsonObject() const {
    QJsonObject obj;
    if (m_out_of_inventory_isSet) {
        obj.insert(QString("out_of_inventory"), ::OpenAPI::toJsonValue(m_out_of_inventory));
    }
    if (m_out_of_order_isSet) {
        obj.insert(QString("out_of_order"), ::OpenAPI::toJsonValue(m_out_of_order));
    }
    if (m_out_of_service_isSet) {
        obj.insert(QString("out_of_service"), ::OpenAPI::toJsonValue(m_out_of_service));
    }
    return obj;
}

qint32 OAIMaintenance::getOutOfInventory() const {
    return m_out_of_inventory;
}
void OAIMaintenance::setOutOfInventory(const qint32 &out_of_inventory) {
    m_out_of_inventory = out_of_inventory;
    m_out_of_inventory_isSet = true;
}

bool OAIMaintenance::is_out_of_inventory_Set() const{
    return m_out_of_inventory_isSet;
}

bool OAIMaintenance::is_out_of_inventory_Valid() const{
    return m_out_of_inventory_isValid;
}

qint32 OAIMaintenance::getOutOfOrder() const {
    return m_out_of_order;
}
void OAIMaintenance::setOutOfOrder(const qint32 &out_of_order) {
    m_out_of_order = out_of_order;
    m_out_of_order_isSet = true;
}

bool OAIMaintenance::is_out_of_order_Set() const{
    return m_out_of_order_isSet;
}

bool OAIMaintenance::is_out_of_order_Valid() const{
    return m_out_of_order_isValid;
}

qint32 OAIMaintenance::getOutOfService() const {
    return m_out_of_service;
}
void OAIMaintenance::setOutOfService(const qint32 &out_of_service) {
    m_out_of_service = out_of_service;
    m_out_of_service_isSet = true;
}

bool OAIMaintenance::is_out_of_service_Set() const{
    return m_out_of_service_isSet;
}

bool OAIMaintenance::is_out_of_service_Valid() const{
    return m_out_of_service_isValid;
}

bool OAIMaintenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_out_of_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_of_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_of_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaintenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
