/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignRoomCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignRoomCriteria::OAIAssignRoomCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignRoomCriteria::OAIAssignRoomCriteria() {
    this->initializeModel();
}

OAIAssignRoomCriteria::~OAIAssignRoomCriteria() {}

void OAIAssignRoomCriteria::initializeModel() {

    m_amenities_isSet = false;
    m_amenities_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_include_out_of_service_isSet = false;
    m_include_out_of_service_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_respect_guest_preferences_isSet = false;
    m_respect_guest_preferences_isValid = false;

    m_room_number_isSet = false;
    m_room_number_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIAssignRoomCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignRoomCriteria::fromJsonObject(QJsonObject json) {

    m_amenities_isValid = ::OpenAPI::fromJsonValue(m_amenities, json[QString("amenities")]);
    m_amenities_isSet = !json[QString("amenities")].isNull() && m_amenities_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_include_out_of_service_isValid = ::OpenAPI::fromJsonValue(m_include_out_of_service, json[QString("include_out_of_service")]);
    m_include_out_of_service_isSet = !json[QString("include_out_of_service")].isNull() && m_include_out_of_service_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_respect_guest_preferences_isValid = ::OpenAPI::fromJsonValue(m_respect_guest_preferences, json[QString("respect_guest_preferences")]);
    m_respect_guest_preferences_isSet = !json[QString("respect_guest_preferences")].isNull() && m_respect_guest_preferences_isValid;

    m_room_number_isValid = ::OpenAPI::fromJsonValue(m_room_number, json[QString("room_number")]);
    m_room_number_isSet = !json[QString("room_number")].isNull() && m_room_number_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIAssignRoomCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignRoomCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_amenities.size() > 0) {
        obj.insert(QString("amenities"), ::OpenAPI::toJsonValue(m_amenities));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_include_out_of_service_isSet) {
        obj.insert(QString("include_out_of_service"), ::OpenAPI::toJsonValue(m_include_out_of_service));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_respect_guest_preferences_isSet) {
        obj.insert(QString("respect_guest_preferences"), ::OpenAPI::toJsonValue(m_respect_guest_preferences));
    }
    if (m_room_number_isSet) {
        obj.insert(QString("room_number"), ::OpenAPI::toJsonValue(m_room_number));
    }
    if (m_views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QList<QString> OAIAssignRoomCriteria::getAmenities() const {
    return m_amenities;
}
void OAIAssignRoomCriteria::setAmenities(const QList<QString> &amenities) {
    m_amenities = amenities;
    m_amenities_isSet = true;
}

bool OAIAssignRoomCriteria::is_amenities_Set() const{
    return m_amenities_isSet;
}

bool OAIAssignRoomCriteria::is_amenities_Valid() const{
    return m_amenities_isValid;
}

QString OAIAssignRoomCriteria::getCondition() const {
    return m_condition;
}
void OAIAssignRoomCriteria::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIAssignRoomCriteria::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIAssignRoomCriteria::is_condition_Valid() const{
    return m_condition_isValid;
}

bool OAIAssignRoomCriteria::isIncludeOutOfService() const {
    return m_include_out_of_service;
}
void OAIAssignRoomCriteria::setIncludeOutOfService(const bool &include_out_of_service) {
    m_include_out_of_service = include_out_of_service;
    m_include_out_of_service_isSet = true;
}

bool OAIAssignRoomCriteria::is_include_out_of_service_Set() const{
    return m_include_out_of_service_isSet;
}

bool OAIAssignRoomCriteria::is_include_out_of_service_Valid() const{
    return m_include_out_of_service_isValid;
}

QList<QString> OAIAssignRoomCriteria::getLocations() const {
    return m_locations;
}
void OAIAssignRoomCriteria::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIAssignRoomCriteria::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIAssignRoomCriteria::is_locations_Valid() const{
    return m_locations_isValid;
}

bool OAIAssignRoomCriteria::isRespectGuestPreferences() const {
    return m_respect_guest_preferences;
}
void OAIAssignRoomCriteria::setRespectGuestPreferences(const bool &respect_guest_preferences) {
    m_respect_guest_preferences = respect_guest_preferences;
    m_respect_guest_preferences_isSet = true;
}

bool OAIAssignRoomCriteria::is_respect_guest_preferences_Set() const{
    return m_respect_guest_preferences_isSet;
}

bool OAIAssignRoomCriteria::is_respect_guest_preferences_Valid() const{
    return m_respect_guest_preferences_isValid;
}

QString OAIAssignRoomCriteria::getRoomNumber() const {
    return m_room_number;
}
void OAIAssignRoomCriteria::setRoomNumber(const QString &room_number) {
    m_room_number = room_number;
    m_room_number_isSet = true;
}

bool OAIAssignRoomCriteria::is_room_number_Set() const{
    return m_room_number_isSet;
}

bool OAIAssignRoomCriteria::is_room_number_Valid() const{
    return m_room_number_isValid;
}

QList<QString> OAIAssignRoomCriteria::getViews() const {
    return m_views;
}
void OAIAssignRoomCriteria::setViews(const QList<QString> &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIAssignRoomCriteria::is_views_Set() const{
    return m_views_isSet;
}

bool OAIAssignRoomCriteria::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIAssignRoomCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amenities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_out_of_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_respect_guest_preferences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignRoomCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
