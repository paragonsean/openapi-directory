/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityResponse::OAIAvailabilityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityResponse::OAIAvailabilityResponse() {
    this->initializeModel();
}

OAIAvailabilityResponse::~OAIAvailabilityResponse() {}

void OAIAvailabilityResponse::initializeModel() {

    m__count_isSet = false;
    m__count_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_daily_availabilities_isSet = false;
    m_daily_availabilities_isValid = false;

    m_hotel_isSet = false;
    m_hotel_isValid = false;
}

void OAIAvailabilityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityResponse::fromJsonObject(QJsonObject json) {

    m__count_isValid = ::OpenAPI::fromJsonValue(m__count, json[QString("_count")]);
    m__count_isSet = !json[QString("_count")].isNull() && m__count_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_daily_availabilities_isValid = ::OpenAPI::fromJsonValue(m_daily_availabilities, json[QString("daily_availabilities")]);
    m_daily_availabilities_isSet = !json[QString("daily_availabilities")].isNull() && m_daily_availabilities_isValid;

    m_hotel_isValid = ::OpenAPI::fromJsonValue(m_hotel, json[QString("hotel")]);
    m_hotel_isSet = !json[QString("hotel")].isNull() && m_hotel_isValid;
}

QString OAIAvailabilityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__count_isSet) {
        obj.insert(QString("_count"), ::OpenAPI::toJsonValue(m__count));
    }
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_daily_availabilities.size() > 0) {
        obj.insert(QString("daily_availabilities"), ::OpenAPI::toJsonValue(m_daily_availabilities));
    }
    if (m_hotel.isSet()) {
        obj.insert(QString("hotel"), ::OpenAPI::toJsonValue(m_hotel));
    }
    return obj;
}

qint32 OAIAvailabilityResponse::getCount() const {
    return m__count;
}
void OAIAvailabilityResponse::setCount(const qint32 &_count) {
    m__count = _count;
    m__count_isSet = true;
}

bool OAIAvailabilityResponse::is__count_Set() const{
    return m__count_isSet;
}

bool OAIAvailabilityResponse::is__count_Valid() const{
    return m__count_isValid;
}

QMap<QString, OAILinkObject> OAIAvailabilityResponse::getLinks() const {
    return m__links;
}
void OAIAvailabilityResponse::setLinks(const QMap<QString, OAILinkObject> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAvailabilityResponse::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAvailabilityResponse::is__links_Valid() const{
    return m__links_isValid;
}

QList<OAIDailyAvailability> OAIAvailabilityResponse::getDailyAvailabilities() const {
    return m_daily_availabilities;
}
void OAIAvailabilityResponse::setDailyAvailabilities(const QList<OAIDailyAvailability> &daily_availabilities) {
    m_daily_availabilities = daily_availabilities;
    m_daily_availabilities_isSet = true;
}

bool OAIAvailabilityResponse::is_daily_availabilities_Set() const{
    return m_daily_availabilities_isSet;
}

bool OAIAvailabilityResponse::is_daily_availabilities_Valid() const{
    return m_daily_availabilities_isValid;
}

OAIEmbeddedHotel OAIAvailabilityResponse::getHotel() const {
    return m_hotel;
}
void OAIAvailabilityResponse::setHotel(const OAIEmbeddedHotel &hotel) {
    m_hotel = hotel;
    m_hotel_isSet = true;
}

bool OAIAvailabilityResponse::is_hotel_Set() const{
    return m_hotel_isSet;
}

bool OAIAvailabilityResponse::is_hotel_Valid() const{
    return m_hotel_isValid;
}

bool OAIAvailabilityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_availabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
