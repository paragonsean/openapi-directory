/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddons.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddons::OAIAddons(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddons::OAIAddons() {
    this->initializeModel();
}

OAIAddons::~OAIAddons() {}

void OAIAddons::initializeModel() {

    m_addon_services_isSet = false;
    m_addon_services_isValid = false;

    m_adults_isSet = false;
    m_adults_isValid = false;

    m_arrival_date_isSet = false;
    m_arrival_date_isValid = false;

    m_departure_date_isSet = false;
    m_departure_date_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_hotel_name_isSet = false;
    m_hotel_name_isValid = false;

    m_rate_plan_isSet = false;
    m_rate_plan_isValid = false;

    m_room_isSet = false;
    m_room_isValid = false;

    m_rooms_isSet = false;
    m_rooms_isValid = false;
}

void OAIAddons::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddons::fromJsonObject(QJsonObject json) {

    m_addon_services_isValid = ::OpenAPI::fromJsonValue(m_addon_services, json[QString("addon_services")]);
    m_addon_services_isSet = !json[QString("addon_services")].isNull() && m_addon_services_isValid;

    m_adults_isValid = ::OpenAPI::fromJsonValue(m_adults, json[QString("adults")]);
    m_adults_isSet = !json[QString("adults")].isNull() && m_adults_isValid;

    m_arrival_date_isValid = ::OpenAPI::fromJsonValue(m_arrival_date, json[QString("arrival_date")]);
    m_arrival_date_isSet = !json[QString("arrival_date")].isNull() && m_arrival_date_isValid;

    m_departure_date_isValid = ::OpenAPI::fromJsonValue(m_departure_date, json[QString("departure_date")]);
    m_departure_date_isSet = !json[QString("departure_date")].isNull() && m_departure_date_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotel_id")]);
    m_hotel_id_isSet = !json[QString("hotel_id")].isNull() && m_hotel_id_isValid;

    m_hotel_name_isValid = ::OpenAPI::fromJsonValue(m_hotel_name, json[QString("hotel_name")]);
    m_hotel_name_isSet = !json[QString("hotel_name")].isNull() && m_hotel_name_isValid;

    m_rate_plan_isValid = ::OpenAPI::fromJsonValue(m_rate_plan, json[QString("rate_plan")]);
    m_rate_plan_isSet = !json[QString("rate_plan")].isNull() && m_rate_plan_isValid;

    m_room_isValid = ::OpenAPI::fromJsonValue(m_room, json[QString("room")]);
    m_room_isSet = !json[QString("room")].isNull() && m_room_isValid;

    m_rooms_isValid = ::OpenAPI::fromJsonValue(m_rooms, json[QString("rooms")]);
    m_rooms_isSet = !json[QString("rooms")].isNull() && m_rooms_isValid;
}

QString OAIAddons::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddons::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_services.size() > 0) {
        obj.insert(QString("addon_services"), ::OpenAPI::toJsonValue(m_addon_services));
    }
    if (m_adults_isSet) {
        obj.insert(QString("adults"), ::OpenAPI::toJsonValue(m_adults));
    }
    if (m_arrival_date_isSet) {
        obj.insert(QString("arrival_date"), ::OpenAPI::toJsonValue(m_arrival_date));
    }
    if (m_departure_date_isSet) {
        obj.insert(QString("departure_date"), ::OpenAPI::toJsonValue(m_departure_date));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotel_id"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_hotel_name_isSet) {
        obj.insert(QString("hotel_name"), ::OpenAPI::toJsonValue(m_hotel_name));
    }
    if (m_rate_plan.isSet()) {
        obj.insert(QString("rate_plan"), ::OpenAPI::toJsonValue(m_rate_plan));
    }
    if (m_room.isSet()) {
        obj.insert(QString("room"), ::OpenAPI::toJsonValue(m_room));
    }
    if (m_rooms_isSet) {
        obj.insert(QString("rooms"), ::OpenAPI::toJsonValue(m_rooms));
    }
    return obj;
}

QList<OAIAddonOffer> OAIAddons::getAddonServices() const {
    return m_addon_services;
}
void OAIAddons::setAddonServices(const QList<OAIAddonOffer> &addon_services) {
    m_addon_services = addon_services;
    m_addon_services_isSet = true;
}

bool OAIAddons::is_addon_services_Set() const{
    return m_addon_services_isSet;
}

bool OAIAddons::is_addon_services_Valid() const{
    return m_addon_services_isValid;
}

qint32 OAIAddons::getAdults() const {
    return m_adults;
}
void OAIAddons::setAdults(const qint32 &adults) {
    m_adults = adults;
    m_adults_isSet = true;
}

bool OAIAddons::is_adults_Set() const{
    return m_adults_isSet;
}

bool OAIAddons::is_adults_Valid() const{
    return m_adults_isValid;
}

QDateTime OAIAddons::getArrivalDate() const {
    return m_arrival_date;
}
void OAIAddons::setArrivalDate(const QDateTime &arrival_date) {
    m_arrival_date = arrival_date;
    m_arrival_date_isSet = true;
}

bool OAIAddons::is_arrival_date_Set() const{
    return m_arrival_date_isSet;
}

bool OAIAddons::is_arrival_date_Valid() const{
    return m_arrival_date_isValid;
}

QDateTime OAIAddons::getDepartureDate() const {
    return m_departure_date;
}
void OAIAddons::setDepartureDate(const QDateTime &departure_date) {
    m_departure_date = departure_date;
    m_departure_date_isSet = true;
}

bool OAIAddons::is_departure_date_Set() const{
    return m_departure_date_isSet;
}

bool OAIAddons::is_departure_date_Valid() const{
    return m_departure_date_isValid;
}

qint32 OAIAddons::getHotelId() const {
    return m_hotel_id;
}
void OAIAddons::setHotelId(const qint32 &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIAddons::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIAddons::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

QString OAIAddons::getHotelName() const {
    return m_hotel_name;
}
void OAIAddons::setHotelName(const QString &hotel_name) {
    m_hotel_name = hotel_name;
    m_hotel_name_isSet = true;
}

bool OAIAddons::is_hotel_name_Set() const{
    return m_hotel_name_isSet;
}

bool OAIAddons::is_hotel_name_Valid() const{
    return m_hotel_name_isValid;
}

OAIRatePlan OAIAddons::getRatePlan() const {
    return m_rate_plan;
}
void OAIAddons::setRatePlan(const OAIRatePlan &rate_plan) {
    m_rate_plan = rate_plan;
    m_rate_plan_isSet = true;
}

bool OAIAddons::is_rate_plan_Set() const{
    return m_rate_plan_isSet;
}

bool OAIAddons::is_rate_plan_Valid() const{
    return m_rate_plan_isValid;
}

OAIReservationRoom OAIAddons::getRoom() const {
    return m_room;
}
void OAIAddons::setRoom(const OAIReservationRoom &room) {
    m_room = room;
    m_room_isSet = true;
}

bool OAIAddons::is_room_Set() const{
    return m_room_isSet;
}

bool OAIAddons::is_room_Valid() const{
    return m_room_isValid;
}

qint32 OAIAddons::getRooms() const {
    return m_rooms;
}
void OAIAddons::setRooms(const qint32 &rooms) {
    m_rooms = rooms;
    m_rooms_isSet = true;
}

bool OAIAddons::is_rooms_Set() const{
    return m_rooms_isSet;
}

bool OAIAddons::is_rooms_Valid() const{
    return m_rooms_isValid;
}

bool OAIAddons::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_room.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddons::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
