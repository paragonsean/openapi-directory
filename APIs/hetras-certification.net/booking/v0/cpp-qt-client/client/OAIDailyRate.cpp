/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyRate::OAIDailyRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyRate::OAIDailyRate() {
    this->initializeModel();
}

OAIDailyRate::~OAIDailyRate() {}

void OAIDailyRate::initializeModel() {

    m_addon_services_isSet = false;
    m_addon_services_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_excluded_tax_isSet = false;
    m_excluded_tax_isValid = false;

    m_included_services_isSet = false;
    m_included_services_isValid = false;

    m_included_tax_isSet = false;
    m_included_tax_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_room_type_isSet = false;
    m_room_type_isValid = false;
}

void OAIDailyRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyRate::fromJsonObject(QJsonObject json) {

    m_addon_services_isValid = ::OpenAPI::fromJsonValue(m_addon_services, json[QString("addon_services")]);
    m_addon_services_isSet = !json[QString("addon_services")].isNull() && m_addon_services_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_excluded_tax_isValid = ::OpenAPI::fromJsonValue(m_excluded_tax, json[QString("excluded_tax")]);
    m_excluded_tax_isSet = !json[QString("excluded_tax")].isNull() && m_excluded_tax_isValid;

    m_included_services_isValid = ::OpenAPI::fromJsonValue(m_included_services, json[QString("included_services")]);
    m_included_services_isSet = !json[QString("included_services")].isNull() && m_included_services_isValid;

    m_included_tax_isValid = ::OpenAPI::fromJsonValue(m_included_tax, json[QString("included_tax")]);
    m_included_tax_isSet = !json[QString("included_tax")].isNull() && m_included_tax_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_room_type_isValid = ::OpenAPI::fromJsonValue(m_room_type, json[QString("room_type")]);
    m_room_type_isSet = !json[QString("room_type")].isNull() && m_room_type_isValid;
}

QString OAIDailyRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyRate::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_services.size() > 0) {
        obj.insert(QString("addon_services"), ::OpenAPI::toJsonValue(m_addon_services));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_excluded_tax_isSet) {
        obj.insert(QString("excluded_tax"), ::OpenAPI::toJsonValue(m_excluded_tax));
    }
    if (m_included_services.size() > 0) {
        obj.insert(QString("included_services"), ::OpenAPI::toJsonValue(m_included_services));
    }
    if (m_included_tax_isSet) {
        obj.insert(QString("included_tax"), ::OpenAPI::toJsonValue(m_included_tax));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_room_type_isSet) {
        obj.insert(QString("room_type"), ::OpenAPI::toJsonValue(m_room_type));
    }
    return obj;
}

QList<OAIServiceRate> OAIDailyRate::getAddonServices() const {
    return m_addon_services;
}
void OAIDailyRate::setAddonServices(const QList<OAIServiceRate> &addon_services) {
    m_addon_services = addon_services;
    m_addon_services_isSet = true;
}

bool OAIDailyRate::is_addon_services_Set() const{
    return m_addon_services_isSet;
}

bool OAIDailyRate::is_addon_services_Valid() const{
    return m_addon_services_isValid;
}

QDateTime OAIDailyRate::getDate() const {
    return m_date;
}
void OAIDailyRate::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDailyRate::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDailyRate::is_date_Valid() const{
    return m_date_isValid;
}

double OAIDailyRate::getExcludedTax() const {
    return m_excluded_tax;
}
void OAIDailyRate::setExcludedTax(const double &excluded_tax) {
    m_excluded_tax = excluded_tax;
    m_excluded_tax_isSet = true;
}

bool OAIDailyRate::is_excluded_tax_Set() const{
    return m_excluded_tax_isSet;
}

bool OAIDailyRate::is_excluded_tax_Valid() const{
    return m_excluded_tax_isValid;
}

QList<QString> OAIDailyRate::getIncludedServices() const {
    return m_included_services;
}
void OAIDailyRate::setIncludedServices(const QList<QString> &included_services) {
    m_included_services = included_services;
    m_included_services_isSet = true;
}

bool OAIDailyRate::is_included_services_Set() const{
    return m_included_services_isSet;
}

bool OAIDailyRate::is_included_services_Valid() const{
    return m_included_services_isValid;
}

double OAIDailyRate::getIncludedTax() const {
    return m_included_tax;
}
void OAIDailyRate::setIncludedTax(const double &included_tax) {
    m_included_tax = included_tax;
    m_included_tax_isSet = true;
}

bool OAIDailyRate::is_included_tax_Set() const{
    return m_included_tax_isSet;
}

bool OAIDailyRate::is_included_tax_Valid() const{
    return m_included_tax_isValid;
}

double OAIDailyRate::getRate() const {
    return m_rate;
}
void OAIDailyRate::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIDailyRate::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIDailyRate::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAIDailyRate::getRoomType() const {
    return m_room_type;
}
void OAIDailyRate::setRoomType(const QString &room_type) {
    m_room_type = room_type;
    m_room_type_isSet = true;
}

bool OAIDailyRate::is_room_type_Set() const{
    return m_room_type_isSet;
}

bool OAIDailyRate::is_room_type_Valid() const{
    return m_room_type_isValid;
}

bool OAIDailyRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
