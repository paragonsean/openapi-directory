/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffer::OAIOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffer::OAIOffer() {
    this->initializeModel();
}

OAIOffer::~OAIOffer() {}

void OAIOffer::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_adults_isSet = false;
    m_adults_isValid = false;

    m_available_rooms_isSet = false;
    m_available_rooms_isValid = false;

    m_breakdown_isSet = false;
    m_breakdown_isValid = false;

    m_cancellation_policies_isSet = false;
    m_cancellation_policies_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_deposit_policies_isSet = false;
    m_deposit_policies_isValid = false;

    m_general_policies_isSet = false;
    m_general_policies_isValid = false;

    m_guarantee_types_isSet = false;
    m_guarantee_types_isValid = false;

    m_included_services_isSet = false;
    m_included_services_isValid = false;

    m_noshow_policy_isSet = false;
    m_noshow_policy_isValid = false;

    m_rate_plan_code_isSet = false;
    m_rate_plan_code_isValid = false;

    m_total_stay_isSet = false;
    m_total_stay_isValid = false;
}

void OAIOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffer::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_adults_isValid = ::OpenAPI::fromJsonValue(m_adults, json[QString("adults")]);
    m_adults_isSet = !json[QString("adults")].isNull() && m_adults_isValid;

    m_available_rooms_isValid = ::OpenAPI::fromJsonValue(m_available_rooms, json[QString("available_rooms")]);
    m_available_rooms_isSet = !json[QString("available_rooms")].isNull() && m_available_rooms_isValid;

    m_breakdown_isValid = ::OpenAPI::fromJsonValue(m_breakdown, json[QString("breakdown")]);
    m_breakdown_isSet = !json[QString("breakdown")].isNull() && m_breakdown_isValid;

    m_cancellation_policies_isValid = ::OpenAPI::fromJsonValue(m_cancellation_policies, json[QString("cancellation_policies")]);
    m_cancellation_policies_isSet = !json[QString("cancellation_policies")].isNull() && m_cancellation_policies_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_deposit_policies_isValid = ::OpenAPI::fromJsonValue(m_deposit_policies, json[QString("deposit_policies")]);
    m_deposit_policies_isSet = !json[QString("deposit_policies")].isNull() && m_deposit_policies_isValid;

    m_general_policies_isValid = ::OpenAPI::fromJsonValue(m_general_policies, json[QString("general_policies")]);
    m_general_policies_isSet = !json[QString("general_policies")].isNull() && m_general_policies_isValid;

    m_guarantee_types_isValid = ::OpenAPI::fromJsonValue(m_guarantee_types, json[QString("guarantee_types")]);
    m_guarantee_types_isSet = !json[QString("guarantee_types")].isNull() && m_guarantee_types_isValid;

    m_included_services_isValid = ::OpenAPI::fromJsonValue(m_included_services, json[QString("included_services")]);
    m_included_services_isSet = !json[QString("included_services")].isNull() && m_included_services_isValid;

    m_noshow_policy_isValid = ::OpenAPI::fromJsonValue(m_noshow_policy, json[QString("noshow_policy")]);
    m_noshow_policy_isSet = !json[QString("noshow_policy")].isNull() && m_noshow_policy_isValid;

    m_rate_plan_code_isValid = ::OpenAPI::fromJsonValue(m_rate_plan_code, json[QString("rate_plan_code")]);
    m_rate_plan_code_isSet = !json[QString("rate_plan_code")].isNull() && m_rate_plan_code_isValid;

    m_total_stay_isValid = ::OpenAPI::fromJsonValue(m_total_stay, json[QString("total_stay")]);
    m_total_stay_isSet = !json[QString("total_stay")].isNull() && m_total_stay_isValid;
}

QString OAIOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffer::asJsonObject() const {
    QJsonObject obj;
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_adults_isSet) {
        obj.insert(QString("adults"), ::OpenAPI::toJsonValue(m_adults));
    }
    if (m_available_rooms_isSet) {
        obj.insert(QString("available_rooms"), ::OpenAPI::toJsonValue(m_available_rooms));
    }
    if (m_breakdown.size() > 0) {
        obj.insert(QString("breakdown"), ::OpenAPI::toJsonValue(m_breakdown));
    }
    if (m_cancellation_policies.size() > 0) {
        obj.insert(QString("cancellation_policies"), ::OpenAPI::toJsonValue(m_cancellation_policies));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_deposit_policies.size() > 0) {
        obj.insert(QString("deposit_policies"), ::OpenAPI::toJsonValue(m_deposit_policies));
    }
    if (m_general_policies.size() > 0) {
        obj.insert(QString("general_policies"), ::OpenAPI::toJsonValue(m_general_policies));
    }
    if (m_guarantee_types.isSet()) {
        obj.insert(QString("guarantee_types"), ::OpenAPI::toJsonValue(m_guarantee_types));
    }
    if (m_included_services.size() > 0) {
        obj.insert(QString("included_services"), ::OpenAPI::toJsonValue(m_included_services));
    }
    if (m_noshow_policy.isSet()) {
        obj.insert(QString("noshow_policy"), ::OpenAPI::toJsonValue(m_noshow_policy));
    }
    if (m_rate_plan_code_isSet) {
        obj.insert(QString("rate_plan_code"), ::OpenAPI::toJsonValue(m_rate_plan_code));
    }
    if (m_total_stay.isSet()) {
        obj.insert(QString("total_stay"), ::OpenAPI::toJsonValue(m_total_stay));
    }
    return obj;
}

QMap<QString, OAILinkObject> OAIOffer::getLinks() const {
    return m__links;
}
void OAIOffer::setLinks(const QMap<QString, OAILinkObject> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIOffer::is__links_Set() const{
    return m__links_isSet;
}

bool OAIOffer::is__links_Valid() const{
    return m__links_isValid;
}

qint32 OAIOffer::getAdults() const {
    return m_adults;
}
void OAIOffer::setAdults(const qint32 &adults) {
    m_adults = adults;
    m_adults_isSet = true;
}

bool OAIOffer::is_adults_Set() const{
    return m_adults_isSet;
}

bool OAIOffer::is_adults_Valid() const{
    return m_adults_isValid;
}

qint32 OAIOffer::getAvailableRooms() const {
    return m_available_rooms;
}
void OAIOffer::setAvailableRooms(const qint32 &available_rooms) {
    m_available_rooms = available_rooms;
    m_available_rooms_isSet = true;
}

bool OAIOffer::is_available_rooms_Set() const{
    return m_available_rooms_isSet;
}

bool OAIOffer::is_available_rooms_Valid() const{
    return m_available_rooms_isValid;
}

QList<OAIRoomOfferDailyRate> OAIOffer::getBreakdown() const {
    return m_breakdown;
}
void OAIOffer::setBreakdown(const QList<OAIRoomOfferDailyRate> &breakdown) {
    m_breakdown = breakdown;
    m_breakdown_isSet = true;
}

bool OAIOffer::is_breakdown_Set() const{
    return m_breakdown_isSet;
}

bool OAIOffer::is_breakdown_Valid() const{
    return m_breakdown_isValid;
}

QList<OAICancellationPolicy> OAIOffer::getCancellationPolicies() const {
    return m_cancellation_policies;
}
void OAIOffer::setCancellationPolicies(const QList<OAICancellationPolicy> &cancellation_policies) {
    m_cancellation_policies = cancellation_policies;
    m_cancellation_policies_isSet = true;
}

bool OAIOffer::is_cancellation_policies_Set() const{
    return m_cancellation_policies_isSet;
}

bool OAIOffer::is_cancellation_policies_Valid() const{
    return m_cancellation_policies_isValid;
}

QString OAIOffer::getCurrency() const {
    return m_currency;
}
void OAIOffer::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOffer::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOffer::is_currency_Valid() const{
    return m_currency_isValid;
}

QList<OAIDepositPolicy> OAIOffer::getDepositPolicies() const {
    return m_deposit_policies;
}
void OAIOffer::setDepositPolicies(const QList<OAIDepositPolicy> &deposit_policies) {
    m_deposit_policies = deposit_policies;
    m_deposit_policies_isSet = true;
}

bool OAIOffer::is_deposit_policies_Set() const{
    return m_deposit_policies_isSet;
}

bool OAIOffer::is_deposit_policies_Valid() const{
    return m_deposit_policies_isValid;
}

QList<OAIGeneralPolicy> OAIOffer::getGeneralPolicies() const {
    return m_general_policies;
}
void OAIOffer::setGeneralPolicies(const QList<OAIGeneralPolicy> &general_policies) {
    m_general_policies = general_policies;
    m_general_policies_isSet = true;
}

bool OAIOffer::is_general_policies_Set() const{
    return m_general_policies_isSet;
}

bool OAIOffer::is_general_policies_Valid() const{
    return m_general_policies_isValid;
}

OAIAcceptedGuaranteeTypes OAIOffer::getGuaranteeTypes() const {
    return m_guarantee_types;
}
void OAIOffer::setGuaranteeTypes(const OAIAcceptedGuaranteeTypes &guarantee_types) {
    m_guarantee_types = guarantee_types;
    m_guarantee_types_isSet = true;
}

bool OAIOffer::is_guarantee_types_Set() const{
    return m_guarantee_types_isSet;
}

bool OAIOffer::is_guarantee_types_Valid() const{
    return m_guarantee_types_isValid;
}

QList<QString> OAIOffer::getIncludedServices() const {
    return m_included_services;
}
void OAIOffer::setIncludedServices(const QList<QString> &included_services) {
    m_included_services = included_services;
    m_included_services_isSet = true;
}

bool OAIOffer::is_included_services_Set() const{
    return m_included_services_isSet;
}

bool OAIOffer::is_included_services_Valid() const{
    return m_included_services_isValid;
}

OAINoShowPolicy OAIOffer::getNoshowPolicy() const {
    return m_noshow_policy;
}
void OAIOffer::setNoshowPolicy(const OAINoShowPolicy &noshow_policy) {
    m_noshow_policy = noshow_policy;
    m_noshow_policy_isSet = true;
}

bool OAIOffer::is_noshow_policy_Set() const{
    return m_noshow_policy_isSet;
}

bool OAIOffer::is_noshow_policy_Valid() const{
    return m_noshow_policy_isValid;
}

QString OAIOffer::getRatePlanCode() const {
    return m_rate_plan_code;
}
void OAIOffer::setRatePlanCode(const QString &rate_plan_code) {
    m_rate_plan_code = rate_plan_code;
    m_rate_plan_code_isSet = true;
}

bool OAIOffer::is_rate_plan_code_Set() const{
    return m_rate_plan_code_isSet;
}

bool OAIOffer::is_rate_plan_code_Valid() const{
    return m_rate_plan_code_isValid;
}

OAIRate OAIOffer::getTotalStay() const {
    return m_total_stay;
}
void OAIOffer::setTotalStay(const OAIRate &total_stay) {
    m_total_stay = total_stay;
    m_total_stay_isSet = true;
}

bool OAIOffer::is_total_stay_Set() const{
    return m_total_stay_isSet;
}

bool OAIOffer::is_total_stay_Valid() const{
    return m_total_stay_isValid;
}

bool OAIOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakdown.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deposit_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_guarantee_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_noshow_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_plan_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_stay.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
