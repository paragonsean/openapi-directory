/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToken::OAIToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToken::OAIToken() {
    this->initializeModel();
}

OAIToken::~OAIToken() {}

void OAIToken::initializeModel() {

    m_authorization_expiry_date_isSet = false;
    m_authorization_expiry_date_isValid = false;

    m_authorization_reference_isSet = false;
    m_authorization_reference_isValid = false;

    m_authorization_status_isSet = false;
    m_authorization_status_isValid = false;

    m_authorized_amount_isSet = false;
    m_authorized_amount_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;
}

void OAIToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToken::fromJsonObject(QJsonObject json) {

    m_authorization_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_authorization_expiry_date, json[QString("authorization_expiry_date")]);
    m_authorization_expiry_date_isSet = !json[QString("authorization_expiry_date")].isNull() && m_authorization_expiry_date_isValid;

    m_authorization_reference_isValid = ::OpenAPI::fromJsonValue(m_authorization_reference, json[QString("authorization_reference")]);
    m_authorization_reference_isSet = !json[QString("authorization_reference")].isNull() && m_authorization_reference_isValid;

    m_authorization_status_isValid = ::OpenAPI::fromJsonValue(m_authorization_status, json[QString("authorization_status")]);
    m_authorization_status_isSet = !json[QString("authorization_status")].isNull() && m_authorization_status_isValid;

    m_authorized_amount_isValid = ::OpenAPI::fromJsonValue(m_authorized_amount, json[QString("authorized_amount")]);
    m_authorized_amount_isSet = !json[QString("authorized_amount")].isNull() && m_authorized_amount_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchant_reference")]);
    m_merchant_reference_isSet = !json[QString("merchant_reference")].isNull() && m_merchant_reference_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopper_email")]);
    m_shopper_email_isSet = !json[QString("shopper_email")].isNull() && m_shopper_email_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopper_reference")]);
    m_shopper_reference_isSet = !json[QString("shopper_reference")].isNull() && m_shopper_reference_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("token_id")]);
    m_token_id_isSet = !json[QString("token_id")].isNull() && m_token_id_isValid;
}

QString OAIToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToken::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_expiry_date_isSet) {
        obj.insert(QString("authorization_expiry_date"), ::OpenAPI::toJsonValue(m_authorization_expiry_date));
    }
    if (m_authorization_reference_isSet) {
        obj.insert(QString("authorization_reference"), ::OpenAPI::toJsonValue(m_authorization_reference));
    }
    if (m_authorization_status_isSet) {
        obj.insert(QString("authorization_status"), ::OpenAPI::toJsonValue(m_authorization_status));
    }
    if (m_authorized_amount_isSet) {
        obj.insert(QString("authorized_amount"), ::OpenAPI::toJsonValue(m_authorized_amount));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchant_reference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopper_email"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopper_reference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("token_id"), ::OpenAPI::toJsonValue(m_token_id));
    }
    return obj;
}

QDateTime OAIToken::getAuthorizationExpiryDate() const {
    return m_authorization_expiry_date;
}
void OAIToken::setAuthorizationExpiryDate(const QDateTime &authorization_expiry_date) {
    m_authorization_expiry_date = authorization_expiry_date;
    m_authorization_expiry_date_isSet = true;
}

bool OAIToken::is_authorization_expiry_date_Set() const{
    return m_authorization_expiry_date_isSet;
}

bool OAIToken::is_authorization_expiry_date_Valid() const{
    return m_authorization_expiry_date_isValid;
}

QString OAIToken::getAuthorizationReference() const {
    return m_authorization_reference;
}
void OAIToken::setAuthorizationReference(const QString &authorization_reference) {
    m_authorization_reference = authorization_reference;
    m_authorization_reference_isSet = true;
}

bool OAIToken::is_authorization_reference_Set() const{
    return m_authorization_reference_isSet;
}

bool OAIToken::is_authorization_reference_Valid() const{
    return m_authorization_reference_isValid;
}

QString OAIToken::getAuthorizationStatus() const {
    return m_authorization_status;
}
void OAIToken::setAuthorizationStatus(const QString &authorization_status) {
    m_authorization_status = authorization_status;
    m_authorization_status_isSet = true;
}

bool OAIToken::is_authorization_status_Set() const{
    return m_authorization_status_isSet;
}

bool OAIToken::is_authorization_status_Valid() const{
    return m_authorization_status_isValid;
}

double OAIToken::getAuthorizedAmount() const {
    return m_authorized_amount;
}
void OAIToken::setAuthorizedAmount(const double &authorized_amount) {
    m_authorized_amount = authorized_amount;
    m_authorized_amount_isSet = true;
}

bool OAIToken::is_authorized_amount_Set() const{
    return m_authorized_amount_isSet;
}

bool OAIToken::is_authorized_amount_Valid() const{
    return m_authorized_amount_isValid;
}

QString OAIToken::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIToken::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIToken::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIToken::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAIToken::getShopperEmail() const {
    return m_shopper_email;
}
void OAIToken::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIToken::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIToken::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QString OAIToken::getShopperReference() const {
    return m_shopper_reference;
}
void OAIToken::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIToken::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIToken::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAIToken::getTokenId() const {
    return m_token_id;
}
void OAIToken::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIToken::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIToken::is_token_id_Valid() const{
    return m_token_id_isValid;
}

bool OAIToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
