/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkObject::OAILinkObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkObject::OAILinkObject() {
    this->initializeModel();
}

OAILinkObject::~OAILinkObject() {}

void OAILinkObject::initializeModel() {

    m_deprecation_isSet = false;
    m_deprecation_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_hreflang_isSet = false;
    m_hreflang_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_templated_isSet = false;
    m_templated_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILinkObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkObject::fromJsonObject(QJsonObject json) {

    m_deprecation_isValid = ::OpenAPI::fromJsonValue(m_deprecation, json[QString("deprecation")]);
    m_deprecation_isSet = !json[QString("deprecation")].isNull() && m_deprecation_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_hreflang_isValid = ::OpenAPI::fromJsonValue(m_hreflang, json[QString("hreflang")]);
    m_hreflang_isSet = !json[QString("hreflang")].isNull() && m_hreflang_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_templated_isValid = ::OpenAPI::fromJsonValue(m_templated, json[QString("templated")]);
    m_templated_isSet = !json[QString("templated")].isNull() && m_templated_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILinkObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkObject::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecation_isSet) {
        obj.insert(QString("deprecation"), ::OpenAPI::toJsonValue(m_deprecation));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_hreflang_isSet) {
        obj.insert(QString("hreflang"), ::OpenAPI::toJsonValue(m_hreflang));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_profile_isSet) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_templated_isSet) {
        obj.insert(QString("templated"), ::OpenAPI::toJsonValue(m_templated));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAILinkObject::getDeprecation() const {
    return m_deprecation;
}
void OAILinkObject::setDeprecation(const QString &deprecation) {
    m_deprecation = deprecation;
    m_deprecation_isSet = true;
}

bool OAILinkObject::is_deprecation_Set() const{
    return m_deprecation_isSet;
}

bool OAILinkObject::is_deprecation_Valid() const{
    return m_deprecation_isValid;
}

QString OAILinkObject::getHref() const {
    return m_href;
}
void OAILinkObject::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAILinkObject::is_href_Set() const{
    return m_href_isSet;
}

bool OAILinkObject::is_href_Valid() const{
    return m_href_isValid;
}

QString OAILinkObject::getHreflang() const {
    return m_hreflang;
}
void OAILinkObject::setHreflang(const QString &hreflang) {
    m_hreflang = hreflang;
    m_hreflang_isSet = true;
}

bool OAILinkObject::is_hreflang_Set() const{
    return m_hreflang_isSet;
}

bool OAILinkObject::is_hreflang_Valid() const{
    return m_hreflang_isValid;
}

QString OAILinkObject::getName() const {
    return m_name;
}
void OAILinkObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILinkObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAILinkObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILinkObject::getProfile() const {
    return m_profile;
}
void OAILinkObject::setProfile(const QString &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAILinkObject::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAILinkObject::is_profile_Valid() const{
    return m_profile_isValid;
}

bool OAILinkObject::isTemplated() const {
    return m_templated;
}
void OAILinkObject::setTemplated(const bool &templated) {
    m_templated = templated;
    m_templated_isSet = true;
}

bool OAILinkObject::is_templated_Set() const{
    return m_templated_isSet;
}

bool OAILinkObject::is_templated_Valid() const{
    return m_templated_isValid;
}

QString OAILinkObject::getTitle() const {
    return m_title;
}
void OAILinkObject::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILinkObject::is_title_Set() const{
    return m_title_isSet;
}

bool OAILinkObject::is_title_Valid() const{
    return m_title_isValid;
}

QString OAILinkObject::getType() const {
    return m_type;
}
void OAILinkObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILinkObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAILinkObject::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILinkObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hreflang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_templated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && true;
}

} // namespace OpenAPI
