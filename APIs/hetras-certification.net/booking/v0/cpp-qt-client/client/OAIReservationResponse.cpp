/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationResponse::OAIReservationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationResponse::OAIReservationResponse() {
    this->initializeModel();
}

OAIReservationResponse::~OAIReservationResponse() {}

void OAIReservationResponse::initializeModel() {

    m__warnings_isSet = false;
    m__warnings_isValid = false;

    m_addon_services_isSet = false;
    m_addon_services_isValid = false;

    m_adults_isSet = false;
    m_adults_isValid = false;

    m_arrival_date_isSet = false;
    m_arrival_date_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_cancellation_id_isSet = false;
    m_cancellation_id_isValid = false;

    m_cancellation_policies_isSet = false;
    m_cancellation_policies_isValid = false;

    m_channel_code_isSet = false;
    m_channel_code_isValid = false;

    m_checkin_time_isSet = false;
    m_checkin_time_isValid = false;

    m_checkout_time_isSet = false;
    m_checkout_time_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_confirmation_id_isSet = false;
    m_confirmation_id_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_departure_date_isSet = false;
    m_departure_date_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_general_policies_isSet = false;
    m_general_policies_isValid = false;

    m_guarantee_isSet = false;
    m_guarantee_isValid = false;

    m_guests_isSet = false;
    m_guests_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_market_code_isSet = false;
    m_market_code_isValid = false;

    m_noshow_policy_isSet = false;
    m_noshow_policy_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_rate_plan_isSet = false;
    m_rate_plan_isValid = false;

    m_reservation_number_isSet = false;
    m_reservation_number_isValid = false;

    m_reservation_status_isSet = false;
    m_reservation_status_isValid = false;

    m_room_isSet = false;
    m_room_isValid = false;

    m_room_rates_isSet = false;
    m_room_rates_isValid = false;

    m_rooms_isSet = false;
    m_rooms_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_subchannel_code_isSet = false;
    m_subchannel_code_isValid = false;

    m_total_stay_isSet = false;
    m_total_stay_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIReservationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationResponse::fromJsonObject(QJsonObject json) {

    m__warnings_isValid = ::OpenAPI::fromJsonValue(m__warnings, json[QString("_warnings")]);
    m__warnings_isSet = !json[QString("_warnings")].isNull() && m__warnings_isValid;

    m_addon_services_isValid = ::OpenAPI::fromJsonValue(m_addon_services, json[QString("addon_services")]);
    m_addon_services_isSet = !json[QString("addon_services")].isNull() && m_addon_services_isValid;

    m_adults_isValid = ::OpenAPI::fromJsonValue(m_adults, json[QString("adults")]);
    m_adults_isSet = !json[QString("adults")].isNull() && m_adults_isValid;

    m_arrival_date_isValid = ::OpenAPI::fromJsonValue(m_arrival_date, json[QString("arrival_date")]);
    m_arrival_date_isSet = !json[QString("arrival_date")].isNull() && m_arrival_date_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_cancellation_id_isValid = ::OpenAPI::fromJsonValue(m_cancellation_id, json[QString("cancellation_id")]);
    m_cancellation_id_isSet = !json[QString("cancellation_id")].isNull() && m_cancellation_id_isValid;

    m_cancellation_policies_isValid = ::OpenAPI::fromJsonValue(m_cancellation_policies, json[QString("cancellation_policies")]);
    m_cancellation_policies_isSet = !json[QString("cancellation_policies")].isNull() && m_cancellation_policies_isValid;

    m_channel_code_isValid = ::OpenAPI::fromJsonValue(m_channel_code, json[QString("channel_code")]);
    m_channel_code_isSet = !json[QString("channel_code")].isNull() && m_channel_code_isValid;

    m_checkin_time_isValid = ::OpenAPI::fromJsonValue(m_checkin_time, json[QString("checkin_time")]);
    m_checkin_time_isSet = !json[QString("checkin_time")].isNull() && m_checkin_time_isValid;

    m_checkout_time_isValid = ::OpenAPI::fromJsonValue(m_checkout_time, json[QString("checkout_time")]);
    m_checkout_time_isSet = !json[QString("checkout_time")].isNull() && m_checkout_time_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_confirmation_id_isValid = ::OpenAPI::fromJsonValue(m_confirmation_id, json[QString("confirmation_id")]);
    m_confirmation_id_isSet = !json[QString("confirmation_id")].isNull() && m_confirmation_id_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_departure_date_isValid = ::OpenAPI::fromJsonValue(m_departure_date, json[QString("departure_date")]);
    m_departure_date_isSet = !json[QString("departure_date")].isNull() && m_departure_date_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_general_policies_isValid = ::OpenAPI::fromJsonValue(m_general_policies, json[QString("general_policies")]);
    m_general_policies_isSet = !json[QString("general_policies")].isNull() && m_general_policies_isValid;

    m_guarantee_isValid = ::OpenAPI::fromJsonValue(m_guarantee, json[QString("guarantee")]);
    m_guarantee_isSet = !json[QString("guarantee")].isNull() && m_guarantee_isValid;

    m_guests_isValid = ::OpenAPI::fromJsonValue(m_guests, json[QString("guests")]);
    m_guests_isSet = !json[QString("guests")].isNull() && m_guests_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotel_id")]);
    m_hotel_id_isSet = !json[QString("hotel_id")].isNull() && m_hotel_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_market_code_isValid = ::OpenAPI::fromJsonValue(m_market_code, json[QString("market_code")]);
    m_market_code_isSet = !json[QString("market_code")].isNull() && m_market_code_isValid;

    m_noshow_policy_isValid = ::OpenAPI::fromJsonValue(m_noshow_policy, json[QString("noshow_policy")]);
    m_noshow_policy_isSet = !json[QString("noshow_policy")].isNull() && m_noshow_policy_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_rate_plan_isValid = ::OpenAPI::fromJsonValue(m_rate_plan, json[QString("rate_plan")]);
    m_rate_plan_isSet = !json[QString("rate_plan")].isNull() && m_rate_plan_isValid;

    m_reservation_number_isValid = ::OpenAPI::fromJsonValue(m_reservation_number, json[QString("reservation_number")]);
    m_reservation_number_isSet = !json[QString("reservation_number")].isNull() && m_reservation_number_isValid;

    m_reservation_status_isValid = ::OpenAPI::fromJsonValue(m_reservation_status, json[QString("reservation_status")]);
    m_reservation_status_isSet = !json[QString("reservation_status")].isNull() && m_reservation_status_isValid;

    m_room_isValid = ::OpenAPI::fromJsonValue(m_room, json[QString("room")]);
    m_room_isSet = !json[QString("room")].isNull() && m_room_isValid;

    m_room_rates_isValid = ::OpenAPI::fromJsonValue(m_room_rates, json[QString("room_rates")]);
    m_room_rates_isSet = !json[QString("room_rates")].isNull() && m_room_rates_isValid;

    m_rooms_isValid = ::OpenAPI::fromJsonValue(m_rooms, json[QString("rooms")]);
    m_rooms_isSet = !json[QString("rooms")].isNull() && m_rooms_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_subchannel_code_isValid = ::OpenAPI::fromJsonValue(m_subchannel_code, json[QString("subchannel_code")]);
    m_subchannel_code_isSet = !json[QString("subchannel_code")].isNull() && m_subchannel_code_isValid;

    m_total_stay_isValid = ::OpenAPI::fromJsonValue(m_total_stay, json[QString("total_stay")]);
    m_total_stay_isSet = !json[QString("total_stay")].isNull() && m_total_stay_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIReservationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__warnings.size() > 0) {
        obj.insert(QString("_warnings"), ::OpenAPI::toJsonValue(m__warnings));
    }
    if (m_addon_services.size() > 0) {
        obj.insert(QString("addon_services"), ::OpenAPI::toJsonValue(m_addon_services));
    }
    if (m_adults_isSet) {
        obj.insert(QString("adults"), ::OpenAPI::toJsonValue(m_adults));
    }
    if (m_arrival_date_isSet) {
        obj.insert(QString("arrival_date"), ::OpenAPI::toJsonValue(m_arrival_date));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_block.isSet()) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_cancellation_id_isSet) {
        obj.insert(QString("cancellation_id"), ::OpenAPI::toJsonValue(m_cancellation_id));
    }
    if (m_cancellation_policies.size() > 0) {
        obj.insert(QString("cancellation_policies"), ::OpenAPI::toJsonValue(m_cancellation_policies));
    }
    if (m_channel_code_isSet) {
        obj.insert(QString("channel_code"), ::OpenAPI::toJsonValue(m_channel_code));
    }
    if (m_checkin_time_isSet) {
        obj.insert(QString("checkin_time"), ::OpenAPI::toJsonValue(m_checkin_time));
    }
    if (m_checkout_time_isSet) {
        obj.insert(QString("checkout_time"), ::OpenAPI::toJsonValue(m_checkout_time));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_confirmation_id_isSet) {
        obj.insert(QString("confirmation_id"), ::OpenAPI::toJsonValue(m_confirmation_id));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_departure_date_isSet) {
        obj.insert(QString("departure_date"), ::OpenAPI::toJsonValue(m_departure_date));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_general_policies.size() > 0) {
        obj.insert(QString("general_policies"), ::OpenAPI::toJsonValue(m_general_policies));
    }
    if (m_guarantee.isSet()) {
        obj.insert(QString("guarantee"), ::OpenAPI::toJsonValue(m_guarantee));
    }
    if (m_guests.size() > 0) {
        obj.insert(QString("guests"), ::OpenAPI::toJsonValue(m_guests));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotel_id"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_market_code_isSet) {
        obj.insert(QString("market_code"), ::OpenAPI::toJsonValue(m_market_code));
    }
    if (m_noshow_policy.isSet()) {
        obj.insert(QString("noshow_policy"), ::OpenAPI::toJsonValue(m_noshow_policy));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_rate_plan.isSet()) {
        obj.insert(QString("rate_plan"), ::OpenAPI::toJsonValue(m_rate_plan));
    }
    if (m_reservation_number_isSet) {
        obj.insert(QString("reservation_number"), ::OpenAPI::toJsonValue(m_reservation_number));
    }
    if (m_reservation_status_isSet) {
        obj.insert(QString("reservation_status"), ::OpenAPI::toJsonValue(m_reservation_status));
    }
    if (m_room.isSet()) {
        obj.insert(QString("room"), ::OpenAPI::toJsonValue(m_room));
    }
    if (m_room_rates.size() > 0) {
        obj.insert(QString("room_rates"), ::OpenAPI::toJsonValue(m_room_rates));
    }
    if (m_rooms_isSet) {
        obj.insert(QString("rooms"), ::OpenAPI::toJsonValue(m_rooms));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_subchannel_code_isSet) {
        obj.insert(QString("subchannel_code"), ::OpenAPI::toJsonValue(m_subchannel_code));
    }
    if (m_total_stay.isSet()) {
        obj.insert(QString("total_stay"), ::OpenAPI::toJsonValue(m_total_stay));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QList<QString> OAIReservationResponse::getWarnings() const {
    return m__warnings;
}
void OAIReservationResponse::setWarnings(const QList<QString> &_warnings) {
    m__warnings = _warnings;
    m__warnings_isSet = true;
}

bool OAIReservationResponse::is__warnings_Set() const{
    return m__warnings_isSet;
}

bool OAIReservationResponse::is__warnings_Valid() const{
    return m__warnings_isValid;
}

QList<QString> OAIReservationResponse::getAddonServices() const {
    return m_addon_services;
}
void OAIReservationResponse::setAddonServices(const QList<QString> &addon_services) {
    m_addon_services = addon_services;
    m_addon_services_isSet = true;
}

bool OAIReservationResponse::is_addon_services_Set() const{
    return m_addon_services_isSet;
}

bool OAIReservationResponse::is_addon_services_Valid() const{
    return m_addon_services_isValid;
}

qint32 OAIReservationResponse::getAdults() const {
    return m_adults;
}
void OAIReservationResponse::setAdults(const qint32 &adults) {
    m_adults = adults;
    m_adults_isSet = true;
}

bool OAIReservationResponse::is_adults_Set() const{
    return m_adults_isSet;
}

bool OAIReservationResponse::is_adults_Valid() const{
    return m_adults_isValid;
}

QDateTime OAIReservationResponse::getArrivalDate() const {
    return m_arrival_date;
}
void OAIReservationResponse::setArrivalDate(const QDateTime &arrival_date) {
    m_arrival_date = arrival_date;
    m_arrival_date_isSet = true;
}

bool OAIReservationResponse::is_arrival_date_Set() const{
    return m_arrival_date_isSet;
}

bool OAIReservationResponse::is_arrival_date_Valid() const{
    return m_arrival_date_isValid;
}

double OAIReservationResponse::getBalance() const {
    return m_balance;
}
void OAIReservationResponse::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIReservationResponse::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIReservationResponse::is_balance_Valid() const{
    return m_balance_isValid;
}

OAIBlockInfo OAIReservationResponse::getBlock() const {
    return m_block;
}
void OAIReservationResponse::setBlock(const OAIBlockInfo &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIReservationResponse::is_block_Set() const{
    return m_block_isSet;
}

bool OAIReservationResponse::is_block_Valid() const{
    return m_block_isValid;
}

QString OAIReservationResponse::getCancellationId() const {
    return m_cancellation_id;
}
void OAIReservationResponse::setCancellationId(const QString &cancellation_id) {
    m_cancellation_id = cancellation_id;
    m_cancellation_id_isSet = true;
}

bool OAIReservationResponse::is_cancellation_id_Set() const{
    return m_cancellation_id_isSet;
}

bool OAIReservationResponse::is_cancellation_id_Valid() const{
    return m_cancellation_id_isValid;
}

QList<OAICancellationPolicy> OAIReservationResponse::getCancellationPolicies() const {
    return m_cancellation_policies;
}
void OAIReservationResponse::setCancellationPolicies(const QList<OAICancellationPolicy> &cancellation_policies) {
    m_cancellation_policies = cancellation_policies;
    m_cancellation_policies_isSet = true;
}

bool OAIReservationResponse::is_cancellation_policies_Set() const{
    return m_cancellation_policies_isSet;
}

bool OAIReservationResponse::is_cancellation_policies_Valid() const{
    return m_cancellation_policies_isValid;
}

QString OAIReservationResponse::getChannelCode() const {
    return m_channel_code;
}
void OAIReservationResponse::setChannelCode(const QString &channel_code) {
    m_channel_code = channel_code;
    m_channel_code_isSet = true;
}

bool OAIReservationResponse::is_channel_code_Set() const{
    return m_channel_code_isSet;
}

bool OAIReservationResponse::is_channel_code_Valid() const{
    return m_channel_code_isValid;
}

QDateTime OAIReservationResponse::getCheckinTime() const {
    return m_checkin_time;
}
void OAIReservationResponse::setCheckinTime(const QDateTime &checkin_time) {
    m_checkin_time = checkin_time;
    m_checkin_time_isSet = true;
}

bool OAIReservationResponse::is_checkin_time_Set() const{
    return m_checkin_time_isSet;
}

bool OAIReservationResponse::is_checkin_time_Valid() const{
    return m_checkin_time_isValid;
}

QDateTime OAIReservationResponse::getCheckoutTime() const {
    return m_checkout_time;
}
void OAIReservationResponse::setCheckoutTime(const QDateTime &checkout_time) {
    m_checkout_time = checkout_time;
    m_checkout_time_isSet = true;
}

bool OAIReservationResponse::is_checkout_time_Set() const{
    return m_checkout_time_isSet;
}

bool OAIReservationResponse::is_checkout_time_Valid() const{
    return m_checkout_time_isValid;
}

QString OAIReservationResponse::getComment() const {
    return m_comment;
}
void OAIReservationResponse::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIReservationResponse::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIReservationResponse::is_comment_Valid() const{
    return m_comment_isValid;
}

OAICompany OAIReservationResponse::getCompany() const {
    return m_company;
}
void OAIReservationResponse::setCompany(const OAICompany &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIReservationResponse::is_company_Set() const{
    return m_company_isSet;
}

bool OAIReservationResponse::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIReservationResponse::getConfirmationId() const {
    return m_confirmation_id;
}
void OAIReservationResponse::setConfirmationId(const QString &confirmation_id) {
    m_confirmation_id = confirmation_id;
    m_confirmation_id_isSet = true;
}

bool OAIReservationResponse::is_confirmation_id_Set() const{
    return m_confirmation_id_isSet;
}

bool OAIReservationResponse::is_confirmation_id_Valid() const{
    return m_confirmation_id_isValid;
}

OAIContactResponse OAIReservationResponse::getContact() const {
    return m_contact;
}
void OAIReservationResponse::setContact(const OAIContactResponse &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIReservationResponse::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIReservationResponse::is_contact_Valid() const{
    return m_contact_isValid;
}

QDateTime OAIReservationResponse::getCreated() const {
    return m_created;
}
void OAIReservationResponse::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIReservationResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAIReservationResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIReservationResponse::getCurrency() const {
    return m_currency;
}
void OAIReservationResponse::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIReservationResponse::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIReservationResponse::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIReservationResponse::getDepartureDate() const {
    return m_departure_date;
}
void OAIReservationResponse::setDepartureDate(const QDateTime &departure_date) {
    m_departure_date = departure_date;
    m_departure_date_isSet = true;
}

bool OAIReservationResponse::is_departure_date_Set() const{
    return m_departure_date_isSet;
}

bool OAIReservationResponse::is_departure_date_Valid() const{
    return m_departure_date_isValid;
}

QString OAIReservationResponse::getExternalId() const {
    return m_external_id;
}
void OAIReservationResponse::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIReservationResponse::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIReservationResponse::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QList<OAIGeneralPolicy> OAIReservationResponse::getGeneralPolicies() const {
    return m_general_policies;
}
void OAIReservationResponse::setGeneralPolicies(const QList<OAIGeneralPolicy> &general_policies) {
    m_general_policies = general_policies;
    m_general_policies_isSet = true;
}

bool OAIReservationResponse::is_general_policies_Set() const{
    return m_general_policies_isSet;
}

bool OAIReservationResponse::is_general_policies_Valid() const{
    return m_general_policies_isValid;
}

OAIGuaranteeResponse OAIReservationResponse::getGuarantee() const {
    return m_guarantee;
}
void OAIReservationResponse::setGuarantee(const OAIGuaranteeResponse &guarantee) {
    m_guarantee = guarantee;
    m_guarantee_isSet = true;
}

bool OAIReservationResponse::is_guarantee_Set() const{
    return m_guarantee_isSet;
}

bool OAIReservationResponse::is_guarantee_Valid() const{
    return m_guarantee_isValid;
}

QList<OAICustomerResponse> OAIReservationResponse::getGuests() const {
    return m_guests;
}
void OAIReservationResponse::setGuests(const QList<OAICustomerResponse> &guests) {
    m_guests = guests;
    m_guests_isSet = true;
}

bool OAIReservationResponse::is_guests_Set() const{
    return m_guests_isSet;
}

bool OAIReservationResponse::is_guests_Valid() const{
    return m_guests_isValid;
}

qint32 OAIReservationResponse::getHotelId() const {
    return m_hotel_id;
}
void OAIReservationResponse::setHotelId(const qint32 &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIReservationResponse::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIReservationResponse::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

QList<QString> OAIReservationResponse::getLabels() const {
    return m_labels;
}
void OAIReservationResponse::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIReservationResponse::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIReservationResponse::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIReservationResponse::getMarketCode() const {
    return m_market_code;
}
void OAIReservationResponse::setMarketCode(const QString &market_code) {
    m_market_code = market_code;
    m_market_code_isSet = true;
}

bool OAIReservationResponse::is_market_code_Set() const{
    return m_market_code_isSet;
}

bool OAIReservationResponse::is_market_code_Valid() const{
    return m_market_code_isValid;
}

OAINoShowPolicy OAIReservationResponse::getNoshowPolicy() const {
    return m_noshow_policy;
}
void OAIReservationResponse::setNoshowPolicy(const OAINoShowPolicy &noshow_policy) {
    m_noshow_policy = noshow_policy;
    m_noshow_policy_isSet = true;
}

bool OAIReservationResponse::is_noshow_policy_Set() const{
    return m_noshow_policy_isSet;
}

bool OAIReservationResponse::is_noshow_policy_Valid() const{
    return m_noshow_policy_isValid;
}

QString OAIReservationResponse::getPaymentMethod() const {
    return m_payment_method;
}
void OAIReservationResponse::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIReservationResponse::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIReservationResponse::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

OAIRatePlan OAIReservationResponse::getRatePlan() const {
    return m_rate_plan;
}
void OAIReservationResponse::setRatePlan(const OAIRatePlan &rate_plan) {
    m_rate_plan = rate_plan;
    m_rate_plan_isSet = true;
}

bool OAIReservationResponse::is_rate_plan_Set() const{
    return m_rate_plan_isSet;
}

bool OAIReservationResponse::is_rate_plan_Valid() const{
    return m_rate_plan_isValid;
}

qint32 OAIReservationResponse::getReservationNumber() const {
    return m_reservation_number;
}
void OAIReservationResponse::setReservationNumber(const qint32 &reservation_number) {
    m_reservation_number = reservation_number;
    m_reservation_number_isSet = true;
}

bool OAIReservationResponse::is_reservation_number_Set() const{
    return m_reservation_number_isSet;
}

bool OAIReservationResponse::is_reservation_number_Valid() const{
    return m_reservation_number_isValid;
}

QString OAIReservationResponse::getReservationStatus() const {
    return m_reservation_status;
}
void OAIReservationResponse::setReservationStatus(const QString &reservation_status) {
    m_reservation_status = reservation_status;
    m_reservation_status_isSet = true;
}

bool OAIReservationResponse::is_reservation_status_Set() const{
    return m_reservation_status_isSet;
}

bool OAIReservationResponse::is_reservation_status_Valid() const{
    return m_reservation_status_isValid;
}

OAIEmbeddedRoom OAIReservationResponse::getRoom() const {
    return m_room;
}
void OAIReservationResponse::setRoom(const OAIEmbeddedRoom &room) {
    m_room = room;
    m_room_isSet = true;
}

bool OAIReservationResponse::is_room_Set() const{
    return m_room_isSet;
}

bool OAIReservationResponse::is_room_Valid() const{
    return m_room_isValid;
}

QList<OAIDailyRate> OAIReservationResponse::getRoomRates() const {
    return m_room_rates;
}
void OAIReservationResponse::setRoomRates(const QList<OAIDailyRate> &room_rates) {
    m_room_rates = room_rates;
    m_room_rates_isSet = true;
}

bool OAIReservationResponse::is_room_rates_Set() const{
    return m_room_rates_isSet;
}

bool OAIReservationResponse::is_room_rates_Valid() const{
    return m_room_rates_isValid;
}

qint32 OAIReservationResponse::getRooms() const {
    return m_rooms;
}
void OAIReservationResponse::setRooms(const qint32 &rooms) {
    m_rooms = rooms;
    m_rooms_isSet = true;
}

bool OAIReservationResponse::is_rooms_Set() const{
    return m_rooms_isSet;
}

bool OAIReservationResponse::is_rooms_Valid() const{
    return m_rooms_isValid;
}

QList<OAIService> OAIReservationResponse::getServices() const {
    return m_services;
}
void OAIReservationResponse::setServices(const QList<OAIService> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIReservationResponse::is_services_Set() const{
    return m_services_isSet;
}

bool OAIReservationResponse::is_services_Valid() const{
    return m_services_isValid;
}

QString OAIReservationResponse::getSubchannelCode() const {
    return m_subchannel_code;
}
void OAIReservationResponse::setSubchannelCode(const QString &subchannel_code) {
    m_subchannel_code = subchannel_code;
    m_subchannel_code_isSet = true;
}

bool OAIReservationResponse::is_subchannel_code_Set() const{
    return m_subchannel_code_isSet;
}

bool OAIReservationResponse::is_subchannel_code_Valid() const{
    return m_subchannel_code_isValid;
}

OAIRate OAIReservationResponse::getTotalStay() const {
    return m_total_stay;
}
void OAIReservationResponse::setTotalStay(const OAIRate &total_stay) {
    m_total_stay = total_stay;
    m_total_stay_isSet = true;
}

bool OAIReservationResponse::is_total_stay_Set() const{
    return m_total_stay_isSet;
}

bool OAIReservationResponse::is_total_stay_Valid() const{
    return m_total_stay_isValid;
}

QDateTime OAIReservationResponse::getUpdated() const {
    return m_updated;
}
void OAIReservationResponse::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIReservationResponse::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIReservationResponse::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIReservationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_addon_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkin_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_guarantee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noshow_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subchannel_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_stay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
