/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddonOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddonOffer::OAIAddonOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddonOffer::OAIAddonOffer() {
    this->initializeModel();
}

OAIAddonOffer::~OAIAddonOffer() {}

void OAIAddonOffer::initializeModel() {

    m_breakdown_isSet = false;
    m_breakdown_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rate_mode_isSet = false;
    m_rate_mode_isValid = false;

    m_total_stay_isSet = false;
    m_total_stay_isValid = false;
}

void OAIAddonOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddonOffer::fromJsonObject(QJsonObject json) {

    m_breakdown_isValid = ::OpenAPI::fromJsonValue(m_breakdown, json[QString("breakdown")]);
    m_breakdown_isSet = !json[QString("breakdown")].isNull() && m_breakdown_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rate_mode_isValid = ::OpenAPI::fromJsonValue(m_rate_mode, json[QString("rate_mode")]);
    m_rate_mode_isSet = !json[QString("rate_mode")].isNull() && m_rate_mode_isValid;

    m_total_stay_isValid = ::OpenAPI::fromJsonValue(m_total_stay, json[QString("total_stay")]);
    m_total_stay_isSet = !json[QString("total_stay")].isNull() && m_total_stay_isValid;
}

QString OAIAddonOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddonOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_breakdown.size() > 0) {
        obj.insert(QString("breakdown"), ::OpenAPI::toJsonValue(m_breakdown));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rate_mode_isSet) {
        obj.insert(QString("rate_mode"), ::OpenAPI::toJsonValue(m_rate_mode));
    }
    if (m_total_stay.isSet()) {
        obj.insert(QString("total_stay"), ::OpenAPI::toJsonValue(m_total_stay));
    }
    return obj;
}

QList<OAIAddonOfferBreakdown> OAIAddonOffer::getBreakdown() const {
    return m_breakdown;
}
void OAIAddonOffer::setBreakdown(const QList<OAIAddonOfferBreakdown> &breakdown) {
    m_breakdown = breakdown;
    m_breakdown_isSet = true;
}

bool OAIAddonOffer::is_breakdown_Set() const{
    return m_breakdown_isSet;
}

bool OAIAddonOffer::is_breakdown_Valid() const{
    return m_breakdown_isValid;
}

QString OAIAddonOffer::getCode() const {
    return m_code;
}
void OAIAddonOffer::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAddonOffer::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAddonOffer::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIAddonOffer::getDescription() const {
    return m_description;
}
void OAIAddonOffer::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAddonOffer::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAddonOffer::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAddonOffer::getFrequency() const {
    return m_frequency;
}
void OAIAddonOffer::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIAddonOffer::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIAddonOffer::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIAddonOffer::getName() const {
    return m_name;
}
void OAIAddonOffer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddonOffer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddonOffer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAddonOffer::getRateMode() const {
    return m_rate_mode;
}
void OAIAddonOffer::setRateMode(const QString &rate_mode) {
    m_rate_mode = rate_mode;
    m_rate_mode_isSet = true;
}

bool OAIAddonOffer::is_rate_mode_Set() const{
    return m_rate_mode_isSet;
}

bool OAIAddonOffer::is_rate_mode_Valid() const{
    return m_rate_mode_isValid;
}

OAIAddonOfferRate OAIAddonOffer::getTotalStay() const {
    return m_total_stay;
}
void OAIAddonOffer::setTotalStay(const OAIAddonOfferRate &total_stay) {
    m_total_stay = total_stay;
    m_total_stay_isSet = true;
}

bool OAIAddonOffer::is_total_stay_Set() const{
    return m_total_stay_isSet;
}

bool OAIAddonOffer::is_total_stay_Valid() const{
    return m_total_stay_isValid;
}

bool OAIAddonOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breakdown.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_stay.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddonOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
