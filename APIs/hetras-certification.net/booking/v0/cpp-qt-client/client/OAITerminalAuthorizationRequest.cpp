/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminalAuthorizationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminalAuthorizationRequest::OAITerminalAuthorizationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminalAuthorizationRequest::OAITerminalAuthorizationRequest() {
    this->initializeModel();
}

OAITerminalAuthorizationRequest::~OAITerminalAuthorizationRequest() {}

void OAITerminalAuthorizationRequest::initializeModel() {

    m_amount_to_authorize_isSet = false;
    m_amount_to_authorize_isValid = false;

    m_client_identity_isSet = false;
    m_client_identity_isValid = false;
}

void OAITerminalAuthorizationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminalAuthorizationRequest::fromJsonObject(QJsonObject json) {

    m_amount_to_authorize_isValid = ::OpenAPI::fromJsonValue(m_amount_to_authorize, json[QString("amount_to_authorize")]);
    m_amount_to_authorize_isSet = !json[QString("amount_to_authorize")].isNull() && m_amount_to_authorize_isValid;

    m_client_identity_isValid = ::OpenAPI::fromJsonValue(m_client_identity, json[QString("client_identity")]);
    m_client_identity_isSet = !json[QString("client_identity")].isNull() && m_client_identity_isValid;
}

QString OAITerminalAuthorizationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminalAuthorizationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_to_authorize_isSet) {
        obj.insert(QString("amount_to_authorize"), ::OpenAPI::toJsonValue(m_amount_to_authorize));
    }
    if (m_client_identity_isSet) {
        obj.insert(QString("client_identity"), ::OpenAPI::toJsonValue(m_client_identity));
    }
    return obj;
}

double OAITerminalAuthorizationRequest::getAmountToAuthorize() const {
    return m_amount_to_authorize;
}
void OAITerminalAuthorizationRequest::setAmountToAuthorize(const double &amount_to_authorize) {
    m_amount_to_authorize = amount_to_authorize;
    m_amount_to_authorize_isSet = true;
}

bool OAITerminalAuthorizationRequest::is_amount_to_authorize_Set() const{
    return m_amount_to_authorize_isSet;
}

bool OAITerminalAuthorizationRequest::is_amount_to_authorize_Valid() const{
    return m_amount_to_authorize_isValid;
}

QString OAITerminalAuthorizationRequest::getClientIdentity() const {
    return m_client_identity;
}
void OAITerminalAuthorizationRequest::setClientIdentity(const QString &client_identity) {
    m_client_identity = client_identity;
    m_client_identity_isSet = true;
}

bool OAITerminalAuthorizationRequest::is_client_identity_Set() const{
    return m_client_identity_isSet;
}

bool OAITerminalAuthorizationRequest::is_client_identity_Valid() const{
    return m_client_identity_isValid;
}

bool OAITerminalAuthorizationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_to_authorize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_identity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminalAuthorizationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
