# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, description: str=None, frequency: str=None, is_addon: bool=None, name: str=None):
        """Service - a model defined in OpenAPI

        :param code: The code of this Service.
        :param description: The description of this Service.
        :param frequency: The frequency of this Service.
        :param is_addon: The is_addon of this Service.
        :param name: The name of this Service.
        """
        self.openapi_types = {
            'code': str,
            'description': str,
            'frequency': str,
            'is_addon': bool,
            'name': str
        }

        self.attribute_map = {
            'code': 'code',
            'description': 'description',
            'frequency': 'frequency',
            'is_addon': 'is_addon',
            'name': 'name'
        }

        self._code = code
        self._description = description
        self._frequency = frequency
        self._is_addon = is_addon
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Service.

        The code of the service

        :return: The code of this Service.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Service.

        The code of the service

        :param code: The code of this Service.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this Service.

        The description of the service which is suitable for displaying to customers

        :return: The description of this Service.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Service.

        The description of the service which is suitable for displaying to customers

        :param description: The description of this Service.
        :type description: str
        """

        self._description = description

    @property
    def frequency(self):
        """Gets the frequency of this Service.

        The frequency for charging the service to the guests folio. It is a free text and only suitable for               displaying to customers

        :return: The frequency of this Service.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Service.

        The frequency for charging the service to the guests folio. It is a free text and only suitable for               displaying to customers

        :param frequency: The frequency of this Service.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def is_addon(self):
        """Gets the is_addon of this Service.

        This flag indicates if a service is an addon or is included already in the room rate

        :return: The is_addon of this Service.
        :rtype: bool
        """
        return self._is_addon

    @is_addon.setter
    def is_addon(self, is_addon):
        """Sets the is_addon of this Service.

        This flag indicates if a service is an addon or is included already in the room rate

        :param is_addon: The is_addon of this Service.
        :type is_addon: bool
        """

        self._is_addon = is_addon

    @property
    def name(self):
        """Gets the name of this Service.

        The name of the service

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        The name of the service

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name
