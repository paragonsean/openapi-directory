# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDailyRatesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_code: str=None, expand: List[str]=None, _from: datetime=None, hotel_id: int=None, rate_plan_codes: List[str]=None, to: datetime=None):
        """GetDailyRatesRequest - a model defined in OpenAPI

        :param channel_code: The channel_code of this GetDailyRatesRequest.
        :param expand: The expand of this GetDailyRatesRequest.
        :param _from: The _from of this GetDailyRatesRequest.
        :param hotel_id: The hotel_id of this GetDailyRatesRequest.
        :param rate_plan_codes: The rate_plan_codes of this GetDailyRatesRequest.
        :param to: The to of this GetDailyRatesRequest.
        """
        self.openapi_types = {
            'channel_code': str,
            'expand': List[str],
            '_from': datetime,
            'hotel_id': int,
            'rate_plan_codes': List[str],
            'to': datetime
        }

        self.attribute_map = {
            'channel_code': 'channelCode',
            'expand': 'expand',
            '_from': 'from',
            'hotel_id': 'hotelId',
            'rate_plan_codes': 'ratePlanCodes',
            'to': 'to'
        }

        self._channel_code = channel_code
        self._expand = expand
        self.__from = _from
        self._hotel_id = hotel_id
        self._rate_plan_codes = rate_plan_codes
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDailyRatesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDailyRatesRequest of this GetDailyRatesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_code(self):
        """Gets the channel_code of this GetDailyRatesRequest.

        Define the channel code in order to look up the rates for.

        :return: The channel_code of this GetDailyRatesRequest.
        :rtype: str
        """
        return self._channel_code

    @channel_code.setter
    def channel_code(self, channel_code):
        """Sets the channel_code of this GetDailyRatesRequest.

        Define the channel code in order to look up the rates for.

        :param channel_code: The channel_code of this GetDailyRatesRequest.
        :type channel_code: str
        """
        if channel_code is None:
            raise ValueError("Invalid value for `channel_code`, must not be `None`")

        self._channel_code = channel_code

    @property
    def expand(self):
        """Gets the expand of this GetDailyRatesRequest.

        Define the sections you want to expand and get informed about rates for.

        :return: The expand of this GetDailyRatesRequest.
        :rtype: List[str]
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this GetDailyRatesRequest.

        Define the sections you want to expand and get informed about rates for.

        :param expand: The expand of this GetDailyRatesRequest.
        :type expand: List[str]
        """
        allowed_values = ["None", "Policies", "RatePlans"]  # noqa: E501
        if not set(expand).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `expand` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(expand) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._expand = expand

    @property
    def _from(self):
        """Gets the _from of this GetDailyRatesRequest.

        Define the first business day you would like to get availability numbers for. The day should not be in the past.

        :return: The _from of this GetDailyRatesRequest.
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this GetDailyRatesRequest.

        Define the first business day you would like to get availability numbers for. The day should not be in the past.

        :param _from: The _from of this GetDailyRatesRequest.
        :type _from: datetime
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def hotel_id(self):
        """Gets the hotel_id of this GetDailyRatesRequest.

        Define the hotel id to request the availability for.

        :return: The hotel_id of this GetDailyRatesRequest.
        :rtype: int
        """
        return self._hotel_id

    @hotel_id.setter
    def hotel_id(self, hotel_id):
        """Sets the hotel_id of this GetDailyRatesRequest.

        Define the hotel id to request the availability for.

        :param hotel_id: The hotel_id of this GetDailyRatesRequest.
        :type hotel_id: int
        """
        if hotel_id is None:
            raise ValueError("Invalid value for `hotel_id`, must not be `None`")

        self._hotel_id = hotel_id

    @property
    def rate_plan_codes(self):
        """Gets the rate_plan_codes of this GetDailyRatesRequest.

        Define the codes of rate plans to show in the response. A list of comma ',' separated rate plan codes.

        :return: The rate_plan_codes of this GetDailyRatesRequest.
        :rtype: List[str]
        """
        return self._rate_plan_codes

    @rate_plan_codes.setter
    def rate_plan_codes(self, rate_plan_codes):
        """Sets the rate_plan_codes of this GetDailyRatesRequest.

        Define the codes of rate plans to show in the response. A list of comma ',' separated rate plan codes.

        :param rate_plan_codes: The rate_plan_codes of this GetDailyRatesRequest.
        :type rate_plan_codes: List[str]
        """

        self._rate_plan_codes = rate_plan_codes

    @property
    def to(self):
        """Gets the to of this GetDailyRatesRequest.

        Define the last business day you would like to get rates for (inclusive). The maximum time span between <i>'From'</i> and <i>'To'</i>              is limited to 365 days. This can't be less than the 'From' date.

        :return: The to of this GetDailyRatesRequest.
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this GetDailyRatesRequest.

        Define the last business day you would like to get rates for (inclusive). The maximum time span between <i>'From'</i> and <i>'To'</i>              is limited to 365 days. This can't be less than the 'From' date.

        :param to: The to of this GetDailyRatesRequest.
        :type to: datetime
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
