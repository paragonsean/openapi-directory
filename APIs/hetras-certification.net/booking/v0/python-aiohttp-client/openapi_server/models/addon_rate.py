# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddonRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_day: datetime=None, code: str=None, rate: float=None):
        """AddonRate - a model defined in OpenAPI

        :param business_day: The business_day of this AddonRate.
        :param code: The code of this AddonRate.
        :param rate: The rate of this AddonRate.
        """
        self.openapi_types = {
            'business_day': datetime,
            'code': str,
            'rate': float
        }

        self.attribute_map = {
            'business_day': 'business_day',
            'code': 'code',
            'rate': 'rate'
        }

        self._business_day = business_day
        self._code = code
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddonRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddonRate of this AddonRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_day(self):
        """Gets the business_day of this AddonRate.

        The business day the addon service should be charged

        :return: The business_day of this AddonRate.
        :rtype: datetime
        """
        return self._business_day

    @business_day.setter
    def business_day(self, business_day):
        """Sets the business_day of this AddonRate.

        The business day the addon service should be charged

        :param business_day: The business_day of this AddonRate.
        :type business_day: datetime
        """

        self._business_day = business_day

    @property
    def code(self):
        """Gets the code of this AddonRate.

        The code of the addon service to be booked

        :return: The code of this AddonRate.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AddonRate.

        The code of the addon service to be booked

        :param code: The code of this AddonRate.
        :type code: str
        """

        self._code = code

    @property
    def rate(self):
        """Gets the rate of this AddonRate.

        Total gross amount for the service

        :return: The rate of this AddonRate.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this AddonRate.

        Total gross amount for the service

        :param rate: The rate of this AddonRate.
        :type rate: float
        """

        self._rate = rate
