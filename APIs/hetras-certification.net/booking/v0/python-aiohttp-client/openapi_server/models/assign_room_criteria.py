# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignRoomCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amenities: List[str]=None, condition: str=None, include_out_of_service: bool=None, locations: List[str]=None, respect_guest_preferences: bool=None, room_number: str=None, views: List[str]=None):
        """AssignRoomCriteria - a model defined in OpenAPI

        :param amenities: The amenities of this AssignRoomCriteria.
        :param condition: The condition of this AssignRoomCriteria.
        :param include_out_of_service: The include_out_of_service of this AssignRoomCriteria.
        :param locations: The locations of this AssignRoomCriteria.
        :param respect_guest_preferences: The respect_guest_preferences of this AssignRoomCriteria.
        :param room_number: The room_number of this AssignRoomCriteria.
        :param views: The views of this AssignRoomCriteria.
        """
        self.openapi_types = {
            'amenities': List[str],
            'condition': str,
            'include_out_of_service': bool,
            'locations': List[str],
            'respect_guest_preferences': bool,
            'room_number': str,
            'views': List[str]
        }

        self.attribute_map = {
            'amenities': 'amenities',
            'condition': 'condition',
            'include_out_of_service': 'include_out_of_service',
            'locations': 'locations',
            'respect_guest_preferences': 'respect_guest_preferences',
            'room_number': 'room_number',
            'views': 'views'
        }

        self._amenities = amenities
        self._condition = condition
        self._include_out_of_service = include_out_of_service
        self._locations = locations
        self._respect_guest_preferences = respect_guest_preferences
        self._room_number = room_number
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignRoomCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignRoomCriteria of this AssignRoomCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amenities(self):
        """Gets the amenities of this AssignRoomCriteria.

        Ensure the assigned room will have all the amenities specified. You can provide a comma seperated list of amenity codes.

        :return: The amenities of this AssignRoomCriteria.
        :rtype: List[str]
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this AssignRoomCriteria.

        Ensure the assigned room will have all the amenities specified. You can provide a comma seperated list of amenity codes.

        :param amenities: The amenities of this AssignRoomCriteria.
        :type amenities: List[str]
        """

        self._amenities = amenities

    @property
    def condition(self):
        """Gets the condition of this AssignRoomCriteria.

        Here you can define to limit the list of assignable rooms based on their current condition. This is only applicable if the underlying reservation              is due to arrive on the current business day. If not set by default only clean rooms will be assigned.

        :return: The condition of this AssignRoomCriteria.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this AssignRoomCriteria.

        Here you can define to limit the list of assignable rooms based on their current condition. This is only applicable if the underlying reservation              is due to arrive on the current business day. If not set by default only clean rooms will be assigned.

        :param condition: The condition of this AssignRoomCriteria.
        :type condition: str
        """
        allowed_values = ["CleanNotInspected", "Clean", "Dirty", "Any"]  # noqa: E501
        if condition not in allowed_values:
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def include_out_of_service(self):
        """Gets the include_out_of_service of this AssignRoomCriteria.

        Sometimes you might want to assign rooms which are out of service (small repair needed) if no other rooms are available anymore. If you set              include_out_of_service to true even those rooms will be considered. The default is false.

        :return: The include_out_of_service of this AssignRoomCriteria.
        :rtype: bool
        """
        return self._include_out_of_service

    @include_out_of_service.setter
    def include_out_of_service(self, include_out_of_service):
        """Sets the include_out_of_service of this AssignRoomCriteria.

        Sometimes you might want to assign rooms which are out of service (small repair needed) if no other rooms are available anymore. If you set              include_out_of_service to true even those rooms will be considered. The default is false.

        :param include_out_of_service: The include_out_of_service of this AssignRoomCriteria.
        :type include_out_of_service: bool
        """

        self._include_out_of_service = include_out_of_service

    @property
    def locations(self):
        """Gets the locations of this AssignRoomCriteria.

        Ensure the assigned room will have at least one of the specified locations. You can provide a comma seperated list of location codes.

        :return: The locations of this AssignRoomCriteria.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this AssignRoomCriteria.

        Ensure the assigned room will have at least one of the specified locations. You can provide a comma seperated list of location codes.

        :param locations: The locations of this AssignRoomCriteria.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def respect_guest_preferences(self):
        """Gets the respect_guest_preferences of this AssignRoomCriteria.

        Defines if the preferences for locations, amenities and views of the primary guest should be taken into account. All defined preferences in the guest              profile override any of the criteria defined in the request body. The default is false.

        :return: The respect_guest_preferences of this AssignRoomCriteria.
        :rtype: bool
        """
        return self._respect_guest_preferences

    @respect_guest_preferences.setter
    def respect_guest_preferences(self, respect_guest_preferences):
        """Sets the respect_guest_preferences of this AssignRoomCriteria.

        Defines if the preferences for locations, amenities and views of the primary guest should be taken into account. All defined preferences in the guest              profile override any of the criteria defined in the request body. The default is false.

        :param respect_guest_preferences: The respect_guest_preferences of this AssignRoomCriteria.
        :type respect_guest_preferences: bool
        """

        self._respect_guest_preferences = respect_guest_preferences

    @property
    def room_number(self):
        """Gets the room_number of this AssignRoomCriteria.

        If you define a specific room number this room will be assigned if not assigned to another reservation, has proper room type and is not OutOfOrder               or OutOfInventory for the stay duration of the underlying reservaton. If set all other filter criteria will be ignored.

        :return: The room_number of this AssignRoomCriteria.
        :rtype: str
        """
        return self._room_number

    @room_number.setter
    def room_number(self, room_number):
        """Sets the room_number of this AssignRoomCriteria.

        If you define a specific room number this room will be assigned if not assigned to another reservation, has proper room type and is not OutOfOrder               or OutOfInventory for the stay duration of the underlying reservaton. If set all other filter criteria will be ignored.

        :param room_number: The room_number of this AssignRoomCriteria.
        :type room_number: str
        """

        self._room_number = room_number

    @property
    def views(self):
        """Gets the views of this AssignRoomCriteria.

        Ensure the assigned room will have at least one of the specified views. You can provide a comma seperated list of view codes.

        :return: The views of this AssignRoomCriteria.
        :rtype: List[str]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this AssignRoomCriteria.

        Ensure the assigned room will have at least one of the specified views. You can provide a comma seperated list of view codes.

        :param views: The views of this AssignRoomCriteria.
        :type views: List[str]
        """

        self._views = views
