# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MailingAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, address_type: str=None, city: str=None, country: str=None, postal_code: str=None):
        """MailingAddress - a model defined in OpenAPI

        :param address: The address of this MailingAddress.
        :param address_type: The address_type of this MailingAddress.
        :param city: The city of this MailingAddress.
        :param country: The country of this MailingAddress.
        :param postal_code: The postal_code of this MailingAddress.
        """
        self.openapi_types = {
            'address': str,
            'address_type': str,
            'city': str,
            'country': str,
            'postal_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'address_type': 'address_type',
            'city': 'city',
            'country': 'country',
            'postal_code': 'postal_code'
        }

        self._address = address
        self._address_type = address_type
        self._city = city
        self._country = country
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MailingAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MailingAddress of this MailingAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this MailingAddress.

        The address details like street, number, and other in free format

        :return: The address of this MailingAddress.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MailingAddress.

        The address details like street, number, and other in free format

        :param address: The address of this MailingAddress.
        :type address: str
        """

        self._address = address

    @property
    def address_type(self):
        """Gets the address_type of this MailingAddress.

        One of the values from the enumeration of allowed address types

        :return: The address_type of this MailingAddress.
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this MailingAddress.

        One of the values from the enumeration of allowed address types

        :param address_type: The address_type of this MailingAddress.
        :type address_type: str
        """
        allowed_values = ["Home", "Business", "Billing", "Other"]  # noqa: E501
        if address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `address_type` ({0}), must be one of {1}"
                .format(address_type, allowed_values)
            )

        self._address_type = address_type

    @property
    def city(self):
        """Gets the city of this MailingAddress.

        The city name for this address

        :return: The city of this MailingAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MailingAddress.

        The city name for this address

        :param city: The city of this MailingAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this MailingAddress.

        The country code for this address in ISO 3166-1 alpha-2 format              (see: <a href=\"http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm\" onfocus=\"this.blur()\" target=\"_blank\">http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm</a>)

        :return: The country of this MailingAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this MailingAddress.

        The country code for this address in ISO 3166-1 alpha-2 format              (see: <a href=\"http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm\" onfocus=\"this.blur()\" target=\"_blank\">http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm</a>)

        :param country: The country of this MailingAddress.
        :type country: str
        """

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this MailingAddress.

        The postal code for this address

        :return: The postal_code of this MailingAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this MailingAddress.

        The postal code for this address

        :param postal_code: The postal_code of this MailingAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code
