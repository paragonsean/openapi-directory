# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PagedDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inlinecount: str=None, skip: int=None, top: int=None):
        """PagedDataRequest - a model defined in OpenAPI

        :param inlinecount: The inlinecount of this PagedDataRequest.
        :param skip: The skip of this PagedDataRequest.
        :param top: The top of this PagedDataRequest.
        """
        self.openapi_types = {
            'inlinecount': str,
            'skip': int,
            'top': int
        }

        self.attribute_map = {
            'inlinecount': 'inlinecount',
            'skip': 'skip',
            'top': 'top'
        }

        self._inlinecount = inlinecount
        self._skip = skip
        self._top = top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PagedDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PagedDataRequest of this PagedDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inlinecount(self):
        """Gets the inlinecount of this PagedDataRequest.

        Return total number of items for a given filter criteria.

        :return: The inlinecount of this PagedDataRequest.
        :rtype: str
        """
        return self._inlinecount

    @inlinecount.setter
    def inlinecount(self, inlinecount):
        """Sets the inlinecount of this PagedDataRequest.

        Return total number of items for a given filter criteria.

        :param inlinecount: The inlinecount of this PagedDataRequest.
        :type inlinecount: str
        """
        allowed_values = ["None", "AllPages"]  # noqa: E501
        if inlinecount not in allowed_values:
            raise ValueError(
                "Invalid value for `inlinecount` ({0}), must be one of {1}"
                .format(inlinecount, allowed_values)
            )

        self._inlinecount = inlinecount

    @property
    def skip(self):
        """Gets the skip of this PagedDataRequest.

        Amount of items to skip.

        :return: The skip of this PagedDataRequest.
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this PagedDataRequest.

        Amount of items to skip.

        :param skip: The skip of this PagedDataRequest.
        :type skip: int
        """

        self._skip = skip

    @property
    def top(self):
        """Gets the top of this PagedDataRequest.

        Amount of items to select.

        :return: The top of this PagedDataRequest.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this PagedDataRequest.

        Amount of items to select.

        :param top: The top of this PagedDataRequest.
        :type top: int
        """

        self._top = top
