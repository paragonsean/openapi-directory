# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, included_tax: float=None, rate: float=None):
        """ServiceRate - a model defined in OpenAPI

        :param code: The code of this ServiceRate.
        :param included_tax: The included_tax of this ServiceRate.
        :param rate: The rate of this ServiceRate.
        """
        self.openapi_types = {
            'code': str,
            'included_tax': float,
            'rate': float
        }

        self.attribute_map = {
            'code': 'code',
            'included_tax': 'included_tax',
            'rate': 'rate'
        }

        self._code = code
        self._included_tax = included_tax
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceRate of this ServiceRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ServiceRate.

        The code of the service

        :return: The code of this ServiceRate.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ServiceRate.

        The code of the service

        :param code: The code of this ServiceRate.
        :type code: str
        """

        self._code = code

    @property
    def included_tax(self):
        """Gets the included_tax of this ServiceRate.

        The included taxes in the gross rate of the service calculated for all rooms and all persons

        :return: The included_tax of this ServiceRate.
        :rtype: float
        """
        return self._included_tax

    @included_tax.setter
    def included_tax(self, included_tax):
        """Sets the included_tax of this ServiceRate.

        The included taxes in the gross rate of the service calculated for all rooms and all persons

        :param included_tax: The included_tax of this ServiceRate.
        :type included_tax: float
        """

        self._included_tax = included_tax

    @property
    def rate(self):
        """Gets the rate of this ServiceRate.

        The gross rate of the service calculated for all rooms and all persons

        :return: The rate of this ServiceRate.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this ServiceRate.

        The gross rate of the service calculated for all rooms and all persons

        :param rate: The rate of this ServiceRate.
        :type rate: float
        """

        self._rate = rate
