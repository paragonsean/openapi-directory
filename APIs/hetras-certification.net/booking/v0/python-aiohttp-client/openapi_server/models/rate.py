# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_rate import ServiceRate
from openapi_server import util


class Rate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addon_services: List[ServiceRate]=None, excluded_tax: float=None, included_services: List[str]=None, included_tax: float=None, rate: float=None):
        """Rate - a model defined in OpenAPI

        :param addon_services: The addon_services of this Rate.
        :param excluded_tax: The excluded_tax of this Rate.
        :param included_services: The included_services of this Rate.
        :param included_tax: The included_tax of this Rate.
        :param rate: The rate of this Rate.
        """
        self.openapi_types = {
            'addon_services': List[ServiceRate],
            'excluded_tax': float,
            'included_services': List[str],
            'included_tax': float,
            'rate': float
        }

        self.attribute_map = {
            'addon_services': 'addon_services',
            'excluded_tax': 'excluded_tax',
            'included_services': 'included_services',
            'included_tax': 'included_tax',
            'rate': 'rate'
        }

        self._addon_services = addon_services
        self._excluded_tax = excluded_tax
        self._included_services = included_services
        self._included_tax = included_tax
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rate of this Rate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addon_services(self):
        """Gets the addon_services of this Rate.

        List of addon services with additional price information.

        :return: The addon_services of this Rate.
        :rtype: List[ServiceRate]
        """
        return self._addon_services

    @addon_services.setter
    def addon_services(self, addon_services):
        """Sets the addon_services of this Rate.

        List of addon services with additional price information.

        :param addon_services: The addon_services of this Rate.
        :type addon_services: List[ServiceRate]
        """

        self._addon_services = addon_services

    @property
    def excluded_tax(self):
        """Gets the excluded_tax of this Rate.

        The amount of extra taxes also calculated for all rooms and all persons per room.

        :return: The excluded_tax of this Rate.
        :rtype: float
        """
        return self._excluded_tax

    @excluded_tax.setter
    def excluded_tax(self, excluded_tax):
        """Sets the excluded_tax of this Rate.

        The amount of extra taxes also calculated for all rooms and all persons per room.

        :param excluded_tax: The excluded_tax of this Rate.
        :type excluded_tax: float
        """

        self._excluded_tax = excluded_tax

    @property
    def included_services(self):
        """Gets the included_services of this Rate.

        List of codes for all services already included in the gross rate

        :return: The included_services of this Rate.
        :rtype: List[str]
        """
        return self._included_services

    @included_services.setter
    def included_services(self, included_services):
        """Sets the included_services of this Rate.

        List of codes for all services already included in the gross rate

        :param included_services: The included_services of this Rate.
        :type included_services: List[str]
        """

        self._included_services = included_services

    @property
    def included_tax(self):
        """Gets the included_tax of this Rate.

        The amount of taxes already included in the gross nightly rate also calculated for all rooms and              all persons per room.

        :return: The included_tax of this Rate.
        :rtype: float
        """
        return self._included_tax

    @included_tax.setter
    def included_tax(self, included_tax):
        """Sets the included_tax of this Rate.

        The amount of taxes already included in the gross nightly rate also calculated for all rooms and              all persons per room.

        :param included_tax: The included_tax of this Rate.
        :type included_tax: float
        """

        self._included_tax = included_tax

    @property
    def rate(self):
        """Gets the rate of this Rate.

        The gross room rate. It is the price calculated for all rooms and all persons per room.

        :return: The rate of this Rate.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Rate.

        The gross room rate. It is the price calculated for all rooms and all persons per room.

        :param rate: The rate of this Rate.
        :type rate: float
        """

        self._rate = rate
