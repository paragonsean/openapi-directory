# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.token import Token
from openapi_server import util


class Guarantee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guarantee_type: str=None, token: Token=None):
        """Guarantee - a model defined in OpenAPI

        :param guarantee_type: The guarantee_type of this Guarantee.
        :param token: The token of this Guarantee.
        """
        self.openapi_types = {
            'guarantee_type': str,
            'token': Token
        }

        self.attribute_map = {
            'guarantee_type': 'guarantee_type',
            'token': 'token'
        }

        self._guarantee_type = guarantee_type
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Guarantee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Guarantee of this Guarantee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guarantee_type(self):
        """Gets the guarantee_type of this Guarantee.

        One of the accepted guarantee types from the offer you selected out of the rates response

        :return: The guarantee_type of this Guarantee.
        :rtype: str
        """
        return self._guarantee_type

    @guarantee_type.setter
    def guarantee_type(self, guarantee_type):
        """Sets the guarantee_type of this Guarantee.

        One of the accepted guarantee types from the offer you selected out of the rates response

        :param guarantee_type: The guarantee_type of this Guarantee.
        :type guarantee_type: str
        """
        allowed_values = ["PM4Hold", "PM6Hold", "GuaranteeToCreditCard", "GuaranteeToGuestAccount", "GuaranteeByTravelAgent", "GuaranteeByCompany", "Deposit", "Voucher", "Prepayment", "NonGuaranteed", "Tentative", "Waitlist"]  # noqa: E501
        if guarantee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `guarantee_type` ({0}), must be one of {1}"
                .format(guarantee_type, allowed_values)
            )

        self._guarantee_type = guarantee_type

    @property
    def token(self):
        """Gets the token of this Guarantee.


        :return: The token of this Guarantee.
        :rtype: Token
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Guarantee.


        :param token: The token of this Guarantee.
        :type token: Token
        """

        self._token = token
