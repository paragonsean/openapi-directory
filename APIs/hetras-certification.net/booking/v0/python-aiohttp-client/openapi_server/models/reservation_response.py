# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.block_info import BlockInfo
from openapi_server.models.cancellation_policy import CancellationPolicy
from openapi_server.models.company import Company
from openapi_server.models.contact_response import ContactResponse
from openapi_server.models.customer_response import CustomerResponse
from openapi_server.models.daily_rate import DailyRate
from openapi_server.models.embedded_room import EmbeddedRoom
from openapi_server.models.general_policy import GeneralPolicy
from openapi_server.models.guarantee_response import GuaranteeResponse
from openapi_server.models.no_show_policy import NoShowPolicy
from openapi_server.models.rate import Rate
from openapi_server.models.rate_plan import RatePlan
from openapi_server.models.service import Service
from openapi_server import util


class ReservationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, warnings: List[str]=None, addon_services: List[str]=None, adults: int=None, arrival_date: datetime=None, balance: float=None, block: BlockInfo=None, cancellation_id: str=None, cancellation_policies: List[CancellationPolicy]=None, channel_code: str=None, checkin_time: datetime=None, checkout_time: datetime=None, comment: str=None, company: Company=None, confirmation_id: str=None, contact: ContactResponse=None, created: datetime=None, currency: str=None, departure_date: datetime=None, external_id: str=None, general_policies: List[GeneralPolicy]=None, guarantee: GuaranteeResponse=None, guests: List[CustomerResponse]=None, hotel_id: int=None, labels: List[str]=None, market_code: str=None, noshow_policy: NoShowPolicy=None, payment_method: str=None, rate_plan: RatePlan=None, reservation_number: int=None, reservation_status: str=None, room: EmbeddedRoom=None, room_rates: List[DailyRate]=None, rooms: int=None, services: List[Service]=None, subchannel_code: str=None, total_stay: Rate=None, updated: datetime=None):
        """ReservationResponse - a model defined in OpenAPI

        :param warnings: The warnings of this ReservationResponse.
        :param addon_services: The addon_services of this ReservationResponse.
        :param adults: The adults of this ReservationResponse.
        :param arrival_date: The arrival_date of this ReservationResponse.
        :param balance: The balance of this ReservationResponse.
        :param block: The block of this ReservationResponse.
        :param cancellation_id: The cancellation_id of this ReservationResponse.
        :param cancellation_policies: The cancellation_policies of this ReservationResponse.
        :param channel_code: The channel_code of this ReservationResponse.
        :param checkin_time: The checkin_time of this ReservationResponse.
        :param checkout_time: The checkout_time of this ReservationResponse.
        :param comment: The comment of this ReservationResponse.
        :param company: The company of this ReservationResponse.
        :param confirmation_id: The confirmation_id of this ReservationResponse.
        :param contact: The contact of this ReservationResponse.
        :param created: The created of this ReservationResponse.
        :param currency: The currency of this ReservationResponse.
        :param departure_date: The departure_date of this ReservationResponse.
        :param external_id: The external_id of this ReservationResponse.
        :param general_policies: The general_policies of this ReservationResponse.
        :param guarantee: The guarantee of this ReservationResponse.
        :param guests: The guests of this ReservationResponse.
        :param hotel_id: The hotel_id of this ReservationResponse.
        :param labels: The labels of this ReservationResponse.
        :param market_code: The market_code of this ReservationResponse.
        :param noshow_policy: The noshow_policy of this ReservationResponse.
        :param payment_method: The payment_method of this ReservationResponse.
        :param rate_plan: The rate_plan of this ReservationResponse.
        :param reservation_number: The reservation_number of this ReservationResponse.
        :param reservation_status: The reservation_status of this ReservationResponse.
        :param room: The room of this ReservationResponse.
        :param room_rates: The room_rates of this ReservationResponse.
        :param rooms: The rooms of this ReservationResponse.
        :param services: The services of this ReservationResponse.
        :param subchannel_code: The subchannel_code of this ReservationResponse.
        :param total_stay: The total_stay of this ReservationResponse.
        :param updated: The updated of this ReservationResponse.
        """
        self.openapi_types = {
            'warnings': List[str],
            'addon_services': List[str],
            'adults': int,
            'arrival_date': datetime,
            'balance': float,
            'block': BlockInfo,
            'cancellation_id': str,
            'cancellation_policies': List[CancellationPolicy],
            'channel_code': str,
            'checkin_time': datetime,
            'checkout_time': datetime,
            'comment': str,
            'company': Company,
            'confirmation_id': str,
            'contact': ContactResponse,
            'created': datetime,
            'currency': str,
            'departure_date': datetime,
            'external_id': str,
            'general_policies': List[GeneralPolicy],
            'guarantee': GuaranteeResponse,
            'guests': List[CustomerResponse],
            'hotel_id': int,
            'labels': List[str],
            'market_code': str,
            'noshow_policy': NoShowPolicy,
            'payment_method': str,
            'rate_plan': RatePlan,
            'reservation_number': int,
            'reservation_status': str,
            'room': EmbeddedRoom,
            'room_rates': List[DailyRate],
            'rooms': int,
            'services': List[Service],
            'subchannel_code': str,
            'total_stay': Rate,
            'updated': datetime
        }

        self.attribute_map = {
            'warnings': '_warnings',
            'addon_services': 'addon_services',
            'adults': 'adults',
            'arrival_date': 'arrival_date',
            'balance': 'balance',
            'block': 'block',
            'cancellation_id': 'cancellation_id',
            'cancellation_policies': 'cancellation_policies',
            'channel_code': 'channel_code',
            'checkin_time': 'checkin_time',
            'checkout_time': 'checkout_time',
            'comment': 'comment',
            'company': 'company',
            'confirmation_id': 'confirmation_id',
            'contact': 'contact',
            'created': 'created',
            'currency': 'currency',
            'departure_date': 'departure_date',
            'external_id': 'external_id',
            'general_policies': 'general_policies',
            'guarantee': 'guarantee',
            'guests': 'guests',
            'hotel_id': 'hotel_id',
            'labels': 'labels',
            'market_code': 'market_code',
            'noshow_policy': 'noshow_policy',
            'payment_method': 'payment_method',
            'rate_plan': 'rate_plan',
            'reservation_number': 'reservation_number',
            'reservation_status': 'reservation_status',
            'room': 'room',
            'room_rates': 'room_rates',
            'rooms': 'rooms',
            'services': 'services',
            'subchannel_code': 'subchannel_code',
            'total_stay': 'total_stay',
            'updated': 'updated'
        }

        self._warnings = warnings
        self._addon_services = addon_services
        self._adults = adults
        self._arrival_date = arrival_date
        self._balance = balance
        self._block = block
        self._cancellation_id = cancellation_id
        self._cancellation_policies = cancellation_policies
        self._channel_code = channel_code
        self._checkin_time = checkin_time
        self._checkout_time = checkout_time
        self._comment = comment
        self._company = company
        self._confirmation_id = confirmation_id
        self._contact = contact
        self._created = created
        self._currency = currency
        self._departure_date = departure_date
        self._external_id = external_id
        self._general_policies = general_policies
        self._guarantee = guarantee
        self._guests = guests
        self._hotel_id = hotel_id
        self._labels = labels
        self._market_code = market_code
        self._noshow_policy = noshow_policy
        self._payment_method = payment_method
        self._rate_plan = rate_plan
        self._reservation_number = reservation_number
        self._reservation_status = reservation_status
        self._room = room
        self._room_rates = room_rates
        self._rooms = rooms
        self._services = services
        self._subchannel_code = subchannel_code
        self._total_stay = total_stay
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReservationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReservationResponse of this ReservationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def warnings(self):
        """Gets the warnings of this ReservationResponse.

        Warnings that came up when your request was processed. Your request will still be processed successfull when              you see such warnings in your response

        :return: The warnings of this ReservationResponse.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ReservationResponse.

        Warnings that came up when your request was processed. Your request will still be processed successfull when              you see such warnings in your response

        :param warnings: The warnings of this ReservationResponse.
        :type warnings: List[str]
        """

        self._warnings = warnings

    @property
    def addon_services(self):
        """Gets the addon_services of this ReservationResponse.

        A list of addon service codes that are currently booked on the reservation. Services which are charged              once per stay are only visible before and on the day they are booked for.

        :return: The addon_services of this ReservationResponse.
        :rtype: List[str]
        """
        return self._addon_services

    @addon_services.setter
    def addon_services(self, addon_services):
        """Sets the addon_services of this ReservationResponse.

        A list of addon service codes that are currently booked on the reservation. Services which are charged              once per stay are only visible before and on the day they are booked for.

        :param addon_services: The addon_services of this ReservationResponse.
        :type addon_services: List[str]
        """

        self._addon_services = addon_services

    @property
    def adults(self):
        """Gets the adults of this ReservationResponse.

        The number of adults per room

        :return: The adults of this ReservationResponse.
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this ReservationResponse.

        The number of adults per room

        :param adults: The adults of this ReservationResponse.
        :type adults: int
        """

        self._adults = adults

    @property
    def arrival_date(self):
        """Gets the arrival_date of this ReservationResponse.

        The arrival date of the guests

        :return: The arrival_date of this ReservationResponse.
        :rtype: datetime
        """
        return self._arrival_date

    @arrival_date.setter
    def arrival_date(self, arrival_date):
        """Sets the arrival_date of this ReservationResponse.

        The arrival date of the guests

        :param arrival_date: The arrival_date of this ReservationResponse.
        :type arrival_date: datetime
        """

        self._arrival_date = arrival_date

    @property
    def balance(self):
        """Gets the balance of this ReservationResponse.

        The balance for all folios of this reservartion. It is calculated by all already charged room and service              rates plus manual charges or charges from other systems like POS minus all payments. A negative balance              indicates the reservation is overpaid, a positive balance that the guest owes the hotel money

        :return: The balance of this ReservationResponse.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this ReservationResponse.

        The balance for all folios of this reservartion. It is calculated by all already charged room and service              rates plus manual charges or charges from other systems like POS minus all payments. A negative balance              indicates the reservation is overpaid, a positive balance that the guest owes the hotel money

        :param balance: The balance of this ReservationResponse.
        :type balance: float
        """

        self._balance = balance

    @property
    def block(self):
        """Gets the block of this ReservationResponse.


        :return: The block of this ReservationResponse.
        :rtype: BlockInfo
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this ReservationResponse.


        :param block: The block of this ReservationResponse.
        :type block: BlockInfo
        """

        self._block = block

    @property
    def cancellation_id(self):
        """Gets the cancellation_id of this ReservationResponse.

        Given the reservation was cancelled, this field contains the cancellation id

        :return: The cancellation_id of this ReservationResponse.
        :rtype: str
        """
        return self._cancellation_id

    @cancellation_id.setter
    def cancellation_id(self, cancellation_id):
        """Sets the cancellation_id of this ReservationResponse.

        Given the reservation was cancelled, this field contains the cancellation id

        :param cancellation_id: The cancellation_id of this ReservationResponse.
        :type cancellation_id: str
        """

        self._cancellation_id = cancellation_id

    @property
    def cancellation_policies(self):
        """Gets the cancellation_policies of this ReservationResponse.

        The cancellation policies that were applicable on the date the booking was done

        :return: The cancellation_policies of this ReservationResponse.
        :rtype: List[CancellationPolicy]
        """
        return self._cancellation_policies

    @cancellation_policies.setter
    def cancellation_policies(self, cancellation_policies):
        """Sets the cancellation_policies of this ReservationResponse.

        The cancellation policies that were applicable on the date the booking was done

        :param cancellation_policies: The cancellation_policies of this ReservationResponse.
        :type cancellation_policies: List[CancellationPolicy]
        """

        self._cancellation_policies = cancellation_policies

    @property
    def channel_code(self):
        """Gets the channel_code of this ReservationResponse.

        The code of the channel that was used when the booking has been created. It is also known as source.               Possible values can be OTA, GDS or DIRECT, but it is configurable per hotel

        :return: The channel_code of this ReservationResponse.
        :rtype: str
        """
        return self._channel_code

    @channel_code.setter
    def channel_code(self, channel_code):
        """Sets the channel_code of this ReservationResponse.

        The code of the channel that was used when the booking has been created. It is also known as source.               Possible values can be OTA, GDS or DIRECT, but it is configurable per hotel

        :param channel_code: The channel_code of this ReservationResponse.
        :type channel_code: str
        """

        self._channel_code = channel_code

    @property
    def checkin_time(self):
        """Gets the checkin_time of this ReservationResponse.

        The real checkin time of the guests. It will be set after the checkin has been performed

        :return: The checkin_time of this ReservationResponse.
        :rtype: datetime
        """
        return self._checkin_time

    @checkin_time.setter
    def checkin_time(self, checkin_time):
        """Sets the checkin_time of this ReservationResponse.

        The real checkin time of the guests. It will be set after the checkin has been performed

        :param checkin_time: The checkin_time of this ReservationResponse.
        :type checkin_time: datetime
        """

        self._checkin_time = checkin_time

    @property
    def checkout_time(self):
        """Gets the checkout_time of this ReservationResponse.

        The real checkout time of the guests. It will be set after the checkout has been performed

        :return: The checkout_time of this ReservationResponse.
        :rtype: datetime
        """
        return self._checkout_time

    @checkout_time.setter
    def checkout_time(self, checkout_time):
        """Sets the checkout_time of this ReservationResponse.

        The real checkout time of the guests. It will be set after the checkout has been performed

        :param checkout_time: The checkout_time of this ReservationResponse.
        :type checkout_time: datetime
        """

        self._checkout_time = checkout_time

    @property
    def comment(self):
        """Gets the comment of this ReservationResponse.

        The comment for this reservation

        :return: The comment of this ReservationResponse.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ReservationResponse.

        The comment for this reservation

        :param comment: The comment of this ReservationResponse.
        :type comment: str
        """

        self._comment = comment

    @property
    def company(self):
        """Gets the company of this ReservationResponse.


        :return: The company of this ReservationResponse.
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ReservationResponse.


        :param company: The company of this ReservationResponse.
        :type company: Company
        """

        self._company = company

    @property
    def confirmation_id(self):
        """Gets the confirmation_id of this ReservationResponse.

        The confirmation id for the booking which the guest can use to check in on the kiosk, add the              booking to the mobile app etc. It is used as identifier for all reservations done with the same              booking request

        :return: The confirmation_id of this ReservationResponse.
        :rtype: str
        """
        return self._confirmation_id

    @confirmation_id.setter
    def confirmation_id(self, confirmation_id):
        """Sets the confirmation_id of this ReservationResponse.

        The confirmation id for the booking which the guest can use to check in on the kiosk, add the              booking to the mobile app etc. It is used as identifier for all reservations done with the same              booking request

        :param confirmation_id: The confirmation_id of this ReservationResponse.
        :type confirmation_id: str
        """

        self._confirmation_id = confirmation_id

    @property
    def contact(self):
        """Gets the contact of this ReservationResponse.


        :return: The contact of this ReservationResponse.
        :rtype: ContactResponse
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ReservationResponse.


        :param contact: The contact of this ReservationResponse.
        :type contact: ContactResponse
        """

        self._contact = contact

    @property
    def created(self):
        """Gets the created of this ReservationResponse.

        Timestamp the reservation was created

        :return: The created of this ReservationResponse.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ReservationResponse.

        Timestamp the reservation was created

        :param created: The created of this ReservationResponse.
        :type created: datetime
        """

        self._created = created

    @property
    def currency(self):
        """Gets the currency of this ReservationResponse.

        The currency all amounts of this reservation will be shown in

        :return: The currency of this ReservationResponse.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ReservationResponse.

        The currency all amounts of this reservation will be shown in

        :param currency: The currency of this ReservationResponse.
        :type currency: str
        """

        self._currency = currency

    @property
    def departure_date(self):
        """Gets the departure_date of this ReservationResponse.

        The departure date of the guests

        :return: The departure_date of this ReservationResponse.
        :rtype: datetime
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this ReservationResponse.

        The departure date of the guests

        :param departure_date: The departure_date of this ReservationResponse.
        :type departure_date: datetime
        """

        self._departure_date = departure_date

    @property
    def external_id(self):
        """Gets the external_id of this ReservationResponse.

        The external id for this reservation is the unique identifier from the system that created the booking in hetras. It could be the id of an              OTA like Expedia or booking.com or one of the GDS systems like Amadeus or Galileo

        :return: The external_id of this ReservationResponse.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ReservationResponse.

        The external id for this reservation is the unique identifier from the system that created the booking in hetras. It could be the id of an              OTA like Expedia or booking.com or one of the GDS systems like Amadeus or Galileo

        :param external_id: The external_id of this ReservationResponse.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def general_policies(self):
        """Gets the general_policies of this ReservationResponse.

        The general policies that were applicable on the date the booking was done

        :return: The general_policies of this ReservationResponse.
        :rtype: List[GeneralPolicy]
        """
        return self._general_policies

    @general_policies.setter
    def general_policies(self, general_policies):
        """Sets the general_policies of this ReservationResponse.

        The general policies that were applicable on the date the booking was done

        :param general_policies: The general_policies of this ReservationResponse.
        :type general_policies: List[GeneralPolicy]
        """

        self._general_policies = general_policies

    @property
    def guarantee(self):
        """Gets the guarantee of this ReservationResponse.


        :return: The guarantee of this ReservationResponse.
        :rtype: GuaranteeResponse
        """
        return self._guarantee

    @guarantee.setter
    def guarantee(self, guarantee):
        """Sets the guarantee of this ReservationResponse.


        :param guarantee: The guarantee of this ReservationResponse.
        :type guarantee: GuaranteeResponse
        """

        self._guarantee = guarantee

    @property
    def guests(self):
        """Gets the guests of this ReservationResponse.

        A list of guest details for this reservation

        :return: The guests of this ReservationResponse.
        :rtype: List[CustomerResponse]
        """
        return self._guests

    @guests.setter
    def guests(self, guests):
        """Sets the guests of this ReservationResponse.

        A list of guest details for this reservation

        :param guests: The guests of this ReservationResponse.
        :type guests: List[CustomerResponse]
        """

        self._guests = guests

    @property
    def hotel_id(self):
        """Gets the hotel_id of this ReservationResponse.

        The id of the hotel this reservation is valid for

        :return: The hotel_id of this ReservationResponse.
        :rtype: int
        """
        return self._hotel_id

    @hotel_id.setter
    def hotel_id(self, hotel_id):
        """Sets the hotel_id of this ReservationResponse.

        The id of the hotel this reservation is valid for

        :param hotel_id: The hotel_id of this ReservationResponse.
        :type hotel_id: int
        """

        self._hotel_id = hotel_id

    @property
    def labels(self):
        """Gets the labels of this ReservationResponse.

        A list of labels that are attached to the reservation.

        :return: The labels of this ReservationResponse.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ReservationResponse.

        A list of labels that are attached to the reservation.

        :param labels: The labels of this ReservationResponse.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def market_code(self):
        """Gets the market_code of this ReservationResponse.

        The code of the market segment the rate plan for this reservation is linked to

        :return: The market_code of this ReservationResponse.
        :rtype: str
        """
        return self._market_code

    @market_code.setter
    def market_code(self, market_code):
        """Sets the market_code of this ReservationResponse.

        The code of the market segment the rate plan for this reservation is linked to

        :param market_code: The market_code of this ReservationResponse.
        :type market_code: str
        """

        self._market_code = market_code

    @property
    def noshow_policy(self):
        """Gets the noshow_policy of this ReservationResponse.


        :return: The noshow_policy of this ReservationResponse.
        :rtype: NoShowPolicy
        """
        return self._noshow_policy

    @noshow_policy.setter
    def noshow_policy(self, noshow_policy):
        """Sets the noshow_policy of this ReservationResponse.


        :param noshow_policy: The noshow_policy of this ReservationResponse.
        :type noshow_policy: NoShowPolicy
        """

        self._noshow_policy = noshow_policy

    @property
    def payment_method(self):
        """Gets the payment_method of this ReservationResponse.

        The payment method for this reservation

        :return: The payment_method of this ReservationResponse.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ReservationResponse.

        The payment method for this reservation

        :param payment_method: The payment_method of this ReservationResponse.
        :type payment_method: str
        """
        allowed_values = ["None", "Cash", "CreditCard", "WireTransfer", "ChargeToCompany", "Check", "Voucher", "DebitCard", "Token", "Miscellaneous", "DigitalPayment"]  # noqa: E501
        if payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def rate_plan(self):
        """Gets the rate_plan of this ReservationResponse.


        :return: The rate_plan of this ReservationResponse.
        :rtype: RatePlan
        """
        return self._rate_plan

    @rate_plan.setter
    def rate_plan(self, rate_plan):
        """Sets the rate_plan of this ReservationResponse.


        :param rate_plan: The rate_plan of this ReservationResponse.
        :type rate_plan: RatePlan
        """

        self._rate_plan = rate_plan

    @property
    def reservation_number(self):
        """Gets the reservation_number of this ReservationResponse.

        The reservation number of the reservation

        :return: The reservation_number of this ReservationResponse.
        :rtype: int
        """
        return self._reservation_number

    @reservation_number.setter
    def reservation_number(self, reservation_number):
        """Sets the reservation_number of this ReservationResponse.

        The reservation number of the reservation

        :param reservation_number: The reservation_number of this ReservationResponse.
        :type reservation_number: int
        """

        self._reservation_number = reservation_number

    @property
    def reservation_status(self):
        """Gets the reservation_status of this ReservationResponse.

        The current status of this reservation

        :return: The reservation_status of this ReservationResponse.
        :rtype: str
        """
        return self._reservation_status

    @reservation_status.setter
    def reservation_status(self, reservation_status):
        """Sets the reservation_status of this ReservationResponse.

        The current status of this reservation

        :param reservation_status: The reservation_status of this ReservationResponse.
        :type reservation_status: str
        """
        allowed_values = ["Tentative", "Waitlisted", "OnRequest", "NonGuaranteed", "Guaranteed", "InHouse", "CheckedOut", "NoShow", "Denied", "Cancelled", "Released", "Walked", "Expired", "WalkIn", "Registered"]  # noqa: E501
        if reservation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `reservation_status` ({0}), must be one of {1}"
                .format(reservation_status, allowed_values)
            )

        self._reservation_status = reservation_status

    @property
    def room(self):
        """Gets the room of this ReservationResponse.


        :return: The room of this ReservationResponse.
        :rtype: EmbeddedRoom
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this ReservationResponse.


        :param room: The room of this ReservationResponse.
        :type room: EmbeddedRoom
        """

        self._room = room

    @property
    def room_rates(self):
        """Gets the room_rates of this ReservationResponse.

        The breakdown for all daily room rates and service charges for this reservation

        :return: The room_rates of this ReservationResponse.
        :rtype: List[DailyRate]
        """
        return self._room_rates

    @room_rates.setter
    def room_rates(self, room_rates):
        """Sets the room_rates of this ReservationResponse.

        The breakdown for all daily room rates and service charges for this reservation

        :param room_rates: The room_rates of this ReservationResponse.
        :type room_rates: List[DailyRate]
        """

        self._room_rates = room_rates

    @property
    def rooms(self):
        """Gets the rooms of this ReservationResponse.

        The number of rooms this reservation is valid for. After a multi-room booking is done there will be               one reservation in hetras for this booking for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests

        :return: The rooms of this ReservationResponse.
        :rtype: int
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this ReservationResponse.

        The number of rooms this reservation is valid for. After a multi-room booking is done there will be               one reservation in hetras for this booking for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests

        :param rooms: The rooms of this ReservationResponse.
        :type rooms: int
        """

        self._rooms = rooms

    @property
    def services(self):
        """Gets the services of this ReservationResponse.

        A list of details for all services included and addon service booked on this reservation

        :return: The services of this ReservationResponse.
        :rtype: List[Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this ReservationResponse.

        A list of details for all services included and addon service booked on this reservation

        :param services: The services of this ReservationResponse.
        :type services: List[Service]
        """

        self._services = services

    @property
    def subchannel_code(self):
        """Gets the subchannel_code of this ReservationResponse.

        The code of the subchannel that was used when the booking has been created. Possible values can be               BOOKING, EXPEDIA or WALKIN, but it is configurable per hotel

        :return: The subchannel_code of this ReservationResponse.
        :rtype: str
        """
        return self._subchannel_code

    @subchannel_code.setter
    def subchannel_code(self, subchannel_code):
        """Sets the subchannel_code of this ReservationResponse.

        The code of the subchannel that was used when the booking has been created. Possible values can be               BOOKING, EXPEDIA or WALKIN, but it is configurable per hotel

        :param subchannel_code: The subchannel_code of this ReservationResponse.
        :type subchannel_code: str
        """

        self._subchannel_code = subchannel_code

    @property
    def total_stay(self):
        """Gets the total_stay of this ReservationResponse.


        :return: The total_stay of this ReservationResponse.
        :rtype: Rate
        """
        return self._total_stay

    @total_stay.setter
    def total_stay(self, total_stay):
        """Sets the total_stay of this ReservationResponse.


        :param total_stay: The total_stay of this ReservationResponse.
        :type total_stay: Rate
        """

        self._total_stay = total_stay

    @property
    def updated(self):
        """Gets the updated of this ReservationResponse.

        Timestamp of when the reservation was changed the last time

        :return: The updated of this ReservationResponse.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ReservationResponse.

        Timestamp of when the reservation was changed the last time

        :param updated: The updated of this ReservationResponse.
        :type updated: datetime
        """

        self._updated = updated
