# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_expiry_date: datetime=None, authorization_reference: str=None, authorization_status: str=None, authorized_amount: float=None, merchant_reference: str=None, shopper_email: str=None, shopper_reference: str=None, token_id: str=None):
        """Token - a model defined in OpenAPI

        :param authorization_expiry_date: The authorization_expiry_date of this Token.
        :param authorization_reference: The authorization_reference of this Token.
        :param authorization_status: The authorization_status of this Token.
        :param authorized_amount: The authorized_amount of this Token.
        :param merchant_reference: The merchant_reference of this Token.
        :param shopper_email: The shopper_email of this Token.
        :param shopper_reference: The shopper_reference of this Token.
        :param token_id: The token_id of this Token.
        """
        self.openapi_types = {
            'authorization_expiry_date': datetime,
            'authorization_reference': str,
            'authorization_status': str,
            'authorized_amount': float,
            'merchant_reference': str,
            'shopper_email': str,
            'shopper_reference': str,
            'token_id': str
        }

        self.attribute_map = {
            'authorization_expiry_date': 'authorization_expiry_date',
            'authorization_reference': 'authorization_reference',
            'authorization_status': 'authorization_status',
            'authorized_amount': 'authorized_amount',
            'merchant_reference': 'merchant_reference',
            'shopper_email': 'shopper_email',
            'shopper_reference': 'shopper_reference',
            'token_id': 'token_id'
        }

        self._authorization_expiry_date = authorization_expiry_date
        self._authorization_reference = authorization_reference
        self._authorization_status = authorization_status
        self._authorized_amount = authorized_amount
        self._merchant_reference = merchant_reference
        self._shopper_email = shopper_email
        self._shopper_reference = shopper_reference
        self._token_id = token_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Token of this Token.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_expiry_date(self):
        """Gets the authorization_expiry_date of this Token.

        The authorization expiry date you got back from the payment service provider

        :return: The authorization_expiry_date of this Token.
        :rtype: datetime
        """
        return self._authorization_expiry_date

    @authorization_expiry_date.setter
    def authorization_expiry_date(self, authorization_expiry_date):
        """Sets the authorization_expiry_date of this Token.

        The authorization expiry date you got back from the payment service provider

        :param authorization_expiry_date: The authorization_expiry_date of this Token.
        :type authorization_expiry_date: datetime
        """

        self._authorization_expiry_date = authorization_expiry_date

    @property
    def authorization_reference(self):
        """Gets the authorization_reference of this Token.

        The authorization reference. This value is specific for different payment service providers. There will be              a page on the developer portal explaining the pattern on how to fill this value for the payment service              provider hetras is integrated with

        :return: The authorization_reference of this Token.
        :rtype: str
        """
        return self._authorization_reference

    @authorization_reference.setter
    def authorization_reference(self, authorization_reference):
        """Sets the authorization_reference of this Token.

        The authorization reference. This value is specific for different payment service providers. There will be              a page on the developer portal explaining the pattern on how to fill this value for the payment service              provider hetras is integrated with

        :param authorization_reference: The authorization_reference of this Token.
        :type authorization_reference: str
        """

        self._authorization_reference = authorization_reference

    @property
    def authorization_status(self):
        """Gets the authorization_status of this Token.

        The authorization status you got back from the payment service provider

        :return: The authorization_status of this Token.
        :rtype: str
        """
        return self._authorization_status

    @authorization_status.setter
    def authorization_status(self, authorization_status):
        """Sets the authorization_status of this Token.

        The authorization status you got back from the payment service provider

        :param authorization_status: The authorization_status of this Token.
        :type authorization_status: str
        """
        allowed_values = ["Authorized", "Refused", "Error", "Canceled", "Consumed", "AuthorizedWithZeroAmount"]  # noqa: E501
        if authorization_status not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_status` ({0}), must be one of {1}"
                .format(authorization_status, allowed_values)
            )

        self._authorization_status = authorization_status

    @property
    def authorized_amount(self):
        """Gets the authorized_amount of this Token.

        The authorized amount

        :return: The authorized_amount of this Token.
        :rtype: float
        """
        return self._authorized_amount

    @authorized_amount.setter
    def authorized_amount(self, authorized_amount):
        """Sets the authorized_amount of this Token.

        The authorized amount

        :param authorized_amount: The authorized_amount of this Token.
        :type authorized_amount: float
        """

        self._authorized_amount = authorized_amount

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this Token.

        The merchant reference you used when requesting the token from the payment service provider

        :return: The merchant_reference of this Token.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this Token.

        The merchant reference you used when requesting the token from the payment service provider

        :param merchant_reference: The merchant_reference of this Token.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def shopper_email(self):
        """Gets the shopper_email of this Token.

        The shopper email you used when requesting the token from the payment service provider

        :return: The shopper_email of this Token.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this Token.

        The shopper email you used when requesting the token from the payment service provider

        :param shopper_email: The shopper_email of this Token.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this Token.

        The shopper reference you used when requesting the token from the payment service provider. It can              be the same as the merchant reference

        :return: The shopper_reference of this Token.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this Token.

        The shopper reference you used when requesting the token from the payment service provider. It can              be the same as the merchant reference

        :param shopper_reference: The shopper_reference of this Token.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference

    @property
    def token_id(self):
        """Gets the token_id of this Token.

        The token id you get from the payment service provider

        :return: The token_id of this Token.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this Token.

        The token id you get from the payment service provider

        :param token_id: The token_id of this Token.
        :type token_id: str
        """

        self._token_id = token_id
