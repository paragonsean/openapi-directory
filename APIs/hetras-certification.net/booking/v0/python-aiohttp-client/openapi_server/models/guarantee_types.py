# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GuaranteeTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted: List[str]=None, code: str=None):
        """GuaranteeTypes - a model defined in OpenAPI

        :param accepted: The accepted of this GuaranteeTypes.
        :param code: The code of this GuaranteeTypes.
        """
        self.openapi_types = {
            'accepted': List[str],
            'code': str
        }

        self.attribute_map = {
            'accepted': 'accepted',
            'code': 'code'
        }

        self._accepted = accepted
        self._code = code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuaranteeTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuaranteeTypes of this GuaranteeTypes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted(self):
        """Gets the accepted of this GuaranteeTypes.


        :return: The accepted of this GuaranteeTypes.
        :rtype: List[str]
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted):
        """Sets the accepted of this GuaranteeTypes.


        :param accepted: The accepted of this GuaranteeTypes.
        :type accepted: List[str]
        """
        allowed_values = ["PM4Hold", "PM6Hold", "GuaranteeByCompany", "GuaranteeByTravelAgent", "GuaranteeToGuestAccount", "GuaranteeToCreditCard", "Deposit", "Prepayment", "NonGuaranteed"]  # noqa: E501
        if not set(accepted).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `accepted` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(accepted) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._accepted = accepted

    @property
    def code(self):
        """Gets the code of this GuaranteeTypes.


        :return: The code of this GuaranteeTypes.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GuaranteeTypes.


        :param code: The code of this GuaranteeTypes.
        :type code: str
        """

        self._code = code
