# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoomOfferDailyRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_day: datetime=None, excluded_tax: float=None, included_tax: float=None, rate: float=None):
        """RoomOfferDailyRate - a model defined in OpenAPI

        :param business_day: The business_day of this RoomOfferDailyRate.
        :param excluded_tax: The excluded_tax of this RoomOfferDailyRate.
        :param included_tax: The included_tax of this RoomOfferDailyRate.
        :param rate: The rate of this RoomOfferDailyRate.
        """
        self.openapi_types = {
            'business_day': datetime,
            'excluded_tax': float,
            'included_tax': float,
            'rate': float
        }

        self.attribute_map = {
            'business_day': 'business_day',
            'excluded_tax': 'excluded_tax',
            'included_tax': 'included_tax',
            'rate': 'rate'
        }

        self._business_day = business_day
        self._excluded_tax = excluded_tax
        self._included_tax = included_tax
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoomOfferDailyRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoomOfferDailyRate of this RoomOfferDailyRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_day(self):
        """Gets the business_day of this RoomOfferDailyRate.

        The business day the prize for the daily rate and all included services will be posted to the folio of the reservation

        :return: The business_day of this RoomOfferDailyRate.
        :rtype: datetime
        """
        return self._business_day

    @business_day.setter
    def business_day(self, business_day):
        """Sets the business_day of this RoomOfferDailyRate.

        The business day the prize for the daily rate and all included services will be posted to the folio of the reservation

        :param business_day: The business_day of this RoomOfferDailyRate.
        :type business_day: datetime
        """

        self._business_day = business_day

    @property
    def excluded_tax(self):
        """Gets the excluded_tax of this RoomOfferDailyRate.

        The amount of taxes that are not included in the gross rate of the room offer and will be charged separately for              that business day. It is also calculated for all rooms and all persons per room

        :return: The excluded_tax of this RoomOfferDailyRate.
        :rtype: float
        """
        return self._excluded_tax

    @excluded_tax.setter
    def excluded_tax(self, excluded_tax):
        """Sets the excluded_tax of this RoomOfferDailyRate.

        The amount of taxes that are not included in the gross rate of the room offer and will be charged separately for              that business day. It is also calculated for all rooms and all persons per room

        :param excluded_tax: The excluded_tax of this RoomOfferDailyRate.
        :type excluded_tax: float
        """

        self._excluded_tax = excluded_tax

    @property
    def included_tax(self):
        """Gets the included_tax of this RoomOfferDailyRate.

        The amount of taxes already included in the gross rate of the room and all included services for this business day.              The prize is calculated for all rooms and all persons per room

        :return: The included_tax of this RoomOfferDailyRate.
        :rtype: float
        """
        return self._included_tax

    @included_tax.setter
    def included_tax(self, included_tax):
        """Sets the included_tax of this RoomOfferDailyRate.

        The amount of taxes already included in the gross rate of the room and all included services for this business day.              The prize is calculated for all rooms and all persons per room

        :param included_tax: The included_tax of this RoomOfferDailyRate.
        :type included_tax: float
        """

        self._included_tax = included_tax

    @property
    def rate(self):
        """Gets the rate of this RoomOfferDailyRate.

        The gross rate for this day for the room and all included services. The prize is calculated for all rooms and all               persons per room

        :return: The rate of this RoomOfferDailyRate.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this RoomOfferDailyRate.

        The gross rate for this day for the room and all included services. The prize is calculated for all rooms and all               persons per room

        :param rate: The rate of this RoomOfferDailyRate.
        :type rate: float
        """

        self._rate = rate
