# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RatesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adults: str=None, arrival_date: datetime=None, channel_code: str=None, departure_date: datetime=None, expand: str=None, group_code: str=None, hotel_id: int=None, rate_plan_code: str=None, room_type: str=None, rooms: str=None):
        """RatesRequest - a model defined in OpenAPI

        :param adults: The adults of this RatesRequest.
        :param arrival_date: The arrival_date of this RatesRequest.
        :param channel_code: The channel_code of this RatesRequest.
        :param departure_date: The departure_date of this RatesRequest.
        :param expand: The expand of this RatesRequest.
        :param group_code: The group_code of this RatesRequest.
        :param hotel_id: The hotel_id of this RatesRequest.
        :param rate_plan_code: The rate_plan_code of this RatesRequest.
        :param room_type: The room_type of this RatesRequest.
        :param rooms: The rooms of this RatesRequest.
        """
        self.openapi_types = {
            'adults': str,
            'arrival_date': datetime,
            'channel_code': str,
            'departure_date': datetime,
            'expand': str,
            'group_code': str,
            'hotel_id': int,
            'rate_plan_code': str,
            'room_type': str,
            'rooms': str
        }

        self.attribute_map = {
            'adults': 'adults',
            'arrival_date': 'arrivalDate',
            'channel_code': 'channelCode',
            'departure_date': 'departureDate',
            'expand': 'expand',
            'group_code': 'groupCode',
            'hotel_id': 'hotelId',
            'rate_plan_code': 'ratePlanCode',
            'room_type': 'roomType',
            'rooms': 'rooms'
        }

        self._adults = adults
        self._arrival_date = arrival_date
        self._channel_code = channel_code
        self._departure_date = departure_date
        self._expand = expand
        self._group_code = group_code
        self._hotel_id = hotel_id
        self._rate_plan_code = rate_plan_code
        self._room_type = room_type
        self._rooms = rooms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RatesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RatesRequest of this RatesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adults(self):
        """Gets the adults of this RatesRequest.

        Number of adults per room.

        :return: The adults of this RatesRequest.
        :rtype: str
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this RatesRequest.

        Number of adults per room.

        :param adults: The adults of this RatesRequest.
        :type adults: str
        """
        if adults is None:
            raise ValueError("Invalid value for `adults`, must not be `None`")
        if adults is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', adults):
            raise ValueError("Invalid value for `adults`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._adults = adults

    @property
    def arrival_date(self):
        """Gets the arrival_date of this RatesRequest.

        Date of arrival for the guest in the ISO-8601 format \"YYYY-MM-DD\".

        :return: The arrival_date of this RatesRequest.
        :rtype: datetime
        """
        return self._arrival_date

    @arrival_date.setter
    def arrival_date(self, arrival_date):
        """Sets the arrival_date of this RatesRequest.

        Date of arrival for the guest in the ISO-8601 format \"YYYY-MM-DD\".

        :param arrival_date: The arrival_date of this RatesRequest.
        :type arrival_date: datetime
        """
        if arrival_date is None:
            raise ValueError("Invalid value for `arrival_date`, must not be `None`")

        self._arrival_date = arrival_date

    @property
    def channel_code(self):
        """Gets the channel_code of this RatesRequest.

        Channel Code the rate plan needs to be configured for.

        :return: The channel_code of this RatesRequest.
        :rtype: str
        """
        return self._channel_code

    @channel_code.setter
    def channel_code(self, channel_code):
        """Sets the channel_code of this RatesRequest.

        Channel Code the rate plan needs to be configured for.

        :param channel_code: The channel_code of this RatesRequest.
        :type channel_code: str
        """
        if channel_code is None:
            raise ValueError("Invalid value for `channel_code`, must not be `None`")

        self._channel_code = channel_code

    @property
    def departure_date(self):
        """Gets the departure_date of this RatesRequest.

        Date of departure for the guest in the ISO-8601 format \"YYYY-MM-DD\".

        :return: The departure_date of this RatesRequest.
        :rtype: datetime
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this RatesRequest.

        Date of departure for the guest in the ISO-8601 format \"YYYY-MM-DD\".

        :param departure_date: The departure_date of this RatesRequest.
        :type departure_date: datetime
        """
        if departure_date is None:
            raise ValueError("Invalid value for `departure_date`, must not be `None`")

        self._departure_date = departure_date

    @property
    def expand(self):
        """Gets the expand of this RatesRequest.

        Expand the rates breakdown if required.

        :return: The expand of this RatesRequest.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this RatesRequest.

        Expand the rates breakdown if required.

        :param expand: The expand of this RatesRequest.
        :type expand: str
        """
        allowed_values = ["None", "Breakdown"]  # noqa: E501
        if expand not in allowed_values:
            raise ValueError(
                "Invalid value for `expand` ({0}), must be one of {1}"
                .format(expand, allowed_values)
            )

        self._expand = expand

    @property
    def group_code(self):
        """Gets the group_code of this RatesRequest.

        Only return offers for the specified group code.

        :return: The group_code of this RatesRequest.
        :rtype: str
        """
        return self._group_code

    @group_code.setter
    def group_code(self, group_code):
        """Sets the group_code of this RatesRequest.

        Only return offers for the specified group code.

        :param group_code: The group_code of this RatesRequest.
        :type group_code: str
        """

        self._group_code = group_code

    @property
    def hotel_id(self):
        """Gets the hotel_id of this RatesRequest.

        Specifies the hotel id to request offers for.

        :return: The hotel_id of this RatesRequest.
        :rtype: int
        """
        return self._hotel_id

    @hotel_id.setter
    def hotel_id(self, hotel_id):
        """Sets the hotel_id of this RatesRequest.

        Specifies the hotel id to request offers for.

        :param hotel_id: The hotel_id of this RatesRequest.
        :type hotel_id: int
        """
        if hotel_id is None:
            raise ValueError("Invalid value for `hotel_id`, must not be `None`")

        self._hotel_id = hotel_id

    @property
    def rate_plan_code(self):
        """Gets the rate_plan_code of this RatesRequest.

        Only return offers for the specified room type code.

        :return: The rate_plan_code of this RatesRequest.
        :rtype: str
        """
        return self._rate_plan_code

    @rate_plan_code.setter
    def rate_plan_code(self, rate_plan_code):
        """Sets the rate_plan_code of this RatesRequest.

        Only return offers for the specified room type code.

        :param rate_plan_code: The rate_plan_code of this RatesRequest.
        :type rate_plan_code: str
        """

        self._rate_plan_code = rate_plan_code

    @property
    def room_type(self):
        """Gets the room_type of this RatesRequest.

        Only return offers with rates for the specified room type code.

        :return: The room_type of this RatesRequest.
        :rtype: str
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """Sets the room_type of this RatesRequest.

        Only return offers with rates for the specified room type code.

        :param room_type: The room_type of this RatesRequest.
        :type room_type: str
        """

        self._room_type = room_type

    @property
    def rooms(self):
        """Gets the rooms of this RatesRequest.

        Number of rooms (default is 1).

        :return: The rooms of this RatesRequest.
        :rtype: str
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this RatesRequest.

        Number of rooms (default is 1).

        :param rooms: The rooms of this RatesRequest.
        :type rooms: str
        """
        if rooms is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', rooms):
            raise ValueError("Invalid value for `rooms`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._rooms = rooms
