# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization_details import AuthorizationDetails
from openapi_server import util


class AuthorizationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization: AuthorizationDetails=None, no_authorization_required: bool=None, payment_token: str=None):
        """AuthorizationRequest - a model defined in OpenAPI

        :param authorization: The authorization of this AuthorizationRequest.
        :param no_authorization_required: The no_authorization_required of this AuthorizationRequest.
        :param payment_token: The payment_token of this AuthorizationRequest.
        """
        self.openapi_types = {
            'authorization': AuthorizationDetails,
            'no_authorization_required': bool,
            'payment_token': str
        }

        self.attribute_map = {
            'authorization': 'authorization',
            'no_authorization_required': 'no_authorization_required',
            'payment_token': 'payment_token'
        }

        self._authorization = authorization
        self._no_authorization_required = no_authorization_required
        self._payment_token = payment_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationRequest of this AuthorizationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization(self):
        """Gets the authorization of this AuthorizationRequest.


        :return: The authorization of this AuthorizationRequest.
        :rtype: AuthorizationDetails
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this AuthorizationRequest.


        :param authorization: The authorization of this AuthorizationRequest.
        :type authorization: AuthorizationDetails
        """

        self._authorization = authorization

    @property
    def no_authorization_required(self):
        """Gets the no_authorization_required of this AuthorizationRequest.

        Whether hetras should skip authorization using the provided token when no authorization details are supplied.              Optional flag, defaults to false.

        :return: The no_authorization_required of this AuthorizationRequest.
        :rtype: bool
        """
        return self._no_authorization_required

    @no_authorization_required.setter
    def no_authorization_required(self, no_authorization_required):
        """Sets the no_authorization_required of this AuthorizationRequest.

        Whether hetras should skip authorization using the provided token when no authorization details are supplied.              Optional flag, defaults to false.

        :param no_authorization_required: The no_authorization_required of this AuthorizationRequest.
        :type no_authorization_required: bool
        """

        self._no_authorization_required = no_authorization_required

    @property
    def payment_token(self):
        """Gets the payment_token of this AuthorizationRequest.

        The token you get from the payment service provider

        :return: The payment_token of this AuthorizationRequest.
        :rtype: str
        """
        return self._payment_token

    @payment_token.setter
    def payment_token(self, payment_token):
        """Sets the payment_token of this AuthorizationRequest.

        The token you get from the payment service provider

        :param payment_token: The payment_token of this AuthorizationRequest.
        :type payment_token: str
        """
        if payment_token is None:
            raise ValueError("Invalid value for `payment_token`, must not be `None`")
        if payment_token is not None and len(payment_token) > 255:
            raise ValueError("Invalid value for `payment_token`, length must be less than or equal to `255`")
        if payment_token is not None and len(payment_token) < 0:
            raise ValueError("Invalid value for `payment_token`, length must be greater than or equal to `0`")

        self._payment_token = payment_token
