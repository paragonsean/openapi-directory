# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlockListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count_details: bool=None, _from: datetime=None, group_code: str=None, hotel_id: int=None, rate_plan_codes: List[str]=None, status: str=None, to: datetime=None):
        """BlockListRequest - a model defined in OpenAPI

        :param count_details: The count_details of this BlockListRequest.
        :param _from: The _from of this BlockListRequest.
        :param group_code: The group_code of this BlockListRequest.
        :param hotel_id: The hotel_id of this BlockListRequest.
        :param rate_plan_codes: The rate_plan_codes of this BlockListRequest.
        :param status: The status of this BlockListRequest.
        :param to: The to of this BlockListRequest.
        """
        self.openapi_types = {
            'count_details': bool,
            '_from': datetime,
            'group_code': str,
            'hotel_id': int,
            'rate_plan_codes': List[str],
            'status': str,
            'to': datetime
        }

        self.attribute_map = {
            'count_details': 'countDetails',
            '_from': 'from',
            'group_code': 'groupCode',
            'hotel_id': 'hotelId',
            'rate_plan_codes': 'ratePlanCodes',
            'status': 'status',
            'to': 'to'
        }

        self._count_details = count_details
        self.__from = _from
        self._group_code = group_code
        self._hotel_id = hotel_id
        self._rate_plan_codes = rate_plan_codes
        self._status = status
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlockListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlockListRequest of this BlockListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count_details(self):
        """Gets the count_details of this BlockListRequest.

        If true it will include also details of block count per each room type.

        :return: The count_details of this BlockListRequest.
        :rtype: bool
        """
        return self._count_details

    @count_details.setter
    def count_details(self, count_details):
        """Sets the count_details of this BlockListRequest.

        If true it will include also details of block count per each room type.

        :param count_details: The count_details of this BlockListRequest.
        :type count_details: bool
        """

        self._count_details = count_details

    @property
    def _from(self):
        """Gets the _from of this BlockListRequest.

        Return all blocks where the block's last_departure is greater than specified date.

        :return: The _from of this BlockListRequest.
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this BlockListRequest.

        Return all blocks where the block's last_departure is greater than specified date.

        :param _from: The _from of this BlockListRequest.
        :type _from: datetime
        """

        self.__from = _from

    @property
    def group_code(self):
        """Gets the group_code of this BlockListRequest.

        Filter the blocks by the specified group code

        :return: The group_code of this BlockListRequest.
        :rtype: str
        """
        return self._group_code

    @group_code.setter
    def group_code(self, group_code):
        """Sets the group_code of this BlockListRequest.

        Filter the blocks by the specified group code

        :param group_code: The group_code of this BlockListRequest.
        :type group_code: str
        """

        self._group_code = group_code

    @property
    def hotel_id(self):
        """Gets the hotel_id of this BlockListRequest.

        Only return blocks for this specific hotel.

        :return: The hotel_id of this BlockListRequest.
        :rtype: int
        """
        return self._hotel_id

    @hotel_id.setter
    def hotel_id(self, hotel_id):
        """Sets the hotel_id of this BlockListRequest.

        Only return blocks for this specific hotel.

        :param hotel_id: The hotel_id of this BlockListRequest.
        :type hotel_id: int
        """

        self._hotel_id = hotel_id

    @property
    def rate_plan_codes(self):
        """Gets the rate_plan_codes of this BlockListRequest.

        Return all blocks that have related the specified comma-separated rate plans.

        :return: The rate_plan_codes of this BlockListRequest.
        :rtype: List[str]
        """
        return self._rate_plan_codes

    @rate_plan_codes.setter
    def rate_plan_codes(self, rate_plan_codes):
        """Sets the rate_plan_codes of this BlockListRequest.

        Return all blocks that have related the specified comma-separated rate plans.

        :param rate_plan_codes: The rate_plan_codes of this BlockListRequest.
        :type rate_plan_codes: List[str]
        """

        self._rate_plan_codes = rate_plan_codes

    @property
    def status(self):
        """Gets the status of this BlockListRequest.

        Return all blocks where the block status is one of the specified values.

        :return: The status of this BlockListRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BlockListRequest.

        Return all blocks where the block status is one of the specified values.

        :param status: The status of this BlockListRequest.
        :type status: str
        """
        allowed_values = ["Cancelled", "Tentative", "Definite"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def to(self):
        """Gets the to of this BlockListRequest.

        Return all blocks where the block's last_departure is less than specified date.

        :return: The to of this BlockListRequest.
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this BlockListRequest.

        Return all blocks where the block's last_departure is less than specified date.

        :param to: The to of this BlockListRequest.
        :type to: datetime
        """

        self._to = to
