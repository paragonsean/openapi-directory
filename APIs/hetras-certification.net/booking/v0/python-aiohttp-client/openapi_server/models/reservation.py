# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.company import Company
from openapi_server.models.contact import Contact
from openapi_server.models.customer import Customer
from openapi_server.models.guarantee import Guarantee
from openapi_server import util


class Reservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addons: List[str]=None, adults: int=None, arrival_date: datetime=None, channel_code: str=None, comment: str=None, company: Company=None, contact: Contact=None, departure_date: datetime=None, external_id: str=None, group_code: str=None, guarantee: Guarantee=None, guests: List[Customer]=None, hotel_id: int=None, payment_method: str=None, prepay_discount: float=None, rate_plan: str=None, room_type: str=None, rooms: int=None, travel_agent: Company=None):
        """Reservation - a model defined in OpenAPI

        :param addons: The addons of this Reservation.
        :param adults: The adults of this Reservation.
        :param arrival_date: The arrival_date of this Reservation.
        :param channel_code: The channel_code of this Reservation.
        :param comment: The comment of this Reservation.
        :param company: The company of this Reservation.
        :param contact: The contact of this Reservation.
        :param departure_date: The departure_date of this Reservation.
        :param external_id: The external_id of this Reservation.
        :param group_code: The group_code of this Reservation.
        :param guarantee: The guarantee of this Reservation.
        :param guests: The guests of this Reservation.
        :param hotel_id: The hotel_id of this Reservation.
        :param payment_method: The payment_method of this Reservation.
        :param prepay_discount: The prepay_discount of this Reservation.
        :param rate_plan: The rate_plan of this Reservation.
        :param room_type: The room_type of this Reservation.
        :param rooms: The rooms of this Reservation.
        :param travel_agent: The travel_agent of this Reservation.
        """
        self.openapi_types = {
            'addons': List[str],
            'adults': int,
            'arrival_date': datetime,
            'channel_code': str,
            'comment': str,
            'company': Company,
            'contact': Contact,
            'departure_date': datetime,
            'external_id': str,
            'group_code': str,
            'guarantee': Guarantee,
            'guests': List[Customer],
            'hotel_id': int,
            'payment_method': str,
            'prepay_discount': float,
            'rate_plan': str,
            'room_type': str,
            'rooms': int,
            'travel_agent': Company
        }

        self.attribute_map = {
            'addons': 'addons',
            'adults': 'adults',
            'arrival_date': 'arrival_date',
            'channel_code': 'channel_code',
            'comment': 'comment',
            'company': 'company',
            'contact': 'contact',
            'departure_date': 'departure_date',
            'external_id': 'external_id',
            'group_code': 'group_code',
            'guarantee': 'guarantee',
            'guests': 'guests',
            'hotel_id': 'hotel_id',
            'payment_method': 'payment_method',
            'prepay_discount': 'prepay_discount',
            'rate_plan': 'rate_plan',
            'room_type': 'room_type',
            'rooms': 'rooms',
            'travel_agent': 'travel_agent'
        }

        self._addons = addons
        self._adults = adults
        self._arrival_date = arrival_date
        self._channel_code = channel_code
        self._comment = comment
        self._company = company
        self._contact = contact
        self._departure_date = departure_date
        self._external_id = external_id
        self._group_code = group_code
        self._guarantee = guarantee
        self._guests = guests
        self._hotel_id = hotel_id
        self._payment_method = payment_method
        self._prepay_discount = prepay_discount
        self._rate_plan = rate_plan
        self._room_type = room_type
        self._rooms = rooms
        self._travel_agent = travel_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reservation of this Reservation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addons(self):
        """Gets the addons of this Reservation.

        A list of addon service codes that should be booked for all reservations of this booking

        :return: The addons of this Reservation.
        :rtype: List[str]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this Reservation.

        A list of addon service codes that should be booked for all reservations of this booking

        :param addons: The addons of this Reservation.
        :type addons: List[str]
        """

        self._addons = addons

    @property
    def adults(self):
        """Gets the adults of this Reservation.

        The number of adults per room

        :return: The adults of this Reservation.
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this Reservation.

        The number of adults per room

        :param adults: The adults of this Reservation.
        :type adults: int
        """

        self._adults = adults

    @property
    def arrival_date(self):
        """Gets the arrival_date of this Reservation.

        The arrival date of the guests

        :return: The arrival_date of this Reservation.
        :rtype: datetime
        """
        return self._arrival_date

    @arrival_date.setter
    def arrival_date(self, arrival_date):
        """Sets the arrival_date of this Reservation.

        The arrival date of the guests

        :param arrival_date: The arrival_date of this Reservation.
        :type arrival_date: datetime
        """

        self._arrival_date = arrival_date

    @property
    def channel_code(self):
        """Gets the channel_code of this Reservation.

        The channel code for this reservation. You can find available channels in the codes for the hotel.

        :return: The channel_code of this Reservation.
        :rtype: str
        """
        return self._channel_code

    @channel_code.setter
    def channel_code(self, channel_code):
        """Sets the channel_code of this Reservation.

        The channel code for this reservation. You can find available channels in the codes for the hotel.

        :param channel_code: The channel_code of this Reservation.
        :type channel_code: str
        """

        self._channel_code = channel_code

    @property
    def comment(self):
        """Gets the comment of this Reservation.

        The comment you want to add for this reservation

        :return: The comment of this Reservation.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Reservation.

        The comment you want to add for this reservation

        :param comment: The comment of this Reservation.
        :type comment: str
        """

        self._comment = comment

    @property
    def company(self):
        """Gets the company of this Reservation.


        :return: The company of this Reservation.
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Reservation.


        :param company: The company of this Reservation.
        :type company: Company
        """

        self._company = company

    @property
    def contact(self):
        """Gets the contact of this Reservation.


        :return: The contact of this Reservation.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Reservation.


        :param contact: The contact of this Reservation.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def departure_date(self):
        """Gets the departure_date of this Reservation.

        The departure date of the guests

        :return: The departure_date of this Reservation.
        :rtype: datetime
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this Reservation.

        The departure date of the guests

        :param departure_date: The departure_date of this Reservation.
        :type departure_date: datetime
        """

        self._departure_date = departure_date

    @property
    def external_id(self):
        """Gets the external_id of this Reservation.

        The external id for this reservation. You can put here your own id used by you or the external system              you integrate hetras with

        :return: The external_id of this Reservation.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Reservation.

        The external id for this reservation. You can put here your own id used by you or the external system              you integrate hetras with

        :param external_id: The external_id of this Reservation.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def group_code(self):
        """Gets the group_code of this Reservation.

        The group code based on which the reservation will be created.

        :return: The group_code of this Reservation.
        :rtype: str
        """
        return self._group_code

    @group_code.setter
    def group_code(self, group_code):
        """Sets the group_code of this Reservation.

        The group code based on which the reservation will be created.

        :param group_code: The group_code of this Reservation.
        :type group_code: str
        """

        self._group_code = group_code

    @property
    def guarantee(self):
        """Gets the guarantee of this Reservation.


        :return: The guarantee of this Reservation.
        :rtype: Guarantee
        """
        return self._guarantee

    @guarantee.setter
    def guarantee(self, guarantee):
        """Sets the guarantee of this Reservation.


        :param guarantee: The guarantee of this Reservation.
        :type guarantee: Guarantee
        """

        self._guarantee = guarantee

    @property
    def guests(self):
        """Gets the guests of this Reservation.

        A list of guests with some basic guest details

        :return: The guests of this Reservation.
        :rtype: List[Customer]
        """
        return self._guests

    @guests.setter
    def guests(self, guests):
        """Sets the guests of this Reservation.

        A list of guests with some basic guest details

        :param guests: The guests of this Reservation.
        :type guests: List[Customer]
        """

        self._guests = guests

    @property
    def hotel_id(self):
        """Gets the hotel_id of this Reservation.

        The id of the hotel this reservation is valid for

        :return: The hotel_id of this Reservation.
        :rtype: int
        """
        return self._hotel_id

    @hotel_id.setter
    def hotel_id(self, hotel_id):
        """Sets the hotel_id of this Reservation.

        The id of the hotel this reservation is valid for

        :param hotel_id: The hotel_id of this Reservation.
        :type hotel_id: int
        """
        if hotel_id is None:
            raise ValueError("Invalid value for `hotel_id`, must not be `None`")

        self._hotel_id = hotel_id

    @property
    def payment_method(self):
        """Gets the payment_method of this Reservation.

        The payment method for this reservation

        :return: The payment_method of this Reservation.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Reservation.

        The payment method for this reservation

        :param payment_method: The payment_method of this Reservation.
        :type payment_method: str
        """
        allowed_values = ["None", "Cash", "CreditCard", "WireTransfer", "ChargeToCompany", "Check", "Voucher", "DebitCard", "Token", "Miscellaneous", "DigitalPayment"]  # noqa: E501
        if payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def prepay_discount(self):
        """Gets the prepay_discount of this Reservation.

        If you create a booking for a rateplan requiring prepayment this amount will be deducted from the booking value before              the prepayment will be taken. This feature is useful when the booker redeems a gift voucher and you want to               only capture the remaining amount from the guest´s credit card

        :return: The prepay_discount of this Reservation.
        :rtype: float
        """
        return self._prepay_discount

    @prepay_discount.setter
    def prepay_discount(self, prepay_discount):
        """Sets the prepay_discount of this Reservation.

        If you create a booking for a rateplan requiring prepayment this amount will be deducted from the booking value before              the prepayment will be taken. This feature is useful when the booker redeems a gift voucher and you want to               only capture the remaining amount from the guest´s credit card

        :param prepay_discount: The prepay_discount of this Reservation.
        :type prepay_discount: float
        """

        self._prepay_discount = prepay_discount

    @property
    def rate_plan(self):
        """Gets the rate_plan of this Reservation.

        The rate plan code this reservation is related to

        :return: The rate_plan of this Reservation.
        :rtype: str
        """
        return self._rate_plan

    @rate_plan.setter
    def rate_plan(self, rate_plan):
        """Sets the rate_plan of this Reservation.

        The rate plan code this reservation is related to

        :param rate_plan: The rate_plan of this Reservation.
        :type rate_plan: str
        """

        self._rate_plan = rate_plan

    @property
    def room_type(self):
        """Gets the room_type of this Reservation.

        The room type code this reservation is related to

        :return: The room_type of this Reservation.
        :rtype: str
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """Sets the room_type of this Reservation.

        The room type code this reservation is related to

        :param room_type: The room_type of this Reservation.
        :type room_type: str
        """

        self._room_type = room_type

    @property
    def rooms(self):
        """Gets the rooms of this Reservation.

        The number of rooms this reservation is for. After a multi-room booking is done there will be               one reservation in hetras for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests

        :return: The rooms of this Reservation.
        :rtype: int
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this Reservation.

        The number of rooms this reservation is for. After a multi-room booking is done there will be               one reservation in hetras for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests

        :param rooms: The rooms of this Reservation.
        :type rooms: int
        """

        self._rooms = rooms

    @property
    def travel_agent(self):
        """Gets the travel_agent of this Reservation.


        :return: The travel_agent of this Reservation.
        :rtype: Company
        """
        return self._travel_agent

    @travel_agent.setter
    def travel_agent(self, travel_agent):
        """Sets the travel_agent of this Reservation.


        :param travel_agent: The travel_agent of this Reservation.
        :type travel_agent: Company
        """

        self._travel_agent = travel_agent
