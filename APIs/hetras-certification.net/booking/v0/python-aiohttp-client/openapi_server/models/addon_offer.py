# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.addon_offer_breakdown import AddonOfferBreakdown
from openapi_server.models.addon_offer_rate import AddonOfferRate
from openapi_server import util


class AddonOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breakdown: List[AddonOfferBreakdown]=None, code: str=None, description: str=None, frequency: str=None, name: str=None, rate_mode: str=None, total_stay: AddonOfferRate=None):
        """AddonOffer - a model defined in OpenAPI

        :param breakdown: The breakdown of this AddonOffer.
        :param code: The code of this AddonOffer.
        :param description: The description of this AddonOffer.
        :param frequency: The frequency of this AddonOffer.
        :param name: The name of this AddonOffer.
        :param rate_mode: The rate_mode of this AddonOffer.
        :param total_stay: The total_stay of this AddonOffer.
        """
        self.openapi_types = {
            'breakdown': List[AddonOfferBreakdown],
            'code': str,
            'description': str,
            'frequency': str,
            'name': str,
            'rate_mode': str,
            'total_stay': AddonOfferRate
        }

        self.attribute_map = {
            'breakdown': 'breakdown',
            'code': 'code',
            'description': 'description',
            'frequency': 'frequency',
            'name': 'name',
            'rate_mode': 'rate_mode',
            'total_stay': 'total_stay'
        }

        self._breakdown = breakdown
        self._code = code
        self._description = description
        self._frequency = frequency
        self._name = name
        self._rate_mode = rate_mode
        self._total_stay = total_stay

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddonOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddonOffer of this AddonOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breakdown(self):
        """Gets the breakdown of this AddonOffer.

        In this collection you will get an entry with price information for every day the addon service will be charged              to the folio of the reservation if the addon service is booked.

        :return: The breakdown of this AddonOffer.
        :rtype: List[AddonOfferBreakdown]
        """
        return self._breakdown

    @breakdown.setter
    def breakdown(self, breakdown):
        """Sets the breakdown of this AddonOffer.

        In this collection you will get an entry with price information for every day the addon service will be charged              to the folio of the reservation if the addon service is booked.

        :param breakdown: The breakdown of this AddonOffer.
        :type breakdown: List[AddonOfferBreakdown]
        """

        self._breakdown = breakdown

    @property
    def code(self):
        """Gets the code of this AddonOffer.

        The code of the addon service

        :return: The code of this AddonOffer.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AddonOffer.

        The code of the addon service

        :param code: The code of this AddonOffer.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this AddonOffer.

        The description of the addon service

        :return: The description of this AddonOffer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddonOffer.

        The description of the addon service

        :param description: The description of this AddonOffer.
        :type description: str
        """

        self._description = description

    @property
    def frequency(self):
        """Gets the frequency of this AddonOffer.

        The frequency this addon service will be charged to the reservation. This field is a string that can be displayed,              but is not supposed to be used for computation

        :return: The frequency of this AddonOffer.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this AddonOffer.

        The frequency this addon service will be charged to the reservation. This field is a string that can be displayed,              but is not supposed to be used for computation

        :param frequency: The frequency of this AddonOffer.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def name(self):
        """Gets the name of this AddonOffer.

        The name of the addon service

        :return: The name of this AddonOffer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddonOffer.

        The name of the addon service

        :param name: The name of this AddonOffer.
        :type name: str
        """

        self._name = name

    @property
    def rate_mode(self):
        """Gets the rate_mode of this AddonOffer.

        The price for an addon service can be per person or per room. All the prices in an offer are already calculated              for all rooms and number of persons per room. Based on this attribute you will be able to know how to calculate              the price per person and room, per room or per person depending on your needs.

        :return: The rate_mode of this AddonOffer.
        :rtype: str
        """
        return self._rate_mode

    @rate_mode.setter
    def rate_mode(self, rate_mode):
        """Sets the rate_mode of this AddonOffer.

        The price for an addon service can be per person or per room. All the prices in an offer are already calculated              for all rooms and number of persons per room. Based on this attribute you will be able to know how to calculate              the price per person and room, per room or per person depending on your needs.

        :param rate_mode: The rate_mode of this AddonOffer.
        :type rate_mode: str
        """
        allowed_values = ["PerRoom", "PerPerson"]  # noqa: E501
        if rate_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `rate_mode` ({0}), must be one of {1}"
                .format(rate_mode, allowed_values)
            )

        self._rate_mode = rate_mode

    @property
    def total_stay(self):
        """Gets the total_stay of this AddonOffer.


        :return: The total_stay of this AddonOffer.
        :rtype: AddonOfferRate
        """
        return self._total_stay

    @total_stay.setter
    def total_stay(self, total_stay):
        """Sets the total_stay of this AddonOffer.


        :param total_stay: The total_stay of this AddonOffer.
        :type total_stay: AddonOfferRate
        """

        self._total_stay = total_stay
