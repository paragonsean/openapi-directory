# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SafeWaitHandle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_closed: bool=None, is_invalid: bool=None):
        """SafeWaitHandle - a model defined in OpenAPI

        :param is_closed: The is_closed of this SafeWaitHandle.
        :param is_invalid: The is_invalid of this SafeWaitHandle.
        """
        self.openapi_types = {
            'is_closed': bool,
            'is_invalid': bool
        }

        self.attribute_map = {
            'is_closed': 'IsClosed',
            'is_invalid': 'IsInvalid'
        }

        self._is_closed = is_closed
        self._is_invalid = is_invalid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SafeWaitHandle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SafeWaitHandle of this SafeWaitHandle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_closed(self):
        """Gets the is_closed of this SafeWaitHandle.


        :return: The is_closed of this SafeWaitHandle.
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this SafeWaitHandle.


        :param is_closed: The is_closed of this SafeWaitHandle.
        :type is_closed: bool
        """

        self._is_closed = is_closed

    @property
    def is_invalid(self):
        """Gets the is_invalid of this SafeWaitHandle.


        :return: The is_invalid of this SafeWaitHandle.
        :rtype: bool
        """
        return self._is_invalid

    @is_invalid.setter
    def is_invalid(self, is_invalid):
        """Sets the is_invalid of this SafeWaitHandle.


        :param is_invalid: The is_invalid of this SafeWaitHandle.
        :type is_invalid: bool
        """

        self._is_invalid = is_invalid
