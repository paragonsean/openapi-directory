# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wait_handle import WaitHandle
from openapi_server import util


class CancellationToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_be_canceled: bool=None, is_cancellation_requested: bool=None, wait_handle: WaitHandle=None):
        """CancellationToken - a model defined in OpenAPI

        :param can_be_canceled: The can_be_canceled of this CancellationToken.
        :param is_cancellation_requested: The is_cancellation_requested of this CancellationToken.
        :param wait_handle: The wait_handle of this CancellationToken.
        """
        self.openapi_types = {
            'can_be_canceled': bool,
            'is_cancellation_requested': bool,
            'wait_handle': WaitHandle
        }

        self.attribute_map = {
            'can_be_canceled': 'CanBeCanceled',
            'is_cancellation_requested': 'IsCancellationRequested',
            'wait_handle': 'WaitHandle'
        }

        self._can_be_canceled = can_be_canceled
        self._is_cancellation_requested = is_cancellation_requested
        self._wait_handle = wait_handle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancellationToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancellationToken of this CancellationToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_be_canceled(self):
        """Gets the can_be_canceled of this CancellationToken.


        :return: The can_be_canceled of this CancellationToken.
        :rtype: bool
        """
        return self._can_be_canceled

    @can_be_canceled.setter
    def can_be_canceled(self, can_be_canceled):
        """Sets the can_be_canceled of this CancellationToken.


        :param can_be_canceled: The can_be_canceled of this CancellationToken.
        :type can_be_canceled: bool
        """

        self._can_be_canceled = can_be_canceled

    @property
    def is_cancellation_requested(self):
        """Gets the is_cancellation_requested of this CancellationToken.


        :return: The is_cancellation_requested of this CancellationToken.
        :rtype: bool
        """
        return self._is_cancellation_requested

    @is_cancellation_requested.setter
    def is_cancellation_requested(self, is_cancellation_requested):
        """Sets the is_cancellation_requested of this CancellationToken.


        :param is_cancellation_requested: The is_cancellation_requested of this CancellationToken.
        :type is_cancellation_requested: bool
        """

        self._is_cancellation_requested = is_cancellation_requested

    @property
    def wait_handle(self):
        """Gets the wait_handle of this CancellationToken.


        :return: The wait_handle of this CancellationToken.
        :rtype: WaitHandle
        """
        return self._wait_handle

    @wait_handle.setter
    def wait_handle(self, wait_handle):
        """Sets the wait_handle of this CancellationToken.


        :param wait_handle: The wait_handle of this CancellationToken.
        :type wait_handle: WaitHandle
        """

        self._wait_handle = wait_handle
