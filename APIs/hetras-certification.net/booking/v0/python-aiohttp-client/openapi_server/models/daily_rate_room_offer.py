# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.daily_room_rate import DailyRoomRate
from openapi_server.models.restrictions import Restrictions
from openapi_server import util


class DailyRateRoomOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_rooms_count: int=None, is_available: bool=None, rates: List[DailyRoomRate]=None, restrictions: Restrictions=None, room_type_code: str=None, unavailable_reason: str=None):
        """DailyRateRoomOffer - a model defined in OpenAPI

        :param available_rooms_count: The available_rooms_count of this DailyRateRoomOffer.
        :param is_available: The is_available of this DailyRateRoomOffer.
        :param rates: The rates of this DailyRateRoomOffer.
        :param restrictions: The restrictions of this DailyRateRoomOffer.
        :param room_type_code: The room_type_code of this DailyRateRoomOffer.
        :param unavailable_reason: The unavailable_reason of this DailyRateRoomOffer.
        """
        self.openapi_types = {
            'available_rooms_count': int,
            'is_available': bool,
            'rates': List[DailyRoomRate],
            'restrictions': Restrictions,
            'room_type_code': str,
            'unavailable_reason': str
        }

        self.attribute_map = {
            'available_rooms_count': 'available_rooms_count',
            'is_available': 'is_available',
            'rates': 'rates',
            'restrictions': 'restrictions',
            'room_type_code': 'room_type_code',
            'unavailable_reason': 'unavailable_reason'
        }

        self._available_rooms_count = available_rooms_count
        self._is_available = is_available
        self._rates = rates
        self._restrictions = restrictions
        self._room_type_code = room_type_code
        self._unavailable_reason = unavailable_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DailyRateRoomOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DailyRateRoomOffer of this DailyRateRoomOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_rooms_count(self):
        """Gets the available_rooms_count of this DailyRateRoomOffer.


        :return: The available_rooms_count of this DailyRateRoomOffer.
        :rtype: int
        """
        return self._available_rooms_count

    @available_rooms_count.setter
    def available_rooms_count(self, available_rooms_count):
        """Sets the available_rooms_count of this DailyRateRoomOffer.


        :param available_rooms_count: The available_rooms_count of this DailyRateRoomOffer.
        :type available_rooms_count: int
        """

        self._available_rooms_count = available_rooms_count

    @property
    def is_available(self):
        """Gets the is_available of this DailyRateRoomOffer.


        :return: The is_available of this DailyRateRoomOffer.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this DailyRateRoomOffer.


        :param is_available: The is_available of this DailyRateRoomOffer.
        :type is_available: bool
        """

        self._is_available = is_available

    @property
    def rates(self):
        """Gets the rates of this DailyRateRoomOffer.


        :return: The rates of this DailyRateRoomOffer.
        :rtype: List[DailyRoomRate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this DailyRateRoomOffer.


        :param rates: The rates of this DailyRateRoomOffer.
        :type rates: List[DailyRoomRate]
        """

        self._rates = rates

    @property
    def restrictions(self):
        """Gets the restrictions of this DailyRateRoomOffer.


        :return: The restrictions of this DailyRateRoomOffer.
        :rtype: Restrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this DailyRateRoomOffer.


        :param restrictions: The restrictions of this DailyRateRoomOffer.
        :type restrictions: Restrictions
        """

        self._restrictions = restrictions

    @property
    def room_type_code(self):
        """Gets the room_type_code of this DailyRateRoomOffer.


        :return: The room_type_code of this DailyRateRoomOffer.
        :rtype: str
        """
        return self._room_type_code

    @room_type_code.setter
    def room_type_code(self, room_type_code):
        """Sets the room_type_code of this DailyRateRoomOffer.


        :param room_type_code: The room_type_code of this DailyRateRoomOffer.
        :type room_type_code: str
        """

        self._room_type_code = room_type_code

    @property
    def unavailable_reason(self):
        """Gets the unavailable_reason of this DailyRateRoomOffer.

        If there is an issue and this room offer is unavailable (IsAvailable=false) this message may be not empty.

        :return: The unavailable_reason of this DailyRateRoomOffer.
        :rtype: str
        """
        return self._unavailable_reason

    @unavailable_reason.setter
    def unavailable_reason(self, unavailable_reason):
        """Sets the unavailable_reason of this DailyRateRoomOffer.

        If there is an issue and this room offer is unavailable (IsAvailable=false) this message may be not empty.

        :param unavailable_reason: The unavailable_reason of this DailyRateRoomOffer.
        :type unavailable_reason: str
        """

        self._unavailable_reason = unavailable_reason
