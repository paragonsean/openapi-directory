# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blocked import Blocked
from openapi_server.models.link_object import LinkObject
from openapi_server.models.maintenance import Maintenance
from openapi_server import util


class RoomAvailabilityDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, LinkObject]=None, available: int=None, blocked: Blocked=None, code: str=None, day_use: int=None, default: bool=None, house_count: int=None, maintenance: Maintenance=None, overbooking: int=None, room_count: int=None, sold: int=None, to_sell: int=None):
        """RoomAvailabilityDetail - a model defined in OpenAPI

        :param links: The links of this RoomAvailabilityDetail.
        :param available: The available of this RoomAvailabilityDetail.
        :param blocked: The blocked of this RoomAvailabilityDetail.
        :param code: The code of this RoomAvailabilityDetail.
        :param day_use: The day_use of this RoomAvailabilityDetail.
        :param default: The default of this RoomAvailabilityDetail.
        :param house_count: The house_count of this RoomAvailabilityDetail.
        :param maintenance: The maintenance of this RoomAvailabilityDetail.
        :param overbooking: The overbooking of this RoomAvailabilityDetail.
        :param room_count: The room_count of this RoomAvailabilityDetail.
        :param sold: The sold of this RoomAvailabilityDetail.
        :param to_sell: The to_sell of this RoomAvailabilityDetail.
        """
        self.openapi_types = {
            'links': Dict[str, LinkObject],
            'available': int,
            'blocked': Blocked,
            'code': str,
            'day_use': int,
            'default': bool,
            'house_count': int,
            'maintenance': Maintenance,
            'overbooking': int,
            'room_count': int,
            'sold': int,
            'to_sell': int
        }

        self.attribute_map = {
            'links': '_links',
            'available': 'available',
            'blocked': 'blocked',
            'code': 'code',
            'day_use': 'day_use',
            'default': 'default',
            'house_count': 'house_count',
            'maintenance': 'maintenance',
            'overbooking': 'overbooking',
            'room_count': 'room_count',
            'sold': 'sold',
            'to_sell': 'to_sell'
        }

        self._links = links
        self._available = available
        self._blocked = blocked
        self._code = code
        self._day_use = day_use
        self._default = default
        self._house_count = house_count
        self._maintenance = maintenance
        self._overbooking = overbooking
        self._room_count = room_count
        self._sold = sold
        self._to_sell = to_sell

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoomAvailabilityDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoomAvailabilityDetail of this RoomAvailabilityDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this RoomAvailabilityDetail.

        Collection of links to related resources

        :return: The links of this RoomAvailabilityDetail.
        :rtype: Dict[str, LinkObject]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RoomAvailabilityDetail.

        Collection of links to related resources

        :param links: The links of this RoomAvailabilityDetail.
        :type links: Dict[str, LinkObject]
        """

        self._links = links

    @property
    def available(self):
        """Gets the available of this RoomAvailabilityDetail.

        The number of rooms that were originally available to sell. This is the the house count reduced by rooms set              to OutOfOrder but increased by the set overbooking

        :return: The available of this RoomAvailabilityDetail.
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this RoomAvailabilityDetail.

        The number of rooms that were originally available to sell. This is the the house count reduced by rooms set              to OutOfOrder but increased by the set overbooking

        :param available: The available of this RoomAvailabilityDetail.
        :type available: int
        """

        self._available = available

    @property
    def blocked(self):
        """Gets the blocked of this RoomAvailabilityDetail.


        :return: The blocked of this RoomAvailabilityDetail.
        :rtype: Blocked
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this RoomAvailabilityDetail.


        :param blocked: The blocked of this RoomAvailabilityDetail.
        :type blocked: Blocked
        """

        self._blocked = blocked

    @property
    def code(self):
        """Gets the code of this RoomAvailabilityDetail.

        Code of the room type

        :return: The code of this RoomAvailabilityDetail.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RoomAvailabilityDetail.

        Code of the room type

        :param code: The code of this RoomAvailabilityDetail.
        :type code: str
        """

        self._code = code

    @property
    def day_use(self):
        """Gets the day_use of this RoomAvailabilityDetail.

        The number of day use reservations

        :return: The day_use of this RoomAvailabilityDetail.
        :rtype: int
        """
        return self._day_use

    @day_use.setter
    def day_use(self, day_use):
        """Sets the day_use of this RoomAvailabilityDetail.

        The number of day use reservations

        :param day_use: The day_use of this RoomAvailabilityDetail.
        :type day_use: int
        """

        self._day_use = day_use

    @property
    def default(self):
        """Gets the default of this RoomAvailabilityDetail.

        Specifies if the room type is the default room type of the hotel

        :return: The default of this RoomAvailabilityDetail.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this RoomAvailabilityDetail.

        Specifies if the room type is the default room type of the hotel

        :param default: The default of this RoomAvailabilityDetail.
        :type default: bool
        """

        self._default = default

    @property
    def house_count(self):
        """Gets the house_count of this RoomAvailabilityDetail.

        The total count of physical rooms reduced by the number of rooms set to OutOfInventory

        :return: The house_count of this RoomAvailabilityDetail.
        :rtype: int
        """
        return self._house_count

    @house_count.setter
    def house_count(self, house_count):
        """Sets the house_count of this RoomAvailabilityDetail.

        The total count of physical rooms reduced by the number of rooms set to OutOfInventory

        :param house_count: The house_count of this RoomAvailabilityDetail.
        :type house_count: int
        """

        self._house_count = house_count

    @property
    def maintenance(self):
        """Gets the maintenance of this RoomAvailabilityDetail.


        :return: The maintenance of this RoomAvailabilityDetail.
        :rtype: Maintenance
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this RoomAvailabilityDetail.


        :param maintenance: The maintenance of this RoomAvailabilityDetail.
        :type maintenance: Maintenance
        """

        self._maintenance = maintenance

    @property
    def overbooking(self):
        """Gets the overbooking of this RoomAvailabilityDetail.

        The manually set overbooking

        :return: The overbooking of this RoomAvailabilityDetail.
        :rtype: int
        """
        return self._overbooking

    @overbooking.setter
    def overbooking(self, overbooking):
        """Sets the overbooking of this RoomAvailabilityDetail.

        The manually set overbooking

        :param overbooking: The overbooking of this RoomAvailabilityDetail.
        :type overbooking: int
        """

        self._overbooking = overbooking

    @property
    def room_count(self):
        """Gets the room_count of this RoomAvailabilityDetail.

        The total count of physical rooms

        :return: The room_count of this RoomAvailabilityDetail.
        :rtype: int
        """
        return self._room_count

    @room_count.setter
    def room_count(self, room_count):
        """Sets the room_count of this RoomAvailabilityDetail.

        The total count of physical rooms

        :param room_count: The room_count of this RoomAvailabilityDetail.
        :type room_count: int
        """

        self._room_count = room_count

    @property
    def sold(self):
        """Gets the sold of this RoomAvailabilityDetail.

        The count of rooms sold. It sums up the rooms sold through individual reservations plus rooms blocked definitely

        :return: The sold of this RoomAvailabilityDetail.
        :rtype: int
        """
        return self._sold

    @sold.setter
    def sold(self, sold):
        """Sets the sold of this RoomAvailabilityDetail.

        The count of rooms sold. It sums up the rooms sold through individual reservations plus rooms blocked definitely

        :param sold: The sold of this RoomAvailabilityDetail.
        :type sold: int
        """

        self._sold = sold

    @property
    def to_sell(self):
        """Gets the to_sell of this RoomAvailabilityDetail.

        The number of rooms still available to sell. It is available reduced by the already sold rooms

        :return: The to_sell of this RoomAvailabilityDetail.
        :rtype: int
        """
        return self._to_sell

    @to_sell.setter
    def to_sell(self, to_sell):
        """Sets the to_sell of this RoomAvailabilityDetail.

        The number of rooms still available to sell. It is available reduced by the already sold rooms

        :param to_sell: The to_sell of this RoomAvailabilityDetail.
        :type to_sell: int
        """

        self._to_sell = to_sell
