# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Restrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed: bool=None, closed_to_arrival: bool=None, closed_to_departure: bool=None, maximum_length_of_stay: int=None, minimum_length_of_stay: int=None, minimum_stay_through: int=None):
        """Restrictions - a model defined in OpenAPI

        :param closed: The closed of this Restrictions.
        :param closed_to_arrival: The closed_to_arrival of this Restrictions.
        :param closed_to_departure: The closed_to_departure of this Restrictions.
        :param maximum_length_of_stay: The maximum_length_of_stay of this Restrictions.
        :param minimum_length_of_stay: The minimum_length_of_stay of this Restrictions.
        :param minimum_stay_through: The minimum_stay_through of this Restrictions.
        """
        self.openapi_types = {
            'closed': bool,
            'closed_to_arrival': bool,
            'closed_to_departure': bool,
            'maximum_length_of_stay': int,
            'minimum_length_of_stay': int,
            'minimum_stay_through': int
        }

        self.attribute_map = {
            'closed': 'closed',
            'closed_to_arrival': 'closed_to_arrival',
            'closed_to_departure': 'closed_to_departure',
            'maximum_length_of_stay': 'maximum_length_of_stay',
            'minimum_length_of_stay': 'minimum_length_of_stay',
            'minimum_stay_through': 'minimum_stay_through'
        }

        self._closed = closed
        self._closed_to_arrival = closed_to_arrival
        self._closed_to_departure = closed_to_departure
        self._maximum_length_of_stay = maximum_length_of_stay
        self._minimum_length_of_stay = minimum_length_of_stay
        self._minimum_stay_through = minimum_stay_through

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Restrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Restrictions of this Restrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed(self):
        """Gets the closed of this Restrictions.


        :return: The closed of this Restrictions.
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Restrictions.


        :param closed: The closed of this Restrictions.
        :type closed: bool
        """

        self._closed = closed

    @property
    def closed_to_arrival(self):
        """Gets the closed_to_arrival of this Restrictions.


        :return: The closed_to_arrival of this Restrictions.
        :rtype: bool
        """
        return self._closed_to_arrival

    @closed_to_arrival.setter
    def closed_to_arrival(self, closed_to_arrival):
        """Sets the closed_to_arrival of this Restrictions.


        :param closed_to_arrival: The closed_to_arrival of this Restrictions.
        :type closed_to_arrival: bool
        """

        self._closed_to_arrival = closed_to_arrival

    @property
    def closed_to_departure(self):
        """Gets the closed_to_departure of this Restrictions.


        :return: The closed_to_departure of this Restrictions.
        :rtype: bool
        """
        return self._closed_to_departure

    @closed_to_departure.setter
    def closed_to_departure(self, closed_to_departure):
        """Sets the closed_to_departure of this Restrictions.


        :param closed_to_departure: The closed_to_departure of this Restrictions.
        :type closed_to_departure: bool
        """

        self._closed_to_departure = closed_to_departure

    @property
    def maximum_length_of_stay(self):
        """Gets the maximum_length_of_stay of this Restrictions.


        :return: The maximum_length_of_stay of this Restrictions.
        :rtype: int
        """
        return self._maximum_length_of_stay

    @maximum_length_of_stay.setter
    def maximum_length_of_stay(self, maximum_length_of_stay):
        """Sets the maximum_length_of_stay of this Restrictions.


        :param maximum_length_of_stay: The maximum_length_of_stay of this Restrictions.
        :type maximum_length_of_stay: int
        """

        self._maximum_length_of_stay = maximum_length_of_stay

    @property
    def minimum_length_of_stay(self):
        """Gets the minimum_length_of_stay of this Restrictions.


        :return: The minimum_length_of_stay of this Restrictions.
        :rtype: int
        """
        return self._minimum_length_of_stay

    @minimum_length_of_stay.setter
    def minimum_length_of_stay(self, minimum_length_of_stay):
        """Sets the minimum_length_of_stay of this Restrictions.


        :param minimum_length_of_stay: The minimum_length_of_stay of this Restrictions.
        :type minimum_length_of_stay: int
        """

        self._minimum_length_of_stay = minimum_length_of_stay

    @property
    def minimum_stay_through(self):
        """Gets the minimum_stay_through of this Restrictions.


        :return: The minimum_stay_through of this Restrictions.
        :rtype: int
        """
        return self._minimum_stay_through

    @minimum_stay_through.setter
    def minimum_stay_through(self, minimum_stay_through):
        """Sets the minimum_stay_through of this Restrictions.


        :param minimum_stay_through: The minimum_stay_through of this Restrictions.
        :type minimum_stay_through: int
        """

        self._minimum_stay_through = minimum_stay_through
