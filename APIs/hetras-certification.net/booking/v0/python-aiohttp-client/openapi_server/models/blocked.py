# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Blocked(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, definite: int=None, remaining: int=None, tentative: int=None):
        """Blocked - a model defined in OpenAPI

        :param definite: The definite of this Blocked.
        :param remaining: The remaining of this Blocked.
        :param tentative: The tentative of this Blocked.
        """
        self.openapi_types = {
            'definite': int,
            'remaining': int,
            'tentative': int
        }

        self.attribute_map = {
            'definite': 'definite',
            'remaining': 'remaining',
            'tentative': 'tentative'
        }

        self._definite = definite
        self._remaining = remaining
        self._tentative = tentative

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Blocked':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Blocked of this Blocked.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def definite(self):
        """Gets the definite of this Blocked.

        Number of rooms blocked defintely

        :return: The definite of this Blocked.
        :rtype: int
        """
        return self._definite

    @definite.setter
    def definite(self, definite):
        """Sets the definite of this Blocked.

        Number of rooms blocked defintely

        :param definite: The definite of this Blocked.
        :type definite: int
        """

        self._definite = definite

    @property
    def remaining(self):
        """Gets the remaining of this Blocked.

        Number of definitely blocked rooms not picked up

        :return: The remaining of this Blocked.
        :rtype: int
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this Blocked.

        Number of definitely blocked rooms not picked up

        :param remaining: The remaining of this Blocked.
        :type remaining: int
        """

        self._remaining = remaining

    @property
    def tentative(self):
        """Gets the tentative of this Blocked.

        Number of rooms blocked tentatively

        :return: The tentative of this Blocked.
        :rtype: int
        """
        return self._tentative

    @tentative.setter
    def tentative(self, tentative):
        """Sets the tentative of this Blocked.

        Number of rooms blocked tentatively

        :param tentative: The tentative of this Blocked.
        :type tentative: int
        """

        self._tentative = tentative
