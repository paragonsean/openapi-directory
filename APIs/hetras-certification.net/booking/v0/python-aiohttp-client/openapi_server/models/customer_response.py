# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_object import LinkObject
from openapi_server.models.mailing_address import MailingAddress
from openapi_server import util


class CustomerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, LinkObject]=None, customer_id: str=None, email: str=None, first_name: str=None, gender: str=None, last_name: str=None, mailing_address: MailingAddress=None, nationality: str=None, phone: str=None, primary: bool=None, subscribed_consents: List[str]=None, title: str=None):
        """CustomerResponse - a model defined in OpenAPI

        :param links: The links of this CustomerResponse.
        :param customer_id: The customer_id of this CustomerResponse.
        :param email: The email of this CustomerResponse.
        :param first_name: The first_name of this CustomerResponse.
        :param gender: The gender of this CustomerResponse.
        :param last_name: The last_name of this CustomerResponse.
        :param mailing_address: The mailing_address of this CustomerResponse.
        :param nationality: The nationality of this CustomerResponse.
        :param phone: The phone of this CustomerResponse.
        :param primary: The primary of this CustomerResponse.
        :param subscribed_consents: The subscribed_consents of this CustomerResponse.
        :param title: The title of this CustomerResponse.
        """
        self.openapi_types = {
            'links': Dict[str, LinkObject],
            'customer_id': str,
            'email': str,
            'first_name': str,
            'gender': str,
            'last_name': str,
            'mailing_address': MailingAddress,
            'nationality': str,
            'phone': str,
            'primary': bool,
            'subscribed_consents': List[str],
            'title': str
        }

        self.attribute_map = {
            'links': '_links',
            'customer_id': 'customer_id',
            'email': 'email',
            'first_name': 'first_name',
            'gender': 'gender',
            'last_name': 'last_name',
            'mailing_address': 'mailing_address',
            'nationality': 'nationality',
            'phone': 'phone',
            'primary': 'primary',
            'subscribed_consents': 'subscribed_consents',
            'title': 'title'
        }

        self._links = links
        self._customer_id = customer_id
        self._email = email
        self._first_name = first_name
        self._gender = gender
        self._last_name = last_name
        self._mailing_address = mailing_address
        self._nationality = nationality
        self._phone = phone
        self._primary = primary
        self._subscribed_consents = subscribed_consents
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerResponse of this CustomerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CustomerResponse.

        Collection of links to related resources

        :return: The links of this CustomerResponse.
        :rtype: Dict[str, LinkObject]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CustomerResponse.

        Collection of links to related resources

        :param links: The links of this CustomerResponse.
        :type links: Dict[str, LinkObject]
        """

        self._links = links

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerResponse.

        The id of a customer profile. The id is build out of the Supplier Code a dash and the profile id              shown in the hetras UI. An example id on the API for a profile with id 12345 on the level of supplier ABC               would be ABC-12345

        :return: The customer_id of this CustomerResponse.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerResponse.

        The id of a customer profile. The id is build out of the Supplier Code a dash and the profile id              shown in the hetras UI. An example id on the API for a profile with id 12345 on the level of supplier ABC               would be ABC-12345

        :param customer_id: The customer_id of this CustomerResponse.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def email(self):
        """Gets the email of this CustomerResponse.

        The primary email address of the guest

        :return: The email of this CustomerResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerResponse.

        The primary email address of the guest

        :param email: The email of this CustomerResponse.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this CustomerResponse.

        First name of the guest

        :return: The first_name of this CustomerResponse.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CustomerResponse.

        First name of the guest

        :param first_name: The first_name of this CustomerResponse.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this CustomerResponse.

        Gender

        :return: The gender of this CustomerResponse.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CustomerResponse.

        Gender

        :param gender: The gender of this CustomerResponse.
        :type gender: str
        """
        allowed_values = ["Unspecified", "Male", "Female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def last_name(self):
        """Gets the last_name of this CustomerResponse.

        Last name of the guest

        :return: The last_name of this CustomerResponse.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CustomerResponse.

        Last name of the guest

        :param last_name: The last_name of this CustomerResponse.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def mailing_address(self):
        """Gets the mailing_address of this CustomerResponse.


        :return: The mailing_address of this CustomerResponse.
        :rtype: MailingAddress
        """
        return self._mailing_address

    @mailing_address.setter
    def mailing_address(self, mailing_address):
        """Sets the mailing_address of this CustomerResponse.


        :param mailing_address: The mailing_address of this CustomerResponse.
        :type mailing_address: MailingAddress
        """

        self._mailing_address = mailing_address

    @property
    def nationality(self):
        """Gets the nationality of this CustomerResponse.

        The nationality of the guest in ISO 3166-1 alpha-2 format              (see: http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm)

        :return: The nationality of this CustomerResponse.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this CustomerResponse.

        The nationality of the guest in ISO 3166-1 alpha-2 format              (see: http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm)

        :param nationality: The nationality of this CustomerResponse.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def phone(self):
        """Gets the phone of this CustomerResponse.

        The primary phone number of the guest

        :return: The phone of this CustomerResponse.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerResponse.

        The primary phone number of the guest

        :param phone: The phone of this CustomerResponse.
        :type phone: str
        """

        self._phone = phone

    @property
    def primary(self):
        """Gets the primary of this CustomerResponse.

        Defines if the guest is the primary guest of the reservation

        :return: The primary of this CustomerResponse.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this CustomerResponse.

        Defines if the guest is the primary guest of the reservation

        :param primary: The primary of this CustomerResponse.
        :type primary: bool
        """

        self._primary = primary

    @property
    def subscribed_consents(self):
        """Gets the subscribed_consents of this CustomerResponse.

        Gets or sets the list of consents subscribed by customer

        :return: The subscribed_consents of this CustomerResponse.
        :rtype: List[str]
        """
        return self._subscribed_consents

    @subscribed_consents.setter
    def subscribed_consents(self, subscribed_consents):
        """Sets the subscribed_consents of this CustomerResponse.

        Gets or sets the list of consents subscribed by customer

        :param subscribed_consents: The subscribed_consents of this CustomerResponse.
        :type subscribed_consents: List[str]
        """

        self._subscribed_consents = subscribed_consents

    @property
    def title(self):
        """Gets the title of this CustomerResponse.

        Title of the guest. Needs to be taken from the available titles defined in the codes

        :return: The title of this CustomerResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomerResponse.

        Title of the guest. Needs to be taken from the available titles defined in the codes

        :param title: The title of this CustomerResponse.
        :type title: str
        """

        self._title = title
