# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcceptedGuaranteeTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted: List[str]=None, minimum: str=None):
        """AcceptedGuaranteeTypes - a model defined in OpenAPI

        :param accepted: The accepted of this AcceptedGuaranteeTypes.
        :param minimum: The minimum of this AcceptedGuaranteeTypes.
        """
        self.openapi_types = {
            'accepted': List[str],
            'minimum': str
        }

        self.attribute_map = {
            'accepted': 'accepted',
            'minimum': 'minimum'
        }

        self._accepted = accepted
        self._minimum = minimum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcceptedGuaranteeTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcceptedGuaranteeTypes of this AcceptedGuaranteeTypes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted(self):
        """Gets the accepted of this AcceptedGuaranteeTypes.

        In this list you find all the accepted guarantee types for this offer. They are sorted in ascending              order.

        :return: The accepted of this AcceptedGuaranteeTypes.
        :rtype: List[str]
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted):
        """Sets the accepted of this AcceptedGuaranteeTypes.

        In this list you find all the accepted guarantee types for this offer. They are sorted in ascending              order.

        :param accepted: The accepted of this AcceptedGuaranteeTypes.
        :type accepted: List[str]
        """
        allowed_values = ["PM4Hold", "PM6Hold", "GuaranteeToCreditCard", "GuaranteeToGuestAccount", "GuaranteeByTravelAgent", "GuaranteeByCompany", "Deposit", "Voucher", "Prepayment", "NonGuaranteed", "Tentative", "Waitlist"]  # noqa: E501
        if not set(accepted).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `accepted` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(accepted) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._accepted = accepted

    @property
    def minimum(self):
        """Gets the minimum of this AcceptedGuaranteeTypes.

        Based on the rateplan a reservation does need to have a minimum guarantee. When you create a new booking you              can always use a higher guarantee type starting from the minimum. If you do not specify a guarantee when creating              a new booking using this offer this guarantee type will be used by default. See               https://developer.hetras.com/docs/tutorials#payment for information about guarantee types and payment details

        :return: The minimum of this AcceptedGuaranteeTypes.
        :rtype: str
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this AcceptedGuaranteeTypes.

        Based on the rateplan a reservation does need to have a minimum guarantee. When you create a new booking you              can always use a higher guarantee type starting from the minimum. If you do not specify a guarantee when creating              a new booking using this offer this guarantee type will be used by default. See               https://developer.hetras.com/docs/tutorials#payment for information about guarantee types and payment details

        :param minimum: The minimum of this AcceptedGuaranteeTypes.
        :type minimum: str
        """
        allowed_values = ["PM4Hold", "PM6Hold", "GuaranteeToCreditCard", "GuaranteeToGuestAccount", "GuaranteeByTravelAgent", "GuaranteeByCompany", "Deposit", "Voucher", "Prepayment", "NonGuaranteed", "Tentative", "Waitlist"]  # noqa: E501
        if minimum not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum` ({0}), must be one of {1}"
                .format(minimum, allowed_values)
            )

        self._minimum = minimum
