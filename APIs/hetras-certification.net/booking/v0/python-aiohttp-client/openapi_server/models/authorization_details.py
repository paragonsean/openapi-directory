# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, expiry_date: datetime=None, merchant_reference: str=None, reference: str=None, shopper_reference: str=None):
        """AuthorizationDetails - a model defined in OpenAPI

        :param amount: The amount of this AuthorizationDetails.
        :param expiry_date: The expiry_date of this AuthorizationDetails.
        :param merchant_reference: The merchant_reference of this AuthorizationDetails.
        :param reference: The reference of this AuthorizationDetails.
        :param shopper_reference: The shopper_reference of this AuthorizationDetails.
        """
        self.openapi_types = {
            'amount': float,
            'expiry_date': datetime,
            'merchant_reference': str,
            'reference': str,
            'shopper_reference': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'expiry_date': 'expiry_date',
            'merchant_reference': 'merchant_reference',
            'reference': 'reference',
            'shopper_reference': 'shopper_reference'
        }

        self._amount = amount
        self._expiry_date = expiry_date
        self._merchant_reference = merchant_reference
        self._reference = reference
        self._shopper_reference = shopper_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationDetails of this AuthorizationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this AuthorizationDetails.

        AuthorizedAmount

        :return: The amount of this AuthorizationDetails.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AuthorizationDetails.

        AuthorizedAmount

        :param amount: The amount of this AuthorizationDetails.
        :type amount: float
        """

        self._amount = amount

    @property
    def expiry_date(self):
        """Gets the expiry_date of this AuthorizationDetails.

        Authorization ExpiryDate

        :return: The expiry_date of this AuthorizationDetails.
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this AuthorizationDetails.

        Authorization ExpiryDate

        :param expiry_date: The expiry_date of this AuthorizationDetails.
        :type expiry_date: datetime
        """

        self._expiry_date = expiry_date

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this AuthorizationDetails.

        Merchant Reference

        :return: The merchant_reference of this AuthorizationDetails.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this AuthorizationDetails.

        Merchant Reference

        :param merchant_reference: The merchant_reference of this AuthorizationDetails.
        :type merchant_reference: str
        """
        if merchant_reference is None:
            raise ValueError("Invalid value for `merchant_reference`, must not be `None`")
        if merchant_reference is not None and len(merchant_reference) > 50:
            raise ValueError("Invalid value for `merchant_reference`, length must be less than or equal to `50`")
        if merchant_reference is not None and len(merchant_reference) < 0:
            raise ValueError("Invalid value for `merchant_reference`, length must be greater than or equal to `0`")

        self._merchant_reference = merchant_reference

    @property
    def reference(self):
        """Gets the reference of this AuthorizationDetails.

        Authorization Reference

        :return: The reference of this AuthorizationDetails.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this AuthorizationDetails.

        Authorization Reference

        :param reference: The reference of this AuthorizationDetails.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")
        if reference is not None and len(reference) > 255:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `255`")
        if reference is not None and len(reference) < 0:
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `0`")

        self._reference = reference

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this AuthorizationDetails.

        Shopper Reference

        :return: The shopper_reference of this AuthorizationDetails.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this AuthorizationDetails.

        Shopper Reference

        :param shopper_reference: The shopper_reference of this AuthorizationDetails.
        :type shopper_reference: str
        """
        if shopper_reference is None:
            raise ValueError("Invalid value for `shopper_reference`, must not be `None`")
        if shopper_reference is not None and len(shopper_reference) > 50:
            raise ValueError("Invalid value for `shopper_reference`, length must be less than or equal to `50`")
        if shopper_reference is not None and len(shopper_reference) < 0:
            raise ValueError("Invalid value for `shopper_reference`, length must be greater than or equal to `0`")

        self._shopper_reference = shopper_reference
