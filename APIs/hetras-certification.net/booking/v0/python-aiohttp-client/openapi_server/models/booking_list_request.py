# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookingListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_code: str=None, cancellation_id: str=None, channel_codes: List[str]=None, company_email: str=None, company_id: str=None, company_name: str=None, customer_email: str=None, customer_id: str=None, customer_name: str=None, date_filter: str=None, exclude: str=None, external_id: str=None, _from: datetime=None, hotel_id: int=None, labels: List[str]=None, market_codes: List[str]=None, rate_plan_codes: List[str]=None, reservation_number: int=None, reservation_statuses: List[str]=None, room_number: str=None, room_types: List[str]=None, sub_channel_codes: List[str]=None, to: datetime=None):
        """BookingListRequest - a model defined in OpenAPI

        :param block_code: The block_code of this BookingListRequest.
        :param cancellation_id: The cancellation_id of this BookingListRequest.
        :param channel_codes: The channel_codes of this BookingListRequest.
        :param company_email: The company_email of this BookingListRequest.
        :param company_id: The company_id of this BookingListRequest.
        :param company_name: The company_name of this BookingListRequest.
        :param customer_email: The customer_email of this BookingListRequest.
        :param customer_id: The customer_id of this BookingListRequest.
        :param customer_name: The customer_name of this BookingListRequest.
        :param date_filter: The date_filter of this BookingListRequest.
        :param exclude: The exclude of this BookingListRequest.
        :param external_id: The external_id of this BookingListRequest.
        :param _from: The _from of this BookingListRequest.
        :param hotel_id: The hotel_id of this BookingListRequest.
        :param labels: The labels of this BookingListRequest.
        :param market_codes: The market_codes of this BookingListRequest.
        :param rate_plan_codes: The rate_plan_codes of this BookingListRequest.
        :param reservation_number: The reservation_number of this BookingListRequest.
        :param reservation_statuses: The reservation_statuses of this BookingListRequest.
        :param room_number: The room_number of this BookingListRequest.
        :param room_types: The room_types of this BookingListRequest.
        :param sub_channel_codes: The sub_channel_codes of this BookingListRequest.
        :param to: The to of this BookingListRequest.
        """
        self.openapi_types = {
            'block_code': str,
            'cancellation_id': str,
            'channel_codes': List[str],
            'company_email': str,
            'company_id': str,
            'company_name': str,
            'customer_email': str,
            'customer_id': str,
            'customer_name': str,
            'date_filter': str,
            'exclude': str,
            'external_id': str,
            '_from': datetime,
            'hotel_id': int,
            'labels': List[str],
            'market_codes': List[str],
            'rate_plan_codes': List[str],
            'reservation_number': int,
            'reservation_statuses': List[str],
            'room_number': str,
            'room_types': List[str],
            'sub_channel_codes': List[str],
            'to': datetime
        }

        self.attribute_map = {
            'block_code': 'blockCode',
            'cancellation_id': 'cancellationId',
            'channel_codes': 'channelCodes',
            'company_email': 'companyEmail',
            'company_id': 'companyId',
            'company_name': 'companyName',
            'customer_email': 'customerEmail',
            'customer_id': 'customerId',
            'customer_name': 'customerName',
            'date_filter': 'dateFilter',
            'exclude': 'exclude',
            'external_id': 'externalId',
            '_from': 'from',
            'hotel_id': 'hotelId',
            'labels': 'labels',
            'market_codes': 'marketCodes',
            'rate_plan_codes': 'ratePlanCodes',
            'reservation_number': 'reservationNumber',
            'reservation_statuses': 'reservationStatuses',
            'room_number': 'roomNumber',
            'room_types': 'roomTypes',
            'sub_channel_codes': 'subChannelCodes',
            'to': 'to'
        }

        self._block_code = block_code
        self._cancellation_id = cancellation_id
        self._channel_codes = channel_codes
        self._company_email = company_email
        self._company_id = company_id
        self._company_name = company_name
        self._customer_email = customer_email
        self._customer_id = customer_id
        self._customer_name = customer_name
        self._date_filter = date_filter
        self._exclude = exclude
        self._external_id = external_id
        self.__from = _from
        self._hotel_id = hotel_id
        self._labels = labels
        self._market_codes = market_codes
        self._rate_plan_codes = rate_plan_codes
        self._reservation_number = reservation_number
        self._reservation_statuses = reservation_statuses
        self._room_number = room_number
        self._room_types = room_types
        self._sub_channel_codes = sub_channel_codes
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BookingListRequest of this BookingListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_code(self):
        """Gets the block_code of this BookingListRequest.

        Return all bookings where the block code matches the specified value.

        :return: The block_code of this BookingListRequest.
        :rtype: str
        """
        return self._block_code

    @block_code.setter
    def block_code(self, block_code):
        """Sets the block_code of this BookingListRequest.

        Return all bookings where the block code matches the specified value.

        :param block_code: The block_code of this BookingListRequest.
        :type block_code: str
        """

        self._block_code = block_code

    @property
    def cancellation_id(self):
        """Gets the cancellation_id of this BookingListRequest.

        Return bookings for this cancellation id.

        :return: The cancellation_id of this BookingListRequest.
        :rtype: str
        """
        return self._cancellation_id

    @cancellation_id.setter
    def cancellation_id(self, cancellation_id):
        """Sets the cancellation_id of this BookingListRequest.

        Return bookings for this cancellation id.

        :param cancellation_id: The cancellation_id of this BookingListRequest.
        :type cancellation_id: str
        """

        self._cancellation_id = cancellation_id

    @property
    def channel_codes(self):
        """Gets the channel_codes of this BookingListRequest.

        Return all bookings where the channel code is one of the specified values.

        :return: The channel_codes of this BookingListRequest.
        :rtype: List[str]
        """
        return self._channel_codes

    @channel_codes.setter
    def channel_codes(self, channel_codes):
        """Sets the channel_codes of this BookingListRequest.

        Return all bookings where the channel code is one of the specified values.

        :param channel_codes: The channel_codes of this BookingListRequest.
        :type channel_codes: List[str]
        """

        self._channel_codes = channel_codes

    @property
    def company_email(self):
        """Gets the company_email of this BookingListRequest.

        Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.

        :return: The company_email of this BookingListRequest.
        :rtype: str
        """
        return self._company_email

    @company_email.setter
    def company_email(self, company_email):
        """Sets the company_email of this BookingListRequest.

        Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.

        :param company_email: The company_email of this BookingListRequest.
        :type company_email: str
        """

        self._company_email = company_email

    @property
    def company_id(self):
        """Gets the company_id of this BookingListRequest.

        Return all bookings the id of the company or travel agent profile matches the specified value.

        :return: The company_id of this BookingListRequest.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this BookingListRequest.

        Return all bookings the id of the company or travel agent profile matches the specified value.

        :param company_id: The company_id of this BookingListRequest.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def company_name(self):
        """Gets the company_name of this BookingListRequest.

        Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.

        :return: The company_name of this BookingListRequest.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this BookingListRequest.

        Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.

        :param company_name: The company_name of this BookingListRequest.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def customer_email(self):
        """Gets the customer_email of this BookingListRequest.

        Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.

        :return: The customer_email of this BookingListRequest.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this BookingListRequest.

        Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.

        :param customer_email: The customer_email of this BookingListRequest.
        :type customer_email: str
        """

        self._customer_email = customer_email

    @property
    def customer_id(self):
        """Gets the customer_id of this BookingListRequest.

        Return all bookings the id of one of the guests or the contact matches the specified value.

        :return: The customer_id of this BookingListRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this BookingListRequest.

        Return all bookings the id of one of the guests or the contact matches the specified value.

        :param customer_id: The customer_id of this BookingListRequest.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def customer_name(self):
        """Gets the customer_name of this BookingListRequest.

        Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.

        :return: The customer_name of this BookingListRequest.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this BookingListRequest.

        Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.

        :param customer_name: The customer_name of this BookingListRequest.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def date_filter(self):
        """Gets the date_filter of this BookingListRequest.

        Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range.

        :return: The date_filter of this BookingListRequest.
        :rtype: str
        """
        return self._date_filter

    @date_filter.setter
    def date_filter(self, date_filter):
        """Sets the date_filter of this BookingListRequest.

        Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range.

        :param date_filter: The date_filter of this BookingListRequest.
        :type date_filter: str
        """
        allowed_values = ["ArrivalDate", "DepartureDate", "StayDate", "CreationDate", "ModificationDate"]  # noqa: E501
        if date_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `date_filter` ({0}), must be one of {1}"
                .format(date_filter, allowed_values)
            )

        self._date_filter = date_filter

    @property
    def exclude(self):
        """Gets the exclude of this BookingListRequest.

        To be able to request reservations without personal data based on GDPR.

        :return: The exclude of this BookingListRequest.
        :rtype: str
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this BookingListRequest.

        To be able to request reservations without personal data based on GDPR.

        :param exclude: The exclude of this BookingListRequest.
        :type exclude: str
        """
        allowed_values = ["Customers"]  # noqa: E501
        if exclude not in allowed_values:
            raise ValueError(
                "Invalid value for `exclude` ({0}), must be one of {1}"
                .format(exclude, allowed_values)
            )

        self._exclude = exclude

    @property
    def external_id(self):
        """Gets the external_id of this BookingListRequest.

        Return all bookings exactly matching the specified external id. This filter is case sensitive.

        :return: The external_id of this BookingListRequest.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this BookingListRequest.

        Return all bookings exactly matching the specified external id. This filter is case sensitive.

        :param external_id: The external_id of this BookingListRequest.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def _from(self):
        """Gets the _from of this BookingListRequest.

        Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later.

        :return: The _from of this BookingListRequest.
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this BookingListRequest.

        Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later.

        :param _from: The _from of this BookingListRequest.
        :type _from: datetime
        """

        self.__from = _from

    @property
    def hotel_id(self):
        """Gets the hotel_id of this BookingListRequest.

        Only return bookings for this specific hotel.

        :return: The hotel_id of this BookingListRequest.
        :rtype: int
        """
        return self._hotel_id

    @hotel_id.setter
    def hotel_id(self, hotel_id):
        """Sets the hotel_id of this BookingListRequest.

        Only return bookings for this specific hotel.

        :param hotel_id: The hotel_id of this BookingListRequest.
        :type hotel_id: int
        """

        self._hotel_id = hotel_id

    @property
    def labels(self):
        """Gets the labels of this BookingListRequest.

        Return all reservations with at least one of the specified labels.

        :return: The labels of this BookingListRequest.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this BookingListRequest.

        Return all reservations with at least one of the specified labels.

        :param labels: The labels of this BookingListRequest.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def market_codes(self):
        """Gets the market_codes of this BookingListRequest.

        Return all bookings where the market code is one of the specified values.

        :return: The market_codes of this BookingListRequest.
        :rtype: List[str]
        """
        return self._market_codes

    @market_codes.setter
    def market_codes(self, market_codes):
        """Sets the market_codes of this BookingListRequest.

        Return all bookings where the market code is one of the specified values.

        :param market_codes: The market_codes of this BookingListRequest.
        :type market_codes: List[str]
        """

        self._market_codes = market_codes

    @property
    def rate_plan_codes(self):
        """Gets the rate_plan_codes of this BookingListRequest.

        Return all bookings where the rate plan code is one of the specified values.

        :return: The rate_plan_codes of this BookingListRequest.
        :rtype: List[str]
        """
        return self._rate_plan_codes

    @rate_plan_codes.setter
    def rate_plan_codes(self, rate_plan_codes):
        """Sets the rate_plan_codes of this BookingListRequest.

        Return all bookings where the rate plan code is one of the specified values.

        :param rate_plan_codes: The rate_plan_codes of this BookingListRequest.
        :type rate_plan_codes: List[str]
        """

        self._rate_plan_codes = rate_plan_codes

    @property
    def reservation_number(self):
        """Gets the reservation_number of this BookingListRequest.

        Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels.

        :return: The reservation_number of this BookingListRequest.
        :rtype: int
        """
        return self._reservation_number

    @reservation_number.setter
    def reservation_number(self, reservation_number):
        """Sets the reservation_number of this BookingListRequest.

        Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels.

        :param reservation_number: The reservation_number of this BookingListRequest.
        :type reservation_number: int
        """

        self._reservation_number = reservation_number

    @property
    def reservation_statuses(self):
        """Gets the reservation_statuses of this BookingListRequest.

        Return all bookings where the reservation status is one of the specified values.

        :return: The reservation_statuses of this BookingListRequest.
        :rtype: List[str]
        """
        return self._reservation_statuses

    @reservation_statuses.setter
    def reservation_statuses(self, reservation_statuses):
        """Sets the reservation_statuses of this BookingListRequest.

        Return all bookings where the reservation status is one of the specified values.

        :param reservation_statuses: The reservation_statuses of this BookingListRequest.
        :type reservation_statuses: List[str]
        """
        allowed_values = ["Tentative", "Waitlisted", "OnRequest", "NonGuaranteed", "Guaranteed", "InHouse", "CheckedOut", "NoShow", "Denied", "Cancelled", "Released", "Walked", "Expired", "WalkIn", "Registered"]  # noqa: E501
        if not set(reservation_statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `reservation_statuses` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(reservation_statuses) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._reservation_statuses = reservation_statuses

    @property
    def room_number(self):
        """Gets the room_number of this BookingListRequest.

        Return all bookings having the specified room number assigned.

        :return: The room_number of this BookingListRequest.
        :rtype: str
        """
        return self._room_number

    @room_number.setter
    def room_number(self, room_number):
        """Sets the room_number of this BookingListRequest.

        Return all bookings having the specified room number assigned.

        :param room_number: The room_number of this BookingListRequest.
        :type room_number: str
        """

        self._room_number = room_number

    @property
    def room_types(self):
        """Gets the room_types of this BookingListRequest.

        Return all bookings where the room type is one of the specified values.

        :return: The room_types of this BookingListRequest.
        :rtype: List[str]
        """
        return self._room_types

    @room_types.setter
    def room_types(self, room_types):
        """Sets the room_types of this BookingListRequest.

        Return all bookings where the room type is one of the specified values.

        :param room_types: The room_types of this BookingListRequest.
        :type room_types: List[str]
        """

        self._room_types = room_types

    @property
    def sub_channel_codes(self):
        """Gets the sub_channel_codes of this BookingListRequest.

        Return all bookings where the subchannel code is one of the specified values.

        :return: The sub_channel_codes of this BookingListRequest.
        :rtype: List[str]
        """
        return self._sub_channel_codes

    @sub_channel_codes.setter
    def sub_channel_codes(self, sub_channel_codes):
        """Sets the sub_channel_codes of this BookingListRequest.

        Return all bookings where the subchannel code is one of the specified values.

        :param sub_channel_codes: The sub_channel_codes of this BookingListRequest.
        :type sub_channel_codes: List[str]
        """

        self._sub_channel_codes = sub_channel_codes

    @property
    def to(self):
        """Gets the to of this BookingListRequest.

        End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier.

        :return: The to of this BookingListRequest.
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this BookingListRequest.

        End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier.

        :param to: The to of this BookingListRequest.
        :type to: datetime
        """

        self._to = to
