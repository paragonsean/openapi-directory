/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DailyRatesResponse from '../model/DailyRatesResponse';

/**
* DailyRates service.
* @module api/DailyRatesApi
* @version v0
*/
export default class DailyRatesApi {

    /**
    * Constructs a new DailyRatesApi. 
    * @alias module:api/DailyRatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dailyRatesGetDailyRates operation.
     * @callback module:api/DailyRatesApi~dailyRatesGetDailyRatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DailyRatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of daily rates given a hotel Id, a channel code and a date range.
     * With the rates request you can get a list of different daily rates. You will have to at least               specify the hotel, the channel code, and a calendar range. The channel code will define which rates will be               returned based on the access control configuration for the rates. Additionally rate plan codes may be specified in              the request in order to limit only those rates of the given plans, if they are not specified, it will return all the public rate plans.              If requested the caller may specify whether he wants policies or not.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId Define the hotel id to request the availability for.
     * @param {Date} from Define the first business day you would like to get availability numbers for. The day should not be in the past.
     * @param {Date} to Define the last business day you would like to get rates for (inclusive). The maximum time span between <i>'From'</i> and <i>'To'</i>              is limited to 365 days. This can't be less than the 'From' date.
     * @param {String} channelCode Define the channel code in order to look up the rates for.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [expand] Define the sections you want to expand and get informed about rates for.
     * @param {Array.<String>} [ratePlanCodes] Define the codes of rate plans to show in the response. A list of comma ',' separated rate plan codes.
     * @param {Number} [skip] Amount of items to skip.
     * @param {Number} [top] Amount of items to select.
     * @param {module:model/String} [inlinecount] Return total number of items for a given filter criteria.
     * @param {module:api/DailyRatesApi~dailyRatesGetDailyRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DailyRatesResponse}
     */
    dailyRatesGetDailyRates(appId, appKey, hotelId, from, to, channelCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling dailyRatesGetDailyRates");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling dailyRatesGetDailyRates");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling dailyRatesGetDailyRates");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling dailyRatesGetDailyRates");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling dailyRatesGetDailyRates");
      }
      // verify the required parameter 'channelCode' is set
      if (channelCode === undefined || channelCode === null) {
        throw new Error("Missing the required parameter 'channelCode' when calling dailyRatesGetDailyRates");
      }

      let pathParams = {
      };
      let queryParams = {
        'hotelId': hotelId,
        'from': from,
        'to': to,
        'channelCode': channelCode,
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv'),
        'ratePlanCodes': this.apiClient.buildCollectionParam(opts['ratePlanCodes'], 'csv'),
        'skip': opts['skip'],
        'top': opts['top'],
        'inlinecount': opts['inlinecount']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DailyRatesResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/daily_rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
