/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssignRoomCriteria from '../model/AssignRoomCriteria';
import AssignRoomResponse from '../model/AssignRoomResponse';
import AuthorizationRequest from '../model/AuthorizationRequest';
import BaseResponse from '../model/BaseResponse';
import BookingListResponse from '../model/BookingListResponse';
import CancellationResponse from '../model/CancellationResponse';
import CheckInDetails from '../model/CheckInDetails';
import OperationReservationPatchableModel from '../model/OperationReservationPatchableModel';
import Reservation from '../model/Reservation';
import ReservationConfirmation from '../model/ReservationConfirmation';
import ReservationResponse from '../model/ReservationResponse';
import ReservationsResponse from '../model/ReservationsResponse';
import TerminalAuthorizationRequest from '../model/TerminalAuthorizationRequest';
import TotalCountResponse from '../model/TotalCountResponse';

/**
* Bookings service.
* @module api/BookingsApi
* @version v0
*/
export default class BookingsApi {

    /**
    * Constructs a new BookingsApi. 
    * @alias module:api/BookingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bookingsCancelReservation operation.
     * @callback module:api/BookingsApi~bookingsCancelReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancellationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel one reservation.
     * This request will cancel one specific reservation. It will show up in the hetras UI in the Cancellation and NoShow              processing screen and it will be up to the hotel staff to either charge or waive the cancellation fee.<br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} confirmationId The confirmation id for the booking the reservation was made.
     * @param {Number} reservationNumber Specifies the reservation number for the reservation to cancel.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [sendConfirmation] Whether to send a confirmation email to the primary guest
     * @param {module:api/BookingsApi~bookingsCancelReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancellationResponse}
     */
    bookingsCancelReservation(appId, appKey, confirmationId, reservationNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsCancelReservation");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsCancelReservation");
      }
      // verify the required parameter 'confirmationId' is set
      if (confirmationId === undefined || confirmationId === null) {
        throw new Error("Missing the required parameter 'confirmationId' when calling bookingsCancelReservation");
      }
      // verify the required parameter 'reservationNumber' is set
      if (reservationNumber === undefined || reservationNumber === null) {
        throw new Error("Missing the required parameter 'reservationNumber' when calling bookingsCancelReservation");
      }

      let pathParams = {
        'confirmationId': confirmationId,
        'reservationNumber': reservationNumber
      };
      let queryParams = {
        'sendConfirmation': opts['sendConfirmation']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CancellationResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsCheckIn operation.
     * @callback module:api/BookingsApi~bookingsCheckInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a check in operation for a reservation.
     * With this call you can set a reservation to the status inhouse. It allows only single room reservations to be checked in.              The reservation must have assigned a vacant and clean room.<br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} confirmationId The confirmation id for the booking the reservation was made.
     * @param {Number} reservationNumber Specifies the reservation number for the reservation to be checked in.
     * @param {module:model/CheckInDetails} checkInDetails Specifies checkIn details, for example Client Identity.
     * @param {module:api/BookingsApi~bookingsCheckInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponse}
     */
    bookingsCheckIn(appId, appKey, confirmationId, reservationNumber, checkInDetails, callback) {
      let postBody = checkInDetails;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsCheckIn");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsCheckIn");
      }
      // verify the required parameter 'confirmationId' is set
      if (confirmationId === undefined || confirmationId === null) {
        throw new Error("Missing the required parameter 'confirmationId' when calling bookingsCheckIn");
      }
      // verify the required parameter 'reservationNumber' is set
      if (reservationNumber === undefined || reservationNumber === null) {
        throw new Error("Missing the required parameter 'reservationNumber' when calling bookingsCheckIn");
      }
      // verify the required parameter 'checkInDetails' is set
      if (checkInDetails === undefined || checkInDetails === null) {
        throw new Error("Missing the required parameter 'checkInDetails' when calling bookingsCheckIn");
      }

      let pathParams = {
        'confirmationId': confirmationId,
        'reservationNumber': reservationNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/check_in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsCheckOut operation.
     * @callback module:api/BookingsApi~bookingsCheckOutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a check out operation for a reservation.
     * With this call you can set a reservation to the checkout status. It allows only single room reservations to be checked out.              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} confirmationId The confirmation id for the booking the reservation was made.
     * @param {Number} reservationNumber Specifies the reservation number for the reservation to be checked out.
     * @param {module:api/BookingsApi~bookingsCheckOutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponse}
     */
    bookingsCheckOut(appId, appKey, confirmationId, reservationNumber, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsCheckOut");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsCheckOut");
      }
      // verify the required parameter 'confirmationId' is set
      if (confirmationId === undefined || confirmationId === null) {
        throw new Error("Missing the required parameter 'confirmationId' when calling bookingsCheckOut");
      }
      // verify the required parameter 'reservationNumber' is set
      if (reservationNumber === undefined || reservationNumber === null) {
        throw new Error("Missing the required parameter 'reservationNumber' when calling bookingsCheckOut");
      }

      let pathParams = {
        'confirmationId': confirmationId,
        'reservationNumber': reservationNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/check_out', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsCreateBooking operation.
     * @callback module:api/BookingsApi~bookingsCreateBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReservationConfirmation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new booking.
     * Create a new booking as defined in the requests payload. You can get more information about the payload if you check out the              documentation for the reservation request model.<br />              Please also have a look at the <a href=\"https://developer.hetras.com/docs/tutorials\" onfocus=\"this.blur()\">Tutorials</a>.<br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {module:model/Reservation} reservation Specifies the details of the booking to be created.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [sendConfirmation] Whether to send a confirmation email to the primary guest
     * @param {module:api/BookingsApi~bookingsCreateBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReservationConfirmation}
     */
    bookingsCreateBooking(appId, appKey, reservation, opts, callback) {
      opts = opts || {};
      let postBody = reservation;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsCreateBooking");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsCreateBooking");
      }
      // verify the required parameter 'reservation' is set
      if (reservation === undefined || reservation === null) {
        throw new Error("Missing the required parameter 'reservation' when calling bookingsCreateBooking");
      }

      let pathParams = {
      };
      let queryParams = {
        'sendConfirmation': opts['sendConfirmation']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ReservationConfirmation;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsGetBooking operation.
     * @callback module:api/BookingsApi~bookingsGetBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReservationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load all reservations for one booking by confirmation id.
     * A booking groups all reservations done in one single request and can be identified by the confirmation id.              Guests usually use the confirmation id to check in at the kiosk, on the website or mobile device. In hetras              all reservations of one booking share the room type, rate plan and number of guests per room.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} confirmationId The confirmation id for the booking to load.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [expand] Specifies the expand type.
     * @param {module:model/String} [exclude] Specifies the exclude type.
     * @param {module:api/BookingsApi~bookingsGetBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReservationsResponse}
     */
    bookingsGetBooking(appId, appKey, confirmationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsGetBooking");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsGetBooking");
      }
      // verify the required parameter 'confirmationId' is set
      if (confirmationId === undefined || confirmationId === null) {
        throw new Error("Missing the required parameter 'confirmationId' when calling bookingsGetBooking");
      }

      let pathParams = {
        'confirmationId': confirmationId
      };
      let queryParams = {
        'expand': opts['expand'],
        'exclude': opts['exclude']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ReservationsResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/{confirmationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsGetBookings operation.
     * @callback module:api/BookingsApi~bookingsGetBookingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookingListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find bookings matching the given filter criteria.
     * Here you can easily find bookings matching various criteria. The booking you are looking for has to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get all bookings where the firstname or lastname of a guest or a               contact contains the specified value and that have been done through the defined channel.              A booking can consist of multiple reservations, so even if you are looking for a specific reservation which is part of a multi-room booking you will get              all reservations for this booking returned.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Object} opts Optional parameters
     * @param {Number} [hotelId] Only return bookings for this specific hotel.
     * @param {String} [cancellationId] Return bookings for this cancellation id.
     * @param {Number} [reservationNumber] Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels.
     * @param {String} [customerName] Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
     * @param {String} [customerEmail] Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
     * @param {String} [customerId] Return all bookings the id of one of the guests or the contact matches the specified value.
     * @param {String} [roomNumber] Return all bookings having the specified room number assigned.
     * @param {String} [externalId] Return all bookings exactly matching the specified external id. This filter is case sensitive.
     * @param {String} [companyName] Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
     * @param {String} [companyId] Return all bookings the id of the company or travel agent profile matches the specified value.
     * @param {String} [companyEmail] Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
     * @param {String} [blockCode] Return all bookings where the block code matches the specified value.
     * @param {Array.<module:model/String>} [reservationStatuses] Return all bookings where the reservation status is one of the specified values.
     * @param {Array.<String>} [marketCodes] Return all bookings where the market code is one of the specified values.
     * @param {Array.<String>} [channelCodes] Return all bookings where the channel code is one of the specified values.
     * @param {Array.<String>} [subChannelCodes] Return all bookings where the subchannel code is one of the specified values.
     * @param {Array.<String>} [roomTypes] Return all bookings where the room type is one of the specified values.
     * @param {Array.<String>} [ratePlanCodes] Return all bookings where the rate plan code is one of the specified values.
     * @param {Array.<String>} [labels] Return all reservations with at least one of the specified labels.
     * @param {Date} [from] Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later.
     * @param {Date} [to] End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier.
     * @param {module:model/String} [dateFilter] Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range.
     * @param {module:model/String} [exclude] To be able to request reservations without personal data based on GDPR.
     * @param {Number} [skip] Amount of items to skip.
     * @param {Number} [top] Amount of items to select.
     * @param {module:model/String} [inlinecount] Return total number of items for a given filter criteria.
     * @param {module:api/BookingsApi~bookingsGetBookingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookingListResponse}
     */
    bookingsGetBookings(appId, appKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsGetBookings");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsGetBookings");
      }

      let pathParams = {
      };
      let queryParams = {
        'hotelId': opts['hotelId'],
        'cancellationId': opts['cancellationId'],
        'reservationNumber': opts['reservationNumber'],
        'customerName': opts['customerName'],
        'customerEmail': opts['customerEmail'],
        'customerId': opts['customerId'],
        'roomNumber': opts['roomNumber'],
        'externalId': opts['externalId'],
        'companyName': opts['companyName'],
        'companyId': opts['companyId'],
        'companyEmail': opts['companyEmail'],
        'blockCode': opts['blockCode'],
        'reservationStatuses': this.apiClient.buildCollectionParam(opts['reservationStatuses'], 'csv'),
        'marketCodes': this.apiClient.buildCollectionParam(opts['marketCodes'], 'csv'),
        'channelCodes': this.apiClient.buildCollectionParam(opts['channelCodes'], 'csv'),
        'subChannelCodes': this.apiClient.buildCollectionParam(opts['subChannelCodes'], 'csv'),
        'roomTypes': this.apiClient.buildCollectionParam(opts['roomTypes'], 'csv'),
        'ratePlanCodes': this.apiClient.buildCollectionParam(opts['ratePlanCodes'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'csv'),
        'from': opts['from'],
        'to': opts['to'],
        'dateFilter': opts['dateFilter'],
        'exclude': opts['exclude'],
        'skip': opts['skip'],
        'top': opts['top'],
        'inlinecount': opts['inlinecount']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = BookingListResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsGetBookingsCount operation.
     * @callback module:api/BookingsApi~bookingsGetBookingsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotalCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get total count of bookings matchung the given filter criteria.
     * Get the count of all bookings matching your criteria. The bookings have to fullfill all the specified criteria              at the same time. So if you specify a customer name and a channel code you will get the count for all bookings where the firstname or lastname               of a guest or a contact contains the specified value and that have been done through the defined channel.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Object} opts Optional parameters
     * @param {Number} [hotelId] Only return bookings for this specific hotel.
     * @param {String} [cancellationId] Return bookings for this cancellation id.
     * @param {Number} [reservationNumber] Return bookings matching this reservation number. Please note that reservation numbers are only unique within a hotel. If you              don´t specify a hotel filter at the same time you could get back multiple bookings from different hotels.
     * @param {String} [customerName] Return all bookings where the first or lastname of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
     * @param {String} [customerEmail] Return all bookings where the primary email address of one of the guests or the contact contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
     * @param {String} [customerId] Return all bookings the id of one of the guests or the contact matches the specified value.
     * @param {String} [roomNumber] Return all bookings having the specified room number assigned.
     * @param {String} [externalId] Return all bookings exactly matching the specified external id. This filter is case sensitive.
     * @param {String} [companyName] Return all bookings where the name of the linked company or travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
     * @param {String} [companyId] Return all bookings the id of the company or travel agent profile matches the specified value.
     * @param {String} [companyEmail] Return all bookings where the primary email address of the company or the travel agent profile contains the specified value. The search is executed case insensitive              and also stripping of any whitespaces.
     * @param {String} [blockCode] Return all bookings where the block code matches the specified value.
     * @param {Array.<module:model/String>} [reservationStatuses] Return all bookings where the reservation status is one of the specified values.
     * @param {Array.<String>} [marketCodes] Return all bookings where the market code is one of the specified values.
     * @param {Array.<String>} [channelCodes] Return all bookings where the channel code is one of the specified values.
     * @param {Array.<String>} [subChannelCodes] Return all bookings where the subchannel code is one of the specified values.
     * @param {Array.<String>} [roomTypes] Return all bookings where the room type is one of the specified values.
     * @param {Array.<String>} [ratePlanCodes] Return all bookings where the rate plan code is one of the specified values.
     * @param {Array.<String>} [labels] Return all reservations with at least one of the specified labels.
     * @param {Date} [from] Start date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or later.
     * @param {Date} [to] End date for the selected date filter. If you select arrival date as date filter the bookings returned will have at least              one reservation arriving on the specified date or earlier.
     * @param {module:model/String} [dateFilter] Select a date field you want to filter bookings by. Only one filter at a time can be applied. The to and from dates              will then define the time range.
     * @param {module:model/String} [exclude] To be able to request reservations without personal data based on GDPR.
     * @param {module:api/BookingsApi~bookingsGetBookingsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotalCountResponse}
     */
    bookingsGetBookingsCount(appId, appKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsGetBookingsCount");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsGetBookingsCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'hotelId': opts['hotelId'],
        'cancellationId': opts['cancellationId'],
        'reservationNumber': opts['reservationNumber'],
        'customerName': opts['customerName'],
        'customerEmail': opts['customerEmail'],
        'customerId': opts['customerId'],
        'roomNumber': opts['roomNumber'],
        'externalId': opts['externalId'],
        'companyName': opts['companyName'],
        'companyId': opts['companyId'],
        'companyEmail': opts['companyEmail'],
        'blockCode': opts['blockCode'],
        'reservationStatuses': this.apiClient.buildCollectionParam(opts['reservationStatuses'], 'csv'),
        'marketCodes': this.apiClient.buildCollectionParam(opts['marketCodes'], 'csv'),
        'channelCodes': this.apiClient.buildCollectionParam(opts['channelCodes'], 'csv'),
        'subChannelCodes': this.apiClient.buildCollectionParam(opts['subChannelCodes'], 'csv'),
        'roomTypes': this.apiClient.buildCollectionParam(opts['roomTypes'], 'csv'),
        'ratePlanCodes': this.apiClient.buildCollectionParam(opts['ratePlanCodes'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'csv'),
        'from': opts['from'],
        'to': opts['to'],
        'dateFilter': opts['dateFilter'],
        'exclude': opts['exclude']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = TotalCountResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/$count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsGetReservation operation.
     * @callback module:api/BookingsApi~bookingsGetReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReservationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load a specific reservation from a booking.
     * With this request you can load one specific reservation done with one booking request.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} confirmationId The confirmation id for the booking the reservation was made.
     * @param {Number} reservationNumber Specifies the reservation number for the reservation to load.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [expand] Specifies the expand type.
     * @param {module:model/String} [exclude] Specifies the exclude type.
     * @param {module:api/BookingsApi~bookingsGetReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReservationResponse}
     */
    bookingsGetReservation(appId, appKey, confirmationId, reservationNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsGetReservation");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsGetReservation");
      }
      // verify the required parameter 'confirmationId' is set
      if (confirmationId === undefined || confirmationId === null) {
        throw new Error("Missing the required parameter 'confirmationId' when calling bookingsGetReservation");
      }
      // verify the required parameter 'reservationNumber' is set
      if (reservationNumber === undefined || reservationNumber === null) {
        throw new Error("Missing the required parameter 'reservationNumber' when calling bookingsGetReservation");
      }

      let pathParams = {
        'confirmationId': confirmationId,
        'reservationNumber': reservationNumber
      };
      let queryParams = {
        'expand': opts['expand'],
        'exclude': opts['exclude']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ReservationResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsPatch operation.
     * @callback module:api/BookingsApi~bookingsPatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially updates a reservation.
     * The hetras API is using this <a href=\"https://developer.hetras.com/docs/patch\" onfocus=\"this.blur()\" target=\"_blank\">Patch Specification</a>              to partially update an existing resource. Currently this call allows to update the following fields:              external_id, market_code, channel_code, subchannel_code, guarantee_type, comment, addon_services, labels, guests, contact and company.              <br /><br />              A request example:<br /><pre>              [                {                  \"op\": \"replace\", \"path\": \"/addon_services\", \"value\": [\"BREAKFAST\", \"PARKING\"]                },                {                  \"op\": \"add\", \"path\": \"/labels/-\", \"value\": \"MOBILE\"                },                {                  \"op\": \"replace\", \"path\": \"/guests/SHOW-1234\", \"value\": { \"customer_id\": \"SHOW-1234\", \"primary\": false }                },                {                  \"op\": \"add\", \"path\": \"/guests/-\", \"value\": { \"customer_id\": \"SHOW-5678\", \"primary\": true }                }              ]              </pre><br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} confirmationId The confirmation id for the booking the reservation was made.
     * @param {Number} reservationNumber Specifies the reservation number for the reservation that has to be updated.
     * @param {Array.<module:model/OperationReservationPatchableModel>} patchRequest A set of JSON Patch operations
     * @param {module:api/BookingsApi~bookingsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    bookingsPatch(appId, appKey, confirmationId, reservationNumber, patchRequest, callback) {
      let postBody = patchRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsPatch");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsPatch");
      }
      // verify the required parameter 'confirmationId' is set
      if (confirmationId === undefined || confirmationId === null) {
        throw new Error("Missing the required parameter 'confirmationId' when calling bookingsPatch");
      }
      // verify the required parameter 'reservationNumber' is set
      if (reservationNumber === undefined || reservationNumber === null) {
        throw new Error("Missing the required parameter 'reservationNumber' when calling bookingsPatch");
      }
      // verify the required parameter 'patchRequest' is set
      if (patchRequest === undefined || patchRequest === null) {
        throw new Error("Missing the required parameter 'patchRequest' when calling bookingsPatch");
      }

      let pathParams = {
        'confirmationId': confirmationId,
        'reservationNumber': reservationNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsPaymentToken operation.
     * @callback module:api/BookingsApi~bookingsPaymentTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a payment token for a reservation.
     * TBD.<br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} confirmationId The confirmation id for the booking the reservation was made.
     * @param {Number} reservationNumber Specifies the reservation number for the reservation to be checked in.
     * @param {module:model/AuthorizationRequest} authorizationRequest 
     * @param {module:api/BookingsApi~bookingsPaymentTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponse}
     */
    bookingsPaymentToken(appId, appKey, confirmationId, reservationNumber, authorizationRequest, callback) {
      let postBody = authorizationRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsPaymentToken");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsPaymentToken");
      }
      // verify the required parameter 'confirmationId' is set
      if (confirmationId === undefined || confirmationId === null) {
        throw new Error("Missing the required parameter 'confirmationId' when calling bookingsPaymentToken");
      }
      // verify the required parameter 'reservationNumber' is set
      if (reservationNumber === undefined || reservationNumber === null) {
        throw new Error("Missing the required parameter 'reservationNumber' when calling bookingsPaymentToken");
      }
      // verify the required parameter 'authorizationRequest' is set
      if (authorizationRequest === undefined || authorizationRequest === null) {
        throw new Error("Missing the required parameter 'authorizationRequest' when calling bookingsPaymentToken");
      }

      let pathParams = {
        'confirmationId': confirmationId,
        'reservationNumber': reservationNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/payment_token', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsPostRoomAssignment operation.
     * @callback module:api/BookingsApi~bookingsPostRoomAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignRoomResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign a room to a reservation.
     * By default this API call assigns a random room, which has the proper room type, is not already assigned              to another reservation or has any maintenance status set for the stay period of the underlying reservation. If the              arrival date for the underlying reservation is the current business day dirty rooms are excluded by default. For reservation              arriving on any latter day the room condition is not taken into account.<br />              By specifiying the room selection criteria in the request body you can influence which room will be assigned. See the request model              for further details.<br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} confirmationId The confirmation id for the booking the reservation was made.
     * @param {Number} reservationNumber Specifies the reservation number for the reservation the room should be assigned to.
     * @param {Object} opts Optional parameters
     * @param {module:model/AssignRoomCriteria} [assigningCriteria] Specifies the criteria for the room selection.
     * @param {module:api/BookingsApi~bookingsPostRoomAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignRoomResponse}
     */
    bookingsPostRoomAssignment(appId, appKey, confirmationId, reservationNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['assigningCriteria'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsPostRoomAssignment");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsPostRoomAssignment");
      }
      // verify the required parameter 'confirmationId' is set
      if (confirmationId === undefined || confirmationId === null) {
        throw new Error("Missing the required parameter 'confirmationId' when calling bookingsPostRoomAssignment");
      }
      // verify the required parameter 'reservationNumber' is set
      if (reservationNumber === undefined || reservationNumber === null) {
        throw new Error("Missing the required parameter 'reservationNumber' when calling bookingsPostRoomAssignment");
      }

      let pathParams = {
        'confirmationId': confirmationId,
        'reservationNumber': reservationNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = AssignRoomResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/assign_room', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookingsTerminalAuthorization operation.
     * @callback module:api/BookingsApi~bookingsTerminalAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a chip and pin credit card authorization for a reservation.
     * With this call you can trigger a terminal authorization prompt for a reservation guest.               For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} confirmationId The confirmation id for the booking the reservation was made.
     * @param {Number} reservationNumber Specifies the reservation number for the reservation to be checked in.
     * @param {module:model/TerminalAuthorizationRequest} authorizationRequest Specifies authorization details, such as amount and client identity.
     * @param {module:api/BookingsApi~bookingsTerminalAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponse}
     */
    bookingsTerminalAuthorization(appId, appKey, confirmationId, reservationNumber, authorizationRequest, callback) {
      let postBody = authorizationRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling bookingsTerminalAuthorization");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling bookingsTerminalAuthorization");
      }
      // verify the required parameter 'confirmationId' is set
      if (confirmationId === undefined || confirmationId === null) {
        throw new Error("Missing the required parameter 'confirmationId' when calling bookingsTerminalAuthorization");
      }
      // verify the required parameter 'reservationNumber' is set
      if (reservationNumber === undefined || reservationNumber === null) {
        throw new Error("Missing the required parameter 'reservationNumber' when calling bookingsTerminalAuthorization");
      }
      // verify the required parameter 'authorizationRequest' is set
      if (authorizationRequest === undefined || authorizationRequest === null) {
        throw new Error("Missing the required parameter 'authorizationRequest' when calling bookingsTerminalAuthorization");
      }

      let pathParams = {
        'confirmationId': confirmationId,
        'reservationNumber': reservationNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/bookings/{confirmationId}/reservations/{reservationNumber}/pre_authorize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
