/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancellationToken from '../model/CancellationToken';
import TotalCountResponse from '../model/TotalCountResponse';

/**
* Blocks service.
* @module api/BlocksApi
* @version v0
*/
export default class BlocksApi {

    /**
    * Constructs a new BlocksApi. 
    * @alias module:api/BlocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the blocksGetBlocksAsync operation.
     * @callback module:api/BlocksApi~blocksGetBlocksAsyncCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of blocks.
     * With this endpoint you can request a list of blocks for the hotel chain. Currently we only support to optionally              filter by the group code linked to the block. Additional filters will be available soon.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {module:model/CancellationToken} token 
     * @param {Object} opts Optional parameters
     * @param {Number} [hotelId] Only return blocks for this specific hotel.
     * @param {String} [groupCode] Filter the blocks by the specified group code
     * @param {Date} [from] Return all blocks where the block's last_departure is greater than specified date.
     * @param {Date} [to] Return all blocks where the block's last_departure is less than specified date.
     * @param {module:model/String} [status] Return all blocks where the block status is one of the specified values.
     * @param {Array.<String>} [ratePlanCodes] Return all blocks that have related the specified comma-separated rate plans.
     * @param {Boolean} [countDetails] If true it will include also details of block count per each room type.
     * @param {Number} [skip] Amount of items to skip.
     * @param {Number} [top] Amount of items to select.
     * @param {module:model/String} [inlinecount] Return total number of items for a given filter criteria.
     * @param {module:api/BlocksApi~blocksGetBlocksAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    blocksGetBlocksAsync(appId, appKey, token, opts, callback) {
      opts = opts || {};
      let postBody = token;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling blocksGetBlocksAsync");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling blocksGetBlocksAsync");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling blocksGetBlocksAsync");
      }

      let pathParams = {
      };
      let queryParams = {
        'hotelId': opts['hotelId'],
        'groupCode': opts['groupCode'],
        'from': opts['from'],
        'to': opts['to'],
        'status': opts['status'],
        'ratePlanCodes': this.apiClient.buildCollectionParam(opts['ratePlanCodes'], 'csv'),
        'countDetails': opts['countDetails'],
        'skip': opts['skip'],
        'top': opts['top'],
        'inlinecount': opts['inlinecount']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/booking/v0/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blocksGetBlocksCountAsync operation.
     * @callback module:api/BlocksApi~blocksGetBlocksCountAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotalCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get total blocks count that match the given filter criteria.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {module:model/CancellationToken} token 
     * @param {Object} opts Optional parameters
     * @param {Number} [hotelId] Only return blocks for this specific hotel.
     * @param {String} [groupCode] Filter the blocks by the specified group code
     * @param {Date} [from] Return all blocks where the block's last_departure is greater than specified date.
     * @param {Date} [to] Return all blocks where the block's last_departure is less than specified date.
     * @param {module:model/String} [status] Return all blocks where the block status is one of the specified values.
     * @param {Array.<String>} [ratePlanCodes] Return all blocks that have related the specified comma-separated rate plans.
     * @param {Boolean} [countDetails] If true it will include also details of block count per each room type.
     * @param {module:api/BlocksApi~blocksGetBlocksCountAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotalCountResponse}
     */
    blocksGetBlocksCountAsync(appId, appKey, token, opts, callback) {
      opts = opts || {};
      let postBody = token;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling blocksGetBlocksCountAsync");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling blocksGetBlocksCountAsync");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling blocksGetBlocksCountAsync");
      }

      let pathParams = {
      };
      let queryParams = {
        'hotelId': opts['hotelId'],
        'groupCode': opts['groupCode'],
        'from': opts['from'],
        'to': opts['to'],
        'status': opts['status'],
        'ratePlanCodes': this.apiClient.buildCollectionParam(opts['ratePlanCodes'], 'csv'),
        'countDetails': opts['countDetails']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = TotalCountResponse;
      return this.apiClient.callApi(
        '/api/booking/v0/blocks/$count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blocksGetSingleBlockAsync operation.
     * @callback module:api/BlocksApi~blocksGetSingleBlockAsyncCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details for a specific block.
     * Read all informationen about a block including the numbers of blocked rooms per room type and business day.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {String} blockCode Specifies the block code. The block code is composed of the hotel code, a dash and the block code               as shown in the hetras UI.
     * @param {module:model/CancellationToken} token 
     * @param {module:api/BlocksApi~blocksGetSingleBlockAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    blocksGetSingleBlockAsync(appId, appKey, blockCode, token, callback) {
      let postBody = token;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling blocksGetSingleBlockAsync");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling blocksGetSingleBlockAsync");
      }
      // verify the required parameter 'blockCode' is set
      if (blockCode === undefined || blockCode === null) {
        throw new Error("Missing the required parameter 'blockCode' when calling blocksGetSingleBlockAsync");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling blocksGetSingleBlockAsync");
      }

      let pathParams = {
        'blockCode': blockCode
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/booking/v0/blocks/{blockCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
