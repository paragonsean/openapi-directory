/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Rates from '../model/Rates';

/**
* Rates service.
* @module api/RatesApi
* @version v0
*/
export default class RatesApi {

    /**
    * Constructs a new RatesApi. 
    * @alias module:api/RatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ratesGet operation.
     * @callback module:api/RatesApi~ratesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of room offers for the specified guest stay details.
     * With the rates request you can get a list of different rate offers per room type. You will have to at least               specify the hotel, the arrival and departure date, number of adults per room and the channel code. The channel code              will define which rates will be returned based on the access control configuration for the rates.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId Specifies the hotel id to request offers for.
     * @param {Date} arrivalDate Date of arrival for the guest in the ISO-8601 format \"YYYY-MM-DD\".
     * @param {Date} departureDate Date of departure for the guest in the ISO-8601 format \"YYYY-MM-DD\".
     * @param {String} channelCode Channel Code the rate plan needs to be configured for.
     * @param {Blob} adults Number of adults per room.
     * @param {Object} opts Optional parameters
     * @param {Blob} [rooms] Number of rooms (default is 1).
     * @param {String} [roomType] Only return offers with rates for the specified room type code.
     * @param {String} [ratePlanCode] Only return offers for the specified room type code.
     * @param {String} [groupCode] Only return offers for the specified group code.
     * @param {module:model/String} [expand] Expand the rates breakdown if required.
     * @param {module:api/RatesApi~ratesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rates}
     */
    ratesGet(appId, appKey, hotelId, arrivalDate, departureDate, channelCode, adults, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratesGet");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratesGet");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratesGet");
      }
      // verify the required parameter 'arrivalDate' is set
      if (arrivalDate === undefined || arrivalDate === null) {
        throw new Error("Missing the required parameter 'arrivalDate' when calling ratesGet");
      }
      // verify the required parameter 'departureDate' is set
      if (departureDate === undefined || departureDate === null) {
        throw new Error("Missing the required parameter 'departureDate' when calling ratesGet");
      }
      // verify the required parameter 'channelCode' is set
      if (channelCode === undefined || channelCode === null) {
        throw new Error("Missing the required parameter 'channelCode' when calling ratesGet");
      }
      // verify the required parameter 'adults' is set
      if (adults === undefined || adults === null) {
        throw new Error("Missing the required parameter 'adults' when calling ratesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'hotelId': hotelId,
        'arrivalDate': arrivalDate,
        'departureDate': departureDate,
        'channelCode': channelCode,
        'adults': adults,
        'rooms': opts['rooms'],
        'roomType': opts['roomType'],
        'ratePlanCode': opts['ratePlanCode'],
        'groupCode': opts['groupCode'],
        'expand': opts['expand']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Rates;
      return this.apiClient.callApi(
        '/api/booking/v0/rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
