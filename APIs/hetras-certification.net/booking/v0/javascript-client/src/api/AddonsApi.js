/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Addons from '../model/Addons';

/**
* Addons service.
* @module api/AddonsApi
* @version v0
*/
export default class AddonsApi {

    /**
    * Constructs a new AddonsApi. 
    * @alias module:api/AddonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addonsGet operation.
     * @callback module:api/AddonsApi~addonsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Addons} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of offers for addon services for the specified guest stay details.
     * With the addons request you can get a list of offers for addon services available for a specific rate, room type              and guest stay details.The channel code will define which rates will be returned based on the access control               configuration for related rates.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId Specifies the hotel id to request offers for.
     * @param {Date} arrivalDate Date from when the addon service will be booked to the reservation in the ISO-8601 format \"YYYY-MM-DD\".
     * @param {Date} departureDate Date until when the addon service will be booked to the reservation in the ISO-8601 format \"YYYY-MM-DD\".              This is usually the departure date of the reservation.
     * @param {String} channelCode Channel Code the rate plan needs to be configured for.
     * @param {Blob} adults Number of adults per room.
     * @param {Blob} rooms Number of rooms.
     * @param {String} roomType Only return offers for the specified room type code.
     * @param {String} ratePlanCode Only return offers for the specified rate plan code.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [expand] Expand the rates breakdown if required.
     * @param {module:api/AddonsApi~addonsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addons}
     */
    addonsGet(appId, appKey, hotelId, arrivalDate, departureDate, channelCode, adults, rooms, roomType, ratePlanCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling addonsGet");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling addonsGet");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling addonsGet");
      }
      // verify the required parameter 'arrivalDate' is set
      if (arrivalDate === undefined || arrivalDate === null) {
        throw new Error("Missing the required parameter 'arrivalDate' when calling addonsGet");
      }
      // verify the required parameter 'departureDate' is set
      if (departureDate === undefined || departureDate === null) {
        throw new Error("Missing the required parameter 'departureDate' when calling addonsGet");
      }
      // verify the required parameter 'channelCode' is set
      if (channelCode === undefined || channelCode === null) {
        throw new Error("Missing the required parameter 'channelCode' when calling addonsGet");
      }
      // verify the required parameter 'adults' is set
      if (adults === undefined || adults === null) {
        throw new Error("Missing the required parameter 'adults' when calling addonsGet");
      }
      // verify the required parameter 'rooms' is set
      if (rooms === undefined || rooms === null) {
        throw new Error("Missing the required parameter 'rooms' when calling addonsGet");
      }
      // verify the required parameter 'roomType' is set
      if (roomType === undefined || roomType === null) {
        throw new Error("Missing the required parameter 'roomType' when calling addonsGet");
      }
      // verify the required parameter 'ratePlanCode' is set
      if (ratePlanCode === undefined || ratePlanCode === null) {
        throw new Error("Missing the required parameter 'ratePlanCode' when calling addonsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'hotelId': hotelId,
        'arrivalDate': arrivalDate,
        'departureDate': departureDate,
        'channelCode': channelCode,
        'adults': adults,
        'rooms': rooms,
        'roomType': roomType,
        'ratePlanCode': ratePlanCode,
        'expand': opts['expand']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Addons;
      return this.apiClient.callApi(
        '/api/booking/v0/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
