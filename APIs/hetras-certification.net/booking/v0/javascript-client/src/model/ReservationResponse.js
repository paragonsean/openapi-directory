/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockInfo from './BlockInfo';
import CancellationPolicy from './CancellationPolicy';
import Company from './Company';
import ContactResponse from './ContactResponse';
import CustomerResponse from './CustomerResponse';
import DailyRate from './DailyRate';
import EmbeddedRoom from './EmbeddedRoom';
import GeneralPolicy from './GeneralPolicy';
import GuaranteeResponse from './GuaranteeResponse';
import NoShowPolicy from './NoShowPolicy';
import Rate from './Rate';
import RatePlan from './RatePlan';
import Service from './Service';

/**
 * The ReservationResponse model module.
 * @module model/ReservationResponse
 * @version v0
 */
class ReservationResponse {
    /**
     * Constructs a new <code>ReservationResponse</code>.
     * @alias module:model/ReservationResponse
     */
    constructor() { 
        
        ReservationResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReservationResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReservationResponse} obj Optional instance to populate.
     * @return {module:model/ReservationResponse} The populated <code>ReservationResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReservationResponse();

            if (data.hasOwnProperty('_warnings')) {
                obj['_warnings'] = ApiClient.convertToType(data['_warnings'], ['String']);
            }
            if (data.hasOwnProperty('addon_services')) {
                obj['addon_services'] = ApiClient.convertToType(data['addon_services'], ['String']);
            }
            if (data.hasOwnProperty('adults')) {
                obj['adults'] = ApiClient.convertToType(data['adults'], 'Number');
            }
            if (data.hasOwnProperty('arrival_date')) {
                obj['arrival_date'] = ApiClient.convertToType(data['arrival_date'], 'Date');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('block')) {
                obj['block'] = BlockInfo.constructFromObject(data['block']);
            }
            if (data.hasOwnProperty('cancellation_id')) {
                obj['cancellation_id'] = ApiClient.convertToType(data['cancellation_id'], 'String');
            }
            if (data.hasOwnProperty('cancellation_policies')) {
                obj['cancellation_policies'] = ApiClient.convertToType(data['cancellation_policies'], [CancellationPolicy]);
            }
            if (data.hasOwnProperty('channel_code')) {
                obj['channel_code'] = ApiClient.convertToType(data['channel_code'], 'String');
            }
            if (data.hasOwnProperty('checkin_time')) {
                obj['checkin_time'] = ApiClient.convertToType(data['checkin_time'], 'Date');
            }
            if (data.hasOwnProperty('checkout_time')) {
                obj['checkout_time'] = ApiClient.convertToType(data['checkout_time'], 'Date');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = Company.constructFromObject(data['company']);
            }
            if (data.hasOwnProperty('confirmation_id')) {
                obj['confirmation_id'] = ApiClient.convertToType(data['confirmation_id'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ContactResponse.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('departure_date')) {
                obj['departure_date'] = ApiClient.convertToType(data['departure_date'], 'Date');
            }
            if (data.hasOwnProperty('external_id')) {
                obj['external_id'] = ApiClient.convertToType(data['external_id'], 'String');
            }
            if (data.hasOwnProperty('general_policies')) {
                obj['general_policies'] = ApiClient.convertToType(data['general_policies'], [GeneralPolicy]);
            }
            if (data.hasOwnProperty('guarantee')) {
                obj['guarantee'] = GuaranteeResponse.constructFromObject(data['guarantee']);
            }
            if (data.hasOwnProperty('guests')) {
                obj['guests'] = ApiClient.convertToType(data['guests'], [CustomerResponse]);
            }
            if (data.hasOwnProperty('hotel_id')) {
                obj['hotel_id'] = ApiClient.convertToType(data['hotel_id'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('market_code')) {
                obj['market_code'] = ApiClient.convertToType(data['market_code'], 'String');
            }
            if (data.hasOwnProperty('noshow_policy')) {
                obj['noshow_policy'] = NoShowPolicy.constructFromObject(data['noshow_policy']);
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = ApiClient.convertToType(data['payment_method'], 'String');
            }
            if (data.hasOwnProperty('rate_plan')) {
                obj['rate_plan'] = RatePlan.constructFromObject(data['rate_plan']);
            }
            if (data.hasOwnProperty('reservation_number')) {
                obj['reservation_number'] = ApiClient.convertToType(data['reservation_number'], 'Number');
            }
            if (data.hasOwnProperty('reservation_status')) {
                obj['reservation_status'] = ApiClient.convertToType(data['reservation_status'], 'String');
            }
            if (data.hasOwnProperty('room')) {
                obj['room'] = EmbeddedRoom.constructFromObject(data['room']);
            }
            if (data.hasOwnProperty('room_rates')) {
                obj['room_rates'] = ApiClient.convertToType(data['room_rates'], [DailyRate]);
            }
            if (data.hasOwnProperty('rooms')) {
                obj['rooms'] = ApiClient.convertToType(data['rooms'], 'Number');
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], [Service]);
            }
            if (data.hasOwnProperty('subchannel_code')) {
                obj['subchannel_code'] = ApiClient.convertToType(data['subchannel_code'], 'String');
            }
            if (data.hasOwnProperty('total_stay')) {
                obj['total_stay'] = Rate.constructFromObject(data['total_stay']);
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReservationResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReservationResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['_warnings'])) {
            throw new Error("Expected the field `_warnings` to be an array in the JSON data but got " + data['_warnings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['addon_services'])) {
            throw new Error("Expected the field `addon_services` to be an array in the JSON data but got " + data['addon_services']);
        }
        // validate the optional field `block`
        if (data['block']) { // data not null
          BlockInfo.validateJSON(data['block']);
        }
        // ensure the json data is a string
        if (data['cancellation_id'] && !(typeof data['cancellation_id'] === 'string' || data['cancellation_id'] instanceof String)) {
            throw new Error("Expected the field `cancellation_id` to be a primitive type in the JSON string but got " + data['cancellation_id']);
        }
        if (data['cancellation_policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cancellation_policies'])) {
                throw new Error("Expected the field `cancellation_policies` to be an array in the JSON data but got " + data['cancellation_policies']);
            }
            // validate the optional field `cancellation_policies` (array)
            for (const item of data['cancellation_policies']) {
                CancellationPolicy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['channel_code'] && !(typeof data['channel_code'] === 'string' || data['channel_code'] instanceof String)) {
            throw new Error("Expected the field `channel_code` to be a primitive type in the JSON string but got " + data['channel_code']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // validate the optional field `company`
        if (data['company']) { // data not null
          Company.validateJSON(data['company']);
        }
        // ensure the json data is a string
        if (data['confirmation_id'] && !(typeof data['confirmation_id'] === 'string' || data['confirmation_id'] instanceof String)) {
            throw new Error("Expected the field `confirmation_id` to be a primitive type in the JSON string but got " + data['confirmation_id']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          ContactResponse.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['external_id'] && !(typeof data['external_id'] === 'string' || data['external_id'] instanceof String)) {
            throw new Error("Expected the field `external_id` to be a primitive type in the JSON string but got " + data['external_id']);
        }
        if (data['general_policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['general_policies'])) {
                throw new Error("Expected the field `general_policies` to be an array in the JSON data but got " + data['general_policies']);
            }
            // validate the optional field `general_policies` (array)
            for (const item of data['general_policies']) {
                GeneralPolicy.validateJSON(item);
            };
        }
        // validate the optional field `guarantee`
        if (data['guarantee']) { // data not null
          GuaranteeResponse.validateJSON(data['guarantee']);
        }
        if (data['guests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['guests'])) {
                throw new Error("Expected the field `guests` to be an array in the JSON data but got " + data['guests']);
            }
            // validate the optional field `guests` (array)
            for (const item of data['guests']) {
                CustomerResponse.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['market_code'] && !(typeof data['market_code'] === 'string' || data['market_code'] instanceof String)) {
            throw new Error("Expected the field `market_code` to be a primitive type in the JSON string but got " + data['market_code']);
        }
        // validate the optional field `noshow_policy`
        if (data['noshow_policy']) { // data not null
          NoShowPolicy.validateJSON(data['noshow_policy']);
        }
        // ensure the json data is a string
        if (data['payment_method'] && !(typeof data['payment_method'] === 'string' || data['payment_method'] instanceof String)) {
            throw new Error("Expected the field `payment_method` to be a primitive type in the JSON string but got " + data['payment_method']);
        }
        // validate the optional field `rate_plan`
        if (data['rate_plan']) { // data not null
          RatePlan.validateJSON(data['rate_plan']);
        }
        // ensure the json data is a string
        if (data['reservation_status'] && !(typeof data['reservation_status'] === 'string' || data['reservation_status'] instanceof String)) {
            throw new Error("Expected the field `reservation_status` to be a primitive type in the JSON string but got " + data['reservation_status']);
        }
        // validate the optional field `room`
        if (data['room']) { // data not null
          EmbeddedRoom.validateJSON(data['room']);
        }
        if (data['room_rates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['room_rates'])) {
                throw new Error("Expected the field `room_rates` to be an array in the JSON data but got " + data['room_rates']);
            }
            // validate the optional field `room_rates` (array)
            for (const item of data['room_rates']) {
                DailyRate.validateJSON(item);
            };
        }
        if (data['services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['services'])) {
                throw new Error("Expected the field `services` to be an array in the JSON data but got " + data['services']);
            }
            // validate the optional field `services` (array)
            for (const item of data['services']) {
                Service.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['subchannel_code'] && !(typeof data['subchannel_code'] === 'string' || data['subchannel_code'] instanceof String)) {
            throw new Error("Expected the field `subchannel_code` to be a primitive type in the JSON string but got " + data['subchannel_code']);
        }
        // validate the optional field `total_stay`
        if (data['total_stay']) { // data not null
          Rate.validateJSON(data['total_stay']);
        }

        return true;
    }


}



/**
 * Warnings that came up when your request was processed. Your request will still be processed successfull when              you see such warnings in your response
 * @member {Array.<String>} _warnings
 */
ReservationResponse.prototype['_warnings'] = undefined;

/**
 * A list of addon service codes that are currently booked on the reservation. Services which are charged              once per stay are only visible before and on the day they are booked for.
 * @member {Array.<String>} addon_services
 */
ReservationResponse.prototype['addon_services'] = undefined;

/**
 * The number of adults per room
 * @member {Number} adults
 */
ReservationResponse.prototype['adults'] = undefined;

/**
 * The arrival date of the guests
 * @member {Date} arrival_date
 */
ReservationResponse.prototype['arrival_date'] = undefined;

/**
 * The balance for all folios of this reservartion. It is calculated by all already charged room and service              rates plus manual charges or charges from other systems like POS minus all payments. A negative balance              indicates the reservation is overpaid, a positive balance that the guest owes the hotel money
 * @member {Number} balance
 */
ReservationResponse.prototype['balance'] = undefined;

/**
 * @member {module:model/BlockInfo} block
 */
ReservationResponse.prototype['block'] = undefined;

/**
 * Given the reservation was cancelled, this field contains the cancellation id
 * @member {String} cancellation_id
 */
ReservationResponse.prototype['cancellation_id'] = undefined;

/**
 * The cancellation policies that were applicable on the date the booking was done
 * @member {Array.<module:model/CancellationPolicy>} cancellation_policies
 */
ReservationResponse.prototype['cancellation_policies'] = undefined;

/**
 * The code of the channel that was used when the booking has been created. It is also known as source.               Possible values can be OTA, GDS or DIRECT, but it is configurable per hotel
 * @member {String} channel_code
 */
ReservationResponse.prototype['channel_code'] = undefined;

/**
 * The real checkin time of the guests. It will be set after the checkin has been performed
 * @member {Date} checkin_time
 */
ReservationResponse.prototype['checkin_time'] = undefined;

/**
 * The real checkout time of the guests. It will be set after the checkout has been performed
 * @member {Date} checkout_time
 */
ReservationResponse.prototype['checkout_time'] = undefined;

/**
 * The comment for this reservation
 * @member {String} comment
 */
ReservationResponse.prototype['comment'] = undefined;

/**
 * @member {module:model/Company} company
 */
ReservationResponse.prototype['company'] = undefined;

/**
 * The confirmation id for the booking which the guest can use to check in on the kiosk, add the              booking to the mobile app etc. It is used as identifier for all reservations done with the same              booking request
 * @member {String} confirmation_id
 */
ReservationResponse.prototype['confirmation_id'] = undefined;

/**
 * @member {module:model/ContactResponse} contact
 */
ReservationResponse.prototype['contact'] = undefined;

/**
 * Timestamp the reservation was created
 * @member {Date} created
 */
ReservationResponse.prototype['created'] = undefined;

/**
 * The currency all amounts of this reservation will be shown in
 * @member {String} currency
 */
ReservationResponse.prototype['currency'] = undefined;

/**
 * The departure date of the guests
 * @member {Date} departure_date
 */
ReservationResponse.prototype['departure_date'] = undefined;

/**
 * The external id for this reservation is the unique identifier from the system that created the booking in hetras. It could be the id of an              OTA like Expedia or booking.com or one of the GDS systems like Amadeus or Galileo
 * @member {String} external_id
 */
ReservationResponse.prototype['external_id'] = undefined;

/**
 * The general policies that were applicable on the date the booking was done
 * @member {Array.<module:model/GeneralPolicy>} general_policies
 */
ReservationResponse.prototype['general_policies'] = undefined;

/**
 * @member {module:model/GuaranteeResponse} guarantee
 */
ReservationResponse.prototype['guarantee'] = undefined;

/**
 * A list of guest details for this reservation
 * @member {Array.<module:model/CustomerResponse>} guests
 */
ReservationResponse.prototype['guests'] = undefined;

/**
 * The id of the hotel this reservation is valid for
 * @member {Number} hotel_id
 */
ReservationResponse.prototype['hotel_id'] = undefined;

/**
 * A list of labels that are attached to the reservation.
 * @member {Array.<String>} labels
 */
ReservationResponse.prototype['labels'] = undefined;

/**
 * The code of the market segment the rate plan for this reservation is linked to
 * @member {String} market_code
 */
ReservationResponse.prototype['market_code'] = undefined;

/**
 * @member {module:model/NoShowPolicy} noshow_policy
 */
ReservationResponse.prototype['noshow_policy'] = undefined;

/**
 * The payment method for this reservation
 * @member {module:model/ReservationResponse.PaymentMethodEnum} payment_method
 */
ReservationResponse.prototype['payment_method'] = undefined;

/**
 * @member {module:model/RatePlan} rate_plan
 */
ReservationResponse.prototype['rate_plan'] = undefined;

/**
 * The reservation number of the reservation
 * @member {Number} reservation_number
 */
ReservationResponse.prototype['reservation_number'] = undefined;

/**
 * The current status of this reservation
 * @member {module:model/ReservationResponse.ReservationStatusEnum} reservation_status
 */
ReservationResponse.prototype['reservation_status'] = undefined;

/**
 * @member {module:model/EmbeddedRoom} room
 */
ReservationResponse.prototype['room'] = undefined;

/**
 * The breakdown for all daily room rates and service charges for this reservation
 * @member {Array.<module:model/DailyRate>} room_rates
 */
ReservationResponse.prototype['room_rates'] = undefined;

/**
 * The number of rooms this reservation is valid for. After a multi-room booking is done there will be               one reservation in hetras for this booking for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests
 * @member {Number} rooms
 */
ReservationResponse.prototype['rooms'] = undefined;

/**
 * A list of details for all services included and addon service booked on this reservation
 * @member {Array.<module:model/Service>} services
 */
ReservationResponse.prototype['services'] = undefined;

/**
 * The code of the subchannel that was used when the booking has been created. Possible values can be               BOOKING, EXPEDIA or WALKIN, but it is configurable per hotel
 * @member {String} subchannel_code
 */
ReservationResponse.prototype['subchannel_code'] = undefined;

/**
 * @member {module:model/Rate} total_stay
 */
ReservationResponse.prototype['total_stay'] = undefined;

/**
 * Timestamp of when the reservation was changed the last time
 * @member {Date} updated
 */
ReservationResponse.prototype['updated'] = undefined;





/**
 * Allowed values for the <code>payment_method</code> property.
 * @enum {String}
 * @readonly
 */
ReservationResponse['PaymentMethodEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Cash"
     * @const
     */
    "Cash": "Cash",

    /**
     * value: "CreditCard"
     * @const
     */
    "CreditCard": "CreditCard",

    /**
     * value: "WireTransfer"
     * @const
     */
    "WireTransfer": "WireTransfer",

    /**
     * value: "ChargeToCompany"
     * @const
     */
    "ChargeToCompany": "ChargeToCompany",

    /**
     * value: "Check"
     * @const
     */
    "Check": "Check",

    /**
     * value: "Voucher"
     * @const
     */
    "Voucher": "Voucher",

    /**
     * value: "DebitCard"
     * @const
     */
    "DebitCard": "DebitCard",

    /**
     * value: "Token"
     * @const
     */
    "Token": "Token",

    /**
     * value: "Miscellaneous"
     * @const
     */
    "Miscellaneous": "Miscellaneous",

    /**
     * value: "DigitalPayment"
     * @const
     */
    "DigitalPayment": "DigitalPayment"
};


/**
 * Allowed values for the <code>reservation_status</code> property.
 * @enum {String}
 * @readonly
 */
ReservationResponse['ReservationStatusEnum'] = {

    /**
     * value: "Tentative"
     * @const
     */
    "Tentative": "Tentative",

    /**
     * value: "Waitlisted"
     * @const
     */
    "Waitlisted": "Waitlisted",

    /**
     * value: "OnRequest"
     * @const
     */
    "OnRequest": "OnRequest",

    /**
     * value: "NonGuaranteed"
     * @const
     */
    "NonGuaranteed": "NonGuaranteed",

    /**
     * value: "Guaranteed"
     * @const
     */
    "Guaranteed": "Guaranteed",

    /**
     * value: "InHouse"
     * @const
     */
    "InHouse": "InHouse",

    /**
     * value: "CheckedOut"
     * @const
     */
    "CheckedOut": "CheckedOut",

    /**
     * value: "NoShow"
     * @const
     */
    "NoShow": "NoShow",

    /**
     * value: "Denied"
     * @const
     */
    "Denied": "Denied",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Released"
     * @const
     */
    "Released": "Released",

    /**
     * value: "Walked"
     * @const
     */
    "Walked": "Walked",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "WalkIn"
     * @const
     */
    "WalkIn": "WalkIn",

    /**
     * value: "Registered"
     * @const
     */
    "Registered": "Registered"
};



export default ReservationResponse;

