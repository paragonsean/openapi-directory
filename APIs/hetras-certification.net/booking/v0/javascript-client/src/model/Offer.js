/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcceptedGuaranteeTypes from './AcceptedGuaranteeTypes';
import CancellationPolicy from './CancellationPolicy';
import DepositPolicy from './DepositPolicy';
import GeneralPolicy from './GeneralPolicy';
import LinkObject from './LinkObject';
import NoShowPolicy from './NoShowPolicy';
import Rate from './Rate';
import RoomOfferDailyRate from './RoomOfferDailyRate';

/**
 * The Offer model module.
 * @module model/Offer
 * @version v0
 */
class Offer {
    /**
     * Constructs a new <code>Offer</code>.
     * @alias module:model/Offer
     */
    constructor() { 
        
        Offer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Offer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Offer} obj Optional instance to populate.
     * @return {module:model/Offer} The populated <code>Offer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Offer();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = ApiClient.convertToType(data['_links'], {'String': LinkObject});
            }
            if (data.hasOwnProperty('adults')) {
                obj['adults'] = ApiClient.convertToType(data['adults'], 'Number');
            }
            if (data.hasOwnProperty('available_rooms')) {
                obj['available_rooms'] = ApiClient.convertToType(data['available_rooms'], 'Number');
            }
            if (data.hasOwnProperty('breakdown')) {
                obj['breakdown'] = ApiClient.convertToType(data['breakdown'], [RoomOfferDailyRate]);
            }
            if (data.hasOwnProperty('cancellation_policies')) {
                obj['cancellation_policies'] = ApiClient.convertToType(data['cancellation_policies'], [CancellationPolicy]);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('deposit_policies')) {
                obj['deposit_policies'] = ApiClient.convertToType(data['deposit_policies'], [DepositPolicy]);
            }
            if (data.hasOwnProperty('general_policies')) {
                obj['general_policies'] = ApiClient.convertToType(data['general_policies'], [GeneralPolicy]);
            }
            if (data.hasOwnProperty('guarantee_types')) {
                obj['guarantee_types'] = AcceptedGuaranteeTypes.constructFromObject(data['guarantee_types']);
            }
            if (data.hasOwnProperty('included_services')) {
                obj['included_services'] = ApiClient.convertToType(data['included_services'], ['String']);
            }
            if (data.hasOwnProperty('noshow_policy')) {
                obj['noshow_policy'] = NoShowPolicy.constructFromObject(data['noshow_policy']);
            }
            if (data.hasOwnProperty('rate_plan_code')) {
                obj['rate_plan_code'] = ApiClient.convertToType(data['rate_plan_code'], 'String');
            }
            if (data.hasOwnProperty('total_stay')) {
                obj['total_stay'] = Rate.constructFromObject(data['total_stay']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Offer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Offer</code>.
     */
    static validateJSON(data) {
        if (data['breakdown']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['breakdown'])) {
                throw new Error("Expected the field `breakdown` to be an array in the JSON data but got " + data['breakdown']);
            }
            // validate the optional field `breakdown` (array)
            for (const item of data['breakdown']) {
                RoomOfferDailyRate.validateJSON(item);
            };
        }
        if (data['cancellation_policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cancellation_policies'])) {
                throw new Error("Expected the field `cancellation_policies` to be an array in the JSON data but got " + data['cancellation_policies']);
            }
            // validate the optional field `cancellation_policies` (array)
            for (const item of data['cancellation_policies']) {
                CancellationPolicy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        if (data['deposit_policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deposit_policies'])) {
                throw new Error("Expected the field `deposit_policies` to be an array in the JSON data but got " + data['deposit_policies']);
            }
            // validate the optional field `deposit_policies` (array)
            for (const item of data['deposit_policies']) {
                DepositPolicy.validateJSON(item);
            };
        }
        if (data['general_policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['general_policies'])) {
                throw new Error("Expected the field `general_policies` to be an array in the JSON data but got " + data['general_policies']);
            }
            // validate the optional field `general_policies` (array)
            for (const item of data['general_policies']) {
                GeneralPolicy.validateJSON(item);
            };
        }
        // validate the optional field `guarantee_types`
        if (data['guarantee_types']) { // data not null
          AcceptedGuaranteeTypes.validateJSON(data['guarantee_types']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['included_services'])) {
            throw new Error("Expected the field `included_services` to be an array in the JSON data but got " + data['included_services']);
        }
        // validate the optional field `noshow_policy`
        if (data['noshow_policy']) { // data not null
          NoShowPolicy.validateJSON(data['noshow_policy']);
        }
        // ensure the json data is a string
        if (data['rate_plan_code'] && !(typeof data['rate_plan_code'] === 'string' || data['rate_plan_code'] instanceof String)) {
            throw new Error("Expected the field `rate_plan_code` to be a primitive type in the JSON string but got " + data['rate_plan_code']);
        }
        // validate the optional field `total_stay`
        if (data['total_stay']) { // data not null
          Rate.validateJSON(data['total_stay']);
        }

        return true;
    }


}



/**
 * Link to request addon offers for this stay
 * @member {Object.<String, module:model/LinkObject>} _links
 */
Offer.prototype['_links'] = undefined;

/**
 * Number of adults the offer is calculated for
 * @member {Number} adults
 */
Offer.prototype['adults'] = undefined;

/**
 * Number of currently available rooms for that specific offer
 * @member {Number} available_rooms
 */
Offer.prototype['available_rooms'] = undefined;

/**
 * In this collection you will get an entry with price information for every day.
 * @member {Array.<module:model/RoomOfferDailyRate>} breakdown
 */
Offer.prototype['breakdown'] = undefined;

/**
 * List of cancellation policies defined for that rate
 * @member {Array.<module:model/CancellationPolicy>} cancellation_policies
 */
Offer.prototype['cancellation_policies'] = undefined;

/**
 * The amounts of this offer are always in this currency
 * @member {String} currency
 */
Offer.prototype['currency'] = undefined;

/**
 * List of Deposit policies defined for that rate
 * @member {Array.<module:model/DepositPolicy>} deposit_policies
 */
Offer.prototype['deposit_policies'] = undefined;

/**
 * List of general policies defined for that rate
 * @member {Array.<module:model/GeneralPolicy>} general_policies
 */
Offer.prototype['general_policies'] = undefined;

/**
 * @member {module:model/AcceptedGuaranteeTypes} guarantee_types
 */
Offer.prototype['guarantee_types'] = undefined;

/**
 * A list of  of services included already in the rate for this offer
 * @member {Array.<String>} included_services
 */
Offer.prototype['included_services'] = undefined;

/**
 * @member {module:model/NoShowPolicy} noshow_policy
 */
Offer.prototype['noshow_policy'] = undefined;

/**
 * The code of the rate plan for this offer
 * @member {String} rate_plan_code
 */
Offer.prototype['rate_plan_code'] = undefined;

/**
 * @member {module:model/Rate} total_stay
 */
Offer.prototype['total_stay'] = undefined;






export default Offer;

