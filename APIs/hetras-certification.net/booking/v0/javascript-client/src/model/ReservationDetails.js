/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddonRate from './AddonRate';
import Company from './Company';
import Contact from './Contact';
import Customer from './Customer';
import Guarantee from './Guarantee';
import RoomRate from './RoomRate';

/**
 * The ReservationDetails model module.
 * @module model/ReservationDetails
 * @version v0
 */
class ReservationDetails {
    /**
     * Constructs a new <code>ReservationDetails</code>.
     * @alias module:model/ReservationDetails
     * @param hotelId {Number} The id of the hotel this reservation is valid for
     */
    constructor(hotelId) { 
        
        ReservationDetails.initialize(this, hotelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hotelId) { 
        obj['hotel_id'] = hotelId;
    }

    /**
     * Constructs a <code>ReservationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReservationDetails} obj Optional instance to populate.
     * @return {module:model/ReservationDetails} The populated <code>ReservationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReservationDetails();

            if (data.hasOwnProperty('addon_rates')) {
                obj['addon_rates'] = ApiClient.convertToType(data['addon_rates'], [AddonRate]);
            }
            if (data.hasOwnProperty('adults')) {
                obj['adults'] = ApiClient.convertToType(data['adults'], 'Number');
            }
            if (data.hasOwnProperty('arrival_date')) {
                obj['arrival_date'] = ApiClient.convertToType(data['arrival_date'], 'Date');
            }
            if (data.hasOwnProperty('channel_code')) {
                obj['channel_code'] = ApiClient.convertToType(data['channel_code'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = Company.constructFromObject(data['company']);
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = Contact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('departure_date')) {
                obj['departure_date'] = ApiClient.convertToType(data['departure_date'], 'Date');
            }
            if (data.hasOwnProperty('external_id')) {
                obj['external_id'] = ApiClient.convertToType(data['external_id'], 'String');
            }
            if (data.hasOwnProperty('group_code')) {
                obj['group_code'] = ApiClient.convertToType(data['group_code'], 'String');
            }
            if (data.hasOwnProperty('guarantee')) {
                obj['guarantee'] = Guarantee.constructFromObject(data['guarantee']);
            }
            if (data.hasOwnProperty('guests')) {
                obj['guests'] = ApiClient.convertToType(data['guests'], [Customer]);
            }
            if (data.hasOwnProperty('hotel_id')) {
                obj['hotel_id'] = ApiClient.convertToType(data['hotel_id'], 'Number');
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = ApiClient.convertToType(data['payment_method'], 'String');
            }
            if (data.hasOwnProperty('prepay_discount')) {
                obj['prepay_discount'] = ApiClient.convertToType(data['prepay_discount'], 'Number');
            }
            if (data.hasOwnProperty('room_rates')) {
                obj['room_rates'] = ApiClient.convertToType(data['room_rates'], [RoomRate]);
            }
            if (data.hasOwnProperty('rooms')) {
                obj['rooms'] = ApiClient.convertToType(data['rooms'], 'Number');
            }
            if (data.hasOwnProperty('travel_agent')) {
                obj['travel_agent'] = Company.constructFromObject(data['travel_agent']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReservationDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReservationDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReservationDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['addon_rates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addon_rates'])) {
                throw new Error("Expected the field `addon_rates` to be an array in the JSON data but got " + data['addon_rates']);
            }
            // validate the optional field `addon_rates` (array)
            for (const item of data['addon_rates']) {
                AddonRate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['channel_code'] && !(typeof data['channel_code'] === 'string' || data['channel_code'] instanceof String)) {
            throw new Error("Expected the field `channel_code` to be a primitive type in the JSON string but got " + data['channel_code']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // validate the optional field `company`
        if (data['company']) { // data not null
          Company.validateJSON(data['company']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          Contact.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['external_id'] && !(typeof data['external_id'] === 'string' || data['external_id'] instanceof String)) {
            throw new Error("Expected the field `external_id` to be a primitive type in the JSON string but got " + data['external_id']);
        }
        // ensure the json data is a string
        if (data['group_code'] && !(typeof data['group_code'] === 'string' || data['group_code'] instanceof String)) {
            throw new Error("Expected the field `group_code` to be a primitive type in the JSON string but got " + data['group_code']);
        }
        // validate the optional field `guarantee`
        if (data['guarantee']) { // data not null
          Guarantee.validateJSON(data['guarantee']);
        }
        if (data['guests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['guests'])) {
                throw new Error("Expected the field `guests` to be an array in the JSON data but got " + data['guests']);
            }
            // validate the optional field `guests` (array)
            for (const item of data['guests']) {
                Customer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['payment_method'] && !(typeof data['payment_method'] === 'string' || data['payment_method'] instanceof String)) {
            throw new Error("Expected the field `payment_method` to be a primitive type in the JSON string but got " + data['payment_method']);
        }
        if (data['room_rates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['room_rates'])) {
                throw new Error("Expected the field `room_rates` to be an array in the JSON data but got " + data['room_rates']);
            }
            // validate the optional field `room_rates` (array)
            for (const item of data['room_rates']) {
                RoomRate.validateJSON(item);
            };
        }
        // validate the optional field `travel_agent`
        if (data['travel_agent']) { // data not null
          Company.validateJSON(data['travel_agent']);
        }

        return true;
    }


}

ReservationDetails.RequiredProperties = ["hotel_id"];

/**
 * A breakdown of addon services with their prices for every stay day
 * @member {Array.<module:model/AddonRate>} addon_rates
 */
ReservationDetails.prototype['addon_rates'] = undefined;

/**
 * The number of adults per room
 * @member {Number} adults
 */
ReservationDetails.prototype['adults'] = undefined;

/**
 * The arrival date of the guests
 * @member {Date} arrival_date
 */
ReservationDetails.prototype['arrival_date'] = undefined;

/**
 * The channel code for this reservation. You can find available channels in the codes for the hotel.
 * @member {String} channel_code
 */
ReservationDetails.prototype['channel_code'] = undefined;

/**
 * The comment you want to add for this reservation
 * @member {String} comment
 */
ReservationDetails.prototype['comment'] = undefined;

/**
 * @member {module:model/Company} company
 */
ReservationDetails.prototype['company'] = undefined;

/**
 * @member {module:model/Contact} contact
 */
ReservationDetails.prototype['contact'] = undefined;

/**
 * The departure date of the guests
 * @member {Date} departure_date
 */
ReservationDetails.prototype['departure_date'] = undefined;

/**
 * The external id for this reservation. You can put here your own id used by you or the external system              you integrate hetras with
 * @member {String} external_id
 */
ReservationDetails.prototype['external_id'] = undefined;

/**
 * The group code based on which the reservation will be created.
 * @member {String} group_code
 */
ReservationDetails.prototype['group_code'] = undefined;

/**
 * @member {module:model/Guarantee} guarantee
 */
ReservationDetails.prototype['guarantee'] = undefined;

/**
 * A list of guests with some basic guest details
 * @member {Array.<module:model/Customer>} guests
 */
ReservationDetails.prototype['guests'] = undefined;

/**
 * The id of the hotel this reservation is valid for
 * @member {Number} hotel_id
 */
ReservationDetails.prototype['hotel_id'] = undefined;

/**
 * The payment method for this reservation
 * @member {module:model/ReservationDetails.PaymentMethodEnum} payment_method
 */
ReservationDetails.prototype['payment_method'] = undefined;

/**
 * If you create a booking for a rateplan requiring prepayment this amount will be deducted from the booking value before              the prepayment will be taken. This feature is useful when the booker redeems a gift voucher and you want to               only capture the remaining amount from the guest´s credit card
 * @member {Number} prepay_discount
 */
ReservationDetails.prototype['prepay_discount'] = undefined;

/**
 * A breakdown of room rates specified for every stay day
 * @member {Array.<module:model/RoomRate>} room_rates
 */
ReservationDetails.prototype['room_rates'] = undefined;

/**
 * The number of rooms this reservation is for. After a multi-room booking is done there will be               one reservation in hetras for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests
 * @member {Number} rooms
 */
ReservationDetails.prototype['rooms'] = undefined;

/**
 * @member {module:model/Company} travel_agent
 */
ReservationDetails.prototype['travel_agent'] = undefined;





/**
 * Allowed values for the <code>payment_method</code> property.
 * @enum {String}
 * @readonly
 */
ReservationDetails['PaymentMethodEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Cash"
     * @const
     */
    "Cash": "Cash",

    /**
     * value: "CreditCard"
     * @const
     */
    "CreditCard": "CreditCard",

    /**
     * value: "WireTransfer"
     * @const
     */
    "WireTransfer": "WireTransfer",

    /**
     * value: "ChargeToCompany"
     * @const
     */
    "ChargeToCompany": "ChargeToCompany",

    /**
     * value: "Check"
     * @const
     */
    "Check": "Check",

    /**
     * value: "Voucher"
     * @const
     */
    "Voucher": "Voucher",

    /**
     * value: "DebitCard"
     * @const
     */
    "DebitCard": "DebitCard",

    /**
     * value: "Token"
     * @const
     */
    "Token": "Token",

    /**
     * value: "Miscellaneous"
     * @const
     */
    "Miscellaneous": "Miscellaneous",

    /**
     * value: "DigitalPayment"
     * @const
     */
    "DigitalPayment": "DigitalPayment"
};



export default ReservationDetails;

