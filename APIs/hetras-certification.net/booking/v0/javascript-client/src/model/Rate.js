/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceRate from './ServiceRate';

/**
 * The Rate model module.
 * @module model/Rate
 * @version v0
 */
class Rate {
    /**
     * Constructs a new <code>Rate</code>.
     * @alias module:model/Rate
     */
    constructor() { 
        
        Rate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rate} obj Optional instance to populate.
     * @return {module:model/Rate} The populated <code>Rate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rate();

            if (data.hasOwnProperty('addon_services')) {
                obj['addon_services'] = ApiClient.convertToType(data['addon_services'], [ServiceRate]);
            }
            if (data.hasOwnProperty('excluded_tax')) {
                obj['excluded_tax'] = ApiClient.convertToType(data['excluded_tax'], 'Number');
            }
            if (data.hasOwnProperty('included_services')) {
                obj['included_services'] = ApiClient.convertToType(data['included_services'], ['String']);
            }
            if (data.hasOwnProperty('included_tax')) {
                obj['included_tax'] = ApiClient.convertToType(data['included_tax'], 'Number');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rate</code>.
     */
    static validateJSON(data) {
        if (data['addon_services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addon_services'])) {
                throw new Error("Expected the field `addon_services` to be an array in the JSON data but got " + data['addon_services']);
            }
            // validate the optional field `addon_services` (array)
            for (const item of data['addon_services']) {
                ServiceRate.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['included_services'])) {
            throw new Error("Expected the field `included_services` to be an array in the JSON data but got " + data['included_services']);
        }

        return true;
    }


}



/**
 * List of addon services with additional price information.
 * @member {Array.<module:model/ServiceRate>} addon_services
 */
Rate.prototype['addon_services'] = undefined;

/**
 * The amount of extra taxes also calculated for all rooms and all persons per room.
 * @member {Number} excluded_tax
 */
Rate.prototype['excluded_tax'] = undefined;

/**
 * List of codes for all services already included in the gross rate
 * @member {Array.<String>} included_services
 */
Rate.prototype['included_services'] = undefined;

/**
 * The amount of taxes already included in the gross nightly rate also calculated for all rooms and              all persons per room.
 * @member {Number} included_tax
 */
Rate.prototype['included_tax'] = undefined;

/**
 * The gross room rate. It is the price calculated for all rooms and all persons per room.
 * @member {Number} rate
 */
Rate.prototype['rate'] = undefined;






export default Rate;

