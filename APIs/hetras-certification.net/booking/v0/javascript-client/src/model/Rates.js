/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RatePlan from './RatePlan';
import ReservationRoom from './ReservationRoom';
import RoomOffer from './RoomOffer';
import Service from './Service';

/**
 * The Rates model module.
 * @module model/Rates
 * @version v0
 */
class Rates {
    /**
     * Constructs a new <code>Rates</code>.
     * @alias module:model/Rates
     */
    constructor() { 
        
        Rates.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rates</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rates} obj Optional instance to populate.
     * @return {module:model/Rates} The populated <code>Rates</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rates();

            if (data.hasOwnProperty('arrival_date')) {
                obj['arrival_date'] = ApiClient.convertToType(data['arrival_date'], 'Date');
            }
            if (data.hasOwnProperty('departure_date')) {
                obj['departure_date'] = ApiClient.convertToType(data['departure_date'], 'Date');
            }
            if (data.hasOwnProperty('hotel_id')) {
                obj['hotel_id'] = ApiClient.convertToType(data['hotel_id'], 'Number');
            }
            if (data.hasOwnProperty('hotel_name')) {
                obj['hotel_name'] = ApiClient.convertToType(data['hotel_name'], 'String');
            }
            if (data.hasOwnProperty('rate_plans')) {
                obj['rate_plans'] = ApiClient.convertToType(data['rate_plans'], [RatePlan]);
            }
            if (data.hasOwnProperty('room_offers')) {
                obj['room_offers'] = ApiClient.convertToType(data['room_offers'], [RoomOffer]);
            }
            if (data.hasOwnProperty('rooms')) {
                obj['rooms'] = ApiClient.convertToType(data['rooms'], [ReservationRoom]);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], [Service]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rates</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rates</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hotel_name'] && !(typeof data['hotel_name'] === 'string' || data['hotel_name'] instanceof String)) {
            throw new Error("Expected the field `hotel_name` to be a primitive type in the JSON string but got " + data['hotel_name']);
        }
        if (data['rate_plans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rate_plans'])) {
                throw new Error("Expected the field `rate_plans` to be an array in the JSON data but got " + data['rate_plans']);
            }
            // validate the optional field `rate_plans` (array)
            for (const item of data['rate_plans']) {
                RatePlan.validateJSON(item);
            };
        }
        if (data['room_offers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['room_offers'])) {
                throw new Error("Expected the field `room_offers` to be an array in the JSON data but got " + data['room_offers']);
            }
            // validate the optional field `room_offers` (array)
            for (const item of data['room_offers']) {
                RoomOffer.validateJSON(item);
            };
        }
        if (data['rooms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rooms'])) {
                throw new Error("Expected the field `rooms` to be an array in the JSON data but got " + data['rooms']);
            }
            // validate the optional field `rooms` (array)
            for (const item of data['rooms']) {
                ReservationRoom.validateJSON(item);
            };
        }
        if (data['services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['services'])) {
                throw new Error("Expected the field `services` to be an array in the JSON data but got " + data['services']);
            }
            // validate the optional field `services` (array)
            for (const item of data['services']) {
                Service.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The arrival date of the guest for this rate offer
 * @member {Date} arrival_date
 */
Rates.prototype['arrival_date'] = undefined;

/**
 * The departure date of the guest for this rate offer
 * @member {Date} departure_date
 */
Rates.prototype['departure_date'] = undefined;

/**
 * The id of the hotel the rate offers will be valid for
 * @member {Number} hotel_id
 */
Rates.prototype['hotel_id'] = undefined;

/**
 * The name of the hotel the rate offers will be valid for
 * @member {String} hotel_name
 */
Rates.prototype['hotel_name'] = undefined;

/**
 * List of rate plans details for rates you can find offers in the room_offers
 * @member {Array.<module:model/RatePlan>} rate_plans
 */
Rates.prototype['rate_plans'] = undefined;

/**
 * List of room types with available rate offers ordered from ascending
 * @member {Array.<module:model/RoomOffer>} room_offers
 */
Rates.prototype['room_offers'] = undefined;

/**
 * List of room type details for room types you can find offers in the room_offers
 * @member {Array.<module:model/ReservationRoom>} rooms
 */
Rates.prototype['rooms'] = undefined;

/**
 * List of service details for included services in offers you can find in the room_offers
 * @member {Array.<module:model/Service>} services
 */
Rates.prototype['services'] = undefined;






export default Rates;

