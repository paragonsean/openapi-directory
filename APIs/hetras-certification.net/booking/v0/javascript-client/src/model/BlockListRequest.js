/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlockListRequest model module.
 * @module model/BlockListRequest
 * @version v0
 */
class BlockListRequest {
    /**
     * Constructs a new <code>BlockListRequest</code>.
     * @alias module:model/BlockListRequest
     */
    constructor() { 
        
        BlockListRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlockListRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlockListRequest} obj Optional instance to populate.
     * @return {module:model/BlockListRequest} The populated <code>BlockListRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlockListRequest();

            if (data.hasOwnProperty('countDetails')) {
                obj['countDetails'] = ApiClient.convertToType(data['countDetails'], 'Boolean');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'Date');
            }
            if (data.hasOwnProperty('groupCode')) {
                obj['groupCode'] = ApiClient.convertToType(data['groupCode'], 'String');
            }
            if (data.hasOwnProperty('hotelId')) {
                obj['hotelId'] = ApiClient.convertToType(data['hotelId'], 'Number');
            }
            if (data.hasOwnProperty('ratePlanCodes')) {
                obj['ratePlanCodes'] = ApiClient.convertToType(data['ratePlanCodes'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlockListRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlockListRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['groupCode'] && !(typeof data['groupCode'] === 'string' || data['groupCode'] instanceof String)) {
            throw new Error("Expected the field `groupCode` to be a primitive type in the JSON string but got " + data['groupCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ratePlanCodes'])) {
            throw new Error("Expected the field `ratePlanCodes` to be an array in the JSON data but got " + data['ratePlanCodes']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * If true it will include also details of block count per each room type.
 * @member {Boolean} countDetails
 */
BlockListRequest.prototype['countDetails'] = undefined;

/**
 * Return all blocks where the block's last_departure is greater than specified date.
 * @member {Date} from
 */
BlockListRequest.prototype['from'] = undefined;

/**
 * Filter the blocks by the specified group code
 * @member {String} groupCode
 */
BlockListRequest.prototype['groupCode'] = undefined;

/**
 * Only return blocks for this specific hotel.
 * @member {Number} hotelId
 */
BlockListRequest.prototype['hotelId'] = undefined;

/**
 * Return all blocks that have related the specified comma-separated rate plans.
 * @member {Array.<String>} ratePlanCodes
 */
BlockListRequest.prototype['ratePlanCodes'] = undefined;

/**
 * Return all blocks where the block status is one of the specified values.
 * @member {module:model/BlockListRequest.StatusEnum} status
 */
BlockListRequest.prototype['status'] = undefined;

/**
 * Return all blocks where the block's last_departure is less than specified date.
 * @member {Date} to
 */
BlockListRequest.prototype['to'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
BlockListRequest['StatusEnum'] = {

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Tentative"
     * @const
     */
    "Tentative": "Tentative",

    /**
     * value: "Definite"
     * @const
     */
    "Definite": "Definite"
};



export default BlockListRequest;

