/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RatesRequest model module.
 * @module model/RatesRequest
 * @version v0
 */
class RatesRequest {
    /**
     * Constructs a new <code>RatesRequest</code>.
     * @alias module:model/RatesRequest
     * @param adults {Blob} Number of adults per room.
     * @param arrivalDate {Date} Date of arrival for the guest in the ISO-8601 format \"YYYY-MM-DD\".
     * @param channelCode {String} Channel Code the rate plan needs to be configured for.
     * @param departureDate {Date} Date of departure for the guest in the ISO-8601 format \"YYYY-MM-DD\".
     * @param hotelId {Number} Specifies the hotel id to request offers for.
     */
    constructor(adults, arrivalDate, channelCode, departureDate, hotelId) { 
        
        RatesRequest.initialize(this, adults, arrivalDate, channelCode, departureDate, hotelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, adults, arrivalDate, channelCode, departureDate, hotelId) { 
        obj['adults'] = adults;
        obj['arrivalDate'] = arrivalDate;
        obj['channelCode'] = channelCode;
        obj['departureDate'] = departureDate;
        obj['hotelId'] = hotelId;
    }

    /**
     * Constructs a <code>RatesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RatesRequest} obj Optional instance to populate.
     * @return {module:model/RatesRequest} The populated <code>RatesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RatesRequest();

            if (data.hasOwnProperty('adults')) {
                obj['adults'] = ApiClient.convertToType(data['adults'], 'Blob');
            }
            if (data.hasOwnProperty('arrivalDate')) {
                obj['arrivalDate'] = ApiClient.convertToType(data['arrivalDate'], 'Date');
            }
            if (data.hasOwnProperty('channelCode')) {
                obj['channelCode'] = ApiClient.convertToType(data['channelCode'], 'String');
            }
            if (data.hasOwnProperty('departureDate')) {
                obj['departureDate'] = ApiClient.convertToType(data['departureDate'], 'Date');
            }
            if (data.hasOwnProperty('expand')) {
                obj['expand'] = ApiClient.convertToType(data['expand'], 'String');
            }
            if (data.hasOwnProperty('groupCode')) {
                obj['groupCode'] = ApiClient.convertToType(data['groupCode'], 'String');
            }
            if (data.hasOwnProperty('hotelId')) {
                obj['hotelId'] = ApiClient.convertToType(data['hotelId'], 'Number');
            }
            if (data.hasOwnProperty('ratePlanCode')) {
                obj['ratePlanCode'] = ApiClient.convertToType(data['ratePlanCode'], 'String');
            }
            if (data.hasOwnProperty('roomType')) {
                obj['roomType'] = ApiClient.convertToType(data['roomType'], 'String');
            }
            if (data.hasOwnProperty('rooms')) {
                obj['rooms'] = ApiClient.convertToType(data['rooms'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RatesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RatesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RatesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['channelCode'] && !(typeof data['channelCode'] === 'string' || data['channelCode'] instanceof String)) {
            throw new Error("Expected the field `channelCode` to be a primitive type in the JSON string but got " + data['channelCode']);
        }
        // ensure the json data is a string
        if (data['expand'] && !(typeof data['expand'] === 'string' || data['expand'] instanceof String)) {
            throw new Error("Expected the field `expand` to be a primitive type in the JSON string but got " + data['expand']);
        }
        // ensure the json data is a string
        if (data['groupCode'] && !(typeof data['groupCode'] === 'string' || data['groupCode'] instanceof String)) {
            throw new Error("Expected the field `groupCode` to be a primitive type in the JSON string but got " + data['groupCode']);
        }
        // ensure the json data is a string
        if (data['ratePlanCode'] && !(typeof data['ratePlanCode'] === 'string' || data['ratePlanCode'] instanceof String)) {
            throw new Error("Expected the field `ratePlanCode` to be a primitive type in the JSON string but got " + data['ratePlanCode']);
        }
        // ensure the json data is a string
        if (data['roomType'] && !(typeof data['roomType'] === 'string' || data['roomType'] instanceof String)) {
            throw new Error("Expected the field `roomType` to be a primitive type in the JSON string but got " + data['roomType']);
        }

        return true;
    }


}

RatesRequest.RequiredProperties = ["adults", "arrivalDate", "channelCode", "departureDate", "hotelId"];

/**
 * Number of adults per room.
 * @member {Blob} adults
 */
RatesRequest.prototype['adults'] = undefined;

/**
 * Date of arrival for the guest in the ISO-8601 format \"YYYY-MM-DD\".
 * @member {Date} arrivalDate
 */
RatesRequest.prototype['arrivalDate'] = undefined;

/**
 * Channel Code the rate plan needs to be configured for.
 * @member {String} channelCode
 */
RatesRequest.prototype['channelCode'] = undefined;

/**
 * Date of departure for the guest in the ISO-8601 format \"YYYY-MM-DD\".
 * @member {Date} departureDate
 */
RatesRequest.prototype['departureDate'] = undefined;

/**
 * Expand the rates breakdown if required.
 * @member {module:model/RatesRequest.ExpandEnum} expand
 */
RatesRequest.prototype['expand'] = undefined;

/**
 * Only return offers for the specified group code.
 * @member {String} groupCode
 */
RatesRequest.prototype['groupCode'] = undefined;

/**
 * Specifies the hotel id to request offers for.
 * @member {Number} hotelId
 */
RatesRequest.prototype['hotelId'] = undefined;

/**
 * Only return offers for the specified room type code.
 * @member {String} ratePlanCode
 */
RatesRequest.prototype['ratePlanCode'] = undefined;

/**
 * Only return offers with rates for the specified room type code.
 * @member {String} roomType
 */
RatesRequest.prototype['roomType'] = undefined;

/**
 * Number of rooms (default is 1).
 * @member {Blob} rooms
 */
RatesRequest.prototype['rooms'] = undefined;





/**
 * Allowed values for the <code>expand</code> property.
 * @enum {String}
 * @readonly
 */
RatesRequest['ExpandEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Breakdown"
     * @const
     */
    "Breakdown": "Breakdown"
};



export default RatesRequest;

