/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MailingAddress model module.
 * @module model/MailingAddress
 * @version v0
 */
class MailingAddress {
    /**
     * Constructs a new <code>MailingAddress</code>.
     * @alias module:model/MailingAddress
     */
    constructor() { 
        
        MailingAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MailingAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MailingAddress} obj Optional instance to populate.
     * @return {module:model/MailingAddress} The populated <code>MailingAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MailingAddress();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('address_type')) {
                obj['address_type'] = ApiClient.convertToType(data['address_type'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MailingAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MailingAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['address_type'] && !(typeof data['address_type'] === 'string' || data['address_type'] instanceof String)) {
            throw new Error("Expected the field `address_type` to be a primitive type in the JSON string but got " + data['address_type']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }

        return true;
    }


}



/**
 * The address details like street, number, and other in free format
 * @member {String} address
 */
MailingAddress.prototype['address'] = undefined;

/**
 * One of the values from the enumeration of allowed address types
 * @member {module:model/MailingAddress.AddressTypeEnum} address_type
 */
MailingAddress.prototype['address_type'] = undefined;

/**
 * The city name for this address
 * @member {String} city
 */
MailingAddress.prototype['city'] = undefined;

/**
 * The country code for this address in ISO 3166-1 alpha-2 format              (see: <a href=\"http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm\" onfocus=\"this.blur()\" target=\"_blank\">http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm</a>)
 * @member {String} country
 */
MailingAddress.prototype['country'] = undefined;

/**
 * The postal code for this address
 * @member {String} postal_code
 */
MailingAddress.prototype['postal_code'] = undefined;





/**
 * Allowed values for the <code>address_type</code> property.
 * @enum {String}
 * @readonly
 */
MailingAddress['AddressTypeEnum'] = {

    /**
     * value: "Home"
     * @const
     */
    "Home": "Home",

    /**
     * value: "Business"
     * @const
     */
    "Business": "Business",

    /**
     * value: "Billing"
     * @const
     */
    "Billing": "Billing",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};



export default MailingAddress;

