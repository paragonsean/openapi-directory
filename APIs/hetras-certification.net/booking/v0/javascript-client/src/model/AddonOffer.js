/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddonOfferBreakdown from './AddonOfferBreakdown';
import AddonOfferRate from './AddonOfferRate';

/**
 * The AddonOffer model module.
 * @module model/AddonOffer
 * @version v0
 */
class AddonOffer {
    /**
     * Constructs a new <code>AddonOffer</code>.
     * @alias module:model/AddonOffer
     */
    constructor() { 
        
        AddonOffer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddonOffer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddonOffer} obj Optional instance to populate.
     * @return {module:model/AddonOffer} The populated <code>AddonOffer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddonOffer();

            if (data.hasOwnProperty('breakdown')) {
                obj['breakdown'] = ApiClient.convertToType(data['breakdown'], [AddonOfferBreakdown]);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rate_mode')) {
                obj['rate_mode'] = ApiClient.convertToType(data['rate_mode'], 'String');
            }
            if (data.hasOwnProperty('total_stay')) {
                obj['total_stay'] = AddonOfferRate.constructFromObject(data['total_stay']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddonOffer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddonOffer</code>.
     */
    static validateJSON(data) {
        if (data['breakdown']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['breakdown'])) {
                throw new Error("Expected the field `breakdown` to be an array in the JSON data but got " + data['breakdown']);
            }
            // validate the optional field `breakdown` (array)
            for (const item of data['breakdown']) {
                AddonOfferBreakdown.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rate_mode'] && !(typeof data['rate_mode'] === 'string' || data['rate_mode'] instanceof String)) {
            throw new Error("Expected the field `rate_mode` to be a primitive type in the JSON string but got " + data['rate_mode']);
        }
        // validate the optional field `total_stay`
        if (data['total_stay']) { // data not null
          AddonOfferRate.validateJSON(data['total_stay']);
        }

        return true;
    }


}



/**
 * In this collection you will get an entry with price information for every day the addon service will be charged              to the folio of the reservation if the addon service is booked.
 * @member {Array.<module:model/AddonOfferBreakdown>} breakdown
 */
AddonOffer.prototype['breakdown'] = undefined;

/**
 * The code of the addon service
 * @member {String} code
 */
AddonOffer.prototype['code'] = undefined;

/**
 * The description of the addon service
 * @member {String} description
 */
AddonOffer.prototype['description'] = undefined;

/**
 * The frequency this addon service will be charged to the reservation. This field is a string that can be displayed,              but is not supposed to be used for computation
 * @member {String} frequency
 */
AddonOffer.prototype['frequency'] = undefined;

/**
 * The name of the addon service
 * @member {String} name
 */
AddonOffer.prototype['name'] = undefined;

/**
 * The price for an addon service can be per person or per room. All the prices in an offer are already calculated              for all rooms and number of persons per room. Based on this attribute you will be able to know how to calculate              the price per person and room, per room or per person depending on your needs.
 * @member {module:model/AddonOffer.RateModeEnum} rate_mode
 */
AddonOffer.prototype['rate_mode'] = undefined;

/**
 * @member {module:model/AddonOfferRate} total_stay
 */
AddonOffer.prototype['total_stay'] = undefined;





/**
 * Allowed values for the <code>rate_mode</code> property.
 * @enum {String}
 * @readonly
 */
AddonOffer['RateModeEnum'] = {

    /**
     * value: "PerRoom"
     * @const
     */
    "PerRoom": "PerRoom",

    /**
     * value: "PerPerson"
     * @const
     */
    "PerPerson": "PerPerson"
};



export default AddonOffer;

