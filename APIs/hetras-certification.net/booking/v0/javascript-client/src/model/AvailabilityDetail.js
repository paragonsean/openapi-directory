/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Blocked from './Blocked';
import LinkObject from './LinkObject';
import Maintenance from './Maintenance';

/**
 * The AvailabilityDetail model module.
 * @module model/AvailabilityDetail
 * @version v0
 */
class AvailabilityDetail {
    /**
     * Constructs a new <code>AvailabilityDetail</code>.
     * @alias module:model/AvailabilityDetail
     */
    constructor() { 
        
        AvailabilityDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AvailabilityDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailabilityDetail} obj Optional instance to populate.
     * @return {module:model/AvailabilityDetail} The populated <code>AvailabilityDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailabilityDetail();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = ApiClient.convertToType(data['_links'], {'String': LinkObject});
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('blocked')) {
                obj['blocked'] = Blocked.constructFromObject(data['blocked']);
            }
            if (data.hasOwnProperty('day_use')) {
                obj['day_use'] = ApiClient.convertToType(data['day_use'], 'Number');
            }
            if (data.hasOwnProperty('house_count')) {
                obj['house_count'] = ApiClient.convertToType(data['house_count'], 'Number');
            }
            if (data.hasOwnProperty('maintenance')) {
                obj['maintenance'] = Maintenance.constructFromObject(data['maintenance']);
            }
            if (data.hasOwnProperty('overbooking')) {
                obj['overbooking'] = ApiClient.convertToType(data['overbooking'], 'Number');
            }
            if (data.hasOwnProperty('room_count')) {
                obj['room_count'] = ApiClient.convertToType(data['room_count'], 'Number');
            }
            if (data.hasOwnProperty('sold')) {
                obj['sold'] = ApiClient.convertToType(data['sold'], 'Number');
            }
            if (data.hasOwnProperty('to_sell')) {
                obj['to_sell'] = ApiClient.convertToType(data['to_sell'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailabilityDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailabilityDetail</code>.
     */
    static validateJSON(data) {
        // validate the optional field `blocked`
        if (data['blocked']) { // data not null
          Blocked.validateJSON(data['blocked']);
        }
        // validate the optional field `maintenance`
        if (data['maintenance']) { // data not null
          Maintenance.validateJSON(data['maintenance']);
        }

        return true;
    }


}



/**
 * Collection of links to related resources
 * @member {Object.<String, module:model/LinkObject>} _links
 */
AvailabilityDetail.prototype['_links'] = undefined;

/**
 * The number of rooms that were originally available to sell. This is the the house count reduced by rooms set              to OutOfOrder but increased by the set overbooking
 * @member {Number} available
 */
AvailabilityDetail.prototype['available'] = undefined;

/**
 * @member {module:model/Blocked} blocked
 */
AvailabilityDetail.prototype['blocked'] = undefined;

/**
 * The number of day use reservations
 * @member {Number} day_use
 */
AvailabilityDetail.prototype['day_use'] = undefined;

/**
 * The total count of physical rooms reduced by the number of rooms set to OutOfInventory
 * @member {Number} house_count
 */
AvailabilityDetail.prototype['house_count'] = undefined;

/**
 * @member {module:model/Maintenance} maintenance
 */
AvailabilityDetail.prototype['maintenance'] = undefined;

/**
 * The manually set overbooking
 * @member {Number} overbooking
 */
AvailabilityDetail.prototype['overbooking'] = undefined;

/**
 * The total count of physical rooms
 * @member {Number} room_count
 */
AvailabilityDetail.prototype['room_count'] = undefined;

/**
 * The count of rooms sold. It sums up the rooms sold through individual reservations plus rooms blocked definitely
 * @member {Number} sold
 */
AvailabilityDetail.prototype['sold'] = undefined;

/**
 * The number of rooms still available to sell. It is available reduced by the already sold rooms
 * @member {Number} to_sell
 */
AvailabilityDetail.prototype['to_sell'] = undefined;






export default AvailabilityDetail;

