/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Token model module.
 * @module model/Token
 * @version v0
 */
class Token {
    /**
     * Constructs a new <code>Token</code>.
     * @alias module:model/Token
     */
    constructor() { 
        
        Token.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Token</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Token} obj Optional instance to populate.
     * @return {module:model/Token} The populated <code>Token</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Token();

            if (data.hasOwnProperty('authorization_expiry_date')) {
                obj['authorization_expiry_date'] = ApiClient.convertToType(data['authorization_expiry_date'], 'Date');
            }
            if (data.hasOwnProperty('authorization_reference')) {
                obj['authorization_reference'] = ApiClient.convertToType(data['authorization_reference'], 'String');
            }
            if (data.hasOwnProperty('authorization_status')) {
                obj['authorization_status'] = ApiClient.convertToType(data['authorization_status'], 'String');
            }
            if (data.hasOwnProperty('authorized_amount')) {
                obj['authorized_amount'] = ApiClient.convertToType(data['authorized_amount'], 'Number');
            }
            if (data.hasOwnProperty('merchant_reference')) {
                obj['merchant_reference'] = ApiClient.convertToType(data['merchant_reference'], 'String');
            }
            if (data.hasOwnProperty('shopper_email')) {
                obj['shopper_email'] = ApiClient.convertToType(data['shopper_email'], 'String');
            }
            if (data.hasOwnProperty('shopper_reference')) {
                obj['shopper_reference'] = ApiClient.convertToType(data['shopper_reference'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Token</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Token</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorization_reference'] && !(typeof data['authorization_reference'] === 'string' || data['authorization_reference'] instanceof String)) {
            throw new Error("Expected the field `authorization_reference` to be a primitive type in the JSON string but got " + data['authorization_reference']);
        }
        // ensure the json data is a string
        if (data['authorization_status'] && !(typeof data['authorization_status'] === 'string' || data['authorization_status'] instanceof String)) {
            throw new Error("Expected the field `authorization_status` to be a primitive type in the JSON string but got " + data['authorization_status']);
        }
        // ensure the json data is a string
        if (data['merchant_reference'] && !(typeof data['merchant_reference'] === 'string' || data['merchant_reference'] instanceof String)) {
            throw new Error("Expected the field `merchant_reference` to be a primitive type in the JSON string but got " + data['merchant_reference']);
        }
        // ensure the json data is a string
        if (data['shopper_email'] && !(typeof data['shopper_email'] === 'string' || data['shopper_email'] instanceof String)) {
            throw new Error("Expected the field `shopper_email` to be a primitive type in the JSON string but got " + data['shopper_email']);
        }
        // ensure the json data is a string
        if (data['shopper_reference'] && !(typeof data['shopper_reference'] === 'string' || data['shopper_reference'] instanceof String)) {
            throw new Error("Expected the field `shopper_reference` to be a primitive type in the JSON string but got " + data['shopper_reference']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }

        return true;
    }


}



/**
 * The authorization expiry date you got back from the payment service provider
 * @member {Date} authorization_expiry_date
 */
Token.prototype['authorization_expiry_date'] = undefined;

/**
 * The authorization reference. This value is specific for different payment service providers. There will be              a page on the developer portal explaining the pattern on how to fill this value for the payment service              provider hetras is integrated with
 * @member {String} authorization_reference
 */
Token.prototype['authorization_reference'] = undefined;

/**
 * The authorization status you got back from the payment service provider
 * @member {module:model/Token.AuthorizationStatusEnum} authorization_status
 */
Token.prototype['authorization_status'] = undefined;

/**
 * The authorized amount
 * @member {Number} authorized_amount
 */
Token.prototype['authorized_amount'] = undefined;

/**
 * The merchant reference you used when requesting the token from the payment service provider
 * @member {String} merchant_reference
 */
Token.prototype['merchant_reference'] = undefined;

/**
 * The shopper email you used when requesting the token from the payment service provider
 * @member {String} shopper_email
 */
Token.prototype['shopper_email'] = undefined;

/**
 * The shopper reference you used when requesting the token from the payment service provider. It can              be the same as the merchant reference
 * @member {String} shopper_reference
 */
Token.prototype['shopper_reference'] = undefined;

/**
 * The token id you get from the payment service provider
 * @member {String} token_id
 */
Token.prototype['token_id'] = undefined;





/**
 * Allowed values for the <code>authorization_status</code> property.
 * @enum {String}
 * @readonly
 */
Token['AuthorizationStatusEnum'] = {

    /**
     * value: "Authorized"
     * @const
     */
    "Authorized": "Authorized",

    /**
     * value: "Refused"
     * @const
     */
    "Refused": "Refused",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Consumed"
     * @const
     */
    "Consumed": "Consumed",

    /**
     * value: "AuthorizedWithZeroAmount"
     * @const
     */
    "AuthorizedWithZeroAmount": "AuthorizedWithZeroAmount"
};



export default Token;

