/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompaniesInfo from './CompaniesInfo';
import CustomersInfo from './CustomersInfo';
import HotelInfo from './HotelInfo';
import LinkObject from './LinkObject';
import RatePlan from './RatePlan';
import RoomInfo from './RoomInfo';

/**
 * The BookingListReservationItem model module.
 * @module model/BookingListReservationItem
 * @version v0
 */
class BookingListReservationItem {
    /**
     * Constructs a new <code>BookingListReservationItem</code>.
     * @alias module:model/BookingListReservationItem
     */
    constructor() { 
        
        BookingListReservationItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BookingListReservationItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BookingListReservationItem} obj Optional instance to populate.
     * @return {module:model/BookingListReservationItem} The populated <code>BookingListReservationItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BookingListReservationItem();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = ApiClient.convertToType(data['_links'], {'String': LinkObject});
            }
            if (data.hasOwnProperty('adults')) {
                obj['adults'] = ApiClient.convertToType(data['adults'], 'Number');
            }
            if (data.hasOwnProperty('arrival_date')) {
                obj['arrival_date'] = ApiClient.convertToType(data['arrival_date'], 'Date');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('block_code')) {
                obj['block_code'] = ApiClient.convertToType(data['block_code'], 'String');
            }
            if (data.hasOwnProperty('cancellation_id')) {
                obj['cancellation_id'] = ApiClient.convertToType(data['cancellation_id'], 'String');
            }
            if (data.hasOwnProperty('channel_code')) {
                obj['channel_code'] = ApiClient.convertToType(data['channel_code'], 'String');
            }
            if (data.hasOwnProperty('companies')) {
                obj['companies'] = CompaniesInfo.constructFromObject(data['companies']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('customers')) {
                obj['customers'] = CustomersInfo.constructFromObject(data['customers']);
            }
            if (data.hasOwnProperty('departure_date')) {
                obj['departure_date'] = ApiClient.convertToType(data['departure_date'], 'Date');
            }
            if (data.hasOwnProperty('external_id')) {
                obj['external_id'] = ApiClient.convertToType(data['external_id'], 'String');
            }
            if (data.hasOwnProperty('hotel')) {
                obj['hotel'] = HotelInfo.constructFromObject(data['hotel']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('market_code')) {
                obj['market_code'] = ApiClient.convertToType(data['market_code'], 'String');
            }
            if (data.hasOwnProperty('rate_plan')) {
                obj['rate_plan'] = RatePlan.constructFromObject(data['rate_plan']);
            }
            if (data.hasOwnProperty('reservation_number')) {
                obj['reservation_number'] = ApiClient.convertToType(data['reservation_number'], 'Number');
            }
            if (data.hasOwnProperty('reservation_status')) {
                obj['reservation_status'] = ApiClient.convertToType(data['reservation_status'], 'String');
            }
            if (data.hasOwnProperty('room')) {
                obj['room'] = RoomInfo.constructFromObject(data['room']);
            }
            if (data.hasOwnProperty('rooms')) {
                obj['rooms'] = ApiClient.convertToType(data['rooms'], 'Number');
            }
            if (data.hasOwnProperty('subchannel_code')) {
                obj['subchannel_code'] = ApiClient.convertToType(data['subchannel_code'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BookingListReservationItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BookingListReservationItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['block_code'] && !(typeof data['block_code'] === 'string' || data['block_code'] instanceof String)) {
            throw new Error("Expected the field `block_code` to be a primitive type in the JSON string but got " + data['block_code']);
        }
        // ensure the json data is a string
        if (data['cancellation_id'] && !(typeof data['cancellation_id'] === 'string' || data['cancellation_id'] instanceof String)) {
            throw new Error("Expected the field `cancellation_id` to be a primitive type in the JSON string but got " + data['cancellation_id']);
        }
        // ensure the json data is a string
        if (data['channel_code'] && !(typeof data['channel_code'] === 'string' || data['channel_code'] instanceof String)) {
            throw new Error("Expected the field `channel_code` to be a primitive type in the JSON string but got " + data['channel_code']);
        }
        // validate the optional field `companies`
        if (data['companies']) { // data not null
          CompaniesInfo.validateJSON(data['companies']);
        }
        // validate the optional field `customers`
        if (data['customers']) { // data not null
          CustomersInfo.validateJSON(data['customers']);
        }
        // ensure the json data is a string
        if (data['external_id'] && !(typeof data['external_id'] === 'string' || data['external_id'] instanceof String)) {
            throw new Error("Expected the field `external_id` to be a primitive type in the JSON string but got " + data['external_id']);
        }
        // validate the optional field `hotel`
        if (data['hotel']) { // data not null
          HotelInfo.validateJSON(data['hotel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['market_code'] && !(typeof data['market_code'] === 'string' || data['market_code'] instanceof String)) {
            throw new Error("Expected the field `market_code` to be a primitive type in the JSON string but got " + data['market_code']);
        }
        // validate the optional field `rate_plan`
        if (data['rate_plan']) { // data not null
          RatePlan.validateJSON(data['rate_plan']);
        }
        // ensure the json data is a string
        if (data['reservation_status'] && !(typeof data['reservation_status'] === 'string' || data['reservation_status'] instanceof String)) {
            throw new Error("Expected the field `reservation_status` to be a primitive type in the JSON string but got " + data['reservation_status']);
        }
        // validate the optional field `room`
        if (data['room']) { // data not null
          RoomInfo.validateJSON(data['room']);
        }
        // ensure the json data is a string
        if (data['subchannel_code'] && !(typeof data['subchannel_code'] === 'string' || data['subchannel_code'] instanceof String)) {
            throw new Error("Expected the field `subchannel_code` to be a primitive type in the JSON string but got " + data['subchannel_code']);
        }

        return true;
    }


}



/**
 * Collection of links to related resources
 * @member {Object.<String, module:model/LinkObject>} _links
 */
BookingListReservationItem.prototype['_links'] = undefined;

/**
 * The number of adults per room
 * @member {Number} adults
 */
BookingListReservationItem.prototype['adults'] = undefined;

/**
 * The arrival date of the guests
 * @member {Date} arrival_date
 */
BookingListReservationItem.prototype['arrival_date'] = undefined;

/**
 * The balance for all folios of this reservartion. It is calculated by all already charged room and service rates plus manual charges               or charges from other systems like POS minus all payments. A negative balance indicates the reservation is overpaid, a positive balance               that the guest owes the hotel money
 * @member {Number} balance
 */
BookingListReservationItem.prototype['balance'] = undefined;

/**
 * If this reservation is a pick-up from a block you will see the appropriate block code here
 * @member {String} block_code
 */
BookingListReservationItem.prototype['block_code'] = undefined;

/**
 * The cancellation id if the reservation has been cancelled
 * @member {String} cancellation_id
 */
BookingListReservationItem.prototype['cancellation_id'] = undefined;

/**
 * The code of the channel that was used when the booking has been created. It is also known as source.               Possible values can be OTA, GDS or DIRECT, but it is configurable per hotel
 * @member {String} channel_code
 */
BookingListReservationItem.prototype['channel_code'] = undefined;

/**
 * @member {module:model/CompaniesInfo} companies
 */
BookingListReservationItem.prototype['companies'] = undefined;

/**
 * Timestamp the reservation was created
 * @member {Date} created
 */
BookingListReservationItem.prototype['created'] = undefined;

/**
 * @member {module:model/CustomersInfo} customers
 */
BookingListReservationItem.prototype['customers'] = undefined;

/**
 * The departure date of the guests
 * @member {Date} departure_date
 */
BookingListReservationItem.prototype['departure_date'] = undefined;

/**
 * The external id for this reservation is the unique identifier from the system that created the booking in hetras. It could be the id of an              OTA like Expedia or booking.com or one of the GDS systems like Amadeus or Galileo
 * @member {String} external_id
 */
BookingListReservationItem.prototype['external_id'] = undefined;

/**
 * @member {module:model/HotelInfo} hotel
 */
BookingListReservationItem.prototype['hotel'] = undefined;

/**
 * The labels attached to this reservation.
 * @member {Array.<String>} labels
 */
BookingListReservationItem.prototype['labels'] = undefined;

/**
 * The code of the market segment the rate plan for this reservation is linked to
 * @member {String} market_code
 */
BookingListReservationItem.prototype['market_code'] = undefined;

/**
 * @member {module:model/RatePlan} rate_plan
 */
BookingListReservationItem.prototype['rate_plan'] = undefined;

/**
 * The reservation number of the reservation
 * @member {Number} reservation_number
 */
BookingListReservationItem.prototype['reservation_number'] = undefined;

/**
 * The current status of this reservation
 * @member {module:model/BookingListReservationItem.ReservationStatusEnum} reservation_status
 */
BookingListReservationItem.prototype['reservation_status'] = undefined;

/**
 * @member {module:model/RoomInfo} room
 */
BookingListReservationItem.prototype['room'] = undefined;

/**
 * The number of rooms this reservation is valid for. After a multi-room booking is done there will be               one reservation in hetras for this booking for all rooms. The hotel staff then will split this reservation into              one reservation per room to be able to check in the guests
 * @member {Number} rooms
 */
BookingListReservationItem.prototype['rooms'] = undefined;

/**
 * The code of the subchannel that was used when the booking has been created. Possible values can be               BOOKING, EXPEDIA or WALKIN, but it is configurable per hotel
 * @member {String} subchannel_code
 */
BookingListReservationItem.prototype['subchannel_code'] = undefined;

/**
 * Timestamp of when the reservation was changed the last time
 * @member {Date} updated
 */
BookingListReservationItem.prototype['updated'] = undefined;





/**
 * Allowed values for the <code>reservation_status</code> property.
 * @enum {String}
 * @readonly
 */
BookingListReservationItem['ReservationStatusEnum'] = {

    /**
     * value: "Tentative"
     * @const
     */
    "Tentative": "Tentative",

    /**
     * value: "Waitlisted"
     * @const
     */
    "Waitlisted": "Waitlisted",

    /**
     * value: "OnRequest"
     * @const
     */
    "OnRequest": "OnRequest",

    /**
     * value: "NonGuaranteed"
     * @const
     */
    "NonGuaranteed": "NonGuaranteed",

    /**
     * value: "Guaranteed"
     * @const
     */
    "Guaranteed": "Guaranteed",

    /**
     * value: "InHouse"
     * @const
     */
    "InHouse": "InHouse",

    /**
     * value: "CheckedOut"
     * @const
     */
    "CheckedOut": "CheckedOut",

    /**
     * value: "NoShow"
     * @const
     */
    "NoShow": "NoShow",

    /**
     * value: "Denied"
     * @const
     */
    "Denied": "Denied",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Released"
     * @const
     */
    "Released": "Released",

    /**
     * value: "Walked"
     * @const
     */
    "Walked": "Walked",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "WalkIn"
     * @const
     */
    "WalkIn": "WalkIn",

    /**
     * value: "Registered"
     * @const
     */
    "Registered": "Registered"
};



export default BookingListReservationItem;

