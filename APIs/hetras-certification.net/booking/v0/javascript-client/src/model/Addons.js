/**
 * hetras Booking API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddonOffer from './AddonOffer';
import RatePlan from './RatePlan';
import ReservationRoom from './ReservationRoom';

/**
 * The Addons model module.
 * @module model/Addons
 * @version v0
 */
class Addons {
    /**
     * Constructs a new <code>Addons</code>.
     * @alias module:model/Addons
     */
    constructor() { 
        
        Addons.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Addons</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Addons} obj Optional instance to populate.
     * @return {module:model/Addons} The populated <code>Addons</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Addons();

            if (data.hasOwnProperty('addon_services')) {
                obj['addon_services'] = ApiClient.convertToType(data['addon_services'], [AddonOffer]);
            }
            if (data.hasOwnProperty('adults')) {
                obj['adults'] = ApiClient.convertToType(data['adults'], 'Number');
            }
            if (data.hasOwnProperty('arrival_date')) {
                obj['arrival_date'] = ApiClient.convertToType(data['arrival_date'], 'Date');
            }
            if (data.hasOwnProperty('departure_date')) {
                obj['departure_date'] = ApiClient.convertToType(data['departure_date'], 'Date');
            }
            if (data.hasOwnProperty('hotel_id')) {
                obj['hotel_id'] = ApiClient.convertToType(data['hotel_id'], 'Number');
            }
            if (data.hasOwnProperty('hotel_name')) {
                obj['hotel_name'] = ApiClient.convertToType(data['hotel_name'], 'String');
            }
            if (data.hasOwnProperty('rate_plan')) {
                obj['rate_plan'] = RatePlan.constructFromObject(data['rate_plan']);
            }
            if (data.hasOwnProperty('room')) {
                obj['room'] = ReservationRoom.constructFromObject(data['room']);
            }
            if (data.hasOwnProperty('rooms')) {
                obj['rooms'] = ApiClient.convertToType(data['rooms'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Addons</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Addons</code>.
     */
    static validateJSON(data) {
        if (data['addon_services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addon_services'])) {
                throw new Error("Expected the field `addon_services` to be an array in the JSON data but got " + data['addon_services']);
            }
            // validate the optional field `addon_services` (array)
            for (const item of data['addon_services']) {
                AddonOffer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['hotel_name'] && !(typeof data['hotel_name'] === 'string' || data['hotel_name'] instanceof String)) {
            throw new Error("Expected the field `hotel_name` to be a primitive type in the JSON string but got " + data['hotel_name']);
        }
        // validate the optional field `rate_plan`
        if (data['rate_plan']) { // data not null
          RatePlan.validateJSON(data['rate_plan']);
        }
        // validate the optional field `room`
        if (data['room']) { // data not null
          ReservationRoom.validateJSON(data['room']);
        }

        return true;
    }


}



/**
 * A collection of offers for addon services.
 * @member {Array.<module:model/AddonOffer>} addon_services
 */
Addons.prototype['addon_services'] = undefined;

/**
 * The number of adults per room the addon offers are requested for. The rates will then already reflects this.
 * @member {Number} adults
 */
Addons.prototype['adults'] = undefined;

/**
 * The arrival date of the reservation the addon offers are supposed to be booked on.
 * @member {Date} arrival_date
 */
Addons.prototype['arrival_date'] = undefined;

/**
 * The departure date of the reservation the addon offers are supposed to be booked on.
 * @member {Date} departure_date
 */
Addons.prototype['departure_date'] = undefined;

/**
 * The id of the hotel the addon offers will be valid for
 * @member {Number} hotel_id
 */
Addons.prototype['hotel_id'] = undefined;

/**
 * The name of the hotel the addon offers will be valid for
 * @member {String} hotel_name
 */
Addons.prototype['hotel_name'] = undefined;

/**
 * @member {module:model/RatePlan} rate_plan
 */
Addons.prototype['rate_plan'] = undefined;

/**
 * @member {module:model/ReservationRoom} room
 */
Addons.prototype['room'] = undefined;

/**
 * The number of rooms the addon offers are requested for. The rates will then already reflects this.
 * @member {Number} rooms
 */
Addons.prototype['rooms'] = undefined;






export default Addons;

