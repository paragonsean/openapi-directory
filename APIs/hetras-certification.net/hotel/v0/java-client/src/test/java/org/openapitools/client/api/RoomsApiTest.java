/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OperationRoomPatchRequest;
import org.openapitools.client.model.Room;
import org.openapitools.client.model.RoomListResponse;
import org.openapitools.client.model.TotalCountResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoomsApi
 */
@Disabled
public class RoomsApiTest {

    private final RoomsApi api = new RoomsApi();

    /**
     * Request available rooms using a given criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roomsGetAvailableRoomsTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        byte[] adults = null;
        Boolean includeOutOfService = null;
        List<String> roomTypes = null;
        List<String> amenities = null;
        List<String> views = null;
        List<String> locations = null;
        Integer skip = null;
        Integer top = null;
        String inlinecount = null;
        RoomListResponse response = api.roomsGetAvailableRooms(appId, appKey, hotelId, from, to, adults, includeOutOfService, roomTypes, amenities, views, locations, skip, top, inlinecount);
        // TODO: test validations
    }

    /**
     * Get all the details for a specific room in the hotel.
     *
     * With this call you can load the details about a specific room in the hotel. It will show you the current status of the room.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roomsGetRoomTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String roomNumber = null;
        Room response = api.roomsGetRoom(appId, appKey, hotelId, roomNumber);
        // TODO: test validations
    }

    /**
     * Get a list of rooms using the provided filtering and pagination criteria.
     *
     * Find all rooms for the hotel that match the specified filter criteria. The filtering will be done based on the current state of              the rooms.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roomsGetRoomsTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String occupancy = null;
        List<String> conditions = null;
        List<String> maintenances = null;
        List<String> roomTypes = null;
        List<String> amenities = null;
        List<String> views = null;
        List<String> locations = null;
        Integer skip = null;
        Integer top = null;
        String inlinecount = null;
        RoomListResponse response = api.roomsGetRooms(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations, skip, top, inlinecount);
        // TODO: test validations
    }

    /**
     * Get the count of all rooms in the hotel matching the given filter criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roomsGetRoomsCountTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String occupancy = null;
        List<String> conditions = null;
        List<String> maintenances = null;
        List<String> roomTypes = null;
        List<String> amenities = null;
        List<String> views = null;
        List<String> locations = null;
        TotalCountResponse response = api.roomsGetRoomsCount(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations);
        // TODO: test validations
    }

    /**
     * Partially updates a room.
     *
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to modify condition and housekeeping occupancy status of the room.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/status/condition\&quot;, \&quot;value\&quot;: \&quot;CleanNotInspected\&quot;                }, {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/status/housekeeping_occupancy\&quot;, \&quot;value\&quot;: \&quot;Vacant\&quot;                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roomsPatchRoomTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String roomNumber = null;
        List<OperationRoomPatchRequest> patchRequest = null;
        Object response = api.roomsPatchRoom(appId, appKey, hotelId, roomNumber, patchRequest);
        // TODO: test validations
    }

}
