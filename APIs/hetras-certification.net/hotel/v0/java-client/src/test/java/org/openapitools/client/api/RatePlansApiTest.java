/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExtendedRateplanEntry;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OperationRatePatchRequest;
import org.openapitools.client.model.RateResponse;
import org.openapitools.client.model.RateplansListResponse;
import org.openapitools.client.model.RatesBatchUpdateRequestItem;
import org.openapitools.client.model.RatesResponse;
import org.openapitools.client.model.TotalCountResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RatePlansApi
 */
@Disabled
public class RatePlansApiTest {

    private final RatePlansApi api = new RatePlansApi();

    /**
     * Update a list of base rateplans for a given period and a given base price for single occupancy.
     *
     * Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;rateplan\&quot;: \&quot;STDN01\&quot;, \&quot;from\&quot;: \&quot;2018-01-01\&quot;, \&quot;to\&quot;: \&quot;2018-01-30\&quot;, \&quot;base_price\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ratePlansBatchUpdateRatesTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        List<RatesBatchUpdateRequestItem> request = null;
        Object response = api.ratePlansBatchUpdateRates(appId, appKey, hotelId, request);
        // TODO: test validations
    }

    /**
     * Get the setup of a daily rate for a specific business day and rateplan.
     *
     * Read the setup of the daily rate for the defined rateplan for that specific business day.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ratePlansGetRateTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String rateplanCode = null;
        OffsetDateTime businessDay = null;
        RateResponse response = api.ratePlansGetRate(appId, appKey, hotelId, rateplanCode, businessDay);
        // TODO: test validations
    }

    /**
     * Get all the details for a specific rateplan in the hotel.
     *
     * Read the details about a specific rateplan for the defined hotel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ratePlansGetRateplanTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String rateplanCode = null;
        ExtendedRateplanEntry response = api.ratePlansGetRateplan(appId, appKey, hotelId, rateplanCode);
        // TODO: test validations
    }

    /**
     * Get a list of rateplans for the specified hotel id matching the filter criteria.
     *
     * With this call you can find rateplans for a hotel by different filters. By default and without any filter criteria              defined it will return you all active rateplans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ratePlansGetRateplansTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String sellingStatus = null;
        Boolean commissionable = null;
        String group = null;
        String baseRateplan = null;
        String channelGroup = null;
        String channelCode = null;
        List<String> marketCodes = null;
        List<String> roomTypes = null;
        List<String> includedServices = null;
        Integer skip = null;
        Integer top = null;
        String inlinecount = null;
        RateplansListResponse response = api.ratePlansGetRateplans(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices, skip, top, inlinecount);
        // TODO: test validations
    }

    /**
     * Get the count of all rateplans in the hotel matching the given filter criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ratePlansGetRateplansCountTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String sellingStatus = null;
        Boolean commissionable = null;
        String group = null;
        String baseRateplan = null;
        String channelGroup = null;
        String channelCode = null;
        List<String> marketCodes = null;
        List<String> roomTypes = null;
        List<String> includedServices = null;
        TotalCountResponse response = api.ratePlansGetRateplansCount(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices);
        // TODO: test validations
    }

    /**
     * Get the setup of the daily rates for a specific rateplan and a defined timeperiod.
     *
     * With this call you can read the daily rates setup including the cancellation policy and minimum guarantee per day for the              specified rateplan. You can specify a timeperiod to read the daily rates for. The rateplan needs to be active for at least              one business day in the defined time period and have rates loaded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ratePlansGetRatesTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String rateplanCode = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        String expand = null;
        Integer skip = null;
        Integer top = null;
        String inlinecount = null;
        RatesResponse response = api.ratePlansGetRates(appId, appKey, hotelId, rateplanCode, from, to, expand, skip, top, inlinecount);
        // TODO: test validations
    }

    /**
     * Get the count of all active and loaded daily rates for the defined rateplan in a specified time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ratePlansGetRatesCountTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String rateplanCode = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        TotalCountResponse response = api.ratePlansGetRatesCount(appId, appKey, hotelId, rateplanCode, from, to);
        // TODO: test validations
    }

    /**
     * Partially update a rate of the specified rateplan for a defined business day.
     *
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified business day.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/base_price\&quot;, \&quot;value\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ratePlansPatchRateTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String rateplanCode = null;
        OffsetDateTime businessDay = null;
        List<OperationRatePatchRequest> patchRequest = null;
        Object response = api.ratePlansPatchRate(appId, appKey, hotelId, rateplanCode, businessDay, patchRequest);
        // TODO: test validations
    }

    /**
     * Partially update a rate of the specified rateplan for the defined time period.
     *
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/base_price\&quot;, \&quot;value\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ratePlansPatchRatesTest() throws ApiException {
        String appId = null;
        String appKey = null;
        Integer hotelId = null;
        String rateplanCode = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        List<OperationRatePatchRequest> patchRequest = null;
        Object response = api.ratePlansPatchRates(appId, appKey, hotelId, rateplanCode, from, to, patchRequest);
        // TODO: test validations
    }

}
