/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LinkObject;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.PriceDerivation;
import org.openapitools.client.model.RoomTypeSupplement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RateResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RateResponse {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, LinkObject> links = new HashMap<>();

  public static final String SERIALIZED_NAME_BASE_PRICE = "base_price";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE)
  private Double basePrice;

  public static final String SERIALIZED_NAME_BUSINESS_DAY = "business_day";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DAY)
  private OffsetDateTime businessDay;

  public static final String SERIALIZED_NAME_CANCELLATION_POLICY = "cancellation_policy";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICY)
  private Policy cancellationPolicy;

  public static final String SERIALIZED_NAME_DERIVATION = "derivation";
  @SerializedName(SERIALIZED_NAME_DERIVATION)
  private PriceDerivation derivation;

  /**
   * The minimum guarantee
   */
  @JsonAdapter(MinimumGuaranteeTypeEnum.Adapter.class)
  public enum MinimumGuaranteeTypeEnum {
    PM4_HOLD("PM4Hold"),
    
    PM6_HOLD("PM6Hold"),
    
    GUARANTEE_TO_CREDIT_CARD("GuaranteeToCreditCard"),
    
    GUARANTEE_TO_GUEST_ACCOUNT("GuaranteeToGuestAccount"),
    
    GUARANTEE_BY_TRAVEL_AGENT("GuaranteeByTravelAgent"),
    
    GUARANTEE_BY_COMPANY("GuaranteeByCompany"),
    
    DEPOSIT("Deposit"),
    
    VOUCHER("Voucher"),
    
    PREPAYMENT("Prepayment"),
    
    NON_GUARANTEED("NonGuaranteed"),
    
    TENTATIVE("Tentative"),
    
    WAITLIST("Waitlist");

    private String value;

    MinimumGuaranteeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumGuaranteeTypeEnum fromValue(String value) {
      for (MinimumGuaranteeTypeEnum b : MinimumGuaranteeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumGuaranteeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumGuaranteeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumGuaranteeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumGuaranteeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinimumGuaranteeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_GUARANTEE_TYPE = "minimum_guarantee_type";
  @SerializedName(SERIALIZED_NAME_MINIMUM_GUARANTEE_TYPE)
  private MinimumGuaranteeTypeEnum minimumGuaranteeType;

  public static final String SERIALIZED_NAME_PER_PERSON_SURCHARGE = "per_person_surcharge";
  @SerializedName(SERIALIZED_NAME_PER_PERSON_SURCHARGE)
  private Double perPersonSurcharge;

  public static final String SERIALIZED_NAME_ROOM_TYPE_SUPPLEMENTS = "room_type_supplements";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE_SUPPLEMENTS)
  private List<RoomTypeSupplement> roomTypeSupplements = new ArrayList<>();

  public RateResponse() {
  }

  public RateResponse links(Map<String, LinkObject> links) {
    this.links = links;
    return this;
  }

  public RateResponse putLinksItem(String key, LinkObject linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Collection of links to related resources
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, LinkObject> getLinks() {
    return links;
  }

  public void setLinks(Map<String, LinkObject> links) {
    this.links = links;
  }


  public RateResponse basePrice(Double basePrice) {
    this.basePrice = basePrice;
    return this;
  }

  /**
   * The price for this business day for the default room type and occupancy of one adult. The price is              only available for base rateplans. Please be aware that it might be the case that the default room              type is not sold by the rateplan. Nevertheless the supplements will always be added to the price for               the default room type and one adult
   * @return basePrice
   */
  @javax.annotation.Nullable
  public Double getBasePrice() {
    return basePrice;
  }

  public void setBasePrice(Double basePrice) {
    this.basePrice = basePrice;
  }


  public RateResponse businessDay(OffsetDateTime businessDay) {
    this.businessDay = businessDay;
    return this;
  }

  /**
   * The business day
   * @return businessDay
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBusinessDay() {
    return businessDay;
  }

  public void setBusinessDay(OffsetDateTime businessDay) {
    this.businessDay = businessDay;
  }


  public RateResponse cancellationPolicy(Policy cancellationPolicy) {
    this.cancellationPolicy = cancellationPolicy;
    return this;
  }

  /**
   * Get cancellationPolicy
   * @return cancellationPolicy
   */
  @javax.annotation.Nullable
  public Policy getCancellationPolicy() {
    return cancellationPolicy;
  }

  public void setCancellationPolicy(Policy cancellationPolicy) {
    this.cancellationPolicy = cancellationPolicy;
  }


  public RateResponse derivation(PriceDerivation derivation) {
    this.derivation = derivation;
    return this;
  }

  /**
   * Get derivation
   * @return derivation
   */
  @javax.annotation.Nullable
  public PriceDerivation getDerivation() {
    return derivation;
  }

  public void setDerivation(PriceDerivation derivation) {
    this.derivation = derivation;
  }


  public RateResponse minimumGuaranteeType(MinimumGuaranteeTypeEnum minimumGuaranteeType) {
    this.minimumGuaranteeType = minimumGuaranteeType;
    return this;
  }

  /**
   * The minimum guarantee
   * @return minimumGuaranteeType
   */
  @javax.annotation.Nullable
  public MinimumGuaranteeTypeEnum getMinimumGuaranteeType() {
    return minimumGuaranteeType;
  }

  public void setMinimumGuaranteeType(MinimumGuaranteeTypeEnum minimumGuaranteeType) {
    this.minimumGuaranteeType = minimumGuaranteeType;
  }


  public RateResponse perPersonSurcharge(Double perPersonSurcharge) {
    this.perPersonSurcharge = perPersonSurcharge;
    return this;
  }

  /**
   * The surcharge per additional adult staying in the room. It is only available on base rateplans
   * @return perPersonSurcharge
   */
  @javax.annotation.Nullable
  public Double getPerPersonSurcharge() {
    return perPersonSurcharge;
  }

  public void setPerPersonSurcharge(Double perPersonSurcharge) {
    this.perPersonSurcharge = perPersonSurcharge;
  }


  public RateResponse roomTypeSupplements(List<RoomTypeSupplement> roomTypeSupplements) {
    this.roomTypeSupplements = roomTypeSupplements;
    return this;
  }

  public RateResponse addRoomTypeSupplementsItem(RoomTypeSupplement roomTypeSupplementsItem) {
    if (this.roomTypeSupplements == null) {
      this.roomTypeSupplements = new ArrayList<>();
    }
    this.roomTypeSupplements.add(roomTypeSupplementsItem);
    return this;
  }

  /**
   * List of supplements added to the price per room type
   * @return roomTypeSupplements
   */
  @javax.annotation.Nullable
  public List<RoomTypeSupplement> getRoomTypeSupplements() {
    return roomTypeSupplements;
  }

  public void setRoomTypeSupplements(List<RoomTypeSupplement> roomTypeSupplements) {
    this.roomTypeSupplements = roomTypeSupplements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateResponse rateResponse = (RateResponse) o;
    return Objects.equals(this.links, rateResponse.links) &&
        Objects.equals(this.basePrice, rateResponse.basePrice) &&
        Objects.equals(this.businessDay, rateResponse.businessDay) &&
        Objects.equals(this.cancellationPolicy, rateResponse.cancellationPolicy) &&
        Objects.equals(this.derivation, rateResponse.derivation) &&
        Objects.equals(this.minimumGuaranteeType, rateResponse.minimumGuaranteeType) &&
        Objects.equals(this.perPersonSurcharge, rateResponse.perPersonSurcharge) &&
        Objects.equals(this.roomTypeSupplements, rateResponse.roomTypeSupplements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, basePrice, businessDay, cancellationPolicy, derivation, minimumGuaranteeType, perPersonSurcharge, roomTypeSupplements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateResponse {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    basePrice: ").append(toIndentedString(basePrice)).append("\n");
    sb.append("    businessDay: ").append(toIndentedString(businessDay)).append("\n");
    sb.append("    cancellationPolicy: ").append(toIndentedString(cancellationPolicy)).append("\n");
    sb.append("    derivation: ").append(toIndentedString(derivation)).append("\n");
    sb.append("    minimumGuaranteeType: ").append(toIndentedString(minimumGuaranteeType)).append("\n");
    sb.append("    perPersonSurcharge: ").append(toIndentedString(perPersonSurcharge)).append("\n");
    sb.append("    roomTypeSupplements: ").append(toIndentedString(roomTypeSupplements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("base_price");
    openapiFields.add("business_day");
    openapiFields.add("cancellation_policy");
    openapiFields.add("derivation");
    openapiFields.add("minimum_guarantee_type");
    openapiFields.add("per_person_surcharge");
    openapiFields.add("room_type_supplements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateResponse is not found in the empty JSON string", RateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cancellation_policy`
      if (jsonObj.get("cancellation_policy") != null && !jsonObj.get("cancellation_policy").isJsonNull()) {
        Policy.validateJsonElement(jsonObj.get("cancellation_policy"));
      }
      // validate the optional field `derivation`
      if (jsonObj.get("derivation") != null && !jsonObj.get("derivation").isJsonNull()) {
        PriceDerivation.validateJsonElement(jsonObj.get("derivation"));
      }
      if ((jsonObj.get("minimum_guarantee_type") != null && !jsonObj.get("minimum_guarantee_type").isJsonNull()) && !jsonObj.get("minimum_guarantee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_guarantee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_guarantee_type").toString()));
      }
      // validate the optional field `minimum_guarantee_type`
      if (jsonObj.get("minimum_guarantee_type") != null && !jsonObj.get("minimum_guarantee_type").isJsonNull()) {
        MinimumGuaranteeTypeEnum.validateJsonElement(jsonObj.get("minimum_guarantee_type"));
      }
      if (jsonObj.get("room_type_supplements") != null && !jsonObj.get("room_type_supplements").isJsonNull()) {
        JsonArray jsonArrayroomTypeSupplements = jsonObj.getAsJsonArray("room_type_supplements");
        if (jsonArrayroomTypeSupplements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("room_type_supplements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `room_type_supplements` to be an array in the JSON string but got `%s`", jsonObj.get("room_type_supplements").toString()));
          }

          // validate the optional field `room_type_supplements` (array)
          for (int i = 0; i < jsonArrayroomTypeSupplements.size(); i++) {
            RoomTypeSupplement.validateJsonElement(jsonArrayroomTypeSupplements.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RateResponse>() {
           @Override
           public void write(JsonWriter out, RateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RateResponse
   * @throws IOException if the JSON string is invalid with respect to RateResponse
   */
  public static RateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateResponse.class);
  }

  /**
   * Convert an instance of RateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

