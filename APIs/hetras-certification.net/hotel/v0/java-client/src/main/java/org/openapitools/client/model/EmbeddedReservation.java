/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.LinkObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic data about a reservation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmbeddedReservation {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, LinkObject> links = new HashMap<>();

  public static final String SERIALIZED_NAME_ARRIVAL_DATE = "arrival_date";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE)
  private OffsetDateTime arrivalDate;

  public static final String SERIALIZED_NAME_CONFIRMATION_ID = "confirmation_id";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_ID)
  private String confirmationId;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departure_date";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private OffsetDateTime departureDate;

  public static final String SERIALIZED_NAME_RESERVATION_NUMBER = "reservation_number";
  @SerializedName(SERIALIZED_NAME_RESERVATION_NUMBER)
  private Integer reservationNumber;

  /**
   * The current status of this reservation
   */
  @JsonAdapter(ReservationStatusEnum.Adapter.class)
  public enum ReservationStatusEnum {
    TENTATIVE("Tentative"),
    
    WAITLISTED("Waitlisted"),
    
    ON_REQUEST("OnRequest"),
    
    NON_GUARANTEED("NonGuaranteed"),
    
    GUARANTEED("Guaranteed"),
    
    IN_HOUSE("InHouse"),
    
    CHECKED_OUT("CheckedOut"),
    
    NO_SHOW("NoShow"),
    
    DENIED("Denied"),
    
    CANCELLED("Cancelled"),
    
    RELEASED("Released"),
    
    WALKED("Walked"),
    
    EXPIRED("Expired"),
    
    WALK_IN("WalkIn"),
    
    REGISTERED("Registered");

    private String value;

    ReservationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReservationStatusEnum fromValue(String value) {
      for (ReservationStatusEnum b : ReservationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReservationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReservationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReservationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReservationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReservationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESERVATION_STATUS = "reservation_status";
  @SerializedName(SERIALIZED_NAME_RESERVATION_STATUS)
  private ReservationStatusEnum reservationStatus;

  public EmbeddedReservation() {
  }

  public EmbeddedReservation links(Map<String, LinkObject> links) {
    this.links = links;
    return this;
  }

  public EmbeddedReservation putLinksItem(String key, LinkObject linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Collection of links to related resources
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, LinkObject> getLinks() {
    return links;
  }

  public void setLinks(Map<String, LinkObject> links) {
    this.links = links;
  }


  public EmbeddedReservation arrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
    return this;
  }

  /**
   * The arrival date of the guests
   * @return arrivalDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getArrivalDate() {
    return arrivalDate;
  }

  public void setArrivalDate(OffsetDateTime arrivalDate) {
    this.arrivalDate = arrivalDate;
  }


  public EmbeddedReservation confirmationId(String confirmationId) {
    this.confirmationId = confirmationId;
    return this;
  }

  /**
   * he confirmation id for the booking which the guest can use to check in on the kiosk, add the               booking to the mobile app etc. It is used as identifier for all reservations done with the               same booking request
   * @return confirmationId
   */
  @javax.annotation.Nonnull
  public String getConfirmationId() {
    return confirmationId;
  }

  public void setConfirmationId(String confirmationId) {
    this.confirmationId = confirmationId;
  }


  public EmbeddedReservation departureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * The departure date of the guests
   * @return departureDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDepartureDate() {
    return departureDate;
  }

  public void setDepartureDate(OffsetDateTime departureDate) {
    this.departureDate = departureDate;
  }


  public EmbeddedReservation reservationNumber(Integer reservationNumber) {
    this.reservationNumber = reservationNumber;
    return this;
  }

  /**
   * The reservation number of the reservation
   * @return reservationNumber
   */
  @javax.annotation.Nonnull
  public Integer getReservationNumber() {
    return reservationNumber;
  }

  public void setReservationNumber(Integer reservationNumber) {
    this.reservationNumber = reservationNumber;
  }


  public EmbeddedReservation reservationStatus(ReservationStatusEnum reservationStatus) {
    this.reservationStatus = reservationStatus;
    return this;
  }

  /**
   * The current status of this reservation
   * @return reservationStatus
   */
  @javax.annotation.Nonnull
  public ReservationStatusEnum getReservationStatus() {
    return reservationStatus;
  }

  public void setReservationStatus(ReservationStatusEnum reservationStatus) {
    this.reservationStatus = reservationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbeddedReservation embeddedReservation = (EmbeddedReservation) o;
    return Objects.equals(this.links, embeddedReservation.links) &&
        Objects.equals(this.arrivalDate, embeddedReservation.arrivalDate) &&
        Objects.equals(this.confirmationId, embeddedReservation.confirmationId) &&
        Objects.equals(this.departureDate, embeddedReservation.departureDate) &&
        Objects.equals(this.reservationNumber, embeddedReservation.reservationNumber) &&
        Objects.equals(this.reservationStatus, embeddedReservation.reservationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, arrivalDate, confirmationId, departureDate, reservationNumber, reservationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbeddedReservation {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    arrivalDate: ").append(toIndentedString(arrivalDate)).append("\n");
    sb.append("    confirmationId: ").append(toIndentedString(confirmationId)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    reservationNumber: ").append(toIndentedString(reservationNumber)).append("\n");
    sb.append("    reservationStatus: ").append(toIndentedString(reservationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("arrival_date");
    openapiFields.add("confirmation_id");
    openapiFields.add("departure_date");
    openapiFields.add("reservation_number");
    openapiFields.add("reservation_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arrival_date");
    openapiRequiredFields.add("confirmation_id");
    openapiRequiredFields.add("departure_date");
    openapiRequiredFields.add("reservation_number");
    openapiRequiredFields.add("reservation_status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmbeddedReservation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmbeddedReservation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbeddedReservation is not found in the empty JSON string", EmbeddedReservation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmbeddedReservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmbeddedReservation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmbeddedReservation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("confirmation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmation_id").toString()));
      }
      if (!jsonObj.get("reservation_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservation_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservation_status").toString()));
      }
      // validate the required field `reservation_status`
      ReservationStatusEnum.validateJsonElement(jsonObj.get("reservation_status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbeddedReservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbeddedReservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbeddedReservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedReservation.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbeddedReservation>() {
           @Override
           public void write(JsonWriter out, EmbeddedReservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbeddedReservation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmbeddedReservation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmbeddedReservation
   * @throws IOException if the JSON string is invalid with respect to EmbeddedReservation
   */
  public static EmbeddedReservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbeddedReservation.class);
  }

  /**
   * Convert an instance of EmbeddedReservation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

