/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rateplan update entry, for a given range and a given price.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RatesBatchUpdateRequestItem {
  public static final String SERIALIZED_NAME_BASE_PRICE = "base_price";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE)
  private Double basePrice;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private OffsetDateTime from;

  public static final String SERIALIZED_NAME_RATEPLAN = "rateplan";
  @SerializedName(SERIALIZED_NAME_RATEPLAN)
  private String rateplan;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private OffsetDateTime to;

  public RatesBatchUpdateRequestItem() {
  }

  public RatesBatchUpdateRequestItem basePrice(Double basePrice) {
    this.basePrice = basePrice;
    return this;
  }

  /**
   * The price of the rateplan for the default room type and single occupancy.
   * @return basePrice
   */
  @javax.annotation.Nonnull
  public Double getBasePrice() {
    return basePrice;
  }

  public void setBasePrice(Double basePrice) {
    this.basePrice = basePrice;
  }


  public RatesBatchUpdateRequestItem from(OffsetDateTime from) {
    this.from = from;
    return this;
  }

  /**
   * Defines the first business day you would like to update rates. The maximum time span between &lt;i&gt;from&lt;/i&gt;Â´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days.
   * @return from
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFrom() {
    return from;
  }

  public void setFrom(OffsetDateTime from) {
    this.from = from;
  }


  public RatesBatchUpdateRequestItem rateplan(String rateplan) {
    this.rateplan = rateplan;
    return this;
  }

  /**
   * The rateplan code to be updated. NOTE: this must be a base rateplan and not a derived one.
   * @return rateplan
   */
  @javax.annotation.Nonnull
  public String getRateplan() {
    return rateplan;
  }

  public void setRateplan(String rateplan) {
    this.rateplan = rateplan;
  }


  public RatesBatchUpdateRequestItem to(OffsetDateTime to) {
    this.to = to;
    return this;
  }

  /**
   * Defines the last business day you would like to update rates. This can be same as {Hetras.PublicApi.Models.Hotels.Rateplans.Rates.RatesBatchUpdateRequestItem.To} if the update is for a single date.
   * @return to
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTo() {
    return to;
  }

  public void setTo(OffsetDateTime to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatesBatchUpdateRequestItem ratesBatchUpdateRequestItem = (RatesBatchUpdateRequestItem) o;
    return Objects.equals(this.basePrice, ratesBatchUpdateRequestItem.basePrice) &&
        Objects.equals(this.from, ratesBatchUpdateRequestItem.from) &&
        Objects.equals(this.rateplan, ratesBatchUpdateRequestItem.rateplan) &&
        Objects.equals(this.to, ratesBatchUpdateRequestItem.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePrice, from, rateplan, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatesBatchUpdateRequestItem {\n");
    sb.append("    basePrice: ").append(toIndentedString(basePrice)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    rateplan: ").append(toIndentedString(rateplan)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_price");
    openapiFields.add("from");
    openapiFields.add("rateplan");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base_price");
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("rateplan");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RatesBatchUpdateRequestItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RatesBatchUpdateRequestItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatesBatchUpdateRequestItem is not found in the empty JSON string", RatesBatchUpdateRequestItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RatesBatchUpdateRequestItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatesBatchUpdateRequestItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RatesBatchUpdateRequestItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("rateplan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateplan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateplan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatesBatchUpdateRequestItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatesBatchUpdateRequestItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatesBatchUpdateRequestItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatesBatchUpdateRequestItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RatesBatchUpdateRequestItem>() {
           @Override
           public void write(JsonWriter out, RatesBatchUpdateRequestItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatesBatchUpdateRequestItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RatesBatchUpdateRequestItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RatesBatchUpdateRequestItem
   * @throws IOException if the JSON string is invalid with respect to RatesBatchUpdateRequestItem
   */
  public static RatesBatchUpdateRequestItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatesBatchUpdateRequestItem.class);
  }

  /**
   * Convert an instance of RatesBatchUpdateRequestItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

