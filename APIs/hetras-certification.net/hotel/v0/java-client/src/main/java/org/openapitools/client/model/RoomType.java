/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SimpleAttribute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represent a room type for a property
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoomType {
  public static final String SERIALIZED_NAME_AMENITIES = "amenities";
  @SerializedName(SERIALIZED_NAME_AMENITIES)
  private List<SimpleAttribute> amenities = new ArrayList<>();

  /**
   * The type of bed for the room type
   */
  @JsonAdapter(BeddingTypeEnum.Adapter.class)
  public enum BeddingTypeEnum {
    NOT_DEFINED("NotDefined"),
    
    DOUBLE("Double"),
    
    FUTON("Futon"),
    
    KING("King"),
    
    MURPHY_BED("MurphyBed"),
    
    QUEEN("Queen"),
    
    SOFA_BED("SofaBed"),
    
    TATAMI_MATS("TatamiMats"),
    
    TWIN("Twin"),
    
    SINGLE("Single");

    private String value;

    BeddingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BeddingTypeEnum fromValue(String value) {
      for (BeddingTypeEnum b : BeddingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BeddingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BeddingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BeddingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BeddingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BeddingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BEDDING_TYPE = "bedding_type";
  @SerializedName(SERIALIZED_NAME_BEDDING_TYPE)
  private BeddingTypeEnum beddingType;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPECTED_OCCUPANCY = "expected_occupancy";
  @SerializedName(SERIALIZED_NAME_EXPECTED_OCCUPANCY)
  private Integer expectedOccupancy;

  public static final String SERIALIZED_NAME_FACILITIES = "facilities";
  @SerializedName(SERIALIZED_NAME_FACILITIES)
  private List<SimpleAttribute> facilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_PERSONS = "max_persons";
  @SerializedName(SERIALIZED_NAME_MAX_PERSONS)
  private Integer maxPersons;

  public static final String SERIALIZED_NAME_MIN_PERSONS = "min_persons";
  @SerializedName(SERIALIZED_NAME_MIN_PERSONS)
  private Integer minPersons;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<SimpleAttribute> views = new ArrayList<>();

  public RoomType() {
  }

  public RoomType amenities(List<SimpleAttribute> amenities) {
    this.amenities = amenities;
    return this;
  }

  public RoomType addAmenitiesItem(SimpleAttribute amenitiesItem) {
    if (this.amenities == null) {
      this.amenities = new ArrayList<>();
    }
    this.amenities.add(amenitiesItem);
    return this;
  }

  /**
   * List of amenities for the room type
   * @return amenities
   */
  @javax.annotation.Nullable
  public List<SimpleAttribute> getAmenities() {
    return amenities;
  }

  public void setAmenities(List<SimpleAttribute> amenities) {
    this.amenities = amenities;
  }


  public RoomType beddingType(BeddingTypeEnum beddingType) {
    this.beddingType = beddingType;
    return this;
  }

  /**
   * The type of bed for the room type
   * @return beddingType
   */
  @javax.annotation.Nullable
  public BeddingTypeEnum getBeddingType() {
    return beddingType;
  }

  public void setBeddingType(BeddingTypeEnum beddingType) {
    this.beddingType = beddingType;
  }


  public RoomType code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Code of the room type
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public RoomType created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp the room type was created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public RoomType _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * Specifies if the room type is the default room type of the hotel
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public RoomType description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the room type
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RoomType expectedOccupancy(Integer expectedOccupancy) {
    this.expectedOccupancy = expectedOccupancy;
    return this;
  }

  /**
   * The common amount of persons for the room
   * @return expectedOccupancy
   */
  @javax.annotation.Nullable
  public Integer getExpectedOccupancy() {
    return expectedOccupancy;
  }

  public void setExpectedOccupancy(Integer expectedOccupancy) {
    this.expectedOccupancy = expectedOccupancy;
  }


  public RoomType facilities(List<SimpleAttribute> facilities) {
    this.facilities = facilities;
    return this;
  }

  public RoomType addFacilitiesItem(SimpleAttribute facilitiesItem) {
    if (this.facilities == null) {
      this.facilities = new ArrayList<>();
    }
    this.facilities.add(facilitiesItem);
    return this;
  }

  /**
   * List of facilities for the room type
   * @return facilities
   */
  @javax.annotation.Nullable
  public List<SimpleAttribute> getFacilities() {
    return facilities;
  }

  public void setFacilities(List<SimpleAttribute> facilities) {
    this.facilities = facilities;
  }


  public RoomType maxPersons(Integer maxPersons) {
    this.maxPersons = maxPersons;
    return this;
  }

  /**
   * Maximum number of allowed persons for that room type
   * @return maxPersons
   */
  @javax.annotation.Nullable
  public Integer getMaxPersons() {
    return maxPersons;
  }

  public void setMaxPersons(Integer maxPersons) {
    this.maxPersons = maxPersons;
  }


  public RoomType minPersons(Integer minPersons) {
    this.minPersons = minPersons;
    return this;
  }

  /**
   * Minimum number of allowed persons for that room type
   * @return minPersons
   */
  @javax.annotation.Nullable
  public Integer getMinPersons() {
    return minPersons;
  }

  public void setMinPersons(Integer minPersons) {
    this.minPersons = minPersons;
  }


  public RoomType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the room type
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RoomType updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp of when the room type was changed the last time
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public RoomType views(List<SimpleAttribute> views) {
    this.views = views;
    return this;
  }

  public RoomType addViewsItem(SimpleAttribute viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

  /**
   * List of views for the room type
   * @return views
   */
  @javax.annotation.Nullable
  public List<SimpleAttribute> getViews() {
    return views;
  }

  public void setViews(List<SimpleAttribute> views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoomType roomType = (RoomType) o;
    return Objects.equals(this.amenities, roomType.amenities) &&
        Objects.equals(this.beddingType, roomType.beddingType) &&
        Objects.equals(this.code, roomType.code) &&
        Objects.equals(this.created, roomType.created) &&
        Objects.equals(this._default, roomType._default) &&
        Objects.equals(this.description, roomType.description) &&
        Objects.equals(this.expectedOccupancy, roomType.expectedOccupancy) &&
        Objects.equals(this.facilities, roomType.facilities) &&
        Objects.equals(this.maxPersons, roomType.maxPersons) &&
        Objects.equals(this.minPersons, roomType.minPersons) &&
        Objects.equals(this.name, roomType.name) &&
        Objects.equals(this.updated, roomType.updated) &&
        Objects.equals(this.views, roomType.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amenities, beddingType, code, created, _default, description, expectedOccupancy, facilities, maxPersons, minPersons, name, updated, views);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoomType {\n");
    sb.append("    amenities: ").append(toIndentedString(amenities)).append("\n");
    sb.append("    beddingType: ").append(toIndentedString(beddingType)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expectedOccupancy: ").append(toIndentedString(expectedOccupancy)).append("\n");
    sb.append("    facilities: ").append(toIndentedString(facilities)).append("\n");
    sb.append("    maxPersons: ").append(toIndentedString(maxPersons)).append("\n");
    sb.append("    minPersons: ").append(toIndentedString(minPersons)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amenities");
    openapiFields.add("bedding_type");
    openapiFields.add("code");
    openapiFields.add("created");
    openapiFields.add("default");
    openapiFields.add("description");
    openapiFields.add("expected_occupancy");
    openapiFields.add("facilities");
    openapiFields.add("max_persons");
    openapiFields.add("min_persons");
    openapiFields.add("name");
    openapiFields.add("updated");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoomType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoomType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoomType is not found in the empty JSON string", RoomType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoomType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoomType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("amenities") != null && !jsonObj.get("amenities").isJsonNull()) {
        JsonArray jsonArrayamenities = jsonObj.getAsJsonArray("amenities");
        if (jsonArrayamenities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("amenities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `amenities` to be an array in the JSON string but got `%s`", jsonObj.get("amenities").toString()));
          }

          // validate the optional field `amenities` (array)
          for (int i = 0; i < jsonArrayamenities.size(); i++) {
            SimpleAttribute.validateJsonElement(jsonArrayamenities.get(i));
          };
        }
      }
      if ((jsonObj.get("bedding_type") != null && !jsonObj.get("bedding_type").isJsonNull()) && !jsonObj.get("bedding_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bedding_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bedding_type").toString()));
      }
      // validate the optional field `bedding_type`
      if (jsonObj.get("bedding_type") != null && !jsonObj.get("bedding_type").isJsonNull()) {
        BeddingTypeEnum.validateJsonElement(jsonObj.get("bedding_type"));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("facilities") != null && !jsonObj.get("facilities").isJsonNull()) {
        JsonArray jsonArrayfacilities = jsonObj.getAsJsonArray("facilities");
        if (jsonArrayfacilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("facilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `facilities` to be an array in the JSON string but got `%s`", jsonObj.get("facilities").toString()));
          }

          // validate the optional field `facilities` (array)
          for (int i = 0; i < jsonArrayfacilities.size(); i++) {
            SimpleAttribute.validateJsonElement(jsonArrayfacilities.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull()) {
        JsonArray jsonArrayviews = jsonObj.getAsJsonArray("views");
        if (jsonArrayviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("views").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
          }

          // validate the optional field `views` (array)
          for (int i = 0; i < jsonArrayviews.size(); i++) {
            SimpleAttribute.validateJsonElement(jsonArrayviews.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoomType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoomType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoomType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoomType.class));

       return (TypeAdapter<T>) new TypeAdapter<RoomType>() {
           @Override
           public void write(JsonWriter out, RoomType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoomType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoomType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoomType
   * @throws IOException if the JSON string is invalid with respect to RoomType
   */
  public static RoomType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoomType.class);
  }

  /**
   * Convert an instance of RoomType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

