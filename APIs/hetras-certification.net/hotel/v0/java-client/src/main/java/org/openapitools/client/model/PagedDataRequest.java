/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PagedDataRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PagedDataRequest {
  /**
   * Return total number of items for a given filter criteria.
   */
  @JsonAdapter(InlinecountEnum.Adapter.class)
  public enum InlinecountEnum {
    NONE("None"),
    
    ALL_PAGES("AllPages");

    private String value;

    InlinecountEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InlinecountEnum fromValue(String value) {
      for (InlinecountEnum b : InlinecountEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InlinecountEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InlinecountEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InlinecountEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InlinecountEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InlinecountEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INLINECOUNT = "inlinecount";
  @SerializedName(SERIALIZED_NAME_INLINECOUNT)
  private InlinecountEnum inlinecount;

  public static final String SERIALIZED_NAME_SKIP = "skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private Integer skip;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private Integer top;

  public PagedDataRequest() {
  }

  public PagedDataRequest inlinecount(InlinecountEnum inlinecount) {
    this.inlinecount = inlinecount;
    return this;
  }

  /**
   * Return total number of items for a given filter criteria.
   * @return inlinecount
   */
  @javax.annotation.Nullable
  public InlinecountEnum getInlinecount() {
    return inlinecount;
  }

  public void setInlinecount(InlinecountEnum inlinecount) {
    this.inlinecount = inlinecount;
  }


  public PagedDataRequest skip(Integer skip) {
    this.skip = skip;
    return this;
  }

  /**
   * Amount of items to skip.
   * @return skip
   */
  @javax.annotation.Nullable
  public Integer getSkip() {
    return skip;
  }

  public void setSkip(Integer skip) {
    this.skip = skip;
  }


  public PagedDataRequest top(Integer top) {
    this.top = top;
    return this;
  }

  /**
   * Amount of items to select.
   * @return top
   */
  @javax.annotation.Nullable
  public Integer getTop() {
    return top;
  }

  public void setTop(Integer top) {
    this.top = top;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagedDataRequest pagedDataRequest = (PagedDataRequest) o;
    return Objects.equals(this.inlinecount, pagedDataRequest.inlinecount) &&
        Objects.equals(this.skip, pagedDataRequest.skip) &&
        Objects.equals(this.top, pagedDataRequest.top);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inlinecount, skip, top);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagedDataRequest {\n");
    sb.append("    inlinecount: ").append(toIndentedString(inlinecount)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inlinecount");
    openapiFields.add("skip");
    openapiFields.add("top");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PagedDataRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PagedDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PagedDataRequest is not found in the empty JSON string", PagedDataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PagedDataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PagedDataRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("inlinecount") != null && !jsonObj.get("inlinecount").isJsonNull()) && !jsonObj.get("inlinecount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inlinecount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inlinecount").toString()));
      }
      // validate the optional field `inlinecount`
      if (jsonObj.get("inlinecount") != null && !jsonObj.get("inlinecount").isJsonNull()) {
        InlinecountEnum.validateJsonElement(jsonObj.get("inlinecount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PagedDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PagedDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PagedDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PagedDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PagedDataRequest>() {
           @Override
           public void write(JsonWriter out, PagedDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PagedDataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PagedDataRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PagedDataRequest
   * @throws IOException if the JSON string is invalid with respect to PagedDataRequest
   */
  public static PagedDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PagedDataRequest.class);
  }

  /**
   * Convert an instance of PagedDataRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

