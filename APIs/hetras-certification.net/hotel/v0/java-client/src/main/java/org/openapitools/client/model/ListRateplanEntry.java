/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AccessControlInfo;
import org.openapitools.client.model.DatePeriod;
import org.openapitools.client.model.EmbeddedRoomTypeSimple;
import org.openapitools.client.model.LinkObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListRateplanEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListRateplanEntry {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, LinkObject> links = new HashMap<>();

  public static final String SERIALIZED_NAME_ACCESS_CONTROL = "access_control";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL)
  private List<AccessControlInfo> accessControl = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ACTIVE_PERIODS = "active_periods";
  @SerializedName(SERIALIZED_NAME_ACTIVE_PERIODS)
  private List<DatePeriod> activePeriods = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_RATEPLAN = "base_rateplan";
  @SerializedName(SERIALIZED_NAME_BASE_RATEPLAN)
  private String baseRateplan;

  public static final String SERIALIZED_NAME_BOOKING_PERIODS = "booking_periods";
  @SerializedName(SERIALIZED_NAME_BOOKING_PERIODS)
  private List<DatePeriod> bookingPeriods = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COMMISSIONABLE = "commissionable";
  @SerializedName(SERIALIZED_NAME_COMMISSIONABLE)
  private Boolean commissionable;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DAY_USE = "day_use";
  @SerializedName(SERIALIZED_NAME_DAY_USE)
  private Boolean dayUse;

  public static final String SERIALIZED_NAME_DERIVED_RATEPLANS = "derived_rateplans";
  @SerializedName(SERIALIZED_NAME_DERIVED_RATEPLANS)
  private List<String> derivedRateplans = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_INCLUDED_SERVICES = "included_services";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SERVICES)
  private List<String> includedServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_YIELDABLE = "is_yieldable";
  @SerializedName(SERIALIZED_NAME_IS_YIELDABLE)
  private Boolean isYieldable;

  public static final String SERIALIZED_NAME_MARKET_CODE = "market_code";
  @SerializedName(SERIALIZED_NAME_MARKET_CODE)
  private String marketCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROOM_TYPES = "room_types";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private List<EmbeddedRoomTypeSimple> roomTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  /**
   * Defines if this rateplan is visible to the public or only for specific customers
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    PUBLIC("Public"),
    
    NEGOTIATED("Negotiated");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public ListRateplanEntry() {
  }

  public ListRateplanEntry links(Map<String, LinkObject> links) {
    this.links = links;
    return this;
  }

  public ListRateplanEntry putLinksItem(String key, LinkObject linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Collection of links to related resources
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, LinkObject> getLinks() {
    return links;
  }

  public void setLinks(Map<String, LinkObject> links) {
    this.links = links;
  }


  public ListRateplanEntry accessControl(List<AccessControlInfo> accessControl) {
    this.accessControl = accessControl;
    return this;
  }

  public ListRateplanEntry addAccessControlItem(AccessControlInfo accessControlItem) {
    if (this.accessControl == null) {
      this.accessControl = new ArrayList<>();
    }
    this.accessControl.add(accessControlItem);
    return this;
  }

  /**
   * List of distribution channel groups and channels the rateplan is sold through
   * @return accessControl
   */
  @javax.annotation.Nullable
  public List<AccessControlInfo> getAccessControl() {
    return accessControl;
  }

  public void setAccessControl(List<AccessControlInfo> accessControl) {
    this.accessControl = accessControl;
  }


  public ListRateplanEntry active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Defines if the rateplan has been ended and is expired
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public ListRateplanEntry activePeriods(List<DatePeriod> activePeriods) {
    this.activePeriods = activePeriods;
    return this;
  }

  public ListRateplanEntry addActivePeriodsItem(DatePeriod activePeriodsItem) {
    if (this.activePeriods == null) {
      this.activePeriods = new ArrayList<>();
    }
    this.activePeriods.add(activePeriodsItem);
    return this;
  }

  /**
   * List of active periods. Arrival and departure day for reservations based on this rateplan need to              fit into one of these time periods
   * @return activePeriods
   */
  @javax.annotation.Nullable
  public List<DatePeriod> getActivePeriods() {
    return activePeriods;
  }

  public void setActivePeriods(List<DatePeriod> activePeriods) {
    this.activePeriods = activePeriods;
  }


  public ListRateplanEntry baseRateplan(String baseRateplan) {
    this.baseRateplan = baseRateplan;
    return this;
  }

  /**
   * Code of the base rateplan if this rateplan is derived
   * @return baseRateplan
   */
  @javax.annotation.Nullable
  public String getBaseRateplan() {
    return baseRateplan;
  }

  public void setBaseRateplan(String baseRateplan) {
    this.baseRateplan = baseRateplan;
  }


  public ListRateplanEntry bookingPeriods(List<DatePeriod> bookingPeriods) {
    this.bookingPeriods = bookingPeriods;
    return this;
  }

  public ListRateplanEntry addBookingPeriodsItem(DatePeriod bookingPeriodsItem) {
    if (this.bookingPeriods == null) {
      this.bookingPeriods = new ArrayList<>();
    }
    this.bookingPeriods.add(bookingPeriodsItem);
    return this;
  }

  /**
   * List of booking periods. During these time periods the rateplan is sold
   * @return bookingPeriods
   */
  @javax.annotation.Nullable
  public List<DatePeriod> getBookingPeriods() {
    return bookingPeriods;
  }

  public void setBookingPeriods(List<DatePeriod> bookingPeriods) {
    this.bookingPeriods = bookingPeriods;
  }


  public ListRateplanEntry code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Code of the rateplan
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ListRateplanEntry commissionable(Boolean commissionable) {
    this.commissionable = commissionable;
    return this;
  }

  /**
   * Defines if this rateplan is setup with a commission
   * @return commissionable
   */
  @javax.annotation.Nullable
  public Boolean getCommissionable() {
    return commissionable;
  }

  public void setCommissionable(Boolean commissionable) {
    this.commissionable = commissionable;
  }


  public ListRateplanEntry created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp the rateplan was created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ListRateplanEntry dayUse(Boolean dayUse) {
    this.dayUse = dayUse;
    return this;
  }

  /**
   * Defines if this rateplan is used for day use reservations
   * @return dayUse
   */
  @javax.annotation.Nullable
  public Boolean getDayUse() {
    return dayUse;
  }

  public void setDayUse(Boolean dayUse) {
    this.dayUse = dayUse;
  }


  public ListRateplanEntry derivedRateplans(List<String> derivedRateplans) {
    this.derivedRateplans = derivedRateplans;
    return this;
  }

  public ListRateplanEntry addDerivedRateplansItem(String derivedRateplansItem) {
    if (this.derivedRateplans == null) {
      this.derivedRateplans = new ArrayList<>();
    }
    this.derivedRateplans.add(derivedRateplansItem);
    return this;
  }

  /**
   * List of codes for all derived rateplans if any
   * @return derivedRateplans
   */
  @javax.annotation.Nullable
  public List<String> getDerivedRateplans() {
    return derivedRateplans;
  }

  public void setDerivedRateplans(List<String> derivedRateplans) {
    this.derivedRateplans = derivedRateplans;
  }


  public ListRateplanEntry description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the rateplan
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ListRateplanEntry group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Code of the rateplan group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public ListRateplanEntry includedServices(List<String> includedServices) {
    this.includedServices = includedServices;
    return this;
  }

  public ListRateplanEntry addIncludedServicesItem(String includedServicesItem) {
    if (this.includedServices == null) {
      this.includedServices = new ArrayList<>();
    }
    this.includedServices.add(includedServicesItem);
    return this;
  }

  /**
   * List of codes for the included services sold with this rateplan
   * @return includedServices
   */
  @javax.annotation.Nullable
  public List<String> getIncludedServices() {
    return includedServices;
  }

  public void setIncludedServices(List<String> includedServices) {
    this.includedServices = includedServices;
  }


  public ListRateplanEntry isYieldable(Boolean isYieldable) {
    this.isYieldable = isYieldable;
    return this;
  }

  /**
   * Gives the information if this rateplan is Yieldable rateplan
   * @return isYieldable
   */
  @javax.annotation.Nullable
  public Boolean getIsYieldable() {
    return isYieldable;
  }

  public void setIsYieldable(Boolean isYieldable) {
    this.isYieldable = isYieldable;
  }


  public ListRateplanEntry marketCode(String marketCode) {
    this.marketCode = marketCode;
    return this;
  }

  /**
   * The code of the market segment the rate plan is linked to
   * @return marketCode
   */
  @javax.annotation.Nullable
  public String getMarketCode() {
    return marketCode;
  }

  public void setMarketCode(String marketCode) {
    this.marketCode = marketCode;
  }


  public ListRateplanEntry name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the rateplan
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ListRateplanEntry roomTypes(List<EmbeddedRoomTypeSimple> roomTypes) {
    this.roomTypes = roomTypes;
    return this;
  }

  public ListRateplanEntry addRoomTypesItem(EmbeddedRoomTypeSimple roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new ArrayList<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

  /**
   * List of all room types sold through this rateplan
   * @return roomTypes
   */
  @javax.annotation.Nullable
  public List<EmbeddedRoomTypeSimple> getRoomTypes() {
    return roomTypes;
  }

  public void setRoomTypes(List<EmbeddedRoomTypeSimple> roomTypes) {
    this.roomTypes = roomTypes;
  }


  public ListRateplanEntry suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

  /**
   * Defines if a rateplan is suspended and no new reservations can be created for this              rateplan at the moment
   * @return suspended
   */
  @javax.annotation.Nullable
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  public ListRateplanEntry updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp of when the rateplan was changed the last time
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public ListRateplanEntry visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Defines if this rateplan is visible to the public or only for specific customers
   * @return visibility
   */
  @javax.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListRateplanEntry listRateplanEntry = (ListRateplanEntry) o;
    return Objects.equals(this.links, listRateplanEntry.links) &&
        Objects.equals(this.accessControl, listRateplanEntry.accessControl) &&
        Objects.equals(this.active, listRateplanEntry.active) &&
        Objects.equals(this.activePeriods, listRateplanEntry.activePeriods) &&
        Objects.equals(this.baseRateplan, listRateplanEntry.baseRateplan) &&
        Objects.equals(this.bookingPeriods, listRateplanEntry.bookingPeriods) &&
        Objects.equals(this.code, listRateplanEntry.code) &&
        Objects.equals(this.commissionable, listRateplanEntry.commissionable) &&
        Objects.equals(this.created, listRateplanEntry.created) &&
        Objects.equals(this.dayUse, listRateplanEntry.dayUse) &&
        Objects.equals(this.derivedRateplans, listRateplanEntry.derivedRateplans) &&
        Objects.equals(this.description, listRateplanEntry.description) &&
        Objects.equals(this.group, listRateplanEntry.group) &&
        Objects.equals(this.includedServices, listRateplanEntry.includedServices) &&
        Objects.equals(this.isYieldable, listRateplanEntry.isYieldable) &&
        Objects.equals(this.marketCode, listRateplanEntry.marketCode) &&
        Objects.equals(this.name, listRateplanEntry.name) &&
        Objects.equals(this.roomTypes, listRateplanEntry.roomTypes) &&
        Objects.equals(this.suspended, listRateplanEntry.suspended) &&
        Objects.equals(this.updated, listRateplanEntry.updated) &&
        Objects.equals(this.visibility, listRateplanEntry.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, accessControl, active, activePeriods, baseRateplan, bookingPeriods, code, commissionable, created, dayUse, derivedRateplans, description, group, includedServices, isYieldable, marketCode, name, roomTypes, suspended, updated, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListRateplanEntry {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    accessControl: ").append(toIndentedString(accessControl)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    activePeriods: ").append(toIndentedString(activePeriods)).append("\n");
    sb.append("    baseRateplan: ").append(toIndentedString(baseRateplan)).append("\n");
    sb.append("    bookingPeriods: ").append(toIndentedString(bookingPeriods)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    commissionable: ").append(toIndentedString(commissionable)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dayUse: ").append(toIndentedString(dayUse)).append("\n");
    sb.append("    derivedRateplans: ").append(toIndentedString(derivedRateplans)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    includedServices: ").append(toIndentedString(includedServices)).append("\n");
    sb.append("    isYieldable: ").append(toIndentedString(isYieldable)).append("\n");
    sb.append("    marketCode: ").append(toIndentedString(marketCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("access_control");
    openapiFields.add("active");
    openapiFields.add("active_periods");
    openapiFields.add("base_rateplan");
    openapiFields.add("booking_periods");
    openapiFields.add("code");
    openapiFields.add("commissionable");
    openapiFields.add("created");
    openapiFields.add("day_use");
    openapiFields.add("derived_rateplans");
    openapiFields.add("description");
    openapiFields.add("group");
    openapiFields.add("included_services");
    openapiFields.add("is_yieldable");
    openapiFields.add("market_code");
    openapiFields.add("name");
    openapiFields.add("room_types");
    openapiFields.add("suspended");
    openapiFields.add("updated");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListRateplanEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListRateplanEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListRateplanEntry is not found in the empty JSON string", ListRateplanEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListRateplanEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListRateplanEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("access_control") != null && !jsonObj.get("access_control").isJsonNull()) {
        JsonArray jsonArrayaccessControl = jsonObj.getAsJsonArray("access_control");
        if (jsonArrayaccessControl != null) {
          // ensure the json data is an array
          if (!jsonObj.get("access_control").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `access_control` to be an array in the JSON string but got `%s`", jsonObj.get("access_control").toString()));
          }

          // validate the optional field `access_control` (array)
          for (int i = 0; i < jsonArrayaccessControl.size(); i++) {
            AccessControlInfo.validateJsonElement(jsonArrayaccessControl.get(i));
          };
        }
      }
      if (jsonObj.get("active_periods") != null && !jsonObj.get("active_periods").isJsonNull()) {
        JsonArray jsonArrayactivePeriods = jsonObj.getAsJsonArray("active_periods");
        if (jsonArrayactivePeriods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("active_periods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `active_periods` to be an array in the JSON string but got `%s`", jsonObj.get("active_periods").toString()));
          }

          // validate the optional field `active_periods` (array)
          for (int i = 0; i < jsonArrayactivePeriods.size(); i++) {
            DatePeriod.validateJsonElement(jsonArrayactivePeriods.get(i));
          };
        }
      }
      if ((jsonObj.get("base_rateplan") != null && !jsonObj.get("base_rateplan").isJsonNull()) && !jsonObj.get("base_rateplan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_rateplan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_rateplan").toString()));
      }
      if (jsonObj.get("booking_periods") != null && !jsonObj.get("booking_periods").isJsonNull()) {
        JsonArray jsonArraybookingPeriods = jsonObj.getAsJsonArray("booking_periods");
        if (jsonArraybookingPeriods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("booking_periods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `booking_periods` to be an array in the JSON string but got `%s`", jsonObj.get("booking_periods").toString()));
          }

          // validate the optional field `booking_periods` (array)
          for (int i = 0; i < jsonArraybookingPeriods.size(); i++) {
            DatePeriod.validateJsonElement(jsonArraybookingPeriods.get(i));
          };
        }
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("derived_rateplans") != null && !jsonObj.get("derived_rateplans").isJsonNull() && !jsonObj.get("derived_rateplans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `derived_rateplans` to be an array in the JSON string but got `%s`", jsonObj.get("derived_rateplans").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("included_services") != null && !jsonObj.get("included_services").isJsonNull() && !jsonObj.get("included_services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `included_services` to be an array in the JSON string but got `%s`", jsonObj.get("included_services").toString()));
      }
      if ((jsonObj.get("market_code") != null && !jsonObj.get("market_code").isJsonNull()) && !jsonObj.get("market_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `market_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("market_code").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("room_types") != null && !jsonObj.get("room_types").isJsonNull()) {
        JsonArray jsonArrayroomTypes = jsonObj.getAsJsonArray("room_types");
        if (jsonArrayroomTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("room_types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `room_types` to be an array in the JSON string but got `%s`", jsonObj.get("room_types").toString()));
          }

          // validate the optional field `room_types` (array)
          for (int i = 0; i < jsonArrayroomTypes.size(); i++) {
            EmbeddedRoomTypeSimple.validateJsonElement(jsonArrayroomTypes.get(i));
          };
        }
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListRateplanEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListRateplanEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListRateplanEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListRateplanEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ListRateplanEntry>() {
           @Override
           public void write(JsonWriter out, ListRateplanEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListRateplanEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListRateplanEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListRateplanEntry
   * @throws IOException if the JSON string is invalid with respect to ListRateplanEntry
   */
  public static ListRateplanEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListRateplanEntry.class);
  }

  /**
   * Convert an instance of ListRateplanEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

