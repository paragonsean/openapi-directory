/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmbeddedReservation;
import org.openapitools.client.model.EmbeddedRoomType;
import org.openapitools.client.model.RoomBedding;
import org.openapitools.client.model.RoomStatus;
import org.openapitools.client.model.SimpleAttribute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a room for a property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Room {
  public static final String SERIALIZED_NAME_AMENITIES = "amenities";
  @SerializedName(SERIALIZED_NAME_AMENITIES)
  private List<SimpleAttribute> amenities = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEDDINGS = "beddings";
  @SerializedName(SERIALIZED_NAME_BEDDINGS)
  private List<RoomBedding> beddings = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPECTED_OCCUPANCY = "expected_occupancy";
  @SerializedName(SERIALIZED_NAME_EXPECTED_OCCUPANCY)
  private Integer expectedOccupancy;

  public static final String SERIALIZED_NAME_EXTRA_BED_ALLOWED = "extra_bed_allowed";
  @SerializedName(SERIALIZED_NAME_EXTRA_BED_ALLOWED)
  private Boolean extraBedAllowed;

  public static final String SERIALIZED_NAME_FLOOR = "floor";
  @SerializedName(SERIALIZED_NAME_FLOOR)
  private Integer floor;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<SimpleAttribute> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_PERSONS = "max_persons";
  @SerializedName(SERIALIZED_NAME_MAX_PERSONS)
  private Integer maxPersons;

  public static final String SERIALIZED_NAME_MIN_PERSONS = "min_persons";
  @SerializedName(SERIALIZED_NAME_MIN_PERSONS)
  private Integer minPersons;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_RESERVATIONS = "reservations";
  @SerializedName(SERIALIZED_NAME_RESERVATIONS)
  private List<EmbeddedReservation> reservations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_TYPE = "room_type";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE)
  private EmbeddedRoomType roomType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RoomStatus status;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<SimpleAttribute> views = new ArrayList<>();

  public Room() {
  }

  public Room amenities(List<SimpleAttribute> amenities) {
    this.amenities = amenities;
    return this;
  }

  public Room addAmenitiesItem(SimpleAttribute amenitiesItem) {
    if (this.amenities == null) {
      this.amenities = new ArrayList<>();
    }
    this.amenities.add(amenitiesItem);
    return this;
  }

  /**
   * List of amenities for the room
   * @return amenities
   */
  @javax.annotation.Nullable
  public List<SimpleAttribute> getAmenities() {
    return amenities;
  }

  public void setAmenities(List<SimpleAttribute> amenities) {
    this.amenities = amenities;
  }


  public Room beddings(List<RoomBedding> beddings) {
    this.beddings = beddings;
    return this;
  }

  public Room addBeddingsItem(RoomBedding beddingsItem) {
    if (this.beddings == null) {
      this.beddings = new ArrayList<>();
    }
    this.beddings.add(beddingsItem);
    return this;
  }

  /**
   * Provides information about available beds in the room
   * @return beddings
   */
  @javax.annotation.Nullable
  public List<RoomBedding> getBeddings() {
    return beddings;
  }

  public void setBeddings(List<RoomBedding> beddings) {
    this.beddings = beddings;
  }


  public Room created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp the room was created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Room description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the room
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Room expectedOccupancy(Integer expectedOccupancy) {
    this.expectedOccupancy = expectedOccupancy;
    return this;
  }

  /**
   * The common amount of persons for the room
   * @return expectedOccupancy
   */
  @javax.annotation.Nonnull
  public Integer getExpectedOccupancy() {
    return expectedOccupancy;
  }

  public void setExpectedOccupancy(Integer expectedOccupancy) {
    this.expectedOccupancy = expectedOccupancy;
  }


  public Room extraBedAllowed(Boolean extraBedAllowed) {
    this.extraBedAllowed = extraBedAllowed;
    return this;
  }

  /**
   * Is there an extra bed allowed in the room
   * @return extraBedAllowed
   */
  @javax.annotation.Nullable
  public Boolean getExtraBedAllowed() {
    return extraBedAllowed;
  }

  public void setExtraBedAllowed(Boolean extraBedAllowed) {
    this.extraBedAllowed = extraBedAllowed;
  }


  public Room floor(Integer floor) {
    this.floor = floor;
    return this;
  }

  /**
   * Floor of the room
   * @return floor
   */
  @javax.annotation.Nonnull
  public Integer getFloor() {
    return floor;
  }

  public void setFloor(Integer floor) {
    this.floor = floor;
  }


  public Room locations(List<SimpleAttribute> locations) {
    this.locations = locations;
    return this;
  }

  public Room addLocationsItem(SimpleAttribute locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * List of locations for the room
   * @return locations
   */
  @javax.annotation.Nullable
  public List<SimpleAttribute> getLocations() {
    return locations;
  }

  public void setLocations(List<SimpleAttribute> locations) {
    this.locations = locations;
  }


  public Room maxPersons(Integer maxPersons) {
    this.maxPersons = maxPersons;
    return this;
  }

  /**
   * Maximum number of allowed persons in the room
   * @return maxPersons
   */
  @javax.annotation.Nonnull
  public Integer getMaxPersons() {
    return maxPersons;
  }

  public void setMaxPersons(Integer maxPersons) {
    this.maxPersons = maxPersons;
  }


  public Room minPersons(Integer minPersons) {
    this.minPersons = minPersons;
    return this;
  }

  /**
   * Minimum number of allowed persons in the room
   * @return minPersons
   */
  @javax.annotation.Nonnull
  public Integer getMinPersons() {
    return minPersons;
  }

  public void setMinPersons(Integer minPersons) {
    this.minPersons = minPersons;
  }


  public Room name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the room
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Room number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Number of the room
   * @return number
   */
  @javax.annotation.Nonnull
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public Room reservations(List<EmbeddedReservation> reservations) {
    this.reservations = reservations;
    return this;
  }

  public Room addReservationsItem(EmbeddedReservation reservationsItem) {
    if (this.reservations == null) {
      this.reservations = new ArrayList<>();
    }
    this.reservations.add(reservationsItem);
    return this;
  }

  /**
   * Current reservation(s) for the room. It shows reservations due to arrive today and the one still inhouse.              If there is a day-use reservation assigned for today it can show you up to 3 reservations. One that will              depart today, the day-use reservqation for today and the one due to arrive
   * @return reservations
   */
  @javax.annotation.Nullable
  public List<EmbeddedReservation> getReservations() {
    return reservations;
  }

  public void setReservations(List<EmbeddedReservation> reservations) {
    this.reservations = reservations;
  }


  public Room roomType(EmbeddedRoomType roomType) {
    this.roomType = roomType;
    return this;
  }

  /**
   * Get roomType
   * @return roomType
   */
  @javax.annotation.Nonnull
  public EmbeddedRoomType getRoomType() {
    return roomType;
  }

  public void setRoomType(EmbeddedRoomType roomType) {
    this.roomType = roomType;
  }


  public Room status(RoomStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public RoomStatus getStatus() {
    return status;
  }

  public void setStatus(RoomStatus status) {
    this.status = status;
  }


  public Room updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp of when the room was changed the last time
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public Room views(List<SimpleAttribute> views) {
    this.views = views;
    return this;
  }

  public Room addViewsItem(SimpleAttribute viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

  /**
   * List of views for the room
   * @return views
   */
  @javax.annotation.Nullable
  public List<SimpleAttribute> getViews() {
    return views;
  }

  public void setViews(List<SimpleAttribute> views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Room room = (Room) o;
    return Objects.equals(this.amenities, room.amenities) &&
        Objects.equals(this.beddings, room.beddings) &&
        Objects.equals(this.created, room.created) &&
        Objects.equals(this.description, room.description) &&
        Objects.equals(this.expectedOccupancy, room.expectedOccupancy) &&
        Objects.equals(this.extraBedAllowed, room.extraBedAllowed) &&
        Objects.equals(this.floor, room.floor) &&
        Objects.equals(this.locations, room.locations) &&
        Objects.equals(this.maxPersons, room.maxPersons) &&
        Objects.equals(this.minPersons, room.minPersons) &&
        Objects.equals(this.name, room.name) &&
        Objects.equals(this.number, room.number) &&
        Objects.equals(this.reservations, room.reservations) &&
        Objects.equals(this.roomType, room.roomType) &&
        Objects.equals(this.status, room.status) &&
        Objects.equals(this.updated, room.updated) &&
        Objects.equals(this.views, room.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amenities, beddings, created, description, expectedOccupancy, extraBedAllowed, floor, locations, maxPersons, minPersons, name, number, reservations, roomType, status, updated, views);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Room {\n");
    sb.append("    amenities: ").append(toIndentedString(amenities)).append("\n");
    sb.append("    beddings: ").append(toIndentedString(beddings)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expectedOccupancy: ").append(toIndentedString(expectedOccupancy)).append("\n");
    sb.append("    extraBedAllowed: ").append(toIndentedString(extraBedAllowed)).append("\n");
    sb.append("    floor: ").append(toIndentedString(floor)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    maxPersons: ").append(toIndentedString(maxPersons)).append("\n");
    sb.append("    minPersons: ").append(toIndentedString(minPersons)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    reservations: ").append(toIndentedString(reservations)).append("\n");
    sb.append("    roomType: ").append(toIndentedString(roomType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amenities");
    openapiFields.add("beddings");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("expected_occupancy");
    openapiFields.add("extra_bed_allowed");
    openapiFields.add("floor");
    openapiFields.add("locations");
    openapiFields.add("max_persons");
    openapiFields.add("min_persons");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("reservations");
    openapiFields.add("room_type");
    openapiFields.add("status");
    openapiFields.add("updated");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expected_occupancy");
    openapiRequiredFields.add("floor");
    openapiRequiredFields.add("max_persons");
    openapiRequiredFields.add("min_persons");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("room_type");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Room
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Room.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Room is not found in the empty JSON string", Room.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Room.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Room` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Room.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("amenities") != null && !jsonObj.get("amenities").isJsonNull()) {
        JsonArray jsonArrayamenities = jsonObj.getAsJsonArray("amenities");
        if (jsonArrayamenities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("amenities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `amenities` to be an array in the JSON string but got `%s`", jsonObj.get("amenities").toString()));
          }

          // validate the optional field `amenities` (array)
          for (int i = 0; i < jsonArrayamenities.size(); i++) {
            SimpleAttribute.validateJsonElement(jsonArrayamenities.get(i));
          };
        }
      }
      if (jsonObj.get("beddings") != null && !jsonObj.get("beddings").isJsonNull()) {
        JsonArray jsonArraybeddings = jsonObj.getAsJsonArray("beddings");
        if (jsonArraybeddings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("beddings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `beddings` to be an array in the JSON string but got `%s`", jsonObj.get("beddings").toString()));
          }

          // validate the optional field `beddings` (array)
          for (int i = 0; i < jsonArraybeddings.size(); i++) {
            RoomBedding.validateJsonElement(jsonArraybeddings.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            SimpleAttribute.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (jsonObj.get("reservations") != null && !jsonObj.get("reservations").isJsonNull()) {
        JsonArray jsonArrayreservations = jsonObj.getAsJsonArray("reservations");
        if (jsonArrayreservations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reservations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reservations` to be an array in the JSON string but got `%s`", jsonObj.get("reservations").toString()));
          }

          // validate the optional field `reservations` (array)
          for (int i = 0; i < jsonArrayreservations.size(); i++) {
            EmbeddedReservation.validateJsonElement(jsonArrayreservations.get(i));
          };
        }
      }
      // validate the required field `room_type`
      EmbeddedRoomType.validateJsonElement(jsonObj.get("room_type"));
      // validate the required field `status`
      RoomStatus.validateJsonElement(jsonObj.get("status"));
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull()) {
        JsonArray jsonArrayviews = jsonObj.getAsJsonArray("views");
        if (jsonArrayviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("views").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
          }

          // validate the optional field `views` (array)
          for (int i = 0; i < jsonArrayviews.size(); i++) {
            SimpleAttribute.validateJsonElement(jsonArrayviews.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Room.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Room' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Room> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Room.class));

       return (TypeAdapter<T>) new TypeAdapter<Room>() {
           @Override
           public void write(JsonWriter out, Room value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Room read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Room given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Room
   * @throws IOException if the JSON string is invalid with respect to Room
   */
  public static Room fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Room.class);
  }

  /**
   * Convert an instance of Room to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

