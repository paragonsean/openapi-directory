/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hotel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Hotel {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CURRENT_BUSINESS_DAY = "current_business_day";
  @SerializedName(SERIALIZED_NAME_CURRENT_BUSINESS_DAY)
  private OffsetDateTime currentBusinessDay;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotel_id";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private Integer hotelId;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_UTC_OFFSET = "utc_offset";
  @SerializedName(SERIALIZED_NAME_UTC_OFFSET)
  private String utcOffset;

  public Hotel() {
  }

  public Hotel city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city the hotel is located in
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Hotel code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The code of the hotel
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Hotel country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country the hotel is located. The country code is in ISO 3166-1 alpha-2 format              (see: &lt;a href&#x3D;\&quot;http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm&lt;/a&gt;)
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Hotel created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp the hotel was created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Hotel currentBusinessDay(OffsetDateTime currentBusinessDay) {
    this.currentBusinessDay = currentBusinessDay;
    return this;
  }

  /**
   * Return the current business day of the hotel in the ISO-8601 format \&quot;YYYY-MM-DD\&quot;
   * @return currentBusinessDay
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCurrentBusinessDay() {
    return currentBusinessDay;
  }

  public void setCurrentBusinessDay(OffsetDateTime currentBusinessDay) {
    this.currentBusinessDay = currentBusinessDay;
  }


  public Hotel desc(String desc) {
    this.desc = desc;
    return this;
  }

  /**
   * The descriptive text for the the hotel
   * @return desc
   */
  @javax.annotation.Nullable
  public String getDesc() {
    return desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }


  public Hotel email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the hotel
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Hotel fax(String fax) {
    this.fax = fax;
    return this;
  }

  /**
   * The fax number of the hotel
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }


  public Hotel hotelId(Integer hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * The id of the hotel
   * @return hotelId
   */
  @javax.annotation.Nullable
  public Integer getHotelId() {
    return hotelId;
  }

  public void setHotelId(Integer hotelId) {
    this.hotelId = hotelId;
  }


  public Hotel latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude for the geolocation of the hotel. This allows you to show the hotel on a map
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public Hotel longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude for the geolocation of the hotel. This allows you to show the hotel on a map
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public Hotel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the hotel
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Hotel phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The main phone number to call the hotel
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public Hotel postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * The postal code of the hotel
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Hotel state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state the hotel is located in
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Hotel street(String street) {
    this.street = street;
    return this;
  }

  /**
   * The street address of the hotel
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public Hotel updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp of when the hotel was changed the last time
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public Hotel url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The homepage URL of the hotel
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Hotel utcOffset(String utcOffset) {
    this.utcOffset = utcOffset;
    return this;
  }

  /**
   * The current time offset of the hotel to UTC. This is taking into account daylight saving times and shows the offset for the time the request is handled. The response              will be in the format of \&quot;UTC±hh:mm\&quot;. If there is no offset to UTC it will be shown as \&quot;UTC+00:00\&quot;
   * @return utcOffset
   */
  @javax.annotation.Nullable
  public String getUtcOffset() {
    return utcOffset;
  }

  public void setUtcOffset(String utcOffset) {
    this.utcOffset = utcOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hotel hotel = (Hotel) o;
    return Objects.equals(this.city, hotel.city) &&
        Objects.equals(this.code, hotel.code) &&
        Objects.equals(this.country, hotel.country) &&
        Objects.equals(this.created, hotel.created) &&
        Objects.equals(this.currentBusinessDay, hotel.currentBusinessDay) &&
        Objects.equals(this.desc, hotel.desc) &&
        Objects.equals(this.email, hotel.email) &&
        Objects.equals(this.fax, hotel.fax) &&
        Objects.equals(this.hotelId, hotel.hotelId) &&
        Objects.equals(this.latitude, hotel.latitude) &&
        Objects.equals(this.longitude, hotel.longitude) &&
        Objects.equals(this.name, hotel.name) &&
        Objects.equals(this.phone, hotel.phone) &&
        Objects.equals(this.postalCode, hotel.postalCode) &&
        Objects.equals(this.state, hotel.state) &&
        Objects.equals(this.street, hotel.street) &&
        Objects.equals(this.updated, hotel.updated) &&
        Objects.equals(this.url, hotel.url) &&
        Objects.equals(this.utcOffset, hotel.utcOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, code, country, created, currentBusinessDay, desc, email, fax, hotelId, latitude, longitude, name, phone, postalCode, state, street, updated, url, utcOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hotel {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currentBusinessDay: ").append(toIndentedString(currentBusinessDay)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    utcOffset: ").append(toIndentedString(utcOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("code");
    openapiFields.add("country");
    openapiFields.add("created");
    openapiFields.add("current_business_day");
    openapiFields.add("desc");
    openapiFields.add("email");
    openapiFields.add("fax");
    openapiFields.add("hotel_id");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("name");
    openapiFields.add("phone");
    openapiFields.add("postal_code");
    openapiFields.add("state");
    openapiFields.add("street");
    openapiFields.add("updated");
    openapiFields.add("url");
    openapiFields.add("utc_offset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Hotel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hotel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hotel is not found in the empty JSON string", Hotel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hotel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hotel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("desc") != null && !jsonObj.get("desc").isJsonNull()) && !jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("utc_offset") != null && !jsonObj.get("utc_offset").isJsonNull()) && !jsonObj.get("utc_offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utc_offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utc_offset").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hotel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hotel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hotel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hotel.class));

       return (TypeAdapter<T>) new TypeAdapter<Hotel>() {
           @Override
           public void write(JsonWriter out, Hotel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hotel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Hotel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Hotel
   * @throws IOException if the JSON string is invalid with respect to Hotel
   */
  public static Hotel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hotel.class);
  }

  /**
   * Convert an instance of Hotel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

