/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExtendedRateplanEntry;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OperationRatePatchRequest;
import org.openapitools.client.model.RateResponse;
import org.openapitools.client.model.RateplansListResponse;
import org.openapitools.client.model.RatesBatchUpdateRequestItem;
import org.openapitools.client.model.RatesResponse;
import org.openapitools.client.model.TotalCountResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RatePlansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RatePlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RatePlansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ratePlansBatchUpdateRates
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansBatchUpdateRatesCall(String appId, String appKey, Integer hotelId, List<RatesBatchUpdateRequestItem> request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rateplans/batch/$rates"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratePlansBatchUpdateRatesValidateBeforeCall(String appId, String appKey, Integer hotelId, List<RatesBatchUpdateRequestItem> request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratePlansBatchUpdateRates(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratePlansBatchUpdateRates(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratePlansBatchUpdateRates(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling ratePlansBatchUpdateRates(Async)");
        }

        return ratePlansBatchUpdateRatesCall(appId, appKey, hotelId, request, _callback);

    }

    /**
     * Update a list of base rateplans for a given period and a given base price for single occupancy.
     * Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;rateplan\&quot;: \&quot;STDN01\&quot;, \&quot;from\&quot;: \&quot;2018-01-01\&quot;, \&quot;to\&quot;: \&quot;2018-01-30\&quot;, \&quot;base_price\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param request  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Object ratePlansBatchUpdateRates(String appId, String appKey, Integer hotelId, List<RatesBatchUpdateRequestItem> request) throws ApiException {
        ApiResponse<Object> localVarResp = ratePlansBatchUpdateRatesWithHttpInfo(appId, appKey, hotelId, request);
        return localVarResp.getData();
    }

    /**
     * Update a list of base rateplans for a given period and a given base price for single occupancy.
     * Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;rateplan\&quot;: \&quot;STDN01\&quot;, \&quot;from\&quot;: \&quot;2018-01-01\&quot;, \&quot;to\&quot;: \&quot;2018-01-30\&quot;, \&quot;base_price\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param request  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> ratePlansBatchUpdateRatesWithHttpInfo(String appId, String appKey, Integer hotelId, List<RatesBatchUpdateRequestItem> request) throws ApiException {
        okhttp3.Call localVarCall = ratePlansBatchUpdateRatesValidateBeforeCall(appId, appKey, hotelId, request, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a list of base rateplans for a given period and a given base price for single occupancy. (asynchronously)
     * Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;rateplan\&quot;: \&quot;STDN01\&quot;, \&quot;from\&quot;: \&quot;2018-01-01\&quot;, \&quot;to\&quot;: \&quot;2018-01-30\&quot;, \&quot;base_price\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansBatchUpdateRatesAsync(String appId, String appKey, Integer hotelId, List<RatesBatchUpdateRequestItem> request, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratePlansBatchUpdateRatesValidateBeforeCall(appId, appKey, hotelId, request, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratePlansGetRate
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param businessDay The business day you want to get the rate setup for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily rate with room type supplements for the specified rateplan and business day. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested              rateplan could not be found or the rate is inactive on this business day. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRateCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/{businessDay}"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "rateplanCode" + "}", localVarApiClient.escapeString(rateplanCode.toString()))
            .replace("{" + "businessDay" + "}", localVarApiClient.escapeString(businessDay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratePlansGetRateValidateBeforeCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratePlansGetRate(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratePlansGetRate(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratePlansGetRate(Async)");
        }

        // verify the required parameter 'rateplanCode' is set
        if (rateplanCode == null) {
            throw new ApiException("Missing the required parameter 'rateplanCode' when calling ratePlansGetRate(Async)");
        }

        // verify the required parameter 'businessDay' is set
        if (businessDay == null) {
            throw new ApiException("Missing the required parameter 'businessDay' when calling ratePlansGetRate(Async)");
        }

        return ratePlansGetRateCall(appId, appKey, hotelId, rateplanCode, businessDay, _callback);

    }

    /**
     * Get the setup of a daily rate for a specific business day and rateplan.
     * Read the setup of the daily rate for the defined rateplan for that specific business day.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param businessDay The business day you want to get the rate setup for. (required)
     * @return RateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily rate with room type supplements for the specified rateplan and business day. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested              rateplan could not be found or the rate is inactive on this business day. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public RateResponse ratePlansGetRate(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay) throws ApiException {
        ApiResponse<RateResponse> localVarResp = ratePlansGetRateWithHttpInfo(appId, appKey, hotelId, rateplanCode, businessDay);
        return localVarResp.getData();
    }

    /**
     * Get the setup of a daily rate for a specific business day and rateplan.
     * Read the setup of the daily rate for the defined rateplan for that specific business day.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param businessDay The business day you want to get the rate setup for. (required)
     * @return ApiResponse&lt;RateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily rate with room type supplements for the specified rateplan and business day. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested              rateplan could not be found or the rate is inactive on this business day. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RateResponse> ratePlansGetRateWithHttpInfo(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay) throws ApiException {
        okhttp3.Call localVarCall = ratePlansGetRateValidateBeforeCall(appId, appKey, hotelId, rateplanCode, businessDay, null);
        Type localVarReturnType = new TypeToken<RateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the setup of a daily rate for a specific business day and rateplan. (asynchronously)
     * Read the setup of the daily rate for the defined rateplan for that specific business day.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param businessDay The business day you want to get the rate setup for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily rate with room type supplements for the specified rateplan and business day. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested              rateplan could not be found or the rate is inactive on this business day. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRateAsync(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay, final ApiCallback<RateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratePlansGetRateValidateBeforeCall(appId, appKey, hotelId, rateplanCode, businessDay, _callback);
        Type localVarReturnType = new TypeToken<RateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratePlansGetRateplan
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rateplan details for the given rateplan and hotel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested rateplan could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRateplanCall(String appId, String appKey, Integer hotelId, String rateplanCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "rateplanCode" + "}", localVarApiClient.escapeString(rateplanCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratePlansGetRateplanValidateBeforeCall(String appId, String appKey, Integer hotelId, String rateplanCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratePlansGetRateplan(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratePlansGetRateplan(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratePlansGetRateplan(Async)");
        }

        // verify the required parameter 'rateplanCode' is set
        if (rateplanCode == null) {
            throw new ApiException("Missing the required parameter 'rateplanCode' when calling ratePlansGetRateplan(Async)");
        }

        return ratePlansGetRateplanCall(appId, appKey, hotelId, rateplanCode, _callback);

    }

    /**
     * Get all the details for a specific rateplan in the hotel.
     * Read the details about a specific rateplan for the defined hotel.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @return ExtendedRateplanEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rateplan details for the given rateplan and hotel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested rateplan could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedRateplanEntry ratePlansGetRateplan(String appId, String appKey, Integer hotelId, String rateplanCode) throws ApiException {
        ApiResponse<ExtendedRateplanEntry> localVarResp = ratePlansGetRateplanWithHttpInfo(appId, appKey, hotelId, rateplanCode);
        return localVarResp.getData();
    }

    /**
     * Get all the details for a specific rateplan in the hotel.
     * Read the details about a specific rateplan for the defined hotel.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @return ApiResponse&lt;ExtendedRateplanEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rateplan details for the given rateplan and hotel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested rateplan could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedRateplanEntry> ratePlansGetRateplanWithHttpInfo(String appId, String appKey, Integer hotelId, String rateplanCode) throws ApiException {
        okhttp3.Call localVarCall = ratePlansGetRateplanValidateBeforeCall(appId, appKey, hotelId, rateplanCode, null);
        Type localVarReturnType = new TypeToken<ExtendedRateplanEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the details for a specific rateplan in the hotel. (asynchronously)
     * Read the details about a specific rateplan for the defined hotel.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rateplan details for the given rateplan and hotel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested rateplan could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRateplanAsync(String appId, String appKey, Integer hotelId, String rateplanCode, final ApiCallback<ExtendedRateplanEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratePlansGetRateplanValidateBeforeCall(appId, appKey, hotelId, rateplanCode, _callback);
        Type localVarReturnType = new TypeToken<ExtendedRateplanEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratePlansGetRateplans
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id you are trying to find rateplans for. (required)
     * @param sellingStatus Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans. (optional)
     * @param commissionable Return all rateplans having commisionable status (optional)
     * @param group Return all rateplans belonging to the specified rateplan group (optional)
     * @param baseRateplan Return all rateplans having the specified rateplan as base rateplan (optional)
     * @param channelGroup Return all rateplans that are sold through at least one channel out of the specified channel group (optional)
     * @param channelCode Return all rateplans sold through the specified channel (optional)
     * @param marketCodes Return all rateplans having one of the specified values as a market code (optional)
     * @param roomTypes Return all rateplans by which at least one of the specified room types are sold (optional)
     * @param includedServices Return all rateplans having at least one of the specified services included (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rateplans for a requested hotel matching the filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no rateplans found for the given filtering and pagination criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRateplansCall(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rateplans"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sellingStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellingStatus", sellingStatus));
        }

        if (commissionable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commissionable", commissionable));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (baseRateplan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baseRateplan", baseRateplan));
        }

        if (channelGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelGroup", channelGroup));
        }

        if (channelCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelCode", channelCode));
        }

        if (marketCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "marketCodes", marketCodes));
        }

        if (roomTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "roomTypes", roomTypes));
        }

        if (includedServices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includedServices", includedServices));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inlinecount", inlinecount));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratePlansGetRateplansValidateBeforeCall(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratePlansGetRateplans(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratePlansGetRateplans(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratePlansGetRateplans(Async)");
        }

        return ratePlansGetRateplansCall(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices, skip, top, inlinecount, _callback);

    }

    /**
     * Get a list of rateplans for the specified hotel id matching the filter criteria.
     * With this call you can find rateplans for a hotel by different filters. By default and without any filter criteria              defined it will return you all active rateplans.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id you are trying to find rateplans for. (required)
     * @param sellingStatus Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans. (optional)
     * @param commissionable Return all rateplans having commisionable status (optional)
     * @param group Return all rateplans belonging to the specified rateplan group (optional)
     * @param baseRateplan Return all rateplans having the specified rateplan as base rateplan (optional)
     * @param channelGroup Return all rateplans that are sold through at least one channel out of the specified channel group (optional)
     * @param channelCode Return all rateplans sold through the specified channel (optional)
     * @param marketCodes Return all rateplans having one of the specified values as a market code (optional)
     * @param roomTypes Return all rateplans by which at least one of the specified room types are sold (optional)
     * @param includedServices Return all rateplans having at least one of the specified services included (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return RateplansListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rateplans for a requested hotel matching the filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no rateplans found for the given filtering and pagination criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public RateplansListResponse ratePlansGetRateplans(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices, Integer skip, Integer top, String inlinecount) throws ApiException {
        ApiResponse<RateplansListResponse> localVarResp = ratePlansGetRateplansWithHttpInfo(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices, skip, top, inlinecount);
        return localVarResp.getData();
    }

    /**
     * Get a list of rateplans for the specified hotel id matching the filter criteria.
     * With this call you can find rateplans for a hotel by different filters. By default and without any filter criteria              defined it will return you all active rateplans.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id you are trying to find rateplans for. (required)
     * @param sellingStatus Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans. (optional)
     * @param commissionable Return all rateplans having commisionable status (optional)
     * @param group Return all rateplans belonging to the specified rateplan group (optional)
     * @param baseRateplan Return all rateplans having the specified rateplan as base rateplan (optional)
     * @param channelGroup Return all rateplans that are sold through at least one channel out of the specified channel group (optional)
     * @param channelCode Return all rateplans sold through the specified channel (optional)
     * @param marketCodes Return all rateplans having one of the specified values as a market code (optional)
     * @param roomTypes Return all rateplans by which at least one of the specified room types are sold (optional)
     * @param includedServices Return all rateplans having at least one of the specified services included (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return ApiResponse&lt;RateplansListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rateplans for a requested hotel matching the filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no rateplans found for the given filtering and pagination criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RateplansListResponse> ratePlansGetRateplansWithHttpInfo(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices, Integer skip, Integer top, String inlinecount) throws ApiException {
        okhttp3.Call localVarCall = ratePlansGetRateplansValidateBeforeCall(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices, skip, top, inlinecount, null);
        Type localVarReturnType = new TypeToken<RateplansListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of rateplans for the specified hotel id matching the filter criteria. (asynchronously)
     * With this call you can find rateplans for a hotel by different filters. By default and without any filter criteria              defined it will return you all active rateplans.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id you are trying to find rateplans for. (required)
     * @param sellingStatus Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans. (optional)
     * @param commissionable Return all rateplans having commisionable status (optional)
     * @param group Return all rateplans belonging to the specified rateplan group (optional)
     * @param baseRateplan Return all rateplans having the specified rateplan as base rateplan (optional)
     * @param channelGroup Return all rateplans that are sold through at least one channel out of the specified channel group (optional)
     * @param channelCode Return all rateplans sold through the specified channel (optional)
     * @param marketCodes Return all rateplans having one of the specified values as a market code (optional)
     * @param roomTypes Return all rateplans by which at least one of the specified room types are sold (optional)
     * @param includedServices Return all rateplans having at least one of the specified services included (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rateplans for a requested hotel matching the filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no rateplans found for the given filtering and pagination criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRateplansAsync(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices, Integer skip, Integer top, String inlinecount, final ApiCallback<RateplansListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratePlansGetRateplansValidateBeforeCall(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices, skip, top, inlinecount, _callback);
        Type localVarReturnType = new TypeToken<RateplansListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratePlansGetRateplansCount
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are counting the rateplans for. (required)
     * @param sellingStatus Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans. (optional)
     * @param commissionable Return all rateplans having commisionable status (optional)
     * @param group Return all rateplans belonging to the specified rateplan group (optional)
     * @param baseRateplan Return all rateplans having the specified rateplan as base rateplan (optional)
     * @param channelGroup Return all rateplans that are sold through at least one channel out of the specified channel group (optional)
     * @param channelCode Return all rateplans sold through the specified channel (optional)
     * @param marketCodes Return all rateplans having one of the specified values as a market code (optional)
     * @param roomTypes Return all rateplans by which at least one of the specified room types are sold (optional)
     * @param includedServices Return all rateplans having at least one of the specified services included (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rateplans count in the hotel matching the given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRateplansCountCall(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rateplans/$count"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sellingStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellingStatus", sellingStatus));
        }

        if (commissionable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commissionable", commissionable));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (baseRateplan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baseRateplan", baseRateplan));
        }

        if (channelGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelGroup", channelGroup));
        }

        if (channelCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelCode", channelCode));
        }

        if (marketCodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "marketCodes", marketCodes));
        }

        if (roomTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "roomTypes", roomTypes));
        }

        if (includedServices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includedServices", includedServices));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratePlansGetRateplansCountValidateBeforeCall(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratePlansGetRateplansCount(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratePlansGetRateplansCount(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratePlansGetRateplansCount(Async)");
        }

        return ratePlansGetRateplansCountCall(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices, _callback);

    }

    /**
     * Get the count of all rateplans in the hotel matching the given filter criteria.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are counting the rateplans for. (required)
     * @param sellingStatus Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans. (optional)
     * @param commissionable Return all rateplans having commisionable status (optional)
     * @param group Return all rateplans belonging to the specified rateplan group (optional)
     * @param baseRateplan Return all rateplans having the specified rateplan as base rateplan (optional)
     * @param channelGroup Return all rateplans that are sold through at least one channel out of the specified channel group (optional)
     * @param channelCode Return all rateplans sold through the specified channel (optional)
     * @param marketCodes Return all rateplans having one of the specified values as a market code (optional)
     * @param roomTypes Return all rateplans by which at least one of the specified room types are sold (optional)
     * @param includedServices Return all rateplans having at least one of the specified services included (optional)
     * @return TotalCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rateplans count in the hotel matching the given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public TotalCountResponse ratePlansGetRateplansCount(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices) throws ApiException {
        ApiResponse<TotalCountResponse> localVarResp = ratePlansGetRateplansCountWithHttpInfo(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices);
        return localVarResp.getData();
    }

    /**
     * Get the count of all rateplans in the hotel matching the given filter criteria.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are counting the rateplans for. (required)
     * @param sellingStatus Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans. (optional)
     * @param commissionable Return all rateplans having commisionable status (optional)
     * @param group Return all rateplans belonging to the specified rateplan group (optional)
     * @param baseRateplan Return all rateplans having the specified rateplan as base rateplan (optional)
     * @param channelGroup Return all rateplans that are sold through at least one channel out of the specified channel group (optional)
     * @param channelCode Return all rateplans sold through the specified channel (optional)
     * @param marketCodes Return all rateplans having one of the specified values as a market code (optional)
     * @param roomTypes Return all rateplans by which at least one of the specified room types are sold (optional)
     * @param includedServices Return all rateplans having at least one of the specified services included (optional)
     * @return ApiResponse&lt;TotalCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rateplans count in the hotel matching the given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TotalCountResponse> ratePlansGetRateplansCountWithHttpInfo(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices) throws ApiException {
        okhttp3.Call localVarCall = ratePlansGetRateplansCountValidateBeforeCall(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices, null);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the count of all rateplans in the hotel matching the given filter criteria. (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are counting the rateplans for. (required)
     * @param sellingStatus Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans. (optional)
     * @param commissionable Return all rateplans having commisionable status (optional)
     * @param group Return all rateplans belonging to the specified rateplan group (optional)
     * @param baseRateplan Return all rateplans having the specified rateplan as base rateplan (optional)
     * @param channelGroup Return all rateplans that are sold through at least one channel out of the specified channel group (optional)
     * @param channelCode Return all rateplans sold through the specified channel (optional)
     * @param marketCodes Return all rateplans having one of the specified values as a market code (optional)
     * @param roomTypes Return all rateplans by which at least one of the specified room types are sold (optional)
     * @param includedServices Return all rateplans having at least one of the specified services included (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rateplans count in the hotel matching the given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRateplansCountAsync(String appId, String appKey, Integer hotelId, String sellingStatus, Boolean commissionable, String group, String baseRateplan, String channelGroup, String channelCode, List<String> marketCodes, List<String> roomTypes, List<String> includedServices, final ApiCallback<TotalCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratePlansGetRateplansCountValidateBeforeCall(appId, appKey, hotelId, sellingStatus, commissionable, group, baseRateplan, channelGroup, channelCode, marketCodes, roomTypes, includedServices, _callback);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratePlansGetRates
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param expand You can expand the supplements per room type on demand. By default they are not shown. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of daily rates within the specified time preiod. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The rateplan does not have any active date or is not loaded within the defined time period. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested rateplan could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRatesCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "rateplanCode" + "}", localVarApiClient.escapeString(rateplanCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inlinecount", inlinecount));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratePlansGetRatesValidateBeforeCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratePlansGetRates(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratePlansGetRates(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratePlansGetRates(Async)");
        }

        // verify the required parameter 'rateplanCode' is set
        if (rateplanCode == null) {
            throw new ApiException("Missing the required parameter 'rateplanCode' when calling ratePlansGetRates(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling ratePlansGetRates(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling ratePlansGetRates(Async)");
        }

        return ratePlansGetRatesCall(appId, appKey, hotelId, rateplanCode, from, to, expand, skip, top, inlinecount, _callback);

    }

    /**
     * Get the setup of the daily rates for a specific rateplan and a defined timeperiod.
     * With this call you can read the daily rates setup including the cancellation policy and minimum guarantee per day for the              specified rateplan. You can specify a timeperiod to read the daily rates for. The rateplan needs to be active for at least              one business day in the defined time period and have rates loaded.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param expand You can expand the supplements per room type on demand. By default they are not shown. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return RatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of daily rates within the specified time preiod. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The rateplan does not have any active date or is not loaded within the defined time period. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested rateplan could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public RatesResponse ratePlansGetRates(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount) throws ApiException {
        ApiResponse<RatesResponse> localVarResp = ratePlansGetRatesWithHttpInfo(appId, appKey, hotelId, rateplanCode, from, to, expand, skip, top, inlinecount);
        return localVarResp.getData();
    }

    /**
     * Get the setup of the daily rates for a specific rateplan and a defined timeperiod.
     * With this call you can read the daily rates setup including the cancellation policy and minimum guarantee per day for the              specified rateplan. You can specify a timeperiod to read the daily rates for. The rateplan needs to be active for at least              one business day in the defined time period and have rates loaded.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param expand You can expand the supplements per room type on demand. By default they are not shown. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return ApiResponse&lt;RatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of daily rates within the specified time preiod. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The rateplan does not have any active date or is not loaded within the defined time period. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested rateplan could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RatesResponse> ratePlansGetRatesWithHttpInfo(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount) throws ApiException {
        okhttp3.Call localVarCall = ratePlansGetRatesValidateBeforeCall(appId, appKey, hotelId, rateplanCode, from, to, expand, skip, top, inlinecount, null);
        Type localVarReturnType = new TypeToken<RatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the setup of the daily rates for a specific rateplan and a defined timeperiod. (asynchronously)
     * With this call you can read the daily rates setup including the cancellation policy and minimum guarantee per day for the              specified rateplan. You can specify a timeperiod to read the daily rates for. The rateplan needs to be active for at least              one business day in the defined time period and have rates loaded.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to see details for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param expand You can expand the supplements per room type on demand. By default they are not shown. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of daily rates within the specified time preiod. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The rateplan does not have any active date or is not loaded within the defined time period. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested rateplan could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRatesAsync(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, String expand, Integer skip, Integer top, String inlinecount, final ApiCallback<RatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratePlansGetRatesValidateBeforeCall(appId, appKey, hotelId, rateplanCode, from, to, expand, skip, top, inlinecount, _callback);
        Type localVarReturnType = new TypeToken<RatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratePlansGetRatesCount
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to count daily rates for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of daily rates for the specified time period. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRatesCountCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/$count"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "rateplanCode" + "}", localVarApiClient.escapeString(rateplanCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratePlansGetRatesCountValidateBeforeCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratePlansGetRatesCount(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratePlansGetRatesCount(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratePlansGetRatesCount(Async)");
        }

        // verify the required parameter 'rateplanCode' is set
        if (rateplanCode == null) {
            throw new ApiException("Missing the required parameter 'rateplanCode' when calling ratePlansGetRatesCount(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling ratePlansGetRatesCount(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling ratePlansGetRatesCount(Async)");
        }

        return ratePlansGetRatesCountCall(appId, appKey, hotelId, rateplanCode, from, to, _callback);

    }

    /**
     * Get the count of all active and loaded daily rates for the defined rateplan in a specified time period.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to count daily rates for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @return TotalCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of daily rates for the specified time period. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public TotalCountResponse ratePlansGetRatesCount(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        ApiResponse<TotalCountResponse> localVarResp = ratePlansGetRatesCountWithHttpInfo(appId, appKey, hotelId, rateplanCode, from, to);
        return localVarResp.getData();
    }

    /**
     * Get the count of all active and loaded daily rates for the defined rateplan in a specified time period.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to count daily rates for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @return ApiResponse&lt;TotalCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of daily rates for the specified time period. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TotalCountResponse> ratePlansGetRatesCountWithHttpInfo(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        okhttp3.Call localVarCall = ratePlansGetRatesCountValidateBeforeCall(appId, appKey, hotelId, rateplanCode, from, to, null);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the count of all active and loaded daily rates for the defined rateplan in a specified time period. (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to count daily rates for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of daily rates for the specified time period. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansGetRatesCountAsync(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, final ApiCallback<TotalCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratePlansGetRatesCountValidateBeforeCall(appId, appKey, hotelId, rateplanCode, from, to, _callback);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratePlansPatchRate
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to update the daily rate details for. (required)
     * @param businessDay The business day of the daily rate you want to update. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansPatchRateCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay, List<OperationRatePatchRequest> patchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchRequest;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/{businessDay}"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "rateplanCode" + "}", localVarApiClient.escapeString(rateplanCode.toString()))
            .replace("{" + "businessDay" + "}", localVarApiClient.escapeString(businessDay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratePlansPatchRateValidateBeforeCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay, List<OperationRatePatchRequest> patchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratePlansPatchRate(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratePlansPatchRate(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratePlansPatchRate(Async)");
        }

        // verify the required parameter 'rateplanCode' is set
        if (rateplanCode == null) {
            throw new ApiException("Missing the required parameter 'rateplanCode' when calling ratePlansPatchRate(Async)");
        }

        // verify the required parameter 'businessDay' is set
        if (businessDay == null) {
            throw new ApiException("Missing the required parameter 'businessDay' when calling ratePlansPatchRate(Async)");
        }

        // verify the required parameter 'patchRequest' is set
        if (patchRequest == null) {
            throw new ApiException("Missing the required parameter 'patchRequest' when calling ratePlansPatchRate(Async)");
        }

        return ratePlansPatchRateCall(appId, appKey, hotelId, rateplanCode, businessDay, patchRequest, _callback);

    }

    /**
     * Partially update a rate of the specified rateplan for a defined business day.
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified business day.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/base_price\&quot;, \&quot;value\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to update the daily rate details for. (required)
     * @param businessDay The business day of the daily rate you want to update. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Object ratePlansPatchRate(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay, List<OperationRatePatchRequest> patchRequest) throws ApiException {
        ApiResponse<Object> localVarResp = ratePlansPatchRateWithHttpInfo(appId, appKey, hotelId, rateplanCode, businessDay, patchRequest);
        return localVarResp.getData();
    }

    /**
     * Partially update a rate of the specified rateplan for a defined business day.
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified business day.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/base_price\&quot;, \&quot;value\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to update the daily rate details for. (required)
     * @param businessDay The business day of the daily rate you want to update. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> ratePlansPatchRateWithHttpInfo(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay, List<OperationRatePatchRequest> patchRequest) throws ApiException {
        okhttp3.Call localVarCall = ratePlansPatchRateValidateBeforeCall(appId, appKey, hotelId, rateplanCode, businessDay, patchRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially update a rate of the specified rateplan for a defined business day. (asynchronously)
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified business day.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/base_price\&quot;, \&quot;value\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to update the daily rate details for. (required)
     * @param businessDay The business day of the daily rate you want to update. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansPatchRateAsync(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime businessDay, List<OperationRatePatchRequest> patchRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratePlansPatchRateValidateBeforeCall(appId, appKey, hotelId, rateplanCode, businessDay, patchRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratePlansPatchRates
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to update the daily rate details for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansPatchRatesCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, List<OperationRatePatchRequest> patchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchRequest;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "rateplanCode" + "}", localVarApiClient.escapeString(rateplanCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratePlansPatchRatesValidateBeforeCall(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, List<OperationRatePatchRequest> patchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ratePlansPatchRates(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling ratePlansPatchRates(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling ratePlansPatchRates(Async)");
        }

        // verify the required parameter 'rateplanCode' is set
        if (rateplanCode == null) {
            throw new ApiException("Missing the required parameter 'rateplanCode' when calling ratePlansPatchRates(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling ratePlansPatchRates(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling ratePlansPatchRates(Async)");
        }

        // verify the required parameter 'patchRequest' is set
        if (patchRequest == null) {
            throw new ApiException("Missing the required parameter 'patchRequest' when calling ratePlansPatchRates(Async)");
        }

        return ratePlansPatchRatesCall(appId, appKey, hotelId, rateplanCode, from, to, patchRequest, _callback);

    }

    /**
     * Partially update a rate of the specified rateplan for the defined time period.
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/base_price\&quot;, \&quot;value\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to update the daily rate details for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Object ratePlansPatchRates(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, List<OperationRatePatchRequest> patchRequest) throws ApiException {
        ApiResponse<Object> localVarResp = ratePlansPatchRatesWithHttpInfo(appId, appKey, hotelId, rateplanCode, from, to, patchRequest);
        return localVarResp.getData();
    }

    /**
     * Partially update a rate of the specified rateplan for the defined time period.
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/base_price\&quot;, \&quot;value\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to update the daily rate details for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> ratePlansPatchRatesWithHttpInfo(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, List<OperationRatePatchRequest> patchRequest) throws ApiException {
        okhttp3.Call localVarCall = ratePlansPatchRatesValidateBeforeCall(appId, appKey, hotelId, rateplanCode, from, to, patchRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially update a rate of the specified rateplan for the defined time period. (asynchronously)
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/base_price\&quot;, \&quot;value\&quot;: 120.00                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the rateplan belongs to. (required)
     * @param rateplanCode The code of the rateplan you want to update the daily rate details for. (required)
     * @param from Defines the last business day you would like to get rates for. The maximum time span between &lt;i&gt;from&lt;/i&gt;´and &lt;i&gt;to&lt;/i&gt;              is limited to 365 days. (required)
     * @param to Defines the first business day you would like to get rates for. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratePlansPatchRatesAsync(String appId, String appKey, Integer hotelId, String rateplanCode, OffsetDateTime from, OffsetDateTime to, List<OperationRatePatchRequest> patchRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratePlansPatchRatesValidateBeforeCall(appId, appKey, hotelId, rateplanCode, from, to, patchRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
