/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RateplansListRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RateplansListRequest {
  public static final String SERIALIZED_NAME_BASE_RATEPLAN = "baseRateplan";
  @SerializedName(SERIALIZED_NAME_BASE_RATEPLAN)
  private String baseRateplan;

  public static final String SERIALIZED_NAME_CHANNEL_CODE = "channelCode";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODE)
  private String channelCode;

  public static final String SERIALIZED_NAME_CHANNEL_GROUP = "channelGroup";
  @SerializedName(SERIALIZED_NAME_CHANNEL_GROUP)
  private String channelGroup;

  public static final String SERIALIZED_NAME_COMMISSIONABLE = "commissionable";
  @SerializedName(SERIALIZED_NAME_COMMISSIONABLE)
  private Boolean commissionable;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_INCLUDED_SERVICES = "includedServices";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SERVICES)
  private List<String> includedServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKET_CODES = "marketCodes";
  @SerializedName(SERIALIZED_NAME_MARKET_CODES)
  private List<String> marketCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_TYPES = "roomTypes";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private List<String> roomTypes = new ArrayList<>();

  /**
   * Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans.
   */
  @JsonAdapter(SellingStatusEnum.Adapter.class)
  public enum SellingStatusEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive"),
    
    ALL("All");

    private String value;

    SellingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SellingStatusEnum fromValue(String value) {
      for (SellingStatusEnum b : SellingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SellingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SellingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SellingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SellingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SellingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELLING_STATUS = "sellingStatus";
  @SerializedName(SERIALIZED_NAME_SELLING_STATUS)
  private SellingStatusEnum sellingStatus;

  public RateplansListRequest() {
  }

  public RateplansListRequest baseRateplan(String baseRateplan) {
    this.baseRateplan = baseRateplan;
    return this;
  }

  /**
   * Return all rateplans having the specified rateplan as base rateplan
   * @return baseRateplan
   */
  @javax.annotation.Nullable
  public String getBaseRateplan() {
    return baseRateplan;
  }

  public void setBaseRateplan(String baseRateplan) {
    this.baseRateplan = baseRateplan;
  }


  public RateplansListRequest channelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  /**
   * Return all rateplans sold through the specified channel
   * @return channelCode
   */
  @javax.annotation.Nullable
  public String getChannelCode() {
    return channelCode;
  }

  public void setChannelCode(String channelCode) {
    this.channelCode = channelCode;
  }


  public RateplansListRequest channelGroup(String channelGroup) {
    this.channelGroup = channelGroup;
    return this;
  }

  /**
   * Return all rateplans that are sold through at least one channel out of the specified channel group
   * @return channelGroup
   */
  @javax.annotation.Nullable
  public String getChannelGroup() {
    return channelGroup;
  }

  public void setChannelGroup(String channelGroup) {
    this.channelGroup = channelGroup;
  }


  public RateplansListRequest commissionable(Boolean commissionable) {
    this.commissionable = commissionable;
    return this;
  }

  /**
   * Return all rateplans having commisionable status
   * @return commissionable
   */
  @javax.annotation.Nullable
  public Boolean getCommissionable() {
    return commissionable;
  }

  public void setCommissionable(Boolean commissionable) {
    this.commissionable = commissionable;
  }


  public RateplansListRequest group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Return all rateplans belonging to the specified rateplan group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public RateplansListRequest includedServices(List<String> includedServices) {
    this.includedServices = includedServices;
    return this;
  }

  public RateplansListRequest addIncludedServicesItem(String includedServicesItem) {
    if (this.includedServices == null) {
      this.includedServices = new ArrayList<>();
    }
    this.includedServices.add(includedServicesItem);
    return this;
  }

  /**
   * Return all rateplans having at least one of the specified services included
   * @return includedServices
   */
  @javax.annotation.Nullable
  public List<String> getIncludedServices() {
    return includedServices;
  }

  public void setIncludedServices(List<String> includedServices) {
    this.includedServices = includedServices;
  }


  public RateplansListRequest marketCodes(List<String> marketCodes) {
    this.marketCodes = marketCodes;
    return this;
  }

  public RateplansListRequest addMarketCodesItem(String marketCodesItem) {
    if (this.marketCodes == null) {
      this.marketCodes = new ArrayList<>();
    }
    this.marketCodes.add(marketCodesItem);
    return this;
  }

  /**
   * Return all rateplans having one of the specified values as a market code
   * @return marketCodes
   */
  @javax.annotation.Nullable
  public List<String> getMarketCodes() {
    return marketCodes;
  }

  public void setMarketCodes(List<String> marketCodes) {
    this.marketCodes = marketCodes;
  }


  public RateplansListRequest roomTypes(List<String> roomTypes) {
    this.roomTypes = roomTypes;
    return this;
  }

  public RateplansListRequest addRoomTypesItem(String roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new ArrayList<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

  /**
   * Return all rateplans by which at least one of the specified room types are sold
   * @return roomTypes
   */
  @javax.annotation.Nullable
  public List<String> getRoomTypes() {
    return roomTypes;
  }

  public void setRoomTypes(List<String> roomTypes) {
    this.roomTypes = roomTypes;
  }


  public RateplansListRequest sellingStatus(SellingStatusEnum sellingStatus) {
    this.sellingStatus = sellingStatus;
    return this;
  }

  /**
   * Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans.
   * @return sellingStatus
   */
  @javax.annotation.Nullable
  public SellingStatusEnum getSellingStatus() {
    return sellingStatus;
  }

  public void setSellingStatus(SellingStatusEnum sellingStatus) {
    this.sellingStatus = sellingStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateplansListRequest rateplansListRequest = (RateplansListRequest) o;
    return Objects.equals(this.baseRateplan, rateplansListRequest.baseRateplan) &&
        Objects.equals(this.channelCode, rateplansListRequest.channelCode) &&
        Objects.equals(this.channelGroup, rateplansListRequest.channelGroup) &&
        Objects.equals(this.commissionable, rateplansListRequest.commissionable) &&
        Objects.equals(this.group, rateplansListRequest.group) &&
        Objects.equals(this.includedServices, rateplansListRequest.includedServices) &&
        Objects.equals(this.marketCodes, rateplansListRequest.marketCodes) &&
        Objects.equals(this.roomTypes, rateplansListRequest.roomTypes) &&
        Objects.equals(this.sellingStatus, rateplansListRequest.sellingStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseRateplan, channelCode, channelGroup, commissionable, group, includedServices, marketCodes, roomTypes, sellingStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateplansListRequest {\n");
    sb.append("    baseRateplan: ").append(toIndentedString(baseRateplan)).append("\n");
    sb.append("    channelCode: ").append(toIndentedString(channelCode)).append("\n");
    sb.append("    channelGroup: ").append(toIndentedString(channelGroup)).append("\n");
    sb.append("    commissionable: ").append(toIndentedString(commissionable)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    includedServices: ").append(toIndentedString(includedServices)).append("\n");
    sb.append("    marketCodes: ").append(toIndentedString(marketCodes)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("    sellingStatus: ").append(toIndentedString(sellingStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseRateplan");
    openapiFields.add("channelCode");
    openapiFields.add("channelGroup");
    openapiFields.add("commissionable");
    openapiFields.add("group");
    openapiFields.add("includedServices");
    openapiFields.add("marketCodes");
    openapiFields.add("roomTypes");
    openapiFields.add("sellingStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RateplansListRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RateplansListRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateplansListRequest is not found in the empty JSON string", RateplansListRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RateplansListRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateplansListRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseRateplan") != null && !jsonObj.get("baseRateplan").isJsonNull()) && !jsonObj.get("baseRateplan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseRateplan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseRateplan").toString()));
      }
      if ((jsonObj.get("channelCode") != null && !jsonObj.get("channelCode").isJsonNull()) && !jsonObj.get("channelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelCode").toString()));
      }
      if ((jsonObj.get("channelGroup") != null && !jsonObj.get("channelGroup").isJsonNull()) && !jsonObj.get("channelGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelGroup").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedServices") != null && !jsonObj.get("includedServices").isJsonNull() && !jsonObj.get("includedServices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedServices` to be an array in the JSON string but got `%s`", jsonObj.get("includedServices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketCodes") != null && !jsonObj.get("marketCodes").isJsonNull() && !jsonObj.get("marketCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketCodes` to be an array in the JSON string but got `%s`", jsonObj.get("marketCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roomTypes") != null && !jsonObj.get("roomTypes").isJsonNull() && !jsonObj.get("roomTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypes` to be an array in the JSON string but got `%s`", jsonObj.get("roomTypes").toString()));
      }
      if ((jsonObj.get("sellingStatus") != null && !jsonObj.get("sellingStatus").isJsonNull()) && !jsonObj.get("sellingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellingStatus").toString()));
      }
      // validate the optional field `sellingStatus`
      if (jsonObj.get("sellingStatus") != null && !jsonObj.get("sellingStatus").isJsonNull()) {
        SellingStatusEnum.validateJsonElement(jsonObj.get("sellingStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateplansListRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateplansListRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateplansListRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateplansListRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RateplansListRequest>() {
           @Override
           public void write(JsonWriter out, RateplansListRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateplansListRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RateplansListRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RateplansListRequest
   * @throws IOException if the JSON string is invalid with respect to RateplansListRequest
   */
  public static RateplansListRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateplansListRequest.class);
  }

  /**
   * Convert an instance of RateplansListRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

