/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAvailableRoomsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAvailableRoomsRequest {
  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private byte[] adults;

  public static final String SERIALIZED_NAME_AMENITIES = "amenities";
  @SerializedName(SERIALIZED_NAME_AMENITIES)
  private List<String> amenities = new ArrayList<>();

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private OffsetDateTime from;

  public static final String SERIALIZED_NAME_INCLUDE_OUT_OF_SERVICE = "includeOutOfService";
  @SerializedName(SERIALIZED_NAME_INCLUDE_OUT_OF_SERVICE)
  private Boolean includeOutOfService;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_TYPES = "roomTypes";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private List<String> roomTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private OffsetDateTime to;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<String> views = new ArrayList<>();

  public GetAvailableRoomsRequest() {
  }

  public GetAvailableRoomsRequest adults(byte[] adults) {
    this.adults = adults;
    return this;
  }

  /**
   * Specifies number of adults the returned rooms will have to be able to house. The default value is 1.
   * @return adults
   */
  @javax.annotation.Nullable
  public byte[] getAdults() {
    return adults;
  }

  public void setAdults(byte[] adults) {
    this.adults = adults;
  }


  public GetAvailableRoomsRequest amenities(List<String> amenities) {
    this.amenities = amenities;
    return this;
  }

  public GetAvailableRoomsRequest addAmenitiesItem(String amenitiesItem) {
    if (this.amenities == null) {
      this.amenities = new ArrayList<>();
    }
    this.amenities.add(amenitiesItem);
    return this;
  }

  /**
   * Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.
   * @return amenities
   */
  @javax.annotation.Nullable
  public List<String> getAmenities() {
    return amenities;
  }

  public void setAmenities(List<String> amenities) {
    this.amenities = amenities;
  }


  public GetAvailableRoomsRequest from(OffsetDateTime from) {
    this.from = from;
    return this;
  }

  /**
   * Rooms returned will not be assigned to a reservation or be under maintenance between this date              and the specified to date. Still there could be departing reservations or ending maintenances              for this date.
   * @return from
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFrom() {
    return from;
  }

  public void setFrom(OffsetDateTime from) {
    this.from = from;
  }


  public GetAvailableRoomsRequest includeOutOfService(Boolean includeOutOfService) {
    this.includeOutOfService = includeOutOfService;
    return this;
  }

  /**
   * Should rooms that are set OutOfService in the defined time period be returned as available. By default              they are not.
   * @return includeOutOfService
   */
  @javax.annotation.Nullable
  public Boolean getIncludeOutOfService() {
    return includeOutOfService;
  }

  public void setIncludeOutOfService(Boolean includeOutOfService) {
    this.includeOutOfService = includeOutOfService;
  }


  public GetAvailableRoomsRequest locations(List<String> locations) {
    this.locations = locations;
    return this;
  }

  public GetAvailableRoomsRequest addLocationsItem(String locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<String> getLocations() {
    return locations;
  }

  public void setLocations(List<String> locations) {
    this.locations = locations;
  }


  public GetAvailableRoomsRequest roomTypes(List<String> roomTypes) {
    this.roomTypes = roomTypes;
    return this;
  }

  public GetAvailableRoomsRequest addRoomTypesItem(String roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new ArrayList<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

  /**
   * Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
   * @return roomTypes
   */
  @javax.annotation.Nullable
  public List<String> getRoomTypes() {
    return roomTypes;
  }

  public void setRoomTypes(List<String> roomTypes) {
    this.roomTypes = roomTypes;
  }


  public GetAvailableRoomsRequest to(OffsetDateTime to) {
    this.to = to;
    return this;
  }

  /**
   * Rooms returned will not be assigned to a reservation or be under maintenance between the specified              from date and this date. Still there could be arriving reservations or beginning maintenances              for this date.
   * @return to
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTo() {
    return to;
  }

  public void setTo(OffsetDateTime to) {
    this.to = to;
  }


  public GetAvailableRoomsRequest views(List<String> views) {
    this.views = views;
    return this;
  }

  public GetAvailableRoomsRequest addViewsItem(String viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

  /**
   * Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.
   * @return views
   */
  @javax.annotation.Nullable
  public List<String> getViews() {
    return views;
  }

  public void setViews(List<String> views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAvailableRoomsRequest getAvailableRoomsRequest = (GetAvailableRoomsRequest) o;
    return Arrays.equals(this.adults, getAvailableRoomsRequest.adults) &&
        Objects.equals(this.amenities, getAvailableRoomsRequest.amenities) &&
        Objects.equals(this.from, getAvailableRoomsRequest.from) &&
        Objects.equals(this.includeOutOfService, getAvailableRoomsRequest.includeOutOfService) &&
        Objects.equals(this.locations, getAvailableRoomsRequest.locations) &&
        Objects.equals(this.roomTypes, getAvailableRoomsRequest.roomTypes) &&
        Objects.equals(this.to, getAvailableRoomsRequest.to) &&
        Objects.equals(this.views, getAvailableRoomsRequest.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(adults), amenities, from, includeOutOfService, locations, roomTypes, to, views);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAvailableRoomsRequest {\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    amenities: ").append(toIndentedString(amenities)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    includeOutOfService: ").append(toIndentedString(includeOutOfService)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adults");
    openapiFields.add("amenities");
    openapiFields.add("from");
    openapiFields.add("includeOutOfService");
    openapiFields.add("locations");
    openapiFields.add("roomTypes");
    openapiFields.add("to");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAvailableRoomsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAvailableRoomsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAvailableRoomsRequest is not found in the empty JSON string", GetAvailableRoomsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAvailableRoomsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAvailableRoomsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetAvailableRoomsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("amenities") != null && !jsonObj.get("amenities").isJsonNull() && !jsonObj.get("amenities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amenities` to be an array in the JSON string but got `%s`", jsonObj.get("amenities").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull() && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roomTypes") != null && !jsonObj.get("roomTypes").isJsonNull() && !jsonObj.get("roomTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypes` to be an array in the JSON string but got `%s`", jsonObj.get("roomTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull() && !jsonObj.get("views").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAvailableRoomsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAvailableRoomsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAvailableRoomsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAvailableRoomsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAvailableRoomsRequest>() {
           @Override
           public void write(JsonWriter out, GetAvailableRoomsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAvailableRoomsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAvailableRoomsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAvailableRoomsRequest
   * @throws IOException if the JSON string is invalid with respect to GetAvailableRoomsRequest
   */
  public static GetAvailableRoomsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAvailableRoomsRequest.class);
  }

  /**
   * Convert an instance of GetAvailableRoomsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

