/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RoomMaintenance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents current room status data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoomStatus {
  /**
   * Room Condition status
   */
  @JsonAdapter(ConditionEnum.Adapter.class)
  public enum ConditionEnum {
    CLEAN_NOT_INSPECTED("CleanNotInspected"),
    
    CLEAN("Clean"),
    
    DIRTY("Dirty");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionEnum fromValue(String value) {
      for (ConditionEnum b : ConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConditionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private ConditionEnum condition;

  /**
   * The frontdesk occupancy is set by reservation checkin and checkout. It can differ from the              housekeeping occupancy
   */
  @JsonAdapter(FrontdeskOccupancyEnum.Adapter.class)
  public enum FrontdeskOccupancyEnum {
    OCCUPIED("Occupied"),
    
    VACANT("Vacant");

    private String value;

    FrontdeskOccupancyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrontdeskOccupancyEnum fromValue(String value) {
      for (FrontdeskOccupancyEnum b : FrontdeskOccupancyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrontdeskOccupancyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrontdeskOccupancyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrontdeskOccupancyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrontdeskOccupancyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrontdeskOccupancyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FRONTDESK_OCCUPANCY = "frontdesk_occupancy";
  @SerializedName(SERIALIZED_NAME_FRONTDESK_OCCUPANCY)
  private FrontdeskOccupancyEnum frontdeskOccupancy;

  /**
   * The housekeeping occupancy status is defined by the housekeeping staff. Usually it matches the              frontdesk occupancy, but sometimes the reservation is still inhouse, but it looks like there is no              guest in the room anymore. Then the statuses can differ.
   */
  @JsonAdapter(HousekeepingOccupancyEnum.Adapter.class)
  public enum HousekeepingOccupancyEnum {
    OCCUPIED("Occupied"),
    
    VACANT("Vacant");

    private String value;

    HousekeepingOccupancyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HousekeepingOccupancyEnum fromValue(String value) {
      for (HousekeepingOccupancyEnum b : HousekeepingOccupancyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HousekeepingOccupancyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HousekeepingOccupancyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HousekeepingOccupancyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HousekeepingOccupancyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HousekeepingOccupancyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOUSEKEEPING_OCCUPANCY = "housekeeping_occupancy";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_OCCUPANCY)
  private HousekeepingOccupancyEnum housekeepingOccupancy;

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private RoomMaintenance maintenance;

  public RoomStatus() {
  }

  public RoomStatus condition(ConditionEnum condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Room Condition status
   * @return condition
   */
  @javax.annotation.Nullable
  public ConditionEnum getCondition() {
    return condition;
  }

  public void setCondition(ConditionEnum condition) {
    this.condition = condition;
  }


  public RoomStatus frontdeskOccupancy(FrontdeskOccupancyEnum frontdeskOccupancy) {
    this.frontdeskOccupancy = frontdeskOccupancy;
    return this;
  }

  /**
   * The frontdesk occupancy is set by reservation checkin and checkout. It can differ from the              housekeeping occupancy
   * @return frontdeskOccupancy
   */
  @javax.annotation.Nullable
  public FrontdeskOccupancyEnum getFrontdeskOccupancy() {
    return frontdeskOccupancy;
  }

  public void setFrontdeskOccupancy(FrontdeskOccupancyEnum frontdeskOccupancy) {
    this.frontdeskOccupancy = frontdeskOccupancy;
  }


  public RoomStatus housekeepingOccupancy(HousekeepingOccupancyEnum housekeepingOccupancy) {
    this.housekeepingOccupancy = housekeepingOccupancy;
    return this;
  }

  /**
   * The housekeeping occupancy status is defined by the housekeeping staff. Usually it matches the              frontdesk occupancy, but sometimes the reservation is still inhouse, but it looks like there is no              guest in the room anymore. Then the statuses can differ.
   * @return housekeepingOccupancy
   */
  @javax.annotation.Nullable
  public HousekeepingOccupancyEnum getHousekeepingOccupancy() {
    return housekeepingOccupancy;
  }

  public void setHousekeepingOccupancy(HousekeepingOccupancyEnum housekeepingOccupancy) {
    this.housekeepingOccupancy = housekeepingOccupancy;
  }


  public RoomStatus maintenance(RoomMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

  /**
   * Get maintenance
   * @return maintenance
   */
  @javax.annotation.Nullable
  public RoomMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(RoomMaintenance maintenance) {
    this.maintenance = maintenance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoomStatus roomStatus = (RoomStatus) o;
    return Objects.equals(this.condition, roomStatus.condition) &&
        Objects.equals(this.frontdeskOccupancy, roomStatus.frontdeskOccupancy) &&
        Objects.equals(this.housekeepingOccupancy, roomStatus.housekeepingOccupancy) &&
        Objects.equals(this.maintenance, roomStatus.maintenance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, frontdeskOccupancy, housekeepingOccupancy, maintenance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoomStatus {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    frontdeskOccupancy: ").append(toIndentedString(frontdeskOccupancy)).append("\n");
    sb.append("    housekeepingOccupancy: ").append(toIndentedString(housekeepingOccupancy)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition");
    openapiFields.add("frontdesk_occupancy");
    openapiFields.add("housekeeping_occupancy");
    openapiFields.add("maintenance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoomStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoomStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoomStatus is not found in the empty JSON string", RoomStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoomStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoomStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        ConditionEnum.validateJsonElement(jsonObj.get("condition"));
      }
      if ((jsonObj.get("frontdesk_occupancy") != null && !jsonObj.get("frontdesk_occupancy").isJsonNull()) && !jsonObj.get("frontdesk_occupancy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontdesk_occupancy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontdesk_occupancy").toString()));
      }
      // validate the optional field `frontdesk_occupancy`
      if (jsonObj.get("frontdesk_occupancy") != null && !jsonObj.get("frontdesk_occupancy").isJsonNull()) {
        FrontdeskOccupancyEnum.validateJsonElement(jsonObj.get("frontdesk_occupancy"));
      }
      if ((jsonObj.get("housekeeping_occupancy") != null && !jsonObj.get("housekeeping_occupancy").isJsonNull()) && !jsonObj.get("housekeeping_occupancy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `housekeeping_occupancy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("housekeeping_occupancy").toString()));
      }
      // validate the optional field `housekeeping_occupancy`
      if (jsonObj.get("housekeeping_occupancy") != null && !jsonObj.get("housekeeping_occupancy").isJsonNull()) {
        HousekeepingOccupancyEnum.validateJsonElement(jsonObj.get("housekeeping_occupancy"));
      }
      // validate the optional field `maintenance`
      if (jsonObj.get("maintenance") != null && !jsonObj.get("maintenance").isJsonNull()) {
        RoomMaintenance.validateJsonElement(jsonObj.get("maintenance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoomStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoomStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoomStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoomStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<RoomStatus>() {
           @Override
           public void write(JsonWriter out, RoomStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoomStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoomStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoomStatus
   * @throws IOException if the JSON string is invalid with respect to RoomStatus
   */
  public static RoomStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoomStatus.class);
  }

  /**
   * Convert an instance of RoomStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

