/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.LinkObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodeBaseEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeBaseEntry {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, LinkObject> links = new HashMap<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The type or category of the code
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GUEST_REQUEST("GuestRequest"),
    
    REQUEST_DIETARY("RequestDietary"),
    
    VIP_STATUS("VIPStatus"),
    
    REASON_FOR_RATE_CHANGE("ReasonForRateChange"),
    
    REGRETS("Regrets"),
    
    MARKET_SEGMENTS("MarketSegments"),
    
    SOURCE_OF_BUSINESS("SourceOfBusiness"),
    
    LOYALTY_PROGRAM("LoyaltyProgram"),
    
    CANCELLATION_REASON("CancellationReason"),
    
    ACCOUNT_TYPE("AccountType"),
    
    ACCOUNT_RANK("AccountRank"),
    
    VIP_LEVEL("VIPLevel"),
    
    TITLE("Title"),
    
    CONTACT_FUNCTION("ContactFunction"),
    
    TERRITORY("Territory"),
    
    CORRESPONDENCE_TYPE("CorrespondenceType"),
    
    EXTERNAL_PROGRAM_TYPE("ExternalProgramType"),
    
    REVENUE_BUCKET("RevenueBucket"),
    
    ADDITIONAL_REVENUE_BUCKET("AdditionalRevenueBucket"),
    
    ADDITIONAL_STATISTICS_BUCKETS("AdditionalStatisticsBuckets"),
    
    MEAL_PERIOD("MealPeriod"),
    
    BILLING_CYCLE("BillingCycle"),
    
    REMINDER_CYCLE("ReminderCycle"),
    
    MAJOR_MARKET_SEGMENTS("MajorMarketSegments"),
    
    DOCUMENT_TYPE("DocumentType"),
    
    ACTIVITY_TYPE("ActivityType"),
    
    RESERVATION_LABELS("ReservationLabels");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CodeBaseEntry() {
  }

  public CodeBaseEntry links(Map<String, LinkObject> links) {
    this.links = links;
    return this;
  }

  public CodeBaseEntry putLinksItem(String key, LinkObject linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Collection of links to related resources
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, LinkObject> getLinks() {
    return links;
  }

  public void setLinks(Map<String, LinkObject> links) {
    this.links = links;
  }


  public CodeBaseEntry code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The code value. This value you will see in reservations as market code and in other              resources like the revenue buckets in transactions
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CodeBaseEntry _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * This attribute tells you if this code is the default code for the specific type or not.              Not all the types of codes need to have a default code
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public CodeBaseEntry id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the code
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CodeBaseEntry name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the code that usually is more human readable
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CodeBaseEntry type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type or category of the code
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeBaseEntry codeBaseEntry = (CodeBaseEntry) o;
    return Objects.equals(this.links, codeBaseEntry.links) &&
        Objects.equals(this.code, codeBaseEntry.code) &&
        Objects.equals(this._default, codeBaseEntry._default) &&
        Objects.equals(this.id, codeBaseEntry.id) &&
        Objects.equals(this.name, codeBaseEntry.name) &&
        Objects.equals(this.type, codeBaseEntry.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, code, _default, id, name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeBaseEntry {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("code");
    openapiFields.add("default");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeBaseEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeBaseEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeBaseEntry is not found in the empty JSON string", CodeBaseEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeBaseEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeBaseEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeBaseEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeBaseEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeBaseEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeBaseEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeBaseEntry>() {
           @Override
           public void write(JsonWriter out, CodeBaseEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeBaseEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeBaseEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeBaseEntry
   * @throws IOException if the JSON string is invalid with respect to CodeBaseEntry
   */
  public static CodeBaseEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeBaseEntry.class);
  }

  /**
   * Convert an instance of CodeBaseEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

