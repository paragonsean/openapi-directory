/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.YieldableRateTimeSlice;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class YieldableRatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public YieldableRatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public YieldableRatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for yieldableRatesSavePrices
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotelId which identifies Hotel for which the operation will be performed. (required)
     * @param rateplanCode Specifies the rateplanCode for which the operation will be performed. (required)
     * @param yieldableRatePrices Specifies the the Yieldable rateplan and prices details to be created or updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saving the Yieldable rateplan prices was successful. You will get back the confirmation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yieldableRatesSavePricesCall(String appId, String appKey, Integer hotelId, String rateplanCode, List<YieldableRateTimeSlice> yieldableRatePrices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = yieldableRatePrices;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/yieldable_rateplans/{rateplanCode}/$rates"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "rateplanCode" + "}", localVarApiClient.escapeString(rateplanCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yieldableRatesSavePricesValidateBeforeCall(String appId, String appKey, Integer hotelId, String rateplanCode, List<YieldableRateTimeSlice> yieldableRatePrices, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling yieldableRatesSavePrices(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling yieldableRatesSavePrices(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling yieldableRatesSavePrices(Async)");
        }

        // verify the required parameter 'rateplanCode' is set
        if (rateplanCode == null) {
            throw new ApiException("Missing the required parameter 'rateplanCode' when calling yieldableRatesSavePrices(Async)");
        }

        // verify the required parameter 'yieldableRatePrices' is set
        if (yieldableRatePrices == null) {
            throw new ApiException("Missing the required parameter 'yieldableRatePrices' when calling yieldableRatesSavePrices(Async)");
        }

        return yieldableRatesSavePricesCall(appId, appKey, hotelId, rateplanCode, yieldableRatePrices, _callback);

    }

    /**
     * Saves Yieldable Rate Prices for existing Yieldable Rateplan.
     * Saves Yieldable Rate Prices for existing Yieldable Rateplan. The rateplan has been created before and with this End Point we               create or update the rate prices. If the Yieldable rateplan prices exist it updates them with the new price if not it creates new price entries.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotelId which identifies Hotel for which the operation will be performed. (required)
     * @param rateplanCode Specifies the rateplanCode for which the operation will be performed. (required)
     * @param yieldableRatePrices Specifies the the Yieldable rateplan and prices details to be created or updated. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saving the Yieldable rateplan prices was successful. You will get back the confirmation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Object yieldableRatesSavePrices(String appId, String appKey, Integer hotelId, String rateplanCode, List<YieldableRateTimeSlice> yieldableRatePrices) throws ApiException {
        ApiResponse<Object> localVarResp = yieldableRatesSavePricesWithHttpInfo(appId, appKey, hotelId, rateplanCode, yieldableRatePrices);
        return localVarResp.getData();
    }

    /**
     * Saves Yieldable Rate Prices for existing Yieldable Rateplan.
     * Saves Yieldable Rate Prices for existing Yieldable Rateplan. The rateplan has been created before and with this End Point we               create or update the rate prices. If the Yieldable rateplan prices exist it updates them with the new price if not it creates new price entries.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotelId which identifies Hotel for which the operation will be performed. (required)
     * @param rateplanCode Specifies the rateplanCode for which the operation will be performed. (required)
     * @param yieldableRatePrices Specifies the the Yieldable rateplan and prices details to be created or updated. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saving the Yieldable rateplan prices was successful. You will get back the confirmation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> yieldableRatesSavePricesWithHttpInfo(String appId, String appKey, Integer hotelId, String rateplanCode, List<YieldableRateTimeSlice> yieldableRatePrices) throws ApiException {
        okhttp3.Call localVarCall = yieldableRatesSavePricesValidateBeforeCall(appId, appKey, hotelId, rateplanCode, yieldableRatePrices, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves Yieldable Rate Prices for existing Yieldable Rateplan. (asynchronously)
     * Saves Yieldable Rate Prices for existing Yieldable Rateplan. The rateplan has been created before and with this End Point we               create or update the rate prices. If the Yieldable rateplan prices exist it updates them with the new price if not it creates new price entries.&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId Specifies the hotelId which identifies Hotel for which the operation will be performed. (required)
     * @param rateplanCode Specifies the rateplanCode for which the operation will be performed. (required)
     * @param yieldableRatePrices Specifies the the Yieldable rateplan and prices details to be created or updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saving the Yieldable rateplan prices was successful. You will get back the confirmation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yieldableRatesSavePricesAsync(String appId, String appKey, Integer hotelId, String rateplanCode, List<YieldableRateTimeSlice> yieldableRatePrices, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = yieldableRatesSavePricesValidateBeforeCall(appId, appKey, hotelId, rateplanCode, yieldableRatePrices, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
