/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.OperationRoomPatchRequest;
import org.openapitools.client.model.Room;
import org.openapitools.client.model.RoomListResponse;
import org.openapitools.client.model.TotalCountResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoomsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoomsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoomsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for roomsGetAvailableRooms
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are looking for available rooms. (required)
     * @param from Rooms returned will not be assigned to a reservation or be under maintenance between this date              and the specified to date. Still there could be departing reservations or ending maintenances              for this date. (required)
     * @param to Rooms returned will not be assigned to a reservation or be under maintenance between the specified              from date and this date. Still there could be arriving reservations or beginning maintenances              for this date. (required)
     * @param adults Specifies number of adults the returned rooms will have to be able to house. The default value is 1. (optional)
     * @param includeOutOfService Should rooms that are set OutOfService in the defined time period be returned as available. By default              they are not. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of available rooms in the specified time period. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no available rooms found for the given criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsGetAvailableRoomsCall(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, byte[] adults, Boolean includeOutOfService, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rooms/available"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (adults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adults", adults));
        }

        if (includeOutOfService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeOutOfService", includeOutOfService));
        }

        if (roomTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "roomTypes", roomTypes));
        }

        if (amenities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "amenities", amenities));
        }

        if (views != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "views", views));
        }

        if (locations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "locations", locations));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inlinecount", inlinecount));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roomsGetAvailableRoomsValidateBeforeCall(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, byte[] adults, Boolean includeOutOfService, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling roomsGetAvailableRooms(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling roomsGetAvailableRooms(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling roomsGetAvailableRooms(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling roomsGetAvailableRooms(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling roomsGetAvailableRooms(Async)");
        }

        return roomsGetAvailableRoomsCall(appId, appKey, hotelId, from, to, adults, includeOutOfService, roomTypes, amenities, views, locations, skip, top, inlinecount, _callback);

    }

    /**
     * Request available rooms using a given criteria.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are looking for available rooms. (required)
     * @param from Rooms returned will not be assigned to a reservation or be under maintenance between this date              and the specified to date. Still there could be departing reservations or ending maintenances              for this date. (required)
     * @param to Rooms returned will not be assigned to a reservation or be under maintenance between the specified              from date and this date. Still there could be arriving reservations or beginning maintenances              for this date. (required)
     * @param adults Specifies number of adults the returned rooms will have to be able to house. The default value is 1. (optional)
     * @param includeOutOfService Should rooms that are set OutOfService in the defined time period be returned as available. By default              they are not. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return RoomListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of available rooms in the specified time period. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no available rooms found for the given criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public RoomListResponse roomsGetAvailableRooms(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, byte[] adults, Boolean includeOutOfService, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount) throws ApiException {
        ApiResponse<RoomListResponse> localVarResp = roomsGetAvailableRoomsWithHttpInfo(appId, appKey, hotelId, from, to, adults, includeOutOfService, roomTypes, amenities, views, locations, skip, top, inlinecount);
        return localVarResp.getData();
    }

    /**
     * Request available rooms using a given criteria.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are looking for available rooms. (required)
     * @param from Rooms returned will not be assigned to a reservation or be under maintenance between this date              and the specified to date. Still there could be departing reservations or ending maintenances              for this date. (required)
     * @param to Rooms returned will not be assigned to a reservation or be under maintenance between the specified              from date and this date. Still there could be arriving reservations or beginning maintenances              for this date. (required)
     * @param adults Specifies number of adults the returned rooms will have to be able to house. The default value is 1. (optional)
     * @param includeOutOfService Should rooms that are set OutOfService in the defined time period be returned as available. By default              they are not. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return ApiResponse&lt;RoomListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of available rooms in the specified time period. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no available rooms found for the given criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoomListResponse> roomsGetAvailableRoomsWithHttpInfo(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, byte[] adults, Boolean includeOutOfService, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount) throws ApiException {
        okhttp3.Call localVarCall = roomsGetAvailableRoomsValidateBeforeCall(appId, appKey, hotelId, from, to, adults, includeOutOfService, roomTypes, amenities, views, locations, skip, top, inlinecount, null);
        Type localVarReturnType = new TypeToken<RoomListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request available rooms using a given criteria. (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are looking for available rooms. (required)
     * @param from Rooms returned will not be assigned to a reservation or be under maintenance between this date              and the specified to date. Still there could be departing reservations or ending maintenances              for this date. (required)
     * @param to Rooms returned will not be assigned to a reservation or be under maintenance between the specified              from date and this date. Still there could be arriving reservations or beginning maintenances              for this date. (required)
     * @param adults Specifies number of adults the returned rooms will have to be able to house. The default value is 1. (optional)
     * @param includeOutOfService Should rooms that are set OutOfService in the defined time period be returned as available. By default              they are not. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of available rooms in the specified time period. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no available rooms found for the given criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsGetAvailableRoomsAsync(String appId, String appKey, Integer hotelId, OffsetDateTime from, OffsetDateTime to, byte[] adults, Boolean includeOutOfService, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount, final ApiCallback<RoomListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = roomsGetAvailableRoomsValidateBeforeCall(appId, appKey, hotelId, from, to, adults, includeOutOfService, roomTypes, amenities, views, locations, skip, top, inlinecount, _callback);
        Type localVarReturnType = new TypeToken<RoomListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roomsGetRoom
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the room belongs to. (required)
     * @param roomNumber The room number you want to see details for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Room details for the given room and hotel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsGetRoomCall(String appId, String appKey, Integer hotelId, String roomNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rooms/{roomNumber}"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "roomNumber" + "}", localVarApiClient.escapeString(roomNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roomsGetRoomValidateBeforeCall(String appId, String appKey, Integer hotelId, String roomNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling roomsGetRoom(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling roomsGetRoom(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling roomsGetRoom(Async)");
        }

        // verify the required parameter 'roomNumber' is set
        if (roomNumber == null) {
            throw new ApiException("Missing the required parameter 'roomNumber' when calling roomsGetRoom(Async)");
        }

        return roomsGetRoomCall(appId, appKey, hotelId, roomNumber, _callback);

    }

    /**
     * Get all the details for a specific room in the hotel.
     * With this call you can load the details about a specific room in the hotel. It will show you the current status of the room.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the room belongs to. (required)
     * @param roomNumber The room number you want to see details for. (required)
     * @return Room
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Room details for the given room and hotel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Room roomsGetRoom(String appId, String appKey, Integer hotelId, String roomNumber) throws ApiException {
        ApiResponse<Room> localVarResp = roomsGetRoomWithHttpInfo(appId, appKey, hotelId, roomNumber);
        return localVarResp.getData();
    }

    /**
     * Get all the details for a specific room in the hotel.
     * With this call you can load the details about a specific room in the hotel. It will show you the current status of the room.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the room belongs to. (required)
     * @param roomNumber The room number you want to see details for. (required)
     * @return ApiResponse&lt;Room&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Room details for the given room and hotel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Room> roomsGetRoomWithHttpInfo(String appId, String appKey, Integer hotelId, String roomNumber) throws ApiException {
        okhttp3.Call localVarCall = roomsGetRoomValidateBeforeCall(appId, appKey, hotelId, roomNumber, null);
        Type localVarReturnType = new TypeToken<Room>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the details for a specific room in the hotel. (asynchronously)
     * With this call you can load the details about a specific room in the hotel. It will show you the current status of the room.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the room belongs to. (required)
     * @param roomNumber The room number you want to see details for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Room details for the given room and hotel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsGetRoomAsync(String appId, String appKey, Integer hotelId, String roomNumber, final ApiCallback<Room> _callback) throws ApiException {

        okhttp3.Call localVarCall = roomsGetRoomValidateBeforeCall(appId, appKey, hotelId, roomNumber, _callback);
        Type localVarReturnType = new TypeToken<Room>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roomsGetRooms
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are trying to find rooms for. (required)
     * @param occupancy Return results only for rooms that have the given frontdesk ocuppancy status. (optional)
     * @param conditions Return results only for rooms that have the given room condition status. (optional)
     * @param maintenances Return results only for rooms that have the given maintenance status. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rooms for the hotel based on the set filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no rooms found for the given filtering and pagination criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsGetRoomsCall(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rooms"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occupancy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupancy", occupancy));
        }

        if (conditions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "conditions", conditions));
        }

        if (maintenances != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "maintenances", maintenances));
        }

        if (roomTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "roomTypes", roomTypes));
        }

        if (amenities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "amenities", amenities));
        }

        if (views != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "views", views));
        }

        if (locations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "locations", locations));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inlinecount", inlinecount));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roomsGetRoomsValidateBeforeCall(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling roomsGetRooms(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling roomsGetRooms(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling roomsGetRooms(Async)");
        }

        return roomsGetRoomsCall(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations, skip, top, inlinecount, _callback);

    }

    /**
     * Get a list of rooms using the provided filtering and pagination criteria.
     * Find all rooms for the hotel that match the specified filter criteria. The filtering will be done based on the current state of              the rooms.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are trying to find rooms for. (required)
     * @param occupancy Return results only for rooms that have the given frontdesk ocuppancy status. (optional)
     * @param conditions Return results only for rooms that have the given room condition status. (optional)
     * @param maintenances Return results only for rooms that have the given maintenance status. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return RoomListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rooms for the hotel based on the set filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no rooms found for the given filtering and pagination criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public RoomListResponse roomsGetRooms(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount) throws ApiException {
        ApiResponse<RoomListResponse> localVarResp = roomsGetRoomsWithHttpInfo(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations, skip, top, inlinecount);
        return localVarResp.getData();
    }

    /**
     * Get a list of rooms using the provided filtering and pagination criteria.
     * Find all rooms for the hotel that match the specified filter criteria. The filtering will be done based on the current state of              the rooms.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are trying to find rooms for. (required)
     * @param occupancy Return results only for rooms that have the given frontdesk ocuppancy status. (optional)
     * @param conditions Return results only for rooms that have the given room condition status. (optional)
     * @param maintenances Return results only for rooms that have the given maintenance status. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @return ApiResponse&lt;RoomListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rooms for the hotel based on the set filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no rooms found for the given filtering and pagination criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoomListResponse> roomsGetRoomsWithHttpInfo(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount) throws ApiException {
        okhttp3.Call localVarCall = roomsGetRoomsValidateBeforeCall(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations, skip, top, inlinecount, null);
        Type localVarReturnType = new TypeToken<RoomListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of rooms using the provided filtering and pagination criteria. (asynchronously)
     * Find all rooms for the hotel that match the specified filter criteria. The filtering will be done based on the current state of              the rooms.
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are trying to find rooms for. (required)
     * @param occupancy Return results only for rooms that have the given frontdesk ocuppancy status. (optional)
     * @param conditions Return results only for rooms that have the given room condition status. (optional)
     * @param maintenances Return results only for rooms that have the given maintenance status. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param skip Amount of items to skip. (optional)
     * @param top Amount of items to select. (optional)
     * @param inlinecount Return total number of items for a given filter criteria. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rooms for the hotel based on the set filter criteria. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There are no rooms found for the given filtering and pagination criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsGetRoomsAsync(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, Integer skip, Integer top, String inlinecount, final ApiCallback<RoomListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = roomsGetRoomsValidateBeforeCall(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations, skip, top, inlinecount, _callback);
        Type localVarReturnType = new TypeToken<RoomListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roomsGetRoomsCount
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are counting the rooms for. (required)
     * @param occupancy Return results only for rooms that have the given frontdesk ocuppancy status. (optional)
     * @param conditions Return results only for rooms that have the given room condition status. (optional)
     * @param maintenances Return results only for rooms that have the given maintenance status. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The room count in the hotel matching the given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsGetRoomsCountCall(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rooms/$count"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occupancy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupancy", occupancy));
        }

        if (conditions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "conditions", conditions));
        }

        if (maintenances != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "maintenances", maintenances));
        }

        if (roomTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "roomTypes", roomTypes));
        }

        if (amenities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "amenities", amenities));
        }

        if (views != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "views", views));
        }

        if (locations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "locations", locations));
        }

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roomsGetRoomsCountValidateBeforeCall(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling roomsGetRoomsCount(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling roomsGetRoomsCount(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling roomsGetRoomsCount(Async)");
        }

        return roomsGetRoomsCountCall(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations, _callback);

    }

    /**
     * Get the count of all rooms in the hotel matching the given filter criteria.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are counting the rooms for. (required)
     * @param occupancy Return results only for rooms that have the given frontdesk ocuppancy status. (optional)
     * @param conditions Return results only for rooms that have the given room condition status. (optional)
     * @param maintenances Return results only for rooms that have the given maintenance status. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @return TotalCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The room count in the hotel matching the given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public TotalCountResponse roomsGetRoomsCount(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations) throws ApiException {
        ApiResponse<TotalCountResponse> localVarResp = roomsGetRoomsCountWithHttpInfo(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations);
        return localVarResp.getData();
    }

    /**
     * Get the count of all rooms in the hotel matching the given filter criteria.
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are counting the rooms for. (required)
     * @param occupancy Return results only for rooms that have the given frontdesk ocuppancy status. (optional)
     * @param conditions Return results only for rooms that have the given room condition status. (optional)
     * @param maintenances Return results only for rooms that have the given maintenance status. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @return ApiResponse&lt;TotalCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The room count in the hotel matching the given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TotalCountResponse> roomsGetRoomsCountWithHttpInfo(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations) throws ApiException {
        okhttp3.Call localVarCall = roomsGetRoomsCountValidateBeforeCall(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations, null);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the count of all rooms in the hotel matching the given filter criteria. (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel you are counting the rooms for. (required)
     * @param occupancy Return results only for rooms that have the given frontdesk ocuppancy status. (optional)
     * @param conditions Return results only for rooms that have the given room condition status. (optional)
     * @param maintenances Return results only for rooms that have the given maintenance status. (optional)
     * @param roomTypes Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types. (optional)
     * @param amenities Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes. (optional)
     * @param views Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes. (optional)
     * @param locations Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The room count in the hotel matching the given filter criteria. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI or the requested room could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsGetRoomsCountAsync(String appId, String appKey, Integer hotelId, String occupancy, List<String> conditions, List<String> maintenances, List<String> roomTypes, List<String> amenities, List<String> views, List<String> locations, final ApiCallback<TotalCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = roomsGetRoomsCountValidateBeforeCall(appId, appKey, hotelId, occupancy, conditions, maintenances, roomTypes, amenities, views, locations, _callback);
        Type localVarReturnType = new TypeToken<TotalCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roomsPatchRoom
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the room belongs to. (required)
     * @param roomNumber The room number of the room you would like to update. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsPatchRoomCall(String appId, String appKey, Integer hotelId, String roomNumber, List<OperationRoomPatchRequest> patchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchRequest;

        // create path and map variables
        String localVarPath = "/api/hotel/v0/hotels/{hotelId}/rooms/{roomNumber}"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "roomNumber" + "}", localVarApiClient.escapeString(roomNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("App-Id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("App-Key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roomsPatchRoomValidateBeforeCall(String appId, String appKey, Integer hotelId, String roomNumber, List<OperationRoomPatchRequest> patchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling roomsPatchRoom(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling roomsPatchRoom(Async)");
        }

        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling roomsPatchRoom(Async)");
        }

        // verify the required parameter 'roomNumber' is set
        if (roomNumber == null) {
            throw new ApiException("Missing the required parameter 'roomNumber' when calling roomsPatchRoom(Async)");
        }

        // verify the required parameter 'patchRequest' is set
        if (patchRequest == null) {
            throw new ApiException("Missing the required parameter 'patchRequest' when calling roomsPatchRoom(Async)");
        }

        return roomsPatchRoomCall(appId, appKey, hotelId, roomNumber, patchRequest, _callback);

    }

    /**
     * Partially updates a room.
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to modify condition and housekeeping occupancy status of the room.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/status/condition\&quot;, \&quot;value\&quot;: \&quot;CleanNotInspected\&quot;                }, {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/status/housekeeping_occupancy\&quot;, \&quot;value\&quot;: \&quot;Vacant\&quot;                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the room belongs to. (required)
     * @param roomNumber The room number of the room you would like to update. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public Object roomsPatchRoom(String appId, String appKey, Integer hotelId, String roomNumber, List<OperationRoomPatchRequest> patchRequest) throws ApiException {
        ApiResponse<Object> localVarResp = roomsPatchRoomWithHttpInfo(appId, appKey, hotelId, roomNumber, patchRequest);
        return localVarResp.getData();
    }

    /**
     * Partially updates a room.
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to modify condition and housekeeping occupancy status of the room.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/status/condition\&quot;, \&quot;value\&quot;: \&quot;CleanNotInspected\&quot;                }, {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/status/housekeeping_occupancy\&quot;, \&quot;value\&quot;: \&quot;Vacant\&quot;                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the room belongs to. (required)
     * @param roomNumber The room number of the room you would like to update. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> roomsPatchRoomWithHttpInfo(String appId, String appKey, Integer hotelId, String roomNumber, List<OperationRoomPatchRequest> patchRequest) throws ApiException {
        okhttp3.Call localVarCall = roomsPatchRoomValidateBeforeCall(appId, appKey, hotelId, roomNumber, patchRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially updates a room. (asynchronously)
     * The hetras API is using this &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/patch\&quot; onfocus&#x3D;\&quot;this.blur()\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Patch Specification&lt;/a&gt;              to partially update an existing resource. Currently this call only allows to modify condition and housekeeping occupancy status of the room.              &lt;br /&gt;&lt;br /&gt;              A request example:&lt;br /&gt;&lt;pre&gt;              [                {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/status/condition\&quot;, \&quot;value\&quot;: \&quot;CleanNotInspected\&quot;                }, {                  \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/status/housekeeping_occupancy\&quot;, \&quot;value\&quot;: \&quot;Vacant\&quot;                }              ]              &lt;/pre&gt;&lt;br /&gt;              For more details on how the API responds to errors please check our documentation on               &lt;a href&#x3D;\&quot;https://developer.hetras.com/docs/errors/\&quot; onfocus&#x3D;\&quot;this.blur()\&quot;&gt;Error Handling&lt;/a&gt;.&lt;br /&gt;
     * @param appId Application identifier (required)
     * @param appKey Application key. (required)
     * @param hotelId The hotel id the room belongs to. (required)
     * @param roomNumber The room number of the room you would like to update. (required)
     * @param patchRequest A set of JSON Patch operations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Request body erroneous. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You provided wrong credentials, or you reached your API limit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The application does not have access to the requested resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The server has not found anything matching the Request-URI. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request failed to validate. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> We caught an unexpected error on our side. Please report with providing the Hetras-Tracking-Id from the response headers and we will check the logfiles. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unavailable. Please try later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roomsPatchRoomAsync(String appId, String appKey, Integer hotelId, String roomNumber, List<OperationRoomPatchRequest> patchRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = roomsPatchRoomValidateBeforeCall(appId, appKey, hotelId, roomNumber, patchRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
