/*
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRoomListRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:27.221446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRoomListRequest {
  public static final String SERIALIZED_NAME_AMENITIES = "amenities";
  @SerializedName(SERIALIZED_NAME_AMENITIES)
  private List<String> amenities = new ArrayList<>();

  /**
   * Gets or Sets conditions
   */
  @JsonAdapter(ConditionsEnum.Adapter.class)
  public enum ConditionsEnum {
    CLEAN_NOT_INSPECTED("CleanNotInspected"),
    
    CLEAN("Clean"),
    
    DIRTY("Dirty");

    private String value;

    ConditionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionsEnum fromValue(String value) {
      for (ConditionsEnum b : ConditionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConditionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConditionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<ConditionsEnum> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = new ArrayList<>();

  /**
   * Gets or Sets maintenances
   */
  @JsonAdapter(MaintenancesEnum.Adapter.class)
  public enum MaintenancesEnum {
    NOT_SET("NotSet"),
    
    NONE("None"),
    
    OUT_OF_INVENTORY("OutOfInventory"),
    
    OUT_OF_ORDER("OutOfOrder"),
    
    OUT_OF_SERVICE("OutOfService");

    private String value;

    MaintenancesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaintenancesEnum fromValue(String value) {
      for (MaintenancesEnum b : MaintenancesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaintenancesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaintenancesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaintenancesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaintenancesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaintenancesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAINTENANCES = "maintenances";
  @SerializedName(SERIALIZED_NAME_MAINTENANCES)
  private List<MaintenancesEnum> maintenances = new ArrayList<>();

  /**
   * Return results only for rooms that have the given frontdesk ocuppancy status.
   */
  @JsonAdapter(OccupancyEnum.Adapter.class)
  public enum OccupancyEnum {
    OCCUPIED("Occupied"),
    
    VACANT("Vacant");

    private String value;

    OccupancyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OccupancyEnum fromValue(String value) {
      for (OccupancyEnum b : OccupancyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OccupancyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OccupancyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OccupancyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OccupancyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OccupancyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OCCUPANCY = "occupancy";
  @SerializedName(SERIALIZED_NAME_OCCUPANCY)
  private OccupancyEnum occupancy;

  public static final String SERIALIZED_NAME_ROOM_TYPES = "roomTypes";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private List<String> roomTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<String> views = new ArrayList<>();

  public GetRoomListRequest() {
  }

  public GetRoomListRequest amenities(List<String> amenities) {
    this.amenities = amenities;
    return this;
  }

  public GetRoomListRequest addAmenitiesItem(String amenitiesItem) {
    if (this.amenities == null) {
      this.amenities = new ArrayList<>();
    }
    this.amenities.add(amenitiesItem);
    return this;
  }

  /**
   * Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.
   * @return amenities
   */
  @javax.annotation.Nullable
  public List<String> getAmenities() {
    return amenities;
  }

  public void setAmenities(List<String> amenities) {
    this.amenities = amenities;
  }


  public GetRoomListRequest conditions(List<ConditionsEnum> conditions) {
    this.conditions = conditions;
    return this;
  }

  public GetRoomListRequest addConditionsItem(ConditionsEnum conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Return results only for rooms that have the given room condition status.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<ConditionsEnum> getConditions() {
    return conditions;
  }

  public void setConditions(List<ConditionsEnum> conditions) {
    this.conditions = conditions;
  }


  public GetRoomListRequest locations(List<String> locations) {
    this.locations = locations;
    return this;
  }

  public GetRoomListRequest addLocationsItem(String locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<String> getLocations() {
    return locations;
  }

  public void setLocations(List<String> locations) {
    this.locations = locations;
  }


  public GetRoomListRequest maintenances(List<MaintenancesEnum> maintenances) {
    this.maintenances = maintenances;
    return this;
  }

  public GetRoomListRequest addMaintenancesItem(MaintenancesEnum maintenancesItem) {
    if (this.maintenances == null) {
      this.maintenances = new ArrayList<>();
    }
    this.maintenances.add(maintenancesItem);
    return this;
  }

  /**
   * Return results only for rooms that have the given maintenance status.
   * @return maintenances
   */
  @javax.annotation.Nullable
  public List<MaintenancesEnum> getMaintenances() {
    return maintenances;
  }

  public void setMaintenances(List<MaintenancesEnum> maintenances) {
    this.maintenances = maintenances;
  }


  public GetRoomListRequest occupancy(OccupancyEnum occupancy) {
    this.occupancy = occupancy;
    return this;
  }

  /**
   * Return results only for rooms that have the given frontdesk ocuppancy status.
   * @return occupancy
   */
  @javax.annotation.Nullable
  public OccupancyEnum getOccupancy() {
    return occupancy;
  }

  public void setOccupancy(OccupancyEnum occupancy) {
    this.occupancy = occupancy;
  }


  public GetRoomListRequest roomTypes(List<String> roomTypes) {
    this.roomTypes = roomTypes;
    return this;
  }

  public GetRoomListRequest addRoomTypesItem(String roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new ArrayList<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

  /**
   * Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
   * @return roomTypes
   */
  @javax.annotation.Nullable
  public List<String> getRoomTypes() {
    return roomTypes;
  }

  public void setRoomTypes(List<String> roomTypes) {
    this.roomTypes = roomTypes;
  }


  public GetRoomListRequest views(List<String> views) {
    this.views = views;
    return this;
  }

  public GetRoomListRequest addViewsItem(String viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

  /**
   * Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.
   * @return views
   */
  @javax.annotation.Nullable
  public List<String> getViews() {
    return views;
  }

  public void setViews(List<String> views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRoomListRequest getRoomListRequest = (GetRoomListRequest) o;
    return Objects.equals(this.amenities, getRoomListRequest.amenities) &&
        Objects.equals(this.conditions, getRoomListRequest.conditions) &&
        Objects.equals(this.locations, getRoomListRequest.locations) &&
        Objects.equals(this.maintenances, getRoomListRequest.maintenances) &&
        Objects.equals(this.occupancy, getRoomListRequest.occupancy) &&
        Objects.equals(this.roomTypes, getRoomListRequest.roomTypes) &&
        Objects.equals(this.views, getRoomListRequest.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amenities, conditions, locations, maintenances, occupancy, roomTypes, views);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRoomListRequest {\n");
    sb.append("    amenities: ").append(toIndentedString(amenities)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    maintenances: ").append(toIndentedString(maintenances)).append("\n");
    sb.append("    occupancy: ").append(toIndentedString(occupancy)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amenities");
    openapiFields.add("conditions");
    openapiFields.add("locations");
    openapiFields.add("maintenances");
    openapiFields.add("occupancy");
    openapiFields.add("roomTypes");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRoomListRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRoomListRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRoomListRequest is not found in the empty JSON string", GetRoomListRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRoomListRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRoomListRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("amenities") != null && !jsonObj.get("amenities").isJsonNull() && !jsonObj.get("amenities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amenities` to be an array in the JSON string but got `%s`", jsonObj.get("amenities").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull() && !jsonObj.get("conditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull() && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("maintenances") != null && !jsonObj.get("maintenances").isJsonNull() && !jsonObj.get("maintenances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `maintenances` to be an array in the JSON string but got `%s`", jsonObj.get("maintenances").toString()));
      }
      if ((jsonObj.get("occupancy") != null && !jsonObj.get("occupancy").isJsonNull()) && !jsonObj.get("occupancy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupancy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupancy").toString()));
      }
      // validate the optional field `occupancy`
      if (jsonObj.get("occupancy") != null && !jsonObj.get("occupancy").isJsonNull()) {
        OccupancyEnum.validateJsonElement(jsonObj.get("occupancy"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roomTypes") != null && !jsonObj.get("roomTypes").isJsonNull() && !jsonObj.get("roomTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypes` to be an array in the JSON string but got `%s`", jsonObj.get("roomTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull() && !jsonObj.get("views").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRoomListRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRoomListRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRoomListRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRoomListRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRoomListRequest>() {
           @Override
           public void write(JsonWriter out, GetRoomListRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRoomListRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRoomListRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRoomListRequest
   * @throws IOException if the JSON string is invalid with respect to GetRoomListRequest
   */
  public static GetRoomListRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRoomListRequest.class);
  }

  /**
   * Convert an instance of GetRoomListRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

