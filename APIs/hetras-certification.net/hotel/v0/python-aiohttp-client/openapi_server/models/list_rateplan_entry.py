# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_control_info import AccessControlInfo
from openapi_server.models.date_period import DatePeriod
from openapi_server.models.embedded_room_type_simple import EmbeddedRoomTypeSimple
from openapi_server.models.link_object import LinkObject
from openapi_server import util


class ListRateplanEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, LinkObject]=None, access_control: List[AccessControlInfo]=None, active: bool=None, active_periods: List[DatePeriod]=None, base_rateplan: str=None, booking_periods: List[DatePeriod]=None, code: str=None, commissionable: bool=None, created: datetime=None, day_use: bool=None, derived_rateplans: List[str]=None, description: str=None, group: str=None, included_services: List[str]=None, is_yieldable: bool=None, market_code: str=None, name: str=None, room_types: List[EmbeddedRoomTypeSimple]=None, suspended: bool=None, updated: datetime=None, visibility: str=None):
        """ListRateplanEntry - a model defined in OpenAPI

        :param links: The links of this ListRateplanEntry.
        :param access_control: The access_control of this ListRateplanEntry.
        :param active: The active of this ListRateplanEntry.
        :param active_periods: The active_periods of this ListRateplanEntry.
        :param base_rateplan: The base_rateplan of this ListRateplanEntry.
        :param booking_periods: The booking_periods of this ListRateplanEntry.
        :param code: The code of this ListRateplanEntry.
        :param commissionable: The commissionable of this ListRateplanEntry.
        :param created: The created of this ListRateplanEntry.
        :param day_use: The day_use of this ListRateplanEntry.
        :param derived_rateplans: The derived_rateplans of this ListRateplanEntry.
        :param description: The description of this ListRateplanEntry.
        :param group: The group of this ListRateplanEntry.
        :param included_services: The included_services of this ListRateplanEntry.
        :param is_yieldable: The is_yieldable of this ListRateplanEntry.
        :param market_code: The market_code of this ListRateplanEntry.
        :param name: The name of this ListRateplanEntry.
        :param room_types: The room_types of this ListRateplanEntry.
        :param suspended: The suspended of this ListRateplanEntry.
        :param updated: The updated of this ListRateplanEntry.
        :param visibility: The visibility of this ListRateplanEntry.
        """
        self.openapi_types = {
            'links': Dict[str, LinkObject],
            'access_control': List[AccessControlInfo],
            'active': bool,
            'active_periods': List[DatePeriod],
            'base_rateplan': str,
            'booking_periods': List[DatePeriod],
            'code': str,
            'commissionable': bool,
            'created': datetime,
            'day_use': bool,
            'derived_rateplans': List[str],
            'description': str,
            'group': str,
            'included_services': List[str],
            'is_yieldable': bool,
            'market_code': str,
            'name': str,
            'room_types': List[EmbeddedRoomTypeSimple],
            'suspended': bool,
            'updated': datetime,
            'visibility': str
        }

        self.attribute_map = {
            'links': '_links',
            'access_control': 'access_control',
            'active': 'active',
            'active_periods': 'active_periods',
            'base_rateplan': 'base_rateplan',
            'booking_periods': 'booking_periods',
            'code': 'code',
            'commissionable': 'commissionable',
            'created': 'created',
            'day_use': 'day_use',
            'derived_rateplans': 'derived_rateplans',
            'description': 'description',
            'group': 'group',
            'included_services': 'included_services',
            'is_yieldable': 'is_yieldable',
            'market_code': 'market_code',
            'name': 'name',
            'room_types': 'room_types',
            'suspended': 'suspended',
            'updated': 'updated',
            'visibility': 'visibility'
        }

        self._links = links
        self._access_control = access_control
        self._active = active
        self._active_periods = active_periods
        self._base_rateplan = base_rateplan
        self._booking_periods = booking_periods
        self._code = code
        self._commissionable = commissionable
        self._created = created
        self._day_use = day_use
        self._derived_rateplans = derived_rateplans
        self._description = description
        self._group = group
        self._included_services = included_services
        self._is_yieldable = is_yieldable
        self._market_code = market_code
        self._name = name
        self._room_types = room_types
        self._suspended = suspended
        self._updated = updated
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRateplanEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRateplanEntry of this ListRateplanEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ListRateplanEntry.

        Collection of links to related resources

        :return: The links of this ListRateplanEntry.
        :rtype: Dict[str, LinkObject]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ListRateplanEntry.

        Collection of links to related resources

        :param links: The links of this ListRateplanEntry.
        :type links: Dict[str, LinkObject]
        """

        self._links = links

    @property
    def access_control(self):
        """Gets the access_control of this ListRateplanEntry.

        List of distribution channel groups and channels the rateplan is sold through

        :return: The access_control of this ListRateplanEntry.
        :rtype: List[AccessControlInfo]
        """
        return self._access_control

    @access_control.setter
    def access_control(self, access_control):
        """Sets the access_control of this ListRateplanEntry.

        List of distribution channel groups and channels the rateplan is sold through

        :param access_control: The access_control of this ListRateplanEntry.
        :type access_control: List[AccessControlInfo]
        """

        self._access_control = access_control

    @property
    def active(self):
        """Gets the active of this ListRateplanEntry.

        Defines if the rateplan has been ended and is expired

        :return: The active of this ListRateplanEntry.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ListRateplanEntry.

        Defines if the rateplan has been ended and is expired

        :param active: The active of this ListRateplanEntry.
        :type active: bool
        """

        self._active = active

    @property
    def active_periods(self):
        """Gets the active_periods of this ListRateplanEntry.

        List of active periods. Arrival and departure day for reservations based on this rateplan need to              fit into one of these time periods

        :return: The active_periods of this ListRateplanEntry.
        :rtype: List[DatePeriod]
        """
        return self._active_periods

    @active_periods.setter
    def active_periods(self, active_periods):
        """Sets the active_periods of this ListRateplanEntry.

        List of active periods. Arrival and departure day for reservations based on this rateplan need to              fit into one of these time periods

        :param active_periods: The active_periods of this ListRateplanEntry.
        :type active_periods: List[DatePeriod]
        """

        self._active_periods = active_periods

    @property
    def base_rateplan(self):
        """Gets the base_rateplan of this ListRateplanEntry.

        Code of the base rateplan if this rateplan is derived

        :return: The base_rateplan of this ListRateplanEntry.
        :rtype: str
        """
        return self._base_rateplan

    @base_rateplan.setter
    def base_rateplan(self, base_rateplan):
        """Sets the base_rateplan of this ListRateplanEntry.

        Code of the base rateplan if this rateplan is derived

        :param base_rateplan: The base_rateplan of this ListRateplanEntry.
        :type base_rateplan: str
        """

        self._base_rateplan = base_rateplan

    @property
    def booking_periods(self):
        """Gets the booking_periods of this ListRateplanEntry.

        List of booking periods. During these time periods the rateplan is sold

        :return: The booking_periods of this ListRateplanEntry.
        :rtype: List[DatePeriod]
        """
        return self._booking_periods

    @booking_periods.setter
    def booking_periods(self, booking_periods):
        """Sets the booking_periods of this ListRateplanEntry.

        List of booking periods. During these time periods the rateplan is sold

        :param booking_periods: The booking_periods of this ListRateplanEntry.
        :type booking_periods: List[DatePeriod]
        """

        self._booking_periods = booking_periods

    @property
    def code(self):
        """Gets the code of this ListRateplanEntry.

        Code of the rateplan

        :return: The code of this ListRateplanEntry.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ListRateplanEntry.

        Code of the rateplan

        :param code: The code of this ListRateplanEntry.
        :type code: str
        """

        self._code = code

    @property
    def commissionable(self):
        """Gets the commissionable of this ListRateplanEntry.

        Defines if this rateplan is setup with a commission

        :return: The commissionable of this ListRateplanEntry.
        :rtype: bool
        """
        return self._commissionable

    @commissionable.setter
    def commissionable(self, commissionable):
        """Sets the commissionable of this ListRateplanEntry.

        Defines if this rateplan is setup with a commission

        :param commissionable: The commissionable of this ListRateplanEntry.
        :type commissionable: bool
        """

        self._commissionable = commissionable

    @property
    def created(self):
        """Gets the created of this ListRateplanEntry.

        Timestamp the rateplan was created

        :return: The created of this ListRateplanEntry.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ListRateplanEntry.

        Timestamp the rateplan was created

        :param created: The created of this ListRateplanEntry.
        :type created: datetime
        """

        self._created = created

    @property
    def day_use(self):
        """Gets the day_use of this ListRateplanEntry.

        Defines if this rateplan is used for day use reservations

        :return: The day_use of this ListRateplanEntry.
        :rtype: bool
        """
        return self._day_use

    @day_use.setter
    def day_use(self, day_use):
        """Sets the day_use of this ListRateplanEntry.

        Defines if this rateplan is used for day use reservations

        :param day_use: The day_use of this ListRateplanEntry.
        :type day_use: bool
        """

        self._day_use = day_use

    @property
    def derived_rateplans(self):
        """Gets the derived_rateplans of this ListRateplanEntry.

        List of codes for all derived rateplans if any

        :return: The derived_rateplans of this ListRateplanEntry.
        :rtype: List[str]
        """
        return self._derived_rateplans

    @derived_rateplans.setter
    def derived_rateplans(self, derived_rateplans):
        """Sets the derived_rateplans of this ListRateplanEntry.

        List of codes for all derived rateplans if any

        :param derived_rateplans: The derived_rateplans of this ListRateplanEntry.
        :type derived_rateplans: List[str]
        """

        self._derived_rateplans = derived_rateplans

    @property
    def description(self):
        """Gets the description of this ListRateplanEntry.

        Description of the rateplan

        :return: The description of this ListRateplanEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ListRateplanEntry.

        Description of the rateplan

        :param description: The description of this ListRateplanEntry.
        :type description: str
        """

        self._description = description

    @property
    def group(self):
        """Gets the group of this ListRateplanEntry.

        Code of the rateplan group

        :return: The group of this ListRateplanEntry.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ListRateplanEntry.

        Code of the rateplan group

        :param group: The group of this ListRateplanEntry.
        :type group: str
        """

        self._group = group

    @property
    def included_services(self):
        """Gets the included_services of this ListRateplanEntry.

        List of codes for the included services sold with this rateplan

        :return: The included_services of this ListRateplanEntry.
        :rtype: List[str]
        """
        return self._included_services

    @included_services.setter
    def included_services(self, included_services):
        """Sets the included_services of this ListRateplanEntry.

        List of codes for the included services sold with this rateplan

        :param included_services: The included_services of this ListRateplanEntry.
        :type included_services: List[str]
        """

        self._included_services = included_services

    @property
    def is_yieldable(self):
        """Gets the is_yieldable of this ListRateplanEntry.

        Gives the information if this rateplan is Yieldable rateplan

        :return: The is_yieldable of this ListRateplanEntry.
        :rtype: bool
        """
        return self._is_yieldable

    @is_yieldable.setter
    def is_yieldable(self, is_yieldable):
        """Sets the is_yieldable of this ListRateplanEntry.

        Gives the information if this rateplan is Yieldable rateplan

        :param is_yieldable: The is_yieldable of this ListRateplanEntry.
        :type is_yieldable: bool
        """

        self._is_yieldable = is_yieldable

    @property
    def market_code(self):
        """Gets the market_code of this ListRateplanEntry.

        The code of the market segment the rate plan is linked to

        :return: The market_code of this ListRateplanEntry.
        :rtype: str
        """
        return self._market_code

    @market_code.setter
    def market_code(self, market_code):
        """Sets the market_code of this ListRateplanEntry.

        The code of the market segment the rate plan is linked to

        :param market_code: The market_code of this ListRateplanEntry.
        :type market_code: str
        """

        self._market_code = market_code

    @property
    def name(self):
        """Gets the name of this ListRateplanEntry.

        Name of the rateplan

        :return: The name of this ListRateplanEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListRateplanEntry.

        Name of the rateplan

        :param name: The name of this ListRateplanEntry.
        :type name: str
        """

        self._name = name

    @property
    def room_types(self):
        """Gets the room_types of this ListRateplanEntry.

        List of all room types sold through this rateplan

        :return: The room_types of this ListRateplanEntry.
        :rtype: List[EmbeddedRoomTypeSimple]
        """
        return self._room_types

    @room_types.setter
    def room_types(self, room_types):
        """Sets the room_types of this ListRateplanEntry.

        List of all room types sold through this rateplan

        :param room_types: The room_types of this ListRateplanEntry.
        :type room_types: List[EmbeddedRoomTypeSimple]
        """

        self._room_types = room_types

    @property
    def suspended(self):
        """Gets the suspended of this ListRateplanEntry.

        Defines if a rateplan is suspended and no new reservations can be created for this              rateplan at the moment

        :return: The suspended of this ListRateplanEntry.
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this ListRateplanEntry.

        Defines if a rateplan is suspended and no new reservations can be created for this              rateplan at the moment

        :param suspended: The suspended of this ListRateplanEntry.
        :type suspended: bool
        """

        self._suspended = suspended

    @property
    def updated(self):
        """Gets the updated of this ListRateplanEntry.

        Timestamp of when the rateplan was changed the last time

        :return: The updated of this ListRateplanEntry.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ListRateplanEntry.

        Timestamp of when the rateplan was changed the last time

        :param updated: The updated of this ListRateplanEntry.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def visibility(self):
        """Gets the visibility of this ListRateplanEntry.

        Defines if this rateplan is visible to the public or only for specific customers

        :return: The visibility of this ListRateplanEntry.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this ListRateplanEntry.

        Defines if this rateplan is visible to the public or only for specific customers

        :param visibility: The visibility of this ListRateplanEntry.
        :type visibility: str
        """
        allowed_values = ["Public", "Negotiated"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
