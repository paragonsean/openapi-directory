# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinkObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecation: str=None, href: str=None, hreflang: str=None, name: str=None, profile: str=None, templated: bool=None, title: str=None, type: str=None):
        """LinkObject - a model defined in OpenAPI

        :param deprecation: The deprecation of this LinkObject.
        :param href: The href of this LinkObject.
        :param hreflang: The hreflang of this LinkObject.
        :param name: The name of this LinkObject.
        :param profile: The profile of this LinkObject.
        :param templated: The templated of this LinkObject.
        :param title: The title of this LinkObject.
        :param type: The type of this LinkObject.
        """
        self.openapi_types = {
            'deprecation': str,
            'href': str,
            'hreflang': str,
            'name': str,
            'profile': str,
            'templated': bool,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'deprecation': 'deprecation',
            'href': 'href',
            'hreflang': 'hreflang',
            'name': 'name',
            'profile': 'profile',
            'templated': 'templated',
            'title': 'title',
            'type': 'type'
        }

        self._deprecation = deprecation
        self._href = href
        self._hreflang = hreflang
        self._name = name
        self._profile = profile
        self._templated = templated
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkObject of this LinkObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecation(self):
        """Gets the deprecation of this LinkObject.

        <para>The \"deprecation\" property is OPTIONAL.</para>  <para> </para>  <para>Its presence indicates that the link is to be deprecated (i.e.              removed) at a future date.  Its value is a URL that SHOULD provide              further information about the deprecation.              A client SHOULD provide some notification (for example, by logging a              warning message) whenever it traverses over a link that has this              property.  The notification SHOULD include the deprecation property's              value so that a client maintainer can easily find information about              the deprecation.</para>

        :return: The deprecation of this LinkObject.
        :rtype: str
        """
        return self._deprecation

    @deprecation.setter
    def deprecation(self, deprecation):
        """Sets the deprecation of this LinkObject.

        <para>The \"deprecation\" property is OPTIONAL.</para>  <para> </para>  <para>Its presence indicates that the link is to be deprecated (i.e.              removed) at a future date.  Its value is a URL that SHOULD provide              further information about the deprecation.              A client SHOULD provide some notification (for example, by logging a              warning message) whenever it traverses over a link that has this              property.  The notification SHOULD include the deprecation property's              value so that a client maintainer can easily find information about              the deprecation.</para>

        :param deprecation: The deprecation of this LinkObject.
        :type deprecation: str
        """

        self._deprecation = deprecation

    @property
    def href(self):
        """Gets the href of this LinkObject.

        <para>The \"href\" property is REQUIRED.</para>  <para> </para>  <para>Its value is either a URI [RFC3986] or a URI Template [RFC6570].              If the value is a URI Template then the Link Object SHOULD have a              \"templated\" attribute whose value is true.</para>

        :return: The href of this LinkObject.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this LinkObject.

        <para>The \"href\" property is REQUIRED.</para>  <para> </para>  <para>Its value is either a URI [RFC3986] or a URI Template [RFC6570].              If the value is a URI Template then the Link Object SHOULD have a              \"templated\" attribute whose value is true.</para>

        :param href: The href of this LinkObject.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def hreflang(self):
        """Gets the hreflang of this LinkObject.

        <para>The \"hreflang\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string and is intended for indicating the language of              the target resource (as defined by [RFC5988]).</para>

        :return: The hreflang of this LinkObject.
        :rtype: str
        """
        return self._hreflang

    @hreflang.setter
    def hreflang(self, hreflang):
        """Sets the hreflang of this LinkObject.

        <para>The \"hreflang\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string and is intended for indicating the language of              the target resource (as defined by [RFC5988]).</para>

        :param hreflang: The hreflang of this LinkObject.
        :type hreflang: str
        """

        self._hreflang = hreflang

    @property
    def name(self):
        """Gets the name of this LinkObject.

        <para>The \"name\" property is OPTIONAL.</para>  <para> </para>  <para>Its value MAY be used as a secondary key for selecting Link Objects              which share the same relation type.</para>

        :return: The name of this LinkObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LinkObject.

        <para>The \"name\" property is OPTIONAL.</para>  <para> </para>  <para>Its value MAY be used as a secondary key for selecting Link Objects              which share the same relation type.</para>

        :param name: The name of this LinkObject.
        :type name: str
        """

        self._name = name

    @property
    def profile(self):
        """Gets the profile of this LinkObject.

        <para>The \"profile\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string which is a URI that hints about the profile.</para>

        :return: The profile of this LinkObject.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this LinkObject.

        <para>The \"profile\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string which is a URI that hints about the profile.</para>

        :param profile: The profile of this LinkObject.
        :type profile: str
        """

        self._profile = profile

    @property
    def templated(self):
        """Gets the templated of this LinkObject.

        <para>The \"templated\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is boolean and SHOULD be true when the Link Object's \"href\"              property is a URI Template.              Its value SHOULD be considered false if it is undefined or any other              value than true.</para>

        :return: The templated of this LinkObject.
        :rtype: bool
        """
        return self._templated

    @templated.setter
    def templated(self, templated):
        """Sets the templated of this LinkObject.

        <para>The \"templated\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is boolean and SHOULD be true when the Link Object's \"href\"              property is a URI Template.              Its value SHOULD be considered false if it is undefined or any other              value than true.</para>

        :param templated: The templated of this LinkObject.
        :type templated: bool
        """

        self._templated = templated

    @property
    def title(self):
        """Gets the title of this LinkObject.

        <para>The \"title\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string and is intended for labelling the link with a              human-readable identifier (as defined by [RFC5988]).</para>

        :return: The title of this LinkObject.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LinkObject.

        <para>The \"title\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string and is intended for labelling the link with a              human-readable identifier (as defined by [RFC5988]).</para>

        :param title: The title of this LinkObject.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this LinkObject.

        <para>The \"type\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string used as a hint to indicate the media type              expected when dereferencing the target resource.</para>

        :return: The type of this LinkObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LinkObject.

        <para>The \"type\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string used as a hint to indicate the media type              expected when dereferencing the target resource.</para>

        :param type: The type of this LinkObject.
        :type type: str
        """

        self._type = type
