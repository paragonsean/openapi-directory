# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRatesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expand: str=None, _from: datetime=None, to: datetime=None):
        """GetRatesRequest - a model defined in OpenAPI

        :param expand: The expand of this GetRatesRequest.
        :param _from: The _from of this GetRatesRequest.
        :param to: The to of this GetRatesRequest.
        """
        self.openapi_types = {
            'expand': str,
            '_from': datetime,
            'to': datetime
        }

        self.attribute_map = {
            'expand': 'Expand',
            '_from': 'From',
            'to': 'To'
        }

        self._expand = expand
        self.__from = _from
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRatesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRatesRequest of this GetRatesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expand(self):
        """Gets the expand of this GetRatesRequest.

        You can expand the supplements per room type on demand. By default they are not shown.

        :return: The expand of this GetRatesRequest.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this GetRatesRequest.

        You can expand the supplements per room type on demand. By default they are not shown.

        :param expand: The expand of this GetRatesRequest.
        :type expand: str
        """
        allowed_values = ["RoomTypeSupplements"]  # noqa: E501
        if expand not in allowed_values:
            raise ValueError(
                "Invalid value for `expand` ({0}), must be one of {1}"
                .format(expand, allowed_values)
            )

        self._expand = expand

    @property
    def _from(self):
        """Gets the _from of this GetRatesRequest.

        Defines the last business day you would like to get rates for. The maximum time span between <i>from</i>´and <i>to</i>              is limited to 365 days.

        :return: The _from of this GetRatesRequest.
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this GetRatesRequest.

        Defines the last business day you would like to get rates for. The maximum time span between <i>from</i>´and <i>to</i>              is limited to 365 days.

        :param _from: The _from of this GetRatesRequest.
        :type _from: datetime
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this GetRatesRequest.

        Defines the first business day you would like to get rates for.

        :return: The to of this GetRatesRequest.
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this GetRatesRequest.

        Defines the first business day you would like to get rates for.

        :param to: The to of this GetRatesRequest.
        :type to: datetime
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
