# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_object import LinkObject
from openapi_server import util


class CodeBaseEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, LinkObject]=None, code: str=None, default: bool=None, id: str=None, name: str=None, type: str=None):
        """CodeBaseEntry - a model defined in OpenAPI

        :param links: The links of this CodeBaseEntry.
        :param code: The code of this CodeBaseEntry.
        :param default: The default of this CodeBaseEntry.
        :param id: The id of this CodeBaseEntry.
        :param name: The name of this CodeBaseEntry.
        :param type: The type of this CodeBaseEntry.
        """
        self.openapi_types = {
            'links': Dict[str, LinkObject],
            'code': str,
            'default': bool,
            'id': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'links': '_links',
            'code': 'code',
            'default': 'default',
            'id': 'id',
            'name': 'name',
            'type': 'type'
        }

        self._links = links
        self._code = code
        self._default = default
        self._id = id
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeBaseEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeBaseEntry of this CodeBaseEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CodeBaseEntry.

        Collection of links to related resources

        :return: The links of this CodeBaseEntry.
        :rtype: Dict[str, LinkObject]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CodeBaseEntry.

        Collection of links to related resources

        :param links: The links of this CodeBaseEntry.
        :type links: Dict[str, LinkObject]
        """

        self._links = links

    @property
    def code(self):
        """Gets the code of this CodeBaseEntry.

        The code value. This value you will see in reservations as market code and in other              resources like the revenue buckets in transactions

        :return: The code of this CodeBaseEntry.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CodeBaseEntry.

        The code value. This value you will see in reservations as market code and in other              resources like the revenue buckets in transactions

        :param code: The code of this CodeBaseEntry.
        :type code: str
        """

        self._code = code

    @property
    def default(self):
        """Gets the default of this CodeBaseEntry.

        This attribute tells you if this code is the default code for the specific type or not.              Not all the types of codes need to have a default code

        :return: The default of this CodeBaseEntry.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CodeBaseEntry.

        This attribute tells you if this code is the default code for the specific type or not.              Not all the types of codes need to have a default code

        :param default: The default of this CodeBaseEntry.
        :type default: bool
        """

        self._default = default

    @property
    def id(self):
        """Gets the id of this CodeBaseEntry.

        The id of the code

        :return: The id of this CodeBaseEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodeBaseEntry.

        The id of the code

        :param id: The id of this CodeBaseEntry.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodeBaseEntry.

        The name of the code that usually is more human readable

        :return: The name of this CodeBaseEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodeBaseEntry.

        The name of the code that usually is more human readable

        :param name: The name of this CodeBaseEntry.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this CodeBaseEntry.

        The type or category of the code

        :return: The type of this CodeBaseEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodeBaseEntry.

        The type or category of the code

        :param type: The type of this CodeBaseEntry.
        :type type: str
        """
        allowed_values = ["GuestRequest", "RequestDietary", "VIPStatus", "ReasonForRateChange", "Regrets", "MarketSegments", "SourceOfBusiness", "LoyaltyProgram", "CancellationReason", "AccountType", "AccountRank", "VIPLevel", "Title", "ContactFunction", "Territory", "CorrespondenceType", "ExternalProgramType", "RevenueBucket", "AdditionalRevenueBucket", "AdditionalStatisticsBuckets", "MealPeriod", "BillingCycle", "ReminderCycle", "MajorMarketSegments", "DocumentType", "ActivityType", "ReservationLabels"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
