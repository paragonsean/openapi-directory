# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_room_type import EmbeddedRoomType
from openapi_server.models.link_object import LinkObject
from openapi_server.models.room_status import RoomStatus
from openapi_server import util


class EmbeddedRoomWithStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, LinkObject]=None, created: datetime=None, description: str=None, name: str=None, number: str=None, room_type: EmbeddedRoomType=None, status: RoomStatus=None, updated: datetime=None):
        """EmbeddedRoomWithStatus - a model defined in OpenAPI

        :param links: The links of this EmbeddedRoomWithStatus.
        :param created: The created of this EmbeddedRoomWithStatus.
        :param description: The description of this EmbeddedRoomWithStatus.
        :param name: The name of this EmbeddedRoomWithStatus.
        :param number: The number of this EmbeddedRoomWithStatus.
        :param room_type: The room_type of this EmbeddedRoomWithStatus.
        :param status: The status of this EmbeddedRoomWithStatus.
        :param updated: The updated of this EmbeddedRoomWithStatus.
        """
        self.openapi_types = {
            'links': Dict[str, LinkObject],
            'created': datetime,
            'description': str,
            'name': str,
            'number': str,
            'room_type': EmbeddedRoomType,
            'status': RoomStatus,
            'updated': datetime
        }

        self.attribute_map = {
            'links': '_links',
            'created': 'created',
            'description': 'description',
            'name': 'name',
            'number': 'number',
            'room_type': 'room_type',
            'status': 'status',
            'updated': 'updated'
        }

        self._links = links
        self._created = created
        self._description = description
        self._name = name
        self._number = number
        self._room_type = room_type
        self._status = status
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbeddedRoomWithStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmbeddedRoomWithStatus of this EmbeddedRoomWithStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this EmbeddedRoomWithStatus.

        Collection of links to related resources

        :return: The links of this EmbeddedRoomWithStatus.
        :rtype: Dict[str, LinkObject]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EmbeddedRoomWithStatus.

        Collection of links to related resources

        :param links: The links of this EmbeddedRoomWithStatus.
        :type links: Dict[str, LinkObject]
        """

        self._links = links

    @property
    def created(self):
        """Gets the created of this EmbeddedRoomWithStatus.

        Timestamp the room was created

        :return: The created of this EmbeddedRoomWithStatus.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EmbeddedRoomWithStatus.

        Timestamp the room was created

        :param created: The created of this EmbeddedRoomWithStatus.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this EmbeddedRoomWithStatus.

        Description of the room

        :return: The description of this EmbeddedRoomWithStatus.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EmbeddedRoomWithStatus.

        Description of the room

        :param description: The description of this EmbeddedRoomWithStatus.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this EmbeddedRoomWithStatus.

        Name of the room

        :return: The name of this EmbeddedRoomWithStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmbeddedRoomWithStatus.

        Name of the room

        :param name: The name of this EmbeddedRoomWithStatus.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this EmbeddedRoomWithStatus.

        Number of the room

        :return: The number of this EmbeddedRoomWithStatus.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this EmbeddedRoomWithStatus.

        Number of the room

        :param number: The number of this EmbeddedRoomWithStatus.
        :type number: str
        """

        self._number = number

    @property
    def room_type(self):
        """Gets the room_type of this EmbeddedRoomWithStatus.


        :return: The room_type of this EmbeddedRoomWithStatus.
        :rtype: EmbeddedRoomType
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """Sets the room_type of this EmbeddedRoomWithStatus.


        :param room_type: The room_type of this EmbeddedRoomWithStatus.
        :type room_type: EmbeddedRoomType
        """

        self._room_type = room_type

    @property
    def status(self):
        """Gets the status of this EmbeddedRoomWithStatus.


        :return: The status of this EmbeddedRoomWithStatus.
        :rtype: RoomStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EmbeddedRoomWithStatus.


        :param status: The status of this EmbeddedRoomWithStatus.
        :type status: RoomStatus
        """

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this EmbeddedRoomWithStatus.

        Timestamp of when the room was changed the last time

        :return: The updated of this EmbeddedRoomWithStatus.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this EmbeddedRoomWithStatus.

        Timestamp of when the room was changed the last time

        :param updated: The updated of this EmbeddedRoomWithStatus.
        :type updated: datetime
        """

        self._updated = updated
