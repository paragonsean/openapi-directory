# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_reservation import EmbeddedReservation
from openapi_server.models.embedded_room_type import EmbeddedRoomType
from openapi_server.models.room_bedding import RoomBedding
from openapi_server.models.room_status import RoomStatus
from openapi_server.models.simple_attribute import SimpleAttribute
from openapi_server import util


class Room(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amenities: List[SimpleAttribute]=None, beddings: List[RoomBedding]=None, created: datetime=None, description: str=None, expected_occupancy: int=None, extra_bed_allowed: bool=None, floor: int=None, locations: List[SimpleAttribute]=None, max_persons: int=None, min_persons: int=None, name: str=None, number: str=None, reservations: List[EmbeddedReservation]=None, room_type: EmbeddedRoomType=None, status: RoomStatus=None, updated: datetime=None, views: List[SimpleAttribute]=None):
        """Room - a model defined in OpenAPI

        :param amenities: The amenities of this Room.
        :param beddings: The beddings of this Room.
        :param created: The created of this Room.
        :param description: The description of this Room.
        :param expected_occupancy: The expected_occupancy of this Room.
        :param extra_bed_allowed: The extra_bed_allowed of this Room.
        :param floor: The floor of this Room.
        :param locations: The locations of this Room.
        :param max_persons: The max_persons of this Room.
        :param min_persons: The min_persons of this Room.
        :param name: The name of this Room.
        :param number: The number of this Room.
        :param reservations: The reservations of this Room.
        :param room_type: The room_type of this Room.
        :param status: The status of this Room.
        :param updated: The updated of this Room.
        :param views: The views of this Room.
        """
        self.openapi_types = {
            'amenities': List[SimpleAttribute],
            'beddings': List[RoomBedding],
            'created': datetime,
            'description': str,
            'expected_occupancy': int,
            'extra_bed_allowed': bool,
            'floor': int,
            'locations': List[SimpleAttribute],
            'max_persons': int,
            'min_persons': int,
            'name': str,
            'number': str,
            'reservations': List[EmbeddedReservation],
            'room_type': EmbeddedRoomType,
            'status': RoomStatus,
            'updated': datetime,
            'views': List[SimpleAttribute]
        }

        self.attribute_map = {
            'amenities': 'amenities',
            'beddings': 'beddings',
            'created': 'created',
            'description': 'description',
            'expected_occupancy': 'expected_occupancy',
            'extra_bed_allowed': 'extra_bed_allowed',
            'floor': 'floor',
            'locations': 'locations',
            'max_persons': 'max_persons',
            'min_persons': 'min_persons',
            'name': 'name',
            'number': 'number',
            'reservations': 'reservations',
            'room_type': 'room_type',
            'status': 'status',
            'updated': 'updated',
            'views': 'views'
        }

        self._amenities = amenities
        self._beddings = beddings
        self._created = created
        self._description = description
        self._expected_occupancy = expected_occupancy
        self._extra_bed_allowed = extra_bed_allowed
        self._floor = floor
        self._locations = locations
        self._max_persons = max_persons
        self._min_persons = min_persons
        self._name = name
        self._number = number
        self._reservations = reservations
        self._room_type = room_type
        self._status = status
        self._updated = updated
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Room':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Room of this Room.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amenities(self):
        """Gets the amenities of this Room.

        List of amenities for the room

        :return: The amenities of this Room.
        :rtype: List[SimpleAttribute]
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this Room.

        List of amenities for the room

        :param amenities: The amenities of this Room.
        :type amenities: List[SimpleAttribute]
        """

        self._amenities = amenities

    @property
    def beddings(self):
        """Gets the beddings of this Room.

        Provides information about available beds in the room

        :return: The beddings of this Room.
        :rtype: List[RoomBedding]
        """
        return self._beddings

    @beddings.setter
    def beddings(self, beddings):
        """Sets the beddings of this Room.

        Provides information about available beds in the room

        :param beddings: The beddings of this Room.
        :type beddings: List[RoomBedding]
        """

        self._beddings = beddings

    @property
    def created(self):
        """Gets the created of this Room.

        Timestamp the room was created

        :return: The created of this Room.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Room.

        Timestamp the room was created

        :param created: The created of this Room.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Room.

        Description of the room

        :return: The description of this Room.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Room.

        Description of the room

        :param description: The description of this Room.
        :type description: str
        """

        self._description = description

    @property
    def expected_occupancy(self):
        """Gets the expected_occupancy of this Room.

        The common amount of persons for the room

        :return: The expected_occupancy of this Room.
        :rtype: int
        """
        return self._expected_occupancy

    @expected_occupancy.setter
    def expected_occupancy(self, expected_occupancy):
        """Sets the expected_occupancy of this Room.

        The common amount of persons for the room

        :param expected_occupancy: The expected_occupancy of this Room.
        :type expected_occupancy: int
        """
        if expected_occupancy is None:
            raise ValueError("Invalid value for `expected_occupancy`, must not be `None`")

        self._expected_occupancy = expected_occupancy

    @property
    def extra_bed_allowed(self):
        """Gets the extra_bed_allowed of this Room.

        Is there an extra bed allowed in the room

        :return: The extra_bed_allowed of this Room.
        :rtype: bool
        """
        return self._extra_bed_allowed

    @extra_bed_allowed.setter
    def extra_bed_allowed(self, extra_bed_allowed):
        """Sets the extra_bed_allowed of this Room.

        Is there an extra bed allowed in the room

        :param extra_bed_allowed: The extra_bed_allowed of this Room.
        :type extra_bed_allowed: bool
        """

        self._extra_bed_allowed = extra_bed_allowed

    @property
    def floor(self):
        """Gets the floor of this Room.

        Floor of the room

        :return: The floor of this Room.
        :rtype: int
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this Room.

        Floor of the room

        :param floor: The floor of this Room.
        :type floor: int
        """
        if floor is None:
            raise ValueError("Invalid value for `floor`, must not be `None`")

        self._floor = floor

    @property
    def locations(self):
        """Gets the locations of this Room.

        List of locations for the room

        :return: The locations of this Room.
        :rtype: List[SimpleAttribute]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Room.

        List of locations for the room

        :param locations: The locations of this Room.
        :type locations: List[SimpleAttribute]
        """

        self._locations = locations

    @property
    def max_persons(self):
        """Gets the max_persons of this Room.

        Maximum number of allowed persons in the room

        :return: The max_persons of this Room.
        :rtype: int
        """
        return self._max_persons

    @max_persons.setter
    def max_persons(self, max_persons):
        """Sets the max_persons of this Room.

        Maximum number of allowed persons in the room

        :param max_persons: The max_persons of this Room.
        :type max_persons: int
        """
        if max_persons is None:
            raise ValueError("Invalid value for `max_persons`, must not be `None`")

        self._max_persons = max_persons

    @property
    def min_persons(self):
        """Gets the min_persons of this Room.

        Minimum number of allowed persons in the room

        :return: The min_persons of this Room.
        :rtype: int
        """
        return self._min_persons

    @min_persons.setter
    def min_persons(self, min_persons):
        """Sets the min_persons of this Room.

        Minimum number of allowed persons in the room

        :param min_persons: The min_persons of this Room.
        :type min_persons: int
        """
        if min_persons is None:
            raise ValueError("Invalid value for `min_persons`, must not be `None`")

        self._min_persons = min_persons

    @property
    def name(self):
        """Gets the name of this Room.

        Name of the room

        :return: The name of this Room.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Room.

        Name of the room

        :param name: The name of this Room.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this Room.

        Number of the room

        :return: The number of this Room.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Room.

        Number of the room

        :param number: The number of this Room.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def reservations(self):
        """Gets the reservations of this Room.

        Current reservation(s) for the room. It shows reservations due to arrive today and the one still inhouse.              If there is a day-use reservation assigned for today it can show you up to 3 reservations. One that will              depart today, the day-use reservqation for today and the one due to arrive

        :return: The reservations of this Room.
        :rtype: List[EmbeddedReservation]
        """
        return self._reservations

    @reservations.setter
    def reservations(self, reservations):
        """Sets the reservations of this Room.

        Current reservation(s) for the room. It shows reservations due to arrive today and the one still inhouse.              If there is a day-use reservation assigned for today it can show you up to 3 reservations. One that will              depart today, the day-use reservqation for today and the one due to arrive

        :param reservations: The reservations of this Room.
        :type reservations: List[EmbeddedReservation]
        """

        self._reservations = reservations

    @property
    def room_type(self):
        """Gets the room_type of this Room.


        :return: The room_type of this Room.
        :rtype: EmbeddedRoomType
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """Sets the room_type of this Room.


        :param room_type: The room_type of this Room.
        :type room_type: EmbeddedRoomType
        """
        if room_type is None:
            raise ValueError("Invalid value for `room_type`, must not be `None`")

        self._room_type = room_type

    @property
    def status(self):
        """Gets the status of this Room.


        :return: The status of this Room.
        :rtype: RoomStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Room.


        :param status: The status of this Room.
        :type status: RoomStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this Room.

        Timestamp of when the room was changed the last time

        :return: The updated of this Room.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Room.

        Timestamp of when the room was changed the last time

        :param updated: The updated of this Room.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def views(self):
        """Gets the views of this Room.

        List of views for the room

        :return: The views of this Room.
        :rtype: List[SimpleAttribute]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this Room.

        List of views for the room

        :param views: The views of this Room.
        :type views: List[SimpleAttribute]
        """

        self._views = views
