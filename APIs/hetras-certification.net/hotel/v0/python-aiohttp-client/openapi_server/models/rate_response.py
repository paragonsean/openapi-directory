# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_object import LinkObject
from openapi_server.models.policy import Policy
from openapi_server.models.price_derivation import PriceDerivation
from openapi_server.models.room_type_supplement import RoomTypeSupplement
from openapi_server import util


class RateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, LinkObject]=None, base_price: float=None, business_day: datetime=None, cancellation_policy: Policy=None, derivation: PriceDerivation=None, minimum_guarantee_type: str=None, per_person_surcharge: float=None, room_type_supplements: List[RoomTypeSupplement]=None):
        """RateResponse - a model defined in OpenAPI

        :param links: The links of this RateResponse.
        :param base_price: The base_price of this RateResponse.
        :param business_day: The business_day of this RateResponse.
        :param cancellation_policy: The cancellation_policy of this RateResponse.
        :param derivation: The derivation of this RateResponse.
        :param minimum_guarantee_type: The minimum_guarantee_type of this RateResponse.
        :param per_person_surcharge: The per_person_surcharge of this RateResponse.
        :param room_type_supplements: The room_type_supplements of this RateResponse.
        """
        self.openapi_types = {
            'links': Dict[str, LinkObject],
            'base_price': float,
            'business_day': datetime,
            'cancellation_policy': Policy,
            'derivation': PriceDerivation,
            'minimum_guarantee_type': str,
            'per_person_surcharge': float,
            'room_type_supplements': List[RoomTypeSupplement]
        }

        self.attribute_map = {
            'links': '_links',
            'base_price': 'base_price',
            'business_day': 'business_day',
            'cancellation_policy': 'cancellation_policy',
            'derivation': 'derivation',
            'minimum_guarantee_type': 'minimum_guarantee_type',
            'per_person_surcharge': 'per_person_surcharge',
            'room_type_supplements': 'room_type_supplements'
        }

        self._links = links
        self._base_price = base_price
        self._business_day = business_day
        self._cancellation_policy = cancellation_policy
        self._derivation = derivation
        self._minimum_guarantee_type = minimum_guarantee_type
        self._per_person_surcharge = per_person_surcharge
        self._room_type_supplements = room_type_supplements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RateResponse of this RateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this RateResponse.

        Collection of links to related resources

        :return: The links of this RateResponse.
        :rtype: Dict[str, LinkObject]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RateResponse.

        Collection of links to related resources

        :param links: The links of this RateResponse.
        :type links: Dict[str, LinkObject]
        """

        self._links = links

    @property
    def base_price(self):
        """Gets the base_price of this RateResponse.

        The price for this business day for the default room type and occupancy of one adult. The price is              only available for base rateplans. Please be aware that it might be the case that the default room              type is not sold by the rateplan. Nevertheless the supplements will always be added to the price for               the default room type and one adult

        :return: The base_price of this RateResponse.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """Sets the base_price of this RateResponse.

        The price for this business day for the default room type and occupancy of one adult. The price is              only available for base rateplans. Please be aware that it might be the case that the default room              type is not sold by the rateplan. Nevertheless the supplements will always be added to the price for               the default room type and one adult

        :param base_price: The base_price of this RateResponse.
        :type base_price: float
        """

        self._base_price = base_price

    @property
    def business_day(self):
        """Gets the business_day of this RateResponse.

        The business day

        :return: The business_day of this RateResponse.
        :rtype: datetime
        """
        return self._business_day

    @business_day.setter
    def business_day(self, business_day):
        """Sets the business_day of this RateResponse.

        The business day

        :param business_day: The business_day of this RateResponse.
        :type business_day: datetime
        """

        self._business_day = business_day

    @property
    def cancellation_policy(self):
        """Gets the cancellation_policy of this RateResponse.


        :return: The cancellation_policy of this RateResponse.
        :rtype: Policy
        """
        return self._cancellation_policy

    @cancellation_policy.setter
    def cancellation_policy(self, cancellation_policy):
        """Sets the cancellation_policy of this RateResponse.


        :param cancellation_policy: The cancellation_policy of this RateResponse.
        :type cancellation_policy: Policy
        """

        self._cancellation_policy = cancellation_policy

    @property
    def derivation(self):
        """Gets the derivation of this RateResponse.


        :return: The derivation of this RateResponse.
        :rtype: PriceDerivation
        """
        return self._derivation

    @derivation.setter
    def derivation(self, derivation):
        """Sets the derivation of this RateResponse.


        :param derivation: The derivation of this RateResponse.
        :type derivation: PriceDerivation
        """

        self._derivation = derivation

    @property
    def minimum_guarantee_type(self):
        """Gets the minimum_guarantee_type of this RateResponse.

        The minimum guarantee

        :return: The minimum_guarantee_type of this RateResponse.
        :rtype: str
        """
        return self._minimum_guarantee_type

    @minimum_guarantee_type.setter
    def minimum_guarantee_type(self, minimum_guarantee_type):
        """Sets the minimum_guarantee_type of this RateResponse.

        The minimum guarantee

        :param minimum_guarantee_type: The minimum_guarantee_type of this RateResponse.
        :type minimum_guarantee_type: str
        """
        allowed_values = ["PM4Hold", "PM6Hold", "GuaranteeToCreditCard", "GuaranteeToGuestAccount", "GuaranteeByTravelAgent", "GuaranteeByCompany", "Deposit", "Voucher", "Prepayment", "NonGuaranteed", "Tentative", "Waitlist"]  # noqa: E501
        if minimum_guarantee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_guarantee_type` ({0}), must be one of {1}"
                .format(minimum_guarantee_type, allowed_values)
            )

        self._minimum_guarantee_type = minimum_guarantee_type

    @property
    def per_person_surcharge(self):
        """Gets the per_person_surcharge of this RateResponse.

        The surcharge per additional adult staying in the room. It is only available on base rateplans

        :return: The per_person_surcharge of this RateResponse.
        :rtype: float
        """
        return self._per_person_surcharge

    @per_person_surcharge.setter
    def per_person_surcharge(self, per_person_surcharge):
        """Sets the per_person_surcharge of this RateResponse.

        The surcharge per additional adult staying in the room. It is only available on base rateplans

        :param per_person_surcharge: The per_person_surcharge of this RateResponse.
        :type per_person_surcharge: float
        """

        self._per_person_surcharge = per_person_surcharge

    @property
    def room_type_supplements(self):
        """Gets the room_type_supplements of this RateResponse.

        List of supplements added to the price per room type

        :return: The room_type_supplements of this RateResponse.
        :rtype: List[RoomTypeSupplement]
        """
        return self._room_type_supplements

    @room_type_supplements.setter
    def room_type_supplements(self, room_type_supplements):
        """Sets the room_type_supplements of this RateResponse.

        List of supplements added to the price per room type

        :param room_type_supplements: The room_type_supplements of this RateResponse.
        :type room_type_supplements: List[RoomTypeSupplement]
        """

        self._room_type_supplements = room_type_supplements
