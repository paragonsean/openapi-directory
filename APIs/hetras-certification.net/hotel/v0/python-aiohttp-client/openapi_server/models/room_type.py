# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_attribute import SimpleAttribute
from openapi_server import util


class RoomType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amenities: List[SimpleAttribute]=None, bedding_type: str=None, code: str=None, created: datetime=None, default: bool=None, description: str=None, expected_occupancy: int=None, facilities: List[SimpleAttribute]=None, max_persons: int=None, min_persons: int=None, name: str=None, updated: datetime=None, views: List[SimpleAttribute]=None):
        """RoomType - a model defined in OpenAPI

        :param amenities: The amenities of this RoomType.
        :param bedding_type: The bedding_type of this RoomType.
        :param code: The code of this RoomType.
        :param created: The created of this RoomType.
        :param default: The default of this RoomType.
        :param description: The description of this RoomType.
        :param expected_occupancy: The expected_occupancy of this RoomType.
        :param facilities: The facilities of this RoomType.
        :param max_persons: The max_persons of this RoomType.
        :param min_persons: The min_persons of this RoomType.
        :param name: The name of this RoomType.
        :param updated: The updated of this RoomType.
        :param views: The views of this RoomType.
        """
        self.openapi_types = {
            'amenities': List[SimpleAttribute],
            'bedding_type': str,
            'code': str,
            'created': datetime,
            'default': bool,
            'description': str,
            'expected_occupancy': int,
            'facilities': List[SimpleAttribute],
            'max_persons': int,
            'min_persons': int,
            'name': str,
            'updated': datetime,
            'views': List[SimpleAttribute]
        }

        self.attribute_map = {
            'amenities': 'amenities',
            'bedding_type': 'bedding_type',
            'code': 'code',
            'created': 'created',
            'default': 'default',
            'description': 'description',
            'expected_occupancy': 'expected_occupancy',
            'facilities': 'facilities',
            'max_persons': 'max_persons',
            'min_persons': 'min_persons',
            'name': 'name',
            'updated': 'updated',
            'views': 'views'
        }

        self._amenities = amenities
        self._bedding_type = bedding_type
        self._code = code
        self._created = created
        self._default = default
        self._description = description
        self._expected_occupancy = expected_occupancy
        self._facilities = facilities
        self._max_persons = max_persons
        self._min_persons = min_persons
        self._name = name
        self._updated = updated
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoomType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoomType of this RoomType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amenities(self):
        """Gets the amenities of this RoomType.

        List of amenities for the room type

        :return: The amenities of this RoomType.
        :rtype: List[SimpleAttribute]
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this RoomType.

        List of amenities for the room type

        :param amenities: The amenities of this RoomType.
        :type amenities: List[SimpleAttribute]
        """

        self._amenities = amenities

    @property
    def bedding_type(self):
        """Gets the bedding_type of this RoomType.

        The type of bed for the room type

        :return: The bedding_type of this RoomType.
        :rtype: str
        """
        return self._bedding_type

    @bedding_type.setter
    def bedding_type(self, bedding_type):
        """Sets the bedding_type of this RoomType.

        The type of bed for the room type

        :param bedding_type: The bedding_type of this RoomType.
        :type bedding_type: str
        """
        allowed_values = ["NotDefined", "Double", "Futon", "King", "MurphyBed", "Queen", "SofaBed", "TatamiMats", "Twin", "Single"]  # noqa: E501
        if bedding_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bedding_type` ({0}), must be one of {1}"
                .format(bedding_type, allowed_values)
            )

        self._bedding_type = bedding_type

    @property
    def code(self):
        """Gets the code of this RoomType.

        Code of the room type

        :return: The code of this RoomType.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RoomType.

        Code of the room type

        :param code: The code of this RoomType.
        :type code: str
        """

        self._code = code

    @property
    def created(self):
        """Gets the created of this RoomType.

        Timestamp the room type was created

        :return: The created of this RoomType.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RoomType.

        Timestamp the room type was created

        :param created: The created of this RoomType.
        :type created: datetime
        """

        self._created = created

    @property
    def default(self):
        """Gets the default of this RoomType.

        Specifies if the room type is the default room type of the hotel

        :return: The default of this RoomType.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this RoomType.

        Specifies if the room type is the default room type of the hotel

        :param default: The default of this RoomType.
        :type default: bool
        """

        self._default = default

    @property
    def description(self):
        """Gets the description of this RoomType.

        Description of the room type

        :return: The description of this RoomType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoomType.

        Description of the room type

        :param description: The description of this RoomType.
        :type description: str
        """

        self._description = description

    @property
    def expected_occupancy(self):
        """Gets the expected_occupancy of this RoomType.

        The common amount of persons for the room

        :return: The expected_occupancy of this RoomType.
        :rtype: int
        """
        return self._expected_occupancy

    @expected_occupancy.setter
    def expected_occupancy(self, expected_occupancy):
        """Sets the expected_occupancy of this RoomType.

        The common amount of persons for the room

        :param expected_occupancy: The expected_occupancy of this RoomType.
        :type expected_occupancy: int
        """

        self._expected_occupancy = expected_occupancy

    @property
    def facilities(self):
        """Gets the facilities of this RoomType.

        List of facilities for the room type

        :return: The facilities of this RoomType.
        :rtype: List[SimpleAttribute]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this RoomType.

        List of facilities for the room type

        :param facilities: The facilities of this RoomType.
        :type facilities: List[SimpleAttribute]
        """

        self._facilities = facilities

    @property
    def max_persons(self):
        """Gets the max_persons of this RoomType.

        Maximum number of allowed persons for that room type

        :return: The max_persons of this RoomType.
        :rtype: int
        """
        return self._max_persons

    @max_persons.setter
    def max_persons(self, max_persons):
        """Sets the max_persons of this RoomType.

        Maximum number of allowed persons for that room type

        :param max_persons: The max_persons of this RoomType.
        :type max_persons: int
        """

        self._max_persons = max_persons

    @property
    def min_persons(self):
        """Gets the min_persons of this RoomType.

        Minimum number of allowed persons for that room type

        :return: The min_persons of this RoomType.
        :rtype: int
        """
        return self._min_persons

    @min_persons.setter
    def min_persons(self, min_persons):
        """Sets the min_persons of this RoomType.

        Minimum number of allowed persons for that room type

        :param min_persons: The min_persons of this RoomType.
        :type min_persons: int
        """

        self._min_persons = min_persons

    @property
    def name(self):
        """Gets the name of this RoomType.

        Name of the room type

        :return: The name of this RoomType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoomType.

        Name of the room type

        :param name: The name of this RoomType.
        :type name: str
        """

        self._name = name

    @property
    def updated(self):
        """Gets the updated of this RoomType.

        Timestamp of when the room type was changed the last time

        :return: The updated of this RoomType.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this RoomType.

        Timestamp of when the room type was changed the last time

        :param updated: The updated of this RoomType.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def views(self):
        """Gets the views of this RoomType.

        List of views for the room type

        :return: The views of this RoomType.
        :rtype: List[SimpleAttribute]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this RoomType.

        List of views for the room type

        :param views: The views of this RoomType.
        :type views: List[SimpleAttribute]
        """

        self._views = views
