# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class YieldableRateTimeSlice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, number_of_persons: int=None, rate_value: float=None, room_type: str=None):
        """YieldableRateTimeSlice - a model defined in OpenAPI

        :param _date: The _date of this YieldableRateTimeSlice.
        :param number_of_persons: The number_of_persons of this YieldableRateTimeSlice.
        :param rate_value: The rate_value of this YieldableRateTimeSlice.
        :param room_type: The room_type of this YieldableRateTimeSlice.
        """
        self.openapi_types = {
            '_date': datetime,
            'number_of_persons': int,
            'rate_value': float,
            'room_type': str
        }

        self.attribute_map = {
            '_date': 'date',
            'number_of_persons': 'number_of_persons',
            'rate_value': 'rate_value',
            'room_type': 'room_type'
        }

        self.__date = _date
        self._number_of_persons = number_of_persons
        self._rate_value = rate_value
        self._room_type = room_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YieldableRateTimeSlice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YieldableRateTimeSlice of this YieldableRateTimeSlice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this YieldableRateTimeSlice.


        :return: The _date of this YieldableRateTimeSlice.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this YieldableRateTimeSlice.


        :param _date: The _date of this YieldableRateTimeSlice.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def number_of_persons(self):
        """Gets the number_of_persons of this YieldableRateTimeSlice.

        Number of persons for which the rate price is saved

        :return: The number_of_persons of this YieldableRateTimeSlice.
        :rtype: int
        """
        return self._number_of_persons

    @number_of_persons.setter
    def number_of_persons(self, number_of_persons):
        """Sets the number_of_persons of this YieldableRateTimeSlice.

        Number of persons for which the rate price is saved

        :param number_of_persons: The number_of_persons of this YieldableRateTimeSlice.
        :type number_of_persons: int
        """
        if number_of_persons is None:
            raise ValueError("Invalid value for `number_of_persons`, must not be `None`")

        self._number_of_persons = number_of_persons

    @property
    def rate_value(self):
        """Gets the rate_value of this YieldableRateTimeSlice.

        Rate value amount, which should be unique for the combination of rateplan, date, room type and numer of persons

        :return: The rate_value of this YieldableRateTimeSlice.
        :rtype: float
        """
        return self._rate_value

    @rate_value.setter
    def rate_value(self, rate_value):
        """Sets the rate_value of this YieldableRateTimeSlice.

        Rate value amount, which should be unique for the combination of rateplan, date, room type and numer of persons

        :param rate_value: The rate_value of this YieldableRateTimeSlice.
        :type rate_value: float
        """
        if rate_value is None:
            raise ValueError("Invalid value for `rate_value`, must not be `None`")

        self._rate_value = rate_value

    @property
    def room_type(self):
        """Gets the room_type of this YieldableRateTimeSlice.

        Room Type code for which the rate price is saved

        :return: The room_type of this YieldableRateTimeSlice.
        :rtype: str
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """Sets the room_type of this YieldableRateTimeSlice.

        Room Type code for which the rate price is saved

        :param room_type: The room_type of this YieldableRateTimeSlice.
        :type room_type: str
        """
        if room_type is None:
            raise ValueError("Invalid value for `room_type`, must not be `None`")

        self._room_type = room_type
