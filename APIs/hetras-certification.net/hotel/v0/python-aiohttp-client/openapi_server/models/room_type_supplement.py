# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_object import LinkObject
from openapi_server.models.supplement import Supplement
from openapi_server import util


class RoomTypeSupplement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, LinkObject]=None, code: str=None, default: bool=None, supplements: List[Supplement]=None):
        """RoomTypeSupplement - a model defined in OpenAPI

        :param links: The links of this RoomTypeSupplement.
        :param code: The code of this RoomTypeSupplement.
        :param default: The default of this RoomTypeSupplement.
        :param supplements: The supplements of this RoomTypeSupplement.
        """
        self.openapi_types = {
            'links': Dict[str, LinkObject],
            'code': str,
            'default': bool,
            'supplements': List[Supplement]
        }

        self.attribute_map = {
            'links': '_links',
            'code': 'code',
            'default': 'default',
            'supplements': 'supplements'
        }

        self._links = links
        self._code = code
        self._default = default
        self._supplements = supplements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoomTypeSupplement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoomTypeSupplement of this RoomTypeSupplement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this RoomTypeSupplement.

        Collection of links to related resources

        :return: The links of this RoomTypeSupplement.
        :rtype: Dict[str, LinkObject]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RoomTypeSupplement.

        Collection of links to related resources

        :param links: The links of this RoomTypeSupplement.
        :type links: Dict[str, LinkObject]
        """

        self._links = links

    @property
    def code(self):
        """Gets the code of this RoomTypeSupplement.

        The code of the room type

        :return: The code of this RoomTypeSupplement.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RoomTypeSupplement.

        The code of the room type

        :param code: The code of this RoomTypeSupplement.
        :type code: str
        """

        self._code = code

    @property
    def default(self):
        """Gets the default of this RoomTypeSupplement.

        Specifies if the room type is the default room type of the hotel

        :return: The default of this RoomTypeSupplement.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this RoomTypeSupplement.

        Specifies if the room type is the default room type of the hotel

        :param default: The default of this RoomTypeSupplement.
        :type default: bool
        """

        self._default = default

    @property
    def supplements(self):
        """Gets the supplements of this RoomTypeSupplement.

        The supplements per adults in the room. The per person surcharge will be added on top

        :return: The supplements of this RoomTypeSupplement.
        :rtype: List[Supplement]
        """
        return self._supplements

    @supplements.setter
    def supplements(self, supplements):
        """Sets the supplements of this RoomTypeSupplement.

        The supplements per adults in the room. The per person surcharge will be added on top

        :param supplements: The supplements of this RoomTypeSupplement.
        :type supplements: List[Supplement]
        """

        self._supplements = supplements
