# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodesListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, type: str=None):
        """CodesListRequest - a model defined in OpenAPI

        :param code: The code of this CodesListRequest.
        :param type: The type of this CodesListRequest.
        """
        self.openapi_types = {
            'code': str,
            'type': str
        }

        self.attribute_map = {
            'code': 'code',
            'type': 'type'
        }

        self._code = code
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodesListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodesListRequest of this CodesListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CodesListRequest.

        Return all results matching the specified code. A code is unique in combination with the type              which means when you query for a code you could get multiple results each for a different type

        :return: The code of this CodesListRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CodesListRequest.

        Return all results matching the specified code. A code is unique in combination with the type              which means when you query for a code you could get multiple results each for a different type

        :param code: The code of this CodesListRequest.
        :type code: str
        """

        self._code = code

    @property
    def type(self):
        """Gets the type of this CodesListRequest.

        Return all codes for the specified type

        :return: The type of this CodesListRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodesListRequest.

        Return all codes for the specified type

        :param type: The type of this CodesListRequest.
        :type type: str
        """
        allowed_values = ["GuestRequest", "RequestDietary", "VIPStatus", "ReasonForRateChange", "Regrets", "MarketSegments", "SourceOfBusiness", "LoyaltyProgram", "CancellationReason", "AccountType", "AccountRank", "VIPLevel", "Title", "ContactFunction", "Territory", "CorrespondenceType", "ExternalProgramType", "RevenueBucket", "AdditionalRevenueBucket", "AdditionalStatisticsBuckets", "MealPeriod", "BillingCycle", "ReminderCycle", "MajorMarketSegments", "DocumentType", "ActivityType", "ReservationLabels"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
