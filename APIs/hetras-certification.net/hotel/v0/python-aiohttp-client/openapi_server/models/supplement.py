# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Supplement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment: str=None, adults: int=None, supplement: float=None):
        """Supplement - a model defined in OpenAPI

        :param adjustment: The adjustment of this Supplement.
        :param adults: The adults of this Supplement.
        :param supplement: The supplement of this Supplement.
        """
        self.openapi_types = {
            'adjustment': str,
            'adults': int,
            'supplement': float
        }

        self.attribute_map = {
            'adjustment': 'adjustment',
            'adults': 'adults',
            'supplement': 'supplement'
        }

        self._adjustment = adjustment
        self._adults = adults
        self._supplement = supplement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Supplement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Supplement of this Supplement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment(self):
        """Gets the adjustment of this Supplement.

        Mode for the calculation of the supplement value

        :return: The adjustment of this Supplement.
        :rtype: str
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this Supplement.

        Mode for the calculation of the supplement value

        :param adjustment: The adjustment of this Supplement.
        :type adjustment: str
        """
        allowed_values = ["Amount", "Percentage"]  # noqa: E501
        if adjustment not in allowed_values:
            raise ValueError(
                "Invalid value for `adjustment` ({0}), must be one of {1}"
                .format(adjustment, allowed_values)
            )

        self._adjustment = adjustment

    @property
    def adults(self):
        """Gets the adults of this Supplement.

        The number of adults per room

        :return: The adults of this Supplement.
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this Supplement.

        The number of adults per room

        :param adults: The adults of this Supplement.
        :type adults: int
        """

        self._adults = adults

    @property
    def supplement(self):
        """Gets the supplement of this Supplement.

        The amount or percentage that will be added for this room type and number of adults per room

        :return: The supplement of this Supplement.
        :rtype: float
        """
        return self._supplement

    @supplement.setter
    def supplement(self, supplement):
        """Sets the supplement of this Supplement.

        The amount or percentage that will be added for this room type and number of adults per room

        :param supplement: The supplement of this Supplement.
        :type supplement: float
        """

        self._supplement = supplement
