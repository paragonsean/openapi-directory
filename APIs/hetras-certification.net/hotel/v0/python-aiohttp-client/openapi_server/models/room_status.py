# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.room_maintenance import RoomMaintenance
from openapi_server import util


class RoomStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: str=None, frontdesk_occupancy: str=None, housekeeping_occupancy: str=None, maintenance: RoomMaintenance=None):
        """RoomStatus - a model defined in OpenAPI

        :param condition: The condition of this RoomStatus.
        :param frontdesk_occupancy: The frontdesk_occupancy of this RoomStatus.
        :param housekeeping_occupancy: The housekeeping_occupancy of this RoomStatus.
        :param maintenance: The maintenance of this RoomStatus.
        """
        self.openapi_types = {
            'condition': str,
            'frontdesk_occupancy': str,
            'housekeeping_occupancy': str,
            'maintenance': RoomMaintenance
        }

        self.attribute_map = {
            'condition': 'condition',
            'frontdesk_occupancy': 'frontdesk_occupancy',
            'housekeeping_occupancy': 'housekeeping_occupancy',
            'maintenance': 'maintenance'
        }

        self._condition = condition
        self._frontdesk_occupancy = frontdesk_occupancy
        self._housekeeping_occupancy = housekeeping_occupancy
        self._maintenance = maintenance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoomStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoomStatus of this RoomStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this RoomStatus.

        Room Condition status

        :return: The condition of this RoomStatus.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this RoomStatus.

        Room Condition status

        :param condition: The condition of this RoomStatus.
        :type condition: str
        """
        allowed_values = ["CleanNotInspected", "Clean", "Dirty"]  # noqa: E501
        if condition not in allowed_values:
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def frontdesk_occupancy(self):
        """Gets the frontdesk_occupancy of this RoomStatus.

        The frontdesk occupancy is set by reservation checkin and checkout. It can differ from the              housekeeping occupancy

        :return: The frontdesk_occupancy of this RoomStatus.
        :rtype: str
        """
        return self._frontdesk_occupancy

    @frontdesk_occupancy.setter
    def frontdesk_occupancy(self, frontdesk_occupancy):
        """Sets the frontdesk_occupancy of this RoomStatus.

        The frontdesk occupancy is set by reservation checkin and checkout. It can differ from the              housekeeping occupancy

        :param frontdesk_occupancy: The frontdesk_occupancy of this RoomStatus.
        :type frontdesk_occupancy: str
        """
        allowed_values = ["Occupied", "Vacant"]  # noqa: E501
        if frontdesk_occupancy not in allowed_values:
            raise ValueError(
                "Invalid value for `frontdesk_occupancy` ({0}), must be one of {1}"
                .format(frontdesk_occupancy, allowed_values)
            )

        self._frontdesk_occupancy = frontdesk_occupancy

    @property
    def housekeeping_occupancy(self):
        """Gets the housekeeping_occupancy of this RoomStatus.

        The housekeeping occupancy status is defined by the housekeeping staff. Usually it matches the              frontdesk occupancy, but sometimes the reservation is still inhouse, but it looks like there is no              guest in the room anymore. Then the statuses can differ.

        :return: The housekeeping_occupancy of this RoomStatus.
        :rtype: str
        """
        return self._housekeeping_occupancy

    @housekeeping_occupancy.setter
    def housekeeping_occupancy(self, housekeeping_occupancy):
        """Sets the housekeeping_occupancy of this RoomStatus.

        The housekeeping occupancy status is defined by the housekeeping staff. Usually it matches the              frontdesk occupancy, but sometimes the reservation is still inhouse, but it looks like there is no              guest in the room anymore. Then the statuses can differ.

        :param housekeeping_occupancy: The housekeeping_occupancy of this RoomStatus.
        :type housekeeping_occupancy: str
        """
        allowed_values = ["Occupied", "Vacant"]  # noqa: E501
        if housekeeping_occupancy not in allowed_values:
            raise ValueError(
                "Invalid value for `housekeeping_occupancy` ({0}), must be one of {1}"
                .format(housekeeping_occupancy, allowed_values)
            )

        self._housekeeping_occupancy = housekeeping_occupancy

    @property
    def maintenance(self):
        """Gets the maintenance of this RoomStatus.


        :return: The maintenance of this RoomStatus.
        :rtype: RoomMaintenance
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this RoomStatus.


        :param maintenance: The maintenance of this RoomStatus.
        :type maintenance: RoomMaintenance
        """

        self._maintenance = maintenance
