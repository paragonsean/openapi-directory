# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_object import LinkObject
from openapi_server import util


class EmbeddedReservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, LinkObject]=None, arrival_date: datetime=None, confirmation_id: str=None, departure_date: datetime=None, reservation_number: int=None, reservation_status: str=None):
        """EmbeddedReservation - a model defined in OpenAPI

        :param links: The links of this EmbeddedReservation.
        :param arrival_date: The arrival_date of this EmbeddedReservation.
        :param confirmation_id: The confirmation_id of this EmbeddedReservation.
        :param departure_date: The departure_date of this EmbeddedReservation.
        :param reservation_number: The reservation_number of this EmbeddedReservation.
        :param reservation_status: The reservation_status of this EmbeddedReservation.
        """
        self.openapi_types = {
            'links': Dict[str, LinkObject],
            'arrival_date': datetime,
            'confirmation_id': str,
            'departure_date': datetime,
            'reservation_number': int,
            'reservation_status': str
        }

        self.attribute_map = {
            'links': '_links',
            'arrival_date': 'arrival_date',
            'confirmation_id': 'confirmation_id',
            'departure_date': 'departure_date',
            'reservation_number': 'reservation_number',
            'reservation_status': 'reservation_status'
        }

        self._links = links
        self._arrival_date = arrival_date
        self._confirmation_id = confirmation_id
        self._departure_date = departure_date
        self._reservation_number = reservation_number
        self._reservation_status = reservation_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbeddedReservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmbeddedReservation of this EmbeddedReservation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this EmbeddedReservation.

        Collection of links to related resources

        :return: The links of this EmbeddedReservation.
        :rtype: Dict[str, LinkObject]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EmbeddedReservation.

        Collection of links to related resources

        :param links: The links of this EmbeddedReservation.
        :type links: Dict[str, LinkObject]
        """

        self._links = links

    @property
    def arrival_date(self):
        """Gets the arrival_date of this EmbeddedReservation.

        The arrival date of the guests

        :return: The arrival_date of this EmbeddedReservation.
        :rtype: datetime
        """
        return self._arrival_date

    @arrival_date.setter
    def arrival_date(self, arrival_date):
        """Sets the arrival_date of this EmbeddedReservation.

        The arrival date of the guests

        :param arrival_date: The arrival_date of this EmbeddedReservation.
        :type arrival_date: datetime
        """
        if arrival_date is None:
            raise ValueError("Invalid value for `arrival_date`, must not be `None`")

        self._arrival_date = arrival_date

    @property
    def confirmation_id(self):
        """Gets the confirmation_id of this EmbeddedReservation.

        he confirmation id for the booking which the guest can use to check in on the kiosk, add the               booking to the mobile app etc. It is used as identifier for all reservations done with the               same booking request

        :return: The confirmation_id of this EmbeddedReservation.
        :rtype: str
        """
        return self._confirmation_id

    @confirmation_id.setter
    def confirmation_id(self, confirmation_id):
        """Sets the confirmation_id of this EmbeddedReservation.

        he confirmation id for the booking which the guest can use to check in on the kiosk, add the               booking to the mobile app etc. It is used as identifier for all reservations done with the               same booking request

        :param confirmation_id: The confirmation_id of this EmbeddedReservation.
        :type confirmation_id: str
        """
        if confirmation_id is None:
            raise ValueError("Invalid value for `confirmation_id`, must not be `None`")

        self._confirmation_id = confirmation_id

    @property
    def departure_date(self):
        """Gets the departure_date of this EmbeddedReservation.

        The departure date of the guests

        :return: The departure_date of this EmbeddedReservation.
        :rtype: datetime
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this EmbeddedReservation.

        The departure date of the guests

        :param departure_date: The departure_date of this EmbeddedReservation.
        :type departure_date: datetime
        """
        if departure_date is None:
            raise ValueError("Invalid value for `departure_date`, must not be `None`")

        self._departure_date = departure_date

    @property
    def reservation_number(self):
        """Gets the reservation_number of this EmbeddedReservation.

        The reservation number of the reservation

        :return: The reservation_number of this EmbeddedReservation.
        :rtype: int
        """
        return self._reservation_number

    @reservation_number.setter
    def reservation_number(self, reservation_number):
        """Sets the reservation_number of this EmbeddedReservation.

        The reservation number of the reservation

        :param reservation_number: The reservation_number of this EmbeddedReservation.
        :type reservation_number: int
        """
        if reservation_number is None:
            raise ValueError("Invalid value for `reservation_number`, must not be `None`")

        self._reservation_number = reservation_number

    @property
    def reservation_status(self):
        """Gets the reservation_status of this EmbeddedReservation.

        The current status of this reservation

        :return: The reservation_status of this EmbeddedReservation.
        :rtype: str
        """
        return self._reservation_status

    @reservation_status.setter
    def reservation_status(self, reservation_status):
        """Sets the reservation_status of this EmbeddedReservation.

        The current status of this reservation

        :param reservation_status: The reservation_status of this EmbeddedReservation.
        :type reservation_status: str
        """
        allowed_values = ["Tentative", "Waitlisted", "OnRequest", "NonGuaranteed", "Guaranteed", "InHouse", "CheckedOut", "NoShow", "Denied", "Cancelled", "Released", "Walked", "Expired", "WalkIn", "Registered"]  # noqa: E501
        if reservation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `reservation_status` ({0}), must be one of {1}"
                .format(reservation_status, allowed_values)
            )

        self._reservation_status = reservation_status
