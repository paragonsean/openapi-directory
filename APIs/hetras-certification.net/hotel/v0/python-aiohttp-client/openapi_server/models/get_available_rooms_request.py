# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetAvailableRoomsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adults: str=None, amenities: List[str]=None, _from: datetime=None, include_out_of_service: bool=None, locations: List[str]=None, room_types: List[str]=None, to: datetime=None, views: List[str]=None):
        """GetAvailableRoomsRequest - a model defined in OpenAPI

        :param adults: The adults of this GetAvailableRoomsRequest.
        :param amenities: The amenities of this GetAvailableRoomsRequest.
        :param _from: The _from of this GetAvailableRoomsRequest.
        :param include_out_of_service: The include_out_of_service of this GetAvailableRoomsRequest.
        :param locations: The locations of this GetAvailableRoomsRequest.
        :param room_types: The room_types of this GetAvailableRoomsRequest.
        :param to: The to of this GetAvailableRoomsRequest.
        :param views: The views of this GetAvailableRoomsRequest.
        """
        self.openapi_types = {
            'adults': str,
            'amenities': List[str],
            '_from': datetime,
            'include_out_of_service': bool,
            'locations': List[str],
            'room_types': List[str],
            'to': datetime,
            'views': List[str]
        }

        self.attribute_map = {
            'adults': 'adults',
            'amenities': 'amenities',
            '_from': 'from',
            'include_out_of_service': 'includeOutOfService',
            'locations': 'locations',
            'room_types': 'roomTypes',
            'to': 'to',
            'views': 'views'
        }

        self._adults = adults
        self._amenities = amenities
        self.__from = _from
        self._include_out_of_service = include_out_of_service
        self._locations = locations
        self._room_types = room_types
        self._to = to
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAvailableRoomsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAvailableRoomsRequest of this GetAvailableRoomsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adults(self):
        """Gets the adults of this GetAvailableRoomsRequest.

        Specifies number of adults the returned rooms will have to be able to house. The default value is 1.

        :return: The adults of this GetAvailableRoomsRequest.
        :rtype: str
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this GetAvailableRoomsRequest.

        Specifies number of adults the returned rooms will have to be able to house. The default value is 1.

        :param adults: The adults of this GetAvailableRoomsRequest.
        :type adults: str
        """
        if adults is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', adults):
            raise ValueError("Invalid value for `adults`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._adults = adults

    @property
    def amenities(self):
        """Gets the amenities of this GetAvailableRoomsRequest.

        Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.

        :return: The amenities of this GetAvailableRoomsRequest.
        :rtype: List[str]
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this GetAvailableRoomsRequest.

        Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.

        :param amenities: The amenities of this GetAvailableRoomsRequest.
        :type amenities: List[str]
        """

        self._amenities = amenities

    @property
    def _from(self):
        """Gets the _from of this GetAvailableRoomsRequest.

        Rooms returned will not be assigned to a reservation or be under maintenance between this date              and the specified to date. Still there could be departing reservations or ending maintenances              for this date.

        :return: The _from of this GetAvailableRoomsRequest.
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this GetAvailableRoomsRequest.

        Rooms returned will not be assigned to a reservation or be under maintenance between this date              and the specified to date. Still there could be departing reservations or ending maintenances              for this date.

        :param _from: The _from of this GetAvailableRoomsRequest.
        :type _from: datetime
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def include_out_of_service(self):
        """Gets the include_out_of_service of this GetAvailableRoomsRequest.

        Should rooms that are set OutOfService in the defined time period be returned as available. By default              they are not.

        :return: The include_out_of_service of this GetAvailableRoomsRequest.
        :rtype: bool
        """
        return self._include_out_of_service

    @include_out_of_service.setter
    def include_out_of_service(self, include_out_of_service):
        """Sets the include_out_of_service of this GetAvailableRoomsRequest.

        Should rooms that are set OutOfService in the defined time period be returned as available. By default              they are not.

        :param include_out_of_service: The include_out_of_service of this GetAvailableRoomsRequest.
        :type include_out_of_service: bool
        """

        self._include_out_of_service = include_out_of_service

    @property
    def locations(self):
        """Gets the locations of this GetAvailableRoomsRequest.

        Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.

        :return: The locations of this GetAvailableRoomsRequest.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this GetAvailableRoomsRequest.

        Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.

        :param locations: The locations of this GetAvailableRoomsRequest.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def room_types(self):
        """Gets the room_types of this GetAvailableRoomsRequest.

        Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.

        :return: The room_types of this GetAvailableRoomsRequest.
        :rtype: List[str]
        """
        return self._room_types

    @room_types.setter
    def room_types(self, room_types):
        """Sets the room_types of this GetAvailableRoomsRequest.

        Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.

        :param room_types: The room_types of this GetAvailableRoomsRequest.
        :type room_types: List[str]
        """

        self._room_types = room_types

    @property
    def to(self):
        """Gets the to of this GetAvailableRoomsRequest.

        Rooms returned will not be assigned to a reservation or be under maintenance between the specified              from date and this date. Still there could be arriving reservations or beginning maintenances              for this date.

        :return: The to of this GetAvailableRoomsRequest.
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this GetAvailableRoomsRequest.

        Rooms returned will not be assigned to a reservation or be under maintenance between the specified              from date and this date. Still there could be arriving reservations or beginning maintenances              for this date.

        :param to: The to of this GetAvailableRoomsRequest.
        :type to: datetime
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def views(self):
        """Gets the views of this GetAvailableRoomsRequest.

        Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.

        :return: The views of this GetAvailableRoomsRequest.
        :rtype: List[str]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this GetAvailableRoomsRequest.

        Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.

        :param views: The views of this GetAvailableRoomsRequest.
        :type views: List[str]
        """

        self._views = views
