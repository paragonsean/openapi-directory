# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_base_entry import CodeBaseEntry
from openapi_server.models.link_object import LinkObject
from openapi_server import util


class CodeFullEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, LinkObject]=None, code: str=None, comment: str=None, default: bool=None, id: str=None, name: str=None, parent: CodeBaseEntry=None, type: str=None):
        """CodeFullEntry - a model defined in OpenAPI

        :param links: The links of this CodeFullEntry.
        :param code: The code of this CodeFullEntry.
        :param comment: The comment of this CodeFullEntry.
        :param default: The default of this CodeFullEntry.
        :param id: The id of this CodeFullEntry.
        :param name: The name of this CodeFullEntry.
        :param parent: The parent of this CodeFullEntry.
        :param type: The type of this CodeFullEntry.
        """
        self.openapi_types = {
            'links': Dict[str, LinkObject],
            'code': str,
            'comment': str,
            'default': bool,
            'id': str,
            'name': str,
            'parent': CodeBaseEntry,
            'type': str
        }

        self.attribute_map = {
            'links': '_links',
            'code': 'code',
            'comment': 'comment',
            'default': 'default',
            'id': 'id',
            'name': 'name',
            'parent': 'parent',
            'type': 'type'
        }

        self._links = links
        self._code = code
        self._comment = comment
        self._default = default
        self._id = id
        self._name = name
        self._parent = parent
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeFullEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeFullEntry of this CodeFullEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CodeFullEntry.

        Collection of links to related resources

        :return: The links of this CodeFullEntry.
        :rtype: Dict[str, LinkObject]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CodeFullEntry.

        Collection of links to related resources

        :param links: The links of this CodeFullEntry.
        :type links: Dict[str, LinkObject]
        """

        self._links = links

    @property
    def code(self):
        """Gets the code of this CodeFullEntry.

        The code value. This value you will see in reservations as market code and in other              resources like the revenue buckets in transactions

        :return: The code of this CodeFullEntry.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CodeFullEntry.

        The code value. This value you will see in reservations as market code and in other              resources like the revenue buckets in transactions

        :param code: The code of this CodeFullEntry.
        :type code: str
        """

        self._code = code

    @property
    def comment(self):
        """Gets the comment of this CodeFullEntry.

        The comment for this code

        :return: The comment of this CodeFullEntry.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CodeFullEntry.

        The comment for this code

        :param comment: The comment of this CodeFullEntry.
        :type comment: str
        """

        self._comment = comment

    @property
    def default(self):
        """Gets the default of this CodeFullEntry.

        This attribute tells you if this code is the default code for the specific type or not.              Not all the types of codes need to have a default code

        :return: The default of this CodeFullEntry.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CodeFullEntry.

        This attribute tells you if this code is the default code for the specific type or not.              Not all the types of codes need to have a default code

        :param default: The default of this CodeFullEntry.
        :type default: bool
        """

        self._default = default

    @property
    def id(self):
        """Gets the id of this CodeFullEntry.

        The id of the code

        :return: The id of this CodeFullEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodeFullEntry.

        The id of the code

        :param id: The id of this CodeFullEntry.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodeFullEntry.

        The name of the code that usually is more human readable

        :return: The name of this CodeFullEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodeFullEntry.

        The name of the code that usually is more human readable

        :param name: The name of this CodeFullEntry.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this CodeFullEntry.


        :return: The parent of this CodeFullEntry.
        :rtype: CodeBaseEntry
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this CodeFullEntry.


        :param parent: The parent of this CodeFullEntry.
        :type parent: CodeBaseEntry
        """

        self._parent = parent

    @property
    def type(self):
        """Gets the type of this CodeFullEntry.

        The type or category of the code

        :return: The type of this CodeFullEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodeFullEntry.

        The type or category of the code

        :param type: The type of this CodeFullEntry.
        :type type: str
        """
        allowed_values = ["GuestRequest", "RequestDietary", "VIPStatus", "ReasonForRateChange", "Regrets", "MarketSegments", "SourceOfBusiness", "LoyaltyProgram", "CancellationReason", "AccountType", "AccountRank", "VIPLevel", "Title", "ContactFunction", "Territory", "CorrespondenceType", "ExternalProgramType", "RevenueBucket", "AdditionalRevenueBucket", "AdditionalStatisticsBuckets", "MealPeriod", "BillingCycle", "ReminderCycle", "MajorMarketSegments", "DocumentType", "ActivityType", "ReservationLabels"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
