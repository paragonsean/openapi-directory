# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RatesBatchUpdateRequestItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_price: float=None, _from: datetime=None, rateplan: str=None, to: datetime=None):
        """RatesBatchUpdateRequestItem - a model defined in OpenAPI

        :param base_price: The base_price of this RatesBatchUpdateRequestItem.
        :param _from: The _from of this RatesBatchUpdateRequestItem.
        :param rateplan: The rateplan of this RatesBatchUpdateRequestItem.
        :param to: The to of this RatesBatchUpdateRequestItem.
        """
        self.openapi_types = {
            'base_price': float,
            '_from': datetime,
            'rateplan': str,
            'to': datetime
        }

        self.attribute_map = {
            'base_price': 'base_price',
            '_from': 'from',
            'rateplan': 'rateplan',
            'to': 'to'
        }

        self._base_price = base_price
        self.__from = _from
        self._rateplan = rateplan
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RatesBatchUpdateRequestItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RatesBatchUpdateRequestItem of this RatesBatchUpdateRequestItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_price(self):
        """Gets the base_price of this RatesBatchUpdateRequestItem.

        The price of the rateplan for the default room type and single occupancy.

        :return: The base_price of this RatesBatchUpdateRequestItem.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """Sets the base_price of this RatesBatchUpdateRequestItem.

        The price of the rateplan for the default room type and single occupancy.

        :param base_price: The base_price of this RatesBatchUpdateRequestItem.
        :type base_price: float
        """
        if base_price is None:
            raise ValueError("Invalid value for `base_price`, must not be `None`")

        self._base_price = base_price

    @property
    def _from(self):
        """Gets the _from of this RatesBatchUpdateRequestItem.

        Defines the first business day you would like to update rates. The maximum time span between <i>from</i>´and <i>to</i>              is limited to 365 days.

        :return: The _from of this RatesBatchUpdateRequestItem.
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this RatesBatchUpdateRequestItem.

        Defines the first business day you would like to update rates. The maximum time span between <i>from</i>´and <i>to</i>              is limited to 365 days.

        :param _from: The _from of this RatesBatchUpdateRequestItem.
        :type _from: datetime
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def rateplan(self):
        """Gets the rateplan of this RatesBatchUpdateRequestItem.

        The rateplan code to be updated. NOTE: this must be a base rateplan and not a derived one.

        :return: The rateplan of this RatesBatchUpdateRequestItem.
        :rtype: str
        """
        return self._rateplan

    @rateplan.setter
    def rateplan(self, rateplan):
        """Sets the rateplan of this RatesBatchUpdateRequestItem.

        The rateplan code to be updated. NOTE: this must be a base rateplan and not a derived one.

        :param rateplan: The rateplan of this RatesBatchUpdateRequestItem.
        :type rateplan: str
        """
        if rateplan is None:
            raise ValueError("Invalid value for `rateplan`, must not be `None`")

        self._rateplan = rateplan

    @property
    def to(self):
        """Gets the to of this RatesBatchUpdateRequestItem.

        Defines the last business day you would like to update rates. This can be same as {Hetras.PublicApi.Models.Hotels.Rateplans.Rates.RatesBatchUpdateRequestItem.To} if the update is for a single date.

        :return: The to of this RatesBatchUpdateRequestItem.
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this RatesBatchUpdateRequestItem.

        Defines the last business day you would like to update rates. This can be same as {Hetras.PublicApi.Models.Hotels.Rateplans.Rates.RatesBatchUpdateRequestItem.To} if the update is for a single date.

        :param to: The to of this RatesBatchUpdateRequestItem.
        :type to: datetime
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
