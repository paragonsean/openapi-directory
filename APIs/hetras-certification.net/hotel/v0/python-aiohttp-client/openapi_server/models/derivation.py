# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.related_rateplan import RelatedRateplan
from openapi_server import util


class Derivation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment: str=None, base_rateplan: RelatedRateplan=None):
        """Derivation - a model defined in OpenAPI

        :param adjustment: The adjustment of this Derivation.
        :param base_rateplan: The base_rateplan of this Derivation.
        """
        self.openapi_types = {
            'adjustment': str,
            'base_rateplan': RelatedRateplan
        }

        self.attribute_map = {
            'adjustment': 'adjustment',
            'base_rateplan': 'base_rateplan'
        }

        self._adjustment = adjustment
        self._base_rateplan = base_rateplan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Derivation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Derivation of this Derivation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment(self):
        """Gets the adjustment of this Derivation.

        Mode for the calculation of the daily rates adjustment

        :return: The adjustment of this Derivation.
        :rtype: str
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this Derivation.

        Mode for the calculation of the daily rates adjustment

        :param adjustment: The adjustment of this Derivation.
        :type adjustment: str
        """
        allowed_values = ["Amount", "Percentage"]  # noqa: E501
        if adjustment not in allowed_values:
            raise ValueError(
                "Invalid value for `adjustment` ({0}), must be one of {1}"
                .format(adjustment, allowed_values)
            )

        self._adjustment = adjustment

    @property
    def base_rateplan(self):
        """Gets the base_rateplan of this Derivation.


        :return: The base_rateplan of this Derivation.
        :rtype: RelatedRateplan
        """
        return self._base_rateplan

    @base_rateplan.setter
    def base_rateplan(self, base_rateplan):
        """Sets the base_rateplan of this Derivation.


        :param base_rateplan: The base_rateplan of this Derivation.
        :type base_rateplan: RelatedRateplan
        """

        self._base_rateplan = base_rateplan
