# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RateplansListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_rateplan: str=None, channel_code: str=None, channel_group: str=None, commissionable: bool=None, group: str=None, included_services: List[str]=None, market_codes: List[str]=None, room_types: List[str]=None, selling_status: str=None):
        """RateplansListRequest - a model defined in OpenAPI

        :param base_rateplan: The base_rateplan of this RateplansListRequest.
        :param channel_code: The channel_code of this RateplansListRequest.
        :param channel_group: The channel_group of this RateplansListRequest.
        :param commissionable: The commissionable of this RateplansListRequest.
        :param group: The group of this RateplansListRequest.
        :param included_services: The included_services of this RateplansListRequest.
        :param market_codes: The market_codes of this RateplansListRequest.
        :param room_types: The room_types of this RateplansListRequest.
        :param selling_status: The selling_status of this RateplansListRequest.
        """
        self.openapi_types = {
            'base_rateplan': str,
            'channel_code': str,
            'channel_group': str,
            'commissionable': bool,
            'group': str,
            'included_services': List[str],
            'market_codes': List[str],
            'room_types': List[str],
            'selling_status': str
        }

        self.attribute_map = {
            'base_rateplan': 'baseRateplan',
            'channel_code': 'channelCode',
            'channel_group': 'channelGroup',
            'commissionable': 'commissionable',
            'group': 'group',
            'included_services': 'includedServices',
            'market_codes': 'marketCodes',
            'room_types': 'roomTypes',
            'selling_status': 'sellingStatus'
        }

        self._base_rateplan = base_rateplan
        self._channel_code = channel_code
        self._channel_group = channel_group
        self._commissionable = commissionable
        self._group = group
        self._included_services = included_services
        self._market_codes = market_codes
        self._room_types = room_types
        self._selling_status = selling_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RateplansListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RateplansListRequest of this RateplansListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_rateplan(self):
        """Gets the base_rateplan of this RateplansListRequest.

        Return all rateplans having the specified rateplan as base rateplan

        :return: The base_rateplan of this RateplansListRequest.
        :rtype: str
        """
        return self._base_rateplan

    @base_rateplan.setter
    def base_rateplan(self, base_rateplan):
        """Sets the base_rateplan of this RateplansListRequest.

        Return all rateplans having the specified rateplan as base rateplan

        :param base_rateplan: The base_rateplan of this RateplansListRequest.
        :type base_rateplan: str
        """

        self._base_rateplan = base_rateplan

    @property
    def channel_code(self):
        """Gets the channel_code of this RateplansListRequest.

        Return all rateplans sold through the specified channel

        :return: The channel_code of this RateplansListRequest.
        :rtype: str
        """
        return self._channel_code

    @channel_code.setter
    def channel_code(self, channel_code):
        """Sets the channel_code of this RateplansListRequest.

        Return all rateplans sold through the specified channel

        :param channel_code: The channel_code of this RateplansListRequest.
        :type channel_code: str
        """

        self._channel_code = channel_code

    @property
    def channel_group(self):
        """Gets the channel_group of this RateplansListRequest.

        Return all rateplans that are sold through at least one channel out of the specified channel group

        :return: The channel_group of this RateplansListRequest.
        :rtype: str
        """
        return self._channel_group

    @channel_group.setter
    def channel_group(self, channel_group):
        """Sets the channel_group of this RateplansListRequest.

        Return all rateplans that are sold through at least one channel out of the specified channel group

        :param channel_group: The channel_group of this RateplansListRequest.
        :type channel_group: str
        """

        self._channel_group = channel_group

    @property
    def commissionable(self):
        """Gets the commissionable of this RateplansListRequest.

        Return all rateplans having commisionable status

        :return: The commissionable of this RateplansListRequest.
        :rtype: bool
        """
        return self._commissionable

    @commissionable.setter
    def commissionable(self, commissionable):
        """Sets the commissionable of this RateplansListRequest.

        Return all rateplans having commisionable status

        :param commissionable: The commissionable of this RateplansListRequest.
        :type commissionable: bool
        """

        self._commissionable = commissionable

    @property
    def group(self):
        """Gets the group of this RateplansListRequest.

        Return all rateplans belonging to the specified rateplan group

        :return: The group of this RateplansListRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this RateplansListRequest.

        Return all rateplans belonging to the specified rateplan group

        :param group: The group of this RateplansListRequest.
        :type group: str
        """

        self._group = group

    @property
    def included_services(self):
        """Gets the included_services of this RateplansListRequest.

        Return all rateplans having at least one of the specified services included

        :return: The included_services of this RateplansListRequest.
        :rtype: List[str]
        """
        return self._included_services

    @included_services.setter
    def included_services(self, included_services):
        """Sets the included_services of this RateplansListRequest.

        Return all rateplans having at least one of the specified services included

        :param included_services: The included_services of this RateplansListRequest.
        :type included_services: List[str]
        """

        self._included_services = included_services

    @property
    def market_codes(self):
        """Gets the market_codes of this RateplansListRequest.

        Return all rateplans having one of the specified values as a market code

        :return: The market_codes of this RateplansListRequest.
        :rtype: List[str]
        """
        return self._market_codes

    @market_codes.setter
    def market_codes(self, market_codes):
        """Sets the market_codes of this RateplansListRequest.

        Return all rateplans having one of the specified values as a market code

        :param market_codes: The market_codes of this RateplansListRequest.
        :type market_codes: List[str]
        """

        self._market_codes = market_codes

    @property
    def room_types(self):
        """Gets the room_types of this RateplansListRequest.

        Return all rateplans by which at least one of the specified room types are sold

        :return: The room_types of this RateplansListRequest.
        :rtype: List[str]
        """
        return self._room_types

    @room_types.setter
    def room_types(self, room_types):
        """Sets the room_types of this RateplansListRequest.

        Return all rateplans by which at least one of the specified room types are sold

        :param room_types: The room_types of this RateplansListRequest.
        :type room_types: List[str]
        """

        self._room_types = room_types

    @property
    def selling_status(self):
        """Gets the selling_status of this RateplansListRequest.

        Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans.

        :return: The selling_status of this RateplansListRequest.
        :rtype: str
        """
        return self._selling_status

    @selling_status.setter
    def selling_status(self, selling_status):
        """Sets the selling_status of this RateplansListRequest.

        Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans.

        :param selling_status: The selling_status of this RateplansListRequest.
        :type selling_status: str
        """
        allowed_values = ["Active", "Inactive", "All"]  # noqa: E501
        if selling_status not in allowed_values:
            raise ValueError(
                "Invalid value for `selling_status` ({0}), must be one of {1}"
                .format(selling_status, allowed_values)
            )

        self._selling_status = selling_status
