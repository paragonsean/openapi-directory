# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRoomListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amenities: List[str]=None, conditions: List[str]=None, locations: List[str]=None, maintenances: List[str]=None, occupancy: str=None, room_types: List[str]=None, views: List[str]=None):
        """GetRoomListRequest - a model defined in OpenAPI

        :param amenities: The amenities of this GetRoomListRequest.
        :param conditions: The conditions of this GetRoomListRequest.
        :param locations: The locations of this GetRoomListRequest.
        :param maintenances: The maintenances of this GetRoomListRequest.
        :param occupancy: The occupancy of this GetRoomListRequest.
        :param room_types: The room_types of this GetRoomListRequest.
        :param views: The views of this GetRoomListRequest.
        """
        self.openapi_types = {
            'amenities': List[str],
            'conditions': List[str],
            'locations': List[str],
            'maintenances': List[str],
            'occupancy': str,
            'room_types': List[str],
            'views': List[str]
        }

        self.attribute_map = {
            'amenities': 'amenities',
            'conditions': 'conditions',
            'locations': 'locations',
            'maintenances': 'maintenances',
            'occupancy': 'occupancy',
            'room_types': 'roomTypes',
            'views': 'views'
        }

        self._amenities = amenities
        self._conditions = conditions
        self._locations = locations
        self._maintenances = maintenances
        self._occupancy = occupancy
        self._room_types = room_types
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRoomListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRoomListRequest of this GetRoomListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amenities(self):
        """Gets the amenities of this GetRoomListRequest.

        Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.

        :return: The amenities of this GetRoomListRequest.
        :rtype: List[str]
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this GetRoomListRequest.

        Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.

        :param amenities: The amenities of this GetRoomListRequest.
        :type amenities: List[str]
        """

        self._amenities = amenities

    @property
    def conditions(self):
        """Gets the conditions of this GetRoomListRequest.

        Return results only for rooms that have the given room condition status.

        :return: The conditions of this GetRoomListRequest.
        :rtype: List[str]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GetRoomListRequest.

        Return results only for rooms that have the given room condition status.

        :param conditions: The conditions of this GetRoomListRequest.
        :type conditions: List[str]
        """
        allowed_values = ["CleanNotInspected", "Clean", "Dirty"]  # noqa: E501
        if not set(conditions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `conditions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(conditions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._conditions = conditions

    @property
    def locations(self):
        """Gets the locations of this GetRoomListRequest.

        Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.

        :return: The locations of this GetRoomListRequest.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this GetRoomListRequest.

        Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.

        :param locations: The locations of this GetRoomListRequest.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def maintenances(self):
        """Gets the maintenances of this GetRoomListRequest.

        Return results only for rooms that have the given maintenance status.

        :return: The maintenances of this GetRoomListRequest.
        :rtype: List[str]
        """
        return self._maintenances

    @maintenances.setter
    def maintenances(self, maintenances):
        """Sets the maintenances of this GetRoomListRequest.

        Return results only for rooms that have the given maintenance status.

        :param maintenances: The maintenances of this GetRoomListRequest.
        :type maintenances: List[str]
        """
        allowed_values = ["NotSet", "None", "OutOfInventory", "OutOfOrder", "OutOfService"]  # noqa: E501
        if not set(maintenances).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `maintenances` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(maintenances) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._maintenances = maintenances

    @property
    def occupancy(self):
        """Gets the occupancy of this GetRoomListRequest.

        Return results only for rooms that have the given frontdesk ocuppancy status.

        :return: The occupancy of this GetRoomListRequest.
        :rtype: str
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this GetRoomListRequest.

        Return results only for rooms that have the given frontdesk ocuppancy status.

        :param occupancy: The occupancy of this GetRoomListRequest.
        :type occupancy: str
        """
        allowed_values = ["Occupied", "Vacant"]  # noqa: E501
        if occupancy not in allowed_values:
            raise ValueError(
                "Invalid value for `occupancy` ({0}), must be one of {1}"
                .format(occupancy, allowed_values)
            )

        self._occupancy = occupancy

    @property
    def room_types(self):
        """Gets the room_types of this GetRoomListRequest.

        Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.

        :return: The room_types of this GetRoomListRequest.
        :rtype: List[str]
        """
        return self._room_types

    @room_types.setter
    def room_types(self, room_types):
        """Sets the room_types of this GetRoomListRequest.

        Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.

        :param room_types: The room_types of this GetRoomListRequest.
        :type room_types: List[str]
        """

        self._room_types = room_types

    @property
    def views(self):
        """Gets the views of this GetRoomListRequest.

        Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.

        :return: The views of this GetRoomListRequest.
        :rtype: List[str]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this GetRoomListRequest.

        Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.

        :param views: The views of this GetRoomListRequest.
        :type views: List[str]
        """

        self._views = views
