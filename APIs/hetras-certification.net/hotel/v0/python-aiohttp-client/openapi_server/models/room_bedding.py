# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoomBedding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, type: str=None):
        """RoomBedding - a model defined in OpenAPI

        :param count: The count of this RoomBedding.
        :param type: The type of this RoomBedding.
        """
        self.openapi_types = {
            'count': int,
            'type': str
        }

        self.attribute_map = {
            'count': 'count',
            'type': 'type'
        }

        self._count = count
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoomBedding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoomBedding of this RoomBedding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this RoomBedding.

        Number of available beds of the specified type

        :return: The count of this RoomBedding.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RoomBedding.

        Number of available beds of the specified type

        :param count: The count of this RoomBedding.
        :type count: int
        """

        self._count = count

    @property
    def type(self):
        """Gets the type of this RoomBedding.

        The type of bed

        :return: The type of this RoomBedding.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RoomBedding.

        The type of bed

        :param type: The type of this RoomBedding.
        :type type: str
        """
        allowed_values = ["NotDefined", "Double", "Futon", "King", "MurphyBed", "Queen", "SofaBed", "TatamiMats", "Twin", "Single"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
