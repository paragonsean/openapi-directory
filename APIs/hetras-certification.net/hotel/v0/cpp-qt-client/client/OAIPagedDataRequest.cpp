/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagedDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagedDataRequest::OAIPagedDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagedDataRequest::OAIPagedDataRequest() {
    this->initializeModel();
}

OAIPagedDataRequest::~OAIPagedDataRequest() {}

void OAIPagedDataRequest::initializeModel() {

    m_inlinecount_isSet = false;
    m_inlinecount_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;
}

void OAIPagedDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagedDataRequest::fromJsonObject(QJsonObject json) {

    m_inlinecount_isValid = ::OpenAPI::fromJsonValue(m_inlinecount, json[QString("inlinecount")]);
    m_inlinecount_isSet = !json[QString("inlinecount")].isNull() && m_inlinecount_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;
}

QString OAIPagedDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagedDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_inlinecount_isSet) {
        obj.insert(QString("inlinecount"), ::OpenAPI::toJsonValue(m_inlinecount));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    return obj;
}

QString OAIPagedDataRequest::getInlinecount() const {
    return m_inlinecount;
}
void OAIPagedDataRequest::setInlinecount(const QString &inlinecount) {
    m_inlinecount = inlinecount;
    m_inlinecount_isSet = true;
}

bool OAIPagedDataRequest::is_inlinecount_Set() const{
    return m_inlinecount_isSet;
}

bool OAIPagedDataRequest::is_inlinecount_Valid() const{
    return m_inlinecount_isValid;
}

qint32 OAIPagedDataRequest::getSkip() const {
    return m_skip;
}
void OAIPagedDataRequest::setSkip(const qint32 &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIPagedDataRequest::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIPagedDataRequest::is_skip_Valid() const{
    return m_skip_isValid;
}

qint32 OAIPagedDataRequest::getTop() const {
    return m_top;
}
void OAIPagedDataRequest::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIPagedDataRequest::is_top_Set() const{
    return m_top_isSet;
}

bool OAIPagedDataRequest::is_top_Valid() const{
    return m_top_isValid;
}

bool OAIPagedDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inlinecount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagedDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
