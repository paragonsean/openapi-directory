/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoomType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoomType::OAIRoomType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoomType::OAIRoomType() {
    this->initializeModel();
}

OAIRoomType::~OAIRoomType() {}

void OAIRoomType::initializeModel() {

    m_amenities_isSet = false;
    m_amenities_isValid = false;

    m_bedding_type_isSet = false;
    m_bedding_type_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expected_occupancy_isSet = false;
    m_expected_occupancy_isValid = false;

    m_facilities_isSet = false;
    m_facilities_isValid = false;

    m_max_persons_isSet = false;
    m_max_persons_isValid = false;

    m_min_persons_isSet = false;
    m_min_persons_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIRoomType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoomType::fromJsonObject(QJsonObject json) {

    m_amenities_isValid = ::OpenAPI::fromJsonValue(m_amenities, json[QString("amenities")]);
    m_amenities_isSet = !json[QString("amenities")].isNull() && m_amenities_isValid;

    m_bedding_type_isValid = ::OpenAPI::fromJsonValue(m_bedding_type, json[QString("bedding_type")]);
    m_bedding_type_isSet = !json[QString("bedding_type")].isNull() && m_bedding_type_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expected_occupancy_isValid = ::OpenAPI::fromJsonValue(m_expected_occupancy, json[QString("expected_occupancy")]);
    m_expected_occupancy_isSet = !json[QString("expected_occupancy")].isNull() && m_expected_occupancy_isValid;

    m_facilities_isValid = ::OpenAPI::fromJsonValue(m_facilities, json[QString("facilities")]);
    m_facilities_isSet = !json[QString("facilities")].isNull() && m_facilities_isValid;

    m_max_persons_isValid = ::OpenAPI::fromJsonValue(m_max_persons, json[QString("max_persons")]);
    m_max_persons_isSet = !json[QString("max_persons")].isNull() && m_max_persons_isValid;

    m_min_persons_isValid = ::OpenAPI::fromJsonValue(m_min_persons, json[QString("min_persons")]);
    m_min_persons_isSet = !json[QString("min_persons")].isNull() && m_min_persons_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIRoomType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoomType::asJsonObject() const {
    QJsonObject obj;
    if (m_amenities.size() > 0) {
        obj.insert(QString("amenities"), ::OpenAPI::toJsonValue(m_amenities));
    }
    if (m_bedding_type_isSet) {
        obj.insert(QString("bedding_type"), ::OpenAPI::toJsonValue(m_bedding_type));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expected_occupancy_isSet) {
        obj.insert(QString("expected_occupancy"), ::OpenAPI::toJsonValue(m_expected_occupancy));
    }
    if (m_facilities.size() > 0) {
        obj.insert(QString("facilities"), ::OpenAPI::toJsonValue(m_facilities));
    }
    if (m_max_persons_isSet) {
        obj.insert(QString("max_persons"), ::OpenAPI::toJsonValue(m_max_persons));
    }
    if (m_min_persons_isSet) {
        obj.insert(QString("min_persons"), ::OpenAPI::toJsonValue(m_min_persons));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QList<OAISimpleAttribute> OAIRoomType::getAmenities() const {
    return m_amenities;
}
void OAIRoomType::setAmenities(const QList<OAISimpleAttribute> &amenities) {
    m_amenities = amenities;
    m_amenities_isSet = true;
}

bool OAIRoomType::is_amenities_Set() const{
    return m_amenities_isSet;
}

bool OAIRoomType::is_amenities_Valid() const{
    return m_amenities_isValid;
}

QString OAIRoomType::getBeddingType() const {
    return m_bedding_type;
}
void OAIRoomType::setBeddingType(const QString &bedding_type) {
    m_bedding_type = bedding_type;
    m_bedding_type_isSet = true;
}

bool OAIRoomType::is_bedding_type_Set() const{
    return m_bedding_type_isSet;
}

bool OAIRoomType::is_bedding_type_Valid() const{
    return m_bedding_type_isValid;
}

QString OAIRoomType::getCode() const {
    return m_code;
}
void OAIRoomType::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIRoomType::is_code_Set() const{
    return m_code_isSet;
}

bool OAIRoomType::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIRoomType::getCreated() const {
    return m_created;
}
void OAIRoomType::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRoomType::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRoomType::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIRoomType::isRDefault() const {
    return m_r_default;
}
void OAIRoomType::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIRoomType::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIRoomType::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIRoomType::getDescription() const {
    return m_description;
}
void OAIRoomType::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRoomType::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRoomType::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIRoomType::getExpectedOccupancy() const {
    return m_expected_occupancy;
}
void OAIRoomType::setExpectedOccupancy(const qint32 &expected_occupancy) {
    m_expected_occupancy = expected_occupancy;
    m_expected_occupancy_isSet = true;
}

bool OAIRoomType::is_expected_occupancy_Set() const{
    return m_expected_occupancy_isSet;
}

bool OAIRoomType::is_expected_occupancy_Valid() const{
    return m_expected_occupancy_isValid;
}

QList<OAISimpleAttribute> OAIRoomType::getFacilities() const {
    return m_facilities;
}
void OAIRoomType::setFacilities(const QList<OAISimpleAttribute> &facilities) {
    m_facilities = facilities;
    m_facilities_isSet = true;
}

bool OAIRoomType::is_facilities_Set() const{
    return m_facilities_isSet;
}

bool OAIRoomType::is_facilities_Valid() const{
    return m_facilities_isValid;
}

qint32 OAIRoomType::getMaxPersons() const {
    return m_max_persons;
}
void OAIRoomType::setMaxPersons(const qint32 &max_persons) {
    m_max_persons = max_persons;
    m_max_persons_isSet = true;
}

bool OAIRoomType::is_max_persons_Set() const{
    return m_max_persons_isSet;
}

bool OAIRoomType::is_max_persons_Valid() const{
    return m_max_persons_isValid;
}

qint32 OAIRoomType::getMinPersons() const {
    return m_min_persons;
}
void OAIRoomType::setMinPersons(const qint32 &min_persons) {
    m_min_persons = min_persons;
    m_min_persons_isSet = true;
}

bool OAIRoomType::is_min_persons_Set() const{
    return m_min_persons_isSet;
}

bool OAIRoomType::is_min_persons_Valid() const{
    return m_min_persons_isValid;
}

QString OAIRoomType::getName() const {
    return m_name;
}
void OAIRoomType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoomType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoomType::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIRoomType::getUpdated() const {
    return m_updated;
}
void OAIRoomType::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIRoomType::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIRoomType::is_updated_Valid() const{
    return m_updated_isValid;
}

QList<OAISimpleAttribute> OAIRoomType::getViews() const {
    return m_views;
}
void OAIRoomType::setViews(const QList<OAISimpleAttribute> &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIRoomType::is_views_Set() const{
    return m_views_isSet;
}

bool OAIRoomType::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIRoomType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amenities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bedding_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_persons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_persons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoomType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
