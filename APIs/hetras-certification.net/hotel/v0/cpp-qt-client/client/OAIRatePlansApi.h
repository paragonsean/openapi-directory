/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRatePlansApi_H
#define OAI_OAIRatePlansApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExtendedRateplanEntry.h"
#include "OAIObject.h"
#include "OAIOperation_RatePatchRequest.h"
#include "OAIRateResponse.h"
#include "OAIRateplansListResponse.h"
#include "OAIRatesBatchUpdateRequestItem.h"
#include "OAIRatesResponse.h"
#include "OAITotalCountResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRatePlansApi : public QObject {
    Q_OBJECT

public:
    OAIRatePlansApi(const int timeOut = 0);
    ~OAIRatePlansApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  request QList<OAIRatesBatchUpdateRequestItem> [required]
    */
    virtual void ratePlansBatchUpdateRates(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QList<OAIRatesBatchUpdateRequestItem> &request);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  rateplan_code QString [required]
    * @param[in]  business_day QDateTime [required]
    */
    virtual void ratePlansGetRate(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &business_day);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  rateplan_code QString [required]
    */
    virtual void ratePlansGetRateplan(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  selling_status QString [optional]
    * @param[in]  commissionable bool [optional]
    * @param[in]  group QString [optional]
    * @param[in]  base_rateplan QString [optional]
    * @param[in]  channel_group QString [optional]
    * @param[in]  channel_code QString [optional]
    * @param[in]  market_codes QList<QString> [optional]
    * @param[in]  room_types QList<QString> [optional]
    * @param[in]  included_services QList<QString> [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  inlinecount QString [optional]
    */
    virtual void ratePlansGetRateplans(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const ::OpenAPI::OptionalParam<QString> &selling_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &commissionable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_rateplan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &market_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &room_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &included_services = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &inlinecount = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  selling_status QString [optional]
    * @param[in]  commissionable bool [optional]
    * @param[in]  group QString [optional]
    * @param[in]  base_rateplan QString [optional]
    * @param[in]  channel_group QString [optional]
    * @param[in]  channel_code QString [optional]
    * @param[in]  market_codes QList<QString> [optional]
    * @param[in]  room_types QList<QString> [optional]
    * @param[in]  included_services QList<QString> [optional]
    */
    virtual void ratePlansGetRateplansCount(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const ::OpenAPI::OptionalParam<QString> &selling_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &commissionable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_rateplan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &market_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &room_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &included_services = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  rateplan_code QString [required]
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [required]
    * @param[in]  expand QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  inlinecount QString [optional]
    */
    virtual void ratePlansGetRates(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &from, const QDateTime &to, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &inlinecount = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  rateplan_code QString [required]
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [required]
    */
    virtual void ratePlansGetRatesCount(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &from, const QDateTime &to);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  rateplan_code QString [required]
    * @param[in]  business_day QDateTime [required]
    * @param[in]  patch_request QList<OAIOperation_RatePatchRequest> [required]
    */
    virtual void ratePlansPatchRate(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &business_day, const QList<OAIOperation_RatePatchRequest> &patch_request);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  rateplan_code QString [required]
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [required]
    * @param[in]  patch_request QList<OAIOperation_RatePatchRequest> [required]
    */
    virtual void ratePlansPatchRates(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &from, const QDateTime &to, const QList<OAIOperation_RatePatchRequest> &patch_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ratePlansBatchUpdateRatesCallback(OAIHttpRequestWorker *worker);
    void ratePlansGetRateCallback(OAIHttpRequestWorker *worker);
    void ratePlansGetRateplanCallback(OAIHttpRequestWorker *worker);
    void ratePlansGetRateplansCallback(OAIHttpRequestWorker *worker);
    void ratePlansGetRateplansCountCallback(OAIHttpRequestWorker *worker);
    void ratePlansGetRatesCallback(OAIHttpRequestWorker *worker);
    void ratePlansGetRatesCountCallback(OAIHttpRequestWorker *worker);
    void ratePlansPatchRateCallback(OAIHttpRequestWorker *worker);
    void ratePlansPatchRatesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ratePlansBatchUpdateRatesSignal(OAIObject summary);
    void ratePlansGetRateSignal(OAIRateResponse summary);
    void ratePlansGetRateplanSignal(OAIExtendedRateplanEntry summary);
    void ratePlansGetRateplansSignal(OAIRateplansListResponse summary);
    void ratePlansGetRateplansCountSignal(OAITotalCountResponse summary);
    void ratePlansGetRatesSignal(OAIRatesResponse summary);
    void ratePlansGetRatesCountSignal(OAITotalCountResponse summary);
    void ratePlansPatchRateSignal(OAIObject summary);
    void ratePlansPatchRatesSignal(OAIObject summary);


    void ratePlansBatchUpdateRatesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void ratePlansGetRateSignalFull(OAIHttpRequestWorker *worker, OAIRateResponse summary);
    void ratePlansGetRateplanSignalFull(OAIHttpRequestWorker *worker, OAIExtendedRateplanEntry summary);
    void ratePlansGetRateplansSignalFull(OAIHttpRequestWorker *worker, OAIRateplansListResponse summary);
    void ratePlansGetRateplansCountSignalFull(OAIHttpRequestWorker *worker, OAITotalCountResponse summary);
    void ratePlansGetRatesSignalFull(OAIHttpRequestWorker *worker, OAIRatesResponse summary);
    void ratePlansGetRatesCountSignalFull(OAIHttpRequestWorker *worker, OAITotalCountResponse summary);
    void ratePlansPatchRateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void ratePlansPatchRatesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use ratePlansBatchUpdateRatesSignalError() instead")
    void ratePlansBatchUpdateRatesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansBatchUpdateRatesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRateSignalError() instead")
    void ratePlansGetRateSignalE(OAIRateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRateSignalError(OAIRateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRateplanSignalError() instead")
    void ratePlansGetRateplanSignalE(OAIExtendedRateplanEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRateplanSignalError(OAIExtendedRateplanEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRateplansSignalError() instead")
    void ratePlansGetRateplansSignalE(OAIRateplansListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRateplansSignalError(OAIRateplansListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRateplansCountSignalError() instead")
    void ratePlansGetRateplansCountSignalE(OAITotalCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRateplansCountSignalError(OAITotalCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRatesSignalError() instead")
    void ratePlansGetRatesSignalE(OAIRatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRatesSignalError(OAIRatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRatesCountSignalError() instead")
    void ratePlansGetRatesCountSignalE(OAITotalCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRatesCountSignalError(OAITotalCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansPatchRateSignalError() instead")
    void ratePlansPatchRateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansPatchRateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansPatchRatesSignalError() instead")
    void ratePlansPatchRatesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansPatchRatesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ratePlansBatchUpdateRatesSignalErrorFull() instead")
    void ratePlansBatchUpdateRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansBatchUpdateRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRateSignalErrorFull() instead")
    void ratePlansGetRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRateplanSignalErrorFull() instead")
    void ratePlansGetRateplanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRateplanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRateplansSignalErrorFull() instead")
    void ratePlansGetRateplansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRateplansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRateplansCountSignalErrorFull() instead")
    void ratePlansGetRateplansCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRateplansCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRatesSignalErrorFull() instead")
    void ratePlansGetRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansGetRatesCountSignalErrorFull() instead")
    void ratePlansGetRatesCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansGetRatesCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansPatchRateSignalErrorFull() instead")
    void ratePlansPatchRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansPatchRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ratePlansPatchRatesSignalErrorFull() instead")
    void ratePlansPatchRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ratePlansPatchRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
