/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeBaseEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeBaseEntry::OAICodeBaseEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeBaseEntry::OAICodeBaseEntry() {
    this->initializeModel();
}

OAICodeBaseEntry::~OAICodeBaseEntry() {}

void OAICodeBaseEntry::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICodeBaseEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeBaseEntry::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICodeBaseEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeBaseEntry::asJsonObject() const {
    QJsonObject obj;
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, OAILinkObject> OAICodeBaseEntry::getLinks() const {
    return m__links;
}
void OAICodeBaseEntry::setLinks(const QMap<QString, OAILinkObject> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAICodeBaseEntry::is__links_Set() const{
    return m__links_isSet;
}

bool OAICodeBaseEntry::is__links_Valid() const{
    return m__links_isValid;
}

QString OAICodeBaseEntry::getCode() const {
    return m_code;
}
void OAICodeBaseEntry::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICodeBaseEntry::is_code_Set() const{
    return m_code_isSet;
}

bool OAICodeBaseEntry::is_code_Valid() const{
    return m_code_isValid;
}

bool OAICodeBaseEntry::isRDefault() const {
    return m_r_default;
}
void OAICodeBaseEntry::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAICodeBaseEntry::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAICodeBaseEntry::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAICodeBaseEntry::getId() const {
    return m_id;
}
void OAICodeBaseEntry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICodeBaseEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAICodeBaseEntry::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICodeBaseEntry::getName() const {
    return m_name;
}
void OAICodeBaseEntry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICodeBaseEntry::is_name_Set() const{
    return m_name_isSet;
}

bool OAICodeBaseEntry::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICodeBaseEntry::getType() const {
    return m_type;
}
void OAICodeBaseEntry::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICodeBaseEntry::is_type_Set() const{
    return m_type_isSet;
}

bool OAICodeBaseEntry::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICodeBaseEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeBaseEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
