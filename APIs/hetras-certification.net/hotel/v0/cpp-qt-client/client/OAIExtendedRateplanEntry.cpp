/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedRateplanEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedRateplanEntry::OAIExtendedRateplanEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedRateplanEntry::OAIExtendedRateplanEntry() {
    this->initializeModel();
}

OAIExtendedRateplanEntry::~OAIExtendedRateplanEntry() {}

void OAIExtendedRateplanEntry::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_access_control_isSet = false;
    m_access_control_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_active_periods_isSet = false;
    m_active_periods_isValid = false;

    m_booking_periods_isSet = false;
    m_booking_periods_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_commissionable_isSet = false;
    m_commissionable_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_day_use_isSet = false;
    m_day_use_isValid = false;

    m_derivation_isSet = false;
    m_derivation_isValid = false;

    m_derived_rateplans_isSet = false;
    m_derived_rateplans_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_folio_name_isSet = false;
    m_folio_name_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_included_services_isSet = false;
    m_included_services_isValid = false;

    m_is_yieldable_isSet = false;
    m_is_yieldable_isValid = false;

    m_market_code_isSet = false;
    m_market_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_noshow_policy_isSet = false;
    m_noshow_policy_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_room_types_isSet = false;
    m_room_types_isValid = false;

    m_suspended_isSet = false;
    m_suspended_isValid = false;

    m_taxes_included_isSet = false;
    m_taxes_included_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIExtendedRateplanEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedRateplanEntry::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_access_control_isValid = ::OpenAPI::fromJsonValue(m_access_control, json[QString("access_control")]);
    m_access_control_isSet = !json[QString("access_control")].isNull() && m_access_control_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_active_periods_isValid = ::OpenAPI::fromJsonValue(m_active_periods, json[QString("active_periods")]);
    m_active_periods_isSet = !json[QString("active_periods")].isNull() && m_active_periods_isValid;

    m_booking_periods_isValid = ::OpenAPI::fromJsonValue(m_booking_periods, json[QString("booking_periods")]);
    m_booking_periods_isSet = !json[QString("booking_periods")].isNull() && m_booking_periods_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_commissionable_isValid = ::OpenAPI::fromJsonValue(m_commissionable, json[QString("commissionable")]);
    m_commissionable_isSet = !json[QString("commissionable")].isNull() && m_commissionable_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_day_use_isValid = ::OpenAPI::fromJsonValue(m_day_use, json[QString("day_use")]);
    m_day_use_isSet = !json[QString("day_use")].isNull() && m_day_use_isValid;

    m_derivation_isValid = ::OpenAPI::fromJsonValue(m_derivation, json[QString("derivation")]);
    m_derivation_isSet = !json[QString("derivation")].isNull() && m_derivation_isValid;

    m_derived_rateplans_isValid = ::OpenAPI::fromJsonValue(m_derived_rateplans, json[QString("derived_rateplans")]);
    m_derived_rateplans_isSet = !json[QString("derived_rateplans")].isNull() && m_derived_rateplans_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_folio_name_isValid = ::OpenAPI::fromJsonValue(m_folio_name, json[QString("folio_name")]);
    m_folio_name_isSet = !json[QString("folio_name")].isNull() && m_folio_name_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_included_services_isValid = ::OpenAPI::fromJsonValue(m_included_services, json[QString("included_services")]);
    m_included_services_isSet = !json[QString("included_services")].isNull() && m_included_services_isValid;

    m_is_yieldable_isValid = ::OpenAPI::fromJsonValue(m_is_yieldable, json[QString("is_yieldable")]);
    m_is_yieldable_isSet = !json[QString("is_yieldable")].isNull() && m_is_yieldable_isValid;

    m_market_code_isValid = ::OpenAPI::fromJsonValue(m_market_code, json[QString("market_code")]);
    m_market_code_isSet = !json[QString("market_code")].isNull() && m_market_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_noshow_policy_isValid = ::OpenAPI::fromJsonValue(m_noshow_policy, json[QString("noshow_policy")]);
    m_noshow_policy_isSet = !json[QString("noshow_policy")].isNull() && m_noshow_policy_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_room_types_isValid = ::OpenAPI::fromJsonValue(m_room_types, json[QString("room_types")]);
    m_room_types_isSet = !json[QString("room_types")].isNull() && m_room_types_isValid;

    m_suspended_isValid = ::OpenAPI::fromJsonValue(m_suspended, json[QString("suspended")]);
    m_suspended_isSet = !json[QString("suspended")].isNull() && m_suspended_isValid;

    m_taxes_included_isValid = ::OpenAPI::fromJsonValue(m_taxes_included, json[QString("taxes_included")]);
    m_taxes_included_isSet = !json[QString("taxes_included")].isNull() && m_taxes_included_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIExtendedRateplanEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedRateplanEntry::asJsonObject() const {
    QJsonObject obj;
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_access_control.size() > 0) {
        obj.insert(QString("access_control"), ::OpenAPI::toJsonValue(m_access_control));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_active_periods.size() > 0) {
        obj.insert(QString("active_periods"), ::OpenAPI::toJsonValue(m_active_periods));
    }
    if (m_booking_periods.size() > 0) {
        obj.insert(QString("booking_periods"), ::OpenAPI::toJsonValue(m_booking_periods));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_commissionable_isSet) {
        obj.insert(QString("commissionable"), ::OpenAPI::toJsonValue(m_commissionable));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_day_use_isSet) {
        obj.insert(QString("day_use"), ::OpenAPI::toJsonValue(m_day_use));
    }
    if (m_derivation.isSet()) {
        obj.insert(QString("derivation"), ::OpenAPI::toJsonValue(m_derivation));
    }
    if (m_derived_rateplans.size() > 0) {
        obj.insert(QString("derived_rateplans"), ::OpenAPI::toJsonValue(m_derived_rateplans));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_folio_name_isSet) {
        obj.insert(QString("folio_name"), ::OpenAPI::toJsonValue(m_folio_name));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_included_services.size() > 0) {
        obj.insert(QString("included_services"), ::OpenAPI::toJsonValue(m_included_services));
    }
    if (m_is_yieldable_isSet) {
        obj.insert(QString("is_yieldable"), ::OpenAPI::toJsonValue(m_is_yieldable));
    }
    if (m_market_code_isSet) {
        obj.insert(QString("market_code"), ::OpenAPI::toJsonValue(m_market_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_noshow_policy_isSet) {
        obj.insert(QString("noshow_policy"), ::OpenAPI::toJsonValue(m_noshow_policy));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_room_types.size() > 0) {
        obj.insert(QString("room_types"), ::OpenAPI::toJsonValue(m_room_types));
    }
    if (m_suspended_isSet) {
        obj.insert(QString("suspended"), ::OpenAPI::toJsonValue(m_suspended));
    }
    if (m_taxes_included_isSet) {
        obj.insert(QString("taxes_included"), ::OpenAPI::toJsonValue(m_taxes_included));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QMap<QString, OAILinkObject> OAIExtendedRateplanEntry::getLinks() const {
    return m__links;
}
void OAIExtendedRateplanEntry::setLinks(const QMap<QString, OAILinkObject> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIExtendedRateplanEntry::is__links_Set() const{
    return m__links_isSet;
}

bool OAIExtendedRateplanEntry::is__links_Valid() const{
    return m__links_isValid;
}

QList<OAIAccessControlInfo> OAIExtendedRateplanEntry::getAccessControl() const {
    return m_access_control;
}
void OAIExtendedRateplanEntry::setAccessControl(const QList<OAIAccessControlInfo> &access_control) {
    m_access_control = access_control;
    m_access_control_isSet = true;
}

bool OAIExtendedRateplanEntry::is_access_control_Set() const{
    return m_access_control_isSet;
}

bool OAIExtendedRateplanEntry::is_access_control_Valid() const{
    return m_access_control_isValid;
}

bool OAIExtendedRateplanEntry::isActive() const {
    return m_active;
}
void OAIExtendedRateplanEntry::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIExtendedRateplanEntry::is_active_Set() const{
    return m_active_isSet;
}

bool OAIExtendedRateplanEntry::is_active_Valid() const{
    return m_active_isValid;
}

QList<OAIDatePeriod> OAIExtendedRateplanEntry::getActivePeriods() const {
    return m_active_periods;
}
void OAIExtendedRateplanEntry::setActivePeriods(const QList<OAIDatePeriod> &active_periods) {
    m_active_periods = active_periods;
    m_active_periods_isSet = true;
}

bool OAIExtendedRateplanEntry::is_active_periods_Set() const{
    return m_active_periods_isSet;
}

bool OAIExtendedRateplanEntry::is_active_periods_Valid() const{
    return m_active_periods_isValid;
}

QList<OAIDatePeriod> OAIExtendedRateplanEntry::getBookingPeriods() const {
    return m_booking_periods;
}
void OAIExtendedRateplanEntry::setBookingPeriods(const QList<OAIDatePeriod> &booking_periods) {
    m_booking_periods = booking_periods;
    m_booking_periods_isSet = true;
}

bool OAIExtendedRateplanEntry::is_booking_periods_Set() const{
    return m_booking_periods_isSet;
}

bool OAIExtendedRateplanEntry::is_booking_periods_Valid() const{
    return m_booking_periods_isValid;
}

QString OAIExtendedRateplanEntry::getCode() const {
    return m_code;
}
void OAIExtendedRateplanEntry::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIExtendedRateplanEntry::is_code_Set() const{
    return m_code_isSet;
}

bool OAIExtendedRateplanEntry::is_code_Valid() const{
    return m_code_isValid;
}

bool OAIExtendedRateplanEntry::isCommissionable() const {
    return m_commissionable;
}
void OAIExtendedRateplanEntry::setCommissionable(const bool &commissionable) {
    m_commissionable = commissionable;
    m_commissionable_isSet = true;
}

bool OAIExtendedRateplanEntry::is_commissionable_Set() const{
    return m_commissionable_isSet;
}

bool OAIExtendedRateplanEntry::is_commissionable_Valid() const{
    return m_commissionable_isValid;
}

QDateTime OAIExtendedRateplanEntry::getCreated() const {
    return m_created;
}
void OAIExtendedRateplanEntry::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIExtendedRateplanEntry::is_created_Set() const{
    return m_created_isSet;
}

bool OAIExtendedRateplanEntry::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIExtendedRateplanEntry::isDayUse() const {
    return m_day_use;
}
void OAIExtendedRateplanEntry::setDayUse(const bool &day_use) {
    m_day_use = day_use;
    m_day_use_isSet = true;
}

bool OAIExtendedRateplanEntry::is_day_use_Set() const{
    return m_day_use_isSet;
}

bool OAIExtendedRateplanEntry::is_day_use_Valid() const{
    return m_day_use_isValid;
}

OAIDerivation OAIExtendedRateplanEntry::getDerivation() const {
    return m_derivation;
}
void OAIExtendedRateplanEntry::setDerivation(const OAIDerivation &derivation) {
    m_derivation = derivation;
    m_derivation_isSet = true;
}

bool OAIExtendedRateplanEntry::is_derivation_Set() const{
    return m_derivation_isSet;
}

bool OAIExtendedRateplanEntry::is_derivation_Valid() const{
    return m_derivation_isValid;
}

QList<OAIRelatedRateplan> OAIExtendedRateplanEntry::getDerivedRateplans() const {
    return m_derived_rateplans;
}
void OAIExtendedRateplanEntry::setDerivedRateplans(const QList<OAIRelatedRateplan> &derived_rateplans) {
    m_derived_rateplans = derived_rateplans;
    m_derived_rateplans_isSet = true;
}

bool OAIExtendedRateplanEntry::is_derived_rateplans_Set() const{
    return m_derived_rateplans_isSet;
}

bool OAIExtendedRateplanEntry::is_derived_rateplans_Valid() const{
    return m_derived_rateplans_isValid;
}

QString OAIExtendedRateplanEntry::getDescription() const {
    return m_description;
}
void OAIExtendedRateplanEntry::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExtendedRateplanEntry::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExtendedRateplanEntry::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIExtendedRateplanEntry::getFolioName() const {
    return m_folio_name;
}
void OAIExtendedRateplanEntry::setFolioName(const QString &folio_name) {
    m_folio_name = folio_name;
    m_folio_name_isSet = true;
}

bool OAIExtendedRateplanEntry::is_folio_name_Set() const{
    return m_folio_name_isSet;
}

bool OAIExtendedRateplanEntry::is_folio_name_Valid() const{
    return m_folio_name_isValid;
}

OAIRateplanGroup OAIExtendedRateplanEntry::getGroup() const {
    return m_group;
}
void OAIExtendedRateplanEntry::setGroup(const OAIRateplanGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIExtendedRateplanEntry::is_group_Set() const{
    return m_group_isSet;
}

bool OAIExtendedRateplanEntry::is_group_Valid() const{
    return m_group_isValid;
}

QList<QString> OAIExtendedRateplanEntry::getIncludedServices() const {
    return m_included_services;
}
void OAIExtendedRateplanEntry::setIncludedServices(const QList<QString> &included_services) {
    m_included_services = included_services;
    m_included_services_isSet = true;
}

bool OAIExtendedRateplanEntry::is_included_services_Set() const{
    return m_included_services_isSet;
}

bool OAIExtendedRateplanEntry::is_included_services_Valid() const{
    return m_included_services_isValid;
}

bool OAIExtendedRateplanEntry::isIsYieldable() const {
    return m_is_yieldable;
}
void OAIExtendedRateplanEntry::setIsYieldable(const bool &is_yieldable) {
    m_is_yieldable = is_yieldable;
    m_is_yieldable_isSet = true;
}

bool OAIExtendedRateplanEntry::is_is_yieldable_Set() const{
    return m_is_yieldable_isSet;
}

bool OAIExtendedRateplanEntry::is_is_yieldable_Valid() const{
    return m_is_yieldable_isValid;
}

QString OAIExtendedRateplanEntry::getMarketCode() const {
    return m_market_code;
}
void OAIExtendedRateplanEntry::setMarketCode(const QString &market_code) {
    m_market_code = market_code;
    m_market_code_isSet = true;
}

bool OAIExtendedRateplanEntry::is_market_code_Set() const{
    return m_market_code_isSet;
}

bool OAIExtendedRateplanEntry::is_market_code_Valid() const{
    return m_market_code_isValid;
}

QString OAIExtendedRateplanEntry::getName() const {
    return m_name;
}
void OAIExtendedRateplanEntry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExtendedRateplanEntry::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExtendedRateplanEntry::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExtendedRateplanEntry::getNoshowPolicy() const {
    return m_noshow_policy;
}
void OAIExtendedRateplanEntry::setNoshowPolicy(const QString &noshow_policy) {
    m_noshow_policy = noshow_policy;
    m_noshow_policy_isSet = true;
}

bool OAIExtendedRateplanEntry::is_noshow_policy_Set() const{
    return m_noshow_policy_isSet;
}

bool OAIExtendedRateplanEntry::is_noshow_policy_Valid() const{
    return m_noshow_policy_isValid;
}

OAIRestrictions OAIExtendedRateplanEntry::getRestrictions() const {
    return m_restrictions;
}
void OAIExtendedRateplanEntry::setRestrictions(const OAIRestrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIExtendedRateplanEntry::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIExtendedRateplanEntry::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QList<OAIEmbeddedRoomType> OAIExtendedRateplanEntry::getRoomTypes() const {
    return m_room_types;
}
void OAIExtendedRateplanEntry::setRoomTypes(const QList<OAIEmbeddedRoomType> &room_types) {
    m_room_types = room_types;
    m_room_types_isSet = true;
}

bool OAIExtendedRateplanEntry::is_room_types_Set() const{
    return m_room_types_isSet;
}

bool OAIExtendedRateplanEntry::is_room_types_Valid() const{
    return m_room_types_isValid;
}

bool OAIExtendedRateplanEntry::isSuspended() const {
    return m_suspended;
}
void OAIExtendedRateplanEntry::setSuspended(const bool &suspended) {
    m_suspended = suspended;
    m_suspended_isSet = true;
}

bool OAIExtendedRateplanEntry::is_suspended_Set() const{
    return m_suspended_isSet;
}

bool OAIExtendedRateplanEntry::is_suspended_Valid() const{
    return m_suspended_isValid;
}

bool OAIExtendedRateplanEntry::isTaxesIncluded() const {
    return m_taxes_included;
}
void OAIExtendedRateplanEntry::setTaxesIncluded(const bool &taxes_included) {
    m_taxes_included = taxes_included;
    m_taxes_included_isSet = true;
}

bool OAIExtendedRateplanEntry::is_taxes_included_Set() const{
    return m_taxes_included_isSet;
}

bool OAIExtendedRateplanEntry::is_taxes_included_Valid() const{
    return m_taxes_included_isValid;
}

QDateTime OAIExtendedRateplanEntry::getUpdated() const {
    return m_updated;
}
void OAIExtendedRateplanEntry::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIExtendedRateplanEntry::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIExtendedRateplanEntry::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIExtendedRateplanEntry::getVisibility() const {
    return m_visibility;
}
void OAIExtendedRateplanEntry::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIExtendedRateplanEntry::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIExtendedRateplanEntry::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIExtendedRateplanEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commissionable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_derivation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived_rateplans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folio_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_yieldable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noshow_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedRateplanEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
