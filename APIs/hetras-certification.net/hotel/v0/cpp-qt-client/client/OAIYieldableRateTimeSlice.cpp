/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIYieldableRateTimeSlice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIYieldableRateTimeSlice::OAIYieldableRateTimeSlice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIYieldableRateTimeSlice::OAIYieldableRateTimeSlice() {
    this->initializeModel();
}

OAIYieldableRateTimeSlice::~OAIYieldableRateTimeSlice() {}

void OAIYieldableRateTimeSlice::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_number_of_persons_isSet = false;
    m_number_of_persons_isValid = false;

    m_rate_value_isSet = false;
    m_rate_value_isValid = false;

    m_room_type_isSet = false;
    m_room_type_isValid = false;
}

void OAIYieldableRateTimeSlice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIYieldableRateTimeSlice::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_number_of_persons_isValid = ::OpenAPI::fromJsonValue(m_number_of_persons, json[QString("number_of_persons")]);
    m_number_of_persons_isSet = !json[QString("number_of_persons")].isNull() && m_number_of_persons_isValid;

    m_rate_value_isValid = ::OpenAPI::fromJsonValue(m_rate_value, json[QString("rate_value")]);
    m_rate_value_isSet = !json[QString("rate_value")].isNull() && m_rate_value_isValid;

    m_room_type_isValid = ::OpenAPI::fromJsonValue(m_room_type, json[QString("room_type")]);
    m_room_type_isSet = !json[QString("room_type")].isNull() && m_room_type_isValid;
}

QString OAIYieldableRateTimeSlice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIYieldableRateTimeSlice::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_number_of_persons_isSet) {
        obj.insert(QString("number_of_persons"), ::OpenAPI::toJsonValue(m_number_of_persons));
    }
    if (m_rate_value_isSet) {
        obj.insert(QString("rate_value"), ::OpenAPI::toJsonValue(m_rate_value));
    }
    if (m_room_type_isSet) {
        obj.insert(QString("room_type"), ::OpenAPI::toJsonValue(m_room_type));
    }
    return obj;
}

QDateTime OAIYieldableRateTimeSlice::getDate() const {
    return m_date;
}
void OAIYieldableRateTimeSlice::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIYieldableRateTimeSlice::is_date_Set() const{
    return m_date_isSet;
}

bool OAIYieldableRateTimeSlice::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIYieldableRateTimeSlice::getNumberOfPersons() const {
    return m_number_of_persons;
}
void OAIYieldableRateTimeSlice::setNumberOfPersons(const qint32 &number_of_persons) {
    m_number_of_persons = number_of_persons;
    m_number_of_persons_isSet = true;
}

bool OAIYieldableRateTimeSlice::is_number_of_persons_Set() const{
    return m_number_of_persons_isSet;
}

bool OAIYieldableRateTimeSlice::is_number_of_persons_Valid() const{
    return m_number_of_persons_isValid;
}

double OAIYieldableRateTimeSlice::getRateValue() const {
    return m_rate_value;
}
void OAIYieldableRateTimeSlice::setRateValue(const double &rate_value) {
    m_rate_value = rate_value;
    m_rate_value_isSet = true;
}

bool OAIYieldableRateTimeSlice::is_rate_value_Set() const{
    return m_rate_value_isSet;
}

bool OAIYieldableRateTimeSlice::is_rate_value_Valid() const{
    return m_rate_value_isValid;
}

QString OAIYieldableRateTimeSlice::getRoomType() const {
    return m_room_type;
}
void OAIYieldableRateTimeSlice::setRoomType(const QString &room_type) {
    m_room_type = room_type;
    m_room_type_isSet = true;
}

bool OAIYieldableRateTimeSlice::is_room_type_Set() const{
    return m_room_type_isSet;
}

bool OAIYieldableRateTimeSlice::is_room_type_Valid() const{
    return m_room_type_isValid;
}

bool OAIYieldableRateTimeSlice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_persons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIYieldableRateTimeSlice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_of_persons_isValid && m_rate_value_isValid && m_room_type_isValid && true;
}

} // namespace OpenAPI
