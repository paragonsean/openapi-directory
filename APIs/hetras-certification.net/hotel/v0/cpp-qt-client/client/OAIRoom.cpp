/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoom::OAIRoom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoom::OAIRoom() {
    this->initializeModel();
}

OAIRoom::~OAIRoom() {}

void OAIRoom::initializeModel() {

    m_amenities_isSet = false;
    m_amenities_isValid = false;

    m_beddings_isSet = false;
    m_beddings_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expected_occupancy_isSet = false;
    m_expected_occupancy_isValid = false;

    m_extra_bed_allowed_isSet = false;
    m_extra_bed_allowed_isValid = false;

    m_floor_isSet = false;
    m_floor_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_max_persons_isSet = false;
    m_max_persons_isValid = false;

    m_min_persons_isSet = false;
    m_min_persons_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_reservations_isSet = false;
    m_reservations_isValid = false;

    m_room_type_isSet = false;
    m_room_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIRoom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoom::fromJsonObject(QJsonObject json) {

    m_amenities_isValid = ::OpenAPI::fromJsonValue(m_amenities, json[QString("amenities")]);
    m_amenities_isSet = !json[QString("amenities")].isNull() && m_amenities_isValid;

    m_beddings_isValid = ::OpenAPI::fromJsonValue(m_beddings, json[QString("beddings")]);
    m_beddings_isSet = !json[QString("beddings")].isNull() && m_beddings_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expected_occupancy_isValid = ::OpenAPI::fromJsonValue(m_expected_occupancy, json[QString("expected_occupancy")]);
    m_expected_occupancy_isSet = !json[QString("expected_occupancy")].isNull() && m_expected_occupancy_isValid;

    m_extra_bed_allowed_isValid = ::OpenAPI::fromJsonValue(m_extra_bed_allowed, json[QString("extra_bed_allowed")]);
    m_extra_bed_allowed_isSet = !json[QString("extra_bed_allowed")].isNull() && m_extra_bed_allowed_isValid;

    m_floor_isValid = ::OpenAPI::fromJsonValue(m_floor, json[QString("floor")]);
    m_floor_isSet = !json[QString("floor")].isNull() && m_floor_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_max_persons_isValid = ::OpenAPI::fromJsonValue(m_max_persons, json[QString("max_persons")]);
    m_max_persons_isSet = !json[QString("max_persons")].isNull() && m_max_persons_isValid;

    m_min_persons_isValid = ::OpenAPI::fromJsonValue(m_min_persons, json[QString("min_persons")]);
    m_min_persons_isSet = !json[QString("min_persons")].isNull() && m_min_persons_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_reservations_isValid = ::OpenAPI::fromJsonValue(m_reservations, json[QString("reservations")]);
    m_reservations_isSet = !json[QString("reservations")].isNull() && m_reservations_isValid;

    m_room_type_isValid = ::OpenAPI::fromJsonValue(m_room_type, json[QString("room_type")]);
    m_room_type_isSet = !json[QString("room_type")].isNull() && m_room_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIRoom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoom::asJsonObject() const {
    QJsonObject obj;
    if (m_amenities.size() > 0) {
        obj.insert(QString("amenities"), ::OpenAPI::toJsonValue(m_amenities));
    }
    if (m_beddings.size() > 0) {
        obj.insert(QString("beddings"), ::OpenAPI::toJsonValue(m_beddings));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expected_occupancy_isSet) {
        obj.insert(QString("expected_occupancy"), ::OpenAPI::toJsonValue(m_expected_occupancy));
    }
    if (m_extra_bed_allowed_isSet) {
        obj.insert(QString("extra_bed_allowed"), ::OpenAPI::toJsonValue(m_extra_bed_allowed));
    }
    if (m_floor_isSet) {
        obj.insert(QString("floor"), ::OpenAPI::toJsonValue(m_floor));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_max_persons_isSet) {
        obj.insert(QString("max_persons"), ::OpenAPI::toJsonValue(m_max_persons));
    }
    if (m_min_persons_isSet) {
        obj.insert(QString("min_persons"), ::OpenAPI::toJsonValue(m_min_persons));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_reservations.size() > 0) {
        obj.insert(QString("reservations"), ::OpenAPI::toJsonValue(m_reservations));
    }
    if (m_room_type.isSet()) {
        obj.insert(QString("room_type"), ::OpenAPI::toJsonValue(m_room_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QList<OAISimpleAttribute> OAIRoom::getAmenities() const {
    return m_amenities;
}
void OAIRoom::setAmenities(const QList<OAISimpleAttribute> &amenities) {
    m_amenities = amenities;
    m_amenities_isSet = true;
}

bool OAIRoom::is_amenities_Set() const{
    return m_amenities_isSet;
}

bool OAIRoom::is_amenities_Valid() const{
    return m_amenities_isValid;
}

QList<OAIRoomBedding> OAIRoom::getBeddings() const {
    return m_beddings;
}
void OAIRoom::setBeddings(const QList<OAIRoomBedding> &beddings) {
    m_beddings = beddings;
    m_beddings_isSet = true;
}

bool OAIRoom::is_beddings_Set() const{
    return m_beddings_isSet;
}

bool OAIRoom::is_beddings_Valid() const{
    return m_beddings_isValid;
}

QDateTime OAIRoom::getCreated() const {
    return m_created;
}
void OAIRoom::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRoom::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRoom::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIRoom::getDescription() const {
    return m_description;
}
void OAIRoom::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRoom::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRoom::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIRoom::getExpectedOccupancy() const {
    return m_expected_occupancy;
}
void OAIRoom::setExpectedOccupancy(const qint32 &expected_occupancy) {
    m_expected_occupancy = expected_occupancy;
    m_expected_occupancy_isSet = true;
}

bool OAIRoom::is_expected_occupancy_Set() const{
    return m_expected_occupancy_isSet;
}

bool OAIRoom::is_expected_occupancy_Valid() const{
    return m_expected_occupancy_isValid;
}

bool OAIRoom::isExtraBedAllowed() const {
    return m_extra_bed_allowed;
}
void OAIRoom::setExtraBedAllowed(const bool &extra_bed_allowed) {
    m_extra_bed_allowed = extra_bed_allowed;
    m_extra_bed_allowed_isSet = true;
}

bool OAIRoom::is_extra_bed_allowed_Set() const{
    return m_extra_bed_allowed_isSet;
}

bool OAIRoom::is_extra_bed_allowed_Valid() const{
    return m_extra_bed_allowed_isValid;
}

qint32 OAIRoom::getFloor() const {
    return m_floor;
}
void OAIRoom::setFloor(const qint32 &floor) {
    m_floor = floor;
    m_floor_isSet = true;
}

bool OAIRoom::is_floor_Set() const{
    return m_floor_isSet;
}

bool OAIRoom::is_floor_Valid() const{
    return m_floor_isValid;
}

QList<OAISimpleAttribute> OAIRoom::getLocations() const {
    return m_locations;
}
void OAIRoom::setLocations(const QList<OAISimpleAttribute> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIRoom::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIRoom::is_locations_Valid() const{
    return m_locations_isValid;
}

qint32 OAIRoom::getMaxPersons() const {
    return m_max_persons;
}
void OAIRoom::setMaxPersons(const qint32 &max_persons) {
    m_max_persons = max_persons;
    m_max_persons_isSet = true;
}

bool OAIRoom::is_max_persons_Set() const{
    return m_max_persons_isSet;
}

bool OAIRoom::is_max_persons_Valid() const{
    return m_max_persons_isValid;
}

qint32 OAIRoom::getMinPersons() const {
    return m_min_persons;
}
void OAIRoom::setMinPersons(const qint32 &min_persons) {
    m_min_persons = min_persons;
    m_min_persons_isSet = true;
}

bool OAIRoom::is_min_persons_Set() const{
    return m_min_persons_isSet;
}

bool OAIRoom::is_min_persons_Valid() const{
    return m_min_persons_isValid;
}

QString OAIRoom::getName() const {
    return m_name;
}
void OAIRoom::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoom::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoom::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRoom::getNumber() const {
    return m_number;
}
void OAIRoom::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIRoom::is_number_Set() const{
    return m_number_isSet;
}

bool OAIRoom::is_number_Valid() const{
    return m_number_isValid;
}

QList<OAIEmbeddedReservation> OAIRoom::getReservations() const {
    return m_reservations;
}
void OAIRoom::setReservations(const QList<OAIEmbeddedReservation> &reservations) {
    m_reservations = reservations;
    m_reservations_isSet = true;
}

bool OAIRoom::is_reservations_Set() const{
    return m_reservations_isSet;
}

bool OAIRoom::is_reservations_Valid() const{
    return m_reservations_isValid;
}

OAIEmbeddedRoomType OAIRoom::getRoomType() const {
    return m_room_type;
}
void OAIRoom::setRoomType(const OAIEmbeddedRoomType &room_type) {
    m_room_type = room_type;
    m_room_type_isSet = true;
}

bool OAIRoom::is_room_type_Set() const{
    return m_room_type_isSet;
}

bool OAIRoom::is_room_type_Valid() const{
    return m_room_type_isValid;
}

OAIRoomStatus OAIRoom::getStatus() const {
    return m_status;
}
void OAIRoom::setStatus(const OAIRoomStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRoom::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRoom::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIRoom::getUpdated() const {
    return m_updated;
}
void OAIRoom::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIRoom::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIRoom::is_updated_Valid() const{
    return m_updated_isValid;
}

QList<OAISimpleAttribute> OAIRoom::getViews() const {
    return m_views;
}
void OAIRoom::setViews(const QList<OAISimpleAttribute> &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIRoom::is_views_Set() const{
    return m_views_isSet;
}

bool OAIRoom::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIRoom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amenities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_beddings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_bed_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_persons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_persons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoom::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expected_occupancy_isValid && m_floor_isValid && m_max_persons_isValid && m_min_persons_isValid && m_number_isValid && m_room_type_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
