/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedReservation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedReservation::OAIEmbeddedReservation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedReservation::OAIEmbeddedReservation() {
    this->initializeModel();
}

OAIEmbeddedReservation::~OAIEmbeddedReservation() {}

void OAIEmbeddedReservation::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_arrival_date_isSet = false;
    m_arrival_date_isValid = false;

    m_confirmation_id_isSet = false;
    m_confirmation_id_isValid = false;

    m_departure_date_isSet = false;
    m_departure_date_isValid = false;

    m_reservation_number_isSet = false;
    m_reservation_number_isValid = false;

    m_reservation_status_isSet = false;
    m_reservation_status_isValid = false;
}

void OAIEmbeddedReservation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedReservation::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_arrival_date_isValid = ::OpenAPI::fromJsonValue(m_arrival_date, json[QString("arrival_date")]);
    m_arrival_date_isSet = !json[QString("arrival_date")].isNull() && m_arrival_date_isValid;

    m_confirmation_id_isValid = ::OpenAPI::fromJsonValue(m_confirmation_id, json[QString("confirmation_id")]);
    m_confirmation_id_isSet = !json[QString("confirmation_id")].isNull() && m_confirmation_id_isValid;

    m_departure_date_isValid = ::OpenAPI::fromJsonValue(m_departure_date, json[QString("departure_date")]);
    m_departure_date_isSet = !json[QString("departure_date")].isNull() && m_departure_date_isValid;

    m_reservation_number_isValid = ::OpenAPI::fromJsonValue(m_reservation_number, json[QString("reservation_number")]);
    m_reservation_number_isSet = !json[QString("reservation_number")].isNull() && m_reservation_number_isValid;

    m_reservation_status_isValid = ::OpenAPI::fromJsonValue(m_reservation_status, json[QString("reservation_status")]);
    m_reservation_status_isSet = !json[QString("reservation_status")].isNull() && m_reservation_status_isValid;
}

QString OAIEmbeddedReservation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedReservation::asJsonObject() const {
    QJsonObject obj;
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_arrival_date_isSet) {
        obj.insert(QString("arrival_date"), ::OpenAPI::toJsonValue(m_arrival_date));
    }
    if (m_confirmation_id_isSet) {
        obj.insert(QString("confirmation_id"), ::OpenAPI::toJsonValue(m_confirmation_id));
    }
    if (m_departure_date_isSet) {
        obj.insert(QString("departure_date"), ::OpenAPI::toJsonValue(m_departure_date));
    }
    if (m_reservation_number_isSet) {
        obj.insert(QString("reservation_number"), ::OpenAPI::toJsonValue(m_reservation_number));
    }
    if (m_reservation_status_isSet) {
        obj.insert(QString("reservation_status"), ::OpenAPI::toJsonValue(m_reservation_status));
    }
    return obj;
}

QMap<QString, OAILinkObject> OAIEmbeddedReservation::getLinks() const {
    return m__links;
}
void OAIEmbeddedReservation::setLinks(const QMap<QString, OAILinkObject> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIEmbeddedReservation::is__links_Set() const{
    return m__links_isSet;
}

bool OAIEmbeddedReservation::is__links_Valid() const{
    return m__links_isValid;
}

QDateTime OAIEmbeddedReservation::getArrivalDate() const {
    return m_arrival_date;
}
void OAIEmbeddedReservation::setArrivalDate(const QDateTime &arrival_date) {
    m_arrival_date = arrival_date;
    m_arrival_date_isSet = true;
}

bool OAIEmbeddedReservation::is_arrival_date_Set() const{
    return m_arrival_date_isSet;
}

bool OAIEmbeddedReservation::is_arrival_date_Valid() const{
    return m_arrival_date_isValid;
}

QString OAIEmbeddedReservation::getConfirmationId() const {
    return m_confirmation_id;
}
void OAIEmbeddedReservation::setConfirmationId(const QString &confirmation_id) {
    m_confirmation_id = confirmation_id;
    m_confirmation_id_isSet = true;
}

bool OAIEmbeddedReservation::is_confirmation_id_Set() const{
    return m_confirmation_id_isSet;
}

bool OAIEmbeddedReservation::is_confirmation_id_Valid() const{
    return m_confirmation_id_isValid;
}

QDateTime OAIEmbeddedReservation::getDepartureDate() const {
    return m_departure_date;
}
void OAIEmbeddedReservation::setDepartureDate(const QDateTime &departure_date) {
    m_departure_date = departure_date;
    m_departure_date_isSet = true;
}

bool OAIEmbeddedReservation::is_departure_date_Set() const{
    return m_departure_date_isSet;
}

bool OAIEmbeddedReservation::is_departure_date_Valid() const{
    return m_departure_date_isValid;
}

qint32 OAIEmbeddedReservation::getReservationNumber() const {
    return m_reservation_number;
}
void OAIEmbeddedReservation::setReservationNumber(const qint32 &reservation_number) {
    m_reservation_number = reservation_number;
    m_reservation_number_isSet = true;
}

bool OAIEmbeddedReservation::is_reservation_number_Set() const{
    return m_reservation_number_isSet;
}

bool OAIEmbeddedReservation::is_reservation_number_Valid() const{
    return m_reservation_number_isValid;
}

QString OAIEmbeddedReservation::getReservationStatus() const {
    return m_reservation_status;
}
void OAIEmbeddedReservation::setReservationStatus(const QString &reservation_status) {
    m_reservation_status = reservation_status;
    m_reservation_status_isSet = true;
}

bool OAIEmbeddedReservation::is_reservation_status_Set() const{
    return m_reservation_status_isSet;
}

bool OAIEmbeddedReservation::is_reservation_status_Valid() const{
    return m_reservation_status_isValid;
}

bool OAIEmbeddedReservation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedReservation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arrival_date_isValid && m_confirmation_id_isValid && m_departure_date_isValid && m_reservation_number_isValid && m_reservation_status_isValid && true;
}

} // namespace OpenAPI
