/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAvailableRoomsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAvailableRoomsRequest::OAIGetAvailableRoomsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAvailableRoomsRequest::OAIGetAvailableRoomsRequest() {
    this->initializeModel();
}

OAIGetAvailableRoomsRequest::~OAIGetAvailableRoomsRequest() {}

void OAIGetAvailableRoomsRequest::initializeModel() {

    m_adults_isSet = false;
    m_adults_isValid = false;

    m_amenities_isSet = false;
    m_amenities_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_include_out_of_service_isSet = false;
    m_include_out_of_service_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_room_types_isSet = false;
    m_room_types_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIGetAvailableRoomsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAvailableRoomsRequest::fromJsonObject(QJsonObject json) {

    m_adults_isValid = ::OpenAPI::fromJsonValue(m_adults, json[QString("adults")]);
    m_adults_isSet = !json[QString("adults")].isNull() && m_adults_isValid;

    m_amenities_isValid = ::OpenAPI::fromJsonValue(m_amenities, json[QString("amenities")]);
    m_amenities_isSet = !json[QString("amenities")].isNull() && m_amenities_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_include_out_of_service_isValid = ::OpenAPI::fromJsonValue(m_include_out_of_service, json[QString("includeOutOfService")]);
    m_include_out_of_service_isSet = !json[QString("includeOutOfService")].isNull() && m_include_out_of_service_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_room_types_isValid = ::OpenAPI::fromJsonValue(m_room_types, json[QString("roomTypes")]);
    m_room_types_isSet = !json[QString("roomTypes")].isNull() && m_room_types_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIGetAvailableRoomsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAvailableRoomsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_adults_isSet) {
        obj.insert(QString("adults"), ::OpenAPI::toJsonValue(m_adults));
    }
    if (m_amenities.size() > 0) {
        obj.insert(QString("amenities"), ::OpenAPI::toJsonValue(m_amenities));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_include_out_of_service_isSet) {
        obj.insert(QString("includeOutOfService"), ::OpenAPI::toJsonValue(m_include_out_of_service));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_room_types.size() > 0) {
        obj.insert(QString("roomTypes"), ::OpenAPI::toJsonValue(m_room_types));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QByteArray OAIGetAvailableRoomsRequest::getAdults() const {
    return m_adults;
}
void OAIGetAvailableRoomsRequest::setAdults(const QByteArray &adults) {
    m_adults = adults;
    m_adults_isSet = true;
}

bool OAIGetAvailableRoomsRequest::is_adults_Set() const{
    return m_adults_isSet;
}

bool OAIGetAvailableRoomsRequest::is_adults_Valid() const{
    return m_adults_isValid;
}

QList<QString> OAIGetAvailableRoomsRequest::getAmenities() const {
    return m_amenities;
}
void OAIGetAvailableRoomsRequest::setAmenities(const QList<QString> &amenities) {
    m_amenities = amenities;
    m_amenities_isSet = true;
}

bool OAIGetAvailableRoomsRequest::is_amenities_Set() const{
    return m_amenities_isSet;
}

bool OAIGetAvailableRoomsRequest::is_amenities_Valid() const{
    return m_amenities_isValid;
}

QDateTime OAIGetAvailableRoomsRequest::getFrom() const {
    return m_from;
}
void OAIGetAvailableRoomsRequest::setFrom(const QDateTime &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIGetAvailableRoomsRequest::is_from_Set() const{
    return m_from_isSet;
}

bool OAIGetAvailableRoomsRequest::is_from_Valid() const{
    return m_from_isValid;
}

bool OAIGetAvailableRoomsRequest::isIncludeOutOfService() const {
    return m_include_out_of_service;
}
void OAIGetAvailableRoomsRequest::setIncludeOutOfService(const bool &include_out_of_service) {
    m_include_out_of_service = include_out_of_service;
    m_include_out_of_service_isSet = true;
}

bool OAIGetAvailableRoomsRequest::is_include_out_of_service_Set() const{
    return m_include_out_of_service_isSet;
}

bool OAIGetAvailableRoomsRequest::is_include_out_of_service_Valid() const{
    return m_include_out_of_service_isValid;
}

QList<QString> OAIGetAvailableRoomsRequest::getLocations() const {
    return m_locations;
}
void OAIGetAvailableRoomsRequest::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIGetAvailableRoomsRequest::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIGetAvailableRoomsRequest::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<QString> OAIGetAvailableRoomsRequest::getRoomTypes() const {
    return m_room_types;
}
void OAIGetAvailableRoomsRequest::setRoomTypes(const QList<QString> &room_types) {
    m_room_types = room_types;
    m_room_types_isSet = true;
}

bool OAIGetAvailableRoomsRequest::is_room_types_Set() const{
    return m_room_types_isSet;
}

bool OAIGetAvailableRoomsRequest::is_room_types_Valid() const{
    return m_room_types_isValid;
}

QDateTime OAIGetAvailableRoomsRequest::getTo() const {
    return m_to;
}
void OAIGetAvailableRoomsRequest::setTo(const QDateTime &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIGetAvailableRoomsRequest::is_to_Set() const{
    return m_to_isSet;
}

bool OAIGetAvailableRoomsRequest::is_to_Valid() const{
    return m_to_isValid;
}

QList<QString> OAIGetAvailableRoomsRequest::getViews() const {
    return m_views;
}
void OAIGetAvailableRoomsRequest::setViews(const QList<QString> &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIGetAvailableRoomsRequest::is_views_Set() const{
    return m_views_isSet;
}

bool OAIGetAvailableRoomsRequest::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIGetAvailableRoomsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amenities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_out_of_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAvailableRoomsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
