/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatePlansApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIRatePlansApi::OAIRatePlansApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIRatePlansApi::~OAIRatePlansApi() {
}

void OAIRatePlansApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.hetras-certification.net/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("ratePlansBatchUpdateRates", defaultConf);
    _serverIndices.insert("ratePlansBatchUpdateRates", 0);
    _serverConfigs.insert("ratePlansGetRate", defaultConf);
    _serverIndices.insert("ratePlansGetRate", 0);
    _serverConfigs.insert("ratePlansGetRateplan", defaultConf);
    _serverIndices.insert("ratePlansGetRateplan", 0);
    _serverConfigs.insert("ratePlansGetRateplans", defaultConf);
    _serverIndices.insert("ratePlansGetRateplans", 0);
    _serverConfigs.insert("ratePlansGetRateplansCount", defaultConf);
    _serverIndices.insert("ratePlansGetRateplansCount", 0);
    _serverConfigs.insert("ratePlansGetRates", defaultConf);
    _serverIndices.insert("ratePlansGetRates", 0);
    _serverConfigs.insert("ratePlansGetRatesCount", defaultConf);
    _serverIndices.insert("ratePlansGetRatesCount", 0);
    _serverConfigs.insert("ratePlansPatchRate", defaultConf);
    _serverIndices.insert("ratePlansPatchRate", 0);
    _serverConfigs.insert("ratePlansPatchRates", defaultConf);
    _serverIndices.insert("ratePlansPatchRates", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIRatePlansApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIRatePlansApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIRatePlansApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIRatePlansApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIRatePlansApi::setUsername(const QString &username) {
    _username = username;
}

void OAIRatePlansApi::setPassword(const QString &password) {
    _password = password;
}


void OAIRatePlansApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIRatePlansApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIRatePlansApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIRatePlansApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRatePlansApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRatePlansApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIRatePlansApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIRatePlansApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIRatePlansApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIRatePlansApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIRatePlansApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIRatePlansApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIRatePlansApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIRatePlansApi::ratePlansBatchUpdateRates(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QList<OAIRatesBatchUpdateRequestItem> &request) {
    QString fullPath = QString(_serverConfigs["ratePlansBatchUpdateRates"][_serverIndices.value("ratePlansBatchUpdateRates")].URL()+"/api/hotel/v0/hotels/{hotelId}/rateplans/batch/$rates");
    
    
    {
        QString hotel_idPathParam("{");
        hotel_idPathParam.append("hotelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hotelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hotelId"+pathSuffix : pathPrefix;
        fullPath.replace(hotel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hotel_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(request).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    
    {
        if (!::OpenAPI::toStringValue(app_id).isEmpty()) {
            input.headers.insert("App-Id", ::OpenAPI::toStringValue(app_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(app_key).isEmpty()) {
            input.headers.insert("App-Key", ::OpenAPI::toStringValue(app_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRatePlansApi::ratePlansBatchUpdateRatesCallback);
    connect(this, &OAIRatePlansApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRatePlansApi::ratePlansBatchUpdateRatesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT ratePlansBatchUpdateRatesSignal(output);
        Q_EMIT ratePlansBatchUpdateRatesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT ratePlansBatchUpdateRatesSignalE(output, error_type, error_str);
        Q_EMIT ratePlansBatchUpdateRatesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT ratePlansBatchUpdateRatesSignalError(output, error_type, error_str);
        Q_EMIT ratePlansBatchUpdateRatesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRatePlansApi::ratePlansGetRate(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &business_day) {
    QString fullPath = QString(_serverConfigs["ratePlansGetRate"][_serverIndices.value("ratePlansGetRate")].URL()+"/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/{businessDay}");
    
    
    {
        QString hotel_idPathParam("{");
        hotel_idPathParam.append("hotelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hotelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hotelId"+pathSuffix : pathPrefix;
        fullPath.replace(hotel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hotel_id)));
    }
    
    {
        QString rateplan_codePathParam("{");
        rateplan_codePathParam.append("rateplanCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rateplanCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rateplanCode"+pathSuffix : pathPrefix;
        fullPath.replace(rateplan_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rateplan_code)));
    }
    
    {
        QString business_dayPathParam("{");
        business_dayPathParam.append("businessDay").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "businessDay", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"businessDay"+pathSuffix : pathPrefix;
        fullPath.replace(business_dayPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(business_day)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(app_id).isEmpty()) {
            input.headers.insert("App-Id", ::OpenAPI::toStringValue(app_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(app_key).isEmpty()) {
            input.headers.insert("App-Key", ::OpenAPI::toStringValue(app_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRatePlansApi::ratePlansGetRateCallback);
    connect(this, &OAIRatePlansApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRatePlansApi::ratePlansGetRateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRateResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT ratePlansGetRateSignal(output);
        Q_EMIT ratePlansGetRateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT ratePlansGetRateSignalE(output, error_type, error_str);
        Q_EMIT ratePlansGetRateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT ratePlansGetRateSignalError(output, error_type, error_str);
        Q_EMIT ratePlansGetRateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRatePlansApi::ratePlansGetRateplan(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code) {
    QString fullPath = QString(_serverConfigs["ratePlansGetRateplan"][_serverIndices.value("ratePlansGetRateplan")].URL()+"/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}");
    
    
    {
        QString hotel_idPathParam("{");
        hotel_idPathParam.append("hotelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hotelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hotelId"+pathSuffix : pathPrefix;
        fullPath.replace(hotel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hotel_id)));
    }
    
    {
        QString rateplan_codePathParam("{");
        rateplan_codePathParam.append("rateplanCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rateplanCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rateplanCode"+pathSuffix : pathPrefix;
        fullPath.replace(rateplan_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rateplan_code)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(app_id).isEmpty()) {
            input.headers.insert("App-Id", ::OpenAPI::toStringValue(app_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(app_key).isEmpty()) {
            input.headers.insert("App-Key", ::OpenAPI::toStringValue(app_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRatePlansApi::ratePlansGetRateplanCallback);
    connect(this, &OAIRatePlansApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRatePlansApi::ratePlansGetRateplanCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIExtendedRateplanEntry output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT ratePlansGetRateplanSignal(output);
        Q_EMIT ratePlansGetRateplanSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT ratePlansGetRateplanSignalE(output, error_type, error_str);
        Q_EMIT ratePlansGetRateplanSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT ratePlansGetRateplanSignalError(output, error_type, error_str);
        Q_EMIT ratePlansGetRateplanSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRatePlansApi::ratePlansGetRateplans(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const ::OpenAPI::OptionalParam<QString> &selling_status, const ::OpenAPI::OptionalParam<bool> &commissionable, const ::OpenAPI::OptionalParam<QString> &group, const ::OpenAPI::OptionalParam<QString> &base_rateplan, const ::OpenAPI::OptionalParam<QString> &channel_group, const ::OpenAPI::OptionalParam<QString> &channel_code, const ::OpenAPI::OptionalParam<QList<QString>> &market_codes, const ::OpenAPI::OptionalParam<QList<QString>> &room_types, const ::OpenAPI::OptionalParam<QList<QString>> &included_services, const ::OpenAPI::OptionalParam<qint32> &skip, const ::OpenAPI::OptionalParam<qint32> &top, const ::OpenAPI::OptionalParam<QString> &inlinecount) {
    QString fullPath = QString(_serverConfigs["ratePlansGetRateplans"][_serverIndices.value("ratePlansGetRateplans")].URL()+"/api/hotel/v0/hotels/{hotelId}/rateplans");
    
    
    {
        QString hotel_idPathParam("{");
        hotel_idPathParam.append("hotelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hotelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hotelId"+pathSuffix : pathPrefix;
        fullPath.replace(hotel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hotel_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (selling_status.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sellingStatus", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sellingStatus")).append(querySuffix).append(QUrl::toPercentEncoding(selling_status.stringValue()));
    }
    if (commissionable.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "commissionable", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("commissionable")).append(querySuffix).append(QUrl::toPercentEncoding(commissionable.stringValue()));
    }
    if (group.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "group", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("group")).append(querySuffix).append(QUrl::toPercentEncoding(group.stringValue()));
    }
    if (base_rateplan.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "baseRateplan", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("baseRateplan")).append(querySuffix).append(QUrl::toPercentEncoding(base_rateplan.stringValue()));
    }
    if (channel_group.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "channelGroup", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("channelGroup")).append(querySuffix).append(QUrl::toPercentEncoding(channel_group.stringValue()));
    }
    if (channel_code.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "channelCode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("channelCode")).append(querySuffix).append(QUrl::toPercentEncoding(channel_code.stringValue()));
    }
    if (market_codes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "marketCodes", false);
        if (market_codes.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : market_codes.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("marketCodes=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (room_types.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "roomTypes", false);
        if (room_types.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : room_types.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("roomTypes=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (included_services.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "includedServices", false);
        if (included_services.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : included_services.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("includedServices=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (skip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "skip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("skip")).append(querySuffix).append(QUrl::toPercentEncoding(skip.stringValue()));
    }
    if (top.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "top", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("top")).append(querySuffix).append(QUrl::toPercentEncoding(top.stringValue()));
    }
    if (inlinecount.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "inlinecount", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("inlinecount")).append(querySuffix).append(QUrl::toPercentEncoding(inlinecount.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(app_id).isEmpty()) {
            input.headers.insert("App-Id", ::OpenAPI::toStringValue(app_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(app_key).isEmpty()) {
            input.headers.insert("App-Key", ::OpenAPI::toStringValue(app_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRatePlansApi::ratePlansGetRateplansCallback);
    connect(this, &OAIRatePlansApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRatePlansApi::ratePlansGetRateplansCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRateplansListResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT ratePlansGetRateplansSignal(output);
        Q_EMIT ratePlansGetRateplansSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT ratePlansGetRateplansSignalE(output, error_type, error_str);
        Q_EMIT ratePlansGetRateplansSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT ratePlansGetRateplansSignalError(output, error_type, error_str);
        Q_EMIT ratePlansGetRateplansSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRatePlansApi::ratePlansGetRateplansCount(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const ::OpenAPI::OptionalParam<QString> &selling_status, const ::OpenAPI::OptionalParam<bool> &commissionable, const ::OpenAPI::OptionalParam<QString> &group, const ::OpenAPI::OptionalParam<QString> &base_rateplan, const ::OpenAPI::OptionalParam<QString> &channel_group, const ::OpenAPI::OptionalParam<QString> &channel_code, const ::OpenAPI::OptionalParam<QList<QString>> &market_codes, const ::OpenAPI::OptionalParam<QList<QString>> &room_types, const ::OpenAPI::OptionalParam<QList<QString>> &included_services) {
    QString fullPath = QString(_serverConfigs["ratePlansGetRateplansCount"][_serverIndices.value("ratePlansGetRateplansCount")].URL()+"/api/hotel/v0/hotels/{hotelId}/rateplans/$count");
    
    
    {
        QString hotel_idPathParam("{");
        hotel_idPathParam.append("hotelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hotelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hotelId"+pathSuffix : pathPrefix;
        fullPath.replace(hotel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hotel_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (selling_status.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sellingStatus", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sellingStatus")).append(querySuffix).append(QUrl::toPercentEncoding(selling_status.stringValue()));
    }
    if (commissionable.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "commissionable", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("commissionable")).append(querySuffix).append(QUrl::toPercentEncoding(commissionable.stringValue()));
    }
    if (group.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "group", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("group")).append(querySuffix).append(QUrl::toPercentEncoding(group.stringValue()));
    }
    if (base_rateplan.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "baseRateplan", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("baseRateplan")).append(querySuffix).append(QUrl::toPercentEncoding(base_rateplan.stringValue()));
    }
    if (channel_group.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "channelGroup", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("channelGroup")).append(querySuffix).append(QUrl::toPercentEncoding(channel_group.stringValue()));
    }
    if (channel_code.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "channelCode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("channelCode")).append(querySuffix).append(QUrl::toPercentEncoding(channel_code.stringValue()));
    }
    if (market_codes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "marketCodes", false);
        if (market_codes.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : market_codes.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("marketCodes=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("marketCodes").append(querySuffix);
                qint32 count = 0;
                for (QString t : market_codes.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (room_types.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "roomTypes", false);
        if (room_types.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : room_types.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("roomTypes=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("roomTypes").append(querySuffix);
                qint32 count = 0;
                for (QString t : room_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (included_services.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "includedServices", false);
        if (included_services.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : included_services.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("includedServices=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("includedServices").append(querySuffix);
                qint32 count = 0;
                for (QString t : included_services.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(app_id).isEmpty()) {
            input.headers.insert("App-Id", ::OpenAPI::toStringValue(app_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(app_key).isEmpty()) {
            input.headers.insert("App-Key", ::OpenAPI::toStringValue(app_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRatePlansApi::ratePlansGetRateplansCountCallback);
    connect(this, &OAIRatePlansApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRatePlansApi::ratePlansGetRateplansCountCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITotalCountResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT ratePlansGetRateplansCountSignal(output);
        Q_EMIT ratePlansGetRateplansCountSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT ratePlansGetRateplansCountSignalE(output, error_type, error_str);
        Q_EMIT ratePlansGetRateplansCountSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT ratePlansGetRateplansCountSignalError(output, error_type, error_str);
        Q_EMIT ratePlansGetRateplansCountSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRatePlansApi::ratePlansGetRates(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &from, const QDateTime &to, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<qint32> &skip, const ::OpenAPI::OptionalParam<qint32> &top, const ::OpenAPI::OptionalParam<QString> &inlinecount) {
    QString fullPath = QString(_serverConfigs["ratePlansGetRates"][_serverIndices.value("ratePlansGetRates")].URL()+"/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates");
    
    
    {
        QString hotel_idPathParam("{");
        hotel_idPathParam.append("hotelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hotelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hotelId"+pathSuffix : pathPrefix;
        fullPath.replace(hotel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hotel_id)));
    }
    
    {
        QString rateplan_codePathParam("{");
        rateplan_codePathParam.append("rateplanCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rateplanCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rateplanCode"+pathSuffix : pathPrefix;
        fullPath.replace(rateplan_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rateplan_code)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "from", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("from")).append(querySuffix).append(QUrl::toPercentEncoding(from));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "to", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("to")).append(querySuffix).append(QUrl::toPercentEncoding(to));
    }
    if (skip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "skip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("skip")).append(querySuffix).append(QUrl::toPercentEncoding(skip.stringValue()));
    }
    if (top.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "top", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("top")).append(querySuffix).append(QUrl::toPercentEncoding(top.stringValue()));
    }
    if (inlinecount.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "inlinecount", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("inlinecount")).append(querySuffix).append(QUrl::toPercentEncoding(inlinecount.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(app_id).isEmpty()) {
            input.headers.insert("App-Id", ::OpenAPI::toStringValue(app_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(app_key).isEmpty()) {
            input.headers.insert("App-Key", ::OpenAPI::toStringValue(app_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRatePlansApi::ratePlansGetRatesCallback);
    connect(this, &OAIRatePlansApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRatePlansApi::ratePlansGetRatesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRatesResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT ratePlansGetRatesSignal(output);
        Q_EMIT ratePlansGetRatesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT ratePlansGetRatesSignalE(output, error_type, error_str);
        Q_EMIT ratePlansGetRatesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT ratePlansGetRatesSignalError(output, error_type, error_str);
        Q_EMIT ratePlansGetRatesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRatePlansApi::ratePlansGetRatesCount(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &from, const QDateTime &to) {
    QString fullPath = QString(_serverConfigs["ratePlansGetRatesCount"][_serverIndices.value("ratePlansGetRatesCount")].URL()+"/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/$count");
    
    
    {
        QString hotel_idPathParam("{");
        hotel_idPathParam.append("hotelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hotelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hotelId"+pathSuffix : pathPrefix;
        fullPath.replace(hotel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hotel_id)));
    }
    
    {
        QString rateplan_codePathParam("{");
        rateplan_codePathParam.append("rateplanCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rateplanCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rateplanCode"+pathSuffix : pathPrefix;
        fullPath.replace(rateplan_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rateplan_code)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "from", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("from")).append(querySuffix).append(QUrl::toPercentEncoding(from));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "to", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("to")).append(querySuffix).append(QUrl::toPercentEncoding(to));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(app_id).isEmpty()) {
            input.headers.insert("App-Id", ::OpenAPI::toStringValue(app_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(app_key).isEmpty()) {
            input.headers.insert("App-Key", ::OpenAPI::toStringValue(app_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRatePlansApi::ratePlansGetRatesCountCallback);
    connect(this, &OAIRatePlansApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRatePlansApi::ratePlansGetRatesCountCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITotalCountResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT ratePlansGetRatesCountSignal(output);
        Q_EMIT ratePlansGetRatesCountSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT ratePlansGetRatesCountSignalE(output, error_type, error_str);
        Q_EMIT ratePlansGetRatesCountSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT ratePlansGetRatesCountSignalError(output, error_type, error_str);
        Q_EMIT ratePlansGetRatesCountSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRatePlansApi::ratePlansPatchRate(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &business_day, const QList<OAIOperation_RatePatchRequest> &patch_request) {
    QString fullPath = QString(_serverConfigs["ratePlansPatchRate"][_serverIndices.value("ratePlansPatchRate")].URL()+"/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/{businessDay}");
    
    
    {
        QString hotel_idPathParam("{");
        hotel_idPathParam.append("hotelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hotelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hotelId"+pathSuffix : pathPrefix;
        fullPath.replace(hotel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hotel_id)));
    }
    
    {
        QString rateplan_codePathParam("{");
        rateplan_codePathParam.append("rateplanCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rateplanCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rateplanCode"+pathSuffix : pathPrefix;
        fullPath.replace(rateplan_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rateplan_code)));
    }
    
    {
        QString business_dayPathParam("{");
        business_dayPathParam.append("businessDay").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "businessDay", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"businessDay"+pathSuffix : pathPrefix;
        fullPath.replace(business_dayPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(business_day)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(patch_request).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    
    {
        if (!::OpenAPI::toStringValue(app_id).isEmpty()) {
            input.headers.insert("App-Id", ::OpenAPI::toStringValue(app_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(app_key).isEmpty()) {
            input.headers.insert("App-Key", ::OpenAPI::toStringValue(app_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRatePlansApi::ratePlansPatchRateCallback);
    connect(this, &OAIRatePlansApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRatePlansApi::ratePlansPatchRateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT ratePlansPatchRateSignal(output);
        Q_EMIT ratePlansPatchRateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT ratePlansPatchRateSignalE(output, error_type, error_str);
        Q_EMIT ratePlansPatchRateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT ratePlansPatchRateSignalError(output, error_type, error_str);
        Q_EMIT ratePlansPatchRateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRatePlansApi::ratePlansPatchRates(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &rateplan_code, const QDateTime &from, const QDateTime &to, const QList<OAIOperation_RatePatchRequest> &patch_request) {
    QString fullPath = QString(_serverConfigs["ratePlansPatchRates"][_serverIndices.value("ratePlansPatchRates")].URL()+"/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates");
    
    
    {
        QString hotel_idPathParam("{");
        hotel_idPathParam.append("hotelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hotelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hotelId"+pathSuffix : pathPrefix;
        fullPath.replace(hotel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hotel_id)));
    }
    
    {
        QString rateplan_codePathParam("{");
        rateplan_codePathParam.append("rateplanCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rateplanCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rateplanCode"+pathSuffix : pathPrefix;
        fullPath.replace(rateplan_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rateplan_code)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "from", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("from")).append(querySuffix).append(QUrl::toPercentEncoding(from));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "to", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("to")).append(querySuffix).append(QUrl::toPercentEncoding(to));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(patch_request).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    
    {
        if (!::OpenAPI::toStringValue(app_id).isEmpty()) {
            input.headers.insert("App-Id", ::OpenAPI::toStringValue(app_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(app_key).isEmpty()) {
            input.headers.insert("App-Key", ::OpenAPI::toStringValue(app_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRatePlansApi::ratePlansPatchRatesCallback);
    connect(this, &OAIRatePlansApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRatePlansApi::ratePlansPatchRatesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT ratePlansPatchRatesSignal(output);
        Q_EMIT ratePlansPatchRatesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT ratePlansPatchRatesSignalE(output, error_type, error_str);
        Q_EMIT ratePlansPatchRatesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT ratePlansPatchRatesSignalError(output, error_type, error_str);
        Q_EMIT ratePlansPatchRatesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRatePlansApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
