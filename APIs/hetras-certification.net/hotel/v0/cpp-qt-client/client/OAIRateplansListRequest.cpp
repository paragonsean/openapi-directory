/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRateplansListRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRateplansListRequest::OAIRateplansListRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRateplansListRequest::OAIRateplansListRequest() {
    this->initializeModel();
}

OAIRateplansListRequest::~OAIRateplansListRequest() {}

void OAIRateplansListRequest::initializeModel() {

    m_base_rateplan_isSet = false;
    m_base_rateplan_isValid = false;

    m_channel_code_isSet = false;
    m_channel_code_isValid = false;

    m_channel_group_isSet = false;
    m_channel_group_isValid = false;

    m_commissionable_isSet = false;
    m_commissionable_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_included_services_isSet = false;
    m_included_services_isValid = false;

    m_market_codes_isSet = false;
    m_market_codes_isValid = false;

    m_room_types_isSet = false;
    m_room_types_isValid = false;

    m_selling_status_isSet = false;
    m_selling_status_isValid = false;
}

void OAIRateplansListRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRateplansListRequest::fromJsonObject(QJsonObject json) {

    m_base_rateplan_isValid = ::OpenAPI::fromJsonValue(m_base_rateplan, json[QString("baseRateplan")]);
    m_base_rateplan_isSet = !json[QString("baseRateplan")].isNull() && m_base_rateplan_isValid;

    m_channel_code_isValid = ::OpenAPI::fromJsonValue(m_channel_code, json[QString("channelCode")]);
    m_channel_code_isSet = !json[QString("channelCode")].isNull() && m_channel_code_isValid;

    m_channel_group_isValid = ::OpenAPI::fromJsonValue(m_channel_group, json[QString("channelGroup")]);
    m_channel_group_isSet = !json[QString("channelGroup")].isNull() && m_channel_group_isValid;

    m_commissionable_isValid = ::OpenAPI::fromJsonValue(m_commissionable, json[QString("commissionable")]);
    m_commissionable_isSet = !json[QString("commissionable")].isNull() && m_commissionable_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_included_services_isValid = ::OpenAPI::fromJsonValue(m_included_services, json[QString("includedServices")]);
    m_included_services_isSet = !json[QString("includedServices")].isNull() && m_included_services_isValid;

    m_market_codes_isValid = ::OpenAPI::fromJsonValue(m_market_codes, json[QString("marketCodes")]);
    m_market_codes_isSet = !json[QString("marketCodes")].isNull() && m_market_codes_isValid;

    m_room_types_isValid = ::OpenAPI::fromJsonValue(m_room_types, json[QString("roomTypes")]);
    m_room_types_isSet = !json[QString("roomTypes")].isNull() && m_room_types_isValid;

    m_selling_status_isValid = ::OpenAPI::fromJsonValue(m_selling_status, json[QString("sellingStatus")]);
    m_selling_status_isSet = !json[QString("sellingStatus")].isNull() && m_selling_status_isValid;
}

QString OAIRateplansListRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRateplansListRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_base_rateplan_isSet) {
        obj.insert(QString("baseRateplan"), ::OpenAPI::toJsonValue(m_base_rateplan));
    }
    if (m_channel_code_isSet) {
        obj.insert(QString("channelCode"), ::OpenAPI::toJsonValue(m_channel_code));
    }
    if (m_channel_group_isSet) {
        obj.insert(QString("channelGroup"), ::OpenAPI::toJsonValue(m_channel_group));
    }
    if (m_commissionable_isSet) {
        obj.insert(QString("commissionable"), ::OpenAPI::toJsonValue(m_commissionable));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_included_services.size() > 0) {
        obj.insert(QString("includedServices"), ::OpenAPI::toJsonValue(m_included_services));
    }
    if (m_market_codes.size() > 0) {
        obj.insert(QString("marketCodes"), ::OpenAPI::toJsonValue(m_market_codes));
    }
    if (m_room_types.size() > 0) {
        obj.insert(QString("roomTypes"), ::OpenAPI::toJsonValue(m_room_types));
    }
    if (m_selling_status_isSet) {
        obj.insert(QString("sellingStatus"), ::OpenAPI::toJsonValue(m_selling_status));
    }
    return obj;
}

QString OAIRateplansListRequest::getBaseRateplan() const {
    return m_base_rateplan;
}
void OAIRateplansListRequest::setBaseRateplan(const QString &base_rateplan) {
    m_base_rateplan = base_rateplan;
    m_base_rateplan_isSet = true;
}

bool OAIRateplansListRequest::is_base_rateplan_Set() const{
    return m_base_rateplan_isSet;
}

bool OAIRateplansListRequest::is_base_rateplan_Valid() const{
    return m_base_rateplan_isValid;
}

QString OAIRateplansListRequest::getChannelCode() const {
    return m_channel_code;
}
void OAIRateplansListRequest::setChannelCode(const QString &channel_code) {
    m_channel_code = channel_code;
    m_channel_code_isSet = true;
}

bool OAIRateplansListRequest::is_channel_code_Set() const{
    return m_channel_code_isSet;
}

bool OAIRateplansListRequest::is_channel_code_Valid() const{
    return m_channel_code_isValid;
}

QString OAIRateplansListRequest::getChannelGroup() const {
    return m_channel_group;
}
void OAIRateplansListRequest::setChannelGroup(const QString &channel_group) {
    m_channel_group = channel_group;
    m_channel_group_isSet = true;
}

bool OAIRateplansListRequest::is_channel_group_Set() const{
    return m_channel_group_isSet;
}

bool OAIRateplansListRequest::is_channel_group_Valid() const{
    return m_channel_group_isValid;
}

bool OAIRateplansListRequest::isCommissionable() const {
    return m_commissionable;
}
void OAIRateplansListRequest::setCommissionable(const bool &commissionable) {
    m_commissionable = commissionable;
    m_commissionable_isSet = true;
}

bool OAIRateplansListRequest::is_commissionable_Set() const{
    return m_commissionable_isSet;
}

bool OAIRateplansListRequest::is_commissionable_Valid() const{
    return m_commissionable_isValid;
}

QString OAIRateplansListRequest::getGroup() const {
    return m_group;
}
void OAIRateplansListRequest::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIRateplansListRequest::is_group_Set() const{
    return m_group_isSet;
}

bool OAIRateplansListRequest::is_group_Valid() const{
    return m_group_isValid;
}

QList<QString> OAIRateplansListRequest::getIncludedServices() const {
    return m_included_services;
}
void OAIRateplansListRequest::setIncludedServices(const QList<QString> &included_services) {
    m_included_services = included_services;
    m_included_services_isSet = true;
}

bool OAIRateplansListRequest::is_included_services_Set() const{
    return m_included_services_isSet;
}

bool OAIRateplansListRequest::is_included_services_Valid() const{
    return m_included_services_isValid;
}

QList<QString> OAIRateplansListRequest::getMarketCodes() const {
    return m_market_codes;
}
void OAIRateplansListRequest::setMarketCodes(const QList<QString> &market_codes) {
    m_market_codes = market_codes;
    m_market_codes_isSet = true;
}

bool OAIRateplansListRequest::is_market_codes_Set() const{
    return m_market_codes_isSet;
}

bool OAIRateplansListRequest::is_market_codes_Valid() const{
    return m_market_codes_isValid;
}

QList<QString> OAIRateplansListRequest::getRoomTypes() const {
    return m_room_types;
}
void OAIRateplansListRequest::setRoomTypes(const QList<QString> &room_types) {
    m_room_types = room_types;
    m_room_types_isSet = true;
}

bool OAIRateplansListRequest::is_room_types_Set() const{
    return m_room_types_isSet;
}

bool OAIRateplansListRequest::is_room_types_Valid() const{
    return m_room_types_isValid;
}

QString OAIRateplansListRequest::getSellingStatus() const {
    return m_selling_status;
}
void OAIRateplansListRequest::setSellingStatus(const QString &selling_status) {
    m_selling_status = selling_status;
    m_selling_status_isSet = true;
}

bool OAIRateplansListRequest::is_selling_status_Set() const{
    return m_selling_status_isSet;
}

bool OAIRateplansListRequest::is_selling_status_Valid() const{
    return m_selling_status_isValid;
}

bool OAIRateplansListRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_rateplan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commissionable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRateplansListRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
