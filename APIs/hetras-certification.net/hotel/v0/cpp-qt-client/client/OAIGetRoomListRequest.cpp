/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRoomListRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRoomListRequest::OAIGetRoomListRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRoomListRequest::OAIGetRoomListRequest() {
    this->initializeModel();
}

OAIGetRoomListRequest::~OAIGetRoomListRequest() {}

void OAIGetRoomListRequest::initializeModel() {

    m_amenities_isSet = false;
    m_amenities_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_maintenances_isSet = false;
    m_maintenances_isValid = false;

    m_occupancy_isSet = false;
    m_occupancy_isValid = false;

    m_room_types_isSet = false;
    m_room_types_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIGetRoomListRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRoomListRequest::fromJsonObject(QJsonObject json) {

    m_amenities_isValid = ::OpenAPI::fromJsonValue(m_amenities, json[QString("amenities")]);
    m_amenities_isSet = !json[QString("amenities")].isNull() && m_amenities_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_maintenances_isValid = ::OpenAPI::fromJsonValue(m_maintenances, json[QString("maintenances")]);
    m_maintenances_isSet = !json[QString("maintenances")].isNull() && m_maintenances_isValid;

    m_occupancy_isValid = ::OpenAPI::fromJsonValue(m_occupancy, json[QString("occupancy")]);
    m_occupancy_isSet = !json[QString("occupancy")].isNull() && m_occupancy_isValid;

    m_room_types_isValid = ::OpenAPI::fromJsonValue(m_room_types, json[QString("roomTypes")]);
    m_room_types_isSet = !json[QString("roomTypes")].isNull() && m_room_types_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIGetRoomListRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRoomListRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amenities.size() > 0) {
        obj.insert(QString("amenities"), ::OpenAPI::toJsonValue(m_amenities));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_maintenances.size() > 0) {
        obj.insert(QString("maintenances"), ::OpenAPI::toJsonValue(m_maintenances));
    }
    if (m_occupancy_isSet) {
        obj.insert(QString("occupancy"), ::OpenAPI::toJsonValue(m_occupancy));
    }
    if (m_room_types.size() > 0) {
        obj.insert(QString("roomTypes"), ::OpenAPI::toJsonValue(m_room_types));
    }
    if (m_views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QList<QString> OAIGetRoomListRequest::getAmenities() const {
    return m_amenities;
}
void OAIGetRoomListRequest::setAmenities(const QList<QString> &amenities) {
    m_amenities = amenities;
    m_amenities_isSet = true;
}

bool OAIGetRoomListRequest::is_amenities_Set() const{
    return m_amenities_isSet;
}

bool OAIGetRoomListRequest::is_amenities_Valid() const{
    return m_amenities_isValid;
}

QList<QString> OAIGetRoomListRequest::getConditions() const {
    return m_conditions;
}
void OAIGetRoomListRequest::setConditions(const QList<QString> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIGetRoomListRequest::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIGetRoomListRequest::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QList<QString> OAIGetRoomListRequest::getLocations() const {
    return m_locations;
}
void OAIGetRoomListRequest::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIGetRoomListRequest::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIGetRoomListRequest::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<QString> OAIGetRoomListRequest::getMaintenances() const {
    return m_maintenances;
}
void OAIGetRoomListRequest::setMaintenances(const QList<QString> &maintenances) {
    m_maintenances = maintenances;
    m_maintenances_isSet = true;
}

bool OAIGetRoomListRequest::is_maintenances_Set() const{
    return m_maintenances_isSet;
}

bool OAIGetRoomListRequest::is_maintenances_Valid() const{
    return m_maintenances_isValid;
}

QString OAIGetRoomListRequest::getOccupancy() const {
    return m_occupancy;
}
void OAIGetRoomListRequest::setOccupancy(const QString &occupancy) {
    m_occupancy = occupancy;
    m_occupancy_isSet = true;
}

bool OAIGetRoomListRequest::is_occupancy_Set() const{
    return m_occupancy_isSet;
}

bool OAIGetRoomListRequest::is_occupancy_Valid() const{
    return m_occupancy_isValid;
}

QList<QString> OAIGetRoomListRequest::getRoomTypes() const {
    return m_room_types;
}
void OAIGetRoomListRequest::setRoomTypes(const QList<QString> &room_types) {
    m_room_types = room_types;
    m_room_types_isSet = true;
}

bool OAIGetRoomListRequest::is_room_types_Set() const{
    return m_room_types_isSet;
}

bool OAIGetRoomListRequest::is_room_types_Valid() const{
    return m_room_types_isValid;
}

QList<QString> OAIGetRoomListRequest::getViews() const {
    return m_views;
}
void OAIGetRoomListRequest::setViews(const QList<QString> &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIGetRoomListRequest::is_views_Set() const{
    return m_views_isSet;
}

bool OAIGetRoomListRequest::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIGetRoomListRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amenities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRoomListRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
