/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRateResponse::OAIRateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRateResponse::OAIRateResponse() {
    this->initializeModel();
}

OAIRateResponse::~OAIRateResponse() {}

void OAIRateResponse::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_base_price_isSet = false;
    m_base_price_isValid = false;

    m_business_day_isSet = false;
    m_business_day_isValid = false;

    m_cancellation_policy_isSet = false;
    m_cancellation_policy_isValid = false;

    m_derivation_isSet = false;
    m_derivation_isValid = false;

    m_minimum_guarantee_type_isSet = false;
    m_minimum_guarantee_type_isValid = false;

    m_per_person_surcharge_isSet = false;
    m_per_person_surcharge_isValid = false;

    m_room_type_supplements_isSet = false;
    m_room_type_supplements_isValid = false;
}

void OAIRateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRateResponse::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_base_price_isValid = ::OpenAPI::fromJsonValue(m_base_price, json[QString("base_price")]);
    m_base_price_isSet = !json[QString("base_price")].isNull() && m_base_price_isValid;

    m_business_day_isValid = ::OpenAPI::fromJsonValue(m_business_day, json[QString("business_day")]);
    m_business_day_isSet = !json[QString("business_day")].isNull() && m_business_day_isValid;

    m_cancellation_policy_isValid = ::OpenAPI::fromJsonValue(m_cancellation_policy, json[QString("cancellation_policy")]);
    m_cancellation_policy_isSet = !json[QString("cancellation_policy")].isNull() && m_cancellation_policy_isValid;

    m_derivation_isValid = ::OpenAPI::fromJsonValue(m_derivation, json[QString("derivation")]);
    m_derivation_isSet = !json[QString("derivation")].isNull() && m_derivation_isValid;

    m_minimum_guarantee_type_isValid = ::OpenAPI::fromJsonValue(m_minimum_guarantee_type, json[QString("minimum_guarantee_type")]);
    m_minimum_guarantee_type_isSet = !json[QString("minimum_guarantee_type")].isNull() && m_minimum_guarantee_type_isValid;

    m_per_person_surcharge_isValid = ::OpenAPI::fromJsonValue(m_per_person_surcharge, json[QString("per_person_surcharge")]);
    m_per_person_surcharge_isSet = !json[QString("per_person_surcharge")].isNull() && m_per_person_surcharge_isValid;

    m_room_type_supplements_isValid = ::OpenAPI::fromJsonValue(m_room_type_supplements, json[QString("room_type_supplements")]);
    m_room_type_supplements_isSet = !json[QString("room_type_supplements")].isNull() && m_room_type_supplements_isValid;
}

QString OAIRateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_base_price_isSet) {
        obj.insert(QString("base_price"), ::OpenAPI::toJsonValue(m_base_price));
    }
    if (m_business_day_isSet) {
        obj.insert(QString("business_day"), ::OpenAPI::toJsonValue(m_business_day));
    }
    if (m_cancellation_policy.isSet()) {
        obj.insert(QString("cancellation_policy"), ::OpenAPI::toJsonValue(m_cancellation_policy));
    }
    if (m_derivation.isSet()) {
        obj.insert(QString("derivation"), ::OpenAPI::toJsonValue(m_derivation));
    }
    if (m_minimum_guarantee_type_isSet) {
        obj.insert(QString("minimum_guarantee_type"), ::OpenAPI::toJsonValue(m_minimum_guarantee_type));
    }
    if (m_per_person_surcharge_isSet) {
        obj.insert(QString("per_person_surcharge"), ::OpenAPI::toJsonValue(m_per_person_surcharge));
    }
    if (m_room_type_supplements.size() > 0) {
        obj.insert(QString("room_type_supplements"), ::OpenAPI::toJsonValue(m_room_type_supplements));
    }
    return obj;
}

QMap<QString, OAILinkObject> OAIRateResponse::getLinks() const {
    return m__links;
}
void OAIRateResponse::setLinks(const QMap<QString, OAILinkObject> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIRateResponse::is__links_Set() const{
    return m__links_isSet;
}

bool OAIRateResponse::is__links_Valid() const{
    return m__links_isValid;
}

double OAIRateResponse::getBasePrice() const {
    return m_base_price;
}
void OAIRateResponse::setBasePrice(const double &base_price) {
    m_base_price = base_price;
    m_base_price_isSet = true;
}

bool OAIRateResponse::is_base_price_Set() const{
    return m_base_price_isSet;
}

bool OAIRateResponse::is_base_price_Valid() const{
    return m_base_price_isValid;
}

QDateTime OAIRateResponse::getBusinessDay() const {
    return m_business_day;
}
void OAIRateResponse::setBusinessDay(const QDateTime &business_day) {
    m_business_day = business_day;
    m_business_day_isSet = true;
}

bool OAIRateResponse::is_business_day_Set() const{
    return m_business_day_isSet;
}

bool OAIRateResponse::is_business_day_Valid() const{
    return m_business_day_isValid;
}

OAIPolicy OAIRateResponse::getCancellationPolicy() const {
    return m_cancellation_policy;
}
void OAIRateResponse::setCancellationPolicy(const OAIPolicy &cancellation_policy) {
    m_cancellation_policy = cancellation_policy;
    m_cancellation_policy_isSet = true;
}

bool OAIRateResponse::is_cancellation_policy_Set() const{
    return m_cancellation_policy_isSet;
}

bool OAIRateResponse::is_cancellation_policy_Valid() const{
    return m_cancellation_policy_isValid;
}

OAIPriceDerivation OAIRateResponse::getDerivation() const {
    return m_derivation;
}
void OAIRateResponse::setDerivation(const OAIPriceDerivation &derivation) {
    m_derivation = derivation;
    m_derivation_isSet = true;
}

bool OAIRateResponse::is_derivation_Set() const{
    return m_derivation_isSet;
}

bool OAIRateResponse::is_derivation_Valid() const{
    return m_derivation_isValid;
}

QString OAIRateResponse::getMinimumGuaranteeType() const {
    return m_minimum_guarantee_type;
}
void OAIRateResponse::setMinimumGuaranteeType(const QString &minimum_guarantee_type) {
    m_minimum_guarantee_type = minimum_guarantee_type;
    m_minimum_guarantee_type_isSet = true;
}

bool OAIRateResponse::is_minimum_guarantee_type_Set() const{
    return m_minimum_guarantee_type_isSet;
}

bool OAIRateResponse::is_minimum_guarantee_type_Valid() const{
    return m_minimum_guarantee_type_isValid;
}

double OAIRateResponse::getPerPersonSurcharge() const {
    return m_per_person_surcharge;
}
void OAIRateResponse::setPerPersonSurcharge(const double &per_person_surcharge) {
    m_per_person_surcharge = per_person_surcharge;
    m_per_person_surcharge_isSet = true;
}

bool OAIRateResponse::is_per_person_surcharge_Set() const{
    return m_per_person_surcharge_isSet;
}

bool OAIRateResponse::is_per_person_surcharge_Valid() const{
    return m_per_person_surcharge_isValid;
}

QList<OAIRoomTypeSupplement> OAIRateResponse::getRoomTypeSupplements() const {
    return m_room_type_supplements;
}
void OAIRateResponse::setRoomTypeSupplements(const QList<OAIRoomTypeSupplement> &room_type_supplements) {
    m_room_type_supplements = room_type_supplements;
    m_room_type_supplements_isSet = true;
}

bool OAIRateResponse::is_room_type_supplements_Set() const{
    return m_room_type_supplements_isSet;
}

bool OAIRateResponse::is_room_type_supplements_Valid() const{
    return m_room_type_supplements_isValid;
}

bool OAIRateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_derivation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_guarantee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_person_surcharge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_type_supplements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
