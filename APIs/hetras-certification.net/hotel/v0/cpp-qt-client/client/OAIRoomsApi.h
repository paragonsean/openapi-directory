/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoomsApi_H
#define OAI_OAIRoomsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIOperation_RoomPatchRequest.h"
#include "OAIRoom.h"
#include "OAIRoomListResponse.h"
#include "OAITotalCountResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoomsApi : public QObject {
    Q_OBJECT

public:
    OAIRoomsApi(const int timeOut = 0);
    ~OAIRoomsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [required]
    * @param[in]  adults QByteArray [optional]
    * @param[in]  include_out_of_service bool [optional]
    * @param[in]  room_types QList<QString> [optional]
    * @param[in]  amenities QList<QString> [optional]
    * @param[in]  views QList<QString> [optional]
    * @param[in]  locations QList<QString> [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  inlinecount QString [optional]
    */
    virtual void roomsGetAvailableRooms(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QDateTime &from, const QDateTime &to, const ::OpenAPI::OptionalParam<QByteArray> &adults = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<bool> &include_out_of_service = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &room_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &amenities = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &views = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &locations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &inlinecount = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  room_number QString [required]
    */
    virtual void roomsGetRoom(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &room_number);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  occupancy QString [optional]
    * @param[in]  conditions QList<QString> [optional]
    * @param[in]  maintenances QList<QString> [optional]
    * @param[in]  room_types QList<QString> [optional]
    * @param[in]  amenities QList<QString> [optional]
    * @param[in]  views QList<QString> [optional]
    * @param[in]  locations QList<QString> [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  inlinecount QString [optional]
    */
    virtual void roomsGetRooms(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const ::OpenAPI::OptionalParam<QString> &occupancy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &conditions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &maintenances = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &room_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &amenities = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &views = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &locations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &inlinecount = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  occupancy QString [optional]
    * @param[in]  conditions QList<QString> [optional]
    * @param[in]  maintenances QList<QString> [optional]
    * @param[in]  room_types QList<QString> [optional]
    * @param[in]  amenities QList<QString> [optional]
    * @param[in]  views QList<QString> [optional]
    * @param[in]  locations QList<QString> [optional]
    */
    virtual void roomsGetRoomsCount(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const ::OpenAPI::OptionalParam<QString> &occupancy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &conditions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &maintenances = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &room_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &amenities = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &views = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &locations = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  hotel_id qint32 [required]
    * @param[in]  room_number QString [required]
    * @param[in]  patch_request QList<OAIOperation_RoomPatchRequest> [required]
    */
    virtual void roomsPatchRoom(const QString &app_id, const QString &app_key, const qint32 &hotel_id, const QString &room_number, const QList<OAIOperation_RoomPatchRequest> &patch_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void roomsGetAvailableRoomsCallback(OAIHttpRequestWorker *worker);
    void roomsGetRoomCallback(OAIHttpRequestWorker *worker);
    void roomsGetRoomsCallback(OAIHttpRequestWorker *worker);
    void roomsGetRoomsCountCallback(OAIHttpRequestWorker *worker);
    void roomsPatchRoomCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void roomsGetAvailableRoomsSignal(OAIRoomListResponse summary);
    void roomsGetRoomSignal(OAIRoom summary);
    void roomsGetRoomsSignal(OAIRoomListResponse summary);
    void roomsGetRoomsCountSignal(OAITotalCountResponse summary);
    void roomsPatchRoomSignal(OAIObject summary);


    void roomsGetAvailableRoomsSignalFull(OAIHttpRequestWorker *worker, OAIRoomListResponse summary);
    void roomsGetRoomSignalFull(OAIHttpRequestWorker *worker, OAIRoom summary);
    void roomsGetRoomsSignalFull(OAIHttpRequestWorker *worker, OAIRoomListResponse summary);
    void roomsGetRoomsCountSignalFull(OAIHttpRequestWorker *worker, OAITotalCountResponse summary);
    void roomsPatchRoomSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use roomsGetAvailableRoomsSignalError() instead")
    void roomsGetAvailableRoomsSignalE(OAIRoomListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsGetAvailableRoomsSignalError(OAIRoomListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roomsGetRoomSignalError() instead")
    void roomsGetRoomSignalE(OAIRoom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsGetRoomSignalError(OAIRoom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roomsGetRoomsSignalError() instead")
    void roomsGetRoomsSignalE(OAIRoomListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsGetRoomsSignalError(OAIRoomListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roomsGetRoomsCountSignalError() instead")
    void roomsGetRoomsCountSignalE(OAITotalCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsGetRoomsCountSignalError(OAITotalCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roomsPatchRoomSignalError() instead")
    void roomsPatchRoomSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsPatchRoomSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use roomsGetAvailableRoomsSignalErrorFull() instead")
    void roomsGetAvailableRoomsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsGetAvailableRoomsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roomsGetRoomSignalErrorFull() instead")
    void roomsGetRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsGetRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roomsGetRoomsSignalErrorFull() instead")
    void roomsGetRoomsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsGetRoomsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roomsGetRoomsCountSignalErrorFull() instead")
    void roomsGetRoomsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsGetRoomsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roomsPatchRoomSignalErrorFull() instead")
    void roomsPatchRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomsPatchRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
