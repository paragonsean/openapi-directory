/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRoomType.h
 *
 * Represent a room type for a property
 */

#ifndef OAIRoomType_H
#define OAIRoomType_H

#include <QJsonObject>

#include "OAISimpleAttribute.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimpleAttribute;

class OAIRoomType : public OAIObject {
public:
    OAIRoomType();
    OAIRoomType(QString json);
    ~OAIRoomType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAISimpleAttribute> getAmenities() const;
    void setAmenities(const QList<OAISimpleAttribute> &amenities);
    bool is_amenities_Set() const;
    bool is_amenities_Valid() const;

    QString getBeddingType() const;
    void setBeddingType(const QString &bedding_type);
    bool is_bedding_type_Set() const;
    bool is_bedding_type_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    bool isRDefault() const;
    void setRDefault(const bool &r_default);
    bool is_r_default_Set() const;
    bool is_r_default_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getExpectedOccupancy() const;
    void setExpectedOccupancy(const qint32 &expected_occupancy);
    bool is_expected_occupancy_Set() const;
    bool is_expected_occupancy_Valid() const;

    QList<OAISimpleAttribute> getFacilities() const;
    void setFacilities(const QList<OAISimpleAttribute> &facilities);
    bool is_facilities_Set() const;
    bool is_facilities_Valid() const;

    qint32 getMaxPersons() const;
    void setMaxPersons(const qint32 &max_persons);
    bool is_max_persons_Set() const;
    bool is_max_persons_Valid() const;

    qint32 getMinPersons() const;
    void setMinPersons(const qint32 &min_persons);
    bool is_min_persons_Set() const;
    bool is_min_persons_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QDateTime getUpdated() const;
    void setUpdated(const QDateTime &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    QList<OAISimpleAttribute> getViews() const;
    void setViews(const QList<OAISimpleAttribute> &views);
    bool is_views_Set() const;
    bool is_views_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAISimpleAttribute> m_amenities;
    bool m_amenities_isSet;
    bool m_amenities_isValid;

    QString m_bedding_type;
    bool m_bedding_type_isSet;
    bool m_bedding_type_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    bool m_r_default;
    bool m_r_default_isSet;
    bool m_r_default_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_expected_occupancy;
    bool m_expected_occupancy_isSet;
    bool m_expected_occupancy_isValid;

    QList<OAISimpleAttribute> m_facilities;
    bool m_facilities_isSet;
    bool m_facilities_isValid;

    qint32 m_max_persons;
    bool m_max_persons_isSet;
    bool m_max_persons_isValid;

    qint32 m_min_persons;
    bool m_min_persons_isSet;
    bool m_min_persons_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QDateTime m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    QList<OAISimpleAttribute> m_views;
    bool m_views_isSet;
    bool m_views_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRoomType)

#endif // OAIRoomType_H
