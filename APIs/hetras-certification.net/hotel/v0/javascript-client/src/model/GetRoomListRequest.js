/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetRoomListRequest model module.
 * @module model/GetRoomListRequest
 * @version v0
 */
class GetRoomListRequest {
    /**
     * Constructs a new <code>GetRoomListRequest</code>.
     * @alias module:model/GetRoomListRequest
     */
    constructor() { 
        
        GetRoomListRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetRoomListRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetRoomListRequest} obj Optional instance to populate.
     * @return {module:model/GetRoomListRequest} The populated <code>GetRoomListRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetRoomListRequest();

            if (data.hasOwnProperty('amenities')) {
                obj['amenities'] = ApiClient.convertToType(data['amenities'], ['String']);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], ['String']);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('maintenances')) {
                obj['maintenances'] = ApiClient.convertToType(data['maintenances'], ['String']);
            }
            if (data.hasOwnProperty('occupancy')) {
                obj['occupancy'] = ApiClient.convertToType(data['occupancy'], 'String');
            }
            if (data.hasOwnProperty('roomTypes')) {
                obj['roomTypes'] = ApiClient.convertToType(data['roomTypes'], ['String']);
            }
            if (data.hasOwnProperty('views')) {
                obj['views'] = ApiClient.convertToType(data['views'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetRoomListRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetRoomListRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['amenities'])) {
            throw new Error("Expected the field `amenities` to be an array in the JSON data but got " + data['amenities']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['conditions'])) {
            throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['maintenances'])) {
            throw new Error("Expected the field `maintenances` to be an array in the JSON data but got " + data['maintenances']);
        }
        // ensure the json data is a string
        if (data['occupancy'] && !(typeof data['occupancy'] === 'string' || data['occupancy'] instanceof String)) {
            throw new Error("Expected the field `occupancy` to be a primitive type in the JSON string but got " + data['occupancy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roomTypes'])) {
            throw new Error("Expected the field `roomTypes` to be an array in the JSON data but got " + data['roomTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['views'])) {
            throw new Error("Expected the field `views` to be an array in the JSON data but got " + data['views']);
        }

        return true;
    }


}



/**
 * Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.
 * @member {Array.<String>} amenities
 */
GetRoomListRequest.prototype['amenities'] = undefined;

/**
 * Return results only for rooms that have the given room condition status.
 * @member {Array.<module:model/GetRoomListRequest.ConditionsEnum>} conditions
 */
GetRoomListRequest.prototype['conditions'] = undefined;

/**
 * Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.
 * @member {Array.<String>} locations
 */
GetRoomListRequest.prototype['locations'] = undefined;

/**
 * Return results only for rooms that have the given maintenance status.
 * @member {Array.<module:model/GetRoomListRequest.MaintenancesEnum>} maintenances
 */
GetRoomListRequest.prototype['maintenances'] = undefined;

/**
 * Return results only for rooms that have the given frontdesk ocuppancy status.
 * @member {module:model/GetRoomListRequest.OccupancyEnum} occupancy
 */
GetRoomListRequest.prototype['occupancy'] = undefined;

/**
 * Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
 * @member {Array.<String>} roomTypes
 */
GetRoomListRequest.prototype['roomTypes'] = undefined;

/**
 * Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.
 * @member {Array.<String>} views
 */
GetRoomListRequest.prototype['views'] = undefined;





/**
 * Allowed values for the <code>conditions</code> property.
 * @enum {String}
 * @readonly
 */
GetRoomListRequest['ConditionsEnum'] = {

    /**
     * value: "CleanNotInspected"
     * @const
     */
    "CleanNotInspected": "CleanNotInspected",

    /**
     * value: "Clean"
     * @const
     */
    "Clean": "Clean",

    /**
     * value: "Dirty"
     * @const
     */
    "Dirty": "Dirty"
};


/**
 * Allowed values for the <code>maintenances</code> property.
 * @enum {String}
 * @readonly
 */
GetRoomListRequest['MaintenancesEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "OutOfInventory"
     * @const
     */
    "OutOfInventory": "OutOfInventory",

    /**
     * value: "OutOfOrder"
     * @const
     */
    "OutOfOrder": "OutOfOrder",

    /**
     * value: "OutOfService"
     * @const
     */
    "OutOfService": "OutOfService"
};


/**
 * Allowed values for the <code>occupancy</code> property.
 * @enum {String}
 * @readonly
 */
GetRoomListRequest['OccupancyEnum'] = {

    /**
     * value: "Occupied"
     * @const
     */
    "Occupied": "Occupied",

    /**
     * value: "Vacant"
     * @const
     */
    "Vacant": "Vacant"
};



export default GetRoomListRequest;

