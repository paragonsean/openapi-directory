/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleAttribute from './SimpleAttribute';

/**
 * The RoomType model module.
 * @module model/RoomType
 * @version v0
 */
class RoomType {
    /**
     * Constructs a new <code>RoomType</code>.
     * Represent a room type for a property
     * @alias module:model/RoomType
     */
    constructor() { 
        
        RoomType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RoomType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoomType} obj Optional instance to populate.
     * @return {module:model/RoomType} The populated <code>RoomType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoomType();

            if (data.hasOwnProperty('amenities')) {
                obj['amenities'] = ApiClient.convertToType(data['amenities'], [SimpleAttribute]);
            }
            if (data.hasOwnProperty('bedding_type')) {
                obj['bedding_type'] = ApiClient.convertToType(data['bedding_type'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expected_occupancy')) {
                obj['expected_occupancy'] = ApiClient.convertToType(data['expected_occupancy'], 'Number');
            }
            if (data.hasOwnProperty('facilities')) {
                obj['facilities'] = ApiClient.convertToType(data['facilities'], [SimpleAttribute]);
            }
            if (data.hasOwnProperty('max_persons')) {
                obj['max_persons'] = ApiClient.convertToType(data['max_persons'], 'Number');
            }
            if (data.hasOwnProperty('min_persons')) {
                obj['min_persons'] = ApiClient.convertToType(data['min_persons'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('views')) {
                obj['views'] = ApiClient.convertToType(data['views'], [SimpleAttribute]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoomType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoomType</code>.
     */
    static validateJSON(data) {
        if (data['amenities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['amenities'])) {
                throw new Error("Expected the field `amenities` to be an array in the JSON data but got " + data['amenities']);
            }
            // validate the optional field `amenities` (array)
            for (const item of data['amenities']) {
                SimpleAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['bedding_type'] && !(typeof data['bedding_type'] === 'string' || data['bedding_type'] instanceof String)) {
            throw new Error("Expected the field `bedding_type` to be a primitive type in the JSON string but got " + data['bedding_type']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['facilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['facilities'])) {
                throw new Error("Expected the field `facilities` to be an array in the JSON data but got " + data['facilities']);
            }
            // validate the optional field `facilities` (array)
            for (const item of data['facilities']) {
                SimpleAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['views']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['views'])) {
                throw new Error("Expected the field `views` to be an array in the JSON data but got " + data['views']);
            }
            // validate the optional field `views` (array)
            for (const item of data['views']) {
                SimpleAttribute.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of amenities for the room type
 * @member {Array.<module:model/SimpleAttribute>} amenities
 */
RoomType.prototype['amenities'] = undefined;

/**
 * The type of bed for the room type
 * @member {module:model/RoomType.BeddingTypeEnum} bedding_type
 */
RoomType.prototype['bedding_type'] = undefined;

/**
 * Code of the room type
 * @member {String} code
 */
RoomType.prototype['code'] = undefined;

/**
 * Timestamp the room type was created
 * @member {Date} created
 */
RoomType.prototype['created'] = undefined;

/**
 * Specifies if the room type is the default room type of the hotel
 * @member {Boolean} default
 */
RoomType.prototype['default'] = undefined;

/**
 * Description of the room type
 * @member {String} description
 */
RoomType.prototype['description'] = undefined;

/**
 * The common amount of persons for the room
 * @member {Number} expected_occupancy
 */
RoomType.prototype['expected_occupancy'] = undefined;

/**
 * List of facilities for the room type
 * @member {Array.<module:model/SimpleAttribute>} facilities
 */
RoomType.prototype['facilities'] = undefined;

/**
 * Maximum number of allowed persons for that room type
 * @member {Number} max_persons
 */
RoomType.prototype['max_persons'] = undefined;

/**
 * Minimum number of allowed persons for that room type
 * @member {Number} min_persons
 */
RoomType.prototype['min_persons'] = undefined;

/**
 * Name of the room type
 * @member {String} name
 */
RoomType.prototype['name'] = undefined;

/**
 * Timestamp of when the room type was changed the last time
 * @member {Date} updated
 */
RoomType.prototype['updated'] = undefined;

/**
 * List of views for the room type
 * @member {Array.<module:model/SimpleAttribute>} views
 */
RoomType.prototype['views'] = undefined;





/**
 * Allowed values for the <code>bedding_type</code> property.
 * @enum {String}
 * @readonly
 */
RoomType['BeddingTypeEnum'] = {

    /**
     * value: "NotDefined"
     * @const
     */
    "NotDefined": "NotDefined",

    /**
     * value: "Double"
     * @const
     */
    "Double": "Double",

    /**
     * value: "Futon"
     * @const
     */
    "Futon": "Futon",

    /**
     * value: "King"
     * @const
     */
    "King": "King",

    /**
     * value: "MurphyBed"
     * @const
     */
    "MurphyBed": "MurphyBed",

    /**
     * value: "Queen"
     * @const
     */
    "Queen": "Queen",

    /**
     * value: "SofaBed"
     * @const
     */
    "SofaBed": "SofaBed",

    /**
     * value: "TatamiMats"
     * @const
     */
    "TatamiMats": "TatamiMats",

    /**
     * value: "Twin"
     * @const
     */
    "Twin": "Twin",

    /**
     * value: "Single"
     * @const
     */
    "Single": "Single"
};



export default RoomType;

