/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinkObject model module.
 * @module model/LinkObject
 * @version v0
 */
class LinkObject {
    /**
     * Constructs a new <code>LinkObject</code>.
     * A Link Object represents a hyperlink from the containing resource to a URI.
     * @alias module:model/LinkObject
     * @param href {String} <para>The \"href\" property is REQUIRED.</para>  <para> </para>  <para>Its value is either a URI [RFC3986] or a URI Template [RFC6570].              If the value is a URI Template then the Link Object SHOULD have a              \"templated\" attribute whose value is true.</para>
     */
    constructor(href) { 
        
        LinkObject.initialize(this, href);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, href) { 
        obj['href'] = href;
    }

    /**
     * Constructs a <code>LinkObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkObject} obj Optional instance to populate.
     * @return {module:model/LinkObject} The populated <code>LinkObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkObject();

            if (data.hasOwnProperty('deprecation')) {
                obj['deprecation'] = ApiClient.convertToType(data['deprecation'], 'String');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('hreflang')) {
                obj['hreflang'] = ApiClient.convertToType(data['hreflang'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = ApiClient.convertToType(data['profile'], 'String');
            }
            if (data.hasOwnProperty('templated')) {
                obj['templated'] = ApiClient.convertToType(data['templated'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LinkObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deprecation'] && !(typeof data['deprecation'] === 'string' || data['deprecation'] instanceof String)) {
            throw new Error("Expected the field `deprecation` to be a primitive type in the JSON string but got " + data['deprecation']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['hreflang'] && !(typeof data['hreflang'] === 'string' || data['hreflang'] instanceof String)) {
            throw new Error("Expected the field `hreflang` to be a primitive type in the JSON string but got " + data['hreflang']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['profile'] && !(typeof data['profile'] === 'string' || data['profile'] instanceof String)) {
            throw new Error("Expected the field `profile` to be a primitive type in the JSON string but got " + data['profile']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

LinkObject.RequiredProperties = ["href"];

/**
 * <para>The \"deprecation\" property is OPTIONAL.</para>  <para> </para>  <para>Its presence indicates that the link is to be deprecated (i.e.              removed) at a future date.  Its value is a URL that SHOULD provide              further information about the deprecation.              A client SHOULD provide some notification (for example, by logging a              warning message) whenever it traverses over a link that has this              property.  The notification SHOULD include the deprecation property's              value so that a client maintainer can easily find information about              the deprecation.</para>
 * @member {String} deprecation
 */
LinkObject.prototype['deprecation'] = undefined;

/**
 * <para>The \"href\" property is REQUIRED.</para>  <para> </para>  <para>Its value is either a URI [RFC3986] or a URI Template [RFC6570].              If the value is a URI Template then the Link Object SHOULD have a              \"templated\" attribute whose value is true.</para>
 * @member {String} href
 */
LinkObject.prototype['href'] = undefined;

/**
 * <para>The \"hreflang\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string and is intended for indicating the language of              the target resource (as defined by [RFC5988]).</para>
 * @member {String} hreflang
 */
LinkObject.prototype['hreflang'] = undefined;

/**
 * <para>The \"name\" property is OPTIONAL.</para>  <para> </para>  <para>Its value MAY be used as a secondary key for selecting Link Objects              which share the same relation type.</para>
 * @member {String} name
 */
LinkObject.prototype['name'] = undefined;

/**
 * <para>The \"profile\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string which is a URI that hints about the profile.</para>
 * @member {String} profile
 */
LinkObject.prototype['profile'] = undefined;

/**
 * <para>The \"templated\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is boolean and SHOULD be true when the Link Object's \"href\"              property is a URI Template.              Its value SHOULD be considered false if it is undefined or any other              value than true.</para>
 * @member {Boolean} templated
 */
LinkObject.prototype['templated'] = undefined;

/**
 * <para>The \"title\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string and is intended for labelling the link with a              human-readable identifier (as defined by [RFC5988]).</para>
 * @member {String} title
 */
LinkObject.prototype['title'] = undefined;

/**
 * <para>The \"type\" property is OPTIONAL.</para>  <para> </para>  <para>Its value is a string used as a hint to indicate the media type              expected when dereferencing the target resource.</para>
 * @member {String} type
 */
LinkObject.prototype['type'] = undefined;






export default LinkObject;

