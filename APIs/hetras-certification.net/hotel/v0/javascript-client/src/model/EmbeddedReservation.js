/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinkObject from './LinkObject';

/**
 * The EmbeddedReservation model module.
 * @module model/EmbeddedReservation
 * @version v0
 */
class EmbeddedReservation {
    /**
     * Constructs a new <code>EmbeddedReservation</code>.
     * Basic data about a reservation
     * @alias module:model/EmbeddedReservation
     * @param arrivalDate {Date} The arrival date of the guests
     * @param confirmationId {String} he confirmation id for the booking which the guest can use to check in on the kiosk, add the               booking to the mobile app etc. It is used as identifier for all reservations done with the               same booking request
     * @param departureDate {Date} The departure date of the guests
     * @param reservationNumber {Number} The reservation number of the reservation
     * @param reservationStatus {module:model/EmbeddedReservation.ReservationStatusEnum} The current status of this reservation
     */
    constructor(arrivalDate, confirmationId, departureDate, reservationNumber, reservationStatus) { 
        
        EmbeddedReservation.initialize(this, arrivalDate, confirmationId, departureDate, reservationNumber, reservationStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, arrivalDate, confirmationId, departureDate, reservationNumber, reservationStatus) { 
        obj['arrival_date'] = arrivalDate;
        obj['confirmation_id'] = confirmationId;
        obj['departure_date'] = departureDate;
        obj['reservation_number'] = reservationNumber;
        obj['reservation_status'] = reservationStatus;
    }

    /**
     * Constructs a <code>EmbeddedReservation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmbeddedReservation} obj Optional instance to populate.
     * @return {module:model/EmbeddedReservation} The populated <code>EmbeddedReservation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmbeddedReservation();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = ApiClient.convertToType(data['_links'], {'String': LinkObject});
            }
            if (data.hasOwnProperty('arrival_date')) {
                obj['arrival_date'] = ApiClient.convertToType(data['arrival_date'], 'Date');
            }
            if (data.hasOwnProperty('confirmation_id')) {
                obj['confirmation_id'] = ApiClient.convertToType(data['confirmation_id'], 'String');
            }
            if (data.hasOwnProperty('departure_date')) {
                obj['departure_date'] = ApiClient.convertToType(data['departure_date'], 'Date');
            }
            if (data.hasOwnProperty('reservation_number')) {
                obj['reservation_number'] = ApiClient.convertToType(data['reservation_number'], 'Number');
            }
            if (data.hasOwnProperty('reservation_status')) {
                obj['reservation_status'] = ApiClient.convertToType(data['reservation_status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmbeddedReservation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmbeddedReservation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EmbeddedReservation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['confirmation_id'] && !(typeof data['confirmation_id'] === 'string' || data['confirmation_id'] instanceof String)) {
            throw new Error("Expected the field `confirmation_id` to be a primitive type in the JSON string but got " + data['confirmation_id']);
        }
        // ensure the json data is a string
        if (data['reservation_status'] && !(typeof data['reservation_status'] === 'string' || data['reservation_status'] instanceof String)) {
            throw new Error("Expected the field `reservation_status` to be a primitive type in the JSON string but got " + data['reservation_status']);
        }

        return true;
    }


}

EmbeddedReservation.RequiredProperties = ["arrival_date", "confirmation_id", "departure_date", "reservation_number", "reservation_status"];

/**
 * Collection of links to related resources
 * @member {Object.<String, module:model/LinkObject>} _links
 */
EmbeddedReservation.prototype['_links'] = undefined;

/**
 * The arrival date of the guests
 * @member {Date} arrival_date
 */
EmbeddedReservation.prototype['arrival_date'] = undefined;

/**
 * he confirmation id for the booking which the guest can use to check in on the kiosk, add the               booking to the mobile app etc. It is used as identifier for all reservations done with the               same booking request
 * @member {String} confirmation_id
 */
EmbeddedReservation.prototype['confirmation_id'] = undefined;

/**
 * The departure date of the guests
 * @member {Date} departure_date
 */
EmbeddedReservation.prototype['departure_date'] = undefined;

/**
 * The reservation number of the reservation
 * @member {Number} reservation_number
 */
EmbeddedReservation.prototype['reservation_number'] = undefined;

/**
 * The current status of this reservation
 * @member {module:model/EmbeddedReservation.ReservationStatusEnum} reservation_status
 */
EmbeddedReservation.prototype['reservation_status'] = undefined;





/**
 * Allowed values for the <code>reservation_status</code> property.
 * @enum {String}
 * @readonly
 */
EmbeddedReservation['ReservationStatusEnum'] = {

    /**
     * value: "Tentative"
     * @const
     */
    "Tentative": "Tentative",

    /**
     * value: "Waitlisted"
     * @const
     */
    "Waitlisted": "Waitlisted",

    /**
     * value: "OnRequest"
     * @const
     */
    "OnRequest": "OnRequest",

    /**
     * value: "NonGuaranteed"
     * @const
     */
    "NonGuaranteed": "NonGuaranteed",

    /**
     * value: "Guaranteed"
     * @const
     */
    "Guaranteed": "Guaranteed",

    /**
     * value: "InHouse"
     * @const
     */
    "InHouse": "InHouse",

    /**
     * value: "CheckedOut"
     * @const
     */
    "CheckedOut": "CheckedOut",

    /**
     * value: "NoShow"
     * @const
     */
    "NoShow": "NoShow",

    /**
     * value: "Denied"
     * @const
     */
    "Denied": "Denied",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Released"
     * @const
     */
    "Released": "Released",

    /**
     * value: "Walked"
     * @const
     */
    "Walked": "Walked",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "WalkIn"
     * @const
     */
    "WalkIn": "WalkIn",

    /**
     * value: "Registered"
     * @const
     */
    "Registered": "Registered"
};



export default EmbeddedReservation;

