/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RoomBedding model module.
 * @module model/RoomBedding
 * @version v0
 */
class RoomBedding {
    /**
     * Constructs a new <code>RoomBedding</code>.
     * Information about room bedding
     * @alias module:model/RoomBedding
     */
    constructor() { 
        
        RoomBedding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RoomBedding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoomBedding} obj Optional instance to populate.
     * @return {module:model/RoomBedding} The populated <code>RoomBedding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoomBedding();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoomBedding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoomBedding</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Number of available beds of the specified type
 * @member {Number} count
 */
RoomBedding.prototype['count'] = undefined;

/**
 * The type of bed
 * @member {module:model/RoomBedding.TypeEnum} type
 */
RoomBedding.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RoomBedding['TypeEnum'] = {

    /**
     * value: "NotDefined"
     * @const
     */
    "NotDefined": "NotDefined",

    /**
     * value: "Double"
     * @const
     */
    "Double": "Double",

    /**
     * value: "Futon"
     * @const
     */
    "Futon": "Futon",

    /**
     * value: "King"
     * @const
     */
    "King": "King",

    /**
     * value: "MurphyBed"
     * @const
     */
    "MurphyBed": "MurphyBed",

    /**
     * value: "Queen"
     * @const
     */
    "Queen": "Queen",

    /**
     * value: "SofaBed"
     * @const
     */
    "SofaBed": "SofaBed",

    /**
     * value: "TatamiMats"
     * @const
     */
    "TatamiMats": "TatamiMats",

    /**
     * value: "Twin"
     * @const
     */
    "Twin": "Twin",

    /**
     * value: "Single"
     * @const
     */
    "Single": "Single"
};



export default RoomBedding;

