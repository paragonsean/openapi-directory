/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RoomMaintenance model module.
 * @module model/RoomMaintenance
 * @version v0
 */
class RoomMaintenance {
    /**
     * Constructs a new <code>RoomMaintenance</code>.
     * @alias module:model/RoomMaintenance
     */
    constructor() { 
        
        RoomMaintenance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RoomMaintenance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoomMaintenance} obj Optional instance to populate.
     * @return {module:model/RoomMaintenance} The populated <code>RoomMaintenance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoomMaintenance();

            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoomMaintenance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoomMaintenance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Start date of the current maintenance work
 * @member {String} from
 */
RoomMaintenance.prototype['from'] = undefined;

/**
 * A description about the reason for the ongoing maintenance work
 * @member {String} reason
 */
RoomMaintenance.prototype['reason'] = undefined;

/**
 * End date of the current maintenance work
 * @member {String} to
 */
RoomMaintenance.prototype['to'] = undefined;

/**
 * Maintenance Status
 * @member {module:model/RoomMaintenance.ValueEnum} value
 */
RoomMaintenance.prototype['value'] = undefined;





/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
RoomMaintenance['ValueEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "OutOfInventory"
     * @const
     */
    "OutOfInventory": "OutOfInventory",

    /**
     * value: "OutOfOrder"
     * @const
     */
    "OutOfOrder": "OutOfOrder",

    /**
     * value: "OutOfService"
     * @const
     */
    "OutOfService": "OutOfService"
};



export default RoomMaintenance;

