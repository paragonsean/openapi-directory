/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessControlInfo from './AccessControlInfo';
import DatePeriod from './DatePeriod';
import Derivation from './Derivation';
import EmbeddedRoomType from './EmbeddedRoomType';
import LinkObject from './LinkObject';
import RateplanGroup from './RateplanGroup';
import RelatedRateplan from './RelatedRateplan';
import Restrictions from './Restrictions';

/**
 * The ExtendedRateplanEntry model module.
 * @module model/ExtendedRateplanEntry
 * @version v0
 */
class ExtendedRateplanEntry {
    /**
     * Constructs a new <code>ExtendedRateplanEntry</code>.
     * @alias module:model/ExtendedRateplanEntry
     */
    constructor() { 
        
        ExtendedRateplanEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtendedRateplanEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendedRateplanEntry} obj Optional instance to populate.
     * @return {module:model/ExtendedRateplanEntry} The populated <code>ExtendedRateplanEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendedRateplanEntry();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = ApiClient.convertToType(data['_links'], {'String': LinkObject});
            }
            if (data.hasOwnProperty('access_control')) {
                obj['access_control'] = ApiClient.convertToType(data['access_control'], [AccessControlInfo]);
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('active_periods')) {
                obj['active_periods'] = ApiClient.convertToType(data['active_periods'], [DatePeriod]);
            }
            if (data.hasOwnProperty('booking_periods')) {
                obj['booking_periods'] = ApiClient.convertToType(data['booking_periods'], [DatePeriod]);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('commissionable')) {
                obj['commissionable'] = ApiClient.convertToType(data['commissionable'], 'Boolean');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('day_use')) {
                obj['day_use'] = ApiClient.convertToType(data['day_use'], 'Boolean');
            }
            if (data.hasOwnProperty('derivation')) {
                obj['derivation'] = Derivation.constructFromObject(data['derivation']);
            }
            if (data.hasOwnProperty('derived_rateplans')) {
                obj['derived_rateplans'] = ApiClient.convertToType(data['derived_rateplans'], [RelatedRateplan]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('folio_name')) {
                obj['folio_name'] = ApiClient.convertToType(data['folio_name'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = RateplanGroup.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('included_services')) {
                obj['included_services'] = ApiClient.convertToType(data['included_services'], ['String']);
            }
            if (data.hasOwnProperty('is_yieldable')) {
                obj['is_yieldable'] = ApiClient.convertToType(data['is_yieldable'], 'Boolean');
            }
            if (data.hasOwnProperty('market_code')) {
                obj['market_code'] = ApiClient.convertToType(data['market_code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('noshow_policy')) {
                obj['noshow_policy'] = ApiClient.convertToType(data['noshow_policy'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = Restrictions.constructFromObject(data['restrictions']);
            }
            if (data.hasOwnProperty('room_types')) {
                obj['room_types'] = ApiClient.convertToType(data['room_types'], [EmbeddedRoomType]);
            }
            if (data.hasOwnProperty('suspended')) {
                obj['suspended'] = ApiClient.convertToType(data['suspended'], 'Boolean');
            }
            if (data.hasOwnProperty('taxes_included')) {
                obj['taxes_included'] = ApiClient.convertToType(data['taxes_included'], 'Boolean');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtendedRateplanEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtendedRateplanEntry</code>.
     */
    static validateJSON(data) {
        if (data['access_control']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['access_control'])) {
                throw new Error("Expected the field `access_control` to be an array in the JSON data but got " + data['access_control']);
            }
            // validate the optional field `access_control` (array)
            for (const item of data['access_control']) {
                AccessControlInfo.validateJSON(item);
            };
        }
        if (data['active_periods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['active_periods'])) {
                throw new Error("Expected the field `active_periods` to be an array in the JSON data but got " + data['active_periods']);
            }
            // validate the optional field `active_periods` (array)
            for (const item of data['active_periods']) {
                DatePeriod.validateJSON(item);
            };
        }
        if (data['booking_periods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['booking_periods'])) {
                throw new Error("Expected the field `booking_periods` to be an array in the JSON data but got " + data['booking_periods']);
            }
            // validate the optional field `booking_periods` (array)
            for (const item of data['booking_periods']) {
                DatePeriod.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `derivation`
        if (data['derivation']) { // data not null
          Derivation.validateJSON(data['derivation']);
        }
        if (data['derived_rateplans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['derived_rateplans'])) {
                throw new Error("Expected the field `derived_rateplans` to be an array in the JSON data but got " + data['derived_rateplans']);
            }
            // validate the optional field `derived_rateplans` (array)
            for (const item of data['derived_rateplans']) {
                RelatedRateplan.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['folio_name'] && !(typeof data['folio_name'] === 'string' || data['folio_name'] instanceof String)) {
            throw new Error("Expected the field `folio_name` to be a primitive type in the JSON string but got " + data['folio_name']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          RateplanGroup.validateJSON(data['group']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['included_services'])) {
            throw new Error("Expected the field `included_services` to be an array in the JSON data but got " + data['included_services']);
        }
        // ensure the json data is a string
        if (data['market_code'] && !(typeof data['market_code'] === 'string' || data['market_code'] instanceof String)) {
            throw new Error("Expected the field `market_code` to be a primitive type in the JSON string but got " + data['market_code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['noshow_policy'] && !(typeof data['noshow_policy'] === 'string' || data['noshow_policy'] instanceof String)) {
            throw new Error("Expected the field `noshow_policy` to be a primitive type in the JSON string but got " + data['noshow_policy']);
        }
        // validate the optional field `restrictions`
        if (data['restrictions']) { // data not null
          Restrictions.validateJSON(data['restrictions']);
        }
        if (data['room_types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['room_types'])) {
                throw new Error("Expected the field `room_types` to be an array in the JSON data but got " + data['room_types']);
            }
            // validate the optional field `room_types` (array)
            for (const item of data['room_types']) {
                EmbeddedRoomType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * Collection of links to related resources
 * @member {Object.<String, module:model/LinkObject>} _links
 */
ExtendedRateplanEntry.prototype['_links'] = undefined;

/**
 * List of distribution channel groups and channels the rateplan is sold through
 * @member {Array.<module:model/AccessControlInfo>} access_control
 */
ExtendedRateplanEntry.prototype['access_control'] = undefined;

/**
 * Defines if the rateplan has been ended and is expired
 * @member {Boolean} active
 */
ExtendedRateplanEntry.prototype['active'] = undefined;

/**
 * List of active periods. Arrival and departure day for reservations based on this rateplan need to              fit into one of these time periods
 * @member {Array.<module:model/DatePeriod>} active_periods
 */
ExtendedRateplanEntry.prototype['active_periods'] = undefined;

/**
 * List of booking periods. During these time periods the rateplan is sold
 * @member {Array.<module:model/DatePeriod>} booking_periods
 */
ExtendedRateplanEntry.prototype['booking_periods'] = undefined;

/**
 * Code of the rateplan
 * @member {String} code
 */
ExtendedRateplanEntry.prototype['code'] = undefined;

/**
 * Defines if this rateplan is setup with a commission
 * @member {Boolean} commissionable
 */
ExtendedRateplanEntry.prototype['commissionable'] = undefined;

/**
 * Timestamp the rateplan was created
 * @member {Date} created
 */
ExtendedRateplanEntry.prototype['created'] = undefined;

/**
 * Defines if this rateplan is used for day use reservations
 * @member {Boolean} day_use
 */
ExtendedRateplanEntry.prototype['day_use'] = undefined;

/**
 * @member {module:model/Derivation} derivation
 */
ExtendedRateplanEntry.prototype['derivation'] = undefined;

/**
 * Details about all the derived rateplans if any
 * @member {Array.<module:model/RelatedRateplan>} derived_rateplans
 */
ExtendedRateplanEntry.prototype['derived_rateplans'] = undefined;

/**
 * Description of the rateplan
 * @member {String} description
 */
ExtendedRateplanEntry.prototype['description'] = undefined;

/**
 * Text defining how the room charges for this rateplan are shown on the folio and              invoice for the guest
 * @member {String} folio_name
 */
ExtendedRateplanEntry.prototype['folio_name'] = undefined;

/**
 * @member {module:model/RateplanGroup} group
 */
ExtendedRateplanEntry.prototype['group'] = undefined;

/**
 * List of codes for the included services sold with this rateplan
 * @member {Array.<String>} included_services
 */
ExtendedRateplanEntry.prototype['included_services'] = undefined;

/**
 * Gives the information if this rateplan is Yieldable rateplan
 * @member {Boolean} is_yieldable
 */
ExtendedRateplanEntry.prototype['is_yieldable'] = undefined;

/**
 * The code of the market segment the rate plan is linked to
 * @member {String} market_code
 */
ExtendedRateplanEntry.prototype['market_code'] = undefined;

/**
 * Name of the rateplan
 * @member {String} name
 */
ExtendedRateplanEntry.prototype['name'] = undefined;

/**
 * The code of the noshow policy for this rateplan
 * @member {String} noshow_policy
 */
ExtendedRateplanEntry.prototype['noshow_policy'] = undefined;

/**
 * @member {module:model/Restrictions} restrictions
 */
ExtendedRateplanEntry.prototype['restrictions'] = undefined;

/**
 * List of all room types sold through this rateplan
 * @member {Array.<module:model/EmbeddedRoomType>} room_types
 */
ExtendedRateplanEntry.prototype['room_types'] = undefined;

/**
 * Defines if a rateplan is suspended and no new reservations can be created for this              rateplan at the moment
 * @member {Boolean} suspended
 */
ExtendedRateplanEntry.prototype['suspended'] = undefined;

/**
 * Defines if the daily rates include VAT or not
 * @member {Boolean} taxes_included
 */
ExtendedRateplanEntry.prototype['taxes_included'] = undefined;

/**
 * Timestamp of when the rateplan was changed the last time
 * @member {Date} updated
 */
ExtendedRateplanEntry.prototype['updated'] = undefined;

/**
 * Defines if this rateplan is visible to the public or only for specific customers
 * @member {module:model/ExtendedRateplanEntry.VisibilityEnum} visibility
 */
ExtendedRateplanEntry.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
ExtendedRateplanEntry['VisibilityEnum'] = {

    /**
     * value: "Public"
     * @const
     */
    "Public": "Public",

    /**
     * value: "Negotiated"
     * @const
     */
    "Negotiated": "Negotiated"
};



export default ExtendedRateplanEntry;

