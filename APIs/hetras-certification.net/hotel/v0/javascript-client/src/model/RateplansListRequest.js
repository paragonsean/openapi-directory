/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RateplansListRequest model module.
 * @module model/RateplansListRequest
 * @version v0
 */
class RateplansListRequest {
    /**
     * Constructs a new <code>RateplansListRequest</code>.
     * @alias module:model/RateplansListRequest
     */
    constructor() { 
        
        RateplansListRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RateplansListRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RateplansListRequest} obj Optional instance to populate.
     * @return {module:model/RateplansListRequest} The populated <code>RateplansListRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RateplansListRequest();

            if (data.hasOwnProperty('baseRateplan')) {
                obj['baseRateplan'] = ApiClient.convertToType(data['baseRateplan'], 'String');
            }
            if (data.hasOwnProperty('channelCode')) {
                obj['channelCode'] = ApiClient.convertToType(data['channelCode'], 'String');
            }
            if (data.hasOwnProperty('channelGroup')) {
                obj['channelGroup'] = ApiClient.convertToType(data['channelGroup'], 'String');
            }
            if (data.hasOwnProperty('commissionable')) {
                obj['commissionable'] = ApiClient.convertToType(data['commissionable'], 'Boolean');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('includedServices')) {
                obj['includedServices'] = ApiClient.convertToType(data['includedServices'], ['String']);
            }
            if (data.hasOwnProperty('marketCodes')) {
                obj['marketCodes'] = ApiClient.convertToType(data['marketCodes'], ['String']);
            }
            if (data.hasOwnProperty('roomTypes')) {
                obj['roomTypes'] = ApiClient.convertToType(data['roomTypes'], ['String']);
            }
            if (data.hasOwnProperty('sellingStatus')) {
                obj['sellingStatus'] = ApiClient.convertToType(data['sellingStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RateplansListRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RateplansListRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseRateplan'] && !(typeof data['baseRateplan'] === 'string' || data['baseRateplan'] instanceof String)) {
            throw new Error("Expected the field `baseRateplan` to be a primitive type in the JSON string but got " + data['baseRateplan']);
        }
        // ensure the json data is a string
        if (data['channelCode'] && !(typeof data['channelCode'] === 'string' || data['channelCode'] instanceof String)) {
            throw new Error("Expected the field `channelCode` to be a primitive type in the JSON string but got " + data['channelCode']);
        }
        // ensure the json data is a string
        if (data['channelGroup'] && !(typeof data['channelGroup'] === 'string' || data['channelGroup'] instanceof String)) {
            throw new Error("Expected the field `channelGroup` to be a primitive type in the JSON string but got " + data['channelGroup']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedServices'])) {
            throw new Error("Expected the field `includedServices` to be an array in the JSON data but got " + data['includedServices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['marketCodes'])) {
            throw new Error("Expected the field `marketCodes` to be an array in the JSON data but got " + data['marketCodes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roomTypes'])) {
            throw new Error("Expected the field `roomTypes` to be an array in the JSON data but got " + data['roomTypes']);
        }
        // ensure the json data is a string
        if (data['sellingStatus'] && !(typeof data['sellingStatus'] === 'string' || data['sellingStatus'] instanceof String)) {
            throw new Error("Expected the field `sellingStatus` to be a primitive type in the JSON string but got " + data['sellingStatus']);
        }

        return true;
    }


}



/**
 * Return all rateplans having the specified rateplan as base rateplan
 * @member {String} baseRateplan
 */
RateplansListRequest.prototype['baseRateplan'] = undefined;

/**
 * Return all rateplans sold through the specified channel
 * @member {String} channelCode
 */
RateplansListRequest.prototype['channelCode'] = undefined;

/**
 * Return all rateplans that are sold through at least one channel out of the specified channel group
 * @member {String} channelGroup
 */
RateplansListRequest.prototype['channelGroup'] = undefined;

/**
 * Return all rateplans having commisionable status
 * @member {Boolean} commissionable
 */
RateplansListRequest.prototype['commissionable'] = undefined;

/**
 * Return all rateplans belonging to the specified rateplan group
 * @member {String} group
 */
RateplansListRequest.prototype['group'] = undefined;

/**
 * Return all rateplans having at least one of the specified services included
 * @member {Array.<String>} includedServices
 */
RateplansListRequest.prototype['includedServices'] = undefined;

/**
 * Return all rateplans having one of the specified values as a market code
 * @member {Array.<String>} marketCodes
 */
RateplansListRequest.prototype['marketCodes'] = undefined;

/**
 * Return all rateplans by which at least one of the specified room types are sold
 * @member {Array.<String>} roomTypes
 */
RateplansListRequest.prototype['roomTypes'] = undefined;

/**
 * Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans.
 * @member {module:model/RateplansListRequest.SellingStatusEnum} sellingStatus
 */
RateplansListRequest.prototype['sellingStatus'] = undefined;





/**
 * Allowed values for the <code>sellingStatus</code> property.
 * @enum {String}
 * @readonly
 */
RateplansListRequest['SellingStatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "All"
     * @const
     */
    "All": "All"
};



export default RateplansListRequest;

