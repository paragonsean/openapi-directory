/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedReservation from './EmbeddedReservation';
import EmbeddedRoomType from './EmbeddedRoomType';
import RoomBedding from './RoomBedding';
import RoomStatus from './RoomStatus';
import SimpleAttribute from './SimpleAttribute';

/**
 * The Room model module.
 * @module model/Room
 * @version v0
 */
class Room {
    /**
     * Constructs a new <code>Room</code>.
     * Represents a room for a property.
     * @alias module:model/Room
     * @param expectedOccupancy {Number} The common amount of persons for the room
     * @param floor {Number} Floor of the room
     * @param maxPersons {Number} Maximum number of allowed persons in the room
     * @param minPersons {Number} Minimum number of allowed persons in the room
     * @param number {String} Number of the room
     * @param roomType {module:model/EmbeddedRoomType} 
     * @param status {module:model/RoomStatus} 
     */
    constructor(expectedOccupancy, floor, maxPersons, minPersons, number, roomType, status) { 
        
        Room.initialize(this, expectedOccupancy, floor, maxPersons, minPersons, number, roomType, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expectedOccupancy, floor, maxPersons, minPersons, number, roomType, status) { 
        obj['expected_occupancy'] = expectedOccupancy;
        obj['floor'] = floor;
        obj['max_persons'] = maxPersons;
        obj['min_persons'] = minPersons;
        obj['number'] = number;
        obj['room_type'] = roomType;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Room</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Room} obj Optional instance to populate.
     * @return {module:model/Room} The populated <code>Room</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Room();

            if (data.hasOwnProperty('amenities')) {
                obj['amenities'] = ApiClient.convertToType(data['amenities'], [SimpleAttribute]);
            }
            if (data.hasOwnProperty('beddings')) {
                obj['beddings'] = ApiClient.convertToType(data['beddings'], [RoomBedding]);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expected_occupancy')) {
                obj['expected_occupancy'] = ApiClient.convertToType(data['expected_occupancy'], 'Number');
            }
            if (data.hasOwnProperty('extra_bed_allowed')) {
                obj['extra_bed_allowed'] = ApiClient.convertToType(data['extra_bed_allowed'], 'Boolean');
            }
            if (data.hasOwnProperty('floor')) {
                obj['floor'] = ApiClient.convertToType(data['floor'], 'Number');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [SimpleAttribute]);
            }
            if (data.hasOwnProperty('max_persons')) {
                obj['max_persons'] = ApiClient.convertToType(data['max_persons'], 'Number');
            }
            if (data.hasOwnProperty('min_persons')) {
                obj['min_persons'] = ApiClient.convertToType(data['min_persons'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('reservations')) {
                obj['reservations'] = ApiClient.convertToType(data['reservations'], [EmbeddedReservation]);
            }
            if (data.hasOwnProperty('room_type')) {
                obj['room_type'] = EmbeddedRoomType.constructFromObject(data['room_type']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = RoomStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('views')) {
                obj['views'] = ApiClient.convertToType(data['views'], [SimpleAttribute]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Room</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Room</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Room.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['amenities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['amenities'])) {
                throw new Error("Expected the field `amenities` to be an array in the JSON data but got " + data['amenities']);
            }
            // validate the optional field `amenities` (array)
            for (const item of data['amenities']) {
                SimpleAttribute.validateJSON(item);
            };
        }
        if (data['beddings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['beddings'])) {
                throw new Error("Expected the field `beddings` to be an array in the JSON data but got " + data['beddings']);
            }
            // validate the optional field `beddings` (array)
            for (const item of data['beddings']) {
                RoomBedding.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                SimpleAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        if (data['reservations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reservations'])) {
                throw new Error("Expected the field `reservations` to be an array in the JSON data but got " + data['reservations']);
            }
            // validate the optional field `reservations` (array)
            for (const item of data['reservations']) {
                EmbeddedReservation.validateJSON(item);
            };
        }
        // validate the optional field `room_type`
        if (data['room_type']) { // data not null
          EmbeddedRoomType.validateJSON(data['room_type']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          RoomStatus.validateJSON(data['status']);
        }
        if (data['views']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['views'])) {
                throw new Error("Expected the field `views` to be an array in the JSON data but got " + data['views']);
            }
            // validate the optional field `views` (array)
            for (const item of data['views']) {
                SimpleAttribute.validateJSON(item);
            };
        }

        return true;
    }


}

Room.RequiredProperties = ["expected_occupancy", "floor", "max_persons", "min_persons", "number", "room_type", "status"];

/**
 * List of amenities for the room
 * @member {Array.<module:model/SimpleAttribute>} amenities
 */
Room.prototype['amenities'] = undefined;

/**
 * Provides information about available beds in the room
 * @member {Array.<module:model/RoomBedding>} beddings
 */
Room.prototype['beddings'] = undefined;

/**
 * Timestamp the room was created
 * @member {Date} created
 */
Room.prototype['created'] = undefined;

/**
 * Description of the room
 * @member {String} description
 */
Room.prototype['description'] = undefined;

/**
 * The common amount of persons for the room
 * @member {Number} expected_occupancy
 */
Room.prototype['expected_occupancy'] = undefined;

/**
 * Is there an extra bed allowed in the room
 * @member {Boolean} extra_bed_allowed
 */
Room.prototype['extra_bed_allowed'] = undefined;

/**
 * Floor of the room
 * @member {Number} floor
 */
Room.prototype['floor'] = undefined;

/**
 * List of locations for the room
 * @member {Array.<module:model/SimpleAttribute>} locations
 */
Room.prototype['locations'] = undefined;

/**
 * Maximum number of allowed persons in the room
 * @member {Number} max_persons
 */
Room.prototype['max_persons'] = undefined;

/**
 * Minimum number of allowed persons in the room
 * @member {Number} min_persons
 */
Room.prototype['min_persons'] = undefined;

/**
 * Name of the room
 * @member {String} name
 */
Room.prototype['name'] = undefined;

/**
 * Number of the room
 * @member {String} number
 */
Room.prototype['number'] = undefined;

/**
 * Current reservation(s) for the room. It shows reservations due to arrive today and the one still inhouse.              If there is a day-use reservation assigned for today it can show you up to 3 reservations. One that will              depart today, the day-use reservqation for today and the one due to arrive
 * @member {Array.<module:model/EmbeddedReservation>} reservations
 */
Room.prototype['reservations'] = undefined;

/**
 * @member {module:model/EmbeddedRoomType} room_type
 */
Room.prototype['room_type'] = undefined;

/**
 * @member {module:model/RoomStatus} status
 */
Room.prototype['status'] = undefined;

/**
 * Timestamp of when the room was changed the last time
 * @member {Date} updated
 */
Room.prototype['updated'] = undefined;

/**
 * List of views for the room
 * @member {Array.<module:model/SimpleAttribute>} views
 */
Room.prototype['views'] = undefined;






export default Room;

