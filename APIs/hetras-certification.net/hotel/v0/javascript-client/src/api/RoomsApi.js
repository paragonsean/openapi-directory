/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OperationRoomPatchRequest from '../model/OperationRoomPatchRequest';
import Room from '../model/Room';
import RoomListResponse from '../model/RoomListResponse';
import TotalCountResponse from '../model/TotalCountResponse';

/**
* Rooms service.
* @module api/RoomsApi
* @version v0
*/
export default class RoomsApi {

    /**
    * Constructs a new RoomsApi. 
    * @alias module:api/RoomsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the roomsGetAvailableRooms operation.
     * @callback module:api/RoomsApi~roomsGetAvailableRoomsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoomListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request available rooms using a given criteria.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel you are looking for available rooms.
     * @param {Date} from Rooms returned will not be assigned to a reservation or be under maintenance between this date              and the specified to date. Still there could be departing reservations or ending maintenances              for this date.
     * @param {Date} to Rooms returned will not be assigned to a reservation or be under maintenance between the specified              from date and this date. Still there could be arriving reservations or beginning maintenances              for this date.
     * @param {Object} opts Optional parameters
     * @param {Blob} [adults] Specifies number of adults the returned rooms will have to be able to house. The default value is 1.
     * @param {Boolean} [includeOutOfService] Should rooms that are set OutOfService in the defined time period be returned as available. By default              they are not.
     * @param {Array.<String>} [roomTypes] Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
     * @param {Array.<String>} [amenities] Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.
     * @param {Array.<String>} [views] Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.
     * @param {Array.<String>} [locations] Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.
     * @param {Number} [skip] Amount of items to skip.
     * @param {Number} [top] Amount of items to select.
     * @param {module:model/String} [inlinecount] Return total number of items for a given filter criteria.
     * @param {module:api/RoomsApi~roomsGetAvailableRoomsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoomListResponse}
     */
    roomsGetAvailableRooms(appId, appKey, hotelId, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling roomsGetAvailableRooms");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling roomsGetAvailableRooms");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling roomsGetAvailableRooms");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling roomsGetAvailableRooms");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling roomsGetAvailableRooms");
      }

      let pathParams = {
        'hotelId': hotelId
      };
      let queryParams = {
        'from': from,
        'to': to,
        'adults': opts['adults'],
        'includeOutOfService': opts['includeOutOfService'],
        'roomTypes': this.apiClient.buildCollectionParam(opts['roomTypes'], 'csv'),
        'amenities': this.apiClient.buildCollectionParam(opts['amenities'], 'csv'),
        'views': this.apiClient.buildCollectionParam(opts['views'], 'csv'),
        'locations': this.apiClient.buildCollectionParam(opts['locations'], 'csv'),
        'skip': opts['skip'],
        'top': opts['top'],
        'inlinecount': opts['inlinecount']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoomListResponse;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rooms/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roomsGetRoom operation.
     * @callback module:api/RoomsApi~roomsGetRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Room} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the details for a specific room in the hotel.
     * With this call you can load the details about a specific room in the hotel. It will show you the current status of the room.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the room belongs to.
     * @param {String} roomNumber The room number you want to see details for.
     * @param {module:api/RoomsApi~roomsGetRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Room}
     */
    roomsGetRoom(appId, appKey, hotelId, roomNumber, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling roomsGetRoom");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling roomsGetRoom");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling roomsGetRoom");
      }
      // verify the required parameter 'roomNumber' is set
      if (roomNumber === undefined || roomNumber === null) {
        throw new Error("Missing the required parameter 'roomNumber' when calling roomsGetRoom");
      }

      let pathParams = {
        'hotelId': hotelId,
        'roomNumber': roomNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Room;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rooms/{roomNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roomsGetRooms operation.
     * @callback module:api/RoomsApi~roomsGetRoomsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoomListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of rooms using the provided filtering and pagination criteria.
     * Find all rooms for the hotel that match the specified filter criteria. The filtering will be done based on the current state of              the rooms.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel you are trying to find rooms for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [occupancy] Return results only for rooms that have the given frontdesk ocuppancy status.
     * @param {Array.<module:model/String>} [conditions] Return results only for rooms that have the given room condition status.
     * @param {Array.<module:model/String>} [maintenances] Return results only for rooms that have the given maintenance status.
     * @param {Array.<String>} [roomTypes] Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
     * @param {Array.<String>} [amenities] Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.
     * @param {Array.<String>} [views] Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.
     * @param {Array.<String>} [locations] Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.
     * @param {Number} [skip] Amount of items to skip.
     * @param {Number} [top] Amount of items to select.
     * @param {module:model/String} [inlinecount] Return total number of items for a given filter criteria.
     * @param {module:api/RoomsApi~roomsGetRoomsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoomListResponse}
     */
    roomsGetRooms(appId, appKey, hotelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling roomsGetRooms");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling roomsGetRooms");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling roomsGetRooms");
      }

      let pathParams = {
        'hotelId': hotelId
      };
      let queryParams = {
        'occupancy': opts['occupancy'],
        'conditions': this.apiClient.buildCollectionParam(opts['conditions'], 'csv'),
        'maintenances': this.apiClient.buildCollectionParam(opts['maintenances'], 'csv'),
        'roomTypes': this.apiClient.buildCollectionParam(opts['roomTypes'], 'csv'),
        'amenities': this.apiClient.buildCollectionParam(opts['amenities'], 'csv'),
        'views': this.apiClient.buildCollectionParam(opts['views'], 'csv'),
        'locations': this.apiClient.buildCollectionParam(opts['locations'], 'csv'),
        'skip': opts['skip'],
        'top': opts['top'],
        'inlinecount': opts['inlinecount']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoomListResponse;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rooms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roomsGetRoomsCount operation.
     * @callback module:api/RoomsApi~roomsGetRoomsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotalCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the count of all rooms in the hotel matching the given filter criteria.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel you are counting the rooms for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [occupancy] Return results only for rooms that have the given frontdesk ocuppancy status.
     * @param {Array.<module:model/String>} [conditions] Return results only for rooms that have the given room condition status.
     * @param {Array.<module:model/String>} [maintenances] Return results only for rooms that have the given maintenance status.
     * @param {Array.<String>} [roomTypes] Return result only for rooms for the given room types. Allows to pass a comma-separated list of room types.
     * @param {Array.<String>} [amenities] Return result only for rooms having all of the given amenities. You can provide a comma seperated list of               amenity codes.
     * @param {Array.<String>} [views] Return result only for rooms having at least one of the specified views. You can provide a comma seperated list of               view codes.
     * @param {Array.<String>} [locations] Return result only for rooms having at least one of the specified locations. You can provide a comma seperated list of               location codes.
     * @param {module:api/RoomsApi~roomsGetRoomsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotalCountResponse}
     */
    roomsGetRoomsCount(appId, appKey, hotelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling roomsGetRoomsCount");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling roomsGetRoomsCount");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling roomsGetRoomsCount");
      }

      let pathParams = {
        'hotelId': hotelId
      };
      let queryParams = {
        'occupancy': opts['occupancy'],
        'conditions': this.apiClient.buildCollectionParam(opts['conditions'], 'csv'),
        'maintenances': this.apiClient.buildCollectionParam(opts['maintenances'], 'csv'),
        'roomTypes': this.apiClient.buildCollectionParam(opts['roomTypes'], 'csv'),
        'amenities': this.apiClient.buildCollectionParam(opts['amenities'], 'csv'),
        'views': this.apiClient.buildCollectionParam(opts['views'], 'csv'),
        'locations': this.apiClient.buildCollectionParam(opts['locations'], 'csv')
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = TotalCountResponse;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rooms/$count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roomsPatchRoom operation.
     * @callback module:api/RoomsApi~roomsPatchRoomCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially updates a room.
     * The hetras API is using this <a href=\"https://developer.hetras.com/docs/patch\" onfocus=\"this.blur()\" target=\"_blank\">Patch Specification</a>              to partially update an existing resource. Currently this call only allows to modify condition and housekeeping occupancy status of the room.              <br /><br />              A request example:<br /><pre>              [                {                  \"op\": \"replace\", \"path\": \"/status/condition\", \"value\": \"CleanNotInspected\"                }, {                  \"op\": \"replace\", \"path\": \"/status/housekeeping_occupancy\", \"value\": \"Vacant\"                }              ]              </pre><br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.<br />
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the room belongs to.
     * @param {String} roomNumber The room number of the room you would like to update.
     * @param {Array.<module:model/OperationRoomPatchRequest>} patchRequest A set of JSON Patch operations.
     * @param {module:api/RoomsApi~roomsPatchRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    roomsPatchRoom(appId, appKey, hotelId, roomNumber, patchRequest, callback) {
      let postBody = patchRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling roomsPatchRoom");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling roomsPatchRoom");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling roomsPatchRoom");
      }
      // verify the required parameter 'roomNumber' is set
      if (roomNumber === undefined || roomNumber === null) {
        throw new Error("Missing the required parameter 'roomNumber' when calling roomsPatchRoom");
      }
      // verify the required parameter 'patchRequest' is set
      if (patchRequest === undefined || patchRequest === null) {
        throw new Error("Missing the required parameter 'patchRequest' when calling roomsPatchRoom");
      }

      let pathParams = {
        'hotelId': hotelId,
        'roomNumber': roomNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rooms/{roomNumber}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
