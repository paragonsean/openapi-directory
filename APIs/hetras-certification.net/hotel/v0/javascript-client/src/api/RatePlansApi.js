/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExtendedRateplanEntry from '../model/ExtendedRateplanEntry';
import OperationRatePatchRequest from '../model/OperationRatePatchRequest';
import RateResponse from '../model/RateResponse';
import RateplansListResponse from '../model/RateplansListResponse';
import RatesBatchUpdateRequestItem from '../model/RatesBatchUpdateRequestItem';
import RatesResponse from '../model/RatesResponse';
import TotalCountResponse from '../model/TotalCountResponse';

/**
* RatePlans service.
* @module api/RatePlansApi
* @version v0
*/
export default class RatePlansApi {

    /**
    * Constructs a new RatePlansApi. 
    * @alias module:api/RatePlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ratePlansBatchUpdateRates operation.
     * @callback module:api/RatePlansApi~ratePlansBatchUpdateRatesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a list of base rateplans for a given period and a given base price for single occupancy.
     * Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              <br /><br />              A request example:<br /><pre>              [                {                  \"rateplan\": \"STDN01\", \"from\": \"2018-01-01\", \"to\": \"2018-01-30\", \"base_price\": 120.00                }              ]              </pre><br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.<br />
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the rateplan belongs to.
     * @param {Array.<module:model/RatesBatchUpdateRequestItem>} request 
     * @param {module:api/RatePlansApi~ratePlansBatchUpdateRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    ratePlansBatchUpdateRates(appId, appKey, hotelId, request, callback) {
      let postBody = request;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratePlansBatchUpdateRates");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratePlansBatchUpdateRates");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratePlansBatchUpdateRates");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling ratePlansBatchUpdateRates");
      }

      let pathParams = {
        'hotelId': hotelId
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rateplans/batch/$rates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratePlansGetRate operation.
     * @callback module:api/RatePlansApi~ratePlansGetRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the setup of a daily rate for a specific business day and rateplan.
     * Read the setup of the daily rate for the defined rateplan for that specific business day.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the rateplan belongs to.
     * @param {String} rateplanCode The code of the rateplan you want to see details for.
     * @param {Date} businessDay The business day you want to get the rate setup for.
     * @param {module:api/RatePlansApi~ratePlansGetRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RateResponse}
     */
    ratePlansGetRate(appId, appKey, hotelId, rateplanCode, businessDay, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratePlansGetRate");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratePlansGetRate");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratePlansGetRate");
      }
      // verify the required parameter 'rateplanCode' is set
      if (rateplanCode === undefined || rateplanCode === null) {
        throw new Error("Missing the required parameter 'rateplanCode' when calling ratePlansGetRate");
      }
      // verify the required parameter 'businessDay' is set
      if (businessDay === undefined || businessDay === null) {
        throw new Error("Missing the required parameter 'businessDay' when calling ratePlansGetRate");
      }

      let pathParams = {
        'hotelId': hotelId,
        'rateplanCode': rateplanCode,
        'businessDay': businessDay
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RateResponse;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/{businessDay}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratePlansGetRateplan operation.
     * @callback module:api/RatePlansApi~ratePlansGetRateplanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendedRateplanEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the details for a specific rateplan in the hotel.
     * Read the details about a specific rateplan for the defined hotel.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the rateplan belongs to.
     * @param {String} rateplanCode The code of the rateplan you want to see details for.
     * @param {module:api/RatePlansApi~ratePlansGetRateplanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendedRateplanEntry}
     */
    ratePlansGetRateplan(appId, appKey, hotelId, rateplanCode, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratePlansGetRateplan");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratePlansGetRateplan");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratePlansGetRateplan");
      }
      // verify the required parameter 'rateplanCode' is set
      if (rateplanCode === undefined || rateplanCode === null) {
        throw new Error("Missing the required parameter 'rateplanCode' when calling ratePlansGetRateplan");
      }

      let pathParams = {
        'hotelId': hotelId,
        'rateplanCode': rateplanCode
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ExtendedRateplanEntry;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratePlansGetRateplans operation.
     * @callback module:api/RatePlansApi~ratePlansGetRateplansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RateplansListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of rateplans for the specified hotel id matching the filter criteria.
     * With this call you can find rateplans for a hotel by different filters. By default and without any filter criteria              defined it will return you all active rateplans.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id you are trying to find rateplans for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sellingStatus] Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans.
     * @param {Boolean} [commissionable] Return all rateplans having commisionable status
     * @param {String} [group] Return all rateplans belonging to the specified rateplan group
     * @param {String} [baseRateplan] Return all rateplans having the specified rateplan as base rateplan
     * @param {String} [channelGroup] Return all rateplans that are sold through at least one channel out of the specified channel group
     * @param {String} [channelCode] Return all rateplans sold through the specified channel
     * @param {Array.<String>} [marketCodes] Return all rateplans having one of the specified values as a market code
     * @param {Array.<String>} [roomTypes] Return all rateplans by which at least one of the specified room types are sold
     * @param {Array.<String>} [includedServices] Return all rateplans having at least one of the specified services included
     * @param {Number} [skip] Amount of items to skip.
     * @param {Number} [top] Amount of items to select.
     * @param {module:model/String} [inlinecount] Return total number of items for a given filter criteria.
     * @param {module:api/RatePlansApi~ratePlansGetRateplansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RateplansListResponse}
     */
    ratePlansGetRateplans(appId, appKey, hotelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratePlansGetRateplans");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratePlansGetRateplans");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratePlansGetRateplans");
      }

      let pathParams = {
        'hotelId': hotelId
      };
      let queryParams = {
        'sellingStatus': opts['sellingStatus'],
        'commissionable': opts['commissionable'],
        'group': opts['group'],
        'baseRateplan': opts['baseRateplan'],
        'channelGroup': opts['channelGroup'],
        'channelCode': opts['channelCode'],
        'marketCodes': this.apiClient.buildCollectionParam(opts['marketCodes'], 'csv'),
        'roomTypes': this.apiClient.buildCollectionParam(opts['roomTypes'], 'csv'),
        'includedServices': this.apiClient.buildCollectionParam(opts['includedServices'], 'csv'),
        'skip': opts['skip'],
        'top': opts['top'],
        'inlinecount': opts['inlinecount']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RateplansListResponse;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rateplans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratePlansGetRateplansCount operation.
     * @callback module:api/RatePlansApi~ratePlansGetRateplansCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotalCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the count of all rateplans in the hotel matching the given filter criteria.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel you are counting the rateplans for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sellingStatus] Specify which rateplans to return. If you do not specify a value you will by default get active              rateplans.
     * @param {Boolean} [commissionable] Return all rateplans having commisionable status
     * @param {String} [group] Return all rateplans belonging to the specified rateplan group
     * @param {String} [baseRateplan] Return all rateplans having the specified rateplan as base rateplan
     * @param {String} [channelGroup] Return all rateplans that are sold through at least one channel out of the specified channel group
     * @param {String} [channelCode] Return all rateplans sold through the specified channel
     * @param {Array.<String>} [marketCodes] Return all rateplans having one of the specified values as a market code
     * @param {Array.<String>} [roomTypes] Return all rateplans by which at least one of the specified room types are sold
     * @param {Array.<String>} [includedServices] Return all rateplans having at least one of the specified services included
     * @param {module:api/RatePlansApi~ratePlansGetRateplansCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotalCountResponse}
     */
    ratePlansGetRateplansCount(appId, appKey, hotelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratePlansGetRateplansCount");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratePlansGetRateplansCount");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratePlansGetRateplansCount");
      }

      let pathParams = {
        'hotelId': hotelId
      };
      let queryParams = {
        'sellingStatus': opts['sellingStatus'],
        'commissionable': opts['commissionable'],
        'group': opts['group'],
        'baseRateplan': opts['baseRateplan'],
        'channelGroup': opts['channelGroup'],
        'channelCode': opts['channelCode'],
        'marketCodes': this.apiClient.buildCollectionParam(opts['marketCodes'], 'csv'),
        'roomTypes': this.apiClient.buildCollectionParam(opts['roomTypes'], 'csv'),
        'includedServices': this.apiClient.buildCollectionParam(opts['includedServices'], 'csv')
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = TotalCountResponse;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rateplans/$count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratePlansGetRates operation.
     * @callback module:api/RatePlansApi~ratePlansGetRatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the setup of the daily rates for a specific rateplan and a defined timeperiod.
     * With this call you can read the daily rates setup including the cancellation policy and minimum guarantee per day for the              specified rateplan. You can specify a timeperiod to read the daily rates for. The rateplan needs to be active for at least              one business day in the defined time period and have rates loaded.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the rateplan belongs to.
     * @param {String} rateplanCode The code of the rateplan you want to see details for.
     * @param {Date} from Defines the last business day you would like to get rates for. The maximum time span between <i>from</i>´and <i>to</i>              is limited to 365 days.
     * @param {Date} to Defines the first business day you would like to get rates for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [expand] You can expand the supplements per room type on demand. By default they are not shown.
     * @param {Number} [skip] Amount of items to skip.
     * @param {Number} [top] Amount of items to select.
     * @param {module:model/String} [inlinecount] Return total number of items for a given filter criteria.
     * @param {module:api/RatePlansApi~ratePlansGetRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RatesResponse}
     */
    ratePlansGetRates(appId, appKey, hotelId, rateplanCode, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratePlansGetRates");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratePlansGetRates");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratePlansGetRates");
      }
      // verify the required parameter 'rateplanCode' is set
      if (rateplanCode === undefined || rateplanCode === null) {
        throw new Error("Missing the required parameter 'rateplanCode' when calling ratePlansGetRates");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling ratePlansGetRates");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling ratePlansGetRates");
      }

      let pathParams = {
        'hotelId': hotelId,
        'rateplanCode': rateplanCode
      };
      let queryParams = {
        'expand': opts['expand'],
        'from': from,
        'to': to,
        'skip': opts['skip'],
        'top': opts['top'],
        'inlinecount': opts['inlinecount']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RatesResponse;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratePlansGetRatesCount operation.
     * @callback module:api/RatePlansApi~ratePlansGetRatesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotalCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the count of all active and loaded daily rates for the defined rateplan in a specified time period.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the rateplan belongs to.
     * @param {String} rateplanCode The code of the rateplan you want to count daily rates for.
     * @param {Date} from Defines the last business day you would like to get rates for. The maximum time span between <i>from</i>´and <i>to</i>              is limited to 365 days.
     * @param {Date} to Defines the first business day you would like to get rates for.
     * @param {module:api/RatePlansApi~ratePlansGetRatesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotalCountResponse}
     */
    ratePlansGetRatesCount(appId, appKey, hotelId, rateplanCode, from, to, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratePlansGetRatesCount");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratePlansGetRatesCount");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratePlansGetRatesCount");
      }
      // verify the required parameter 'rateplanCode' is set
      if (rateplanCode === undefined || rateplanCode === null) {
        throw new Error("Missing the required parameter 'rateplanCode' when calling ratePlansGetRatesCount");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling ratePlansGetRatesCount");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling ratePlansGetRatesCount");
      }

      let pathParams = {
        'hotelId': hotelId,
        'rateplanCode': rateplanCode
      };
      let queryParams = {
        'from': from,
        'to': to
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = TotalCountResponse;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/$count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratePlansPatchRate operation.
     * @callback module:api/RatePlansApi~ratePlansPatchRateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update a rate of the specified rateplan for a defined business day.
     * The hetras API is using this <a href=\"https://developer.hetras.com/docs/patch\" onfocus=\"this.blur()\" target=\"_blank\">Patch Specification</a>              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified business day.              <br /><br />              A request example:<br /><pre>              [                {                  \"op\": \"replace\", \"path\": \"/base_price\", \"value\": 120.00                }              ]              </pre><br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.<br />
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the rateplan belongs to.
     * @param {String} rateplanCode The code of the rateplan you want to update the daily rate details for.
     * @param {Date} businessDay The business day of the daily rate you want to update.
     * @param {Array.<module:model/OperationRatePatchRequest>} patchRequest A set of JSON Patch operations.
     * @param {module:api/RatePlansApi~ratePlansPatchRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    ratePlansPatchRate(appId, appKey, hotelId, rateplanCode, businessDay, patchRequest, callback) {
      let postBody = patchRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratePlansPatchRate");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratePlansPatchRate");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratePlansPatchRate");
      }
      // verify the required parameter 'rateplanCode' is set
      if (rateplanCode === undefined || rateplanCode === null) {
        throw new Error("Missing the required parameter 'rateplanCode' when calling ratePlansPatchRate");
      }
      // verify the required parameter 'businessDay' is set
      if (businessDay === undefined || businessDay === null) {
        throw new Error("Missing the required parameter 'businessDay' when calling ratePlansPatchRate");
      }
      // verify the required parameter 'patchRequest' is set
      if (patchRequest === undefined || patchRequest === null) {
        throw new Error("Missing the required parameter 'patchRequest' when calling ratePlansPatchRate");
      }

      let pathParams = {
        'hotelId': hotelId,
        'rateplanCode': rateplanCode,
        'businessDay': businessDay
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/{businessDay}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratePlansPatchRates operation.
     * @callback module:api/RatePlansApi~ratePlansPatchRatesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update a rate of the specified rateplan for the defined time period.
     * The hetras API is using this <a href=\"https://developer.hetras.com/docs/patch\" onfocus=\"this.blur()\" target=\"_blank\">Patch Specification</a>              to partially update an existing resource. Currently this call only allows to set the base price for non-derived rateplans if the rateplan              is active and already loaded for the specified time period.              <br /><br />              A request example:<br /><pre>              [                {                  \"op\": \"replace\", \"path\": \"/base_price\", \"value\": 120.00                }              ]              </pre><br />              For more details on how the API responds to errors please check our documentation on               <a href=\"https://developer.hetras.com/docs/errors/\" onfocus=\"this.blur()\">Error Handling</a>.<br />
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the rateplan belongs to.
     * @param {String} rateplanCode The code of the rateplan you want to update the daily rate details for.
     * @param {Date} from Defines the last business day you would like to get rates for. The maximum time span between <i>from</i>´and <i>to</i>              is limited to 365 days.
     * @param {Date} to Defines the first business day you would like to get rates for.
     * @param {Array.<module:model/OperationRatePatchRequest>} patchRequest A set of JSON Patch operations.
     * @param {module:api/RatePlansApi~ratePlansPatchRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    ratePlansPatchRates(appId, appKey, hotelId, rateplanCode, from, to, patchRequest, callback) {
      let postBody = patchRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ratePlansPatchRates");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling ratePlansPatchRates");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling ratePlansPatchRates");
      }
      // verify the required parameter 'rateplanCode' is set
      if (rateplanCode === undefined || rateplanCode === null) {
        throw new Error("Missing the required parameter 'rateplanCode' when calling ratePlansPatchRates");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling ratePlansPatchRates");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling ratePlansPatchRates");
      }
      // verify the required parameter 'patchRequest' is set
      if (patchRequest === undefined || patchRequest === null) {
        throw new Error("Missing the required parameter 'patchRequest' when calling ratePlansPatchRates");
      }

      let pathParams = {
        'hotelId': hotelId,
        'rateplanCode': rateplanCode
      };
      let queryParams = {
        'from': from,
        'to': to
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
