/**
 * hetras Hotel API Version 0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CodeFullEntry from '../model/CodeFullEntry';
import CodesListResponse from '../model/CodesListResponse';

/**
* Codes service.
* @module api/CodesApi
* @version v0
*/
export default class CodesApi {

    /**
    * Constructs a new CodesApi. 
    * @alias module:api/CodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the codesGetCode operation.
     * @callback module:api/CodesApi~codesGetCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodeFullEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the details for a specific code available for the hotel.
     * Read the details about a specific code available for the defined hotel.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id the code available for.
     * @param {String} id The code identifier you want to see details for.
     * @param {module:api/CodesApi~codesGetCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodeFullEntry}
     */
    codesGetCode(appId, appKey, hotelId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling codesGetCode");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling codesGetCode");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling codesGetCode");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling codesGetCode");
      }

      let pathParams = {
        'hotelId': hotelId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CodeFullEntry;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/codes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codesGetCodes operation.
     * @callback module:api/CodesApi~codesGetCodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of codes for the specified hotel either filtered by type or code.
     * With this call you can find codes for a hotel by type or code. By default and without any filter criteria              defined it will return you all available codes.
     * @param {String} appId Application identifier
     * @param {String} appKey Application key.
     * @param {Number} hotelId The hotel id you are trying to find codes for.
     * @param {Object} opts Optional parameters
     * @param {String} [code] Return all results matching the specified code. A code is unique in combination with the type              which means when you query for a code you could get multiple results each for a different type
     * @param {module:model/String} [type] Return all codes for the specified type
     * @param {module:api/CodesApi~codesGetCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodesListResponse}
     */
    codesGetCodes(appId, appKey, hotelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling codesGetCodes");
      }
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling codesGetCodes");
      }
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling codesGetCodes");
      }

      let pathParams = {
        'hotelId': hotelId
      };
      let queryParams = {
        'code': opts['code'],
        'type': opts['type']
      };
      let headerParams = {
        'App-Id': appId,
        'App-Key': appKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CodesListResponse;
      return this.apiClient.callApi(
        '/api/hotel/v0/hotels/{hotelId}/codes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
