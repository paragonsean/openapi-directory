/*
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is the data object for the response of a SunPosition API call
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:34.416765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SunPositionData {
  public static final String SERIALIZED_NAME_DAWN = "dawn";
  @SerializedName(SERIALIZED_NAME_DAWN)
  private OffsetDateTime dawn;

  public static final String SERIALIZED_NAME_DUSK = "dusk";
  @SerializedName(SERIALIZED_NAME_DUSK)
  private OffsetDateTime dusk;

  public static final String SERIALIZED_NAME_GOLDEN_HOUR = "goldenHour";
  @SerializedName(SERIALIZED_NAME_GOLDEN_HOUR)
  private OffsetDateTime goldenHour;

  public static final String SERIALIZED_NAME_GOLDEN_HOUR_END = "goldenHourEnd";
  @SerializedName(SERIALIZED_NAME_GOLDEN_HOUR_END)
  private OffsetDateTime goldenHourEnd;

  public static final String SERIALIZED_NAME_NADIR = "nadir";
  @SerializedName(SERIALIZED_NAME_NADIR)
  private OffsetDateTime nadir;

  public static final String SERIALIZED_NAME_NAUTICAL_DAWN = "nauticalDawn";
  @SerializedName(SERIALIZED_NAME_NAUTICAL_DAWN)
  private OffsetDateTime nauticalDawn;

  public static final String SERIALIZED_NAME_NAUTICAL_DUSK = "nauticalDusk";
  @SerializedName(SERIALIZED_NAME_NAUTICAL_DUSK)
  private OffsetDateTime nauticalDusk;

  public static final String SERIALIZED_NAME_NIGHT = "night";
  @SerializedName(SERIALIZED_NAME_NIGHT)
  private OffsetDateTime night;

  public static final String SERIALIZED_NAME_NIGHT_END = "nightEnd";
  @SerializedName(SERIALIZED_NAME_NIGHT_END)
  private OffsetDateTime nightEnd;

  public static final String SERIALIZED_NAME_SOLAR_NOON = "solarNoon";
  @SerializedName(SERIALIZED_NAME_SOLAR_NOON)
  private OffsetDateTime solarNoon;

  public static final String SERIALIZED_NAME_SUNRISE = "sunrise";
  @SerializedName(SERIALIZED_NAME_SUNRISE)
  private OffsetDateTime sunrise;

  public static final String SERIALIZED_NAME_SUNRISE_END = "sunriseEnd";
  @SerializedName(SERIALIZED_NAME_SUNRISE_END)
  private OffsetDateTime sunriseEnd;

  public static final String SERIALIZED_NAME_SUNSET = "sunset";
  @SerializedName(SERIALIZED_NAME_SUNSET)
  private OffsetDateTime sunset;

  public static final String SERIALIZED_NAME_SUNSET_START = "sunsetStart";
  @SerializedName(SERIALIZED_NAME_SUNSET_START)
  private OffsetDateTime sunsetStart;

  public SunPositionData() {
  }

  public SunPositionData dawn(OffsetDateTime dawn) {
    this.dawn = dawn;
    return this;
  }

  /**
   * Date and time of the dawn at local time of the given location
   * @return dawn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDawn() {
    return dawn;
  }

  public void setDawn(OffsetDateTime dawn) {
    this.dawn = dawn;
  }


  public SunPositionData dusk(OffsetDateTime dusk) {
    this.dusk = dusk;
    return this;
  }

  /**
   * Date and time of the dusk at local time of the given location
   * @return dusk
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDusk() {
    return dusk;
  }

  public void setDusk(OffsetDateTime dusk) {
    this.dusk = dusk;
  }


  public SunPositionData goldenHour(OffsetDateTime goldenHour) {
    this.goldenHour = goldenHour;
    return this;
  }

  /**
   * Date and time of the golden hour at local time of the given location
   * @return goldenHour
   */
  @javax.annotation.Nullable
  public OffsetDateTime getGoldenHour() {
    return goldenHour;
  }

  public void setGoldenHour(OffsetDateTime goldenHour) {
    this.goldenHour = goldenHour;
  }


  public SunPositionData goldenHourEnd(OffsetDateTime goldenHourEnd) {
    this.goldenHourEnd = goldenHourEnd;
    return this;
  }

  /**
   * Date and time of the golden hour end at local time of the given location
   * @return goldenHourEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getGoldenHourEnd() {
    return goldenHourEnd;
  }

  public void setGoldenHourEnd(OffsetDateTime goldenHourEnd) {
    this.goldenHourEnd = goldenHourEnd;
  }


  public SunPositionData nadir(OffsetDateTime nadir) {
    this.nadir = nadir;
    return this;
  }

  /**
   * Date and time of the nadir at local time of the given location
   * @return nadir
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNadir() {
    return nadir;
  }

  public void setNadir(OffsetDateTime nadir) {
    this.nadir = nadir;
  }


  public SunPositionData nauticalDawn(OffsetDateTime nauticalDawn) {
    this.nauticalDawn = nauticalDawn;
    return this;
  }

  /**
   * Date and time of the nautical dawn at local time of the given location
   * @return nauticalDawn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNauticalDawn() {
    return nauticalDawn;
  }

  public void setNauticalDawn(OffsetDateTime nauticalDawn) {
    this.nauticalDawn = nauticalDawn;
  }


  public SunPositionData nauticalDusk(OffsetDateTime nauticalDusk) {
    this.nauticalDusk = nauticalDusk;
    return this;
  }

  /**
   * Date and time of the nautical dusk at local time of the given location
   * @return nauticalDusk
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNauticalDusk() {
    return nauticalDusk;
  }

  public void setNauticalDusk(OffsetDateTime nauticalDusk) {
    this.nauticalDusk = nauticalDusk;
  }


  public SunPositionData night(OffsetDateTime night) {
    this.night = night;
    return this;
  }

  /**
   * Date and time of the night at local time of the given location
   * @return night
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNight() {
    return night;
  }

  public void setNight(OffsetDateTime night) {
    this.night = night;
  }


  public SunPositionData nightEnd(OffsetDateTime nightEnd) {
    this.nightEnd = nightEnd;
    return this;
  }

  /**
   * Date and time of the night end at local time of the given location
   * @return nightEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNightEnd() {
    return nightEnd;
  }

  public void setNightEnd(OffsetDateTime nightEnd) {
    this.nightEnd = nightEnd;
  }


  public SunPositionData solarNoon(OffsetDateTime solarNoon) {
    this.solarNoon = solarNoon;
    return this;
  }

  /**
   * Date and time of the solar moon at local time of the given location
   * @return solarNoon
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSolarNoon() {
    return solarNoon;
  }

  public void setSolarNoon(OffsetDateTime solarNoon) {
    this.solarNoon = solarNoon;
  }


  public SunPositionData sunrise(OffsetDateTime sunrise) {
    this.sunrise = sunrise;
    return this;
  }

  /**
   * Date and time of the sunris at local time of the given location
   * @return sunrise
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSunrise() {
    return sunrise;
  }

  public void setSunrise(OffsetDateTime sunrise) {
    this.sunrise = sunrise;
  }


  public SunPositionData sunriseEnd(OffsetDateTime sunriseEnd) {
    this.sunriseEnd = sunriseEnd;
    return this;
  }

  /**
   * Date and time of the sunrise end at local time of the given location
   * @return sunriseEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSunriseEnd() {
    return sunriseEnd;
  }

  public void setSunriseEnd(OffsetDateTime sunriseEnd) {
    this.sunriseEnd = sunriseEnd;
  }


  public SunPositionData sunset(OffsetDateTime sunset) {
    this.sunset = sunset;
    return this;
  }

  /**
   * Date and time of the sunset at local time of the given location
   * @return sunset
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSunset() {
    return sunset;
  }

  public void setSunset(OffsetDateTime sunset) {
    this.sunset = sunset;
  }


  public SunPositionData sunsetStart(OffsetDateTime sunsetStart) {
    this.sunsetStart = sunsetStart;
    return this;
  }

  /**
   * Date and time of the sunset start at local time of the given location
   * @return sunsetStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSunsetStart() {
    return sunsetStart;
  }

  public void setSunsetStart(OffsetDateTime sunsetStart) {
    this.sunsetStart = sunsetStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SunPositionData sunPositionData = (SunPositionData) o;
    return Objects.equals(this.dawn, sunPositionData.dawn) &&
        Objects.equals(this.dusk, sunPositionData.dusk) &&
        Objects.equals(this.goldenHour, sunPositionData.goldenHour) &&
        Objects.equals(this.goldenHourEnd, sunPositionData.goldenHourEnd) &&
        Objects.equals(this.nadir, sunPositionData.nadir) &&
        Objects.equals(this.nauticalDawn, sunPositionData.nauticalDawn) &&
        Objects.equals(this.nauticalDusk, sunPositionData.nauticalDusk) &&
        Objects.equals(this.night, sunPositionData.night) &&
        Objects.equals(this.nightEnd, sunPositionData.nightEnd) &&
        Objects.equals(this.solarNoon, sunPositionData.solarNoon) &&
        Objects.equals(this.sunrise, sunPositionData.sunrise) &&
        Objects.equals(this.sunriseEnd, sunPositionData.sunriseEnd) &&
        Objects.equals(this.sunset, sunPositionData.sunset) &&
        Objects.equals(this.sunsetStart, sunPositionData.sunsetStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dawn, dusk, goldenHour, goldenHourEnd, nadir, nauticalDawn, nauticalDusk, night, nightEnd, solarNoon, sunrise, sunriseEnd, sunset, sunsetStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SunPositionData {\n");
    sb.append("    dawn: ").append(toIndentedString(dawn)).append("\n");
    sb.append("    dusk: ").append(toIndentedString(dusk)).append("\n");
    sb.append("    goldenHour: ").append(toIndentedString(goldenHour)).append("\n");
    sb.append("    goldenHourEnd: ").append(toIndentedString(goldenHourEnd)).append("\n");
    sb.append("    nadir: ").append(toIndentedString(nadir)).append("\n");
    sb.append("    nauticalDawn: ").append(toIndentedString(nauticalDawn)).append("\n");
    sb.append("    nauticalDusk: ").append(toIndentedString(nauticalDusk)).append("\n");
    sb.append("    night: ").append(toIndentedString(night)).append("\n");
    sb.append("    nightEnd: ").append(toIndentedString(nightEnd)).append("\n");
    sb.append("    solarNoon: ").append(toIndentedString(solarNoon)).append("\n");
    sb.append("    sunrise: ").append(toIndentedString(sunrise)).append("\n");
    sb.append("    sunriseEnd: ").append(toIndentedString(sunriseEnd)).append("\n");
    sb.append("    sunset: ").append(toIndentedString(sunset)).append("\n");
    sb.append("    sunsetStart: ").append(toIndentedString(sunsetStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dawn");
    openapiFields.add("dusk");
    openapiFields.add("goldenHour");
    openapiFields.add("goldenHourEnd");
    openapiFields.add("nadir");
    openapiFields.add("nauticalDawn");
    openapiFields.add("nauticalDusk");
    openapiFields.add("night");
    openapiFields.add("nightEnd");
    openapiFields.add("solarNoon");
    openapiFields.add("sunrise");
    openapiFields.add("sunriseEnd");
    openapiFields.add("sunset");
    openapiFields.add("sunsetStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SunPositionData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SunPositionData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SunPositionData is not found in the empty JSON string", SunPositionData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SunPositionData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SunPositionData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SunPositionData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SunPositionData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SunPositionData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SunPositionData.class));

       return (TypeAdapter<T>) new TypeAdapter<SunPositionData>() {
           @Override
           public void write(JsonWriter out, SunPositionData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SunPositionData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SunPositionData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SunPositionData
   * @throws IOException if the JSON string is invalid with respect to SunPositionData
   */
  public static SunPositionData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SunPositionData.class);
  }

  /**
   * Convert an instance of SunPositionData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

