/*
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataAirportsSearch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:34.416765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataAirportsSearch {
  public static final String SERIALIZED_NAME_AIRLINEROUTESCOUNT = "airlineroutescount";
  @SerializedName(SERIALIZED_NAME_AIRLINEROUTESCOUNT)
  private Integer airlineroutescount;

  public static final String SERIALIZED_NAME_AIRPORT_WEBSITE = "airport_website";
  @SerializedName(SERIALIZED_NAME_AIRPORT_WEBSITE)
  private String airportWebsite;

  public static final String SERIALIZED_NAME_ALTITUDE = "altitude";
  @SerializedName(SERIALIZED_NAME_ALTITUDE)
  private Integer altitude;

  public static final String SERIALIZED_NAME_CITYNAME = "cityname";
  @SerializedName(SERIALIZED_NAME_CITYNAME)
  private String cityname;

  public static final String SERIALIZED_NAME_COUNTRYCODE = "countrycode";
  @SerializedName(SERIALIZED_NAME_COUNTRYCODE)
  private String countrycode;

  public static final String SERIALIZED_NAME_DESTINATIONSCOUNT = "destinationscount";
  @SerializedName(SERIALIZED_NAME_DESTINATIONSCOUNT)
  private Integer destinationscount;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private String distance;

  public static final String SERIALIZED_NAME_IATACODE = "iatacode";
  @SerializedName(SERIALIZED_NAME_IATACODE)
  private String iatacode;

  public static final String SERIALIZED_NAME_ICAO = "icao";
  @SerializedName(SERIALIZED_NAME_ICAO)
  private String icao;

  public static final String SERIALIZED_NAME_ISTOPDESTINATION = "istopdestination";
  @SerializedName(SERIALIZED_NAME_ISTOPDESTINATION)
  private Boolean istopdestination;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_WIKIPEDIA_PAGE = "wikipedia_page";
  @SerializedName(SERIALIZED_NAME_WIKIPEDIA_PAGE)
  private String wikipediaPage;

  public DataAirportsSearch() {
  }

  public DataAirportsSearch airlineroutescount(Integer airlineroutescount) {
    this.airlineroutescount = airlineroutescount;
    return this;
  }

  /**
   * Get airlineroutescount
   * @return airlineroutescount
   */
  @javax.annotation.Nullable
  public Integer getAirlineroutescount() {
    return airlineroutescount;
  }

  public void setAirlineroutescount(Integer airlineroutescount) {
    this.airlineroutescount = airlineroutescount;
  }


  public DataAirportsSearch airportWebsite(String airportWebsite) {
    this.airportWebsite = airportWebsite;
    return this;
  }

  /**
   * Get airportWebsite
   * @return airportWebsite
   */
  @javax.annotation.Nullable
  public String getAirportWebsite() {
    return airportWebsite;
  }

  public void setAirportWebsite(String airportWebsite) {
    this.airportWebsite = airportWebsite;
  }


  public DataAirportsSearch altitude(Integer altitude) {
    this.altitude = altitude;
    return this;
  }

  /**
   * Get altitude
   * @return altitude
   */
  @javax.annotation.Nullable
  public Integer getAltitude() {
    return altitude;
  }

  public void setAltitude(Integer altitude) {
    this.altitude = altitude;
  }


  public DataAirportsSearch cityname(String cityname) {
    this.cityname = cityname;
    return this;
  }

  /**
   * Get cityname
   * @return cityname
   */
  @javax.annotation.Nullable
  public String getCityname() {
    return cityname;
  }

  public void setCityname(String cityname) {
    this.cityname = cityname;
  }


  public DataAirportsSearch countrycode(String countrycode) {
    this.countrycode = countrycode;
    return this;
  }

  /**
   * Get countrycode
   * @return countrycode
   */
  @javax.annotation.Nullable
  public String getCountrycode() {
    return countrycode;
  }

  public void setCountrycode(String countrycode) {
    this.countrycode = countrycode;
  }


  public DataAirportsSearch destinationscount(Integer destinationscount) {
    this.destinationscount = destinationscount;
    return this;
  }

  /**
   * Get destinationscount
   * @return destinationscount
   */
  @javax.annotation.Nullable
  public Integer getDestinationscount() {
    return destinationscount;
  }

  public void setDestinationscount(Integer destinationscount) {
    this.destinationscount = destinationscount;
  }


  public DataAirportsSearch distance(String distance) {
    this.distance = distance;
    return this;
  }

  /**
   * only in response when operating a lat/long search
   * @return distance
   */
  @javax.annotation.Nullable
  public String getDistance() {
    return distance;
  }

  public void setDistance(String distance) {
    this.distance = distance;
  }


  public DataAirportsSearch iatacode(String iatacode) {
    this.iatacode = iatacode;
    return this;
  }

  /**
   * Get iatacode
   * @return iatacode
   */
  @javax.annotation.Nullable
  public String getIatacode() {
    return iatacode;
  }

  public void setIatacode(String iatacode) {
    this.iatacode = iatacode;
  }


  public DataAirportsSearch icao(String icao) {
    this.icao = icao;
    return this;
  }

  /**
   * Get icao
   * @return icao
   */
  @javax.annotation.Nullable
  public String getIcao() {
    return icao;
  }

  public void setIcao(String icao) {
    this.icao = icao;
  }


  public DataAirportsSearch istopdestination(Boolean istopdestination) {
    this.istopdestination = istopdestination;
    return this;
  }

  /**
   * Get istopdestination
   * @return istopdestination
   */
  @javax.annotation.Nullable
  public Boolean getIstopdestination() {
    return istopdestination;
  }

  public void setIstopdestination(Boolean istopdestination) {
    this.istopdestination = istopdestination;
  }


  public DataAirportsSearch latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public DataAirportsSearch longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public DataAirportsSearch name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DataAirportsSearch timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public DataAirportsSearch wikipediaPage(String wikipediaPage) {
    this.wikipediaPage = wikipediaPage;
    return this;
  }

  /**
   * Get wikipediaPage
   * @return wikipediaPage
   */
  @javax.annotation.Nullable
  public String getWikipediaPage() {
    return wikipediaPage;
  }

  public void setWikipediaPage(String wikipediaPage) {
    this.wikipediaPage = wikipediaPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataAirportsSearch dataAirportsSearch = (DataAirportsSearch) o;
    return Objects.equals(this.airlineroutescount, dataAirportsSearch.airlineroutescount) &&
        Objects.equals(this.airportWebsite, dataAirportsSearch.airportWebsite) &&
        Objects.equals(this.altitude, dataAirportsSearch.altitude) &&
        Objects.equals(this.cityname, dataAirportsSearch.cityname) &&
        Objects.equals(this.countrycode, dataAirportsSearch.countrycode) &&
        Objects.equals(this.destinationscount, dataAirportsSearch.destinationscount) &&
        Objects.equals(this.distance, dataAirportsSearch.distance) &&
        Objects.equals(this.iatacode, dataAirportsSearch.iatacode) &&
        Objects.equals(this.icao, dataAirportsSearch.icao) &&
        Objects.equals(this.istopdestination, dataAirportsSearch.istopdestination) &&
        Objects.equals(this.latitude, dataAirportsSearch.latitude) &&
        Objects.equals(this.longitude, dataAirportsSearch.longitude) &&
        Objects.equals(this.name, dataAirportsSearch.name) &&
        Objects.equals(this.timezone, dataAirportsSearch.timezone) &&
        Objects.equals(this.wikipediaPage, dataAirportsSearch.wikipediaPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airlineroutescount, airportWebsite, altitude, cityname, countrycode, destinationscount, distance, iatacode, icao, istopdestination, latitude, longitude, name, timezone, wikipediaPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataAirportsSearch {\n");
    sb.append("    airlineroutescount: ").append(toIndentedString(airlineroutescount)).append("\n");
    sb.append("    airportWebsite: ").append(toIndentedString(airportWebsite)).append("\n");
    sb.append("    altitude: ").append(toIndentedString(altitude)).append("\n");
    sb.append("    cityname: ").append(toIndentedString(cityname)).append("\n");
    sb.append("    countrycode: ").append(toIndentedString(countrycode)).append("\n");
    sb.append("    destinationscount: ").append(toIndentedString(destinationscount)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    iatacode: ").append(toIndentedString(iatacode)).append("\n");
    sb.append("    icao: ").append(toIndentedString(icao)).append("\n");
    sb.append("    istopdestination: ").append(toIndentedString(istopdestination)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    wikipediaPage: ").append(toIndentedString(wikipediaPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("airlineroutescount");
    openapiFields.add("airport_website");
    openapiFields.add("altitude");
    openapiFields.add("cityname");
    openapiFields.add("countrycode");
    openapiFields.add("destinationscount");
    openapiFields.add("distance");
    openapiFields.add("iatacode");
    openapiFields.add("icao");
    openapiFields.add("istopdestination");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("name");
    openapiFields.add("timezone");
    openapiFields.add("wikipedia_page");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataAirportsSearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataAirportsSearch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataAirportsSearch is not found in the empty JSON string", DataAirportsSearch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataAirportsSearch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataAirportsSearch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("airport_website") != null && !jsonObj.get("airport_website").isJsonNull()) && !jsonObj.get("airport_website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `airport_website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("airport_website").toString()));
      }
      if ((jsonObj.get("cityname") != null && !jsonObj.get("cityname").isJsonNull()) && !jsonObj.get("cityname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityname").toString()));
      }
      if ((jsonObj.get("countrycode") != null && !jsonObj.get("countrycode").isJsonNull()) && !jsonObj.get("countrycode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countrycode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countrycode").toString()));
      }
      if ((jsonObj.get("distance") != null && !jsonObj.get("distance").isJsonNull()) && !jsonObj.get("distance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distance").toString()));
      }
      if ((jsonObj.get("iatacode") != null && !jsonObj.get("iatacode").isJsonNull()) && !jsonObj.get("iatacode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iatacode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iatacode").toString()));
      }
      if ((jsonObj.get("icao") != null && !jsonObj.get("icao").isJsonNull()) && !jsonObj.get("icao").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icao` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icao").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("wikipedia_page") != null && !jsonObj.get("wikipedia_page").isJsonNull()) && !jsonObj.get("wikipedia_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikipedia_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikipedia_page").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataAirportsSearch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataAirportsSearch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataAirportsSearch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataAirportsSearch.class));

       return (TypeAdapter<T>) new TypeAdapter<DataAirportsSearch>() {
           @Override
           public void write(JsonWriter out, DataAirportsSearch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataAirportsSearch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataAirportsSearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataAirportsSearch
   * @throws IOException if the JSON string is invalid with respect to DataAirportsSearch
   */
  public static DataAirportsSearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataAirportsSearch.class);
  }

  /**
   * Convert an instance of DataAirportsSearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

